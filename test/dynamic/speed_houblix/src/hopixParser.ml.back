
module MenhirBasics = struct
  
  exception Error
  
  type token = HopixParserTokens.token
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

type ('tail, 'semantic, 'final) _menhir_stack = 'tail * ('tail, 'final) _menhir_state * 'semantic * Lexing.position * Lexing.position

and ('tail, 'final) _menhir_state = 
  (* Know stack symbols :  define_type *)
  | MenhirState335 : (('tail, (HopixAST.definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  definition list(located(definition)) *)
  | MenhirState334 : ((('tail, (HopixAST.definition), 'final) _menhir_stack, (HopixAST.t), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  definition *)
  | MenhirState333 : (('tail, (HopixAST.definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  function_definitions *)
  | MenhirState332 : (('tail, (HopixAST.value_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  list(located(definition)) EOF *)
  | MenhirState331 : ((('tail, (HopixAST.t), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  list(located(definition)) *)
  | MenhirState330 : (('tail, (HopixAST.t), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  program *)
  | MenhirState329 : (('tail, (HopixAST.t), (HopixAST.t)) _menhir_stack, (HopixAST.t)) _menhir_state
  (* Know stack symbols :  value_definition *)
  | MenhirState328 : (('tail, (HopixAST.definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  vdefinition *)
  | MenhirState327 : (('tail, (HopixAST.value_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN identifier COLON type_scheme *)
  | MenhirState326 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.type_scheme), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN identifier COLON *)
  | MenhirState325 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN identifier *)
  | MenhirState324 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN *)
  | MenhirState323 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  function_definition AND separated_nonempty_list(AND,function_definition) *)
  | MenhirState322 : (((('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  function_definition AND *)
  | MenhirState321 : ((('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  function_definition *)
  | MenhirState320 : (('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FUN separated_nonempty_list(AND,function_definition) *)
  | MenhirState319 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FUN *)
  | MenhirState318 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) EQUAL expr *)
  | MenhirState317 : (((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) EQUAL *)
  | MenhirState316 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) *)
  | MenhirState315 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier *)
  | MenhirState314 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET *)
  | MenhirState313 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(PIPE) separated_nonempty_list(PIPE,sum_type_constructor_definition) *)
  | MenhirState312 : ((('tail, (unit option), 'final) _menhir_stack, ((HopixAST.constructor Position.located * HopixAST.ty Position.located list)
  list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  sum_type_constructor_definition PIPE separated_nonempty_list(PIPE,sum_type_constructor_definition) *)
  | MenhirState311 : (((('tail, (HopixAST.constructor Position.located * HopixAST.ty Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, ((HopixAST.constructor Position.located * HopixAST.ty Position.located list)
  list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  sum_type_constructor_definition PIPE *)
  | MenhirState310 : ((('tail, (HopixAST.constructor Position.located * HopixAST.ty Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  sum_type_constructor_definition *)
  | MenhirState309 : (('tail, (HopixAST.constructor Position.located * HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(PIPE) *)
  | MenhirState308 : (('tail, (unit option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor option(type_argument_declaration) EQUAL type_definition *)
  | MenhirState307 : (((((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.type_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_def) RCBRACK *)
  | MenhirState306 : (((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.ty Position.located) list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_def) *)
  | MenhirState305 : ((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.ty Position.located) list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK *)
  | MenhirState304 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor option(type_argument_declaration) EQUAL *)
  | MenhirState303 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor option(type_argument_declaration) *)
  | MenhirState302 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor *)
  | MenhirState301 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE *)
  | MenhirState300 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  error *)
  | MenhirState299 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  *)
  | MenhirState298 : ('tail, (HopixAST.t)) _menhir_state
  (* Know stack symbols :  define_type *)
  | MenhirState297 : (('tail, (HopixAST.definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  definition *)
  | MenhirState296 : (('tail, (HopixAST.definition), (HopixAST.definition)) _menhir_stack, (HopixAST.definition)) _menhir_state
  (* Know stack symbols :  function_definitions *)
  | MenhirState295 : (('tail, (HopixAST.value_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  value_definition *)
  | MenhirState294 : (('tail, (HopixAST.definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  vdefinition *)
  | MenhirState293 : (('tail, (HopixAST.value_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(delimited(LBRACK,nonempty_list(located(type_variable)),RBRACK)) type_ *)
  | MenhirState292 : ((('tail, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(delimited(LBRACK,nonempty_list(located(type_variable)),RBRACK)) *)
  | MenhirState291 : (('tail, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN identifier COLON type_scheme *)
  | MenhirState290 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.type_scheme), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN identifier COLON *)
  | MenhirState289 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN identifier *)
  | MenhirState288 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXTERN *)
  | MenhirState287 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  function_definition AND separated_nonempty_list(AND,function_definition) *)
  | MenhirState286 : (((('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  function_definition AND *)
  | MenhirState285 : ((('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  function_definition *)
  | MenhirState284 : (('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier pattern EQUAL expr *)
  | MenhirState283 : (((((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier pattern EQUAL *)
  | MenhirState282 : ((((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier pattern *)
  | MenhirState281 : (((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier *)
  | MenhirState280 : ((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) *)
  | MenhirState279 : (('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FUN separated_nonempty_list(AND,function_definition) *)
  | MenhirState278 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FUN *)
  | MenhirState277 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) EQUAL expr *)
  | MenhirState276 : (((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  WHILE LPAR expr RPAR LCBRACK expr RCBRACK *)
  | MenhirState275 : (((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  WHILE LPAR expr RPAR LCBRACK expr *)
  | MenhirState274 : ((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  WHILE LPAR expr RPAR LCBRACK *)
  | MenhirState273 : (((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  WHILE LPAR expr RPAR *)
  | MenhirState272 : ((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  WHILE LPAR expr *)
  | MenhirState271 : (((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID option(type_argument_apply) LPAR separated_nonempty_list(COMMA,located(binop_prio_0_expr)) RPAR *)
  | MenhirState270 : (((((('tail, (string), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID option(type_argument_apply) LPAR separated_nonempty_list(COMMA,located(binop_prio_0_expr)) *)
  | MenhirState269 : ((((('tail, (string), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  REF atomic_expr *)
  | MenhirState268 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr COMMA separated_nonempty_list(COMMA,located(binop_prio_0_expr)) *)
  | MenhirState267 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr COMMA *)
  | MenhirState266 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr *)
  | MenhirState265 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr COMMA separated_nonempty_list(COMMA,located(binop_prio_0_expr)) *)
  | MenhirState264 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr COMMA *)
  | MenhirState263 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr *)
  | MenhirState262 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR expr COLON type_ RPAR *)
  | MenhirState261 : (((((('tail, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR expr COLON type_ *)
  | MenhirState260 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR expr COLON *)
  | MenhirState259 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR expr RPAR *)
  | MenhirState258 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR expr *)
  | MenhirState257 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_twolong_list(COMMA,located(binop_prio_0_expr)) RPAR *)
  | MenhirState256 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_twolong_list(COMMA,located(binop_prio_0_expr)) *)
  | MenhirState255 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(PIPE) separated_nonempty_list(PIPE,located(switch_branch)) *)
  | MenhirState254 : ((('tail, (unit option), 'final) _menhir_stack, (HopixAST.branch Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern ARROW expr *)
  | MenhirState253 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern ARROW *)
  | MenhirState252 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern *)
  | MenhirState251 : (('tail, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  switch_branch PIPE separated_nonempty_list(PIPE,located(switch_branch)) *)
  | MenhirState250 : (((('tail, (HopixAST.branch), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.branch Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  switch_branch PIPE *)
  | MenhirState249 : ((('tail, (HopixAST.branch), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  switch_branch *)
  | MenhirState248 : (('tail, (HopixAST.branch), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(PIPE) *)
  | MenhirState247 : (('tail, (unit option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  SWITCH LPAR expr RPAR LCBRACK switch_cases RCBRACK *)
  | MenhirState246 : (((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.branch Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  SWITCH LPAR expr RPAR LCBRACK switch_cases *)
  | MenhirState245 : ((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.branch Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  SWITCH LPAR expr RPAR LCBRACK *)
  | MenhirState244 : (((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  SWITCH LPAR expr RPAR *)
  | MenhirState243 : ((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  SWITCH LPAR expr *)
  | MenhirState242 : (((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) EQUAL nodef_expr *)
  | MenhirState241 : (((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label EQUAL nodef_expr *)
  | MenhirState240 : (((('tail, (HopixAST.label), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR LCBRACK expr RCBRACK ELSE LCBRACK expr RCBRACK *)
  | MenhirState239 : (((((((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR LCBRACK expr RCBRACK ELSE LCBRACK expr *)
  | MenhirState238 : ((((((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR LCBRACK expr RCBRACK ELSE LCBRACK *)
  | MenhirState237 : (((((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR LCBRACK expr RCBRACK ELSE *)
  | MenhirState236 : ((((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR LCBRACK expr RCBRACK *)
  | MenhirState235 : (((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR LCBRACK expr *)
  | MenhirState234 : ((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR LCBRACK *)
  | MenhirState233 : (((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr RPAR *)
  | MenhirState232 : ((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR expr *)
  | MenhirState231 : (((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FUN separated_nonempty_list(AND,simple_function_definition) *)
  | MenhirState230 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier pattern EQUAL nodef_expr *)
  | MenhirState229 : (((((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR expr TO expr RPAR LCBRACK expr RCBRACK *)
  | MenhirState228 : (((((((((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR expr TO expr RPAR LCBRACK expr *)
  | MenhirState227 : ((((((((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR expr TO expr RPAR LCBRACK *)
  | MenhirState226 : (((((((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR expr TO expr RPAR *)
  | MenhirState225 : ((((((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR expr TO expr *)
  | MenhirState224 : (((((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR expr TO *)
  | MenhirState223 : ((((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR expr *)
  | MenhirState222 : (((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO LCBRACK expr RCBRACK WHILE LPAR expr RPAR *)
  | MenhirState221 : ((((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO LCBRACK expr RCBRACK WHILE LPAR expr *)
  | MenhirState220 : (((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO LCBRACK expr RCBRACK WHILE LPAR *)
  | MenhirState219 : ((((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO LCBRACK expr RCBRACK WHILE *)
  | MenhirState218 : (((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO LCBRACK expr RCBRACK *)
  | MenhirState217 : ((((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO LCBRACK expr *)
  | MenhirState216 : (((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_vdefinition SEMICOLON expr *)
  | MenhirState215 : (((('tail, (HopixAST.value_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  nodef_expr SEMICOLON expr *)
  | MenhirState214 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  nodef_expr SEMICOLON *)
  | MenhirState213 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  nodef_expr *)
  | MenhirState212 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_function_definitions *)
  | MenhirState211 : (('tail, (HopixAST.value_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_vdefinition SEMICOLON *)
  | MenhirState210 : ((('tail, (HopixAST.value_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_vdefinition *)
  | MenhirState209 : (('tail, (HopixAST.value_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr COLONEQUAL binop_prio_0_expr *)
  | MenhirState208 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr COLONEQUAL *)
  | MenhirState207 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr DOUBLEAMPERSAND binop_prio_0_expr *)
  | MenhirState206 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr DOUBLEAMPERSAND *)
  | MenhirState205 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr PIPEPIPE binop_prio_0_expr *)
  | MenhirState204 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr PIPEPIPE *)
  | MenhirState203 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_0_expr *)
  | MenhirState202 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr EQUALQUESTION binop_prio_1_expr *)
  | MenhirState201 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr EQUALQUESTION *)
  | MenhirState200 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr LANGLEEQUALQUESTION binop_prio_1_expr *)
  | MenhirState199 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr LANGLEEQUALQUESTION *)
  | MenhirState198 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr LANGLEQUESTION binop_prio_1_expr *)
  | MenhirState197 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr LANGLEQUESTION *)
  | MenhirState196 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr RANGLEEQUALQUESTION binop_prio_1_expr *)
  | MenhirState195 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr RANGLEEQUALQUESTION *)
  | MenhirState194 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr MINUS binop_prio_1_expr *)
  | MenhirState193 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr MINUS *)
  | MenhirState192 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr PLUS binop_prio_1_expr *)
  | MenhirState191 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr PLUS *)
  | MenhirState190 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr RANGLEQUESTION binop_prio_1_expr *)
  | MenhirState189 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr RANGLEQUESTION *)
  | MenhirState188 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_1_expr *)
  | MenhirState187 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_2_expr SLASH binop_prio_2_expr *)
  | MenhirState186 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_2_expr SLASH *)
  | MenhirState185 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  apply_expr *)
  | MenhirState184 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_2_expr STAR binop_prio_2_expr *)
  | MenhirState183 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_2_expr STAR *)
  | MenhirState182 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  binop_prio_2_expr *)
  | MenhirState181 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  control_structure *)
  | MenhirState180 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  BACKSLASH pattern ARROW nodef_expr *)
  | MenhirState179 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  ref_deref_expr nonempty_list(located(ref_deref_expr)) *)
  | MenhirState178 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_expr *)
  | MenhirState177 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  ref_deref_expr nonempty_list(located(ref_deref_expr)) *)
  | MenhirState176 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, (HopixAST.expression Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  ref_deref_expr *)
  | MenhirState175 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  ref_deref_expr *)
  | MenhirState174 : (('tail, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  twolong_list(located(ref_deref_expr)) *)
  | MenhirState173 : (('tail, (HopixAST.expression Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  BACKSLASH pattern ARROW *)
  | MenhirState172 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  BACKSLASH pattern *)
  | MenhirState171 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  BACKSLASH *)
  | MenhirState170 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO LCBRACK *)
  | MenhirState169 : ((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  DO *)
  | MenhirState168 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_expr DOT label *)
  | MenhirState167 : (((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.label), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_expr DOT *)
  | MenhirState166 : ((('tail, (HopixAST.expression), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXCLAMATION atomic_expr *)
  | MenhirState165 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.expression), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  identifier option(type_argument_apply) *)
  | MenhirState164 : ((('tail, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  identifier *)
  | MenhirState163 : (('tail, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  CHAR *)
  | MenhirState162 : (('tail, (char), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  EXCLAMATION *)
  | MenhirState161 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN LPAR *)
  | MenhirState160 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier IN *)
  | MenhirState159 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR identifier *)
  | MenhirState158 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FOR *)
  | MenhirState157 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier pattern EQUAL *)
  | MenhirState156 : ((((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier pattern *)
  | MenhirState155 : (((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID option(type_argument_apply) option(delimited(LPAR,separated_nonempty_list(COMMA,located(pattern)),RPAR)) *)
  | MenhirState154 : (((('tail, (string), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, (HopixAST.pattern Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_nonempty_list(COMMA,located(pattern)) RPAR *)
  | MenhirState153 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_nonempty_list(COMMA,located(pattern)) *)
  | MenhirState152 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern COMMA separated_nonempty_list(COMMA,located(pattern)) *)
  | MenhirState151 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern COMMA *)
  | MenhirState150 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern *)
  | MenhirState149 : (('tail, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern COMMA separated_nonempty_list(COMMA,located(pattern)) *)
  | MenhirState148 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  pattern COMMA *)
  | MenhirState147 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR pattern *)
  | MenhirState146 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_twolong_list(COMMA,located(pattern)) RPAR *)
  | MenhirState145 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_twolong_list(COMMA,located(pattern)) *)
  | MenhirState144 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern AMPERSAND separated_nonempty_list(AMPERSAND,located(atomic_pattern)) *)
  | MenhirState143 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern AMPERSAND *)
  | MenhirState142 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern *)
  | MenhirState141 : (('tail, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern AMPERSAND separated_nonempty_list(AMPERSAND,located(atomic_pattern)) *)
  | MenhirState140 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern AMPERSAND *)
  | MenhirState139 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern COLON type_ *)
  | MenhirState138 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern COLON *)
  | MenhirState137 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern PIPE separated_nonempty_list(PIPE,located(atomic_pattern)) *)
  | MenhirState136 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern PIPE *)
  | MenhirState135 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern *)
  | MenhirState134 : (('tail, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern PIPE separated_nonempty_list(PIPE,located(atomic_pattern)) *)
  | MenhirState133 : (((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR pattern RPAR *)
  | MenhirState132 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR pattern *)
  | MenhirState131 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR *)
  | MenhirState130 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern PIPE *)
  | MenhirState129 : ((('tail, (HopixAST.pattern), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  atomic_pattern *)
  | MenhirState128 : (('tail, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  identifier *)
  | MenhirState127 : (('tail, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label EQUAL pattern *)
  | MenhirState126 : (((('tail, (HopixAST.label), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.pattern), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  separated_twolong_list(AMPERSAND,located(atomic_pattern)) *)
  | MenhirState125 : (('tail, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  separated_twolong_list(PIPE,located(atomic_pattern)) *)
  | MenhirState124 : (('tail, (HopixAST.pattern Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  CHAR *)
  | MenhirState123 : (('tail, (char), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  INT *)
  | MenhirState122 : (('tail, (Mint.t), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label EQUAL *)
  | MenhirState121 : ((('tail, (HopixAST.label), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label *)
  | MenhirState120 : (('tail, (HopixAST.label), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_pattern COMMA separated_nonempty_list(COMMA,record_pattern) *)
  | MenhirState119 : (((('tail, (HopixAST.label Position.located * HopixAST.pattern Position.located), 'final) _menhir_stack, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.pattern Position.located) list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_pattern COMMA *)
  | MenhirState118 : ((('tail, (HopixAST.label Position.located * HopixAST.pattern Position.located), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_pattern *)
  | MenhirState117 : (('tail, (HopixAST.label Position.located * HopixAST.pattern Position.located), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_pattern) RCBRACK option(type_argument_apply) *)
  | MenhirState116 : ((((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.pattern Position.located) list), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_pattern) RCBRACK *)
  | MenhirState115 : (((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.pattern Position.located) list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_pattern) *)
  | MenhirState114 : ((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.pattern Position.located) list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK *)
  | MenhirState113 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR *)
  | MenhirState112 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  STRING *)
  | MenhirState111 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UNDERSCORE *)
  | MenhirState110 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR *)
  | MenhirState109 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID option(type_argument_apply) *)
  | MenhirState108 : ((('tail, (string), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID *)
  | MenhirState107 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) identifier *)
  | MenhirState106 : ((('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(preceded(COLON,located(type_scheme))) *)
  | MenhirState105 : (('tail, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_function_definition AND separated_nonempty_list(AND,simple_function_definition) *)
  | MenhirState104 : (((('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_function_definition AND *)
  | MenhirState103 : ((('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_function_definition *)
  | MenhirState102 : (('tail, (HopixAST.function_definition HopixAST.polymorphic_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  FUN *)
  | MenhirState101 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF LPAR *)
  | MenhirState100 : ((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  IF *)
  | MenhirState99 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  INT *)
  | MenhirState98 : (('tail, (Mint.t), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label EQUAL *)
  | MenhirState97 : ((('tail, (HopixAST.label), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label *)
  | MenhirState96 : (('tail, (HopixAST.label), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_expr_member COMMA separated_nonempty_list(COMMA,record_expr_member) *)
  | MenhirState95 : (((('tail, (HopixAST.label Position.located * HopixAST.expression Position.located), 'final) _menhir_stack, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.expression Position.located)
  list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_expr_member COMMA *)
  | MenhirState94 : ((('tail, (HopixAST.label Position.located * HopixAST.expression Position.located), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_expr_member *)
  | MenhirState93 : (('tail, (HopixAST.label Position.located * HopixAST.expression Position.located), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_expr_member) RCBRACK option(type_argument_apply) *)
  | MenhirState92 : ((((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.expression Position.located)
  list), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_expr_member) RCBRACK *)
  | MenhirState91 : (((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.expression Position.located)
  list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_expr_member) *)
  | MenhirState90 : ((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.expression Position.located)
  list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK *)
  | MenhirState89 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) EQUAL *)
  | MenhirState88 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) *)
  | MenhirState87 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier *)
  | MenhirState86 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET *)
  | MenhirState85 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  SWITCH LPAR *)
  | MenhirState84 : ((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  SWITCH *)
  | MenhirState83 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR *)
  | MenhirState82 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  REF *)
  | MenhirState81 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  STRING *)
  | MenhirState80 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID option(type_argument_apply) LPAR *)
  | MenhirState79 : (((('tail, (string), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID option(type_argument_apply) *)
  | MenhirState78 : ((('tail, (string), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID *)
  | MenhirState77 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  WHILE LPAR *)
  | MenhirState76 : ((('tail, unit, 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  WHILE *)
  | MenhirState75 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) EQUAL *)
  | MenhirState74 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier option(preceded(COLON,located(type_scheme))) *)
  | MenhirState73 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, (HopixAST.type_scheme Position.located option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(delimited(LBRACK,nonempty_list(located(type_variable)),RBRACK)) type_ *)
  | MenhirState72 : ((('tail, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(delimited(LBRACK,nonempty_list(located(type_variable)),RBRACK)) *)
  | MenhirState71 : (('tail, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  COLON type_scheme *)
  | MenhirState70 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.type_scheme), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LBRACK nonempty_list(located(type_variable)) RBRACK *)
  | MenhirState69 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.type_variable Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LBRACK nonempty_list(located(type_variable)) *)
  | MenhirState68 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.type_variable Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_variable nonempty_list(located(type_variable)) *)
  | MenhirState67 : ((('tail, (HopixAST.type_variable), 'final) _menhir_stack, (HopixAST.type_variable Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_variable *)
  | MenhirState66 : (('tail, (HopixAST.type_variable), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LBRACK *)
  | MenhirState65 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  COLON *)
  | MenhirState64 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET identifier *)
  | MenhirState63 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.identifier), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LOWERCASE_ID *)
  | MenhirState62 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LET *)
  | MenhirState61 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(PIPE) separated_nonempty_list(PIPE,sum_type_constructor_definition) *)
  | MenhirState60 : ((('tail, (unit option), 'final) _menhir_stack, ((HopixAST.constructor Position.located * HopixAST.ty Position.located list)
  list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  sum_type_constructor_definition PIPE separated_nonempty_list(PIPE,sum_type_constructor_definition) *)
  | MenhirState59 : (((('tail, (HopixAST.constructor Position.located * HopixAST.ty Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, ((HopixAST.constructor Position.located * HopixAST.ty Position.located list)
  list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  sum_type_constructor_definition PIPE *)
  | MenhirState58 : ((('tail, (HopixAST.constructor Position.located * HopixAST.ty Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  sum_type_constructor_definition *)
  | MenhirState57 : (('tail, (HopixAST.constructor Position.located * HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID option(sum_type_constructor_arg_list) *)
  | MenhirState56 : ((('tail, (string), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  sum_type_constructor_arg_list *)
  | MenhirState55 : (('tail, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_nonempty_list(COMMA,located(type_)) RPAR *)
  | MenhirState54 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR separated_nonempty_list(COMMA,located(type_)) *)
  | MenhirState53 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR *)
  | MenhirState52 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  UPPERCASE_ID *)
  | MenhirState51 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  option(PIPE) *)
  | MenhirState50 : (('tail, (unit option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor option(type_argument_declaration) EQUAL type_definition *)
  | MenhirState49 : (((((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.type_definition), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label COLON type_ *)
  | MenhirState48 : (((('tail, (HopixAST.label), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR type_ RPAR *)
  | MenhirState47 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR type_ *)
  | MenhirState46 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  very_simple_type STAR separated_nonempty_list(STAR,located(very_simple_type)) *)
  | MenhirState45 : (((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  very_simple_type STAR separated_nonempty_list(STAR,located(very_simple_type)) *)
  | MenhirState44 : (((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_constructor option(type_argument_apply) *)
  | MenhirState43 : ((('tail, (HopixAST.type_constructor), 'final) _menhir_stack, (HopixAST.ty Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_argument_apply *)
  | MenhirState42 : (('tail, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LANGLE loption(separated_nonempty_list(COMMA,located(type_))) RANGLE *)
  | MenhirState41 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LANGLE loption(separated_nonempty_list(COMMA,located(type_))) *)
  | MenhirState40 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  separated_nonempty_list(COMMA,located(type_)) *)
  | MenhirState39 : (('tail, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_ ARROW type_ *)
  | MenhirState38 : (((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_ ARROW *)
  | MenhirState37 : ((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_ COMMA separated_nonempty_list(COMMA,located(type_)) *)
  | MenhirState36 : (((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  separated_twolong_list(STAR,located(very_simple_type)) *)
  | MenhirState35 : (('tail, (HopixAST.ty Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  simple_type *)
  | MenhirState34 : (('tail, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_ COMMA *)
  | MenhirState33 : ((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_ *)
  | MenhirState32 : (('tail, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LANGLE *)
  | MenhirState31 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_constructor *)
  | MenhirState30 : (('tail, (HopixAST.type_constructor), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_variable *)
  | MenhirState29 : (('tail, (HopixAST.type_variable), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  very_simple_type STAR *)
  | MenhirState28 : ((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  very_simple_type *)
  | MenhirState27 : (('tail, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  very_simple_type STAR *)
  | MenhirState26 : ((('tail, (HopixAST.ty), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  very_simple_type *)
  | MenhirState25 : (('tail, (HopixAST.ty), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LPAR *)
  | MenhirState24 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label COLON *)
  | MenhirState23 : ((('tail, (HopixAST.label), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  label *)
  | MenhirState22 : (('tail, (HopixAST.label), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_def COMMA separated_nonempty_list(COMMA,record_def) *)
  | MenhirState21 : (((('tail, (HopixAST.label Position.located * HopixAST.ty Position.located), 'final) _menhir_stack, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.ty Position.located) list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_def COMMA *)
  | MenhirState20 : ((('tail, (HopixAST.label Position.located * HopixAST.ty Position.located), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  record_def *)
  | MenhirState19 : (('tail, (HopixAST.label Position.located * HopixAST.ty Position.located), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_def) RCBRACK *)
  | MenhirState18 : (((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.ty Position.located) list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK separated_nonempty_list(COMMA,record_def) *)
  | MenhirState17 : ((('tail, unit, 'final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.ty Position.located) list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LOWERCASE_ID *)
  | MenhirState16 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LCBRACK *)
  | MenhirState15 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  PIPE *)
  | MenhirState14 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor option(type_argument_declaration) EQUAL *)
  | MenhirState13 : ((((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor option(type_argument_declaration) *)
  | MenhirState12 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, (HopixAST.type_variable Position.located list option), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_argument_declaration *)
  | MenhirState11 : (('tail, (HopixAST.type_variable Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LANGLE separated_nonempty_list(COMMA,located(type_variable)) RANGLE *)
  | MenhirState10 : (((('tail, unit, 'final) _menhir_stack, (HopixAST.type_variable Position.located list), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LANGLE separated_nonempty_list(COMMA,located(type_variable)) *)
  | MenhirState9 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.type_variable Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_variable COMMA separated_nonempty_list(COMMA,located(type_variable)) *)
  | MenhirState8 : (((('tail, (HopixAST.type_variable), 'final) _menhir_stack, unit, 'final) _menhir_stack, (HopixAST.type_variable Position.located list), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_variable COMMA *)
  | MenhirState7 : ((('tail, (HopixAST.type_variable), 'final) _menhir_stack, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  type_variable *)
  | MenhirState6 : (('tail, (HopixAST.type_variable), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE_VARIABLE *)
  | MenhirState5 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LANGLE *)
  | MenhirState4 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE type_constructor *)
  | MenhirState3 : ((('tail, unit, 'final) _menhir_stack, (HopixAST.type_constructor), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  LOWERCASE_ID *)
  | MenhirState2 : (('tail, (string), 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  TYPE *)
  | MenhirState1 : (('tail, unit, 'final) _menhir_stack, 'final) _menhir_state
  (* Know stack symbols :  *)
  | MenhirState0 : ('tail, (HopixAST.definition)) _menhir_state
   (* -*- tuareg -*- *)

  open HopixAST
  open Position
  open HopixParserTokens
  
  let list_of_list_option o =
    match o with 
    | Some l -> l
    | None -> []

  let add_backtick s = 
    "`" ^ s ^ "`"

  let binop_name binop =
    Id(add_backtick 
        (match binop with
        | PLUS                -> "+"
        | MINUS               -> "-"
        | STAR                -> "*"
        | SLASH               -> "/"
        | EQUALQUESTION       -> "=?"
        | LANGLEEQUALQUESTION -> "<=?"
        | RANGLEEQUALQUESTION -> ">=?"
        | LANGLEQUESTION      -> "<?"
        | RANGLEQUESTION      -> ">?"
        | DOUBLEAMPERSAND              -> "&&"
        | PIPEPIPE            -> "||"
        | _                   -> failwith "not a binop (should never be reached no matter user input)"))


let _menhir_discard =
  fun _menhir_lexer _menhir_lexbuf ->
    _menhir_lexer _menhir_lexbuf

let rec _menhir_reduce_147 : type  tail final. (tail, (HopixAST.value_definition), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _menhir_s, d, _startpos_d_, _endpos_d_) = _menhir_stack in
    let _startpos = _startpos_d_ in
    let _endpos = _endpos_d_ in
    let _v =                                                         ( d                     ) in
    _menhir_goto_vdefinition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_332 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState332 in
    _menhir_reduce_147 _menhir_stack _menhir_lexbuf _menhir_lexer _tok

and _menhir_reduce_043 : type  tail final. (tail, (HopixAST.definition), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _menhir_s, val_def, _startpos_val_def_, _endpos_val_def_) = _menhir_stack in
    let _startpos = _startpos_val_def_ in
    let _endpos = _endpos_val_def_ in
    let _v =                                       ( val_def              ) in
    _menhir_goto_definition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_328 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState328 in
    _menhir_reduce_043 _menhir_stack _menhir_lexbuf _menhir_lexer _tok

and _menhir_reduce_050 : type  tail final. ((tail, unit, final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos_l_ in
    let _v =                                                           ( RecFunctions(l) ) in
    match _menhir_s with
    | MenhirState333 ->
        _menhir_run_332 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState298 ->
        _menhir_run_332 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState0 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState295 in
        _menhir_reduce_147 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        assert false

and _menhir_reduce_095 : type  tail final. (((tail, (HopixAST.function_definition HopixAST.polymorphic_definition), final) _menhir_stack, unit, final) _menhir_stack, (HopixAST.function_definition HopixAST.polymorphic_definition list), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
    let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let _startpos = _startpos_x_ in
    let _endpos = _endpos_xs_ in
    let _v =     ( x :: xs ) in
    _menhir_goto_separated_nonempty_list_AND_function_definition_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_reduce_145 : type  tail final. (tail, (HopixAST.value_definition), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _menhir_s, v, _startpos_v_, _endpos_v_) = _menhir_stack in
    let _startpos = _startpos_v_ in
    let _endpos = _endpos_v_ in
    let _v =                   ( DefineValue v ) in
    match _menhir_s with
    | MenhirState333 ->
        _menhir_run_328 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState298 ->
        _menhir_run_328 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState0 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState294 in
        _menhir_reduce_043 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        assert false

and _menhir_run_327 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState327 in
    _menhir_reduce_145 _menhir_stack _menhir_lexbuf _menhir_lexer _tok

and _menhir_goto_separated_nonempty_list_PIPE_located_switch_branch__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState247 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState254 in
        let (_menhir_stack, _, cases, _startpos_cases_, _endpos_cases_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cases_ in
        let _v =                                                                            ( cases ) in
        (match _menhir_s with
        | MenhirState244 ->
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState245 in
            (match _tok with
            | HopixParserTokens.RCBRACK ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState246 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                let (_menhir_stack, _, _7, _startpos__7_, _endpos__7_) = _menhir_stack in
                let (_menhir_stack, _, cases, _startpos_cases_, _endpos_cases_) = _menhir_stack in
                let (_menhir_stack, _, _5, _startpos__5_, _endpos__5_) = _menhir_stack in
                let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
                let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
                let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
                let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
                let _startpos = _startpos__1_ in
                let _endpos = _endpos__7_ in
                let _v =
                  let cond =
                    let _endpos = _endpos_x_ in
                    let _startpos = _startpos_x_ in
                          ( Position.with_poss _startpos _endpos x )
                  in
                                                           ( Case(cond, cases)                     )
                in
                _menhir_goto_control_structure _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                raise _eRR)
        | _ ->
            assert false)
    | MenhirState249 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState250 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_PIPE_located_switch_branch__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_run_180 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState180 in
    let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
    let _startpos = _startpos_e_ in
    let _endpos = _endpos_e_ in
    let _v =                                            ( e                                    ) in
    _menhir_goto_nodef_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_goto_separated_nonempty_list_AND_function_definition_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState321 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState322 in
        _menhir_reduce_095 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState318 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState319 in
        _menhir_reduce_050 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState285 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState286 in
        _menhir_reduce_095 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState277 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState278 in
        _menhir_reduce_050 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        assert false

and _menhir_goto_vdefinition : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState333 ->
        _menhir_run_327 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState298 ->
        _menhir_run_327 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState0 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState293 in
        _menhir_reduce_145 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        assert false

and _menhir_run_248 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState248 in
    match _tok with
    | HopixParserTokens.PIPE ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState249 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RCBRACK ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_PIPE_located_switch_branch__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_goto_control_structure : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState316 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_180 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_run_284 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState284 in
    match _tok with
    | HopixParserTokens.AND ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState285 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _ ->
            _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_320 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState320 in
    match _tok with
    | HopixParserTokens.AND ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState321 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _ ->
            _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =     ( [ x ] ) in
        _menhir_goto_separated_nonempty_list_AND_function_definition_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_reduce_146 : type  tail final. (((((tail, unit, final) _menhir_stack, (HopixAST.identifier), final) _menhir_stack, (HopixAST.type_scheme Position.located option), final) _menhir_stack, unit, final) _menhir_stack, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
    let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
    let (_menhir_stack, _, s, _startpos_s_, _endpos_s_) = _menhir_stack in
    let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos_x_inlined1_ in
    let _v =
      let e =
        let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
      let id =
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                                              ( SimpleValue(id, s, e) )
    in
    _menhir_goto_vdefinition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_211 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState211 in
    let (_menhir_stack, _menhir_s, d, _startpos_d_, _endpos_d_) = _menhir_stack in
    let _startpos = _startpos_d_ in
    let _endpos = _endpos_d_ in
    let _v =                                                         ( d                     ) in
    _menhir_goto_simple_vdefinition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_goto_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState316 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState317 in
        _menhir_reduce_146 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState282 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState283 in
        let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
        let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, s, _startpos_s_, _endpos_s_) = _menhir_stack in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_x_inlined2_ in
        let _v =
          let e =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let arg =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let id =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                            ( (id, s, FunctionDefinition(arg, e)) )
        in
        (match _menhir_s with
        | MenhirState321 ->
            _menhir_run_320 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState318 ->
            _menhir_run_320 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState285 ->
            _menhir_run_284 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState277 ->
            _menhir_run_284 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | MenhirState74 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState276 in
        _menhir_reduce_146 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState273 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState274 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState275 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _7, _startpos__7_, _endpos__7_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _5, _startpos__5_, _endpos__5_) = _menhir_stack in
            let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__7_ in
            let _v =
              let body =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let cond =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                       ( While(cond, body)                     )
            in
            _menhir_goto_control_structure _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState76 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState271 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState272 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState273 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.WHILE ->
                    let _v = () in
                    _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.UPPERCASE_ID _v ->
                    _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.SWITCH ->
                    let _v = () in
                    _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.STRING _v ->
                    _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.REF ->
                    let _v = () in
                    _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LPAR ->
                    let _v = () in
                    _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LOWERCASE_ID _v ->
                    _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LET ->
                    let _v = () in
                    _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LCBRACK ->
                    let _v = () in
                    _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.INT _v ->
                    _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.IF ->
                    let _v = () in
                    _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FUN ->
                    let _v = () in
                    _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FOR ->
                    let _v = () in
                    _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.EXCLAMATION ->
                    let _v = () in
                    _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.DO ->
                    let _v = () in
                    _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.CHAR _v ->
                    _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.BACKSLASH ->
                    let _v = () in
                    _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | _ ->
                    raise _eRR)
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState82 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState257 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState258 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, e, _startpos_e_, _endpos_e_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _v =                                         ( e                    ) in
            _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | HopixParserTokens.COLON ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState259 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.TYPE_VARIABLE _v ->
                _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState252 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState253 in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let e =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let p =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                     ( Branch(p, e) )
        in
        (match _menhir_s with
        | MenhirState249 ->
            _menhir_run_248 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState247 ->
            _menhir_run_248 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | MenhirState84 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState242 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState243 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState244 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.PIPE ->
                    let _v = () in
                    _menhir_run_014 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.CHAR _ | HopixParserTokens.INT _ | HopixParserTokens.LCBRACK | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.STRING _ | HopixParserTokens.UNDERSCORE | HopixParserTokens.UPPERCASE_ID _ ->
                    _menhir_reduce_065 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
                | _ ->
                    raise _eRR)
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState237 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState238 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState239 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _11, _startpos__11_, _endpos__11_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, _9, _startpos__9_, _endpos__9_) = _menhir_stack in
            let (_menhir_stack, _, _8, _startpos__8_, _endpos__8_) = _menhir_stack in
            let (_menhir_stack, _, _7, _startpos__7_, _endpos__7_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _5, _startpos__5_, _endpos__5_) = _menhir_stack in
            let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__11_ in
            let _v =
              let body2 =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let body1 =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let cond =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                       ( IfThenElse(cond, body1, body2) )
            in
            _menhir_goto_control_structure _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState233 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState234 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState235 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.ELSE ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState236 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.LCBRACK ->
                    let _v = () in
                    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                    let _menhir_s = MenhirState237 in
                    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                    (match _tok with
                    | HopixParserTokens.WHILE ->
                        let _v = () in
                        _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.UPPERCASE_ID _v ->
                        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.SWITCH ->
                        let _v = () in
                        _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.STRING _v ->
                        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.REF ->
                        let _v = () in
                        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LPAR ->
                        let _v = () in
                        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LOWERCASE_ID _v ->
                        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LET ->
                        let _v = () in
                        _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LCBRACK ->
                        let _v = () in
                        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.INT _v ->
                        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.IF ->
                        let _v = () in
                        _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.FUN ->
                        let _v = () in
                        _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.FOR ->
                        let _v = () in
                        _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.EXCLAMATION ->
                        let _v = () in
                        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.DO ->
                        let _v = () in
                        _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.CHAR _v ->
                        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.BACKSLASH ->
                        let _v = () in
                        _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | _ ->
                        raise _eRR)
                | _ ->
                    raise _eRR)
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState100 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState231 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState232 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState233 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.WHILE ->
                    let _v = () in
                    _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.UPPERCASE_ID _v ->
                    _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.SWITCH ->
                    let _v = () in
                    _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.STRING _v ->
                    _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.REF ->
                    let _v = () in
                    _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LPAR ->
                    let _v = () in
                    _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LOWERCASE_ID _v ->
                    _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LET ->
                    let _v = () in
                    _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LCBRACK ->
                    let _v = () in
                    _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.INT _v ->
                    _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.IF ->
                    let _v = () in
                    _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FUN ->
                    let _v = () in
                    _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FOR ->
                    let _v = () in
                    _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.EXCLAMATION ->
                    let _v = () in
                    _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.DO ->
                    let _v = () in
                    _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.CHAR _v ->
                    _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.BACKSLASH ->
                    let _v = () in
                    _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | _ ->
                    raise _eRR)
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState226 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState227 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState228 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _11, _startpos__11_, _endpos__11_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined3, _startpos_x_inlined3_, _endpos_x_inlined3_) = _menhir_stack in
            let (_menhir_stack, _, _9, _startpos__9_, _endpos__9_) = _menhir_stack in
            let (_menhir_stack, _, _8, _startpos__8_, _endpos__8_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, _6, _startpos__6_, _endpos__6_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__11_ in
            let _v =
              let body =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined3_, _startpos_x_inlined3_, x_inlined3) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let e2 =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let e1 =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let id =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                       ( For(id, e1, e2, body)                 )
            in
            _menhir_goto_control_structure _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState223 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState224 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState225 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState226 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.WHILE ->
                    let _v = () in
                    _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.UPPERCASE_ID _v ->
                    _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.SWITCH ->
                    let _v = () in
                    _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.STRING _v ->
                    _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.REF ->
                    let _v = () in
                    _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LPAR ->
                    let _v = () in
                    _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LOWERCASE_ID _v ->
                    _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LET ->
                    let _v = () in
                    _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LCBRACK ->
                    let _v = () in
                    _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.INT _v ->
                    _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.IF ->
                    let _v = () in
                    _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FUN ->
                    let _v = () in
                    _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FOR ->
                    let _v = () in
                    _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.EXCLAMATION ->
                    let _v = () in
                    _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.DO ->
                    let _v = () in
                    _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.CHAR _v ->
                    _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.BACKSLASH ->
                    let _v = () in
                    _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | _ ->
                    raise _eRR)
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState160 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState222 in
        (match _tok with
        | HopixParserTokens.TO ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState223 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.SWITCH ->
                let _v = () in
                _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LET ->
                let _v = () in
                _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.IF ->
                let _v = () in
                _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FUN ->
                let _v = () in
                _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FOR ->
                let _v = () in
                _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.DO ->
                let _v = () in
                _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.BACKSLASH ->
                let _v = () in
                _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState219 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState220 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState221 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _8, _startpos__8_, _endpos__8_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _6, _startpos__6_, _endpos__6_) = _menhir_stack in
            let (_menhir_stack, _, _5, _startpos__5_, _endpos__5_) = _menhir_stack in
            let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__8_ in
            let _v =
              let cond =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let body =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                       ( Sequence([ body 
                                                    ; { value=While(cond, body)
                                                      ; position=body.position }
                                                    ])                           )
            in
            _menhir_goto_control_structure _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState169 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState216 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState217 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState218 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.LPAR ->
                    let _v = () in
                    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                    let _menhir_s = MenhirState219 in
                    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                    (match _tok with
                    | HopixParserTokens.WHILE ->
                        let _v = () in
                        _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.UPPERCASE_ID _v ->
                        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.SWITCH ->
                        let _v = () in
                        _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.STRING _v ->
                        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.REF ->
                        let _v = () in
                        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LPAR ->
                        let _v = () in
                        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LOWERCASE_ID _v ->
                        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LET ->
                        let _v = () in
                        _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.LCBRACK ->
                        let _v = () in
                        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.INT _v ->
                        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.IF ->
                        let _v = () in
                        _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.FUN ->
                        let _v = () in
                        _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.FOR ->
                        let _v = () in
                        _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.EXCLAMATION ->
                        let _v = () in
                        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.DO ->
                        let _v = () in
                        _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.CHAR _v ->
                        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | HopixParserTokens.BACKSLASH ->
                        let _v = () in
                        _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                    | _ ->
                        raise _eRR)
                | _ ->
                    raise _eRR)
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState210 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState215 in
        let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, d, _startpos_d_, _endpos_d_) = _menhir_stack in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_x_ in
        let _v =
          let e =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                              ( Define(d, e)        )
        in
        _menhir_goto_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState214 in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let e2 =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let e1 =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                              ( Sequence ([e1; e2]) )
        in
        _menhir_goto_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_AND_simple_function_definition_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState101 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState230 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =                                                                  ( RecFunctions(l) ) in
        (match _menhir_s with
        | MenhirState316 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState282 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState74 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState273 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState76 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState82 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState252 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState84 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState237 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState233 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState100 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState226 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState223 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState160 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState219 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState169 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState213 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState210 ->
            _menhir_run_211 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | MenhirState103 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState104 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =     ( x :: xs ) in
        _menhir_goto_separated_nonempty_list_AND_simple_function_definition_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_COMMA_record_expr_member_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState94 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState95 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =     ( x :: xs ) in
        _menhir_goto_separated_nonempty_list_COMMA_record_expr_member_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState89 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState90 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState91 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LANGLE ->
                let _v = () in
                _menhir_run_031 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.AND | HopixParserTokens.CHAR _ | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOT | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXCLAMATION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.INT _ | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LCBRACK | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.REF | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.STRING _ | HopixParserTokens.TO | HopixParserTokens.TYPE | HopixParserTokens.UPPERCASE_ID _ ->
                _menhir_reduce_075 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_run_209 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState209 in
    match _tok with
    | HopixParserTokens.SEMICOLON ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState210 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LET ->
            let _v = () in
            _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FUN ->
            let _v = () in
            _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_212 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState212 in
    match _tok with
    | HopixParserTokens.SEMICOLON ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState213 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LET ->
            let _v = () in
            _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FUN ->
            let _v = () in
            _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.TO | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v =                                                     ( e                   ) in
        _menhir_goto_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_102 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState102 in
    match _tok with
    | HopixParserTokens.AND ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState103 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _ ->
            _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | HopixParserTokens.SEMICOLON ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =     ( [ x ] ) in
        _menhir_goto_separated_nonempty_list_AND_simple_function_definition_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_093 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState93 in
    match _tok with
    | HopixParserTokens.COMMA ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState94 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RCBRACK ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =     ( [ x ] ) in
        _menhir_goto_separated_nonempty_list_COMMA_record_expr_member_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_goto_simple_vdefinition : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState316 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_209 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_COMMA_located_binop_prio_0_expr__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState79 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState269 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState270 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
            let (_menhir_stack, _, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let (_menhir_stack, _, type_args, _startpos_type_args_, _endpos_type_args_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, id, _startpos_id_, _endpos_id_) = _menhir_stack in
            let _startpos = _startpos_id_ in
            let _endpos = _endpos__3_ in
            let _v =
              let args =
                let x =                                                                          ( l ) in
                    ( Some x )
              in
              let const =
                let x =                     ( KId id ) in
                let (_endpos_x_, _startpos_x_) = (_endpos_id_, _startpos_id_) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                      ( Tagged(const, type_args, list_of_list_option args) )
            in
            _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState266 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState267 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_binop_prio_0_expr__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState264 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_l_ in
        let _v =
          let e1 =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                          ( e1 :: l )
        in
        (match _menhir_s with
        | MenhirState82 ->
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState255 in
            (match _tok with
            | HopixParserTokens.RPAR ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState256 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
                let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
                let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
                let _startpos = _startpos__1_ in
                let _endpos = _endpos__3_ in
                let _v =
                  let t =                                                                            ( Tuple(l) ) in
                                                          ( t                    )
                in
                _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                raise _eRR)
        | _ ->
            assert false)
    | _ ->
        assert false

and _menhir_run_202 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState202 in
    match _tok with
    | HopixParserTokens.PIPEPIPE ->
        let _v = () in
        _menhir_run_203 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.DOUBLEAMPERSAND ->
        let _v = () in
        _menhir_run_205 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.COLONEQUAL ->
        let _v = () in
        _menhir_run_207 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COMMA | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
        _menhir_reduce_057 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        raise _eRR

and _menhir_goto_nodef_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState88 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState241 in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
        let (_menhir_stack, _, s, _startpos_s_, _endpos_s_) = _menhir_stack in
        let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let e =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let id =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                                  ( SimpleValue(id, s, e) )
        in
        _menhir_goto_simple_vdefinition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState240 in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let e =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let label =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                             ( (label, e) )
        in
        (match _menhir_s with
        | MenhirState94 ->
            _menhir_run_093 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState89 ->
            _menhir_run_093 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | MenhirState156 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState229 in
        let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
        let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, s, _startpos_s_, _endpos_s_) = _menhir_stack in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_x_inlined2_ in
        let _v =
          let e =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let arg =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let id =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                            ( (id, s, FunctionDefinition(arg, e)) )
        in
        (match _menhir_s with
        | MenhirState103 ->
            _menhir_run_102 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState101 ->
            _menhir_run_102 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | MenhirState316 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_212 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState179 in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
        let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let body =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let arg =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                     ( Fun(FunctionDefinition(arg, body))   )
        in
        _menhir_goto_nodef_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_reduce_057 : type  tail final. (tail, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
    let _startpos = _startpos_e_ in
    let _endpos = _endpos_e_ in
    let _v =                                            ( e                                    ) in
    _menhir_goto_nodef_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_207 : type  tail final. (tail, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> ((tail, (HopixAST.expression), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState207 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_205 : type  tail final. (tail, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> ((tail, (HopixAST.expression), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState205 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_203 : type  tail final. (tail, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> ((tail, (HopixAST.expression), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState203 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_265 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState265 in
    match _tok with
    | HopixParserTokens.PIPEPIPE ->
        let _v = () in
        _menhir_run_203 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.DOUBLEAMPERSAND ->
        let _v = () in
        _menhir_run_205 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.COMMA ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState266 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RPAR ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_binop_prio_0_expr__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_reduce_044 : type  tail final. (tail, (HopixAST.definition), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _menhir_s, type_def, _startpos_type_def_, _endpos_type_def_) = _menhir_stack in
    let _startpos = _startpos_type_def_ in
    let _endpos = _endpos_type_def_ in
    let _v =                                       ( type_def             ) in
    _menhir_goto_definition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_335 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState335 in
    _menhir_reduce_044 _menhir_stack _menhir_lexbuf _menhir_lexer _tok

and _menhir_goto_binop_prio_0_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState79 ->
        _menhir_run_265 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState266 ->
        _menhir_run_265 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        _menhir_run_265 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState262 in
        (match _tok with
        | HopixParserTokens.PIPEPIPE ->
            let _v = () in
            _menhir_run_203 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DOUBLEAMPERSAND ->
            let _v = () in
            _menhir_run_205 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.COMMA ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState263 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | HopixParserTokens.COLONEQUAL ->
            let _v = () in
            _menhir_run_207 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.COLON | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON ->
            _menhir_reduce_057 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
        | _ ->
            raise _eRR)
    | MenhirState207 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState208 in
        (match _tok with
        | HopixParserTokens.PIPEPIPE ->
            let _v = () in
            _menhir_run_203 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DOUBLEAMPERSAND ->
            let _v = () in
            _menhir_run_205 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COMMA | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined1_ in
            let _v =
              let e2 =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let e1 =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                         ( Assign(e1, e2)                       )
            in
            _menhir_goto_nodef_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState205 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState206 in
        (match _tok with
        | HopixParserTokens.PIPEPIPE ->
            let _v = () in
            _menhir_run_203 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined2_ in
            let _v =
              let e =
                let e2 =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let b =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                  let x =
                    let p =
                      let _endpos = _endpos_x_ in
                      let _startpos = _startpos_x_ in
                            ( Position.with_poss _startpos _endpos x )
                    in
                                                     ( Variable(with_val (binop_name DOUBLEAMPERSAND) p, None)   )
                  in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let e1 =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                                                    ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
              in
                                                                        ( e )
            in
            _menhir_goto_binop_prio_0_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState203 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState204 in
        let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined2_ in
        let _v =
          let e =
            let e2 =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let b =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
              let x =
                let p =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                                 ( Variable(with_val (binop_name PIPEPIPE) p, None)          )
              in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let e1 =
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
                                                                ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
          in
                                                                    ( e )
        in
        _menhir_goto_binop_prio_0_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState316 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_202 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_reduce_042 : type  tail final. (((((tail, unit, final) _menhir_stack, (HopixAST.type_constructor), final) _menhir_stack, (HopixAST.type_variable Position.located list option), final) _menhir_stack, unit, final) _menhir_stack, (HopixAST.type_definition), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, t, _startpos_t_, _endpos_t_) = _menhir_stack in
    let (_menhir_stack, _, _4, _startpos__4_, _endpos__4_) = _menhir_stack in
    let (_menhir_stack, _, args, _startpos_args_, _endpos_args_) = _menhir_stack in
    let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos_t_ in
    let _v =
      let id =
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                                     ( DefineType(id, list_of_list_option args, t) )
    in
    match _menhir_s with
    | MenhirState298 ->
        _menhir_run_335 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState333 ->
        _menhir_run_335 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState0 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState297 in
        _menhir_reduce_044 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        assert false

and _menhir_reduce_142 : type  tail final. (((tail, unit, final) _menhir_stack, ((HopixAST.label Position.located * HopixAST.ty Position.located) list), final) _menhir_stack, unit, final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
    let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos__3_ in
    let _v =                                                                                 ( DefineRecordType l ) in
    _menhir_goto_type_definition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_333 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState333 in
    match _tok with
    | HopixParserTokens.TYPE ->
        let _v = () in
        _menhir_run_300 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LET ->
        let _v = () in
        _menhir_run_313 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.FUN ->
        let _v = () in
        _menhir_run_318 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXTERN ->
        let _v = () in
        _menhir_run_323 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EOF ->
        _menhir_reduce_053 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_run_187 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState187 in
    match _tok with
    | HopixParserTokens.RANGLEQUESTION ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState188 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RANGLEEQUALQUESTION ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState194 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.PLUS ->
        let _v = () in
        _menhir_run_190 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.MINUS ->
        let _v = () in
        _menhir_run_192 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LANGLEQUESTION ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState196 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.LANGLEEQUALQUESTION ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState198 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.EQUALQUESTION ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState200 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v =                                                           ( e ) in
        _menhir_goto_binop_prio_0_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_192 : type  tail final. (tail, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> ((tail, (HopixAST.expression), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState192 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_190 : type  tail final. (tail, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> ((tail, (HopixAST.expression), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState190 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_goto_type_definition : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState303 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState307 in
        _menhir_reduce_042 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState13 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState49 in
        _menhir_reduce_042 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_COMMA_located_type___ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState52 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState53 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState54 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _v =                                                                ( l ) in
            (match _menhir_s with
            | MenhirState51 ->
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState55 in
                let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
                let _startpos = _startpos_x_ in
                let _endpos = _endpos_x_ in
                let _v =     ( Some x ) in
                _menhir_goto_option_sum_type_constructor_arg_list_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                assert false)
        | _ ->
            raise _eRR)
    | MenhirState31 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState39 in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =     ( x ) in
        _menhir_goto_loption_separated_nonempty_list_COMMA_located_type____ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState33 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState36 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_type___ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_COMMA_record_def_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState304 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState305 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState306 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            _menhir_reduce_142 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
        | _ ->
            raise _eRR)
    | MenhirState20 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState21 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =     ( x :: xs ) in
        _menhir_goto_separated_nonempty_list_COMMA_record_def_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState15 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState17 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState18 in
            _menhir_reduce_142 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_goto_definition : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState333 ->
        _menhir_run_333 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState298 ->
        _menhir_run_333 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState0 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState296 in
        let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
        (_1:definition)
    | _ ->
        assert false
and my_reduce : type tail. tail -> definition -> definition =
fun stack def -> def
and _menhir_goto_binop_prio_1_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState200 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState201 in
        (match _tok with
        | HopixParserTokens.PLUS ->
            let _v = () in
            _menhir_run_190 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.MINUS ->
            let _v = () in
            _menhir_run_192 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined2_ in
            let _v =
              let e =
                let e2 =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let b =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                  let x =
                    let p =
                      let _endpos = _endpos_x_ in
                      let _startpos = _startpos_x_ in
                            ( Position.with_poss _startpos _endpos x )
                    in
                                                       ( Variable(with_val (binop_name EQUALQUESTION) p, None)       )
                  in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let e1 =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                                                    ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
              in
                                                                        ( e )
            in
            _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState198 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState199 in
        (match _tok with
        | HopixParserTokens.PLUS ->
            let _v = () in
            _menhir_run_190 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.MINUS ->
            let _v = () in
            _menhir_run_192 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined2_ in
            let _v =
              let e =
                let e2 =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let b =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                  let x =
                    let p =
                      let _endpos = _endpos_x_ in
                      let _startpos = _startpos_x_ in
                            ( Position.with_poss _startpos _endpos x )
                    in
                                                       ( Variable(with_val (binop_name LANGLEEQUALQUESTION) p, None) )
                  in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let e1 =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                                                    ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
              in
                                                                        ( e )
            in
            _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState196 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState197 in
        (match _tok with
        | HopixParserTokens.PLUS ->
            let _v = () in
            _menhir_run_190 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.MINUS ->
            let _v = () in
            _menhir_run_192 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined2_ in
            let _v =
              let e =
                let e2 =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let b =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                  let x =
                    let p =
                      let _endpos = _endpos_x_ in
                      let _startpos = _startpos_x_ in
                            ( Position.with_poss _startpos _endpos x )
                    in
                                                       ( Variable(with_val (binop_name LANGLEQUESTION) p, None)      )
                  in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let e1 =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                                                    ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
              in
                                                                        ( e )
            in
            _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState194 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState195 in
        (match _tok with
        | HopixParserTokens.PLUS ->
            let _v = () in
            _menhir_run_190 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.MINUS ->
            let _v = () in
            _menhir_run_192 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined2_ in
            let _v =
              let e =
                let e2 =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let b =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                  let x =
                    let p =
                      let _endpos = _endpos_x_ in
                      let _startpos = _startpos_x_ in
                            ( Position.with_poss _startpos _endpos x )
                    in
                                                       ( Variable(with_val (binop_name RANGLEEQUALQUESTION) p, None) )
                  in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let e1 =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                                                    ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
              in
                                                                        ( e )
            in
            _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState192 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState193 in
        let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined2_ in
        let _v =
          let e =
            let e2 =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let b =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
              let x =
                let p =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                     ( Variable(with_val (binop_name MINUS) p, None) )
              in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let e1 =
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
                                                                ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
          in
                                                                    ( e )
        in
        _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState190 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState191 in
        let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined2_ in
        let _v =
          let e =
            let e2 =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let b =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
              let x =
                let p =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                     ( Variable(with_val (binop_name PLUS) p, None)  )
              in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let e1 =
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
                                                                ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
          in
                                                                    ( e )
        in
        _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState188 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState189 in
        (match _tok with
        | HopixParserTokens.PLUS ->
            let _v = () in
            _menhir_run_190 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.MINUS ->
            let _v = () in
            _menhir_run_192 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined2_ in
            let _v =
              let e =
                let e2 =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let b =
                  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                  let x =
                    let p =
                      let _endpos = _endpos_x_ in
                      let _startpos = _startpos_x_ in
                            ( Position.with_poss _startpos _endpos x )
                    in
                                                       ( Variable(with_val (binop_name RANGLEQUESTION) p, None)      )
                  in
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                let e1 =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                                                    ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
              in
                                                                        ( e )
            in
            _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState316 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState79 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState266 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState207 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState205 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState203 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_187 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_reduce_117 : type  tail final. (((tail, (HopixAST.constructor Position.located * HopixAST.ty Position.located list), final) _menhir_stack, unit, final) _menhir_stack, ((HopixAST.constructor Position.located * HopixAST.ty Position.located list)
  list), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
    let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let _startpos = _startpos_x_ in
    let _endpos = _endpos_xs_ in
    let _v =     ( x :: xs ) in
    _menhir_goto_separated_nonempty_list_PIPE_sum_type_constructor_definition_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_reduce_141 : type  tail final. ((tail, (unit option), final) _menhir_stack, ((HopixAST.constructor Position.located * HopixAST.ty Position.located list)
  list), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos_l_ in
    let _v =                                                                                 ( DefineSumType(l)   ) in
    _menhir_goto_type_definition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_032 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState32 in
    match _tok with
    | HopixParserTokens.COMMA ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState33 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.ARROW ->
        let _v = () in
        _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.RANGLE | HopixParserTokens.RPAR ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_type___ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_019 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState19 in
    match _tok with
    | HopixParserTokens.COMMA ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState20 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RCBRACK ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =     ( [ x ] ) in
        _menhir_goto_separated_nonempty_list_COMMA_record_def_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_reduce_045 : type  tail final. ((((tail, unit, final) _menhir_stack, (HopixAST.identifier), final) _menhir_stack, unit, final) _menhir_stack, (HopixAST.type_scheme), final) _menhir_stack -> _ -> _ -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _tok ->
    let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
    let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
    let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos_x_inlined1_ in
    let _v =
      let s =
        let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
      let id =
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                            ( DeclareExtern(id, s) )
    in
    _menhir_goto_definition _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_037 : type  tail final. (tail, (HopixAST.ty), final) _menhir_stack -> _ -> _ -> ((tail, (HopixAST.ty), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState37 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.TYPE_VARIABLE _v ->
        _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_181 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState181 in
    match _tok with
    | HopixParserTokens.STAR ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState182 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.SLASH ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState185 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.TO | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v =                                                           ( e ) in
        _menhir_goto_binop_prio_1_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_goto_separated_nonempty_list_PIPE_sum_type_constructor_definition_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState308 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState312 in
        _menhir_reduce_141 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState310 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState311 in
        _menhir_reduce_117 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState50 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState60 in
        _menhir_reduce_141 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | MenhirState58 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState59 in
        _menhir_reduce_117 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
    | _ ->
        assert false

and _menhir_goto_type_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState291 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState292 in
        (match _tok with
        | HopixParserTokens.ARROW ->
            let _v = () in
            _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState259 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState260 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState261 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _5, _startpos__5_, _endpos__5_) = _menhir_stack in
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__5_ in
            let _v =
              let t =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let e =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                      ( TypeAnnotation(e, t) )
            in
            _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | HopixParserTokens.ARROW ->
            let _v = () in
            _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState137 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState138 in
        (match _tok with
        | HopixParserTokens.ARROW ->
            let _v = () in
            _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.COMMA | HopixParserTokens.EQUAL | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR ->
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined1_ in
            let _v =
              let t =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let p =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                                                      ( PTypeAnnotation(p, t) )
            in
            _menhir_goto_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState71 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState72 in
        (match _tok with
        | HopixParserTokens.ARROW ->
            let _v = () in
            _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EOF | HopixParserTokens.EQUAL | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, l, _startpos_l_, _endpos_l_) = _menhir_stack in
            let _startpos = _startpos_l_ in
            let _endpos = _endpos_x_ in
            let _v =
              let t =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                                                             ( ForallTy(list_of_list_option l, t) )
            in
            (match _menhir_s with
            | MenhirState325 ->
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState326 in
                _menhir_reduce_045 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
            | MenhirState289 ->
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState290 in
                _menhir_reduce_045 _menhir_stack _menhir_lexbuf _menhir_lexer _tok
            | MenhirState64 ->
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState70 in
                let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
                let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
                let _startpos = _startpos__1_ in
                let _endpos = _endpos_x_ in
                let _v =
                  let x =
                    let x =
                      let _endpos = _endpos_x_ in
                      let _startpos = _startpos_x_ in
                            ( Position.with_poss _startpos _endpos x )
                    in
                        ( x )
                  in
                      ( Some x )
                in
                _menhir_goto_option_preceded_COLON_located_type_scheme___ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                assert false)
        | _ ->
            raise _eRR)
    | MenhirState23 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState48 in
        (match _tok with
        | HopixParserTokens.ARROW ->
            let _v = () in
            _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.COMMA | HopixParserTokens.RCBRACK ->
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined1_ in
            let _v =
              let ty =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let label =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                           ( (label, ty) )
            in
            (match _menhir_s with
            | MenhirState304 ->
                _menhir_run_019 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState20 ->
                _menhir_run_019 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState15 ->
                _menhir_run_019 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                assert false)
        | _ ->
            raise _eRR)
    | MenhirState24 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState46 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState47 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, t, _startpos_t_, _endpos_t_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _v =                                    ( t                                    ) in
            _menhir_goto_very_simple_type _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | HopixParserTokens.ARROW ->
            let _v = () in
            _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState37 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState38 in
        (match _tok with
        | HopixParserTokens.ARROW ->
            let _v = () in
            _menhir_run_037 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.COMMA | HopixParserTokens.EOF | HopixParserTokens.EQUAL | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.RANGLE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.TYPE ->
            let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let _startpos = _startpos_x_ in
            let _endpos = _endpos_x_inlined1_ in
            let _v =
              let t2 =
                let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
              let t1 =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                    ( TyArrow(t1, t2) )
            in
            _menhir_goto_type_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState52 ->
        _menhir_run_032 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState33 ->
        _menhir_run_032 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState31 ->
        _menhir_run_032 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_binop_prio_2_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState185 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState186 in
        let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined2_ in
        let _v =
          let e =
            let e2 =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let b =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
              let x =
                let p =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                     ( Variable(with_val (binop_name SLASH) p, None) )
              in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let e1 =
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
                                                                ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
          in
                                                                    ( e )
        in
        _menhir_goto_binop_prio_2_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState182 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState183 in
        let (_menhir_stack, _, x_inlined2, _startpos_x_inlined2_, _endpos_x_inlined2_) = _menhir_stack in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined2_ in
        let _v =
          let e =
            let e2 =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let b =
              let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
              let x =
                let p =
                  let _endpos = _endpos_x_ in
                  let _startpos = _startpos_x_ in
                        ( Position.with_poss _startpos _endpos x )
                in
                                     ( Variable(with_val (binop_name STAR) p, None)  )
              in
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
            let e1 =
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
                                                                ( Apply(
                                                        { value=Apply(b, e1); position=join e1.position b.position }, e2) )
          in
                                                                    ( e )
        in
        _menhir_goto_binop_prio_2_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState316 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState79 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState266 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState207 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState205 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState203 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState200 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState198 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState196 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState194 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState192 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState190 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState188 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_181 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_run_057 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState57 in
    match _tok with
    | HopixParserTokens.PIPE ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState58 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_051 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_309 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState309 in
    match _tok with
    | HopixParserTokens.PIPE ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState310 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_051 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =     ( [ x ] ) in
        _menhir_goto_separated_nonempty_list_PIPE_sum_type_constructor_definition_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_034 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState34 in
    let (_menhir_stack, _menhir_s, t, _startpos_t_, _endpos_t_) = _menhir_stack in
    let _startpos = _startpos_t_ in
    let _endpos = _endpos_t_ in
    let _v =                       ( t               ) in
    _menhir_goto_type_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_035 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState35 in
    let (_menhir_stack, _menhir_s, l, _startpos_l_, _endpos_l_) = _menhir_stack in
    let _startpos = _startpos_l_ in
    let _endpos = _endpos_l_ in
    let _v =                                                               ( TyTuple(l) ) in
    _menhir_goto_simple_type _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_184 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState184 in
    let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
    let _startpos = _startpos_e_ in
    let _endpos = _endpos_e_ in
    let _v =                                                           ( e ) in
    _menhir_goto_binop_prio_2_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_173 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState173 in
    let (_menhir_stack, _menhir_s, l, _startpos_l_, _endpos_l_) = _menhir_stack in
    let _startpos = _startpos_l_ in
    let _endpos = _endpos_l_ in
    let _v =                                           ( HopixASTHelper.expr_of_apply_list l  ) in
    _menhir_goto_apply_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_goto_separated_nonempty_list_COMMA_record_pattern_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState118 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState119 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =     ( x :: xs ) in
        _menhir_goto_separated_nonempty_list_COMMA_record_pattern_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState113 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState114 in
        (match _tok with
        | HopixParserTokens.RCBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState115 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LANGLE ->
                let _v = () in
                _menhir_run_031 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.AMPERSAND | HopixParserTokens.ARROW | HopixParserTokens.COLON | HopixParserTokens.COMMA | HopixParserTokens.EQUAL | HopixParserTokens.PIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR ->
                _menhir_reduce_075 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_COMMA_located_pattern__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState109 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState152 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState153 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _v =
              let x =     ( x ) in
                  ( Some x )
            in
            _menhir_goto_option_delimited_LPAR_separated_nonempty_list_COMMA_located_pattern___RPAR__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState150 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState151 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_pattern__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState147 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState148 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_l_ in
        let _v =
          let e1 =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                          ( e1 :: l )
        in
        (match _menhir_s with
        | MenhirState112 ->
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState144 in
            (match _tok with
            | HopixParserTokens.RPAR ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState145 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
                let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
                let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
                let _startpos = _startpos__1_ in
                let _endpos = _endpos__3_ in
                let _v =                                                                         ( PTuple(l)             ) in
                _menhir_goto_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                raise _eRR)
        | _ ->
            assert false)
    | _ ->
        assert false

and _menhir_goto_option_sum_type_constructor_arg_list_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState51 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState56 in
        let (_menhir_stack, _, args, _startpos_args_, _endpos_args_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, id, _startpos_id_, _endpos_id_) = _menhir_stack in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_args_ in
        let _v =
          let c =
            let x =                     ( KId id ) in
            let (_endpos_x_, _startpos_x_) = (_endpos_id_, _startpos_id_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                       ( (c, list_of_list_option args) )
        in
        (match _menhir_s with
        | MenhirState310 ->
            _menhir_run_309 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState308 ->
            _menhir_run_309 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState58 ->
            _menhir_run_057 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState50 ->
            _menhir_run_057 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | _ ->
        assert false

and _menhir_goto_simple_type : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState291 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState259 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState137 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState71 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState52 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState23 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState24 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState31 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState37 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState33 ->
        _menhir_run_034 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_STAR_located_very_simple_type__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState26 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState45 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_l_ in
        let _v =
          let e1 =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                          ( e1 :: l )
        in
        (match _menhir_s with
        | MenhirState291 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState259 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState137 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState71 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState52 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState23 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState24 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState31 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState37 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState33 ->
            _menhir_run_035 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | MenhirState28 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState44 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_STAR_located_very_simple_type__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_apply_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState316 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState79 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState266 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState207 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState205 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState203 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState200 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState198 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState196 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState194 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState188 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState192 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState190 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState185 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState182 ->
        _menhir_run_184 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_nonempty_list_located_ref_deref_expr__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState174 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState178 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_l_ in
        let _v =
          let e1 =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                       ( e1 :: l )
        in
        (match _menhir_s with
        | MenhirState316 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState282 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState74 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState273 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState76 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState79 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState266 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState263 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState82 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState252 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState84 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState88 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState97 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState237 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState233 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState100 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState156 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState226 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState223 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState160 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState219 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState213 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState210 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState169 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState207 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState205 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState203 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState200 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState198 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState196 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState194 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState192 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState190 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState188 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState185 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState182 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState172 ->
            _menhir_run_173 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | MenhirState175 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState176 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_nonempty_list_located_ref_deref_expr__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_run_117 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState117 in
    match _tok with
    | HopixParserTokens.COMMA ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState118 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RCBRACK ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =     ( [ x ] ) in
        _menhir_goto_separated_nonempty_list_COMMA_record_pattern_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_132 : type  tail final. ((tail, unit, final) _menhir_stack, (HopixAST.pattern), final) _menhir_stack -> _ -> _ -> (((tail, unit, final) _menhir_stack, (HopixAST.pattern), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState132 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
    let (_menhir_stack, _, p, _startpos_p_, _endpos_p_) = _menhir_stack in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos__3_ in
    let _v =                            ( p             ) in
    _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_149 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState149 in
    match _tok with
    | HopixParserTokens.COMMA ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState150 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RPAR ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_pattern__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_251 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState251 in
    match _tok with
    | HopixParserTokens.ARROW ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState252 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LET ->
            let _v = () in
            _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FUN ->
            let _v = () in
            _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_124 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState124 in
    let (_menhir_stack, _menhir_s, branches, _startpos_branches_, _endpos_branches_) = _menhir_stack in
    let _startpos = _startpos_branches_ in
    let _endpos = _endpos_branches_ in
    let _v =                                                                         ( POr(branches)         ) in
    _menhir_goto_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_125 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState125 in
    let (_menhir_stack, _menhir_s, branches, _startpos_branches_, _endpos_branches_) = _menhir_stack in
    let _startpos = _startpos_branches_ in
    let _endpos = _endpos_branches_ in
    let _v =                                                                         ( PAnd(branches)        ) in
    _menhir_goto_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_051 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState51 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LPAR ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState52 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.EOF | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.PIPE | HopixParserTokens.TYPE ->
        let _startpos = _endpos in
        let _v =     ( None ) in
        _menhir_goto_option_sum_type_constructor_arg_list_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_011 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState11 in
    let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let _startpos = _startpos_x_ in
    let _endpos = _endpos_x_ in
    let _v =     ( Some x ) in
    _menhir_goto_option_type_argument_declaration_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_025 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState25 in
    match _tok with
    | HopixParserTokens.STAR ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState26 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.ARROW | HopixParserTokens.COMMA | HopixParserTokens.EOF | HopixParserTokens.EQUAL | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.RANGLE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, t, _startpos_t_, _endpos_t_) = _menhir_stack in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v =                                                               ( t          ) in
        _menhir_goto_simple_type _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_027 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState27 in
    match _tok with
    | HopixParserTokens.STAR ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState28 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.ARROW | HopixParserTokens.COMMA | HopixParserTokens.EOF | HopixParserTokens.EQUAL | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.RANGLE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_STAR_located_very_simple_type__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_174 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState174 in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.TO | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v =                                           ( e                                    ) in
        _menhir_goto_apply_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_175 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState175 in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.AND | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LET | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.TO | HopixParserTokens.TYPE ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_nonempty_list_located_ref_deref_expr__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_goto_pattern : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState280 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState281 in
        (match _tok with
        | HopixParserTokens.EQUAL ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState282 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.SWITCH ->
                let _v = () in
                _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LET ->
                let _v = () in
                _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.IF ->
                let _v = () in
                _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FUN ->
                let _v = () in
                _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FOR ->
                let _v = () in
                _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.DO ->
                let _v = () in
                _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.BACKSLASH ->
                let _v = () in
                _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState247 ->
        _menhir_run_251 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState249 ->
        _menhir_run_251 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState170 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState171 in
        (match _tok with
        | HopixParserTokens.ARROW ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState172 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.SWITCH ->
                let _v = () in
                _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.IF ->
                let _v = () in
                _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FOR ->
                let _v = () in
                _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.DO ->
                let _v = () in
                _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.BACKSLASH ->
                let _v = () in
                _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState106 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState155 in
        (match _tok with
        | HopixParserTokens.EQUAL ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState156 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.SWITCH ->
                let _v = () in
                _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.IF ->
                let _v = () in
                _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FOR ->
                let _v = () in
                _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.DO ->
                let _v = () in
                _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.BACKSLASH ->
                let _v = () in
                _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState109 ->
        _menhir_run_149 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState150 ->
        _menhir_run_149 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState147 ->
        _menhir_run_149 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState112 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState146 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            _menhir_run_132 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.COMMA ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState147 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UNDERSCORE ->
                let _v = () in
                _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState130 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState131 in
        (match _tok with
        | HopixParserTokens.RPAR ->
            let _v = () in
            _menhir_run_132 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState121 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState126 in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let p =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                      ( (l, p) )
        in
        (match _menhir_s with
        | MenhirState118 ->
            _menhir_run_117 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState113 ->
            _menhir_run_117 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_PIPE_located_atomic_pattern__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState135 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState136 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_PIPE_located_atomic_pattern__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState129 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState133 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_l_ in
        let _v =
          let e1 =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                          ( e1 :: l )
        in
        (match _menhir_s with
        | MenhirState280 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState247 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState249 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState170 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState106 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState109 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState150 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState147 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState112 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState130 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState121 ->
            _menhir_run_124 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_AMPERSAND_located_atomic_pattern__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState142 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState143 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_AMPERSAND_located_atomic_pattern__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState139 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState140 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_l_ in
        let _v =
          let e1 =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                          ( e1 :: l )
        in
        (match _menhir_s with
        | MenhirState280 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState247 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState249 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState170 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState106 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState109 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState150 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState147 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState112 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState130 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | MenhirState121 ->
            _menhir_run_125 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            assert false)
    | _ ->
        assert false

and _menhir_run_130 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState130 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.UNDERSCORE ->
        let _v = () in
        _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_goto_option_delimited_LPAR_separated_nonempty_list_COMMA_located_pattern___RPAR__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState108 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState154 in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _, targs, _startpos_targs_, _endpos_targs_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, id, _startpos_id_, _endpos_id_) = _menhir_stack in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_l_ in
        let _v =
          let c =
            let x =                     ( KId id ) in
            let (_endpos_x_, _startpos_x_) = (_endpos_id_, _startpos_id_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                                    ( PTaggedValue(c, targs, list_of_list_option l) )
        in
        _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_run_042 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState42 in
    let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let _startpos = _startpos_x_ in
    let _endpos = _endpos_x_ in
    let _v =     ( Some x ) in
    _menhir_goto_option_type_argument_apply_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_goto_option_PIPE_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState303 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState308 in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_051 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState244 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState247 in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState13 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState50 in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_051 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_goto_separated_nonempty_list_COMMA_located_type_variable__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState4 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState9 in
        (match _tok with
        | HopixParserTokens.RANGLE ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState10 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, args, _startpos_args_, _endpos_args_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _v =                                                                               ( args ) in
            (match _menhir_s with
            | MenhirState301 ->
                _menhir_run_011 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState3 ->
                _menhir_run_011 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                assert false)
        | _ ->
            raise _eRR)
    | MenhirState7 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState8 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_type_variable__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_very_simple_type : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState28 ->
        _menhir_run_027 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState26 ->
        _menhir_run_027 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState291 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState259 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState137 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState71 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState52 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState23 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState37 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState33 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState31 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState24 ->
        _menhir_run_025 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_nonempty_list_located_type_variable__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState65 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState68 in
        (match _tok with
        | HopixParserTokens.RBRACK ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState69 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _v =
              let x =     ( x ) in
                  ( Some x )
            in
            _menhir_goto_option_delimited_LBRACK_nonempty_list_located_type_variable___RBRACK__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState66 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState67 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_nonempty_list_located_type_variable__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_run_177 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState177 in
    match _tok with
    | HopixParserTokens.DOT ->
        let _v = () in
        _menhir_run_166 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.AND | HopixParserTokens.CHAR _ | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXCLAMATION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.INT _ | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LCBRACK | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.REF | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.STRING _ | HopixParserTokens.TO | HopixParserTokens.TYPE | HopixParserTokens.UPPERCASE_ID _ ->
        let (_menhir_stack, _menhir_s, e, _startpos_e_, _endpos_e_) = _menhir_stack in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v =                                        ( e                                     ) in
        _menhir_goto_ref_deref_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_goto_ref_deref_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState175 ->
        _menhir_run_175 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState174 ->
        _menhir_run_175 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState316 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState79 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState266 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState207 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState205 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState203 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState200 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState198 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState196 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState194 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState192 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState190 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState188 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState185 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState182 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_174 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_run_166 : type  tail final. (tail, (HopixAST.expression), final) _menhir_stack -> _ -> _ -> ((tail, (HopixAST.expression), final) _menhir_stack, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState166 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_022 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState22 in
    match _tok with
    | HopixParserTokens.COLON ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState23 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_096 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState96 in
    match _tok with
    | HopixParserTokens.EQUAL ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState97 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_120 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState120 in
    match _tok with
    | HopixParserTokens.EQUAL ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState121 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_128 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState128 in
    match _tok with
    | HopixParserTokens.PIPE ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState129 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_130 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.COLON ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState137 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.AMPERSAND ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState139 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_130 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.ARROW | HopixParserTokens.COMMA | HopixParserTokens.EQUAL | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR ->
        let (_menhir_stack, _menhir_s, p, _startpos_p_, _endpos_p_) = _menhir_stack in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v =                                                                         ( p                     ) in
        _menhir_goto_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_134 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState134 in
    match _tok with
    | HopixParserTokens.PIPE ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState135 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_130 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.ARROW | HopixParserTokens.COMMA | HopixParserTokens.EQUAL | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_PIPE_located_atomic_pattern__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_141 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState141 in
    match _tok with
    | HopixParserTokens.AMPERSAND ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState142 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_130 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.ARROW | HopixParserTokens.COMMA | HopixParserTokens.EQUAL | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_AMPERSAND_located_atomic_pattern__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_071 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState71 in
    match _tok with
    | HopixParserTokens.TYPE_VARIABLE _v ->
        _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_goto_option_type_argument_apply_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState163 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState164 in
        let (_menhir_stack, _, types, _startpos_types_, _endpos_types_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_types_ in
        let _v =
          let v =
            let id =
              let _endpos = _endpos_x_ in
              let _startpos = _startpos_x_ in
                    ( Position.with_poss _startpos _endpos x )
            in
                                                ( Variable (id, types) )
          in
                                                  ( v                    )
        in
        _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState115 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState116 in
        let (_menhir_stack, _, t, _startpos_t_, _endpos_t_) = _menhir_stack in
        let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =                                                           ( PRecord(l, t)                                 ) in
        _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState107 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState108 in
        (match _tok with
        | HopixParserTokens.LPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState109 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UNDERSCORE ->
                let _v = () in
                _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | HopixParserTokens.AMPERSAND | HopixParserTokens.ARROW | HopixParserTokens.COLON | HopixParserTokens.COMMA | HopixParserTokens.EQUAL | HopixParserTokens.PIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR ->
            let _startpos = _endpos in
            let _v =     ( None ) in
            _menhir_goto_option_delimited_LPAR_separated_nonempty_list_COMMA_located_pattern___RPAR__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState91 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState92 in
        let (_menhir_stack, _, types, _startpos_types_, _endpos_types_) = _menhir_stack in
        let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
        let (_menhir_stack, _, l, _startpos_l_, _endpos_l_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_types_ in
        let _v =
          let r =                                                          ( Record(l, types) ) in
                                                  ( r                    )
        in
        _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState77 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState78 in
        (match _tok with
        | HopixParserTokens.LPAR ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState79 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | HopixParserTokens.AND | HopixParserTokens.CHAR _ | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOT | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXCLAMATION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.INT _ | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LCBRACK | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.REF | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.STRING _ | HopixParserTokens.TO | HopixParserTokens.TYPE | HopixParserTokens.UPPERCASE_ID _ ->
            let (_menhir_stack, _, type_args, _startpos_type_args_, _endpos_type_args_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, id, _startpos_id_, _endpos_id_) = _menhir_stack in
            let _startpos = _startpos_id_ in
            let _endpos = _endpos_type_args_ in
            let _v =
              let args =     ( None ) in
              let const =
                let x =                     ( KId id ) in
                let (_endpos_x_, _startpos_x_) = (_endpos_id_, _startpos_id_) in
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                      ( Tagged(const, type_args, list_of_list_option args) )
            in
            _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState30 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState43 in
        let (_menhir_stack, _, args, _startpos_args_, _endpos_args_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, con, _startpos_con_, _endpos_con_) = _menhir_stack in
        let _startpos = _startpos_con_ in
        let _endpos = _endpos_args_ in
        let _v =                                    ( TyCon(con, list_of_list_option args) ) in
        _menhir_goto_very_simple_type _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_loption_separated_nonempty_list_COMMA_located_type____ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState31 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState40 in
        (match _tok with
        | HopixParserTokens.RANGLE ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState41 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            let (_menhir_stack, _, _3, _startpos__3_, _endpos__3_) = _menhir_stack in
            let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _v =
              let args =     ( xs ) in
                                                                           ( args )
            in
            (match _menhir_s with
            | MenhirState163 ->
                _menhir_run_042 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState115 ->
                _menhir_run_042 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState107 ->
                _menhir_run_042 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState91 ->
                _menhir_run_042 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState77 ->
                _menhir_run_042 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | MenhirState30 ->
                _menhir_run_042 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
            | _ ->
                assert false)
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_run_024 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState24 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.TYPE_VARIABLE _v ->
        _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_reduce_065 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok ->
    let _startpos = _endpos in
    let _v =     ( None ) in
    _menhir_goto_option_PIPE_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_014 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState14 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let _startpos = _startpos_x_ in
    let _endpos = _endpos_x_ in
    let _v =     ( Some x ) in
    _menhir_goto_option_PIPE_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_006 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState6 in
    match _tok with
    | HopixParserTokens.COMMA ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState7 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.RANGLE ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_separated_nonempty_list_COMMA_located_type_variable__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_029 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState29 in
    let (_menhir_stack, _menhir_s, var, _startpos_var_, _endpos_var_) = _menhir_stack in
    let _startpos = _startpos_var_ in
    let _endpos = _endpos_var_ in
    let _v =                                    ( TyVar var                            ) in
    _menhir_goto_very_simple_type _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_066 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState66 in
    match _tok with
    | HopixParserTokens.TYPE_VARIABLE _v ->
        _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.RBRACK ->
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( [ x ] )
        in
        _menhir_goto_nonempty_list_located_type_variable__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_run_105 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState105 in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_279 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState279 in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_goto_atomic_expr : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState81 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState268 in
        (match _tok with
        | HopixParserTokens.DOT ->
            let _v = () in
            _menhir_run_166 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.CHAR _ | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXCLAMATION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.INT _ | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LCBRACK | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.REF | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.STRING _ | HopixParserTokens.TO | HopixParserTokens.TYPE | HopixParserTokens.UPPERCASE_ID _ ->
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos_x_ in
            let _v =
              let e =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                     ( Ref e                                 )
            in
            _menhir_goto_ref_deref_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | MenhirState316 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState79 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState266 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState207 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState205 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState203 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState200 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState198 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState196 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState194 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState188 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState192 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState190 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState185 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState182 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState174 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState175 ->
        _menhir_run_177 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState161 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState165 in
        (match _tok with
        | HopixParserTokens.DOT ->
            let _v = () in
            _menhir_run_166 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.AND | HopixParserTokens.CHAR _ | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXCLAMATION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.INT _ | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LCBRACK | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.REF | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.STRING _ | HopixParserTokens.TO | HopixParserTokens.TYPE | HopixParserTokens.UPPERCASE_ID _ ->
            let (_menhir_stack, _, x, _startpos_x_, _endpos_x_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos_x_ in
            let _v =
              let e =
                let _endpos = _endpos_x_ in
                let _startpos = _startpos_x_ in
                      ( Position.with_poss _startpos _endpos x )
              in
                                                     ( Read e                                )
            in
            _menhir_goto_ref_deref_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_run_016 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState16 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, id, _startpos_id_, _endpos_id_) = _menhir_stack in
    let _startpos = _startpos_id_ in
    let _endpos = _endpos_id_ in
    let _v =                   ( LId id ) in
    match _menhir_s with
    | MenhirState166 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState167 in
        let (_menhir_stack, _, x_inlined1, _startpos_x_inlined1_, _endpos_x_inlined1_) = _menhir_stack in
        let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let l =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
          let e =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
                                                  ( Field(e, l)          )
        in
        _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState113 ->
        _menhir_run_120 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState118 ->
        _menhir_run_120 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState89 ->
        _menhir_run_096 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState94 ->
        _menhir_run_096 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState304 ->
        _menhir_run_022 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState15 ->
        _menhir_run_022 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState20 ->
        _menhir_run_022 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_atomic_pattern : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState142 ->
        _menhir_run_141 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState139 ->
        _menhir_run_141 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState135 ->
        _menhir_run_134 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState129 ->
        _menhir_run_134 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState280 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState247 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState249 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState106 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState170 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState109 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState112 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState147 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState150 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState130 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState121 ->
        _menhir_run_128 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_option_delimited_LBRACK_nonempty_list_located_type_variable___RBRACK__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState289 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState291 in
        (match _tok with
        | HopixParserTokens.TYPE_VARIABLE _v ->
            _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState325 ->
        _menhir_run_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState64 ->
        _menhir_run_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_reduce_075 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok ->
    let _startpos = _endpos in
    let _v =     ( None ) in
    _menhir_goto_option_type_argument_apply_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_031 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState31 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.TYPE_VARIABLE _v ->
        _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_024 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.RANGLE ->
        let _startpos = _endpos in
        let _v =     ( [] ) in
        _menhir_goto_loption_separated_nonempty_list_COMMA_located_type____ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        raise _eRR

and _menhir_goto_option_type_argument_declaration_ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState301 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState302 in
        (match _tok with
        | HopixParserTokens.EQUAL ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState303 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.PIPE ->
                let _v = () in
                _menhir_run_014 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState304 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.LOWERCASE_ID _v ->
                    _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | _ ->
                    raise _eRR)
            | HopixParserTokens.UPPERCASE_ID _ ->
                _menhir_reduce_065 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState3 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState12 in
        (match _tok with
        | HopixParserTokens.EQUAL ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState13 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.PIPE ->
                let _v = () in
                _menhir_run_014 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState15 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.LOWERCASE_ID _v ->
                    _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | _ ->
                    raise _eRR)
            | HopixParserTokens.UPPERCASE_ID _ ->
                _menhir_reduce_065 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_run_005 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState5 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, v, _startpos_v_, _endpos_v_) = _menhir_stack in
    let _startpos = _startpos_v_ in
    let _endpos = _endpos_v_ in
    let _v =                     ( TId v ) in
    match _menhir_s with
    | MenhirState66 ->
        _menhir_run_066 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState65 ->
        _menhir_run_066 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState291 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState259 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState137 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState71 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState52 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState23 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState24 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState26 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState37 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState33 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState31 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState28 ->
        _menhir_run_029 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState7 ->
        _menhir_run_006 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState4 ->
        _menhir_run_006 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | _ ->
        assert false

and _menhir_goto_option_preceded_COLON_located_type_scheme___ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState314 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState315 in
        (match _tok with
        | HopixParserTokens.EQUAL ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState316 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.SWITCH ->
                let _v = () in
                _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LET ->
                let _v = () in
                _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.IF ->
                let _v = () in
                _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FUN ->
                let _v = () in
                _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FOR ->
                let _v = () in
                _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.DO ->
                let _v = () in
                _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.BACKSLASH ->
                let _v = () in
                _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState321 ->
        _menhir_run_279 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState318 ->
        _menhir_run_279 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState285 ->
        _menhir_run_279 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState277 ->
        _menhir_run_279 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState101 ->
        _menhir_run_105 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState103 ->
        _menhir_run_105 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState86 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState87 in
        (match _tok with
        | HopixParserTokens.EQUAL ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState88 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.SWITCH ->
                let _v = () in
                _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.IF ->
                let _v = () in
                _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FOR ->
                let _v = () in
                _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.DO ->
                let _v = () in
                _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.BACKSLASH ->
                let _v = () in
                _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState63 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState73 in
        (match _tok with
        | HopixParserTokens.EQUAL ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState74 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.WHILE ->
                let _v = () in
                _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.UPPERCASE_ID _v ->
                _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.SWITCH ->
                let _v = () in
                _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.STRING _v ->
                _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.REF ->
                let _v = () in
                _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LPAR ->
                let _v = () in
                _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _v ->
                _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LET ->
                let _v = () in
                _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LCBRACK ->
                let _v = () in
                _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.INT _v ->
                _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.IF ->
                let _v = () in
                _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FUN ->
                let _v = () in
                _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.FOR ->
                let _v = () in
                _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.EXCLAMATION ->
                let _v = () in
                _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.DO ->
                let _v = () in
                _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.CHAR _v ->
                _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.BACKSLASH ->
                let _v = () in
                _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_run_127 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState127 in
    let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
    let _startpos = _startpos_x_ in
    let _endpos = _endpos_x_ in
    let _v =
      let id =
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                                                ( PVariable id                                  )
    in
    _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_170 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState170 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.UNDERSCORE ->
        let _v = () in
        _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_162 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState162 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, c, _startpos_c_, _endpos_c_) = _menhir_stack in
    let _startpos = _startpos_c_ in
    let _endpos = _endpos_c_ in
    let _v =
      let l =
        let x =              ( LChar c   ) in
        let (_endpos_x_, _startpos_x_) = (_endpos_c_, _startpos_c_) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                              ( Literal l            )
    in
    _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_168 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState168 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState169 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LET ->
            let _v = () in
            _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FUN ->
            let _v = () in
            _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_161 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState161 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_157 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState157 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_101 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState101 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.COLON ->
        let _v = () in
        _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _ ->
        _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_run_099 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState99 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LPAR ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState100 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LET ->
            let _v = () in
            _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FUN ->
            let _v = () in
            _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_098 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState98 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, i, _startpos_i_, _endpos_i_) = _menhir_stack in
    let _startpos = _startpos_i_ in
    let _endpos = _endpos_i_ in
    let _v =
      let l =
        let x =              ( LInt i    ) in
        let (_endpos_x_, _startpos_x_) = (_endpos_i_, _startpos_i_) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                              ( Literal l            )
    in
    _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_089 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState89 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_085 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState85 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_082 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState82 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.WHILE ->
        let _v = () in
        _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.SWITCH ->
        let _v = () in
        _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.REF ->
        let _v = () in
        _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LET ->
        let _v = () in
        _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.IF ->
        let _v = () in
        _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.FUN ->
        let _v = () in
        _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.FOR ->
        let _v = () in
        _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXCLAMATION ->
        let _v = () in
        _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.DO ->
        let _v = () in
        _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.BACKSLASH ->
        let _v = () in
        _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_081 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState81 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_080 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState80 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, s, _startpos_s_, _endpos_s_) = _menhir_stack in
    let _startpos = _startpos_s_ in
    let _endpos = _endpos_s_ in
    let _v =
      let l =
        let x =              ( LString s ) in
        let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                              ( Literal l            )
    in
    _menhir_goto_atomic_expr _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_083 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState83 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LPAR ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState84 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LET ->
            let _v = () in
            _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FUN ->
            let _v = () in
            _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_077 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState77 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LANGLE ->
        let _v = () in
        _menhir_run_031 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.AND | HopixParserTokens.CHAR _ | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOT | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXCLAMATION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.INT _ | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LCBRACK | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.REF | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.STRING _ | HopixParserTokens.TO | HopixParserTokens.TYPE | HopixParserTokens.UPPERCASE_ID _ ->
        _menhir_reduce_075 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_run_075 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState75 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LPAR ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState76 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.WHILE ->
            let _v = () in
            _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.SWITCH ->
            let _v = () in
            _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.REF ->
            let _v = () in
            _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LET ->
            let _v = () in
            _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.IF ->
            let _v = () in
            _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FUN ->
            let _v = () in
            _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.FOR ->
            let _v = () in
            _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EXCLAMATION ->
            let _v = () in
            _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.DO ->
            let _v = () in
            _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.BACKSLASH ->
            let _v = () in
            _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_163 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState163 in
    match _tok with
    | HopixParserTokens.LANGLE ->
        let _v = () in
        _menhir_run_031 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.AND | HopixParserTokens.CHAR _ | HopixParserTokens.COLON | HopixParserTokens.COLONEQUAL | HopixParserTokens.COMMA | HopixParserTokens.DOT | HopixParserTokens.DOUBLEAMPERSAND | HopixParserTokens.EOF | HopixParserTokens.EQUALQUESTION | HopixParserTokens.EXCLAMATION | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.INT _ | HopixParserTokens.LANGLEEQUALQUESTION | HopixParserTokens.LANGLEQUESTION | HopixParserTokens.LCBRACK | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.MINUS | HopixParserTokens.PIPE | HopixParserTokens.PIPEPIPE | HopixParserTokens.PLUS | HopixParserTokens.RANGLEEQUALQUESTION | HopixParserTokens.RANGLEQUESTION | HopixParserTokens.RCBRACK | HopixParserTokens.REF | HopixParserTokens.RPAR | HopixParserTokens.SEMICOLON | HopixParserTokens.SLASH | HopixParserTokens.STAR | HopixParserTokens.STRING _ | HopixParserTokens.TO | HopixParserTokens.TYPE | HopixParserTokens.UPPERCASE_ID _ ->
        _menhir_reduce_075 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_run_123 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState123 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, c, _startpos_c_, _endpos_c_) = _menhir_stack in
    let _startpos = _startpos_c_ in
    let _endpos = _endpos_c_ in
    let _v =
      let lit =
        let x =              ( LChar c   ) in
        let (_endpos_x_, _startpos_x_) = (_endpos_c_, _startpos_c_) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                                                ( PLiteral lit                                  )
    in
    _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_122 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState122 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, i, _startpos_i_, _endpos_i_) = _menhir_stack in
    let _startpos = _startpos_i_ in
    let _endpos = _endpos_i_ in
    let _v =
      let lit =
        let x =              ( LInt i    ) in
        let (_endpos_x_, _startpos_x_) = (_endpos_i_, _startpos_i_) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                                                ( PLiteral lit                                  )
    in
    _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_113 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState113 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_016 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_112 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState112 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.UPPERCASE_ID _v ->
        _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.UNDERSCORE ->
        let _v = () in
        _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.STRING _v ->
        _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LPAR ->
        let _v = () in
        _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LCBRACK ->
        let _v = () in
        _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.INT _v ->
        _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.CHAR _v ->
        _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_111 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState111 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, s, _startpos_s_, _endpos_s_) = _menhir_stack in
    let _startpos = _startpos_s_ in
    let _endpos = _endpos_s_ in
    let _v =
      let lit =
        let x =              ( LString s ) in
        let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
        let _endpos = _endpos_x_ in
        let _startpos = _startpos_x_ in
              ( Position.with_poss _startpos _endpos x )
      in
                                                                ( PLiteral lit                                  )
    in
    _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_110 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState110 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
    let _startpos = _startpos__1_ in
    let _endpos = _endpos__1_ in
    let _v =                                                           ( PWildcard                                     ) in
    _menhir_goto_atomic_pattern _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_107 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState107 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LANGLE ->
        let _v = () in
        _menhir_run_031 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.AMPERSAND | HopixParserTokens.ARROW | HopixParserTokens.COLON | HopixParserTokens.COMMA | HopixParserTokens.EQUAL | HopixParserTokens.LPAR | HopixParserTokens.PIPE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR ->
        _menhir_reduce_075 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_reduce_067 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok ->
    let _startpos = _endpos in
    let _v =     ( None ) in
    _menhir_goto_option_delimited_LBRACK_nonempty_list_located_type_variable___RBRACK__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_065 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState65 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.TYPE_VARIABLE _v ->
        _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_030 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState30 in
    match _tok with
    | HopixParserTokens.LANGLE ->
        let _v = () in
        _menhir_run_031 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.ARROW | HopixParserTokens.COMMA | HopixParserTokens.EOF | HopixParserTokens.EQUAL | HopixParserTokens.EXTERN | HopixParserTokens.FUN | HopixParserTokens.LET | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.RANGLE | HopixParserTokens.RCBRACK | HopixParserTokens.RPAR | HopixParserTokens.STAR | HopixParserTokens.TYPE ->
        _menhir_reduce_075 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_reduce_077 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok ->
    let _startpos = _endpos in
    let _v =     ( None ) in
    _menhir_goto_option_type_argument_declaration_ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_004 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState4 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.TYPE_VARIABLE _v ->
        _menhir_run_005 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_goto_list_located_definition__ : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> _ -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v ->
    match _menhir_s with
    | MenhirState333 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState334 in
        let (_menhir_stack, _, xs, _startpos_xs_, _endpos_xs_) = _menhir_stack in
        let (_menhir_stack, _menhir_s, x, _startpos_x_, _endpos_x_) = _menhir_stack in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
                  ( Position.with_poss _startpos _endpos x )
          in
              ( x :: xs )
        in
        _menhir_goto_list_located_definition__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState298 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState330 in
        (match _tok with
        | HopixParserTokens.EOF ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState331 in
            let (_menhir_stack, _, _2, _startpos__2_, _endpos__2_) = _menhir_stack in
            let (_menhir_stack, _menhir_s, definitions, _startpos_definitions_, _endpos_definitions_) = _menhir_stack in
            let _startpos = _startpos_definitions_ in
            let _endpos = _endpos__2_ in
            let _v =                                               ( definitions ) in
            (match _menhir_s with
            | MenhirState298 ->
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState329 in
                let (_menhir_stack, _menhir_s, _1, _startpos__1_, _endpos__1_) = _menhir_stack in
                _1
            | _ ->
                assert false)
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_reduce_071 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok ->
    let _startpos = _endpos in
    let _v =     ( None ) in
    _menhir_goto_option_preceded_COLON_located_type_scheme___ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_064 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState64 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LBRACK ->
        let _v = () in
        _menhir_run_065 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.TYPE_VARIABLE _ ->
        _menhir_reduce_067 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_run_062 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState62 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, id, _startpos_id_, _endpos_id_) = _menhir_stack in
    let _startpos = _startpos_id_ in
    let _endpos = _endpos_id_ in
    let _v =                   ( Id(id) ) in
    match _menhir_s with
    | MenhirState323 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState324 in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState325 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LBRACK ->
                let _v = () in
                _menhir_run_065 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.TYPE_VARIABLE _ ->
                _menhir_reduce_067 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState313 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState314 in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EQUAL ->
            _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | MenhirState287 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState288 in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState289 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LBRACK ->
                let _v = () in
                _menhir_run_065 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
            | HopixParserTokens.LOWERCASE_ID _ | HopixParserTokens.LPAR | HopixParserTokens.TYPE_VARIABLE _ ->
                _menhir_reduce_067 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState279 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState280 in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState316 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState282 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState74 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState273 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState76 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState79 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState81 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState266 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState263 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState82 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState252 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState84 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState88 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState97 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState237 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState233 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState100 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState156 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState226 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState223 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState160 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState219 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState169 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState210 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState213 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState207 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState205 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState203 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState200 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState198 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState196 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState194 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState192 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState190 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState188 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState185 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState182 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState172 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState174 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState175 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState161 ->
        _menhir_run_163 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState157 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState158 in
        (match _tok with
        | HopixParserTokens.IN ->
            let _v = () in
            let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
            let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
            let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
            let _menhir_s = MenhirState159 in
            let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
            (match _tok with
            | HopixParserTokens.LPAR ->
                let _v = () in
                let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
                let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
                let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
                let _menhir_s = MenhirState160 in
                let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
                (match _tok with
                | HopixParserTokens.WHILE ->
                    let _v = () in
                    _menhir_run_075 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.UPPERCASE_ID _v ->
                    _menhir_run_077 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.SWITCH ->
                    let _v = () in
                    _menhir_run_083 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.STRING _v ->
                    _menhir_run_080 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.REF ->
                    let _v = () in
                    _menhir_run_081 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LPAR ->
                    let _v = () in
                    _menhir_run_082 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LOWERCASE_ID _v ->
                    _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LET ->
                    let _v = () in
                    _menhir_run_085 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.LCBRACK ->
                    let _v = () in
                    _menhir_run_089 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.INT _v ->
                    _menhir_run_098 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.IF ->
                    let _v = () in
                    _menhir_run_099 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FUN ->
                    let _v = () in
                    _menhir_run_101 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.FOR ->
                    let _v = () in
                    _menhir_run_157 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.EXCLAMATION ->
                    let _v = () in
                    _menhir_run_161 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.DO ->
                    let _v = () in
                    _menhir_run_168 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.CHAR _v ->
                    _menhir_run_162 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | HopixParserTokens.BACKSLASH ->
                    let _v = () in
                    _menhir_run_170 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
                | _ ->
                    raise _eRR)
            | _ ->
                raise _eRR)
        | _ ->
            raise _eRR)
    | MenhirState280 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState247 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState249 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState106 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState170 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState109 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState112 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState147 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState150 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState142 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState139 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState135 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState129 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState130 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState121 ->
        _menhir_run_127 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState105 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState106 in
        (match _tok with
        | HopixParserTokens.UPPERCASE_ID _v ->
            _menhir_run_107 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.UNDERSCORE ->
            let _v = () in
            _menhir_run_110 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.STRING _v ->
            _menhir_run_111 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LPAR ->
            let _v = () in
            _menhir_run_112 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LCBRACK ->
            let _v = () in
            _menhir_run_113 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.INT _v ->
            _menhir_run_122 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.CHAR _v ->
            _menhir_run_123 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | MenhirState85 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState86 in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EQUAL ->
            _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | MenhirState61 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState63 in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EQUAL ->
            _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_run_002 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState2 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let (_menhir_stack, _menhir_s, id, _startpos_id_, _endpos_id_) = _menhir_stack in
    let _startpos = _startpos_id_ in
    let _endpos = _endpos_id_ in
    let _v =                   ( TCon(id) ) in
    match _menhir_s with
    | MenhirState300 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState301 in
        (match _tok with
        | HopixParserTokens.LANGLE ->
            let _v = () in
            _menhir_run_004 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EQUAL ->
            _menhir_reduce_077 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | MenhirState291 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState259 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState137 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState71 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState52 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState23 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState24 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState26 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState37 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState33 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState31 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState28 ->
        _menhir_run_030 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v
    | MenhirState1 ->
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState3 in
        (match _tok with
        | HopixParserTokens.LANGLE ->
            let _v = () in
            _menhir_run_004 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.EQUAL ->
            _menhir_reduce_077 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | _ ->
        assert false

and _menhir_reduce_053 : type  tail final. tail -> _ -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok ->
    let _startpos = _endpos in
    let _v =     ( [] ) in
    _menhir_goto_list_located_definition__ _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _startpos _tok _v

and _menhir_run_323 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState323 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_318 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState318 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.COLON ->
        let _v = () in
        _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LOWERCASE_ID _ ->
        _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

and _menhir_run_313 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState313 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_300 : type  tail final. tail -> _ -> _ -> (tail, final) _menhir_state -> _ -> final =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v ->
    let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
    let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
    let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
    let _menhir_s = MenhirState300 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    match _tok with
    | HopixParserTokens.LOWERCASE_ID _v ->
        _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | _ ->
        raise _eRR

and _menhir_run_000 : type  tail. tail -> _ -> _ -> (HopixAST.definition) =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer ->
    let _menhir_s = MenhirState0 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let _endpos = Lexing.dummy_pos in
    match _tok with
    | HopixParserTokens.TYPE ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState1 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_002 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.LET ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState61 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | HopixParserTokens.FUN ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState277 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.COLON ->
            let _v = () in
            _menhir_run_064 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | HopixParserTokens.LOWERCASE_ID _ ->
            _menhir_reduce_071 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
        | _ ->
            raise _eRR)
    | HopixParserTokens.EXTERN ->
        let _v = () in
        let _startpos = _menhir_lexbuf.Lexing.lex_start_p in
        let _endpos = _menhir_lexbuf.Lexing.lex_curr_p in
        let _menhir_stack = (_menhir_stack, _menhir_s, _v, _startpos, _endpos) in
        let _menhir_s = MenhirState287 in
        let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
        (match _tok with
        | HopixParserTokens.LOWERCASE_ID _v ->
            _menhir_run_062 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
        | _ ->
            raise _eRR)
    | _ ->
        raise _eRR

and _menhir_run_298 : type  tail. tail -> _ -> _ -> (HopixAST.t) =
  fun _menhir_stack _menhir_lexbuf _menhir_lexer ->
    let _menhir_s = MenhirState298 in
    let _tok = _menhir_discard _menhir_lexer _menhir_lexbuf in
    let _endpos = Lexing.dummy_pos in
    match _tok with
    | HopixParserTokens.TYPE ->
        let _v = () in
        _menhir_run_300 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.LET ->
        let _v = () in
        _menhir_run_313 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.FUN ->
        let _v = () in
        _menhir_run_318 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EXTERN ->
        let _v = () in
        _menhir_run_323 _menhir_stack _menhir_lexbuf _menhir_lexer _menhir_s _v
    | HopixParserTokens.EOF ->
        _menhir_reduce_053 _menhir_stack _endpos _menhir_lexbuf _menhir_lexer _menhir_s _tok
    | _ ->
        raise _eRR

let program =
  fun _menhir_lexer _menhir_lexbuf ->
    _menhir_run_298 () _menhir_lexbuf _menhir_lexer

and definition =
  fun _menhir_lexer _menhir_lexbuf ->
    _menhir_run_000 () _menhir_lexbuf _menhir_lexer
  
