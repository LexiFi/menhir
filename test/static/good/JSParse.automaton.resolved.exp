State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 657
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On program shift to state 659
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 1:
## Known stack suffix:
## Ltrue
## LR(1) items:
literal -> Ltrue . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> Ltrue

State 2:
## Known stack suffix:
## Ltilde
## LR(1) items:
unary_init_expression -> Ltilde . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 656
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 3:
## Known stack suffix:
## XMLpi
## LR(1) items:
xml_markup -> XMLpi . [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_markup -> XMLpi

State 4:
## Known stack suffix:
## XMLotag_open
## LR(1) items:
xml_element -> XMLotag_open . xml_tag_content_option XMLempty_tag_close [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
xml_element -> XMLotag_open . xml_tag_content_option XMLtag_close xml_element_content XMLctag_open xml_tag_content_option XMLtag_close [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
xml_element -> XMLotag_open . xml_tag_content_option XMLtag_close XMLctag_open xml_tag_content_option XMLtag_close [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
xml_list_initialiser -> XMLotag_open . XMLtag_close xml_element_content XMLctag_open XMLtag_close [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLwhitespace shift to state 5
-- On XMLtag_close shift to state 6
-- On XMLtag_chars shift to state 9
-- On XMLassign shift to state 10
-- On Llbrace shift to state 629
-- On xml_tag_content_option shift to state 632
-- On xml_tag_content shift to state 637
## Reductions:

State 5:
## Known stack suffix:
## XMLwhitespace
## LR(1) items:
xml_tag_content -> XMLwhitespace . [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tag_content -> XMLwhitespace

State 6:
## Known stack suffix:
## XMLotag_open XMLtag_close
## LR(1) items:
xml_list_initialiser -> XMLotag_open XMLtag_close . xml_element_content XMLctag_open XMLtag_close [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLtext shift to state 7
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 8
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Llbrace shift to state 639
-- On xml_markup shift to state 642
-- On xml_element_content shift to state 653
-- On xml_element shift to state 644
## Reductions:

State 7:
## Known stack suffix:
## XMLtext
## LR(1) items:
xml_element_content -> XMLtext . [ XMLctag_open ]
xml_element_content -> XMLtext . xml_element_content [ XMLctag_open ]
## Transitions:
-- On XMLtext shift to state 7
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 8
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Llbrace shift to state 639
-- On xml_markup shift to state 642
-- On xml_element_content shift to state 652
-- On xml_element shift to state 644
## Reductions:
-- On XMLctag_open reduce production xml_element_content -> XMLtext

State 8:
## Known stack suffix:
## XMLotag_open
## LR(1) items:
xml_element -> XMLotag_open . xml_tag_content_option XMLempty_tag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Llbrace ]
xml_element -> XMLotag_open . xml_tag_content_option XMLtag_close xml_element_content XMLctag_open xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Llbrace ]
xml_element -> XMLotag_open . xml_tag_content_option XMLtag_close XMLctag_open xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Llbrace ]
## Transitions:
-- On XMLwhitespace shift to state 5
-- On XMLtag_chars shift to state 9
-- On XMLassign shift to state 10
-- On Llbrace shift to state 629
-- On xml_tag_content_option shift to state 632
-- On xml_tag_content shift to state 637
## Reductions:

State 9:
## Known stack suffix:
## XMLtag_chars
## LR(1) items:
xml_tag_content -> XMLtag_chars . [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tag_content -> XMLtag_chars

State 10:
## Known stack suffix:
## XMLassign
## LR(1) items:
xml_tag_content -> XMLassign . Llbrace expression Lrbrace [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
xml_tag_content -> XMLassign . XMLattr_val [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
-- On XMLattr_val shift to state 11
-- On Llbrace shift to state 12
## Reductions:

State 11:
## Known stack suffix:
## XMLassign XMLattr_val
## LR(1) items:
xml_tag_content -> XMLassign XMLattr_val . [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tag_content -> XMLassign XMLattr_val

State 12:
## Known stack suffix:
## XMLassign Llbrace
## LR(1) items:
xml_tag_content -> XMLassign Llbrace . expression Lrbrace [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 627
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 13:
## Known stack suffix:
## XMLcomment
## LR(1) items:
xml_markup -> XMLcomment . [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_markup -> XMLcomment

State 14:
## Known stack suffix:
## XMLcdata
## LR(1) items:
xml_markup -> XMLcdata . [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_markup -> XMLcdata

State 15:
## Known stack suffix:
## Ltilde
## LR(1) items:
unary_expression -> Ltilde . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 626
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 16:
## Known stack suffix:
## Lstring
## LR(1) items:
literal -> Lstring . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> Lstring

State 17:
## Known stack suffix:
## Lstar
## LR(1) items:
wildcard_identifier -> Lstar . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production wildcard_identifier -> Lstar

State 18:
## Known stack suffix:
## Lregexp
## LR(1) items:
member_expression -> Lregexp . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> Lregexp

State 19:
## Known stack suffix:
## Lplus
## LR(1) items:
unary_expression -> Lplus . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 625
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 20:
## Known stack suffix:
## Lnull
## LR(1) items:
literal -> Lnull . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> Lnull

State 21:
## Known stack suffix:
## Lminus
## LR(1) items:
unary_expression -> Lminus . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 624
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 22:
## Known stack suffix:
## Llparen
## LR(1) items:
primary_expression -> Llparen . expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 622
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 23:
## Known stack suffix:
## Llbracket
## LR(1) items:
array_literal -> Llbracket . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
array_literal -> Llbracket . non_empty_element_list Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lrbracket shift to state 24
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lcomma shift to state 614
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On non_empty_element_list shift to state 615
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On elision shift to state 620
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 621
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 24:
## Known stack suffix:
## Llbracket Lrbracket
## LR(1) items:
array_literal -> Llbracket Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> Llbracket Lrbracket

State 25:
## Known stack suffix:
## Llbrace
## LR(1) items:
object_literal -> Llbrace . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
object_literal -> Llbrace . property_name_and_value_list Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstring shift to state 26
-- On Lrbrace shift to state 27
-- On Lint shift to state 28
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On property_name_and_value_list shift to state 34
-- On property_name shift to state 611
-- On numeric_literal shift to state 609
-- On identifier shift to state 610
## Reductions:

State 26:
## Known stack suffix:
## Lstring
## LR(1) items:
property_name -> Lstring . [ Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> Lstring

State 27:
## Known stack suffix:
## Llbrace Lrbrace
## LR(1) items:
object_literal -> Llbrace Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_literal -> Llbrace Lrbrace

State 28:
## Known stack suffix:
## Lint
## LR(1) items:
numeric_literal -> Lint . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> Lint

State 29:
## Known stack suffix:
## Lident
## LR(1) items:
identifier -> Lident . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> Lident

State 30:
## Known stack suffix:
## Lfloat
## LR(1) items:
numeric_literal -> Lfloat . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> Lfloat

State 31:
## Known stack suffix:
## CKWxml
## LR(1) items:
identifier -> CKWxml . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> CKWxml

State 32:
## Known stack suffix:
## CKWnamespace
## LR(1) items:
identifier -> CKWnamespace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> CKWnamespace

State 33:
## Known stack suffix:
## CKWeach
## LR(1) items:
identifier -> CKWeach . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> CKWeach

State 34:
## Known stack suffix:
## Llbrace property_name_and_value_list
## LR(1) items:
object_literal -> Llbrace property_name_and_value_list . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_name_and_value_list -> property_name_and_value_list . Lcomma property_name Lcolon assignment_expression [ Lrbrace Lcomma ]
## Transitions:
-- On Lrbrace shift to state 35
-- On Lcomma shift to state 36
## Reductions:

State 35:
## Known stack suffix:
## Llbrace property_name_and_value_list Lrbrace
## LR(1) items:
object_literal -> Llbrace property_name_and_value_list Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_literal -> Llbrace property_name_and_value_list Lrbrace

State 36:
## Known stack suffix:
## property_name_and_value_list Lcomma
## LR(1) items:
property_name_and_value_list -> property_name_and_value_list Lcomma . property_name Lcolon assignment_expression [ Lrbrace Lcomma ]
## Transitions:
-- On Lstring shift to state 26
-- On Lint shift to state 28
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On property_name shift to state 37
-- On numeric_literal shift to state 609
-- On identifier shift to state 610
## Reductions:

State 37:
## Known stack suffix:
## property_name_and_value_list Lcomma property_name
## LR(1) items:
property_name_and_value_list -> property_name_and_value_list Lcomma property_name . Lcolon assignment_expression [ Lrbrace Lcomma ]
## Transitions:
-- On Lcolon shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## property_name_and_value_list Lcomma property_name Lcolon
## LR(1) items:
property_name_and_value_list -> property_name_and_value_list Lcomma property_name Lcolon . assignment_expression [ Lrbrace Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 608
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 39:
## Known stack suffix:
## Lincr
## LR(1) items:
unary_expression -> Lincr . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 607
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 40:
## Known stack suffix:
## Lfalse
## LR(1) items:
literal -> Lfalse . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> Lfalse

State 41:
## Known stack suffix:
## Ldecr
## LR(1) items:
unary_expression -> Ldecr . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 606
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 42:
## Known stack suffix:
## Lbang
## LR(1) items:
unary_expression -> Lbang . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 605
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 43:
## Known stack suffix:
## Lat
## LR(1) items:
attribute_identifier -> Lat . property_selector [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
attribute_identifier -> Lat . qualified_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
attribute_identifier -> Lat . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Llbracket shift to state 44
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 208
-- On qualified_identifier shift to state 603
-- On property_selector shift to state 604
-- On identifier shift to state 210
## Reductions:

State 44:
## Known stack suffix:
## Lat Llbracket
## LR(1) items:
attribute_identifier -> Lat Llbracket . expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 601
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 45:
## Known stack suffix:
## LCcomment
## LR(1) items:
function_expression -> LCcomment . KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> LCcomment . KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On KWfunction shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## LCcomment KWfunction
## LR(1) items:
function_expression -> LCcomment KWfunction . Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> LCcomment KWfunction . identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 47
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 594
## Reductions:

State 47:
## Known stack suffix:
## LCcomment KWfunction Llparen
## LR(1) items:
function_expression -> LCcomment KWfunction Llparen . formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 48
-- On formal_parameter_list shift to state 49
## Reductions:
-- On Lrparen reduce production formal_parameter_list ->
-- On Lcomma reduce production formal_parameter_list ->

State 48:
## Known stack suffix:
## identifier
## LR(1) items:
formal_parameter_list -> identifier . [ Lrparen Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter_list -> identifier

State 49:
## Known stack suffix:
## LCcomment KWfunction Llparen formal_parameter_list
## LR(1) items:
formal_parameter_list -> formal_parameter_list . Lcomma identifier [ Lrparen Lcomma ]
function_expression -> LCcomment KWfunction Llparen formal_parameter_list . Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 50
-- On Lcomma shift to state 565
## Reductions:

State 50:
## Known stack suffix:
## LCcomment KWfunction Llparen formal_parameter_list Lrparen
## LR(1) items:
function_expression -> LCcomment KWfunction Llparen formal_parameter_list Lrparen . Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llbrace shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## LCcomment KWfunction Llparen formal_parameter_list Lrparen Llbrace
## LR(1) items:
function_expression -> LCcomment KWfunction Llparen formal_parameter_list Lrparen Llbrace . function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 592
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 52:
## Known stack suffix:
## Lsemicolon
## LR(1) items:
empty_statement -> Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production empty_statement -> Lsemicolon

State 53:
## Known stack suffix:
## Lregexp
## LR(1) items:
member_init_expression -> Lregexp . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_init_expression -> Lregexp

State 54:
## Known stack suffix:
## Lplus
## LR(1) items:
unary_init_expression -> Lplus . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 591
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 55:
## Known stack suffix:
## KWvoid
## LR(1) items:
unary_expression -> KWvoid . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 590
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 56:
## Known stack suffix:
## KWtypeof
## LR(1) items:
unary_expression -> KWtypeof . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 589
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 57:
## Known stack suffix:
## KWthis
## LR(1) items:
primary_expression -> KWthis . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> KWthis

State 58:
## Known stack suffix:
## KWnew
## LR(1) items:
member_expression -> KWnew . member_expression arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
new_expression -> KWnew . new_expression [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lnull shift to state 20
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 586
-- On member_expression shift to state 587
-- On literal shift to state 95
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 59:
## Known stack suffix:
## KWfunction
## LR(1) items:
function_expression -> KWfunction . Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction . identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction . Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction . identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 60
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 575
## Reductions:

State 60:
## Known stack suffix:
## KWfunction Llparen
## LR(1) items:
function_expression -> KWfunction Llparen . formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction Llparen . formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 48
-- On formal_parameter_list shift to state 61
## Reductions:
-- On Lrparen reduce production formal_parameter_list ->
-- On Lcomma reduce production formal_parameter_list ->

State 61:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list
## LR(1) items:
formal_parameter_list -> formal_parameter_list . Lcomma identifier [ Lrparen Lcomma ]
function_expression -> KWfunction Llparen formal_parameter_list . Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction Llparen formal_parameter_list . Lrparen LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 62
-- On Lcomma shift to state 565
## Reductions:

State 62:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen . Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction Llparen formal_parameter_list Lrparen . LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llbrace shift to state 63
-- On LCcomment shift to state 571
## Reductions:

State 63:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen Llbrace
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen Llbrace . function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 569
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 64:
## Known stack suffix:
## Lminus
## LR(1) items:
unary_init_expression -> Lminus . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 211
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 65:
## Known stack suffix:
## KWdelete
## LR(1) items:
unary_expression -> KWdelete . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 71
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 66:
## Known stack suffix:
## xml_markup
## LR(1) items:
xml_initialiser -> xml_markup . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_initialiser -> xml_markup

State 67:
## Known stack suffix:
## xml_list_initialiser
## LR(1) items:
primary_expression -> xml_list_initialiser . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> xml_list_initialiser

State 68:
## Known stack suffix:
## xml_initialiser
## LR(1) items:
primary_expression -> xml_initialiser . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> xml_initialiser

State 69:
## Known stack suffix:
## xml_element
## LR(1) items:
xml_initialiser -> xml_element . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_initialiser -> xml_element

State 70:
## Known stack suffix:
## wildcard_identifier
## LR(1) items:
property_identifier -> wildcard_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> wildcard_identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production property_identifier -> wildcard_identifier
-- On Lxor reduce production property_identifier -> wildcard_identifier
-- On Lstarassign reduce production property_identifier -> wildcard_identifier
-- On Lstar reduce production property_identifier -> wildcard_identifier
-- On Lslashassign reduce production property_identifier -> wildcard_identifier
-- On Lslash reduce production property_identifier -> wildcard_identifier
-- On Lsemicolon reduce production property_identifier -> wildcard_identifier
-- On Lsc_or reduce production property_identifier -> wildcard_identifier
-- On Lsc_and reduce production property_identifier -> wildcard_identifier
-- On Lrunsignedshiftassign reduce production property_identifier -> wildcard_identifier
-- On Lrunsignedshift reduce production property_identifier -> wildcard_identifier
-- On Lrsignedshiftassign reduce production property_identifier -> wildcard_identifier
-- On Lrsignedshift reduce production property_identifier -> wildcard_identifier
-- On Lrparen reduce production property_identifier -> wildcard_identifier
-- On Lremassign reduce production property_identifier -> wildcard_identifier
-- On Lrem reduce production property_identifier -> wildcard_identifier
-- On Lrbracket reduce production property_identifier -> wildcard_identifier
-- On Lrbrace reduce production property_identifier -> wildcard_identifier
-- On Lplusassign reduce production property_identifier -> wildcard_identifier
-- On Lplus reduce production property_identifier -> wildcard_identifier
-- On Lorassign reduce production property_identifier -> wildcard_identifier
-- On Lneq reduce production property_identifier -> wildcard_identifier
-- On Lne reduce production property_identifier -> wildcard_identifier
-- On Lminusassign reduce production property_identifier -> wildcard_identifier
-- On Lminus reduce production property_identifier -> wildcard_identifier
-- On Llshiftassign reduce production property_identifier -> wildcard_identifier
-- On Llshift reduce production property_identifier -> wildcard_identifier
-- On Llparen reduce production property_identifier -> wildcard_identifier
-- On Lless reduce production property_identifier -> wildcard_identifier
-- On Lle reduce production property_identifier -> wildcard_identifier
-- On Llbracket reduce production property_identifier -> wildcard_identifier
-- On Lincr reduce production property_identifier -> wildcard_identifier
-- On Lhook reduce production property_identifier -> wildcard_identifier
-- On Lgreater reduce production property_identifier -> wildcard_identifier
-- On Lge reduce production property_identifier -> wildcard_identifier
-- On Leqq reduce production property_identifier -> wildcard_identifier
-- On Leq reduce production property_identifier -> wildcard_identifier
-- On Ldot reduce production property_identifier -> wildcard_identifier
-- On Ldecr reduce production property_identifier -> wildcard_identifier
-- On Lddot reduce production property_identifier -> wildcard_identifier
-- On Ldcolon reduce production property_selector -> wildcard_identifier
-- On Lcomma reduce production property_identifier -> wildcard_identifier
-- On Lcolon reduce production property_identifier -> wildcard_identifier
-- On Lbit_or reduce production property_identifier -> wildcard_identifier
-- On Lbit_and reduce production property_identifier -> wildcard_identifier
-- On Lassign reduce production property_identifier -> wildcard_identifier
-- On Landassign reduce production property_identifier -> wildcard_identifier
-- On KWinstanceof reduce production property_identifier -> wildcard_identifier
-- On KWin reduce production property_identifier -> wildcard_identifier

State 71:
## Known stack suffix:
## KWdelete unary_expression
## LR(1) items:
unary_expression -> KWdelete unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> KWdelete unary_expression

State 72:
## Known stack suffix:
## qualified_identifier
## LR(1) items:
property_identifier -> qualified_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_identifier -> qualified_identifier

State 73:
## Known stack suffix:
## property_selector
## LR(1) items:
qualified_identifier -> property_selector . Ldcolon property_selector [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
qualified_identifier -> property_selector . Ldcolon Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ldcolon shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## property_selector Ldcolon
## LR(1) items:
qualified_identifier -> property_selector Ldcolon . property_selector [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
qualified_identifier -> property_selector Ldcolon . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Llbracket shift to state 75
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 208
-- On property_selector shift to state 209
-- On identifier shift to state 210
## Reductions:

State 75:
## Known stack suffix:
## property_selector Ldcolon Llbracket
## LR(1) items:
qualified_identifier -> property_selector Ldcolon Llbracket . expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 206
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 76:
## Known stack suffix:
## unary_expression
## LR(1) items:
multiplicative_expression -> unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> unary_expression

State 77:
## Known stack suffix:
## shift_expression
## LR(1) items:
relational_expression -> shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression -> shift_expression
-- On Lsemicolon reduce production relational_expression -> shift_expression
-- On Lsc_or reduce production relational_expression -> shift_expression
-- On Lsc_and reduce production relational_expression -> shift_expression
-- On Lrparen reduce production relational_expression -> shift_expression
-- On Lrbracket reduce production relational_expression -> shift_expression
-- On Lrbrace reduce production relational_expression -> shift_expression
-- On Lneq reduce production relational_expression -> shift_expression
-- On Lne reduce production relational_expression -> shift_expression
-- On Lless reduce production relational_expression -> shift_expression
-- On Lle reduce production relational_expression -> shift_expression
-- On Lhook reduce production relational_expression -> shift_expression
-- On Lgreater reduce production relational_expression -> shift_expression
-- On Lge reduce production relational_expression -> shift_expression
-- On Leqq reduce production relational_expression -> shift_expression
-- On Leq reduce production relational_expression -> shift_expression
-- On Lcomma reduce production relational_expression -> shift_expression
-- On Lcolon reduce production relational_expression -> shift_expression
-- On Lbit_or reduce production relational_expression -> shift_expression
-- On Lbit_and reduce production relational_expression -> shift_expression
-- On KWinstanceof reduce production relational_expression -> shift_expression
-- On KWin reduce production relational_expression -> shift_expression

State 78:
## Known stack suffix:
## shift_expression Lrunsignedshift
## LR(1) items:
shift_expression -> shift_expression Lrunsignedshift . additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 205
## Reductions:

State 79:
## Known stack suffix:
## property_identifier
## LR(1) items:
primary_expression -> property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> property_identifier

State 80:
## Known stack suffix:
## primary_expression
## LR(1) items:
member_expression -> primary_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> primary_expression

State 81:
## Known stack suffix:
## postfix_expression
## LR(1) items:
unary_expression -> postfix_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> postfix_expression

State 82:
## Known stack suffix:
## object_literal
## LR(1) items:
primary_expression -> object_literal . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> object_literal

State 83:
## Known stack suffix:
## numeric_literal
## LR(1) items:
literal -> numeric_literal . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> numeric_literal

State 84:
## Known stack suffix:
## new_expression
## LR(1) items:
left_hand_side_expression -> new_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_hand_side_expression -> new_expression

State 85:
## Known stack suffix:
## multiplicative_expression
## LR(1) items:
additive_expression -> multiplicative_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lstar unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lslash unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lrem unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 86
-- On Lslash shift to state 120
-- On Lrem shift to state 122
## Reductions:
-- On Lxor reduce production additive_expression -> multiplicative_expression
-- On Lsemicolon reduce production additive_expression -> multiplicative_expression
-- On Lsc_or reduce production additive_expression -> multiplicative_expression
-- On Lsc_and reduce production additive_expression -> multiplicative_expression
-- On Lrunsignedshift reduce production additive_expression -> multiplicative_expression
-- On Lrsignedshift reduce production additive_expression -> multiplicative_expression
-- On Lrparen reduce production additive_expression -> multiplicative_expression
-- On Lrbracket reduce production additive_expression -> multiplicative_expression
-- On Lrbrace reduce production additive_expression -> multiplicative_expression
-- On Lplus reduce production additive_expression -> multiplicative_expression
-- On Lneq reduce production additive_expression -> multiplicative_expression
-- On Lne reduce production additive_expression -> multiplicative_expression
-- On Lminus reduce production additive_expression -> multiplicative_expression
-- On Llshift reduce production additive_expression -> multiplicative_expression
-- On Lless reduce production additive_expression -> multiplicative_expression
-- On Lle reduce production additive_expression -> multiplicative_expression
-- On Lhook reduce production additive_expression -> multiplicative_expression
-- On Lgreater reduce production additive_expression -> multiplicative_expression
-- On Lge reduce production additive_expression -> multiplicative_expression
-- On Leqq reduce production additive_expression -> multiplicative_expression
-- On Leq reduce production additive_expression -> multiplicative_expression
-- On Lcomma reduce production additive_expression -> multiplicative_expression
-- On Lcolon reduce production additive_expression -> multiplicative_expression
-- On Lbit_or reduce production additive_expression -> multiplicative_expression
-- On Lbit_and reduce production additive_expression -> multiplicative_expression
-- On KWinstanceof reduce production additive_expression -> multiplicative_expression
-- On KWin reduce production additive_expression -> multiplicative_expression

State 86:
## Known stack suffix:
## multiplicative_expression Lstar
## LR(1) items:
multiplicative_expression -> multiplicative_expression Lstar . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 87
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 87:
## Known stack suffix:
## multiplicative_expression Lstar unary_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression Lstar unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> multiplicative_expression Lstar unary_expression

State 88:
## Known stack suffix:
## member_expression
## LR(1) items:
call_expression -> member_expression . arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Lddot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Lddot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
new_expression -> member_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 89
-- On Llbracket shift to state 192
-- On Ldot shift to state 195
-- On Lddot shift to state 201
-- On arguments shift to state 204
## Reductions:
-- On Lxorassign reduce production new_expression -> member_expression
-- On Lxor reduce production new_expression -> member_expression
-- On Lstarassign reduce production new_expression -> member_expression
-- On Lstar reduce production new_expression -> member_expression
-- On Lslashassign reduce production new_expression -> member_expression
-- On Lslash reduce production new_expression -> member_expression
-- On Lsemicolon reduce production new_expression -> member_expression
-- On Lsc_or reduce production new_expression -> member_expression
-- On Lsc_and reduce production new_expression -> member_expression
-- On Lrunsignedshiftassign reduce production new_expression -> member_expression
-- On Lrunsignedshift reduce production new_expression -> member_expression
-- On Lrsignedshiftassign reduce production new_expression -> member_expression
-- On Lrsignedshift reduce production new_expression -> member_expression
-- On Lrparen reduce production new_expression -> member_expression
-- On Lremassign reduce production new_expression -> member_expression
-- On Lrem reduce production new_expression -> member_expression
-- On Lrbracket reduce production new_expression -> member_expression
-- On Lrbrace reduce production new_expression -> member_expression
-- On Lplusassign reduce production new_expression -> member_expression
-- On Lplus reduce production new_expression -> member_expression
-- On Lorassign reduce production new_expression -> member_expression
-- On Lneq reduce production new_expression -> member_expression
-- On Lne reduce production new_expression -> member_expression
-- On Lminusassign reduce production new_expression -> member_expression
-- On Lminus reduce production new_expression -> member_expression
-- On Llshiftassign reduce production new_expression -> member_expression
-- On Llshift reduce production new_expression -> member_expression
-- On Lless reduce production new_expression -> member_expression
-- On Lle reduce production new_expression -> member_expression
-- On Lincr reduce production new_expression -> member_expression
-- On Lhook reduce production new_expression -> member_expression
-- On Lgreater reduce production new_expression -> member_expression
-- On Lge reduce production new_expression -> member_expression
-- On Leqq reduce production new_expression -> member_expression
-- On Leq reduce production new_expression -> member_expression
-- On Ldecr reduce production new_expression -> member_expression
-- On Lcomma reduce production new_expression -> member_expression
-- On Lcolon reduce production new_expression -> member_expression
-- On Lbit_or reduce production new_expression -> member_expression
-- On Lbit_and reduce production new_expression -> member_expression
-- On Lassign reduce production new_expression -> member_expression
-- On Landassign reduce production new_expression -> member_expression
-- On KWinstanceof reduce production new_expression -> member_expression
-- On KWin reduce production new_expression -> member_expression

State 89:
## Known stack suffix:
## Llparen
## LR(1) items:
arguments -> Llparen . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
arguments -> Llparen . argument_list Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lrparen shift to state 90
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 187
-- On array_literal shift to state 116
-- On argument_list shift to state 188
-- On additive_expression shift to state 126
## Reductions:

State 90:
## Known stack suffix:
## Llparen Lrparen
## LR(1) items:
arguments -> Llparen Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> Llparen Lrparen

State 91:
## Known stack suffix:
## relational_expression
## LR(1) items:
equality_expression -> relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_expression -> relational_expression
-- On Lsemicolon reduce production equality_expression -> relational_expression
-- On Lsc_or reduce production equality_expression -> relational_expression
-- On Lsc_and reduce production equality_expression -> relational_expression
-- On Lrparen reduce production equality_expression -> relational_expression
-- On Lrbracket reduce production equality_expression -> relational_expression
-- On Lrbrace reduce production equality_expression -> relational_expression
-- On Lneq reduce production equality_expression -> relational_expression
-- On Lne reduce production equality_expression -> relational_expression
-- On Lhook reduce production equality_expression -> relational_expression
-- On Leqq reduce production equality_expression -> relational_expression
-- On Leq reduce production equality_expression -> relational_expression
-- On Lcomma reduce production equality_expression -> relational_expression
-- On Lcolon reduce production equality_expression -> relational_expression
-- On Lbit_or reduce production equality_expression -> relational_expression
-- On Lbit_and reduce production equality_expression -> relational_expression

State 92:
## Known stack suffix:
## relational_expression Lless
## LR(1) items:
relational_expression -> relational_expression Lless . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 93
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 93:
## Known stack suffix:
## relational_expression Lless shift_expression
## LR(1) items:
relational_expression -> relational_expression Lless shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lsemicolon reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lsc_or reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lsc_and reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lrparen reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lrbracket reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lrbrace reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lneq reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lne reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lless reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lle reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lhook reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lgreater reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lge reduce production relational_expression -> relational_expression Lless shift_expression
-- On Leqq reduce production relational_expression -> relational_expression Lless shift_expression
-- On Leq reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lcomma reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lcolon reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lbit_or reduce production relational_expression -> relational_expression Lless shift_expression
-- On Lbit_and reduce production relational_expression -> relational_expression Lless shift_expression
-- On KWinstanceof reduce production relational_expression -> relational_expression Lless shift_expression
-- On KWin reduce production relational_expression -> relational_expression Lless shift_expression

State 94:
## Known stack suffix:
## shift_expression Lrsignedshift
## LR(1) items:
shift_expression -> shift_expression Lrsignedshift . additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 186
## Reductions:

State 95:
## Known stack suffix:
## literal
## LR(1) items:
primary_expression -> literal . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> literal

State 96:
## Known stack suffix:
## left_hand_side_expression
## LR(1) items:
postfix_expression -> left_hand_side_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
postfix_expression -> left_hand_side_expression . Lincr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
postfix_expression -> left_hand_side_expression . Ldecr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lincr shift to state 97
-- On Ldecr shift to state 98
## Reductions:
-- On Lxor reduce production postfix_expression -> left_hand_side_expression
-- On Lstar reduce production postfix_expression -> left_hand_side_expression
-- On Lslash reduce production postfix_expression -> left_hand_side_expression
-- On Lsemicolon reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_or reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_and reduce production postfix_expression -> left_hand_side_expression
-- On Lrunsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrparen reduce production postfix_expression -> left_hand_side_expression
-- On Lrem reduce production postfix_expression -> left_hand_side_expression
-- On Lrbracket reduce production postfix_expression -> left_hand_side_expression
-- On Lrbrace reduce production postfix_expression -> left_hand_side_expression
-- On Lplus reduce production postfix_expression -> left_hand_side_expression
-- On Lneq reduce production postfix_expression -> left_hand_side_expression
-- On Lne reduce production postfix_expression -> left_hand_side_expression
-- On Lminus reduce production postfix_expression -> left_hand_side_expression
-- On Llshift reduce production postfix_expression -> left_hand_side_expression
-- On Lless reduce production postfix_expression -> left_hand_side_expression
-- On Lle reduce production postfix_expression -> left_hand_side_expression
-- On Lhook reduce production postfix_expression -> left_hand_side_expression
-- On Lgreater reduce production postfix_expression -> left_hand_side_expression
-- On Lge reduce production postfix_expression -> left_hand_side_expression
-- On Leqq reduce production postfix_expression -> left_hand_side_expression
-- On Leq reduce production postfix_expression -> left_hand_side_expression
-- On Lcomma reduce production postfix_expression -> left_hand_side_expression
-- On Lcolon reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_or reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_and reduce production postfix_expression -> left_hand_side_expression
-- On KWinstanceof reduce production postfix_expression -> left_hand_side_expression
-- On KWin reduce production postfix_expression -> left_hand_side_expression

State 97:
## Known stack suffix:
## left_hand_side_expression Lincr
## LR(1) items:
postfix_expression -> left_hand_side_expression Lincr . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> left_hand_side_expression Lincr

State 98:
## Known stack suffix:
## left_hand_side_expression Ldecr
## LR(1) items:
postfix_expression -> left_hand_side_expression Ldecr . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> left_hand_side_expression Ldecr

State 99:
## Known stack suffix:
## identifier
## LR(1) items:
primary_expression -> identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production primary_expression -> identifier
-- On Lxor reduce production primary_expression -> identifier
-- On Lstarassign reduce production primary_expression -> identifier
-- On Lstar reduce production primary_expression -> identifier
-- On Lslashassign reduce production primary_expression -> identifier
-- On Lslash reduce production primary_expression -> identifier
-- On Lsemicolon reduce production primary_expression -> identifier
-- On Lsc_or reduce production primary_expression -> identifier
-- On Lsc_and reduce production primary_expression -> identifier
-- On Lrunsignedshiftassign reduce production primary_expression -> identifier
-- On Lrunsignedshift reduce production primary_expression -> identifier
-- On Lrsignedshiftassign reduce production primary_expression -> identifier
-- On Lrsignedshift reduce production primary_expression -> identifier
-- On Lrparen reduce production primary_expression -> identifier
-- On Lremassign reduce production primary_expression -> identifier
-- On Lrem reduce production primary_expression -> identifier
-- On Lrbracket reduce production primary_expression -> identifier
-- On Lrbrace reduce production primary_expression -> identifier
-- On Lplusassign reduce production primary_expression -> identifier
-- On Lplus reduce production primary_expression -> identifier
-- On Lorassign reduce production primary_expression -> identifier
-- On Lneq reduce production primary_expression -> identifier
-- On Lne reduce production primary_expression -> identifier
-- On Lminusassign reduce production primary_expression -> identifier
-- On Lminus reduce production primary_expression -> identifier
-- On Llshiftassign reduce production primary_expression -> identifier
-- On Llshift reduce production primary_expression -> identifier
-- On Llparen reduce production primary_expression -> identifier
-- On Lless reduce production primary_expression -> identifier
-- On Lle reduce production primary_expression -> identifier
-- On Llbracket reduce production primary_expression -> identifier
-- On Lincr reduce production primary_expression -> identifier
-- On Lhook reduce production primary_expression -> identifier
-- On Lgreater reduce production primary_expression -> identifier
-- On Lge reduce production primary_expression -> identifier
-- On Leqq reduce production primary_expression -> identifier
-- On Leq reduce production primary_expression -> identifier
-- On Ldot reduce production primary_expression -> identifier
-- On Ldecr reduce production primary_expression -> identifier
-- On Lddot reduce production primary_expression -> identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production primary_expression -> identifier
-- On Lcolon reduce production primary_expression -> identifier
-- On Lbit_or reduce production primary_expression -> identifier
-- On Lbit_and reduce production primary_expression -> identifier
-- On Lassign reduce production primary_expression -> identifier
-- On Landassign reduce production primary_expression -> identifier
-- On KWinstanceof reduce production primary_expression -> identifier
-- On KWin reduce production primary_expression -> identifier

State 100:
## Known stack suffix:
## function_expression
## LR(1) items:
member_expression -> function_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> function_expression

State 101:
## Known stack suffix:
## call_expression
## LR(1) items:
call_expression -> call_expression . arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression . Ldot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression . Ldot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression . Lddot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression . Lddot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression . Ldot Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
left_hand_side_expression -> call_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 89
-- On Llbracket shift to state 102
-- On Ldot shift to state 176
-- On Lddot shift to state 182
-- On arguments shift to state 185
## Reductions:
-- On Lxorassign reduce production left_hand_side_expression -> call_expression
-- On Lxor reduce production left_hand_side_expression -> call_expression
-- On Lstarassign reduce production left_hand_side_expression -> call_expression
-- On Lstar reduce production left_hand_side_expression -> call_expression
-- On Lslashassign reduce production left_hand_side_expression -> call_expression
-- On Lslash reduce production left_hand_side_expression -> call_expression
-- On Lsemicolon reduce production left_hand_side_expression -> call_expression
-- On Lsc_or reduce production left_hand_side_expression -> call_expression
-- On Lsc_and reduce production left_hand_side_expression -> call_expression
-- On Lrunsignedshiftassign reduce production left_hand_side_expression -> call_expression
-- On Lrunsignedshift reduce production left_hand_side_expression -> call_expression
-- On Lrsignedshiftassign reduce production left_hand_side_expression -> call_expression
-- On Lrsignedshift reduce production left_hand_side_expression -> call_expression
-- On Lrparen reduce production left_hand_side_expression -> call_expression
-- On Lremassign reduce production left_hand_side_expression -> call_expression
-- On Lrem reduce production left_hand_side_expression -> call_expression
-- On Lrbracket reduce production left_hand_side_expression -> call_expression
-- On Lrbrace reduce production left_hand_side_expression -> call_expression
-- On Lplusassign reduce production left_hand_side_expression -> call_expression
-- On Lplus reduce production left_hand_side_expression -> call_expression
-- On Lorassign reduce production left_hand_side_expression -> call_expression
-- On Lneq reduce production left_hand_side_expression -> call_expression
-- On Lne reduce production left_hand_side_expression -> call_expression
-- On Lminusassign reduce production left_hand_side_expression -> call_expression
-- On Lminus reduce production left_hand_side_expression -> call_expression
-- On Llshiftassign reduce production left_hand_side_expression -> call_expression
-- On Llshift reduce production left_hand_side_expression -> call_expression
-- On Lless reduce production left_hand_side_expression -> call_expression
-- On Lle reduce production left_hand_side_expression -> call_expression
-- On Lincr reduce production left_hand_side_expression -> call_expression
-- On Lhook reduce production left_hand_side_expression -> call_expression
-- On Lgreater reduce production left_hand_side_expression -> call_expression
-- On Lge reduce production left_hand_side_expression -> call_expression
-- On Leqq reduce production left_hand_side_expression -> call_expression
-- On Leq reduce production left_hand_side_expression -> call_expression
-- On Ldecr reduce production left_hand_side_expression -> call_expression
-- On Lcomma reduce production left_hand_side_expression -> call_expression
-- On Lcolon reduce production left_hand_side_expression -> call_expression
-- On Lbit_or reduce production left_hand_side_expression -> call_expression
-- On Lbit_and reduce production left_hand_side_expression -> call_expression
-- On Lassign reduce production left_hand_side_expression -> call_expression
-- On Landassign reduce production left_hand_side_expression -> call_expression
-- On KWinstanceof reduce production left_hand_side_expression -> call_expression
-- On KWin reduce production left_hand_side_expression -> call_expression

State 102:
## Known stack suffix:
## call_expression Llbracket
## LR(1) items:
call_expression -> call_expression Llbracket . expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 173
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 103:
## Known stack suffix:
## sequence_of_expression
## LR(1) items:
expression -> sequence_of_expression . [ Lsemicolon Lrparen Lrbracket Lrbrace Lcolon ]
sequence_of_expression -> sequence_of_expression . Lcomma assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
-- On Lcomma shift to state 104
## Reductions:
-- On Lsemicolon reduce production expression -> sequence_of_expression
-- On Lrparen reduce production expression -> sequence_of_expression
-- On Lrbracket reduce production expression -> sequence_of_expression
-- On Lrbrace reduce production expression -> sequence_of_expression
-- On Lcolon reduce production expression -> sequence_of_expression

State 104:
## Known stack suffix:
## sequence_of_expression Lcomma
## LR(1) items:
sequence_of_expression -> sequence_of_expression Lcomma . assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 172
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 105:
## Known stack suffix:
## logical_or_expression
## LR(1) items:
conditional_expression -> logical_or_expression . [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
conditional_expression -> logical_or_expression . Lhook assignment_expression Lcolon assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
logical_or_expression -> logical_or_expression . Lsc_or logical_and_expression [ Lsemicolon Lsc_or Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
## Transitions:
-- On Lsc_or shift to state 106
-- On Lhook shift to state 151
## Reductions:
-- On Lsemicolon reduce production conditional_expression -> logical_or_expression
-- On Lrparen reduce production conditional_expression -> logical_or_expression
-- On Lrbracket reduce production conditional_expression -> logical_or_expression
-- On Lrbrace reduce production conditional_expression -> logical_or_expression
-- On Lcomma reduce production conditional_expression -> logical_or_expression
-- On Lcolon reduce production conditional_expression -> logical_or_expression

State 106:
## Known stack suffix:
## logical_or_expression Lsc_or
## LR(1) items:
logical_or_expression -> logical_or_expression Lsc_or . logical_and_expression [ Lsemicolon Lsc_or Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_and_expression shift to state 107
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 107:
## Known stack suffix:
## logical_or_expression Lsc_or logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . Lsc_and bitwise_or_expression [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
logical_or_expression -> logical_or_expression Lsc_or logical_and_expression . [ Lsemicolon Lsc_or Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
## Transitions:
-- On Lsc_and shift to state 108
## Reductions:
-- On Lsemicolon reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression
-- On Lsc_or reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression
-- On Lrparen reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression
-- On Lrbracket reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression
-- On Lrbrace reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression
-- On Lhook reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression
-- On Lcomma reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression
-- On Lcolon reduce production logical_or_expression -> logical_or_expression Lsc_or logical_and_expression

State 108:
## Known stack suffix:
## logical_and_expression Lsc_and
## LR(1) items:
logical_and_expression -> logical_and_expression Lsc_and . bitwise_or_expression [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 146
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 109:
## Known stack suffix:
## equality_expression
## LR(1) items:
bitwise_and_expression -> equality_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Leq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Lne relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Leqq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Lneq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
## Transitions:
-- On Lneq shift to state 110
-- On Lne shift to state 135
-- On Leqq shift to state 137
-- On Leq shift to state 139
## Reductions:
-- On Lxor reduce production bitwise_and_expression -> equality_expression
-- On Lsemicolon reduce production bitwise_and_expression -> equality_expression
-- On Lsc_or reduce production bitwise_and_expression -> equality_expression
-- On Lsc_and reduce production bitwise_and_expression -> equality_expression
-- On Lrparen reduce production bitwise_and_expression -> equality_expression
-- On Lrbracket reduce production bitwise_and_expression -> equality_expression
-- On Lrbrace reduce production bitwise_and_expression -> equality_expression
-- On Lhook reduce production bitwise_and_expression -> equality_expression
-- On Lcomma reduce production bitwise_and_expression -> equality_expression
-- On Lcolon reduce production bitwise_and_expression -> equality_expression
-- On Lbit_or reduce production bitwise_and_expression -> equality_expression
-- On Lbit_and reduce production bitwise_and_expression -> equality_expression

State 110:
## Known stack suffix:
## equality_expression Lneq
## LR(1) items:
equality_expression -> equality_expression Lneq . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 111
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 111:
## Known stack suffix:
## equality_expression Lneq relational_expression
## LR(1) items:
equality_expression -> equality_expression Lneq relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lsemicolon reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lsc_or reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lsc_and reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lrparen reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lrbracket reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lrbrace reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lneq reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lne reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lhook reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Leqq reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Leq reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lcomma reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lcolon reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lbit_or reduce production equality_expression -> equality_expression Lneq relational_expression
-- On Lbit_and reduce production equality_expression -> equality_expression Lneq relational_expression

State 112:
## Known stack suffix:
## relational_expression Lle
## LR(1) items:
relational_expression -> relational_expression Lle . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 113
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 113:
## Known stack suffix:
## relational_expression Lle shift_expression
## LR(1) items:
relational_expression -> relational_expression Lle shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lsemicolon reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lsc_or reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lsc_and reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lrparen reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lrbracket reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lrbrace reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lneq reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lne reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lless reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lle reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lhook reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lgreater reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lge reduce production relational_expression -> relational_expression Lle shift_expression
-- On Leqq reduce production relational_expression -> relational_expression Lle shift_expression
-- On Leq reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lcomma reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lcolon reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lbit_or reduce production relational_expression -> relational_expression Lle shift_expression
-- On Lbit_and reduce production relational_expression -> relational_expression Lle shift_expression
-- On KWinstanceof reduce production relational_expression -> relational_expression Lle shift_expression
-- On KWin reduce production relational_expression -> relational_expression Lle shift_expression

State 114:
## Known stack suffix:
## shift_expression Llshift
## LR(1) items:
shift_expression -> shift_expression Llshift . additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 117
## Reductions:

State 115:
## Known stack suffix:
## attribute_identifier
## LR(1) items:
property_identifier -> attribute_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_identifier -> attribute_identifier

State 116:
## Known stack suffix:
## array_literal
## LR(1) items:
primary_expression -> array_literal . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> array_literal

State 117:
## Known stack suffix:
## shift_expression Llshift additive_expression
## LR(1) items:
additive_expression -> additive_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
additive_expression -> additive_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression Llshift additive_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 118
-- On Lminus shift to state 124
## Reductions:
-- On Lxor reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lsemicolon reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lsc_or reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lsc_and reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lrunsignedshift reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lrsignedshift reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lrparen reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lrbracket reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lrbrace reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lneq reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lne reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Llshift reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lless reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lle reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lhook reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lgreater reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lge reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Leqq reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Leq reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lcomma reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lcolon reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lbit_or reduce production shift_expression -> shift_expression Llshift additive_expression
-- On Lbit_and reduce production shift_expression -> shift_expression Llshift additive_expression
-- On KWinstanceof reduce production shift_expression -> shift_expression Llshift additive_expression
-- On KWin reduce production shift_expression -> shift_expression Llshift additive_expression

State 118:
## Known stack suffix:
## additive_expression Lplus
## LR(1) items:
additive_expression -> additive_expression Lplus . multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 119
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 119:
## Known stack suffix:
## additive_expression Lplus multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression Lplus multiplicative_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lstar unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lslash unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lrem unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 86
-- On Lslash shift to state 120
-- On Lrem shift to state 122
## Reductions:
-- On Lxor reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lsemicolon reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lsc_or reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lsc_and reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lrunsignedshift reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lrsignedshift reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lrparen reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lrbracket reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lrbrace reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lplus reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lneq reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lne reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lminus reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Llshift reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lless reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lle reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lhook reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lgreater reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lge reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Leqq reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Leq reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lcomma reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lcolon reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lbit_or reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On Lbit_and reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On KWinstanceof reduce production additive_expression -> additive_expression Lplus multiplicative_expression
-- On KWin reduce production additive_expression -> additive_expression Lplus multiplicative_expression

State 120:
## Known stack suffix:
## multiplicative_expression Lslash
## LR(1) items:
multiplicative_expression -> multiplicative_expression Lslash . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 121
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 121:
## Known stack suffix:
## multiplicative_expression Lslash unary_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression Lslash unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> multiplicative_expression Lslash unary_expression

State 122:
## Known stack suffix:
## multiplicative_expression Lrem
## LR(1) items:
multiplicative_expression -> multiplicative_expression Lrem . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 123
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 123:
## Known stack suffix:
## multiplicative_expression Lrem unary_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression Lrem unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> multiplicative_expression Lrem unary_expression

State 124:
## Known stack suffix:
## additive_expression Lminus
## LR(1) items:
additive_expression -> additive_expression Lminus . multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 125
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 125:
## Known stack suffix:
## additive_expression Lminus multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression Lminus multiplicative_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lstar unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lslash unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lrem unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 86
-- On Lslash shift to state 120
-- On Lrem shift to state 122
## Reductions:
-- On Lxor reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lsemicolon reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lsc_or reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lsc_and reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lrunsignedshift reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lrsignedshift reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lrparen reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lrbracket reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lrbrace reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lplus reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lneq reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lne reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lminus reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Llshift reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lless reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lle reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lhook reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lgreater reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lge reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Leqq reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Leq reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lcomma reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lcolon reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lbit_or reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On Lbit_and reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On KWinstanceof reduce production additive_expression -> additive_expression Lminus multiplicative_expression
-- On KWin reduce production additive_expression -> additive_expression Lminus multiplicative_expression

State 126:
## Known stack suffix:
## additive_expression
## LR(1) items:
additive_expression -> additive_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
additive_expression -> additive_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> additive_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 118
-- On Lminus shift to state 124
## Reductions:
-- On Lxor reduce production shift_expression -> additive_expression
-- On Lsemicolon reduce production shift_expression -> additive_expression
-- On Lsc_or reduce production shift_expression -> additive_expression
-- On Lsc_and reduce production shift_expression -> additive_expression
-- On Lrunsignedshift reduce production shift_expression -> additive_expression
-- On Lrsignedshift reduce production shift_expression -> additive_expression
-- On Lrparen reduce production shift_expression -> additive_expression
-- On Lrbracket reduce production shift_expression -> additive_expression
-- On Lrbrace reduce production shift_expression -> additive_expression
-- On Lneq reduce production shift_expression -> additive_expression
-- On Lne reduce production shift_expression -> additive_expression
-- On Llshift reduce production shift_expression -> additive_expression
-- On Lless reduce production shift_expression -> additive_expression
-- On Lle reduce production shift_expression -> additive_expression
-- On Lhook reduce production shift_expression -> additive_expression
-- On Lgreater reduce production shift_expression -> additive_expression
-- On Lge reduce production shift_expression -> additive_expression
-- On Leqq reduce production shift_expression -> additive_expression
-- On Leq reduce production shift_expression -> additive_expression
-- On Lcomma reduce production shift_expression -> additive_expression
-- On Lcolon reduce production shift_expression -> additive_expression
-- On Lbit_or reduce production shift_expression -> additive_expression
-- On Lbit_and reduce production shift_expression -> additive_expression
-- On KWinstanceof reduce production shift_expression -> additive_expression
-- On KWin reduce production shift_expression -> additive_expression

State 127:
## Known stack suffix:
## relational_expression Lgreater
## LR(1) items:
relational_expression -> relational_expression Lgreater . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 128
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 128:
## Known stack suffix:
## relational_expression Lgreater shift_expression
## LR(1) items:
relational_expression -> relational_expression Lgreater shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lsemicolon reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lsc_or reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lsc_and reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lrparen reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lrbracket reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lrbrace reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lneq reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lne reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lless reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lle reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lhook reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lgreater reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lge reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Leqq reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Leq reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lcomma reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lcolon reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lbit_or reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On Lbit_and reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On KWinstanceof reduce production relational_expression -> relational_expression Lgreater shift_expression
-- On KWin reduce production relational_expression -> relational_expression Lgreater shift_expression

State 129:
## Known stack suffix:
## relational_expression Lge
## LR(1) items:
relational_expression -> relational_expression Lge . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 130
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 130:
## Known stack suffix:
## relational_expression Lge shift_expression
## LR(1) items:
relational_expression -> relational_expression Lge shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lsemicolon reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lsc_or reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lsc_and reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lrparen reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lrbracket reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lrbrace reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lneq reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lne reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lless reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lle reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lhook reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lgreater reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lge reduce production relational_expression -> relational_expression Lge shift_expression
-- On Leqq reduce production relational_expression -> relational_expression Lge shift_expression
-- On Leq reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lcomma reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lcolon reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lbit_or reduce production relational_expression -> relational_expression Lge shift_expression
-- On Lbit_and reduce production relational_expression -> relational_expression Lge shift_expression
-- On KWinstanceof reduce production relational_expression -> relational_expression Lge shift_expression
-- On KWin reduce production relational_expression -> relational_expression Lge shift_expression

State 131:
## Known stack suffix:
## relational_expression KWinstanceof
## LR(1) items:
relational_expression -> relational_expression KWinstanceof . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 132
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 132:
## Known stack suffix:
## relational_expression KWinstanceof shift_expression
## LR(1) items:
relational_expression -> relational_expression KWinstanceof shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lsemicolon reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lsc_or reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lsc_and reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lrparen reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lrbracket reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lrbrace reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lneq reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lne reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lless reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lle reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lhook reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lgreater reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lge reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Leqq reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Leq reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lcomma reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lcolon reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lbit_or reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On Lbit_and reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On KWinstanceof reduce production relational_expression -> relational_expression KWinstanceof shift_expression
-- On KWin reduce production relational_expression -> relational_expression KWinstanceof shift_expression

State 133:
## Known stack suffix:
## relational_expression KWin
## LR(1) items:
relational_expression -> relational_expression KWin . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 134
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 134:
## Known stack suffix:
## relational_expression KWin shift_expression
## LR(1) items:
relational_expression -> relational_expression KWin shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lsemicolon reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lsc_or reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lsc_and reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lrparen reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lrbracket reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lrbrace reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lneq reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lne reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lless reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lle reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lhook reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lgreater reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lge reduce production relational_expression -> relational_expression KWin shift_expression
-- On Leqq reduce production relational_expression -> relational_expression KWin shift_expression
-- On Leq reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lcomma reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lcolon reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lbit_or reduce production relational_expression -> relational_expression KWin shift_expression
-- On Lbit_and reduce production relational_expression -> relational_expression KWin shift_expression
-- On KWinstanceof reduce production relational_expression -> relational_expression KWin shift_expression
-- On KWin reduce production relational_expression -> relational_expression KWin shift_expression

State 135:
## Known stack suffix:
## equality_expression Lne
## LR(1) items:
equality_expression -> equality_expression Lne . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 136
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 136:
## Known stack suffix:
## equality_expression Lne relational_expression
## LR(1) items:
equality_expression -> equality_expression Lne relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lsemicolon reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lsc_or reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lsc_and reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lrparen reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lrbracket reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lrbrace reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lneq reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lne reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lhook reduce production equality_expression -> equality_expression Lne relational_expression
-- On Leqq reduce production equality_expression -> equality_expression Lne relational_expression
-- On Leq reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lcomma reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lcolon reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lbit_or reduce production equality_expression -> equality_expression Lne relational_expression
-- On Lbit_and reduce production equality_expression -> equality_expression Lne relational_expression

State 137:
## Known stack suffix:
## equality_expression Leqq
## LR(1) items:
equality_expression -> equality_expression Leqq . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 138
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 138:
## Known stack suffix:
## equality_expression Leqq relational_expression
## LR(1) items:
equality_expression -> equality_expression Leqq relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lsemicolon reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lsc_or reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lsc_and reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lrparen reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lrbracket reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lrbrace reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lneq reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lne reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lhook reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Leqq reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Leq reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lcomma reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lcolon reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lbit_or reduce production equality_expression -> equality_expression Leqq relational_expression
-- On Lbit_and reduce production equality_expression -> equality_expression Leqq relational_expression

State 139:
## Known stack suffix:
## equality_expression Leq
## LR(1) items:
equality_expression -> equality_expression Leq . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 140
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 140:
## Known stack suffix:
## equality_expression Leq relational_expression
## LR(1) items:
equality_expression -> equality_expression Leq relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lsemicolon reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lsc_or reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lsc_and reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lrparen reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lrbracket reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lrbrace reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lneq reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lne reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lhook reduce production equality_expression -> equality_expression Leq relational_expression
-- On Leqq reduce production equality_expression -> equality_expression Leq relational_expression
-- On Leq reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lcomma reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lcolon reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lbit_or reduce production equality_expression -> equality_expression Leq relational_expression
-- On Lbit_and reduce production equality_expression -> equality_expression Leq relational_expression

State 141:
## Known stack suffix:
## bitwise_xor_expression
## LR(1) items:
bitwise_or_expression -> bitwise_xor_expression . [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
bitwise_xor_expression -> bitwise_xor_expression . Lxor bitwise_and_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
## Transitions:
-- On Lxor shift to state 142
## Reductions:
-- On Lsemicolon reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lsc_or reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lsc_and reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lrparen reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lrbracket reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lrbrace reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lhook reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lcomma reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lcolon reduce production bitwise_or_expression -> bitwise_xor_expression
-- On Lbit_or reduce production bitwise_or_expression -> bitwise_xor_expression

State 142:
## Known stack suffix:
## bitwise_xor_expression Lxor
## LR(1) items:
bitwise_xor_expression -> bitwise_xor_expression Lxor . bitwise_and_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_and_expression shift to state 143
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 143:
## Known stack suffix:
## bitwise_xor_expression Lxor bitwise_and_expression
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression . Lbit_and equality_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or Lbit_and ]
bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
## Transitions:
-- On Lbit_and shift to state 144
## Reductions:
-- On Lxor reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lsemicolon reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lsc_or reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lsc_and reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lrparen reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lrbracket reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lrbrace reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lhook reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lcomma reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lcolon reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression
-- On Lbit_or reduce production bitwise_xor_expression -> bitwise_xor_expression Lxor bitwise_and_expression

State 144:
## Known stack suffix:
## bitwise_and_expression Lbit_and
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression Lbit_and . equality_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 145
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 145:
## Known stack suffix:
## bitwise_and_expression Lbit_and equality_expression
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Leq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Lne relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Leqq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
equality_expression -> equality_expression . Lneq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and ]
## Transitions:
-- On Lneq shift to state 110
-- On Lne shift to state 135
-- On Leqq shift to state 137
-- On Leq shift to state 139
## Reductions:
-- On Lxor reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lsemicolon reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lsc_or reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lsc_and reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lrparen reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lrbracket reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lrbrace reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lhook reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lcomma reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lcolon reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lbit_or reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression
-- On Lbit_and reduce production bitwise_and_expression -> bitwise_and_expression Lbit_and equality_expression

State 146:
## Known stack suffix:
## logical_and_expression Lsc_and bitwise_or_expression
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression . Lbit_or bitwise_xor_expression [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression . [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
## Transitions:
-- On Lbit_or shift to state 147
## Reductions:
-- On Lsemicolon reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lsc_or reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lsc_and reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lrparen reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lrbracket reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lrbrace reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lhook reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lcomma reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression
-- On Lcolon reduce production logical_and_expression -> logical_and_expression Lsc_and bitwise_or_expression

State 147:
## Known stack suffix:
## bitwise_or_expression Lbit_or
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression Lbit_or . bitwise_xor_expression [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 148
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 148:
## Known stack suffix:
## bitwise_or_expression Lbit_or bitwise_xor_expression
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression . [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
bitwise_xor_expression -> bitwise_xor_expression . Lxor bitwise_and_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
## Transitions:
-- On Lxor shift to state 142
## Reductions:
-- On Lsemicolon reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lsc_or reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lsc_and reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lrparen reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lrbracket reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lrbrace reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lhook reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lcomma reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lcolon reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression
-- On Lbit_or reduce production bitwise_or_expression -> bitwise_or_expression Lbit_or bitwise_xor_expression

State 149:
## Known stack suffix:
## bitwise_and_expression
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression . Lbit_and equality_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or Lbit_and ]
bitwise_xor_expression -> bitwise_and_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
## Transitions:
-- On Lbit_and shift to state 144
## Reductions:
-- On Lxor reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lsemicolon reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lsc_or reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lsc_and reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lrparen reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lrbracket reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lrbrace reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lhook reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lcomma reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lcolon reduce production bitwise_xor_expression -> bitwise_and_expression
-- On Lbit_or reduce production bitwise_xor_expression -> bitwise_and_expression

State 150:
## Known stack suffix:
## bitwise_or_expression
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression . Lbit_or bitwise_xor_expression [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or ]
logical_and_expression -> bitwise_or_expression . [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
## Transitions:
-- On Lbit_or shift to state 147
## Reductions:
-- On Lsemicolon reduce production logical_and_expression -> bitwise_or_expression
-- On Lsc_or reduce production logical_and_expression -> bitwise_or_expression
-- On Lsc_and reduce production logical_and_expression -> bitwise_or_expression
-- On Lrparen reduce production logical_and_expression -> bitwise_or_expression
-- On Lrbracket reduce production logical_and_expression -> bitwise_or_expression
-- On Lrbrace reduce production logical_and_expression -> bitwise_or_expression
-- On Lhook reduce production logical_and_expression -> bitwise_or_expression
-- On Lcomma reduce production logical_and_expression -> bitwise_or_expression
-- On Lcolon reduce production logical_and_expression -> bitwise_or_expression

State 151:
## Known stack suffix:
## logical_or_expression Lhook
## LR(1) items:
conditional_expression -> logical_or_expression Lhook . assignment_expression Lcolon assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 169
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 152:
## Known stack suffix:
## logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . Lsc_and bitwise_or_expression [ Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
logical_or_expression -> logical_and_expression . [ Lsemicolon Lsc_or Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon ]
## Transitions:
-- On Lsc_and shift to state 108
## Reductions:
-- On Lsemicolon reduce production logical_or_expression -> logical_and_expression
-- On Lsc_or reduce production logical_or_expression -> logical_and_expression
-- On Lrparen reduce production logical_or_expression -> logical_and_expression
-- On Lrbracket reduce production logical_or_expression -> logical_and_expression
-- On Lrbrace reduce production logical_or_expression -> logical_and_expression
-- On Lhook reduce production logical_or_expression -> logical_and_expression
-- On Lcomma reduce production logical_or_expression -> logical_and_expression
-- On Lcolon reduce production logical_or_expression -> logical_and_expression

State 153:
## Known stack suffix:
## left_hand_side_expression
## LR(1) items:
assignment_expression -> left_hand_side_expression . assignment_operator assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
postfix_expression -> left_hand_side_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
postfix_expression -> left_hand_side_expression . Lincr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
postfix_expression -> left_hand_side_expression . Ldecr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lxorassign shift to state 154
-- On Lstarassign shift to state 155
-- On Lslashassign shift to state 156
-- On Lrunsignedshiftassign shift to state 157
-- On Lrsignedshiftassign shift to state 158
-- On Lremassign shift to state 159
-- On Lplusassign shift to state 160
-- On Lorassign shift to state 161
-- On Lminusassign shift to state 162
-- On Llshiftassign shift to state 163
-- On Lincr shift to state 97
-- On Ldecr shift to state 98
-- On Lassign shift to state 164
-- On Landassign shift to state 165
-- On assignment_operator shift to state 166
## Reductions:
-- On Lxor reduce production postfix_expression -> left_hand_side_expression
-- On Lstar reduce production postfix_expression -> left_hand_side_expression
-- On Lslash reduce production postfix_expression -> left_hand_side_expression
-- On Lsemicolon reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_or reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_and reduce production postfix_expression -> left_hand_side_expression
-- On Lrunsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrparen reduce production postfix_expression -> left_hand_side_expression
-- On Lrem reduce production postfix_expression -> left_hand_side_expression
-- On Lrbracket reduce production postfix_expression -> left_hand_side_expression
-- On Lrbrace reduce production postfix_expression -> left_hand_side_expression
-- On Lplus reduce production postfix_expression -> left_hand_side_expression
-- On Lneq reduce production postfix_expression -> left_hand_side_expression
-- On Lne reduce production postfix_expression -> left_hand_side_expression
-- On Lminus reduce production postfix_expression -> left_hand_side_expression
-- On Llshift reduce production postfix_expression -> left_hand_side_expression
-- On Lless reduce production postfix_expression -> left_hand_side_expression
-- On Lle reduce production postfix_expression -> left_hand_side_expression
-- On Lhook reduce production postfix_expression -> left_hand_side_expression
-- On Lgreater reduce production postfix_expression -> left_hand_side_expression
-- On Lge reduce production postfix_expression -> left_hand_side_expression
-- On Leqq reduce production postfix_expression -> left_hand_side_expression
-- On Leq reduce production postfix_expression -> left_hand_side_expression
-- On Lcomma reduce production postfix_expression -> left_hand_side_expression
-- On Lcolon reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_or reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_and reduce production postfix_expression -> left_hand_side_expression
-- On KWinstanceof reduce production postfix_expression -> left_hand_side_expression
-- On KWin reduce production postfix_expression -> left_hand_side_expression

State 154:
## Known stack suffix:
## Lxorassign
## LR(1) items:
assignment_operator -> Lxorassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lxorassign

State 155:
## Known stack suffix:
## Lstarassign
## LR(1) items:
assignment_operator -> Lstarassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lstarassign

State 156:
## Known stack suffix:
## Lslashassign
## LR(1) items:
assignment_operator -> Lslashassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lslashassign

State 157:
## Known stack suffix:
## Lrunsignedshiftassign
## LR(1) items:
assignment_operator -> Lrunsignedshiftassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lrunsignedshiftassign

State 158:
## Known stack suffix:
## Lrsignedshiftassign
## LR(1) items:
assignment_operator -> Lrsignedshiftassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lrsignedshiftassign

State 159:
## Known stack suffix:
## Lremassign
## LR(1) items:
assignment_operator -> Lremassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lremassign

State 160:
## Known stack suffix:
## Lplusassign
## LR(1) items:
assignment_operator -> Lplusassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lplusassign

State 161:
## Known stack suffix:
## Lorassign
## LR(1) items:
assignment_operator -> Lorassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lorassign

State 162:
## Known stack suffix:
## Lminusassign
## LR(1) items:
assignment_operator -> Lminusassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lminusassign

State 163:
## Known stack suffix:
## Llshiftassign
## LR(1) items:
assignment_operator -> Llshiftassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Llshiftassign

State 164:
## Known stack suffix:
## Lassign
## LR(1) items:
assignment_operator -> Lassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Lassign

State 165:
## Known stack suffix:
## Landassign
## LR(1) items:
assignment_operator -> Landassign . [ XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> Landassign

State 166:
## Known stack suffix:
## left_hand_side_expression assignment_operator
## LR(1) items:
assignment_expression -> left_hand_side_expression assignment_operator . assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 168
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 167:
## Known stack suffix:
## conditional_expression
## LR(1) items:
assignment_expression -> conditional_expression . [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> conditional_expression

State 168:
## Known stack suffix:
## left_hand_side_expression assignment_operator assignment_expression
## LR(1) items:
assignment_expression -> left_hand_side_expression assignment_operator assignment_expression . [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> left_hand_side_expression assignment_operator assignment_expression

State 169:
## Known stack suffix:
## logical_or_expression Lhook assignment_expression
## LR(1) items:
conditional_expression -> logical_or_expression Lhook assignment_expression . Lcolon assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
-- On Lcolon shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## logical_or_expression Lhook assignment_expression Lcolon
## LR(1) items:
conditional_expression -> logical_or_expression Lhook assignment_expression Lcolon . assignment_expression [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 171
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 171:
## Known stack suffix:
## logical_or_expression Lhook assignment_expression Lcolon assignment_expression
## LR(1) items:
conditional_expression -> logical_or_expression Lhook assignment_expression Lcolon assignment_expression . [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> logical_or_expression Lhook assignment_expression Lcolon assignment_expression

State 172:
## Known stack suffix:
## sequence_of_expression Lcomma assignment_expression
## LR(1) items:
sequence_of_expression -> sequence_of_expression Lcomma assignment_expression . [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequence_of_expression -> sequence_of_expression Lcomma assignment_expression

State 173:
## Known stack suffix:
## call_expression Llbracket expression
## LR(1) items:
call_expression -> call_expression Llbracket expression . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbracket shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## call_expression Llbracket expression Lrbracket
## LR(1) items:
call_expression -> call_expression Llbracket expression Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression Llbracket expression Lrbracket

State 175:
## Known stack suffix:
## assignment_expression
## LR(1) items:
sequence_of_expression -> assignment_expression . [ Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequence_of_expression -> assignment_expression

State 176:
## Known stack suffix:
## call_expression Ldot
## LR(1) items:
call_expression -> call_expression Ldot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression Ldot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression Ldot . Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Llparen shift to state 177
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 180
-- On identifier shift to state 181
-- On attribute_identifier shift to state 115
## Reductions:

State 177:
## Known stack suffix:
## call_expression Ldot Llparen
## LR(1) items:
call_expression -> call_expression Ldot Llparen . expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 178
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 178:
## Known stack suffix:
## call_expression Ldot Llparen expression
## LR(1) items:
call_expression -> call_expression Ldot Llparen expression . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## call_expression Ldot Llparen expression Lrparen
## LR(1) items:
call_expression -> call_expression Ldot Llparen expression Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression Ldot Llparen expression Lrparen

State 180:
## Known stack suffix:
## call_expression Ldot property_identifier
## LR(1) items:
call_expression -> call_expression Ldot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression Ldot property_identifier

State 181:
## Known stack suffix:
## call_expression Ldot identifier
## LR(1) items:
call_expression -> call_expression Ldot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production call_expression -> call_expression Ldot identifier
-- On Lxor reduce production call_expression -> call_expression Ldot identifier
-- On Lstarassign reduce production call_expression -> call_expression Ldot identifier
-- On Lstar reduce production call_expression -> call_expression Ldot identifier
-- On Lslashassign reduce production call_expression -> call_expression Ldot identifier
-- On Lslash reduce production call_expression -> call_expression Ldot identifier
-- On Lsemicolon reduce production call_expression -> call_expression Ldot identifier
-- On Lsc_or reduce production call_expression -> call_expression Ldot identifier
-- On Lsc_and reduce production call_expression -> call_expression Ldot identifier
-- On Lrunsignedshiftassign reduce production call_expression -> call_expression Ldot identifier
-- On Lrunsignedshift reduce production call_expression -> call_expression Ldot identifier
-- On Lrsignedshiftassign reduce production call_expression -> call_expression Ldot identifier
-- On Lrsignedshift reduce production call_expression -> call_expression Ldot identifier
-- On Lrparen reduce production call_expression -> call_expression Ldot identifier
-- On Lremassign reduce production call_expression -> call_expression Ldot identifier
-- On Lrem reduce production call_expression -> call_expression Ldot identifier
-- On Lrbracket reduce production call_expression -> call_expression Ldot identifier
-- On Lrbrace reduce production call_expression -> call_expression Ldot identifier
-- On Lplusassign reduce production call_expression -> call_expression Ldot identifier
-- On Lplus reduce production call_expression -> call_expression Ldot identifier
-- On Lorassign reduce production call_expression -> call_expression Ldot identifier
-- On Lneq reduce production call_expression -> call_expression Ldot identifier
-- On Lne reduce production call_expression -> call_expression Ldot identifier
-- On Lminusassign reduce production call_expression -> call_expression Ldot identifier
-- On Lminus reduce production call_expression -> call_expression Ldot identifier
-- On Llshiftassign reduce production call_expression -> call_expression Ldot identifier
-- On Llshift reduce production call_expression -> call_expression Ldot identifier
-- On Llparen reduce production call_expression -> call_expression Ldot identifier
-- On Lless reduce production call_expression -> call_expression Ldot identifier
-- On Lle reduce production call_expression -> call_expression Ldot identifier
-- On Llbracket reduce production call_expression -> call_expression Ldot identifier
-- On Lincr reduce production call_expression -> call_expression Ldot identifier
-- On Lhook reduce production call_expression -> call_expression Ldot identifier
-- On Lgreater reduce production call_expression -> call_expression Ldot identifier
-- On Lge reduce production call_expression -> call_expression Ldot identifier
-- On Leqq reduce production call_expression -> call_expression Ldot identifier
-- On Leq reduce production call_expression -> call_expression Ldot identifier
-- On Ldot reduce production call_expression -> call_expression Ldot identifier
-- On Ldecr reduce production call_expression -> call_expression Ldot identifier
-- On Lddot reduce production call_expression -> call_expression Ldot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production call_expression -> call_expression Ldot identifier
-- On Lcolon reduce production call_expression -> call_expression Ldot identifier
-- On Lbit_or reduce production call_expression -> call_expression Ldot identifier
-- On Lbit_and reduce production call_expression -> call_expression Ldot identifier
-- On Lassign reduce production call_expression -> call_expression Ldot identifier
-- On Landassign reduce production call_expression -> call_expression Ldot identifier
-- On KWinstanceof reduce production call_expression -> call_expression Ldot identifier
-- On KWin reduce production call_expression -> call_expression Ldot identifier

State 182:
## Known stack suffix:
## call_expression Lddot
## LR(1) items:
call_expression -> call_expression Lddot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_expression -> call_expression Lddot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 183
-- On identifier shift to state 184
-- On attribute_identifier shift to state 115
## Reductions:

State 183:
## Known stack suffix:
## call_expression Lddot property_identifier
## LR(1) items:
call_expression -> call_expression Lddot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression Lddot property_identifier

State 184:
## Known stack suffix:
## call_expression Lddot identifier
## LR(1) items:
call_expression -> call_expression Lddot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production call_expression -> call_expression Lddot identifier
-- On Lxor reduce production call_expression -> call_expression Lddot identifier
-- On Lstarassign reduce production call_expression -> call_expression Lddot identifier
-- On Lstar reduce production call_expression -> call_expression Lddot identifier
-- On Lslashassign reduce production call_expression -> call_expression Lddot identifier
-- On Lslash reduce production call_expression -> call_expression Lddot identifier
-- On Lsemicolon reduce production call_expression -> call_expression Lddot identifier
-- On Lsc_or reduce production call_expression -> call_expression Lddot identifier
-- On Lsc_and reduce production call_expression -> call_expression Lddot identifier
-- On Lrunsignedshiftassign reduce production call_expression -> call_expression Lddot identifier
-- On Lrunsignedshift reduce production call_expression -> call_expression Lddot identifier
-- On Lrsignedshiftassign reduce production call_expression -> call_expression Lddot identifier
-- On Lrsignedshift reduce production call_expression -> call_expression Lddot identifier
-- On Lrparen reduce production call_expression -> call_expression Lddot identifier
-- On Lremassign reduce production call_expression -> call_expression Lddot identifier
-- On Lrem reduce production call_expression -> call_expression Lddot identifier
-- On Lrbracket reduce production call_expression -> call_expression Lddot identifier
-- On Lrbrace reduce production call_expression -> call_expression Lddot identifier
-- On Lplusassign reduce production call_expression -> call_expression Lddot identifier
-- On Lplus reduce production call_expression -> call_expression Lddot identifier
-- On Lorassign reduce production call_expression -> call_expression Lddot identifier
-- On Lneq reduce production call_expression -> call_expression Lddot identifier
-- On Lne reduce production call_expression -> call_expression Lddot identifier
-- On Lminusassign reduce production call_expression -> call_expression Lddot identifier
-- On Lminus reduce production call_expression -> call_expression Lddot identifier
-- On Llshiftassign reduce production call_expression -> call_expression Lddot identifier
-- On Llshift reduce production call_expression -> call_expression Lddot identifier
-- On Llparen reduce production call_expression -> call_expression Lddot identifier
-- On Lless reduce production call_expression -> call_expression Lddot identifier
-- On Lle reduce production call_expression -> call_expression Lddot identifier
-- On Llbracket reduce production call_expression -> call_expression Lddot identifier
-- On Lincr reduce production call_expression -> call_expression Lddot identifier
-- On Lhook reduce production call_expression -> call_expression Lddot identifier
-- On Lgreater reduce production call_expression -> call_expression Lddot identifier
-- On Lge reduce production call_expression -> call_expression Lddot identifier
-- On Leqq reduce production call_expression -> call_expression Lddot identifier
-- On Leq reduce production call_expression -> call_expression Lddot identifier
-- On Ldot reduce production call_expression -> call_expression Lddot identifier
-- On Ldecr reduce production call_expression -> call_expression Lddot identifier
-- On Lddot reduce production call_expression -> call_expression Lddot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production call_expression -> call_expression Lddot identifier
-- On Lcolon reduce production call_expression -> call_expression Lddot identifier
-- On Lbit_or reduce production call_expression -> call_expression Lddot identifier
-- On Lbit_and reduce production call_expression -> call_expression Lddot identifier
-- On Lassign reduce production call_expression -> call_expression Lddot identifier
-- On Landassign reduce production call_expression -> call_expression Lddot identifier
-- On KWinstanceof reduce production call_expression -> call_expression Lddot identifier
-- On KWin reduce production call_expression -> call_expression Lddot identifier

State 185:
## Known stack suffix:
## call_expression arguments
## LR(1) items:
call_expression -> call_expression arguments . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression arguments

State 186:
## Known stack suffix:
## shift_expression Lrsignedshift additive_expression
## LR(1) items:
additive_expression -> additive_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
additive_expression -> additive_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression Lrsignedshift additive_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 118
-- On Lminus shift to state 124
## Reductions:
-- On Lxor reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lsemicolon reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lsc_or reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lsc_and reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lrunsignedshift reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lrsignedshift reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lrparen reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lrbracket reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lrbrace reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lneq reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lne reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Llshift reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lless reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lle reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lhook reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lgreater reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lge reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Leqq reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Leq reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lcomma reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lcolon reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lbit_or reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On Lbit_and reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On KWinstanceof reduce production shift_expression -> shift_expression Lrsignedshift additive_expression
-- On KWin reduce production shift_expression -> shift_expression Lrsignedshift additive_expression

State 187:
## Known stack suffix:
## assignment_expression
## LR(1) items:
argument_list -> assignment_expression . [ Lrparen Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument_list -> assignment_expression

State 188:
## Known stack suffix:
## Llparen argument_list
## LR(1) items:
argument_list -> argument_list . Lcomma assignment_expression [ Lrparen Lcomma ]
arguments -> Llparen argument_list . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 189
-- On Lcomma shift to state 190
## Reductions:

State 189:
## Known stack suffix:
## Llparen argument_list Lrparen
## LR(1) items:
arguments -> Llparen argument_list Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> Llparen argument_list Lrparen

State 190:
## Known stack suffix:
## argument_list Lcomma
## LR(1) items:
argument_list -> argument_list Lcomma . assignment_expression [ Lrparen Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 191
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 191:
## Known stack suffix:
## argument_list Lcomma assignment_expression
## LR(1) items:
argument_list -> argument_list Lcomma assignment_expression . [ Lrparen Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument_list -> argument_list Lcomma assignment_expression

State 192:
## Known stack suffix:
## member_expression Llbracket
## LR(1) items:
member_expression -> member_expression Llbracket . expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 193
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 193:
## Known stack suffix:
## member_expression Llbracket expression
## LR(1) items:
member_expression -> member_expression Llbracket expression . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbracket shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## member_expression Llbracket expression Lrbracket
## LR(1) items:
member_expression -> member_expression Llbracket expression Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> member_expression Llbracket expression Lrbracket

State 195:
## Known stack suffix:
## member_expression Ldot
## LR(1) items:
member_expression -> member_expression Ldot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression Ldot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression Ldot . Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Llparen shift to state 196
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 199
-- On identifier shift to state 200
-- On attribute_identifier shift to state 115
## Reductions:

State 196:
## Known stack suffix:
## member_expression Ldot Llparen
## LR(1) items:
member_expression -> member_expression Ldot Llparen . expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 197
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 197:
## Known stack suffix:
## member_expression Ldot Llparen expression
## LR(1) items:
member_expression -> member_expression Ldot Llparen expression . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## member_expression Ldot Llparen expression Lrparen
## LR(1) items:
member_expression -> member_expression Ldot Llparen expression Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> member_expression Ldot Llparen expression Lrparen

State 199:
## Known stack suffix:
## member_expression Ldot property_identifier
## LR(1) items:
member_expression -> member_expression Ldot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> member_expression Ldot property_identifier

State 200:
## Known stack suffix:
## member_expression Ldot identifier
## LR(1) items:
member_expression -> member_expression Ldot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production member_expression -> member_expression Ldot identifier
-- On Lxor reduce production member_expression -> member_expression Ldot identifier
-- On Lstarassign reduce production member_expression -> member_expression Ldot identifier
-- On Lstar reduce production member_expression -> member_expression Ldot identifier
-- On Lslashassign reduce production member_expression -> member_expression Ldot identifier
-- On Lslash reduce production member_expression -> member_expression Ldot identifier
-- On Lsemicolon reduce production member_expression -> member_expression Ldot identifier
-- On Lsc_or reduce production member_expression -> member_expression Ldot identifier
-- On Lsc_and reduce production member_expression -> member_expression Ldot identifier
-- On Lrunsignedshiftassign reduce production member_expression -> member_expression Ldot identifier
-- On Lrunsignedshift reduce production member_expression -> member_expression Ldot identifier
-- On Lrsignedshiftassign reduce production member_expression -> member_expression Ldot identifier
-- On Lrsignedshift reduce production member_expression -> member_expression Ldot identifier
-- On Lrparen reduce production member_expression -> member_expression Ldot identifier
-- On Lremassign reduce production member_expression -> member_expression Ldot identifier
-- On Lrem reduce production member_expression -> member_expression Ldot identifier
-- On Lrbracket reduce production member_expression -> member_expression Ldot identifier
-- On Lrbrace reduce production member_expression -> member_expression Ldot identifier
-- On Lplusassign reduce production member_expression -> member_expression Ldot identifier
-- On Lplus reduce production member_expression -> member_expression Ldot identifier
-- On Lorassign reduce production member_expression -> member_expression Ldot identifier
-- On Lneq reduce production member_expression -> member_expression Ldot identifier
-- On Lne reduce production member_expression -> member_expression Ldot identifier
-- On Lminusassign reduce production member_expression -> member_expression Ldot identifier
-- On Lminus reduce production member_expression -> member_expression Ldot identifier
-- On Llshiftassign reduce production member_expression -> member_expression Ldot identifier
-- On Llshift reduce production member_expression -> member_expression Ldot identifier
-- On Llparen reduce production member_expression -> member_expression Ldot identifier
-- On Lless reduce production member_expression -> member_expression Ldot identifier
-- On Lle reduce production member_expression -> member_expression Ldot identifier
-- On Llbracket reduce production member_expression -> member_expression Ldot identifier
-- On Lincr reduce production member_expression -> member_expression Ldot identifier
-- On Lhook reduce production member_expression -> member_expression Ldot identifier
-- On Lgreater reduce production member_expression -> member_expression Ldot identifier
-- On Lge reduce production member_expression -> member_expression Ldot identifier
-- On Leqq reduce production member_expression -> member_expression Ldot identifier
-- On Leq reduce production member_expression -> member_expression Ldot identifier
-- On Ldot reduce production member_expression -> member_expression Ldot identifier
-- On Ldecr reduce production member_expression -> member_expression Ldot identifier
-- On Lddot reduce production member_expression -> member_expression Ldot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production member_expression -> member_expression Ldot identifier
-- On Lcolon reduce production member_expression -> member_expression Ldot identifier
-- On Lbit_or reduce production member_expression -> member_expression Ldot identifier
-- On Lbit_and reduce production member_expression -> member_expression Ldot identifier
-- On Lassign reduce production member_expression -> member_expression Ldot identifier
-- On Landassign reduce production member_expression -> member_expression Ldot identifier
-- On KWinstanceof reduce production member_expression -> member_expression Ldot identifier
-- On KWin reduce production member_expression -> member_expression Ldot identifier

State 201:
## Known stack suffix:
## member_expression Lddot
## LR(1) items:
member_expression -> member_expression Lddot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression Lddot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 202
-- On identifier shift to state 203
-- On attribute_identifier shift to state 115
## Reductions:

State 202:
## Known stack suffix:
## member_expression Lddot property_identifier
## LR(1) items:
member_expression -> member_expression Lddot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> member_expression Lddot property_identifier

State 203:
## Known stack suffix:
## member_expression Lddot identifier
## LR(1) items:
member_expression -> member_expression Lddot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production member_expression -> member_expression Lddot identifier
-- On Lxor reduce production member_expression -> member_expression Lddot identifier
-- On Lstarassign reduce production member_expression -> member_expression Lddot identifier
-- On Lstar reduce production member_expression -> member_expression Lddot identifier
-- On Lslashassign reduce production member_expression -> member_expression Lddot identifier
-- On Lslash reduce production member_expression -> member_expression Lddot identifier
-- On Lsemicolon reduce production member_expression -> member_expression Lddot identifier
-- On Lsc_or reduce production member_expression -> member_expression Lddot identifier
-- On Lsc_and reduce production member_expression -> member_expression Lddot identifier
-- On Lrunsignedshiftassign reduce production member_expression -> member_expression Lddot identifier
-- On Lrunsignedshift reduce production member_expression -> member_expression Lddot identifier
-- On Lrsignedshiftassign reduce production member_expression -> member_expression Lddot identifier
-- On Lrsignedshift reduce production member_expression -> member_expression Lddot identifier
-- On Lrparen reduce production member_expression -> member_expression Lddot identifier
-- On Lremassign reduce production member_expression -> member_expression Lddot identifier
-- On Lrem reduce production member_expression -> member_expression Lddot identifier
-- On Lrbracket reduce production member_expression -> member_expression Lddot identifier
-- On Lrbrace reduce production member_expression -> member_expression Lddot identifier
-- On Lplusassign reduce production member_expression -> member_expression Lddot identifier
-- On Lplus reduce production member_expression -> member_expression Lddot identifier
-- On Lorassign reduce production member_expression -> member_expression Lddot identifier
-- On Lneq reduce production member_expression -> member_expression Lddot identifier
-- On Lne reduce production member_expression -> member_expression Lddot identifier
-- On Lminusassign reduce production member_expression -> member_expression Lddot identifier
-- On Lminus reduce production member_expression -> member_expression Lddot identifier
-- On Llshiftassign reduce production member_expression -> member_expression Lddot identifier
-- On Llshift reduce production member_expression -> member_expression Lddot identifier
-- On Llparen reduce production member_expression -> member_expression Lddot identifier
-- On Lless reduce production member_expression -> member_expression Lddot identifier
-- On Lle reduce production member_expression -> member_expression Lddot identifier
-- On Llbracket reduce production member_expression -> member_expression Lddot identifier
-- On Lincr reduce production member_expression -> member_expression Lddot identifier
-- On Lhook reduce production member_expression -> member_expression Lddot identifier
-- On Lgreater reduce production member_expression -> member_expression Lddot identifier
-- On Lge reduce production member_expression -> member_expression Lddot identifier
-- On Leqq reduce production member_expression -> member_expression Lddot identifier
-- On Leq reduce production member_expression -> member_expression Lddot identifier
-- On Ldot reduce production member_expression -> member_expression Lddot identifier
-- On Ldecr reduce production member_expression -> member_expression Lddot identifier
-- On Lddot reduce production member_expression -> member_expression Lddot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production member_expression -> member_expression Lddot identifier
-- On Lcolon reduce production member_expression -> member_expression Lddot identifier
-- On Lbit_or reduce production member_expression -> member_expression Lddot identifier
-- On Lbit_and reduce production member_expression -> member_expression Lddot identifier
-- On Lassign reduce production member_expression -> member_expression Lddot identifier
-- On Landassign reduce production member_expression -> member_expression Lddot identifier
-- On KWinstanceof reduce production member_expression -> member_expression Lddot identifier
-- On KWin reduce production member_expression -> member_expression Lddot identifier

State 204:
## Known stack suffix:
## member_expression arguments
## LR(1) items:
call_expression -> member_expression arguments . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> member_expression arguments

State 205:
## Known stack suffix:
## shift_expression Lrunsignedshift additive_expression
## LR(1) items:
additive_expression -> additive_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
additive_expression -> additive_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression Lrunsignedshift additive_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 118
-- On Lminus shift to state 124
## Reductions:
-- On Lxor reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lsemicolon reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lsc_or reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lsc_and reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lrunsignedshift reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lrsignedshift reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lrparen reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lrbracket reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lrbrace reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lneq reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lne reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Llshift reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lless reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lle reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lhook reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lgreater reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lge reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Leqq reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Leq reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lcomma reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lcolon reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lbit_or reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On Lbit_and reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On KWinstanceof reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression
-- On KWin reduce production shift_expression -> shift_expression Lrunsignedshift additive_expression

State 206:
## Known stack suffix:
## property_selector Ldcolon Llbracket expression
## LR(1) items:
qualified_identifier -> property_selector Ldcolon Llbracket expression . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbracket shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## property_selector Ldcolon Llbracket expression Lrbracket
## LR(1) items:
qualified_identifier -> property_selector Ldcolon Llbracket expression Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified_identifier -> property_selector Ldcolon Llbracket expression Lrbracket

State 208:
## Known stack suffix:
## wildcard_identifier
## LR(1) items:
property_selector -> wildcard_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_selector -> wildcard_identifier

State 209:
## Known stack suffix:
## property_selector Ldcolon property_selector
## LR(1) items:
qualified_identifier -> property_selector Ldcolon property_selector . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified_identifier -> property_selector Ldcolon property_selector

State 210:
## Known stack suffix:
## identifier
## LR(1) items:
property_selector -> identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_selector -> identifier

State 211:
## Known stack suffix:
## Lminus unary_expression
## LR(1) items:
unary_init_expression -> Lminus unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> Lminus unary_expression

State 212:
## Known stack suffix:
## Llparen
## LR(1) items:
primary_init_expression -> Llparen . expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 213
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 213:
## Known stack suffix:
## Llparen expression
## LR(1) items:
primary_init_expression -> Llparen expression . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## Llparen expression Lrparen
## LR(1) items:
primary_init_expression -> Llparen expression Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_init_expression -> Llparen expression Lrparen

State 215:
## Known stack suffix:
## Llbrace
## LR(1) items:
block -> Llbrace . optional_statement_list Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcatch KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 519
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On optional_statement_list shift to state 541
-- On numeric_literal shift to state 83
-- On non_empty_statement_list shift to state 543
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:
-- On Lrbrace reduce production optional_statement_list ->

State 216:
## Known stack suffix:
## Lincr
## LR(1) items:
unary_init_expression -> Lincr . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 217
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 217:
## Known stack suffix:
## Lincr unary_expression
## LR(1) items:
unary_init_expression -> Lincr unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> Lincr unary_expression

State 218:
## Known stack suffix:
## Ldecr
## LR(1) items:
unary_init_expression -> Ldecr . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 219
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 219:
## Known stack suffix:
## Ldecr unary_expression
## LR(1) items:
unary_init_expression -> Ldecr unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> Ldecr unary_expression

State 220:
## Known stack suffix:
## Lbang
## LR(1) items:
unary_init_expression -> Lbang . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 221
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 221:
## Known stack suffix:
## Lbang unary_expression
## LR(1) items:
unary_init_expression -> Lbang unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> Lbang unary_expression

State 222:
## Known stack suffix:
## KWwith
## LR(1) items:
with_statement -> KWwith . Llparen expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## KWwith Llparen
## LR(1) items:
with_statement -> KWwith Llparen . expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 224
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 224:
## Known stack suffix:
## KWwith Llparen expression
## LR(1) items:
with_statement -> KWwith Llparen expression . Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## KWwith Llparen expression Lrparen
## LR(1) items:
with_statement -> KWwith Llparen expression Lrparen . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 540
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 226:
## Known stack suffix:
## KWwhile
## LR(1) items:
iteration_statement -> KWwhile . Llparen expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## KWwhile Llparen
## LR(1) items:
iteration_statement -> KWwhile Llparen . expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 228
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 228:
## Known stack suffix:
## KWwhile Llparen expression
## LR(1) items:
iteration_statement -> KWwhile Llparen expression . Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## KWwhile Llparen expression Lrparen
## LR(1) items:
iteration_statement -> KWwhile Llparen expression Lrparen . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 539
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 230:
## Known stack suffix:
## KWvoid
## LR(1) items:
unary_init_expression -> KWvoid . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 231
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 231:
## Known stack suffix:
## KWvoid unary_expression
## LR(1) items:
unary_init_expression -> KWvoid unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> KWvoid unary_expression

State 232:
## Known stack suffix:
## KWvar
## LR(1) items:
variable_statement -> KWvar . variable_declaration_list Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On variable_declaration_list shift to state 233
-- On variable_declaration shift to state 241
-- On identifier shift to state 237
## Reductions:

State 233:
## Known stack suffix:
## KWvar variable_declaration_list
## LR(1) items:
variable_declaration_list -> variable_declaration_list . Lcomma variable_declaration [ Lsemicolon Lcomma ]
variable_statement -> KWvar variable_declaration_list . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 234
-- On Lcomma shift to state 235
## Reductions:

State 234:
## Known stack suffix:
## KWvar variable_declaration_list Lsemicolon
## LR(1) items:
variable_statement -> KWvar variable_declaration_list Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_statement -> KWvar variable_declaration_list Lsemicolon

State 235:
## Known stack suffix:
## variable_declaration_list Lcomma
## LR(1) items:
variable_declaration_list -> variable_declaration_list Lcomma . variable_declaration [ Lsemicolon Lcomma ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On variable_declaration shift to state 236
-- On identifier shift to state 237
## Reductions:

State 236:
## Known stack suffix:
## variable_declaration_list Lcomma variable_declaration
## LR(1) items:
variable_declaration_list -> variable_declaration_list Lcomma variable_declaration . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration_list -> variable_declaration_list Lcomma variable_declaration

State 237:
## Known stack suffix:
## identifier
## LR(1) items:
variable_declaration -> identifier . [ Lsemicolon Lcomma ]
variable_declaration -> identifier . initialiser [ Lsemicolon Lcomma ]
## Transitions:
-- On Lassign shift to state 238
-- On initialiser shift to state 240
## Reductions:
-- On Lsemicolon reduce production variable_declaration -> identifier
-- On Lcomma reduce production variable_declaration -> identifier

State 238:
## Known stack suffix:
## Lassign
## LR(1) items:
initialiser -> Lassign . assignment_expression [ Lsemicolon Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 239
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 239:
## Known stack suffix:
## Lassign assignment_expression
## LR(1) items:
initialiser -> Lassign assignment_expression . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initialiser -> Lassign assignment_expression

State 240:
## Known stack suffix:
## identifier initialiser
## LR(1) items:
variable_declaration -> identifier initialiser . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> identifier initialiser

State 241:
## Known stack suffix:
## variable_declaration
## LR(1) items:
variable_declaration_list -> variable_declaration . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration_list -> variable_declaration

State 242:
## Known stack suffix:
## KWtypeof
## LR(1) items:
unary_init_expression -> KWtypeof . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 243
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 243:
## Known stack suffix:
## KWtypeof unary_expression
## LR(1) items:
unary_init_expression -> KWtypeof unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> KWtypeof unary_expression

State 244:
## Known stack suffix:
## KWtry
## LR(1) items:
try_statement -> KWtry . block catch_prod [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
try_statement -> KWtry . block finally_prod [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
try_statement -> KWtry . block catch_prod finally_prod [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llbrace shift to state 215
-- On block shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## KWtry block
## LR(1) items:
try_statement -> KWtry block . catch_prod [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
try_statement -> KWtry block . finally_prod [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
try_statement -> KWtry block . catch_prod finally_prod [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On KWfinally shift to state 246
-- On KWcatch shift to state 248
-- On finally_prod shift to state 253
-- On catch_prod shift to state 254
## Reductions:

State 246:
## Known stack suffix:
## KWfinally
## LR(1) items:
finally_prod -> KWfinally . block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llbrace shift to state 215
-- On block shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## KWfinally block
## LR(1) items:
finally_prod -> KWfinally block . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production finally_prod -> KWfinally block

State 248:
## Known stack suffix:
## KWcatch
## LR(1) items:
catch_prod -> KWcatch . Llparen identifier Lrparen block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## KWcatch Llparen
## LR(1) items:
catch_prod -> KWcatch Llparen . identifier Lrparen block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## KWcatch Llparen identifier
## LR(1) items:
catch_prod -> KWcatch Llparen identifier . Lrparen block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## KWcatch Llparen identifier Lrparen
## LR(1) items:
catch_prod -> KWcatch Llparen identifier Lrparen . block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llbrace shift to state 215
-- On block shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## KWcatch Llparen identifier Lrparen block
## LR(1) items:
catch_prod -> KWcatch Llparen identifier Lrparen block . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch_prod -> KWcatch Llparen identifier Lrparen block

State 253:
## Known stack suffix:
## KWtry block finally_prod
## LR(1) items:
try_statement -> KWtry block finally_prod . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_statement -> KWtry block finally_prod

State 254:
## Known stack suffix:
## KWtry block catch_prod
## LR(1) items:
try_statement -> KWtry block catch_prod . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
try_statement -> KWtry block catch_prod . finally_prod [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On KWfinally shift to state 246
-- On finally_prod shift to state 255
## Reductions:
-- On Ltrue reduce production try_statement -> KWtry block catch_prod
-- On Ltilde reduce production try_statement -> KWtry block catch_prod
-- On Lstring reduce production try_statement -> KWtry block catch_prod
-- On Lsemicolon reduce production try_statement -> KWtry block catch_prod
-- On Lregexp reduce production try_statement -> KWtry block catch_prod
-- On Lrbrace reduce production try_statement -> KWtry block catch_prod
-- On Lplus reduce production try_statement -> KWtry block catch_prod
-- On Lnull reduce production try_statement -> KWtry block catch_prod
-- On Lminus reduce production try_statement -> KWtry block catch_prod
-- On Llparen reduce production try_statement -> KWtry block catch_prod
-- On Llbracket reduce production try_statement -> KWtry block catch_prod
-- On Llbrace reduce production try_statement -> KWtry block catch_prod
-- On Lint reduce production try_statement -> KWtry block catch_prod
-- On Lincr reduce production try_statement -> KWtry block catch_prod
-- On Lident reduce production try_statement -> KWtry block catch_prod
-- On Lfloat reduce production try_statement -> KWtry block catch_prod
-- On Lfalse reduce production try_statement -> KWtry block catch_prod
-- On Leof reduce production try_statement -> KWtry block catch_prod
-- On Ldecr reduce production try_statement -> KWtry block catch_prod
-- On Lbang reduce production try_statement -> KWtry block catch_prod
-- On LCcomment reduce production try_statement -> KWtry block catch_prod
-- On KWwith reduce production try_statement -> KWtry block catch_prod
-- On KWwhile reduce production try_statement -> KWtry block catch_prod
-- On KWvoid reduce production try_statement -> KWtry block catch_prod
-- On KWvar reduce production try_statement -> KWtry block catch_prod
-- On KWtypeof reduce production try_statement -> KWtry block catch_prod
-- On KWtry reduce production try_statement -> KWtry block catch_prod
-- On KWthrow reduce production try_statement -> KWtry block catch_prod
-- On KWthis reduce production try_statement -> KWtry block catch_prod
-- On KWswitch reduce production try_statement -> KWtry block catch_prod
-- On KWreturn reduce production try_statement -> KWtry block catch_prod
-- On KWnew reduce production try_statement -> KWtry block catch_prod
-- On KWif reduce production try_statement -> KWtry block catch_prod
-- On KWfunction reduce production try_statement -> KWtry block catch_prod
-- On KWfor reduce production try_statement -> KWtry block catch_prod
-- On KWelse reduce production try_statement -> KWtry block catch_prod
-- On KWdo reduce production try_statement -> KWtry block catch_prod
-- On KWdelete reduce production try_statement -> KWtry block catch_prod
-- On KWdefault reduce production try_statement -> KWtry block catch_prod
-- On KWcontinue reduce production try_statement -> KWtry block catch_prod
-- On KWcase reduce production try_statement -> KWtry block catch_prod
-- On KWbreak reduce production try_statement -> KWtry block catch_prod
-- On CKWxml reduce production try_statement -> KWtry block catch_prod
-- On CKWnamespace reduce production try_statement -> KWtry block catch_prod
-- On CKWeach reduce production try_statement -> KWtry block catch_prod
-- On CKWdefaultxmlnamespace reduce production try_statement -> KWtry block catch_prod

State 255:
## Known stack suffix:
## KWtry block catch_prod finally_prod
## LR(1) items:
try_statement -> KWtry block catch_prod finally_prod . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_statement -> KWtry block catch_prod finally_prod

State 256:
## Known stack suffix:
## KWthrow
## LR(1) items:
throw_statement -> KWthrow . expression Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 257
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 257:
## Known stack suffix:
## KWthrow expression
## LR(1) items:
throw_statement -> KWthrow expression . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## KWthrow expression Lsemicolon
## LR(1) items:
throw_statement -> KWthrow expression Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production throw_statement -> KWthrow expression Lsemicolon

State 259:
## Known stack suffix:
## KWthis
## LR(1) items:
primary_init_expression -> KWthis . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_init_expression -> KWthis

State 260:
## Known stack suffix:
## KWswitch
## LR(1) items:
switch_statement -> KWswitch . Llparen expression Lrparen case_block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## KWswitch Llparen
## LR(1) items:
switch_statement -> KWswitch Llparen . expression Lrparen case_block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 262
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 262:
## Known stack suffix:
## KWswitch Llparen expression
## LR(1) items:
switch_statement -> KWswitch Llparen expression . Lrparen case_block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## KWswitch Llparen expression Lrparen
## LR(1) items:
switch_statement -> KWswitch Llparen expression Lrparen . case_block [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llbrace shift to state 264
-- On case_block shift to state 538
## Reductions:

State 264:
## Known stack suffix:
## Llbrace
## LR(1) items:
case_block -> Llbrace . case_clauses Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace . default_clause Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace . case_clauses default_clause Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace . default_clause case_clauses Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace . case_clauses default_clause case_clauses Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrbrace shift to state 265
-- On KWdefault shift to state 266
-- On KWcase shift to state 522
-- On default_clause shift to state 526
-- On case_clauses shift to state 532
-- On case_clause shift to state 531
## Reductions:

State 265:
## Known stack suffix:
## Llbrace Lrbrace
## LR(1) items:
case_block -> Llbrace Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> Llbrace Lrbrace

State 266:
## Known stack suffix:
## KWdefault
## LR(1) items:
default_clause -> KWdefault . Lcolon [ Lrbrace KWcase ]
default_clause -> KWdefault . Lcolon non_empty_statement_list [ Lrbrace KWcase ]
## Transitions:
-- On Lcolon shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## KWdefault Lcolon
## LR(1) items:
default_clause -> KWdefault Lcolon . [ Lrbrace KWcase ]
default_clause -> KWdefault Lcolon . non_empty_statement_list [ Lrbrace KWcase ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 519
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On non_empty_statement_list shift to state 520
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:
-- On Lrbrace reduce production default_clause -> KWdefault Lcolon
-- On KWcase reduce production default_clause -> KWdefault Lcolon

State 268:
## Known stack suffix:
## KWreturn
## LR(1) items:
return_statement -> KWreturn . expression Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
return_statement -> KWreturn . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lsemicolon shift to state 269
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 270
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 269:
## Known stack suffix:
## KWreturn Lsemicolon
## LR(1) items:
return_statement -> KWreturn Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_statement -> KWreturn Lsemicolon

State 270:
## Known stack suffix:
## KWreturn expression
## LR(1) items:
return_statement -> KWreturn expression . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## KWreturn expression Lsemicolon
## LR(1) items:
return_statement -> KWreturn expression Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_statement -> KWreturn expression Lsemicolon

State 272:
## Known stack suffix:
## KWnew
## LR(1) items:
member_init_expression -> KWnew . member_expression arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
new_init_expression -> KWnew . new_expression [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lnull shift to state 20
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 273
-- On member_expression shift to state 274
-- On literal shift to state 95
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 273:
## Known stack suffix:
## KWnew new_expression
## LR(1) items:
new_init_expression -> KWnew new_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_init_expression -> KWnew new_expression

State 274:
## Known stack suffix:
## KWnew member_expression
## LR(1) items:
member_expression -> member_expression . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Lddot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Lddot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> KWnew member_expression . arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
new_expression -> member_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 89
-- On Llbracket shift to state 192
-- On Ldot shift to state 195
-- On Lddot shift to state 201
-- On arguments shift to state 275
## Reductions:
-- On Lxorassign reduce production new_expression -> member_expression
-- On Lxor reduce production new_expression -> member_expression
-- On Lstarassign reduce production new_expression -> member_expression
-- On Lstar reduce production new_expression -> member_expression
-- On Lslashassign reduce production new_expression -> member_expression
-- On Lslash reduce production new_expression -> member_expression
-- On Lsemicolon reduce production new_expression -> member_expression
-- On Lsc_or reduce production new_expression -> member_expression
-- On Lsc_and reduce production new_expression -> member_expression
-- On Lrunsignedshiftassign reduce production new_expression -> member_expression
-- On Lrunsignedshift reduce production new_expression -> member_expression
-- On Lrsignedshiftassign reduce production new_expression -> member_expression
-- On Lrsignedshift reduce production new_expression -> member_expression
-- On Lremassign reduce production new_expression -> member_expression
-- On Lrem reduce production new_expression -> member_expression
-- On Lplusassign reduce production new_expression -> member_expression
-- On Lplus reduce production new_expression -> member_expression
-- On Lorassign reduce production new_expression -> member_expression
-- On Lneq reduce production new_expression -> member_expression
-- On Lne reduce production new_expression -> member_expression
-- On Lminusassign reduce production new_expression -> member_expression
-- On Lminus reduce production new_expression -> member_expression
-- On Llshiftassign reduce production new_expression -> member_expression
-- On Llshift reduce production new_expression -> member_expression
-- On Lless reduce production new_expression -> member_expression
-- On Lle reduce production new_expression -> member_expression
-- On Lincr reduce production new_expression -> member_expression
-- On Lhook reduce production new_expression -> member_expression
-- On Lgreater reduce production new_expression -> member_expression
-- On Lge reduce production new_expression -> member_expression
-- On Leqq reduce production new_expression -> member_expression
-- On Leq reduce production new_expression -> member_expression
-- On Ldecr reduce production new_expression -> member_expression
-- On Lcomma reduce production new_expression -> member_expression
-- On Lbit_or reduce production new_expression -> member_expression
-- On Lbit_and reduce production new_expression -> member_expression
-- On Lassign reduce production new_expression -> member_expression
-- On Landassign reduce production new_expression -> member_expression
-- On KWinstanceof reduce production new_expression -> member_expression
-- On KWin reduce production new_expression -> member_expression

State 275:
## Known stack suffix:
## KWnew member_expression arguments
## LR(1) items:
member_init_expression -> KWnew member_expression arguments . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_init_expression -> KWnew member_expression arguments

State 276:
## Known stack suffix:
## KWif
## LR(1) items:
if_statement -> KWif . Llparen expression Lrparen statement KWelse statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
if_statement -> KWif . Llparen expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## KWif Llparen
## LR(1) items:
if_statement -> KWif Llparen . expression Lrparen statement KWelse statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
if_statement -> KWif Llparen . expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 278
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 278:
## Known stack suffix:
## KWif Llparen expression
## LR(1) items:
if_statement -> KWif Llparen expression . Lrparen statement KWelse statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
if_statement -> KWif Llparen expression . Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## KWif Llparen expression Lrparen
## LR(1) items:
if_statement -> KWif Llparen expression Lrparen . statement KWelse statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
if_statement -> KWif Llparen expression Lrparen . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 516
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 280:
## Known stack suffix:
## KWfor
## LR(1) items:
iteration_statement -> KWfor . Llparen for_bracket Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
iteration_statement -> KWfor . CKWeach Llparen left_hand_side_expression KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
iteration_statement -> KWfor . CKWeach Llparen KWvar variable_declaration_no_in KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 281
-- On CKWeach shift to state 503
## Reductions:

State 281:
## Known stack suffix:
## KWfor Llparen
## LR(1) items:
iteration_statement -> KWfor Llparen . for_bracket Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWvar shift to state 282
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On sequence_of_expression_no_in shift to state 342
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On optional_expression_no_in shift to state 345
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression_no_in shift to state 308
-- On logical_and_expression_no_in shift to state 332
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 350
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On for_bracket shift to state 353
-- On expression_no_in shift to state 501
-- On equality_expression_no_in shift to state 312
-- On conditional_expression_no_in shift to state 335
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 330
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On assignment_expression_no_in shift to state 502
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:
-- On Lsemicolon reduce production optional_expression_no_in ->

State 282:
## Known stack suffix:
## KWvar
## LR(1) items:
for_bracket -> KWvar . variable_declaration_list_no_in Lsemicolon optional_expression Lsemicolon optional_expression [ Lrparen ]
for_bracket -> KWvar . variable_declaration_no_in KWin expression [ Lrparen ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On variable_declaration_no_in shift to state 283
-- On variable_declaration_list_no_in shift to state 286
-- On identifier shift to state 294
## Reductions:

State 283:
## Known stack suffix:
## KWvar variable_declaration_no_in
## LR(1) items:
for_bracket -> KWvar variable_declaration_no_in . KWin expression [ Lrparen ]
variable_declaration_list_no_in -> variable_declaration_no_in . [ Lsemicolon Lcomma ]
## Transitions:
-- On KWin shift to state 284
## Reductions:
-- On Lsemicolon reduce production variable_declaration_list_no_in -> variable_declaration_no_in
-- On Lcomma reduce production variable_declaration_list_no_in -> variable_declaration_no_in

State 284:
## Known stack suffix:
## KWvar variable_declaration_no_in KWin
## LR(1) items:
for_bracket -> KWvar variable_declaration_no_in KWin . expression [ Lrparen ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 285
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 285:
## Known stack suffix:
## KWvar variable_declaration_no_in KWin expression
## LR(1) items:
for_bracket -> KWvar variable_declaration_no_in KWin expression . [ Lrparen ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_bracket -> KWvar variable_declaration_no_in KWin expression

State 286:
## Known stack suffix:
## KWvar variable_declaration_list_no_in
## LR(1) items:
for_bracket -> KWvar variable_declaration_list_no_in . Lsemicolon optional_expression Lsemicolon optional_expression [ Lrparen ]
variable_declaration_list_no_in -> variable_declaration_list_no_in . Lcomma variable_declaration_no_in [ Lsemicolon Lcomma ]
## Transitions:
-- On Lsemicolon shift to state 287
-- On Lcomma shift to state 292
## Reductions:

State 287:
## Known stack suffix:
## KWvar variable_declaration_list_no_in Lsemicolon
## LR(1) items:
for_bracket -> KWvar variable_declaration_list_no_in Lsemicolon . optional_expression Lsemicolon optional_expression [ Lrparen ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On optional_expression shift to state 288
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 291
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:
-- On Lsemicolon reduce production optional_expression ->

State 288:
## Known stack suffix:
## KWvar variable_declaration_list_no_in Lsemicolon optional_expression
## LR(1) items:
for_bracket -> KWvar variable_declaration_list_no_in Lsemicolon optional_expression . Lsemicolon optional_expression [ Lrparen ]
## Transitions:
-- On Lsemicolon shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## KWvar variable_declaration_list_no_in Lsemicolon optional_expression Lsemicolon
## LR(1) items:
for_bracket -> KWvar variable_declaration_list_no_in Lsemicolon optional_expression Lsemicolon . optional_expression [ Lrparen ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On optional_expression shift to state 290
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 291
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:
-- On Lrparen reduce production optional_expression ->

State 290:
## Known stack suffix:
## KWvar variable_declaration_list_no_in Lsemicolon optional_expression Lsemicolon optional_expression
## LR(1) items:
for_bracket -> KWvar variable_declaration_list_no_in Lsemicolon optional_expression Lsemicolon optional_expression . [ Lrparen ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_bracket -> KWvar variable_declaration_list_no_in Lsemicolon optional_expression Lsemicolon optional_expression

State 291:
## Known stack suffix:
## expression
## LR(1) items:
optional_expression -> expression . [ Lsemicolon Lrparen ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_expression -> expression

State 292:
## Known stack suffix:
## variable_declaration_list_no_in Lcomma
## LR(1) items:
variable_declaration_list_no_in -> variable_declaration_list_no_in Lcomma . variable_declaration_no_in [ Lsemicolon Lcomma ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On variable_declaration_no_in shift to state 293
-- On identifier shift to state 294
## Reductions:

State 293:
## Known stack suffix:
## variable_declaration_list_no_in Lcomma variable_declaration_no_in
## LR(1) items:
variable_declaration_list_no_in -> variable_declaration_list_no_in Lcomma variable_declaration_no_in . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration_list_no_in -> variable_declaration_list_no_in Lcomma variable_declaration_no_in

State 294:
## Known stack suffix:
## identifier
## LR(1) items:
variable_declaration_no_in -> identifier . [ Lsemicolon Lcomma KWin ]
variable_declaration_no_in -> identifier . initialiser_no_in [ Lsemicolon Lcomma KWin ]
## Transitions:
-- On Lassign shift to state 295
-- On initialiser_no_in shift to state 341
## Reductions:
-- On Lsemicolon reduce production variable_declaration_no_in -> identifier
-- On Lcomma reduce production variable_declaration_no_in -> identifier
-- On KWin reduce production variable_declaration_no_in -> identifier

State 295:
## Known stack suffix:
## Lassign
## LR(1) items:
initialiser_no_in -> Lassign . assignment_expression_no_in [ Lsemicolon Lcomma KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression_no_in shift to state 308
-- On logical_and_expression_no_in shift to state 332
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 333
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On conditional_expression_no_in shift to state 335
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 330
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On assignment_expression_no_in shift to state 340
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 296:
## Known stack suffix:
## shift_expression
## LR(1) items:
relational_expression_no_in -> shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression_no_in -> shift_expression
-- On Lsemicolon reduce production relational_expression_no_in -> shift_expression
-- On Lsc_or reduce production relational_expression_no_in -> shift_expression
-- On Lsc_and reduce production relational_expression_no_in -> shift_expression
-- On Lneq reduce production relational_expression_no_in -> shift_expression
-- On Lne reduce production relational_expression_no_in -> shift_expression
-- On Lless reduce production relational_expression_no_in -> shift_expression
-- On Lle reduce production relational_expression_no_in -> shift_expression
-- On Lhook reduce production relational_expression_no_in -> shift_expression
-- On Lgreater reduce production relational_expression_no_in -> shift_expression
-- On Lge reduce production relational_expression_no_in -> shift_expression
-- On Leqq reduce production relational_expression_no_in -> shift_expression
-- On Leq reduce production relational_expression_no_in -> shift_expression
-- On Lcomma reduce production relational_expression_no_in -> shift_expression
-- On Lcolon reduce production relational_expression_no_in -> shift_expression
-- On Lbit_or reduce production relational_expression_no_in -> shift_expression
-- On Lbit_and reduce production relational_expression_no_in -> shift_expression
-- On KWinstanceof reduce production relational_expression_no_in -> shift_expression
-- On KWin reduce production relational_expression_no_in -> shift_expression

State 297:
## Known stack suffix:
## relational_expression_no_in
## LR(1) items:
equality_expression_no_in -> relational_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
relational_expression_no_in -> relational_expression_no_in . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 298
-- On Lle shift to state 300
-- On Lgreater shift to state 302
-- On Lge shift to state 304
-- On KWinstanceof shift to state 306
## Reductions:
-- On Lxor reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lsemicolon reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lsc_or reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lsc_and reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lneq reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lne reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lhook reduce production equality_expression_no_in -> relational_expression_no_in
-- On Leqq reduce production equality_expression_no_in -> relational_expression_no_in
-- On Leq reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lcomma reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lcolon reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lbit_or reduce production equality_expression_no_in -> relational_expression_no_in
-- On Lbit_and reduce production equality_expression_no_in -> relational_expression_no_in
-- On KWin reduce production equality_expression_no_in -> relational_expression_no_in

State 298:
## Known stack suffix:
## relational_expression_no_in Lless
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lless . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 299
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 299:
## Known stack suffix:
## relational_expression_no_in Lless shift_expression
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lless shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lsemicolon reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lsc_or reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lsc_and reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lneq reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lne reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lless reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lle reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lhook reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lgreater reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lge reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Leqq reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Leq reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lcomma reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lcolon reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lbit_or reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On Lbit_and reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On KWinstanceof reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression
-- On KWin reduce production relational_expression_no_in -> relational_expression_no_in Lless shift_expression

State 300:
## Known stack suffix:
## relational_expression_no_in Lle
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lle . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 301
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 301:
## Known stack suffix:
## relational_expression_no_in Lle shift_expression
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lle shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lsemicolon reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lsc_or reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lsc_and reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lneq reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lne reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lless reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lle reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lhook reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lgreater reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lge reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Leqq reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Leq reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lcomma reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lcolon reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lbit_or reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On Lbit_and reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On KWinstanceof reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression
-- On KWin reduce production relational_expression_no_in -> relational_expression_no_in Lle shift_expression

State 302:
## Known stack suffix:
## relational_expression_no_in Lgreater
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lgreater . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 303
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 303:
## Known stack suffix:
## relational_expression_no_in Lgreater shift_expression
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lsemicolon reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lsc_or reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lsc_and reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lneq reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lne reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lless reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lle reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lhook reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lgreater reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lge reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Leqq reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Leq reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lcomma reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lcolon reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lbit_or reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On Lbit_and reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On KWinstanceof reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression
-- On KWin reduce production relational_expression_no_in -> relational_expression_no_in Lgreater shift_expression

State 304:
## Known stack suffix:
## relational_expression_no_in Lge
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lge . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 305
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 305:
## Known stack suffix:
## relational_expression_no_in Lge shift_expression
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in Lge shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lsemicolon reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lsc_or reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lsc_and reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lneq reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lne reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lless reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lle reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lhook reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lgreater reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lge reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Leqq reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Leq reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lcomma reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lcolon reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lbit_or reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On Lbit_and reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On KWinstanceof reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression
-- On KWin reduce production relational_expression_no_in -> relational_expression_no_in Lge shift_expression

State 306:
## Known stack suffix:
## relational_expression_no_in KWinstanceof
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in KWinstanceof . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 307
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 307:
## Known stack suffix:
## relational_expression_no_in KWinstanceof shift_expression
## LR(1) items:
relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lsemicolon reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lsc_or reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lsc_and reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lneq reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lne reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lless reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lle reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lhook reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lgreater reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lge reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Leqq reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Leq reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lcomma reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lcolon reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lbit_or reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On Lbit_and reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On KWinstanceof reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression
-- On KWin reduce production relational_expression_no_in -> relational_expression_no_in KWinstanceof shift_expression

State 308:
## Known stack suffix:
## logical_or_expression_no_in
## LR(1) items:
conditional_expression_no_in -> logical_or_expression_no_in . [ Lsemicolon Lcomma Lcolon KWin ]
conditional_expression_no_in -> logical_or_expression_no_in . Lhook assignment_expression_no_in Lcolon assignment_expression_no_in [ Lsemicolon Lcomma Lcolon KWin ]
logical_or_expression_no_in -> logical_or_expression_no_in . Lsc_or logical_and_expression_no_in [ Lsemicolon Lsc_or Lhook Lcomma Lcolon KWin ]
## Transitions:
-- On Lsc_or shift to state 309
-- On Lhook shift to state 331
## Reductions:
-- On Lsemicolon reduce production conditional_expression_no_in -> logical_or_expression_no_in
-- On Lcomma reduce production conditional_expression_no_in -> logical_or_expression_no_in
-- On Lcolon reduce production conditional_expression_no_in -> logical_or_expression_no_in
-- On KWin reduce production conditional_expression_no_in -> logical_or_expression_no_in

State 309:
## Known stack suffix:
## logical_or_expression_no_in Lsc_or
## LR(1) items:
logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or . logical_and_expression_no_in [ Lsemicolon Lsc_or Lhook Lcomma Lcolon KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_and_expression_no_in shift to state 310
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 330
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 310:
## Known stack suffix:
## logical_or_expression_no_in Lsc_or logical_and_expression_no_in
## LR(1) items:
logical_and_expression_no_in -> logical_and_expression_no_in . Lsc_and bitwise_or_expression_no_in [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon KWin ]
logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or logical_and_expression_no_in . [ Lsemicolon Lsc_or Lhook Lcomma Lcolon KWin ]
## Transitions:
-- On Lsc_and shift to state 311
## Reductions:
-- On Lsemicolon reduce production logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or logical_and_expression_no_in
-- On Lsc_or reduce production logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or logical_and_expression_no_in
-- On Lhook reduce production logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or logical_and_expression_no_in
-- On Lcomma reduce production logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or logical_and_expression_no_in
-- On Lcolon reduce production logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or logical_and_expression_no_in
-- On KWin reduce production logical_or_expression_no_in -> logical_or_expression_no_in Lsc_or logical_and_expression_no_in

State 311:
## Known stack suffix:
## logical_and_expression_no_in Lsc_and
## LR(1) items:
logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and . bitwise_or_expression_no_in [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 326
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 312:
## Known stack suffix:
## equality_expression_no_in
## LR(1) items:
bitwise_and_expression_no_in -> equality_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Leq relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Lne relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Leqq relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Lneq relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
## Transitions:
-- On Lneq shift to state 313
-- On Lne shift to state 315
-- On Leqq shift to state 317
-- On Leq shift to state 319
## Reductions:
-- On Lxor reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lsemicolon reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lsc_or reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lsc_and reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lhook reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lcomma reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lcolon reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lbit_or reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On Lbit_and reduce production bitwise_and_expression_no_in -> equality_expression_no_in
-- On KWin reduce production bitwise_and_expression_no_in -> equality_expression_no_in

State 313:
## Known stack suffix:
## equality_expression_no_in Lneq
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Lneq . relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 314
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 314:
## Known stack suffix:
## equality_expression_no_in Lneq relational_expression_no_in
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
relational_expression_no_in -> relational_expression_no_in . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 298
-- On Lle shift to state 300
-- On Lgreater shift to state 302
-- On Lge shift to state 304
-- On KWinstanceof shift to state 306
## Reductions:
-- On Lxor reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lsemicolon reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lsc_or reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lsc_and reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lneq reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lne reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lhook reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Leqq reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Leq reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lcomma reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lcolon reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lbit_or reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On Lbit_and reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in
-- On KWin reduce production equality_expression_no_in -> equality_expression_no_in Lneq relational_expression_no_in

State 315:
## Known stack suffix:
## equality_expression_no_in Lne
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Lne . relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 316
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 316:
## Known stack suffix:
## equality_expression_no_in Lne relational_expression_no_in
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
relational_expression_no_in -> relational_expression_no_in . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 298
-- On Lle shift to state 300
-- On Lgreater shift to state 302
-- On Lge shift to state 304
-- On KWinstanceof shift to state 306
## Reductions:
-- On Lxor reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lsemicolon reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lsc_or reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lsc_and reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lneq reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lne reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lhook reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Leqq reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Leq reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lcomma reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lcolon reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lbit_or reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On Lbit_and reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in
-- On KWin reduce production equality_expression_no_in -> equality_expression_no_in Lne relational_expression_no_in

State 317:
## Known stack suffix:
## equality_expression_no_in Leqq
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Leqq . relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 318
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 318:
## Known stack suffix:
## equality_expression_no_in Leqq relational_expression_no_in
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
relational_expression_no_in -> relational_expression_no_in . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 298
-- On Lle shift to state 300
-- On Lgreater shift to state 302
-- On Lge shift to state 304
-- On KWinstanceof shift to state 306
## Reductions:
-- On Lxor reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lsemicolon reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lsc_or reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lsc_and reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lneq reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lne reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lhook reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Leqq reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Leq reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lcomma reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lcolon reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lbit_or reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On Lbit_and reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in
-- On KWin reduce production equality_expression_no_in -> equality_expression_no_in Leqq relational_expression_no_in

State 319:
## Known stack suffix:
## equality_expression_no_in Leq
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Leq . relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 320
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 320:
## Known stack suffix:
## equality_expression_no_in Leq relational_expression_no_in
## LR(1) items:
equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
relational_expression_no_in -> relational_expression_no_in . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression_no_in -> relational_expression_no_in . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 298
-- On Lle shift to state 300
-- On Lgreater shift to state 302
-- On Lge shift to state 304
-- On KWinstanceof shift to state 306
## Reductions:
-- On Lxor reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lsemicolon reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lsc_or reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lsc_and reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lneq reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lne reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lhook reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Leqq reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Leq reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lcomma reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lcolon reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lbit_or reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On Lbit_and reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in
-- On KWin reduce production equality_expression_no_in -> equality_expression_no_in Leq relational_expression_no_in

State 321:
## Known stack suffix:
## bitwise_xor_expression_no_in
## LR(1) items:
bitwise_or_expression_no_in -> bitwise_xor_expression_no_in . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in . Lxor bitwise_and_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
## Transitions:
-- On Lxor shift to state 322
## Reductions:
-- On Lsemicolon reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in
-- On Lsc_or reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in
-- On Lsc_and reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in
-- On Lhook reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in
-- On Lcomma reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in
-- On Lcolon reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in
-- On Lbit_or reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in
-- On KWin reduce production bitwise_or_expression_no_in -> bitwise_xor_expression_no_in

State 322:
## Known stack suffix:
## bitwise_xor_expression_no_in Lxor
## LR(1) items:
bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor . bitwise_and_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On call_expression shift to state 101
-- On bitwise_and_expression_no_in shift to state 323
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 323:
## Known stack suffix:
## bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
## LR(1) items:
bitwise_and_expression_no_in -> bitwise_and_expression_no_in . Lbit_and equality_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or Lbit_and KWin ]
bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
## Transitions:
-- On Lbit_and shift to state 324
## Reductions:
-- On Lxor reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On Lsemicolon reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On Lsc_or reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On Lsc_and reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On Lhook reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On Lcomma reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On Lcolon reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On Lbit_or reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in
-- On KWin reduce production bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in Lxor bitwise_and_expression_no_in

State 324:
## Known stack suffix:
## bitwise_and_expression_no_in Lbit_and
## LR(1) items:
bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and . equality_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or Lbit_and KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 325
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 325:
## Known stack suffix:
## bitwise_and_expression_no_in Lbit_and equality_expression_no_in
## LR(1) items:
bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Leq relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Lne relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Leqq relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
equality_expression_no_in -> equality_expression_no_in . Lneq relational_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin ]
## Transitions:
-- On Lneq shift to state 313
-- On Lne shift to state 315
-- On Leqq shift to state 317
-- On Leq shift to state 319
## Reductions:
-- On Lxor reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lsemicolon reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lsc_or reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lsc_and reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lhook reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lcomma reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lcolon reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lbit_or reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On Lbit_and reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in
-- On KWin reduce production bitwise_and_expression_no_in -> bitwise_and_expression_no_in Lbit_and equality_expression_no_in

State 326:
## Known stack suffix:
## logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in
## LR(1) items:
bitwise_or_expression_no_in -> bitwise_or_expression_no_in . Lbit_or bitwise_xor_expression_no_in [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon KWin ]
## Transitions:
-- On Lbit_or shift to state 327
## Reductions:
-- On Lsemicolon reduce production logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in
-- On Lsc_or reduce production logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in
-- On Lsc_and reduce production logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in
-- On Lhook reduce production logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in
-- On Lcomma reduce production logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in
-- On Lcolon reduce production logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in
-- On KWin reduce production logical_and_expression_no_in -> logical_and_expression_no_in Lsc_and bitwise_or_expression_no_in

State 327:
## Known stack suffix:
## bitwise_or_expression_no_in Lbit_or
## LR(1) items:
bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or . bitwise_xor_expression_no_in [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 328
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 328:
## Known stack suffix:
## bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
## LR(1) items:
bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
bitwise_xor_expression_no_in -> bitwise_xor_expression_no_in . Lxor bitwise_and_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
## Transitions:
-- On Lxor shift to state 322
## Reductions:
-- On Lsemicolon reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
-- On Lsc_or reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
-- On Lsc_and reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
-- On Lhook reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
-- On Lcomma reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
-- On Lcolon reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
-- On Lbit_or reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in
-- On KWin reduce production bitwise_or_expression_no_in -> bitwise_or_expression_no_in Lbit_or bitwise_xor_expression_no_in

State 329:
## Known stack suffix:
## bitwise_and_expression_no_in
## LR(1) items:
bitwise_and_expression_no_in -> bitwise_and_expression_no_in . Lbit_and equality_expression_no_in [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or Lbit_and KWin ]
bitwise_xor_expression_no_in -> bitwise_and_expression_no_in . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
## Transitions:
-- On Lbit_and shift to state 324
## Reductions:
-- On Lxor reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On Lsemicolon reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On Lsc_or reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On Lsc_and reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On Lhook reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On Lcomma reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On Lcolon reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On Lbit_or reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in
-- On KWin reduce production bitwise_xor_expression_no_in -> bitwise_and_expression_no_in

State 330:
## Known stack suffix:
## bitwise_or_expression_no_in
## LR(1) items:
bitwise_or_expression_no_in -> bitwise_or_expression_no_in . Lbit_or bitwise_xor_expression_no_in [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin ]
logical_and_expression_no_in -> bitwise_or_expression_no_in . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon KWin ]
## Transitions:
-- On Lbit_or shift to state 327
## Reductions:
-- On Lsemicolon reduce production logical_and_expression_no_in -> bitwise_or_expression_no_in
-- On Lsc_or reduce production logical_and_expression_no_in -> bitwise_or_expression_no_in
-- On Lsc_and reduce production logical_and_expression_no_in -> bitwise_or_expression_no_in
-- On Lhook reduce production logical_and_expression_no_in -> bitwise_or_expression_no_in
-- On Lcomma reduce production logical_and_expression_no_in -> bitwise_or_expression_no_in
-- On Lcolon reduce production logical_and_expression_no_in -> bitwise_or_expression_no_in
-- On KWin reduce production logical_and_expression_no_in -> bitwise_or_expression_no_in

State 331:
## Known stack suffix:
## logical_or_expression_no_in Lhook
## LR(1) items:
conditional_expression_no_in -> logical_or_expression_no_in Lhook . assignment_expression_no_in Lcolon assignment_expression_no_in [ Lsemicolon Lcomma Lcolon KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression_no_in shift to state 308
-- On logical_and_expression_no_in shift to state 332
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 333
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On conditional_expression_no_in shift to state 335
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 330
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On assignment_expression_no_in shift to state 337
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 332:
## Known stack suffix:
## logical_and_expression_no_in
## LR(1) items:
logical_and_expression_no_in -> logical_and_expression_no_in . Lsc_and bitwise_or_expression_no_in [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon KWin ]
logical_or_expression_no_in -> logical_and_expression_no_in . [ Lsemicolon Lsc_or Lhook Lcomma Lcolon KWin ]
## Transitions:
-- On Lsc_and shift to state 311
## Reductions:
-- On Lsemicolon reduce production logical_or_expression_no_in -> logical_and_expression_no_in
-- On Lsc_or reduce production logical_or_expression_no_in -> logical_and_expression_no_in
-- On Lhook reduce production logical_or_expression_no_in -> logical_and_expression_no_in
-- On Lcomma reduce production logical_or_expression_no_in -> logical_and_expression_no_in
-- On Lcolon reduce production logical_or_expression_no_in -> logical_and_expression_no_in
-- On KWin reduce production logical_or_expression_no_in -> logical_and_expression_no_in

State 333:
## Known stack suffix:
## left_hand_side_expression
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression . assignment_operator assignment_expression_no_in [ Lsemicolon Lcomma Lcolon KWin ]
postfix_expression -> left_hand_side_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
postfix_expression -> left_hand_side_expression . Lincr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
postfix_expression -> left_hand_side_expression . Ldecr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lxorassign shift to state 154
-- On Lstarassign shift to state 155
-- On Lslashassign shift to state 156
-- On Lrunsignedshiftassign shift to state 157
-- On Lrsignedshiftassign shift to state 158
-- On Lremassign shift to state 159
-- On Lplusassign shift to state 160
-- On Lorassign shift to state 161
-- On Lminusassign shift to state 162
-- On Llshiftassign shift to state 163
-- On Lincr shift to state 97
-- On Ldecr shift to state 98
-- On Lassign shift to state 164
-- On Landassign shift to state 165
-- On assignment_operator shift to state 334
## Reductions:
-- On Lxor reduce production postfix_expression -> left_hand_side_expression
-- On Lstar reduce production postfix_expression -> left_hand_side_expression
-- On Lslash reduce production postfix_expression -> left_hand_side_expression
-- On Lsemicolon reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_or reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_and reduce production postfix_expression -> left_hand_side_expression
-- On Lrunsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrem reduce production postfix_expression -> left_hand_side_expression
-- On Lplus reduce production postfix_expression -> left_hand_side_expression
-- On Lneq reduce production postfix_expression -> left_hand_side_expression
-- On Lne reduce production postfix_expression -> left_hand_side_expression
-- On Lminus reduce production postfix_expression -> left_hand_side_expression
-- On Llshift reduce production postfix_expression -> left_hand_side_expression
-- On Lless reduce production postfix_expression -> left_hand_side_expression
-- On Lle reduce production postfix_expression -> left_hand_side_expression
-- On Lhook reduce production postfix_expression -> left_hand_side_expression
-- On Lgreater reduce production postfix_expression -> left_hand_side_expression
-- On Lge reduce production postfix_expression -> left_hand_side_expression
-- On Leqq reduce production postfix_expression -> left_hand_side_expression
-- On Leq reduce production postfix_expression -> left_hand_side_expression
-- On Lcomma reduce production postfix_expression -> left_hand_side_expression
-- On Lcolon reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_or reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_and reduce production postfix_expression -> left_hand_side_expression
-- On KWinstanceof reduce production postfix_expression -> left_hand_side_expression
-- On KWin reduce production postfix_expression -> left_hand_side_expression

State 334:
## Known stack suffix:
## left_hand_side_expression assignment_operator
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression assignment_operator . assignment_expression_no_in [ Lsemicolon Lcomma Lcolon KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression_no_in shift to state 308
-- On logical_and_expression_no_in shift to state 332
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 333
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On conditional_expression_no_in shift to state 335
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 330
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On assignment_expression_no_in shift to state 336
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 335:
## Known stack suffix:
## conditional_expression_no_in
## LR(1) items:
assignment_expression_no_in -> conditional_expression_no_in . [ Lsemicolon Lcomma Lcolon KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression_no_in -> conditional_expression_no_in

State 336:
## Known stack suffix:
## left_hand_side_expression assignment_operator assignment_expression_no_in
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression assignment_operator assignment_expression_no_in . [ Lsemicolon Lcomma Lcolon KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression_no_in -> left_hand_side_expression assignment_operator assignment_expression_no_in

State 337:
## Known stack suffix:
## logical_or_expression_no_in Lhook assignment_expression_no_in
## LR(1) items:
conditional_expression_no_in -> logical_or_expression_no_in Lhook assignment_expression_no_in . Lcolon assignment_expression_no_in [ Lsemicolon Lcomma Lcolon KWin ]
## Transitions:
-- On Lcolon shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## logical_or_expression_no_in Lhook assignment_expression_no_in Lcolon
## LR(1) items:
conditional_expression_no_in -> logical_or_expression_no_in Lhook assignment_expression_no_in Lcolon . assignment_expression_no_in [ Lsemicolon Lcomma Lcolon KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression_no_in shift to state 308
-- On logical_and_expression_no_in shift to state 332
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 333
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On conditional_expression_no_in shift to state 335
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 330
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On assignment_expression_no_in shift to state 339
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 339:
## Known stack suffix:
## logical_or_expression_no_in Lhook assignment_expression_no_in Lcolon assignment_expression_no_in
## LR(1) items:
conditional_expression_no_in -> logical_or_expression_no_in Lhook assignment_expression_no_in Lcolon assignment_expression_no_in . [ Lsemicolon Lcomma Lcolon KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression_no_in -> logical_or_expression_no_in Lhook assignment_expression_no_in Lcolon assignment_expression_no_in

State 340:
## Known stack suffix:
## Lassign assignment_expression_no_in
## LR(1) items:
initialiser_no_in -> Lassign assignment_expression_no_in . [ Lsemicolon Lcomma KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initialiser_no_in -> Lassign assignment_expression_no_in

State 341:
## Known stack suffix:
## identifier initialiser_no_in
## LR(1) items:
variable_declaration_no_in -> identifier initialiser_no_in . [ Lsemicolon Lcomma KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration_no_in -> identifier initialiser_no_in

State 342:
## Known stack suffix:
## sequence_of_expression_no_in
## LR(1) items:
expression_no_in -> sequence_of_expression_no_in . [ Lsemicolon ]
sequence_of_expression_no_in -> sequence_of_expression_no_in . Lcomma assignment_expression_no_in [ Lsemicolon Lcomma ]
## Transitions:
-- On Lcomma shift to state 343
## Reductions:
-- On Lsemicolon reduce production expression_no_in -> sequence_of_expression_no_in

State 343:
## Known stack suffix:
## sequence_of_expression_no_in Lcomma
## LR(1) items:
sequence_of_expression_no_in -> sequence_of_expression_no_in Lcomma . assignment_expression_no_in [ Lsemicolon Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 296
-- On relational_expression_no_in shift to state 297
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression_no_in shift to state 308
-- On logical_and_expression_no_in shift to state 332
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 333
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression_no_in shift to state 312
-- On conditional_expression_no_in shift to state 335
-- On call_expression shift to state 101
-- On bitwise_xor_expression_no_in shift to state 321
-- On bitwise_or_expression_no_in shift to state 330
-- On bitwise_and_expression_no_in shift to state 329
-- On attribute_identifier shift to state 115
-- On assignment_expression_no_in shift to state 344
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 344:
## Known stack suffix:
## sequence_of_expression_no_in Lcomma assignment_expression_no_in
## LR(1) items:
sequence_of_expression_no_in -> sequence_of_expression_no_in Lcomma assignment_expression_no_in . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequence_of_expression_no_in -> sequence_of_expression_no_in Lcomma assignment_expression_no_in

State 345:
## Known stack suffix:
## optional_expression_no_in
## LR(1) items:
for_bracket -> optional_expression_no_in . Lsemicolon optional_expression Lsemicolon optional_expression [ Lrparen ]
## Transitions:
-- On Lsemicolon shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## optional_expression_no_in Lsemicolon
## LR(1) items:
for_bracket -> optional_expression_no_in Lsemicolon . optional_expression Lsemicolon optional_expression [ Lrparen ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On optional_expression shift to state 347
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 291
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:
-- On Lsemicolon reduce production optional_expression ->

State 347:
## Known stack suffix:
## optional_expression_no_in Lsemicolon optional_expression
## LR(1) items:
for_bracket -> optional_expression_no_in Lsemicolon optional_expression . Lsemicolon optional_expression [ Lrparen ]
## Transitions:
-- On Lsemicolon shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## optional_expression_no_in Lsemicolon optional_expression Lsemicolon
## LR(1) items:
for_bracket -> optional_expression_no_in Lsemicolon optional_expression Lsemicolon . optional_expression [ Lrparen ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On optional_expression shift to state 349
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 291
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:
-- On Lrparen reduce production optional_expression ->

State 349:
## Known stack suffix:
## optional_expression_no_in Lsemicolon optional_expression Lsemicolon optional_expression
## LR(1) items:
for_bracket -> optional_expression_no_in Lsemicolon optional_expression Lsemicolon optional_expression . [ Lrparen ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_bracket -> optional_expression_no_in Lsemicolon optional_expression Lsemicolon optional_expression

State 350:
## Known stack suffix:
## left_hand_side_expression
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression . assignment_operator assignment_expression_no_in [ Lsemicolon Lcomma ]
for_bracket -> left_hand_side_expression . KWin expression [ Lrparen ]
postfix_expression -> left_hand_side_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof ]
postfix_expression -> left_hand_side_expression . Lincr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof ]
postfix_expression -> left_hand_side_expression . Ldecr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof ]
## Transitions:
-- On Lxorassign shift to state 154
-- On Lstarassign shift to state 155
-- On Lslashassign shift to state 156
-- On Lrunsignedshiftassign shift to state 157
-- On Lrsignedshiftassign shift to state 158
-- On Lremassign shift to state 159
-- On Lplusassign shift to state 160
-- On Lorassign shift to state 161
-- On Lminusassign shift to state 162
-- On Llshiftassign shift to state 163
-- On Lincr shift to state 97
-- On Ldecr shift to state 98
-- On Lassign shift to state 164
-- On Landassign shift to state 165
-- On KWin shift to state 351
-- On assignment_operator shift to state 334
## Reductions:
-- On Lxor reduce production postfix_expression -> left_hand_side_expression
-- On Lstar reduce production postfix_expression -> left_hand_side_expression
-- On Lslash reduce production postfix_expression -> left_hand_side_expression
-- On Lsemicolon reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_or reduce production postfix_expression -> left_hand_side_expression
-- On Lsc_and reduce production postfix_expression -> left_hand_side_expression
-- On Lrunsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrsignedshift reduce production postfix_expression -> left_hand_side_expression
-- On Lrem reduce production postfix_expression -> left_hand_side_expression
-- On Lplus reduce production postfix_expression -> left_hand_side_expression
-- On Lneq reduce production postfix_expression -> left_hand_side_expression
-- On Lne reduce production postfix_expression -> left_hand_side_expression
-- On Lminus reduce production postfix_expression -> left_hand_side_expression
-- On Llshift reduce production postfix_expression -> left_hand_side_expression
-- On Lless reduce production postfix_expression -> left_hand_side_expression
-- On Lle reduce production postfix_expression -> left_hand_side_expression
-- On Lhook reduce production postfix_expression -> left_hand_side_expression
-- On Lgreater reduce production postfix_expression -> left_hand_side_expression
-- On Lge reduce production postfix_expression -> left_hand_side_expression
-- On Leqq reduce production postfix_expression -> left_hand_side_expression
-- On Leq reduce production postfix_expression -> left_hand_side_expression
-- On Lcomma reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_or reduce production postfix_expression -> left_hand_side_expression
-- On Lbit_and reduce production postfix_expression -> left_hand_side_expression
-- On KWinstanceof reduce production postfix_expression -> left_hand_side_expression

State 351:
## Known stack suffix:
## left_hand_side_expression KWin
## LR(1) items:
for_bracket -> left_hand_side_expression KWin . expression [ Lrparen ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 352
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 352:
## Known stack suffix:
## left_hand_side_expression KWin expression
## LR(1) items:
for_bracket -> left_hand_side_expression KWin expression . [ Lrparen ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_bracket -> left_hand_side_expression KWin expression

State 353:
## Known stack suffix:
## KWfor Llparen for_bracket
## LR(1) items:
iteration_statement -> KWfor Llparen for_bracket . Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## KWfor Llparen for_bracket Lrparen
## LR(1) items:
iteration_statement -> KWfor Llparen for_bracket Lrparen . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 500
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 355:
## Known stack suffix:
## KWdo
## LR(1) items:
iteration_statement -> KWdo . statement KWwhile Llparen expression Lrparen Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 376
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 356:
## Known stack suffix:
## KWdelete
## LR(1) items:
unary_init_expression -> KWdelete . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 357
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 357:
## Known stack suffix:
## KWdelete unary_expression
## LR(1) items:
unary_init_expression -> KWdelete unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> KWdelete unary_expression

State 358:
## Known stack suffix:
## KWcontinue
## LR(1) items:
continue_statement -> KWcontinue . identifier Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
continue_statement -> KWcontinue . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 359
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 360
## Reductions:

State 359:
## Known stack suffix:
## KWcontinue Lsemicolon
## LR(1) items:
continue_statement -> KWcontinue Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production continue_statement -> KWcontinue Lsemicolon

State 360:
## Known stack suffix:
## KWcontinue identifier
## LR(1) items:
continue_statement -> KWcontinue identifier . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## KWcontinue identifier Lsemicolon
## LR(1) items:
continue_statement -> KWcontinue identifier Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production continue_statement -> KWcontinue identifier Lsemicolon

State 362:
## Known stack suffix:
## KWbreak
## LR(1) items:
break_statement -> KWbreak . identifier Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
break_statement -> KWbreak . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 363
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 364
## Reductions:

State 363:
## Known stack suffix:
## KWbreak Lsemicolon
## LR(1) items:
break_statement -> KWbreak Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production break_statement -> KWbreak Lsemicolon

State 364:
## Known stack suffix:
## KWbreak identifier
## LR(1) items:
break_statement -> KWbreak identifier . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## KWbreak identifier Lsemicolon
## LR(1) items:
break_statement -> KWbreak identifier Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production break_statement -> KWbreak identifier Lsemicolon

State 366:
## Known stack suffix:
## CKWdefaultxmlnamespace
## LR(1) items:
default_xml_namespace_statement -> CKWdefaultxmlnamespace . Lassign expression Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lassign shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## CKWdefaultxmlnamespace Lassign
## LR(1) items:
default_xml_namespace_statement -> CKWdefaultxmlnamespace Lassign . expression Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 368
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 368:
## Known stack suffix:
## CKWdefaultxmlnamespace Lassign expression
## LR(1) items:
default_xml_namespace_statement -> CKWdefaultxmlnamespace Lassign expression . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## CKWdefaultxmlnamespace Lassign expression Lsemicolon
## LR(1) items:
default_xml_namespace_statement -> CKWdefaultxmlnamespace Lassign expression Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_xml_namespace_statement -> CKWdefaultxmlnamespace Lassign expression Lsemicolon

State 370:
## Known stack suffix:
## with_statement
## LR(1) items:
statement -> with_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> with_statement

State 371:
## Known stack suffix:
## variable_statement
## LR(1) items:
statement -> variable_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> variable_statement

State 372:
## Known stack suffix:
## unary_init_expression
## LR(1) items:
multiplicative_init_expression -> unary_init_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_init_expression -> unary_init_expression

State 373:
## Known stack suffix:
## try_statement
## LR(1) items:
statement -> try_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> try_statement

State 374:
## Known stack suffix:
## throw_statement
## LR(1) items:
statement -> throw_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> throw_statement

State 375:
## Known stack suffix:
## switch_statement
## LR(1) items:
statement -> switch_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> switch_statement

State 376:
## Known stack suffix:
## KWdo statement
## LR(1) items:
iteration_statement -> KWdo statement . KWwhile Llparen expression Lrparen Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On KWwhile shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## KWdo statement KWwhile
## LR(1) items:
iteration_statement -> KWdo statement KWwhile . Llparen expression Lrparen Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 378
## Reductions:

State 378:
## Known stack suffix:
## KWdo statement KWwhile Llparen
## LR(1) items:
iteration_statement -> KWdo statement KWwhile Llparen . expression Lrparen Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 379
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 379:
## Known stack suffix:
## KWdo statement KWwhile Llparen expression
## LR(1) items:
iteration_statement -> KWdo statement KWwhile Llparen expression . Lrparen Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## KWdo statement KWwhile Llparen expression Lrparen
## LR(1) items:
iteration_statement -> KWdo statement KWwhile Llparen expression Lrparen . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## KWdo statement KWwhile Llparen expression Lrparen Lsemicolon
## LR(1) items:
iteration_statement -> KWdo statement KWwhile Llparen expression Lrparen Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KWdo statement KWwhile Llparen expression Lrparen Lsemicolon

State 382:
## Known stack suffix:
## shift_init_expression
## LR(1) items:
relational_init_expression -> shift_init_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_init_expression -> shift_init_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_init_expression -> shift_init_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_init_expression -> shift_init_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 383
-- On Lrsignedshift shift to state 385
-- On Llshift shift to state 387
## Reductions:
-- On Lxor reduce production relational_init_expression -> shift_init_expression
-- On Lsemicolon reduce production relational_init_expression -> shift_init_expression
-- On Lsc_or reduce production relational_init_expression -> shift_init_expression
-- On Lsc_and reduce production relational_init_expression -> shift_init_expression
-- On Lneq reduce production relational_init_expression -> shift_init_expression
-- On Lne reduce production relational_init_expression -> shift_init_expression
-- On Lless reduce production relational_init_expression -> shift_init_expression
-- On Lle reduce production relational_init_expression -> shift_init_expression
-- On Lhook reduce production relational_init_expression -> shift_init_expression
-- On Lgreater reduce production relational_init_expression -> shift_init_expression
-- On Lge reduce production relational_init_expression -> shift_init_expression
-- On Leqq reduce production relational_init_expression -> shift_init_expression
-- On Leq reduce production relational_init_expression -> shift_init_expression
-- On Lcomma reduce production relational_init_expression -> shift_init_expression
-- On Lbit_or reduce production relational_init_expression -> shift_init_expression
-- On Lbit_and reduce production relational_init_expression -> shift_init_expression
-- On KWinstanceof reduce production relational_init_expression -> shift_init_expression
-- On KWin reduce production relational_init_expression -> shift_init_expression

State 383:
## Known stack suffix:
## shift_init_expression Lrunsignedshift
## LR(1) items:
shift_init_expression -> shift_init_expression Lrunsignedshift . additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## shift_init_expression Lrunsignedshift additive_expression
## LR(1) items:
additive_expression -> additive_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
additive_expression -> additive_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 118
-- On Lminus shift to state 124
## Reductions:
-- On Lxor reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lsemicolon reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lsc_or reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lsc_and reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lrunsignedshift reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lrsignedshift reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lneq reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lne reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Llshift reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lless reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lle reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lhook reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lgreater reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lge reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Leqq reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Leq reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lcomma reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lbit_or reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On Lbit_and reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On KWinstanceof reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression
-- On KWin reduce production shift_init_expression -> shift_init_expression Lrunsignedshift additive_expression

State 385:
## Known stack suffix:
## shift_init_expression Lrsignedshift
## LR(1) items:
shift_init_expression -> shift_init_expression Lrsignedshift . additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## shift_init_expression Lrsignedshift additive_expression
## LR(1) items:
additive_expression -> additive_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
additive_expression -> additive_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_init_expression -> shift_init_expression Lrsignedshift additive_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 118
-- On Lminus shift to state 124
## Reductions:
-- On Lxor reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lsemicolon reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lsc_or reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lsc_and reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lrunsignedshift reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lrsignedshift reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lneq reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lne reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Llshift reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lless reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lle reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lhook reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lgreater reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lge reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Leqq reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Leq reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lcomma reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lbit_or reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On Lbit_and reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On KWinstanceof reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression
-- On KWin reduce production shift_init_expression -> shift_init_expression Lrsignedshift additive_expression

State 387:
## Known stack suffix:
## shift_init_expression Llshift
## LR(1) items:
shift_init_expression -> shift_init_expression Llshift . additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## shift_init_expression Llshift additive_expression
## LR(1) items:
additive_expression -> additive_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
additive_expression -> additive_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_init_expression -> shift_init_expression Llshift additive_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 118
-- On Lminus shift to state 124
## Reductions:
-- On Lxor reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lsemicolon reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lsc_or reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lsc_and reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lrunsignedshift reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lrsignedshift reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lneq reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lne reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Llshift reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lless reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lle reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lhook reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lgreater reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lge reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Leqq reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Leq reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lcomma reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lbit_or reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On Lbit_and reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On KWinstanceof reduce production shift_init_expression -> shift_init_expression Llshift additive_expression
-- On KWin reduce production shift_init_expression -> shift_init_expression Llshift additive_expression

State 389:
## Known stack suffix:
## sequence_of_init_expression
## LR(1) items:
init_expression -> sequence_of_init_expression . [ Lsemicolon ]
sequence_of_init_expression -> sequence_of_init_expression . Lcomma assignment_expression [ Lsemicolon Lcomma ]
## Transitions:
-- On Lcomma shift to state 390
## Reductions:
-- On Lsemicolon reduce production init_expression -> sequence_of_init_expression

State 390:
## Known stack suffix:
## sequence_of_init_expression Lcomma
## LR(1) items:
sequence_of_init_expression -> sequence_of_init_expression Lcomma . assignment_expression [ Lsemicolon Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 391
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 391:
## Known stack suffix:
## sequence_of_init_expression Lcomma assignment_expression
## LR(1) items:
sequence_of_init_expression -> sequence_of_init_expression Lcomma assignment_expression . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequence_of_init_expression -> sequence_of_init_expression Lcomma assignment_expression

State 392:
## Known stack suffix:
## return_statement
## LR(1) items:
statement -> return_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> return_statement

State 393:
## Known stack suffix:
## relational_init_expression
## LR(1) items:
equality_init_expression -> relational_init_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
relational_init_expression -> relational_init_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_init_expression -> relational_init_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_init_expression -> relational_init_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_init_expression -> relational_init_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_init_expression -> relational_init_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_init_expression -> relational_init_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 394
-- On Lle shift to state 396
-- On Lgreater shift to state 398
-- On Lge shift to state 400
-- On KWinstanceof shift to state 402
-- On KWin shift to state 404
## Reductions:
-- On Lxor reduce production equality_init_expression -> relational_init_expression
-- On Lsemicolon reduce production equality_init_expression -> relational_init_expression
-- On Lsc_or reduce production equality_init_expression -> relational_init_expression
-- On Lsc_and reduce production equality_init_expression -> relational_init_expression
-- On Lneq reduce production equality_init_expression -> relational_init_expression
-- On Lne reduce production equality_init_expression -> relational_init_expression
-- On Lhook reduce production equality_init_expression -> relational_init_expression
-- On Leqq reduce production equality_init_expression -> relational_init_expression
-- On Leq reduce production equality_init_expression -> relational_init_expression
-- On Lcomma reduce production equality_init_expression -> relational_init_expression
-- On Lbit_or reduce production equality_init_expression -> relational_init_expression
-- On Lbit_and reduce production equality_init_expression -> relational_init_expression

State 394:
## Known stack suffix:
## relational_init_expression Lless
## LR(1) items:
relational_init_expression -> relational_init_expression Lless . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 395
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 395:
## Known stack suffix:
## relational_init_expression Lless shift_expression
## LR(1) items:
relational_init_expression -> relational_init_expression Lless shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lsemicolon reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lsc_or reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lsc_and reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lneq reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lne reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lless reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lle reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lhook reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lgreater reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lge reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Leqq reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Leq reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lcomma reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lbit_or reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On Lbit_and reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On KWinstanceof reduce production relational_init_expression -> relational_init_expression Lless shift_expression
-- On KWin reduce production relational_init_expression -> relational_init_expression Lless shift_expression

State 396:
## Known stack suffix:
## relational_init_expression Lle
## LR(1) items:
relational_init_expression -> relational_init_expression Lle . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 397
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 397:
## Known stack suffix:
## relational_init_expression Lle shift_expression
## LR(1) items:
relational_init_expression -> relational_init_expression Lle shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lsemicolon reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lsc_or reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lsc_and reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lneq reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lne reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lless reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lle reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lhook reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lgreater reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lge reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Leqq reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Leq reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lcomma reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lbit_or reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On Lbit_and reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On KWinstanceof reduce production relational_init_expression -> relational_init_expression Lle shift_expression
-- On KWin reduce production relational_init_expression -> relational_init_expression Lle shift_expression

State 398:
## Known stack suffix:
## relational_init_expression Lgreater
## LR(1) items:
relational_init_expression -> relational_init_expression Lgreater . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 399
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 399:
## Known stack suffix:
## relational_init_expression Lgreater shift_expression
## LR(1) items:
relational_init_expression -> relational_init_expression Lgreater shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lsemicolon reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lsc_or reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lsc_and reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lneq reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lne reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lless reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lle reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lhook reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lgreater reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lge reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Leqq reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Leq reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lcomma reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lbit_or reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On Lbit_and reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On KWinstanceof reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression
-- On KWin reduce production relational_init_expression -> relational_init_expression Lgreater shift_expression

State 400:
## Known stack suffix:
## relational_init_expression Lge
## LR(1) items:
relational_init_expression -> relational_init_expression Lge . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 401
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 401:
## Known stack suffix:
## relational_init_expression Lge shift_expression
## LR(1) items:
relational_init_expression -> relational_init_expression Lge shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lsemicolon reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lsc_or reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lsc_and reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lneq reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lne reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lless reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lle reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lhook reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lgreater reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lge reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Leqq reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Leq reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lcomma reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lbit_or reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On Lbit_and reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On KWinstanceof reduce production relational_init_expression -> relational_init_expression Lge shift_expression
-- On KWin reduce production relational_init_expression -> relational_init_expression Lge shift_expression

State 402:
## Known stack suffix:
## relational_init_expression KWinstanceof
## LR(1) items:
relational_init_expression -> relational_init_expression KWinstanceof . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 403
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 403:
## Known stack suffix:
## relational_init_expression KWinstanceof shift_expression
## LR(1) items:
relational_init_expression -> relational_init_expression KWinstanceof shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lsemicolon reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lsc_or reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lsc_and reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lneq reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lne reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lless reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lle reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lhook reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lgreater reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lge reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Leqq reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Leq reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lcomma reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lbit_or reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On Lbit_and reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On KWinstanceof reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression
-- On KWin reduce production relational_init_expression -> relational_init_expression KWinstanceof shift_expression

State 404:
## Known stack suffix:
## relational_init_expression KWin
## LR(1) items:
relational_init_expression -> relational_init_expression KWin . shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 405
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 405:
## Known stack suffix:
## relational_init_expression KWin shift_expression
## LR(1) items:
relational_init_expression -> relational_init_expression KWin shift_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Llshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_expression -> shift_expression . Lrunsignedshift additive_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lrunsignedshift shift to state 78
-- On Lrsignedshift shift to state 94
-- On Llshift shift to state 114
## Reductions:
-- On Lxor reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lsemicolon reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lsc_or reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lsc_and reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lneq reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lne reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lless reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lle reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lhook reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lgreater reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lge reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Leqq reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Leq reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lcomma reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lbit_or reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On Lbit_and reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On KWinstanceof reduce production relational_init_expression -> relational_init_expression KWin shift_expression
-- On KWin reduce production relational_init_expression -> relational_init_expression KWin shift_expression

State 406:
## Known stack suffix:
## primary_init_expression
## LR(1) items:
member_init_expression -> primary_init_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_init_expression -> primary_init_expression

State 407:
## Known stack suffix:
## postfix_init_expression
## LR(1) items:
unary_init_expression -> postfix_init_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> postfix_init_expression

State 408:
## Known stack suffix:
## new_init_expression
## LR(1) items:
left_hand_side_init_expression -> new_init_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_hand_side_init_expression -> new_init_expression

State 409:
## Known stack suffix:
## multiplicative_init_expression
## LR(1) items:
additive_init_expression -> multiplicative_init_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_init_expression -> multiplicative_init_expression . Lstar unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_init_expression -> multiplicative_init_expression . Lslash unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_init_expression -> multiplicative_init_expression . Lrem unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 410
-- On Lslash shift to state 412
-- On Lrem shift to state 414
## Reductions:
-- On Lxor reduce production additive_init_expression -> multiplicative_init_expression
-- On Lsemicolon reduce production additive_init_expression -> multiplicative_init_expression
-- On Lsc_or reduce production additive_init_expression -> multiplicative_init_expression
-- On Lsc_and reduce production additive_init_expression -> multiplicative_init_expression
-- On Lrunsignedshift reduce production additive_init_expression -> multiplicative_init_expression
-- On Lrsignedshift reduce production additive_init_expression -> multiplicative_init_expression
-- On Lplus reduce production additive_init_expression -> multiplicative_init_expression
-- On Lneq reduce production additive_init_expression -> multiplicative_init_expression
-- On Lne reduce production additive_init_expression -> multiplicative_init_expression
-- On Lminus reduce production additive_init_expression -> multiplicative_init_expression
-- On Llshift reduce production additive_init_expression -> multiplicative_init_expression
-- On Lless reduce production additive_init_expression -> multiplicative_init_expression
-- On Lle reduce production additive_init_expression -> multiplicative_init_expression
-- On Lhook reduce production additive_init_expression -> multiplicative_init_expression
-- On Lgreater reduce production additive_init_expression -> multiplicative_init_expression
-- On Lge reduce production additive_init_expression -> multiplicative_init_expression
-- On Leqq reduce production additive_init_expression -> multiplicative_init_expression
-- On Leq reduce production additive_init_expression -> multiplicative_init_expression
-- On Lcomma reduce production additive_init_expression -> multiplicative_init_expression
-- On Lbit_or reduce production additive_init_expression -> multiplicative_init_expression
-- On Lbit_and reduce production additive_init_expression -> multiplicative_init_expression
-- On KWinstanceof reduce production additive_init_expression -> multiplicative_init_expression
-- On KWin reduce production additive_init_expression -> multiplicative_init_expression

State 410:
## Known stack suffix:
## multiplicative_init_expression Lstar
## LR(1) items:
multiplicative_init_expression -> multiplicative_init_expression Lstar . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 411
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 411:
## Known stack suffix:
## multiplicative_init_expression Lstar unary_expression
## LR(1) items:
multiplicative_init_expression -> multiplicative_init_expression Lstar unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_init_expression -> multiplicative_init_expression Lstar unary_expression

State 412:
## Known stack suffix:
## multiplicative_init_expression Lslash
## LR(1) items:
multiplicative_init_expression -> multiplicative_init_expression Lslash . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 413
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 413:
## Known stack suffix:
## multiplicative_init_expression Lslash unary_expression
## LR(1) items:
multiplicative_init_expression -> multiplicative_init_expression Lslash unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_init_expression -> multiplicative_init_expression Lslash unary_expression

State 414:
## Known stack suffix:
## multiplicative_init_expression Lrem
## LR(1) items:
multiplicative_init_expression -> multiplicative_init_expression Lrem . unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 415
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 415:
## Known stack suffix:
## multiplicative_init_expression Lrem unary_expression
## LR(1) items:
multiplicative_init_expression -> multiplicative_init_expression Lrem unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_init_expression -> multiplicative_init_expression Lrem unary_expression

State 416:
## Known stack suffix:
## member_init_expression
## LR(1) items:
call_init_expression -> member_init_expression . arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression . Ldot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression . Ldot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression . Lddot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression . Lddot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression . Ldot Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
new_init_expression -> member_init_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 89
-- On Llbracket shift to state 417
-- On Ldot shift to state 420
-- On Lddot shift to state 426
-- On arguments shift to state 429
## Reductions:
-- On Lxorassign reduce production new_init_expression -> member_init_expression
-- On Lxor reduce production new_init_expression -> member_init_expression
-- On Lstarassign reduce production new_init_expression -> member_init_expression
-- On Lstar reduce production new_init_expression -> member_init_expression
-- On Lslashassign reduce production new_init_expression -> member_init_expression
-- On Lslash reduce production new_init_expression -> member_init_expression
-- On Lsemicolon reduce production new_init_expression -> member_init_expression
-- On Lsc_or reduce production new_init_expression -> member_init_expression
-- On Lsc_and reduce production new_init_expression -> member_init_expression
-- On Lrunsignedshiftassign reduce production new_init_expression -> member_init_expression
-- On Lrunsignedshift reduce production new_init_expression -> member_init_expression
-- On Lrsignedshiftassign reduce production new_init_expression -> member_init_expression
-- On Lrsignedshift reduce production new_init_expression -> member_init_expression
-- On Lremassign reduce production new_init_expression -> member_init_expression
-- On Lrem reduce production new_init_expression -> member_init_expression
-- On Lplusassign reduce production new_init_expression -> member_init_expression
-- On Lplus reduce production new_init_expression -> member_init_expression
-- On Lorassign reduce production new_init_expression -> member_init_expression
-- On Lneq reduce production new_init_expression -> member_init_expression
-- On Lne reduce production new_init_expression -> member_init_expression
-- On Lminusassign reduce production new_init_expression -> member_init_expression
-- On Lminus reduce production new_init_expression -> member_init_expression
-- On Llshiftassign reduce production new_init_expression -> member_init_expression
-- On Llshift reduce production new_init_expression -> member_init_expression
-- On Lless reduce production new_init_expression -> member_init_expression
-- On Lle reduce production new_init_expression -> member_init_expression
-- On Lincr reduce production new_init_expression -> member_init_expression
-- On Lhook reduce production new_init_expression -> member_init_expression
-- On Lgreater reduce production new_init_expression -> member_init_expression
-- On Lge reduce production new_init_expression -> member_init_expression
-- On Leqq reduce production new_init_expression -> member_init_expression
-- On Leq reduce production new_init_expression -> member_init_expression
-- On Ldecr reduce production new_init_expression -> member_init_expression
-- On Lcomma reduce production new_init_expression -> member_init_expression
-- On Lbit_or reduce production new_init_expression -> member_init_expression
-- On Lbit_and reduce production new_init_expression -> member_init_expression
-- On Lassign reduce production new_init_expression -> member_init_expression
-- On Landassign reduce production new_init_expression -> member_init_expression
-- On KWinstanceof reduce production new_init_expression -> member_init_expression
-- On KWin reduce production new_init_expression -> member_init_expression

State 417:
## Known stack suffix:
## member_init_expression Llbracket
## LR(1) items:
member_init_expression -> member_init_expression Llbracket . expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 418
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 418:
## Known stack suffix:
## member_init_expression Llbracket expression
## LR(1) items:
member_init_expression -> member_init_expression Llbracket expression . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbracket shift to state 419
## Reductions:

State 419:
## Known stack suffix:
## member_init_expression Llbracket expression Lrbracket
## LR(1) items:
member_init_expression -> member_init_expression Llbracket expression Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_init_expression -> member_init_expression Llbracket expression Lrbracket

State 420:
## Known stack suffix:
## member_init_expression Ldot
## LR(1) items:
member_init_expression -> member_init_expression Ldot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression Ldot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression Ldot . Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Llparen shift to state 421
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 424
-- On identifier shift to state 425
-- On attribute_identifier shift to state 115
## Reductions:

State 421:
## Known stack suffix:
## member_init_expression Ldot Llparen
## LR(1) items:
member_init_expression -> member_init_expression Ldot Llparen . expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 422
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 422:
## Known stack suffix:
## member_init_expression Ldot Llparen expression
## LR(1) items:
member_init_expression -> member_init_expression Ldot Llparen expression . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## member_init_expression Ldot Llparen expression Lrparen
## LR(1) items:
member_init_expression -> member_init_expression Ldot Llparen expression Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_init_expression -> member_init_expression Ldot Llparen expression Lrparen

State 424:
## Known stack suffix:
## member_init_expression Ldot property_identifier
## LR(1) items:
member_init_expression -> member_init_expression Ldot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_init_expression -> member_init_expression Ldot property_identifier

State 425:
## Known stack suffix:
## member_init_expression Ldot identifier
## LR(1) items:
member_init_expression -> member_init_expression Ldot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lxor reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lstarassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lstar reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lslashassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lslash reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lsemicolon reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lsc_or reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lsc_and reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lrunsignedshiftassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lrunsignedshift reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lrsignedshiftassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lrsignedshift reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lremassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lrem reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lplusassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lplus reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lorassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lneq reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lne reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lminusassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lminus reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Llshiftassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Llshift reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Llparen reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lless reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lle reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Llbracket reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lincr reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lhook reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lgreater reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lge reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Leqq reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Leq reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Ldot reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Ldecr reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lddot reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lbit_or reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lbit_and reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Lassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On Landassign reduce production member_init_expression -> member_init_expression Ldot identifier
-- On KWinstanceof reduce production member_init_expression -> member_init_expression Ldot identifier
-- On KWin reduce production member_init_expression -> member_init_expression Ldot identifier

State 426:
## Known stack suffix:
## member_init_expression Lddot
## LR(1) items:
member_init_expression -> member_init_expression Lddot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_init_expression -> member_init_expression Lddot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 427
-- On identifier shift to state 428
-- On attribute_identifier shift to state 115
## Reductions:

State 427:
## Known stack suffix:
## member_init_expression Lddot property_identifier
## LR(1) items:
member_init_expression -> member_init_expression Lddot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_init_expression -> member_init_expression Lddot property_identifier

State 428:
## Known stack suffix:
## member_init_expression Lddot identifier
## LR(1) items:
member_init_expression -> member_init_expression Lddot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lxor reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lstarassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lstar reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lslashassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lslash reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lsemicolon reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lsc_or reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lsc_and reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lrunsignedshiftassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lrunsignedshift reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lrsignedshiftassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lrsignedshift reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lremassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lrem reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lplusassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lplus reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lorassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lneq reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lne reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lminusassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lminus reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Llshiftassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Llshift reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Llparen reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lless reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lle reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Llbracket reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lincr reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lhook reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lgreater reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lge reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Leqq reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Leq reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Ldot reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Ldecr reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lddot reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lbit_or reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lbit_and reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Lassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On Landassign reduce production member_init_expression -> member_init_expression Lddot identifier
-- On KWinstanceof reduce production member_init_expression -> member_init_expression Lddot identifier
-- On KWin reduce production member_init_expression -> member_init_expression Lddot identifier

State 429:
## Known stack suffix:
## member_init_expression arguments
## LR(1) items:
call_init_expression -> member_init_expression arguments . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_init_expression -> member_init_expression arguments

State 430:
## Known stack suffix:
## logical_or_init_expression
## LR(1) items:
conditional_init_expression -> logical_or_init_expression . [ Lsemicolon Lcomma ]
conditional_init_expression -> logical_or_init_expression . Lhook assignment_expression Lcolon assignment_expression [ Lsemicolon Lcomma ]
logical_or_init_expression -> logical_or_init_expression . Lsc_or logical_and_expression [ Lsemicolon Lsc_or Lhook Lcomma ]
## Transitions:
-- On Lsc_or shift to state 431
-- On Lhook shift to state 433
## Reductions:
-- On Lsemicolon reduce production conditional_init_expression -> logical_or_init_expression
-- On Lcomma reduce production conditional_init_expression -> logical_or_init_expression

State 431:
## Known stack suffix:
## logical_or_init_expression Lsc_or
## LR(1) items:
logical_or_init_expression -> logical_or_init_expression Lsc_or . logical_and_expression [ Lsemicolon Lsc_or Lhook Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_and_expression shift to state 432
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 432:
## Known stack suffix:
## logical_or_init_expression Lsc_or logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . Lsc_and bitwise_or_expression [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma ]
logical_or_init_expression -> logical_or_init_expression Lsc_or logical_and_expression . [ Lsemicolon Lsc_or Lhook Lcomma ]
## Transitions:
-- On Lsc_and shift to state 108
## Reductions:
-- On Lsemicolon reduce production logical_or_init_expression -> logical_or_init_expression Lsc_or logical_and_expression
-- On Lsc_or reduce production logical_or_init_expression -> logical_or_init_expression Lsc_or logical_and_expression
-- On Lhook reduce production logical_or_init_expression -> logical_or_init_expression Lsc_or logical_and_expression
-- On Lcomma reduce production logical_or_init_expression -> logical_or_init_expression Lsc_or logical_and_expression

State 433:
## Known stack suffix:
## logical_or_init_expression Lhook
## LR(1) items:
conditional_init_expression -> logical_or_init_expression Lhook . assignment_expression Lcolon assignment_expression [ Lsemicolon Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 434
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 434:
## Known stack suffix:
## logical_or_init_expression Lhook assignment_expression
## LR(1) items:
conditional_init_expression -> logical_or_init_expression Lhook assignment_expression . Lcolon assignment_expression [ Lsemicolon Lcomma ]
## Transitions:
-- On Lcolon shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## logical_or_init_expression Lhook assignment_expression Lcolon
## LR(1) items:
conditional_init_expression -> logical_or_init_expression Lhook assignment_expression Lcolon . assignment_expression [ Lsemicolon Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 436
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 436:
## Known stack suffix:
## logical_or_init_expression Lhook assignment_expression Lcolon assignment_expression
## LR(1) items:
conditional_init_expression -> logical_or_init_expression Lhook assignment_expression Lcolon assignment_expression . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_init_expression -> logical_or_init_expression Lhook assignment_expression Lcolon assignment_expression

State 437:
## Known stack suffix:
## logical_and_init_expression
## LR(1) items:
logical_and_init_expression -> logical_and_init_expression . Lsc_and bitwise_or_expression [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma ]
logical_or_init_expression -> logical_and_init_expression . [ Lsemicolon Lsc_or Lhook Lcomma ]
## Transitions:
-- On Lsc_and shift to state 438
## Reductions:
-- On Lsemicolon reduce production logical_or_init_expression -> logical_and_init_expression
-- On Lsc_or reduce production logical_or_init_expression -> logical_and_init_expression
-- On Lhook reduce production logical_or_init_expression -> logical_and_init_expression
-- On Lcomma reduce production logical_or_init_expression -> logical_and_init_expression

State 438:
## Known stack suffix:
## logical_and_init_expression Lsc_and
## LR(1) items:
logical_and_init_expression -> logical_and_init_expression Lsc_and . bitwise_or_expression [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 439
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 439:
## Known stack suffix:
## logical_and_init_expression Lsc_and bitwise_or_expression
## LR(1) items:
bitwise_or_expression -> bitwise_or_expression . Lbit_or bitwise_xor_expression [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
logical_and_init_expression -> logical_and_init_expression Lsc_and bitwise_or_expression . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma ]
## Transitions:
-- On Lbit_or shift to state 147
## Reductions:
-- On Lsemicolon reduce production logical_and_init_expression -> logical_and_init_expression Lsc_and bitwise_or_expression
-- On Lsc_or reduce production logical_and_init_expression -> logical_and_init_expression Lsc_and bitwise_or_expression
-- On Lsc_and reduce production logical_and_init_expression -> logical_and_init_expression Lsc_and bitwise_or_expression
-- On Lhook reduce production logical_and_init_expression -> logical_and_init_expression Lsc_and bitwise_or_expression
-- On Lcomma reduce production logical_and_init_expression -> logical_and_init_expression Lsc_and bitwise_or_expression

State 440:
## Known stack suffix:
## literal
## LR(1) items:
primary_init_expression -> literal . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_init_expression -> literal

State 441:
## Known stack suffix:
## left_hand_side_init_expression
## LR(1) items:
assignment_init_expression -> left_hand_side_init_expression . assignment_operator assignment_expression [ Lsemicolon Lcomma ]
postfix_init_expression -> left_hand_side_init_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
postfix_init_expression -> left_hand_side_init_expression . Lincr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
postfix_init_expression -> left_hand_side_init_expression . Ldecr [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lxorassign shift to state 154
-- On Lstarassign shift to state 155
-- On Lslashassign shift to state 156
-- On Lrunsignedshiftassign shift to state 157
-- On Lrsignedshiftassign shift to state 158
-- On Lremassign shift to state 159
-- On Lplusassign shift to state 160
-- On Lorassign shift to state 161
-- On Lminusassign shift to state 162
-- On Llshiftassign shift to state 163
-- On Lincr shift to state 442
-- On Ldecr shift to state 443
-- On Lassign shift to state 164
-- On Landassign shift to state 165
-- On assignment_operator shift to state 444
## Reductions:
-- On Lxor reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lstar reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lslash reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lsemicolon reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lsc_or reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lsc_and reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lrunsignedshift reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lrsignedshift reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lrem reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lplus reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lneq reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lne reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lminus reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Llshift reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lless reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lle reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lhook reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lgreater reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lge reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Leqq reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Leq reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lcomma reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lbit_or reduce production postfix_init_expression -> left_hand_side_init_expression
-- On Lbit_and reduce production postfix_init_expression -> left_hand_side_init_expression
-- On KWinstanceof reduce production postfix_init_expression -> left_hand_side_init_expression
-- On KWin reduce production postfix_init_expression -> left_hand_side_init_expression

State 442:
## Known stack suffix:
## left_hand_side_init_expression Lincr
## LR(1) items:
postfix_init_expression -> left_hand_side_init_expression Lincr . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_init_expression -> left_hand_side_init_expression Lincr

State 443:
## Known stack suffix:
## left_hand_side_init_expression Ldecr
## LR(1) items:
postfix_init_expression -> left_hand_side_init_expression Ldecr . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_init_expression -> left_hand_side_init_expression Ldecr

State 444:
## Known stack suffix:
## left_hand_side_init_expression assignment_operator
## LR(1) items:
assignment_init_expression -> left_hand_side_init_expression assignment_operator . assignment_expression [ Lsemicolon Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 445
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 445:
## Known stack suffix:
## left_hand_side_init_expression assignment_operator assignment_expression
## LR(1) items:
assignment_init_expression -> left_hand_side_init_expression assignment_operator assignment_expression . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_init_expression -> left_hand_side_init_expression assignment_operator assignment_expression

State 446:
## Known stack suffix:
## labelled_statement
## LR(1) items:
statement -> labelled_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> labelled_statement

State 447:
## Known stack suffix:
## iteration_statement
## LR(1) items:
statement -> iteration_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> iteration_statement

State 448:
## Known stack suffix:
## init_expression
## LR(1) items:
expression_statement -> init_expression . Lsemicolon [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lsemicolon shift to state 449
## Reductions:

State 449:
## Known stack suffix:
## init_expression Lsemicolon
## LR(1) items:
expression_statement -> init_expression Lsemicolon . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_statement -> init_expression Lsemicolon

State 450:
## Known stack suffix:
## if_statement
## LR(1) items:
statement -> if_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> if_statement

State 451:
## Known stack suffix:
## identifier
## LR(1) items:
labelled_statement -> identifier . Lcolon statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
primary_init_expression -> identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lcolon shift to state 452
## Reductions:
-- On Lxorassign reduce production primary_init_expression -> identifier
-- On Lxor reduce production primary_init_expression -> identifier
-- On Lstarassign reduce production primary_init_expression -> identifier
-- On Lstar reduce production primary_init_expression -> identifier
-- On Lslashassign reduce production primary_init_expression -> identifier
-- On Lslash reduce production primary_init_expression -> identifier
-- On Lsemicolon reduce production primary_init_expression -> identifier
-- On Lsc_or reduce production primary_init_expression -> identifier
-- On Lsc_and reduce production primary_init_expression -> identifier
-- On Lrunsignedshiftassign reduce production primary_init_expression -> identifier
-- On Lrunsignedshift reduce production primary_init_expression -> identifier
-- On Lrsignedshiftassign reduce production primary_init_expression -> identifier
-- On Lrsignedshift reduce production primary_init_expression -> identifier
-- On Lremassign reduce production primary_init_expression -> identifier
-- On Lrem reduce production primary_init_expression -> identifier
-- On Lplusassign reduce production primary_init_expression -> identifier
-- On Lplus reduce production primary_init_expression -> identifier
-- On Lorassign reduce production primary_init_expression -> identifier
-- On Lneq reduce production primary_init_expression -> identifier
-- On Lne reduce production primary_init_expression -> identifier
-- On Lminusassign reduce production primary_init_expression -> identifier
-- On Lminus reduce production primary_init_expression -> identifier
-- On Llshiftassign reduce production primary_init_expression -> identifier
-- On Llshift reduce production primary_init_expression -> identifier
-- On Llparen reduce production primary_init_expression -> identifier
-- On Lless reduce production primary_init_expression -> identifier
-- On Lle reduce production primary_init_expression -> identifier
-- On Llbracket reduce production primary_init_expression -> identifier
-- On Lincr reduce production primary_init_expression -> identifier
-- On Lhook reduce production primary_init_expression -> identifier
-- On Lgreater reduce production primary_init_expression -> identifier
-- On Lge reduce production primary_init_expression -> identifier
-- On Leqq reduce production primary_init_expression -> identifier
-- On Leq reduce production primary_init_expression -> identifier
-- On Ldot reduce production primary_init_expression -> identifier
-- On Ldecr reduce production primary_init_expression -> identifier
-- On Lddot reduce production primary_init_expression -> identifier
-- On Lcomma reduce production primary_init_expression -> identifier
-- On Lbit_or reduce production primary_init_expression -> identifier
-- On Lbit_and reduce production primary_init_expression -> identifier
-- On Lassign reduce production primary_init_expression -> identifier
-- On Landassign reduce production primary_init_expression -> identifier
-- On KWinstanceof reduce production primary_init_expression -> identifier
-- On KWin reduce production primary_init_expression -> identifier

State 452:
## Known stack suffix:
## identifier Lcolon
## LR(1) items:
labelled_statement -> identifier Lcolon . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 453
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 453:
## Known stack suffix:
## identifier Lcolon statement
## LR(1) items:
labelled_statement -> identifier Lcolon statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labelled_statement -> identifier Lcolon statement

State 454:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement -> expression_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> expression_statement

State 455:
## Known stack suffix:
## equality_init_expression
## LR(1) items:
bitwise_and_init_expression -> equality_init_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or Lbit_and ]
equality_init_expression -> equality_init_expression . Leq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
equality_init_expression -> equality_init_expression . Lne relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
equality_init_expression -> equality_init_expression . Leqq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
equality_init_expression -> equality_init_expression . Lneq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
## Transitions:
-- On Lneq shift to state 456
-- On Lne shift to state 458
-- On Leqq shift to state 460
-- On Leq shift to state 462
## Reductions:
-- On Lxor reduce production bitwise_and_init_expression -> equality_init_expression
-- On Lsemicolon reduce production bitwise_and_init_expression -> equality_init_expression
-- On Lsc_or reduce production bitwise_and_init_expression -> equality_init_expression
-- On Lsc_and reduce production bitwise_and_init_expression -> equality_init_expression
-- On Lhook reduce production bitwise_and_init_expression -> equality_init_expression
-- On Lcomma reduce production bitwise_and_init_expression -> equality_init_expression
-- On Lbit_or reduce production bitwise_and_init_expression -> equality_init_expression
-- On Lbit_and reduce production bitwise_and_init_expression -> equality_init_expression

State 456:
## Known stack suffix:
## equality_init_expression Lneq
## LR(1) items:
equality_init_expression -> equality_init_expression Lneq . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 457
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 457:
## Known stack suffix:
## equality_init_expression Lneq relational_expression
## LR(1) items:
equality_init_expression -> equality_init_expression Lneq relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lsemicolon reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lsc_or reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lsc_and reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lneq reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lne reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lhook reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Leqq reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Leq reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lcomma reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lbit_or reduce production equality_init_expression -> equality_init_expression Lneq relational_expression
-- On Lbit_and reduce production equality_init_expression -> equality_init_expression Lneq relational_expression

State 458:
## Known stack suffix:
## equality_init_expression Lne
## LR(1) items:
equality_init_expression -> equality_init_expression Lne . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 459
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 459:
## Known stack suffix:
## equality_init_expression Lne relational_expression
## LR(1) items:
equality_init_expression -> equality_init_expression Lne relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lsemicolon reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lsc_or reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lsc_and reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lneq reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lne reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lhook reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Leqq reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Leq reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lcomma reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lbit_or reduce production equality_init_expression -> equality_init_expression Lne relational_expression
-- On Lbit_and reduce production equality_init_expression -> equality_init_expression Lne relational_expression

State 460:
## Known stack suffix:
## equality_init_expression Leqq
## LR(1) items:
equality_init_expression -> equality_init_expression Leqq . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 461
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 461:
## Known stack suffix:
## equality_init_expression Leqq relational_expression
## LR(1) items:
equality_init_expression -> equality_init_expression Leqq relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lsemicolon reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lsc_or reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lsc_and reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lneq reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lne reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lhook reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Leqq reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Leq reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lcomma reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lbit_or reduce production equality_init_expression -> equality_init_expression Leqq relational_expression
-- On Lbit_and reduce production equality_init_expression -> equality_init_expression Leqq relational_expression

State 462:
## Known stack suffix:
## equality_init_expression Leq
## LR(1) items:
equality_init_expression -> equality_init_expression Leq . relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 463
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 463:
## Known stack suffix:
## equality_init_expression Leq relational_expression
## LR(1) items:
equality_init_expression -> equality_init_expression Leq relational_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
relational_expression -> relational_expression . Lless shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lgreater shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lle shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . Lge shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWinstanceof shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
relational_expression -> relational_expression . KWin shift_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lless shift to state 92
-- On Lle shift to state 112
-- On Lgreater shift to state 127
-- On Lge shift to state 129
-- On KWinstanceof shift to state 131
-- On KWin shift to state 133
## Reductions:
-- On Lxor reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lsemicolon reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lsc_or reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lsc_and reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lneq reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lne reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lhook reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Leqq reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Leq reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lcomma reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lbit_or reduce production equality_init_expression -> equality_init_expression Leq relational_expression
-- On Lbit_and reduce production equality_init_expression -> equality_init_expression Leq relational_expression

State 464:
## Known stack suffix:
## empty_statement
## LR(1) items:
statement -> empty_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> empty_statement

State 465:
## Known stack suffix:
## default_xml_namespace_statement
## LR(1) items:
statement -> default_xml_namespace_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> default_xml_namespace_statement

State 466:
## Known stack suffix:
## continue_statement
## LR(1) items:
statement -> continue_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> continue_statement

State 467:
## Known stack suffix:
## conditional_init_expression
## LR(1) items:
assignment_init_expression -> conditional_init_expression . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_init_expression -> conditional_init_expression

State 468:
## Known stack suffix:
## call_init_expression
## LR(1) items:
call_init_expression -> call_init_expression . arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression . Ldot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression . Ldot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression . Lddot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression . Lddot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression . Ldot Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
left_hand_side_init_expression -> call_init_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 89
-- On Llbracket shift to state 469
-- On Ldot shift to state 472
-- On Lddot shift to state 478
-- On arguments shift to state 481
## Reductions:
-- On Lxorassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lxor reduce production left_hand_side_init_expression -> call_init_expression
-- On Lstarassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lstar reduce production left_hand_side_init_expression -> call_init_expression
-- On Lslashassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lslash reduce production left_hand_side_init_expression -> call_init_expression
-- On Lsemicolon reduce production left_hand_side_init_expression -> call_init_expression
-- On Lsc_or reduce production left_hand_side_init_expression -> call_init_expression
-- On Lsc_and reduce production left_hand_side_init_expression -> call_init_expression
-- On Lrunsignedshiftassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lrunsignedshift reduce production left_hand_side_init_expression -> call_init_expression
-- On Lrsignedshiftassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lrsignedshift reduce production left_hand_side_init_expression -> call_init_expression
-- On Lremassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lrem reduce production left_hand_side_init_expression -> call_init_expression
-- On Lplusassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lplus reduce production left_hand_side_init_expression -> call_init_expression
-- On Lorassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lneq reduce production left_hand_side_init_expression -> call_init_expression
-- On Lne reduce production left_hand_side_init_expression -> call_init_expression
-- On Lminusassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Lminus reduce production left_hand_side_init_expression -> call_init_expression
-- On Llshiftassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Llshift reduce production left_hand_side_init_expression -> call_init_expression
-- On Lless reduce production left_hand_side_init_expression -> call_init_expression
-- On Lle reduce production left_hand_side_init_expression -> call_init_expression
-- On Lincr reduce production left_hand_side_init_expression -> call_init_expression
-- On Lhook reduce production left_hand_side_init_expression -> call_init_expression
-- On Lgreater reduce production left_hand_side_init_expression -> call_init_expression
-- On Lge reduce production left_hand_side_init_expression -> call_init_expression
-- On Leqq reduce production left_hand_side_init_expression -> call_init_expression
-- On Leq reduce production left_hand_side_init_expression -> call_init_expression
-- On Ldecr reduce production left_hand_side_init_expression -> call_init_expression
-- On Lcomma reduce production left_hand_side_init_expression -> call_init_expression
-- On Lbit_or reduce production left_hand_side_init_expression -> call_init_expression
-- On Lbit_and reduce production left_hand_side_init_expression -> call_init_expression
-- On Lassign reduce production left_hand_side_init_expression -> call_init_expression
-- On Landassign reduce production left_hand_side_init_expression -> call_init_expression
-- On KWinstanceof reduce production left_hand_side_init_expression -> call_init_expression
-- On KWin reduce production left_hand_side_init_expression -> call_init_expression

State 469:
## Known stack suffix:
## call_init_expression Llbracket
## LR(1) items:
call_init_expression -> call_init_expression Llbracket . expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 470
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 470:
## Known stack suffix:
## call_init_expression Llbracket expression
## LR(1) items:
call_init_expression -> call_init_expression Llbracket expression . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbracket shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## call_init_expression Llbracket expression Lrbracket
## LR(1) items:
call_init_expression -> call_init_expression Llbracket expression Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_init_expression -> call_init_expression Llbracket expression Lrbracket

State 472:
## Known stack suffix:
## call_init_expression Ldot
## LR(1) items:
call_init_expression -> call_init_expression Ldot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression Ldot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression Ldot . Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Llparen shift to state 473
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 476
-- On identifier shift to state 477
-- On attribute_identifier shift to state 115
## Reductions:

State 473:
## Known stack suffix:
## call_init_expression Ldot Llparen
## LR(1) items:
call_init_expression -> call_init_expression Ldot Llparen . expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 474
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 474:
## Known stack suffix:
## call_init_expression Ldot Llparen expression
## LR(1) items:
call_init_expression -> call_init_expression Ldot Llparen expression . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## call_init_expression Ldot Llparen expression Lrparen
## LR(1) items:
call_init_expression -> call_init_expression Ldot Llparen expression Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_init_expression -> call_init_expression Ldot Llparen expression Lrparen

State 476:
## Known stack suffix:
## call_init_expression Ldot property_identifier
## LR(1) items:
call_init_expression -> call_init_expression Ldot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_init_expression -> call_init_expression Ldot property_identifier

State 477:
## Known stack suffix:
## call_init_expression Ldot identifier
## LR(1) items:
call_init_expression -> call_init_expression Ldot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lxor reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lstarassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lstar reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lslashassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lslash reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lsemicolon reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lsc_or reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lsc_and reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lrunsignedshiftassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lrunsignedshift reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lrsignedshiftassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lrsignedshift reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lremassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lrem reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lplusassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lplus reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lorassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lneq reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lne reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lminusassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lminus reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Llshiftassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Llshift reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Llparen reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lless reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lle reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Llbracket reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lincr reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lhook reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lgreater reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lge reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Leqq reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Leq reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Ldot reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Ldecr reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lddot reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lbit_or reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lbit_and reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Lassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On Landassign reduce production call_init_expression -> call_init_expression Ldot identifier
-- On KWinstanceof reduce production call_init_expression -> call_init_expression Ldot identifier
-- On KWin reduce production call_init_expression -> call_init_expression Ldot identifier

State 478:
## Known stack suffix:
## call_init_expression Lddot
## LR(1) items:
call_init_expression -> call_init_expression Lddot . identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
call_init_expression -> call_init_expression Lddot . property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 17
-- On Lident shift to state 29
-- On Lat shift to state 43
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 479
-- On identifier shift to state 480
-- On attribute_identifier shift to state 115
## Reductions:

State 479:
## Known stack suffix:
## call_init_expression Lddot property_identifier
## LR(1) items:
call_init_expression -> call_init_expression Lddot property_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_init_expression -> call_init_expression Lddot property_identifier

State 480:
## Known stack suffix:
## call_init_expression Lddot identifier
## LR(1) items:
call_init_expression -> call_init_expression Lddot identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
property_selector -> identifier . [ Ldcolon ]
## Transitions:
## Reductions:
-- On Lxorassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lxor reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lstarassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lstar reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lslashassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lslash reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lsemicolon reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lsc_or reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lsc_and reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lrunsignedshiftassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lrunsignedshift reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lrsignedshiftassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lrsignedshift reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lremassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lrem reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lplusassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lplus reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lorassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lneq reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lne reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lminusassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lminus reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Llshiftassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Llshift reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Llparen reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lless reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lle reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Llbracket reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lincr reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lhook reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lgreater reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lge reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Leqq reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Leq reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Ldot reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Ldecr reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lddot reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Ldcolon reduce production property_selector -> identifier
-- On Lcomma reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lbit_or reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lbit_and reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Lassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On Landassign reduce production call_init_expression -> call_init_expression Lddot identifier
-- On KWinstanceof reduce production call_init_expression -> call_init_expression Lddot identifier
-- On KWin reduce production call_init_expression -> call_init_expression Lddot identifier

State 481:
## Known stack suffix:
## call_init_expression arguments
## LR(1) items:
call_init_expression -> call_init_expression arguments . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_init_expression -> call_init_expression arguments

State 482:
## Known stack suffix:
## break_statement
## LR(1) items:
statement -> break_statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> break_statement

State 483:
## Known stack suffix:
## block
## LR(1) items:
statement -> block . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> block

State 484:
## Known stack suffix:
## bitwise_xor_init_expression
## LR(1) items:
bitwise_or_init_expression -> bitwise_xor_init_expression . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
bitwise_xor_init_expression -> bitwise_xor_init_expression . Lxor bitwise_and_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
## Transitions:
-- On Lxor shift to state 485
## Reductions:
-- On Lsemicolon reduce production bitwise_or_init_expression -> bitwise_xor_init_expression
-- On Lsc_or reduce production bitwise_or_init_expression -> bitwise_xor_init_expression
-- On Lsc_and reduce production bitwise_or_init_expression -> bitwise_xor_init_expression
-- On Lhook reduce production bitwise_or_init_expression -> bitwise_xor_init_expression
-- On Lcomma reduce production bitwise_or_init_expression -> bitwise_xor_init_expression
-- On Lbit_or reduce production bitwise_or_init_expression -> bitwise_xor_init_expression

State 485:
## Known stack suffix:
## bitwise_xor_init_expression Lxor
## LR(1) items:
bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor . bitwise_and_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_and_expression shift to state 486
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 486:
## Known stack suffix:
## bitwise_xor_init_expression Lxor bitwise_and_expression
## LR(1) items:
bitwise_and_expression -> bitwise_and_expression . Lbit_and equality_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or Lbit_and ]
bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
## Transitions:
-- On Lbit_and shift to state 144
## Reductions:
-- On Lxor reduce production bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression
-- On Lsemicolon reduce production bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression
-- On Lsc_or reduce production bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression
-- On Lsc_and reduce production bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression
-- On Lhook reduce production bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression
-- On Lcomma reduce production bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression
-- On Lbit_or reduce production bitwise_xor_init_expression -> bitwise_xor_init_expression Lxor bitwise_and_expression

State 487:
## Known stack suffix:
## bitwise_or_init_expression
## LR(1) items:
bitwise_or_init_expression -> bitwise_or_init_expression . Lbit_or bitwise_xor_expression [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
logical_and_init_expression -> bitwise_or_init_expression . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma ]
## Transitions:
-- On Lbit_or shift to state 488
## Reductions:
-- On Lsemicolon reduce production logical_and_init_expression -> bitwise_or_init_expression
-- On Lsc_or reduce production logical_and_init_expression -> bitwise_or_init_expression
-- On Lsc_and reduce production logical_and_init_expression -> bitwise_or_init_expression
-- On Lhook reduce production logical_and_init_expression -> bitwise_or_init_expression
-- On Lcomma reduce production logical_and_init_expression -> bitwise_or_init_expression

State 488:
## Known stack suffix:
## bitwise_or_init_expression Lbit_or
## LR(1) items:
bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or . bitwise_xor_expression [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 489
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 489:
## Known stack suffix:
## bitwise_or_init_expression Lbit_or bitwise_xor_expression
## LR(1) items:
bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or bitwise_xor_expression . [ Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
bitwise_xor_expression -> bitwise_xor_expression . Lxor bitwise_and_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
## Transitions:
-- On Lxor shift to state 142
## Reductions:
-- On Lsemicolon reduce production bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or bitwise_xor_expression
-- On Lsc_or reduce production bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or bitwise_xor_expression
-- On Lsc_and reduce production bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or bitwise_xor_expression
-- On Lhook reduce production bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or bitwise_xor_expression
-- On Lcomma reduce production bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or bitwise_xor_expression
-- On Lbit_or reduce production bitwise_or_init_expression -> bitwise_or_init_expression Lbit_or bitwise_xor_expression

State 490:
## Known stack suffix:
## bitwise_and_init_expression
## LR(1) items:
bitwise_and_init_expression -> bitwise_and_init_expression . Lbit_and equality_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or Lbit_and ]
bitwise_xor_init_expression -> bitwise_and_init_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or ]
## Transitions:
-- On Lbit_and shift to state 491
## Reductions:
-- On Lxor reduce production bitwise_xor_init_expression -> bitwise_and_init_expression
-- On Lsemicolon reduce production bitwise_xor_init_expression -> bitwise_and_init_expression
-- On Lsc_or reduce production bitwise_xor_init_expression -> bitwise_and_init_expression
-- On Lsc_and reduce production bitwise_xor_init_expression -> bitwise_and_init_expression
-- On Lhook reduce production bitwise_xor_init_expression -> bitwise_and_init_expression
-- On Lcomma reduce production bitwise_xor_init_expression -> bitwise_and_init_expression
-- On Lbit_or reduce production bitwise_xor_init_expression -> bitwise_and_init_expression

State 491:
## Known stack suffix:
## bitwise_and_init_expression Lbit_and
## LR(1) items:
bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and . equality_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or Lbit_and ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 492
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 492:
## Known stack suffix:
## bitwise_and_init_expression Lbit_and equality_expression
## LR(1) items:
bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or Lbit_and ]
equality_expression -> equality_expression . Leq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
equality_expression -> equality_expression . Lne relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
equality_expression -> equality_expression . Leqq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
equality_expression -> equality_expression . Lneq relational_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and ]
## Transitions:
-- On Lneq shift to state 110
-- On Lne shift to state 135
-- On Leqq shift to state 137
-- On Leq shift to state 139
## Reductions:
-- On Lxor reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression
-- On Lsemicolon reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression
-- On Lsc_or reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression
-- On Lsc_and reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression
-- On Lhook reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression
-- On Lcomma reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression
-- On Lbit_or reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression
-- On Lbit_and reduce production bitwise_and_init_expression -> bitwise_and_init_expression Lbit_and equality_expression

State 493:
## Known stack suffix:
## assignment_init_expression
## LR(1) items:
sequence_of_init_expression -> assignment_init_expression . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequence_of_init_expression -> assignment_init_expression

State 494:
## Known stack suffix:
## array_literal
## LR(1) items:
primary_init_expression -> array_literal . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_init_expression -> array_literal

State 495:
## Known stack suffix:
## additive_init_expression
## LR(1) items:
additive_init_expression -> additive_init_expression . Lplus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
additive_init_expression -> additive_init_expression . Lminus multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
shift_init_expression -> additive_init_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lplus shift to state 496
-- On Lminus shift to state 498
## Reductions:
-- On Lxor reduce production shift_init_expression -> additive_init_expression
-- On Lsemicolon reduce production shift_init_expression -> additive_init_expression
-- On Lsc_or reduce production shift_init_expression -> additive_init_expression
-- On Lsc_and reduce production shift_init_expression -> additive_init_expression
-- On Lrunsignedshift reduce production shift_init_expression -> additive_init_expression
-- On Lrsignedshift reduce production shift_init_expression -> additive_init_expression
-- On Lneq reduce production shift_init_expression -> additive_init_expression
-- On Lne reduce production shift_init_expression -> additive_init_expression
-- On Llshift reduce production shift_init_expression -> additive_init_expression
-- On Lless reduce production shift_init_expression -> additive_init_expression
-- On Lle reduce production shift_init_expression -> additive_init_expression
-- On Lhook reduce production shift_init_expression -> additive_init_expression
-- On Lgreater reduce production shift_init_expression -> additive_init_expression
-- On Lge reduce production shift_init_expression -> additive_init_expression
-- On Leqq reduce production shift_init_expression -> additive_init_expression
-- On Leq reduce production shift_init_expression -> additive_init_expression
-- On Lcomma reduce production shift_init_expression -> additive_init_expression
-- On Lbit_or reduce production shift_init_expression -> additive_init_expression
-- On Lbit_and reduce production shift_init_expression -> additive_init_expression
-- On KWinstanceof reduce production shift_init_expression -> additive_init_expression
-- On KWin reduce production shift_init_expression -> additive_init_expression

State 496:
## Known stack suffix:
## additive_init_expression Lplus
## LR(1) items:
additive_init_expression -> additive_init_expression Lplus . multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 497
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 497:
## Known stack suffix:
## additive_init_expression Lplus multiplicative_expression
## LR(1) items:
additive_init_expression -> additive_init_expression Lplus multiplicative_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lstar unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lslash unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lrem unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 86
-- On Lslash shift to state 120
-- On Lrem shift to state 122
## Reductions:
-- On Lxor reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lsemicolon reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lsc_or reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lsc_and reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lrunsignedshift reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lrsignedshift reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lplus reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lneq reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lne reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lminus reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Llshift reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lless reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lle reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lhook reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lgreater reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lge reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Leqq reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Leq reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lcomma reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lbit_or reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On Lbit_and reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On KWinstanceof reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression
-- On KWin reduce production additive_init_expression -> additive_init_expression Lplus multiplicative_expression

State 498:
## Known stack suffix:
## additive_init_expression Lminus
## LR(1) items:
additive_init_expression -> additive_init_expression Lminus . multiplicative_expression [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 499
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 96
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 499:
## Known stack suffix:
## additive_init_expression Lminus multiplicative_expression
## LR(1) items:
additive_init_expression -> additive_init_expression Lminus multiplicative_expression . [ Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lstar unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lslash unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
multiplicative_expression -> multiplicative_expression . Lrem unary_expression [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
-- On Lstar shift to state 86
-- On Lslash shift to state 120
-- On Lrem shift to state 122
## Reductions:
-- On Lxor reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lsemicolon reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lsc_or reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lsc_and reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lrunsignedshift reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lrsignedshift reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lplus reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lneq reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lne reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lminus reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Llshift reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lless reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lle reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lhook reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lgreater reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lge reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Leqq reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Leq reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lcomma reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lbit_or reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On Lbit_and reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On KWinstanceof reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression
-- On KWin reduce production additive_init_expression -> additive_init_expression Lminus multiplicative_expression

State 500:
## Known stack suffix:
## KWfor Llparen for_bracket Lrparen statement
## LR(1) items:
iteration_statement -> KWfor Llparen for_bracket Lrparen statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KWfor Llparen for_bracket Lrparen statement

State 501:
## Known stack suffix:
## expression_no_in
## LR(1) items:
optional_expression_no_in -> expression_no_in . [ Lsemicolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_expression_no_in -> expression_no_in

State 502:
## Known stack suffix:
## assignment_expression_no_in
## LR(1) items:
sequence_of_expression_no_in -> assignment_expression_no_in . [ Lsemicolon Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequence_of_expression_no_in -> assignment_expression_no_in

State 503:
## Known stack suffix:
## KWfor CKWeach
## LR(1) items:
iteration_statement -> KWfor CKWeach . Llparen left_hand_side_expression KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
iteration_statement -> KWfor CKWeach . Llparen KWvar variable_declaration_no_in KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 504
## Reductions:

State 504:
## Known stack suffix:
## KWfor CKWeach Llparen
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen . left_hand_side_expression KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
iteration_statement -> KWfor CKWeach Llparen . KWvar variable_declaration_no_in KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lnull shift to state 20
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvar shift to state 505
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On member_expression shift to state 88
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 511
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On call_expression shift to state 101
-- On attribute_identifier shift to state 115
-- On array_literal shift to state 116
## Reductions:

State 505:
## Known stack suffix:
## KWfor CKWeach Llparen KWvar
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen KWvar . variable_declaration_no_in KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On variable_declaration_no_in shift to state 506
-- On identifier shift to state 294
## Reductions:

State 506:
## Known stack suffix:
## KWfor CKWeach Llparen KWvar variable_declaration_no_in
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen KWvar variable_declaration_no_in . KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On KWin shift to state 507
## Reductions:

State 507:
## Known stack suffix:
## KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin . expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 508
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 508:
## Known stack suffix:
## KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin expression
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin expression . Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 509
## Reductions:

State 509:
## Known stack suffix:
## KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin expression Lrparen
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin expression Lrparen . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 510
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 510:
## Known stack suffix:
## KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin expression Lrparen statement
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin expression Lrparen statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KWfor CKWeach Llparen KWvar variable_declaration_no_in KWin expression Lrparen statement

State 511:
## Known stack suffix:
## KWfor CKWeach Llparen left_hand_side_expression
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen left_hand_side_expression . KWin expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On KWin shift to state 512
## Reductions:

State 512:
## Known stack suffix:
## KWfor CKWeach Llparen left_hand_side_expression KWin
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen left_hand_side_expression KWin . expression Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 513
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 513:
## Known stack suffix:
## KWfor CKWeach Llparen left_hand_side_expression KWin expression
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen left_hand_side_expression KWin expression . Lrparen statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 514
## Reductions:

State 514:
## Known stack suffix:
## KWfor CKWeach Llparen left_hand_side_expression KWin expression Lrparen
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen left_hand_side_expression KWin expression Lrparen . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 515
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 515:
## Known stack suffix:
## KWfor CKWeach Llparen left_hand_side_expression KWin expression Lrparen statement
## LR(1) items:
iteration_statement -> KWfor CKWeach Llparen left_hand_side_expression KWin expression Lrparen statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KWfor CKWeach Llparen left_hand_side_expression KWin expression Lrparen statement

State 516:
## Known stack suffix:
## KWif Llparen expression Lrparen statement
## LR(1) items:
if_statement -> KWif Llparen expression Lrparen statement . KWelse statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
if_statement -> KWif Llparen expression Lrparen statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On KWelse shift to state 517
## Reductions:
-- On Ltrue reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Ltilde reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lstring reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lsemicolon reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lregexp reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lrbrace reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lplus reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lnull reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lminus reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Llparen reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Llbracket reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Llbrace reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lint reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lincr reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lident reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lfloat reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lfalse reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Leof reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Ldecr reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On Lbang reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On LCcomment reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWwith reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWwhile reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWvoid reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWvar reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWtypeof reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWtry reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWthrow reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWthis reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWswitch reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWreturn reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWnew reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWif reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWfunction reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWfor reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWdo reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWdelete reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWdefault reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWcontinue reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWcase reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On KWbreak reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On CKWxml reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On CKWnamespace reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On CKWeach reduce production if_statement -> KWif Llparen expression Lrparen statement
-- On CKWdefaultxmlnamespace reduce production if_statement -> KWif Llparen expression Lrparen statement

State 517:
## Known stack suffix:
## KWif Llparen expression Lrparen statement KWelse
## LR(1) items:
if_statement -> KWif Llparen expression Lrparen statement KWelse . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 518
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 518:
## Known stack suffix:
## KWif Llparen expression Lrparen statement KWelse statement
## LR(1) items:
if_statement -> KWif Llparen expression Lrparen statement KWelse statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_statement -> KWif Llparen expression Lrparen statement KWelse statement

State 519:
## Known stack suffix:
## statement
## LR(1) items:
non_empty_statement_list -> statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_empty_statement_list -> statement

State 520:
## Known stack suffix:
## KWdefault Lcolon non_empty_statement_list
## LR(1) items:
default_clause -> KWdefault Lcolon non_empty_statement_list . [ Lrbrace KWcase ]
non_empty_statement_list -> non_empty_statement_list . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 521
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:
-- On Lrbrace reduce production default_clause -> KWdefault Lcolon non_empty_statement_list
-- On KWcase reduce production default_clause -> KWdefault Lcolon non_empty_statement_list

State 521:
## Known stack suffix:
## non_empty_statement_list statement
## LR(1) items:
non_empty_statement_list -> non_empty_statement_list statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_empty_statement_list -> non_empty_statement_list statement

State 522:
## Known stack suffix:
## KWcase
## LR(1) items:
case_clause -> KWcase . expression Lcolon [ Lrbrace KWdefault KWcase ]
case_clause -> KWcase . expression Lcolon non_empty_statement_list [ Lrbrace KWdefault KWcase ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 523
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 523:
## Known stack suffix:
## KWcase expression
## LR(1) items:
case_clause -> KWcase expression . Lcolon [ Lrbrace KWdefault KWcase ]
case_clause -> KWcase expression . Lcolon non_empty_statement_list [ Lrbrace KWdefault KWcase ]
## Transitions:
-- On Lcolon shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## KWcase expression Lcolon
## LR(1) items:
case_clause -> KWcase expression Lcolon . [ Lrbrace KWdefault KWcase ]
case_clause -> KWcase expression Lcolon . non_empty_statement_list [ Lrbrace KWdefault KWcase ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 519
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On non_empty_statement_list shift to state 525
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:
-- On Lrbrace reduce production case_clause -> KWcase expression Lcolon
-- On KWdefault reduce production case_clause -> KWcase expression Lcolon
-- On KWcase reduce production case_clause -> KWcase expression Lcolon

State 525:
## Known stack suffix:
## KWcase expression Lcolon non_empty_statement_list
## LR(1) items:
case_clause -> KWcase expression Lcolon non_empty_statement_list . [ Lrbrace KWdefault KWcase ]
non_empty_statement_list -> non_empty_statement_list . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 521
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:
-- On Lrbrace reduce production case_clause -> KWcase expression Lcolon non_empty_statement_list
-- On KWdefault reduce production case_clause -> KWcase expression Lcolon non_empty_statement_list
-- On KWcase reduce production case_clause -> KWcase expression Lcolon non_empty_statement_list

State 526:
## Known stack suffix:
## Llbrace default_clause
## LR(1) items:
case_block -> Llbrace default_clause . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace default_clause . case_clauses Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrbrace shift to state 527
-- On KWcase shift to state 522
-- On case_clauses shift to state 528
-- On case_clause shift to state 531
## Reductions:

State 527:
## Known stack suffix:
## Llbrace default_clause Lrbrace
## LR(1) items:
case_block -> Llbrace default_clause Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> Llbrace default_clause Lrbrace

State 528:
## Known stack suffix:
## Llbrace default_clause case_clauses
## LR(1) items:
case_block -> Llbrace default_clause case_clauses . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_clauses -> case_clauses . case_clause [ Lrbrace KWcase ]
## Transitions:
-- On Lrbrace shift to state 529
-- On KWcase shift to state 522
-- On case_clause shift to state 530
## Reductions:

State 529:
## Known stack suffix:
## Llbrace default_clause case_clauses Lrbrace
## LR(1) items:
case_block -> Llbrace default_clause case_clauses Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> Llbrace default_clause case_clauses Lrbrace

State 530:
## Known stack suffix:
## case_clauses case_clause
## LR(1) items:
case_clauses -> case_clauses case_clause . [ Lrbrace KWdefault KWcase ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_clauses -> case_clauses case_clause

State 531:
## Known stack suffix:
## case_clause
## LR(1) items:
case_clauses -> case_clause . [ Lrbrace KWdefault KWcase ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_clauses -> case_clause

State 532:
## Known stack suffix:
## Llbrace case_clauses
## LR(1) items:
case_block -> Llbrace case_clauses . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace case_clauses . default_clause Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace case_clauses . default_clause case_clauses Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_clauses -> case_clauses . case_clause [ Lrbrace KWdefault KWcase ]
## Transitions:
-- On Lrbrace shift to state 533
-- On KWdefault shift to state 266
-- On KWcase shift to state 522
-- On default_clause shift to state 534
-- On case_clause shift to state 530
## Reductions:

State 533:
## Known stack suffix:
## Llbrace case_clauses Lrbrace
## LR(1) items:
case_block -> Llbrace case_clauses Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> Llbrace case_clauses Lrbrace

State 534:
## Known stack suffix:
## Llbrace case_clauses default_clause
## LR(1) items:
case_block -> Llbrace case_clauses default_clause . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_block -> Llbrace case_clauses default_clause . case_clauses Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrbrace shift to state 535
-- On KWcase shift to state 522
-- On case_clauses shift to state 536
-- On case_clause shift to state 531
## Reductions:

State 535:
## Known stack suffix:
## Llbrace case_clauses default_clause Lrbrace
## LR(1) items:
case_block -> Llbrace case_clauses default_clause Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> Llbrace case_clauses default_clause Lrbrace

State 536:
## Known stack suffix:
## Llbrace case_clauses default_clause case_clauses
## LR(1) items:
case_block -> Llbrace case_clauses default_clause case_clauses . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
case_clauses -> case_clauses . case_clause [ Lrbrace KWcase ]
## Transitions:
-- On Lrbrace shift to state 537
-- On KWcase shift to state 522
-- On case_clause shift to state 530
## Reductions:

State 537:
## Known stack suffix:
## Llbrace case_clauses default_clause case_clauses Lrbrace
## LR(1) items:
case_block -> Llbrace case_clauses default_clause case_clauses Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_block -> Llbrace case_clauses default_clause case_clauses Lrbrace

State 538:
## Known stack suffix:
## KWswitch Llparen expression Lrparen case_block
## LR(1) items:
switch_statement -> KWswitch Llparen expression Lrparen case_block . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_statement -> KWswitch Llparen expression Lrparen case_block

State 539:
## Known stack suffix:
## KWwhile Llparen expression Lrparen statement
## LR(1) items:
iteration_statement -> KWwhile Llparen expression Lrparen statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> KWwhile Llparen expression Lrparen statement

State 540:
## Known stack suffix:
## KWwith Llparen expression Lrparen statement
## LR(1) items:
with_statement -> KWwith Llparen expression Lrparen statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_statement -> KWwith Llparen expression Lrparen statement

State 541:
## Known stack suffix:
## Llbrace optional_statement_list
## LR(1) items:
block -> Llbrace optional_statement_list . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcatch KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrbrace shift to state 542
## Reductions:

State 542:
## Known stack suffix:
## Llbrace optional_statement_list Lrbrace
## LR(1) items:
block -> Llbrace optional_statement_list Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcatch KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> Llbrace optional_statement_list Lrbrace

State 543:
## Known stack suffix:
## non_empty_statement_list
## LR(1) items:
non_empty_statement_list -> non_empty_statement_list . statement [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
optional_statement_list -> non_empty_statement_list . [ Lrbrace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 521
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:
-- On Lrbrace reduce production optional_statement_list -> non_empty_statement_list

State 544:
## Known stack suffix:
## Leof
## LR(1) items:
source_elements -> Leof . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_elements -> Leof

State 545:
## Known stack suffix:
## LCcomment
## LR(1) items:
function_declaration -> LCcomment . KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On KWfunction shift to state 546
## Reductions:

State 546:
## Known stack suffix:
## LCcomment KWfunction
## LR(1) items:
function_declaration -> LCcomment KWfunction . identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 547
## Reductions:

State 547:
## Known stack suffix:
## LCcomment KWfunction identifier
## LR(1) items:
function_declaration -> LCcomment KWfunction identifier . Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen
## LR(1) items:
function_declaration -> LCcomment KWfunction identifier Llparen . formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 48
-- On formal_parameter_list shift to state 549
## Reductions:
-- On Lrparen reduce production formal_parameter_list ->
-- On Lcomma reduce production formal_parameter_list ->

State 549:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list
## LR(1) items:
formal_parameter_list -> formal_parameter_list . Lcomma identifier [ Lrparen Lcomma ]
function_declaration -> LCcomment KWfunction identifier Llparen formal_parameter_list . Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 550
-- On Lcomma shift to state 565
## Reductions:

State 550:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen
## LR(1) items:
function_declaration -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen . Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llbrace shift to state 551
## Reductions:

State 551:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace
## LR(1) items:
function_declaration -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace . function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 567
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 552:
## Known stack suffix:
## KWfunction
## LR(1) items:
function_declaration -> KWfunction . identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 553
## Reductions:

State 553:
## Known stack suffix:
## KWfunction identifier
## LR(1) items:
function_declaration -> KWfunction identifier . Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llparen shift to state 554
## Reductions:

State 554:
## Known stack suffix:
## KWfunction identifier Llparen
## LR(1) items:
function_declaration -> KWfunction identifier Llparen . formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 48
-- On formal_parameter_list shift to state 555
## Reductions:
-- On Lrparen reduce production formal_parameter_list ->
-- On Lcomma reduce production formal_parameter_list ->

State 555:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list
## LR(1) items:
formal_parameter_list -> formal_parameter_list . Lcomma identifier [ Lrparen Lcomma ]
function_declaration -> KWfunction identifier Llparen formal_parameter_list . Lrparen Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrparen shift to state 556
-- On Lcomma shift to state 565
## Reductions:

State 556:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen
## LR(1) items:
function_declaration -> KWfunction identifier Llparen formal_parameter_list Lrparen . Llbrace function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Llbrace shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace
## LR(1) items:
function_declaration -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace . function_body Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 563
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 558:
## Known stack suffix:
## statement
## LR(1) items:
source_element -> statement . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_element -> statement

State 559:
## Known stack suffix:
## source_elements
## LR(1) items:
function_body -> source_elements . [ Lrbrace ]
source_elements -> source_elements . source_element [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_element shift to state 560
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:
-- On Lrbrace reduce production function_body -> source_elements

State 560:
## Known stack suffix:
## source_elements source_element
## LR(1) items:
source_elements -> source_elements source_element . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_elements -> source_elements source_element

State 561:
## Known stack suffix:
## function_declaration
## LR(1) items:
source_element -> function_declaration . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_element -> function_declaration

State 562:
## Known stack suffix:
## source_element
## LR(1) items:
source_elements -> source_element . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_elements -> source_element

State 563:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body
## LR(1) items:
function_declaration -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrbrace shift to state 564
## Reductions:

State 564:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace
## LR(1) items:
function_declaration -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace

State 565:
## Known stack suffix:
## formal_parameter_list Lcomma
## LR(1) items:
formal_parameter_list -> formal_parameter_list Lcomma . identifier [ Lrparen Lcomma ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 566
## Reductions:

State 566:
## Known stack suffix:
## formal_parameter_list Lcomma identifier
## LR(1) items:
formal_parameter_list -> formal_parameter_list Lcomma identifier . [ Lrparen Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_parameter_list -> formal_parameter_list Lcomma identifier

State 567:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body
## LR(1) items:
function_declaration -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body . Lrbrace [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Lrbrace shift to state 568
## Reductions:

State 568:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace
## LR(1) items:
function_declaration -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace . [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace

State 569:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbrace shift to state 570
## Reductions:

State 570:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expression -> KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace

State 571:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen LCcomment
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen LCcomment . Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llbrace shift to state 572
## Reductions:

State 572:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen LCcomment Llbrace
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen LCcomment Llbrace . function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 573
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 573:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbrace shift to state 574
## Reductions:

State 574:
## Known stack suffix:
## KWfunction Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace
## LR(1) items:
function_expression -> KWfunction Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expression -> KWfunction Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace

State 575:
## Known stack suffix:
## KWfunction identifier
## LR(1) items:
function_expression -> KWfunction identifier . Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction identifier . Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## KWfunction identifier Llparen
## LR(1) items:
function_expression -> KWfunction identifier Llparen . formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction identifier Llparen . formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 48
-- On formal_parameter_list shift to state 577
## Reductions:
-- On Lrparen reduce production formal_parameter_list ->
-- On Lcomma reduce production formal_parameter_list ->

State 577:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list
## LR(1) items:
formal_parameter_list -> formal_parameter_list . Lcomma identifier [ Lrparen Lcomma ]
function_expression -> KWfunction identifier Llparen formal_parameter_list . Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction identifier Llparen formal_parameter_list . Lrparen LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 578
-- On Lcomma shift to state 565
## Reductions:

State 578:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen . Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen . LCcomment Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llbrace shift to state 579
-- On LCcomment shift to state 582
## Reductions:

State 579:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace . function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 580
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 580:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbrace shift to state 581
## Reductions:

State 581:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace

State 582:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment . Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llbrace shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace . function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 584
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 584:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbrace shift to state 585
## Reductions:

State 585:
## Known stack suffix:
## KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace
## LR(1) items:
function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expression -> KWfunction identifier Llparen formal_parameter_list Lrparen LCcomment Llbrace function_body Lrbrace

State 586:
## Known stack suffix:
## KWnew new_expression
## LR(1) items:
new_expression -> KWnew new_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expression -> KWnew new_expression

State 587:
## Known stack suffix:
## KWnew member_expression
## LR(1) items:
member_expression -> member_expression . Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> KWnew member_expression . arguments [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Lddot identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Lddot property_identifier [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
member_expression -> member_expression . Ldot Llparen expression Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
new_expression -> member_expression . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 89
-- On Llbracket shift to state 192
-- On Ldot shift to state 195
-- On Lddot shift to state 201
-- On arguments shift to state 588
## Reductions:
-- On Lxorassign reduce production new_expression -> member_expression
-- On Lxor reduce production new_expression -> member_expression
-- On Lstarassign reduce production new_expression -> member_expression
-- On Lstar reduce production new_expression -> member_expression
-- On Lslashassign reduce production new_expression -> member_expression
-- On Lslash reduce production new_expression -> member_expression
-- On Lsemicolon reduce production new_expression -> member_expression
-- On Lsc_or reduce production new_expression -> member_expression
-- On Lsc_and reduce production new_expression -> member_expression
-- On Lrunsignedshiftassign reduce production new_expression -> member_expression
-- On Lrunsignedshift reduce production new_expression -> member_expression
-- On Lrsignedshiftassign reduce production new_expression -> member_expression
-- On Lrsignedshift reduce production new_expression -> member_expression
-- On Lrparen reduce production new_expression -> member_expression
-- On Lremassign reduce production new_expression -> member_expression
-- On Lrem reduce production new_expression -> member_expression
-- On Lrbracket reduce production new_expression -> member_expression
-- On Lrbrace reduce production new_expression -> member_expression
-- On Lplusassign reduce production new_expression -> member_expression
-- On Lplus reduce production new_expression -> member_expression
-- On Lorassign reduce production new_expression -> member_expression
-- On Lneq reduce production new_expression -> member_expression
-- On Lne reduce production new_expression -> member_expression
-- On Lminusassign reduce production new_expression -> member_expression
-- On Lminus reduce production new_expression -> member_expression
-- On Llshiftassign reduce production new_expression -> member_expression
-- On Llshift reduce production new_expression -> member_expression
-- On Lless reduce production new_expression -> member_expression
-- On Lle reduce production new_expression -> member_expression
-- On Lincr reduce production new_expression -> member_expression
-- On Lhook reduce production new_expression -> member_expression
-- On Lgreater reduce production new_expression -> member_expression
-- On Lge reduce production new_expression -> member_expression
-- On Leqq reduce production new_expression -> member_expression
-- On Leq reduce production new_expression -> member_expression
-- On Ldecr reduce production new_expression -> member_expression
-- On Lcomma reduce production new_expression -> member_expression
-- On Lcolon reduce production new_expression -> member_expression
-- On Lbit_or reduce production new_expression -> member_expression
-- On Lbit_and reduce production new_expression -> member_expression
-- On Lassign reduce production new_expression -> member_expression
-- On Landassign reduce production new_expression -> member_expression
-- On KWinstanceof reduce production new_expression -> member_expression
-- On KWin reduce production new_expression -> member_expression

State 588:
## Known stack suffix:
## KWnew member_expression arguments
## LR(1) items:
member_expression -> KWnew member_expression arguments . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> KWnew member_expression arguments

State 589:
## Known stack suffix:
## KWtypeof unary_expression
## LR(1) items:
unary_expression -> KWtypeof unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> KWtypeof unary_expression

State 590:
## Known stack suffix:
## KWvoid unary_expression
## LR(1) items:
unary_expression -> KWvoid unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> KWvoid unary_expression

State 591:
## Known stack suffix:
## Lplus unary_expression
## LR(1) items:
unary_init_expression -> Lplus unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> Lplus unary_expression

State 592:
## Known stack suffix:
## LCcomment KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body
## LR(1) items:
function_expression -> LCcomment KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbrace shift to state 593
## Reductions:

State 593:
## Known stack suffix:
## LCcomment KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace
## LR(1) items:
function_expression -> LCcomment KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expression -> LCcomment KWfunction Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace

State 594:
## Known stack suffix:
## LCcomment KWfunction identifier
## LR(1) items:
function_expression -> LCcomment KWfunction identifier . Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llparen shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen
## LR(1) items:
function_expression -> LCcomment KWfunction identifier Llparen . formal_parameter_list Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lident shift to state 29
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On identifier shift to state 48
-- On formal_parameter_list shift to state 596
## Reductions:
-- On Lrparen reduce production formal_parameter_list ->
-- On Lcomma reduce production formal_parameter_list ->

State 596:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list
## LR(1) items:
formal_parameter_list -> formal_parameter_list . Lcomma identifier [ Lrparen Lcomma ]
function_expression -> LCcomment KWfunction identifier Llparen formal_parameter_list . Lrparen Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 597
-- On Lcomma shift to state 565
## Reductions:

State 597:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen
## LR(1) items:
function_expression -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen . Llbrace function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Llbrace shift to state 598
## Reductions:

State 598:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace
## LR(1) items:
function_expression -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace . function_body Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 544
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_elements shift to state 559
-- On source_element shift to state 562
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On function_body shift to state 599
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 599:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body
## LR(1) items:
function_expression -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body . Lrbrace [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbrace shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace
## LR(1) items:
function_expression -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expression -> LCcomment KWfunction identifier Llparen formal_parameter_list Lrparen Llbrace function_body Lrbrace

State 601:
## Known stack suffix:
## Lat Llbracket expression
## LR(1) items:
attribute_identifier -> Lat Llbracket expression . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrbracket shift to state 602
## Reductions:

State 602:
## Known stack suffix:
## Lat Llbracket expression Lrbracket
## LR(1) items:
attribute_identifier -> Lat Llbracket expression Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute_identifier -> Lat Llbracket expression Lrbracket

State 603:
## Known stack suffix:
## Lat qualified_identifier
## LR(1) items:
attribute_identifier -> Lat qualified_identifier . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute_identifier -> Lat qualified_identifier

State 604:
## Known stack suffix:
## Lat property_selector
## LR(1) items:
attribute_identifier -> Lat property_selector . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
qualified_identifier -> property_selector . Ldcolon property_selector [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
qualified_identifier -> property_selector . Ldcolon Llbracket expression Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Ldcolon shift to state 74
## Reductions:
-- On Lxorassign reduce production attribute_identifier -> Lat property_selector
-- On Lxor reduce production attribute_identifier -> Lat property_selector
-- On Lstarassign reduce production attribute_identifier -> Lat property_selector
-- On Lstar reduce production attribute_identifier -> Lat property_selector
-- On Lslashassign reduce production attribute_identifier -> Lat property_selector
-- On Lslash reduce production attribute_identifier -> Lat property_selector
-- On Lsemicolon reduce production attribute_identifier -> Lat property_selector
-- On Lsc_or reduce production attribute_identifier -> Lat property_selector
-- On Lsc_and reduce production attribute_identifier -> Lat property_selector
-- On Lrunsignedshiftassign reduce production attribute_identifier -> Lat property_selector
-- On Lrunsignedshift reduce production attribute_identifier -> Lat property_selector
-- On Lrsignedshiftassign reduce production attribute_identifier -> Lat property_selector
-- On Lrsignedshift reduce production attribute_identifier -> Lat property_selector
-- On Lrparen reduce production attribute_identifier -> Lat property_selector
-- On Lremassign reduce production attribute_identifier -> Lat property_selector
-- On Lrem reduce production attribute_identifier -> Lat property_selector
-- On Lrbracket reduce production attribute_identifier -> Lat property_selector
-- On Lrbrace reduce production attribute_identifier -> Lat property_selector
-- On Lplusassign reduce production attribute_identifier -> Lat property_selector
-- On Lplus reduce production attribute_identifier -> Lat property_selector
-- On Lorassign reduce production attribute_identifier -> Lat property_selector
-- On Lneq reduce production attribute_identifier -> Lat property_selector
-- On Lne reduce production attribute_identifier -> Lat property_selector
-- On Lminusassign reduce production attribute_identifier -> Lat property_selector
-- On Lminus reduce production attribute_identifier -> Lat property_selector
-- On Llshiftassign reduce production attribute_identifier -> Lat property_selector
-- On Llshift reduce production attribute_identifier -> Lat property_selector
-- On Llparen reduce production attribute_identifier -> Lat property_selector
-- On Lless reduce production attribute_identifier -> Lat property_selector
-- On Lle reduce production attribute_identifier -> Lat property_selector
-- On Llbracket reduce production attribute_identifier -> Lat property_selector
-- On Lincr reduce production attribute_identifier -> Lat property_selector
-- On Lhook reduce production attribute_identifier -> Lat property_selector
-- On Lgreater reduce production attribute_identifier -> Lat property_selector
-- On Lge reduce production attribute_identifier -> Lat property_selector
-- On Leqq reduce production attribute_identifier -> Lat property_selector
-- On Leq reduce production attribute_identifier -> Lat property_selector
-- On Ldot reduce production attribute_identifier -> Lat property_selector
-- On Ldecr reduce production attribute_identifier -> Lat property_selector
-- On Lddot reduce production attribute_identifier -> Lat property_selector
-- On Lcomma reduce production attribute_identifier -> Lat property_selector
-- On Lcolon reduce production attribute_identifier -> Lat property_selector
-- On Lbit_or reduce production attribute_identifier -> Lat property_selector
-- On Lbit_and reduce production attribute_identifier -> Lat property_selector
-- On Lassign reduce production attribute_identifier -> Lat property_selector
-- On Landassign reduce production attribute_identifier -> Lat property_selector
-- On KWinstanceof reduce production attribute_identifier -> Lat property_selector
-- On KWin reduce production attribute_identifier -> Lat property_selector

State 605:
## Known stack suffix:
## Lbang unary_expression
## LR(1) items:
unary_expression -> Lbang unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> Lbang unary_expression

State 606:
## Known stack suffix:
## Ldecr unary_expression
## LR(1) items:
unary_expression -> Ldecr unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> Ldecr unary_expression

State 607:
## Known stack suffix:
## Lincr unary_expression
## LR(1) items:
unary_expression -> Lincr unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> Lincr unary_expression

State 608:
## Known stack suffix:
## property_name_and_value_list Lcomma property_name Lcolon assignment_expression
## LR(1) items:
property_name_and_value_list -> property_name_and_value_list Lcomma property_name Lcolon assignment_expression . [ Lrbrace Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_and_value_list -> property_name_and_value_list Lcomma property_name Lcolon assignment_expression

State 609:
## Known stack suffix:
## numeric_literal
## LR(1) items:
property_name -> numeric_literal . [ Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> numeric_literal

State 610:
## Known stack suffix:
## identifier
## LR(1) items:
property_name -> identifier . [ Lcolon ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> identifier

State 611:
## Known stack suffix:
## property_name
## LR(1) items:
property_name_and_value_list -> property_name . Lcolon assignment_expression [ Lrbrace Lcomma ]
## Transitions:
-- On Lcolon shift to state 612
## Reductions:

State 612:
## Known stack suffix:
## property_name Lcolon
## LR(1) items:
property_name_and_value_list -> property_name Lcolon . assignment_expression [ Lrbrace Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 613
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 613:
## Known stack suffix:
## property_name Lcolon assignment_expression
## LR(1) items:
property_name_and_value_list -> property_name Lcolon assignment_expression . [ Lrbrace Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name_and_value_list -> property_name Lcolon assignment_expression

State 614:
## Known stack suffix:
## Lcomma
## LR(1) items:
elision -> Lcomma . [ Lrbracket Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elision -> Lcomma

State 615:
## Known stack suffix:
## Llbracket non_empty_element_list
## LR(1) items:
array_literal -> Llbracket non_empty_element_list . Lrbracket [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
non_empty_element_list -> non_empty_element_list . Lcomma assignment_expression [ Lrbracket Lcomma ]
non_empty_element_list -> non_empty_element_list . Lcomma elision [ Lrbracket Lcomma ]
## Transitions:
-- On Lrbracket shift to state 616
-- On Lcomma shift to state 617
## Reductions:

State 616:
## Known stack suffix:
## Llbracket non_empty_element_list Lrbracket
## LR(1) items:
array_literal -> Llbracket non_empty_element_list Lrbracket . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> Llbracket non_empty_element_list Lrbracket

State 617:
## Known stack suffix:
## non_empty_element_list Lcomma
## LR(1) items:
non_empty_element_list -> non_empty_element_list Lcomma . assignment_expression [ Lrbracket Lcomma ]
non_empty_element_list -> non_empty_element_list Lcomma . elision [ Lrbracket Lcomma ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lcomma shift to state 614
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On equality_expression shift to state 109
-- On elision shift to state 618
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 619
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 618:
## Known stack suffix:
## non_empty_element_list Lcomma elision
## LR(1) items:
non_empty_element_list -> non_empty_element_list Lcomma elision . [ Lrbracket Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_empty_element_list -> non_empty_element_list Lcomma elision

State 619:
## Known stack suffix:
## non_empty_element_list Lcomma assignment_expression
## LR(1) items:
non_empty_element_list -> non_empty_element_list Lcomma assignment_expression . [ Lrbracket Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_empty_element_list -> non_empty_element_list Lcomma assignment_expression

State 620:
## Known stack suffix:
## elision
## LR(1) items:
non_empty_element_list -> elision . [ Lrbracket Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_empty_element_list -> elision

State 621:
## Known stack suffix:
## assignment_expression
## LR(1) items:
non_empty_element_list -> assignment_expression . [ Lrbracket Lcomma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_empty_element_list -> assignment_expression

State 622:
## Known stack suffix:
## Llparen expression
## LR(1) items:
primary_expression -> Llparen expression . Lrparen [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On Lrparen shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## Llparen expression Lrparen
## LR(1) items:
primary_expression -> Llparen expression Lrparen . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> Llparen expression Lrparen

State 624:
## Known stack suffix:
## Lminus unary_expression
## LR(1) items:
unary_expression -> Lminus unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> Lminus unary_expression

State 625:
## Known stack suffix:
## Lplus unary_expression
## LR(1) items:
unary_expression -> Lplus unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> Lplus unary_expression

State 626:
## Known stack suffix:
## Ltilde unary_expression
## LR(1) items:
unary_expression -> Ltilde unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> Ltilde unary_expression

State 627:
## Known stack suffix:
## XMLassign Llbrace expression
## LR(1) items:
xml_tag_content -> XMLassign Llbrace expression . Lrbrace [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
-- On Lrbrace shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## XMLassign Llbrace expression Lrbrace
## LR(1) items:
xml_tag_content -> XMLassign Llbrace expression Lrbrace . [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tag_content -> XMLassign Llbrace expression Lrbrace

State 629:
## Known stack suffix:
## Llbrace
## LR(1) items:
xml_tag_content -> Llbrace . expression Lrbrace [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 630
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 630:
## Known stack suffix:
## Llbrace expression
## LR(1) items:
xml_tag_content -> Llbrace expression . Lrbrace [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
-- On Lrbrace shift to state 631
## Reductions:

State 631:
## Known stack suffix:
## Llbrace expression Lrbrace
## LR(1) items:
xml_tag_content -> Llbrace expression Lrbrace . [ XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tag_content -> Llbrace expression Lrbrace

State 632:
## Known stack suffix:
## XMLotag_open xml_tag_content_option
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option . XMLempty_tag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
xml_element -> XMLotag_open xml_tag_content_option . XMLtag_close xml_element_content XMLctag_open xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
xml_element -> XMLotag_open xml_tag_content_option . XMLtag_close XMLctag_open xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLtag_close shift to state 633
-- On XMLempty_tag_close shift to state 651
## Reductions:

State 633:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close . xml_element_content XMLctag_open xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close . XMLctag_open xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLtext shift to state 7
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 8
-- On XMLctag_open shift to state 634
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Llbrace shift to state 639
-- On xml_markup shift to state 642
-- On xml_element_content shift to state 647
-- On xml_element shift to state 644
## Reductions:

State 634:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close XMLctag_open
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close XMLctag_open . xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLwhitespace shift to state 5
-- On XMLtag_chars shift to state 9
-- On XMLassign shift to state 10
-- On Llbrace shift to state 629
-- On xml_tag_content_option shift to state 635
-- On xml_tag_content shift to state 637
## Reductions:

State 635:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close XMLctag_open xml_tag_content_option
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close XMLctag_open xml_tag_content_option . XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLtag_close shift to state 636
## Reductions:

State 636:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close XMLctag_open xml_tag_content_option XMLtag_close
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close XMLctag_open xml_tag_content_option XMLtag_close . [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_element -> XMLotag_open xml_tag_content_option XMLtag_close XMLctag_open xml_tag_content_option XMLtag_close

State 637:
## Known stack suffix:
## xml_tag_content
## LR(1) items:
xml_tag_content_option -> xml_tag_content . [ XMLtag_close XMLempty_tag_close ]
xml_tag_content_option -> xml_tag_content . xml_tag_content_option [ XMLtag_close XMLempty_tag_close ]
## Transitions:
-- On XMLwhitespace shift to state 5
-- On XMLtag_chars shift to state 9
-- On XMLassign shift to state 10
-- On Llbrace shift to state 629
-- On xml_tag_content_option shift to state 638
-- On xml_tag_content shift to state 637
## Reductions:
-- On XMLtag_close reduce production xml_tag_content_option -> xml_tag_content
-- On XMLempty_tag_close reduce production xml_tag_content_option -> xml_tag_content

State 638:
## Known stack suffix:
## xml_tag_content xml_tag_content_option
## LR(1) items:
xml_tag_content_option -> xml_tag_content xml_tag_content_option . [ XMLtag_close XMLempty_tag_close ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tag_content_option -> xml_tag_content xml_tag_content_option

State 639:
## Known stack suffix:
## Llbrace
## LR(1) items:
xml_element_content -> Llbrace . expression Lrbrace [ XMLctag_open ]
xml_element_content -> Llbrace . expression Lrbrace xml_element_content [ XMLctag_open ]
## Transitions:
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 4
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Ltrue shift to state 1
-- On Ltilde shift to state 15
-- On Lstring shift to state 16
-- On Lstar shift to state 17
-- On Lregexp shift to state 18
-- On Lplus shift to state 19
-- On Lnull shift to state 20
-- On Lminus shift to state 21
-- On Llparen shift to state 22
-- On Llbracket shift to state 23
-- On Llbrace shift to state 25
-- On Lint shift to state 28
-- On Lincr shift to state 39
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Ldecr shift to state 41
-- On Lbang shift to state 42
-- On Lat shift to state 43
-- On LCcomment shift to state 45
-- On KWvoid shift to state 55
-- On KWtypeof shift to state 56
-- On KWthis shift to state 57
-- On KWnew shift to state 58
-- On KWfunction shift to state 59
-- On KWdelete shift to state 65
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On xml_markup shift to state 66
-- On xml_list_initialiser shift to state 67
-- On xml_initialiser shift to state 68
-- On xml_element shift to state 69
-- On wildcard_identifier shift to state 70
-- On unary_expression shift to state 76
-- On shift_expression shift to state 77
-- On sequence_of_expression shift to state 103
-- On relational_expression shift to state 91
-- On qualified_identifier shift to state 72
-- On property_selector shift to state 73
-- On property_identifier shift to state 79
-- On primary_expression shift to state 80
-- On postfix_expression shift to state 81
-- On object_literal shift to state 82
-- On numeric_literal shift to state 83
-- On new_expression shift to state 84
-- On multiplicative_expression shift to state 85
-- On member_expression shift to state 88
-- On logical_or_expression shift to state 105
-- On logical_and_expression shift to state 152
-- On literal shift to state 95
-- On left_hand_side_expression shift to state 153
-- On identifier shift to state 99
-- On function_expression shift to state 100
-- On expression shift to state 640
-- On equality_expression shift to state 109
-- On conditional_expression shift to state 167
-- On call_expression shift to state 101
-- On bitwise_xor_expression shift to state 141
-- On bitwise_or_expression shift to state 150
-- On bitwise_and_expression shift to state 149
-- On attribute_identifier shift to state 115
-- On assignment_expression shift to state 175
-- On array_literal shift to state 116
-- On additive_expression shift to state 126
## Reductions:

State 640:
## Known stack suffix:
## Llbrace expression
## LR(1) items:
xml_element_content -> Llbrace expression . Lrbrace [ XMLctag_open ]
xml_element_content -> Llbrace expression . Lrbrace xml_element_content [ XMLctag_open ]
## Transitions:
-- On Lrbrace shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## Llbrace expression Lrbrace
## LR(1) items:
xml_element_content -> Llbrace expression Lrbrace . [ XMLctag_open ]
xml_element_content -> Llbrace expression Lrbrace . xml_element_content [ XMLctag_open ]
## Transitions:
-- On XMLtext shift to state 7
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 8
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Llbrace shift to state 639
-- On xml_markup shift to state 642
-- On xml_element_content shift to state 646
-- On xml_element shift to state 644
## Reductions:
-- On XMLctag_open reduce production xml_element_content -> Llbrace expression Lrbrace

State 642:
## Known stack suffix:
## xml_markup
## LR(1) items:
xml_element_content -> xml_markup . [ XMLctag_open ]
xml_element_content -> xml_markup . xml_element_content [ XMLctag_open ]
## Transitions:
-- On XMLtext shift to state 7
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 8
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Llbrace shift to state 639
-- On xml_markup shift to state 642
-- On xml_element_content shift to state 643
-- On xml_element shift to state 644
## Reductions:
-- On XMLctag_open reduce production xml_element_content -> xml_markup

State 643:
## Known stack suffix:
## xml_markup xml_element_content
## LR(1) items:
xml_element_content -> xml_markup xml_element_content . [ XMLctag_open ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_element_content -> xml_markup xml_element_content

State 644:
## Known stack suffix:
## xml_element
## LR(1) items:
xml_element_content -> xml_element . [ XMLctag_open ]
xml_element_content -> xml_element . xml_element_content [ XMLctag_open ]
## Transitions:
-- On XMLtext shift to state 7
-- On XMLpi shift to state 3
-- On XMLotag_open shift to state 8
-- On XMLcomment shift to state 13
-- On XMLcdata shift to state 14
-- On Llbrace shift to state 639
-- On xml_markup shift to state 642
-- On xml_element_content shift to state 645
-- On xml_element shift to state 644
## Reductions:
-- On XMLctag_open reduce production xml_element_content -> xml_element

State 645:
## Known stack suffix:
## xml_element xml_element_content
## LR(1) items:
xml_element_content -> xml_element xml_element_content . [ XMLctag_open ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_element_content -> xml_element xml_element_content

State 646:
## Known stack suffix:
## Llbrace expression Lrbrace xml_element_content
## LR(1) items:
xml_element_content -> Llbrace expression Lrbrace xml_element_content . [ XMLctag_open ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_element_content -> Llbrace expression Lrbrace xml_element_content

State 647:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close xml_element_content
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close xml_element_content . XMLctag_open xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLctag_open shift to state 648
## Reductions:

State 648:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close xml_element_content XMLctag_open
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close xml_element_content XMLctag_open . xml_tag_content_option XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLwhitespace shift to state 5
-- On XMLtag_chars shift to state 9
-- On XMLassign shift to state 10
-- On Llbrace shift to state 629
-- On xml_tag_content_option shift to state 649
-- On xml_tag_content shift to state 637
## Reductions:

State 649:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close xml_element_content XMLctag_open xml_tag_content_option
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close xml_element_content XMLctag_open xml_tag_content_option . XMLtag_close [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLtag_close shift to state 650
## Reductions:

State 650:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLtag_close xml_element_content XMLctag_open xml_tag_content_option XMLtag_close
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLtag_close xml_element_content XMLctag_open xml_tag_content_option XMLtag_close . [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_element -> XMLotag_open xml_tag_content_option XMLtag_close xml_element_content XMLctag_open xml_tag_content_option XMLtag_close

State 651:
## Known stack suffix:
## XMLotag_open xml_tag_content_option XMLempty_tag_close
## LR(1) items:
xml_element -> XMLotag_open xml_tag_content_option XMLempty_tag_close . [ XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_element -> XMLotag_open xml_tag_content_option XMLempty_tag_close

State 652:
## Known stack suffix:
## XMLtext xml_element_content
## LR(1) items:
xml_element_content -> XMLtext xml_element_content . [ XMLctag_open ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_element_content -> XMLtext xml_element_content

State 653:
## Known stack suffix:
## XMLotag_open XMLtag_close xml_element_content
## LR(1) items:
xml_list_initialiser -> XMLotag_open XMLtag_close xml_element_content . XMLctag_open XMLtag_close [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLctag_open shift to state 654
## Reductions:

State 654:
## Known stack suffix:
## XMLotag_open XMLtag_close xml_element_content XMLctag_open
## LR(1) items:
xml_list_initialiser -> XMLotag_open XMLtag_close xml_element_content XMLctag_open . XMLtag_close [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
-- On XMLtag_close shift to state 655
## Reductions:

State 655:
## Known stack suffix:
## XMLotag_open XMLtag_close xml_element_content XMLctag_open XMLtag_close
## LR(1) items:
xml_list_initialiser -> XMLotag_open XMLtag_close xml_element_content XMLctag_open XMLtag_close . [ Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_list_initialiser -> XMLotag_open XMLtag_close xml_element_content XMLctag_open XMLtag_close

State 656:
## Known stack suffix:
## Ltilde unary_expression
## LR(1) items:
unary_init_expression -> Ltilde unary_expression . [ Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_init_expression -> Ltilde unary_expression

State 657:
## Known stack suffix:
## source_elements
## LR(1) items:
program -> source_elements . Leof [ # ]
source_elements -> source_elements . source_element [ Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace ]
## Transitions:
-- On Ltrue shift to state 1
-- On Ltilde shift to state 2
-- On Lstring shift to state 16
-- On Lsemicolon shift to state 52
-- On Lregexp shift to state 53
-- On Lplus shift to state 54
-- On Lnull shift to state 20
-- On Lminus shift to state 64
-- On Llparen shift to state 212
-- On Llbracket shift to state 23
-- On Llbrace shift to state 215
-- On Lint shift to state 28
-- On Lincr shift to state 216
-- On Lident shift to state 29
-- On Lfloat shift to state 30
-- On Lfalse shift to state 40
-- On Leof shift to state 658
-- On Ldecr shift to state 218
-- On Lbang shift to state 220
-- On LCcomment shift to state 545
-- On KWwith shift to state 222
-- On KWwhile shift to state 226
-- On KWvoid shift to state 230
-- On KWvar shift to state 232
-- On KWtypeof shift to state 242
-- On KWtry shift to state 244
-- On KWthrow shift to state 256
-- On KWthis shift to state 259
-- On KWswitch shift to state 260
-- On KWreturn shift to state 268
-- On KWnew shift to state 272
-- On KWif shift to state 276
-- On KWfunction shift to state 552
-- On KWfor shift to state 280
-- On KWdo shift to state 355
-- On KWdelete shift to state 356
-- On KWcontinue shift to state 358
-- On KWbreak shift to state 362
-- On CKWxml shift to state 31
-- On CKWnamespace shift to state 32
-- On CKWeach shift to state 33
-- On CKWdefaultxmlnamespace shift to state 366
-- On with_statement shift to state 370
-- On variable_statement shift to state 371
-- On unary_init_expression shift to state 372
-- On try_statement shift to state 373
-- On throw_statement shift to state 374
-- On switch_statement shift to state 375
-- On statement shift to state 558
-- On source_element shift to state 560
-- On shift_init_expression shift to state 382
-- On sequence_of_init_expression shift to state 389
-- On return_statement shift to state 392
-- On relational_init_expression shift to state 393
-- On primary_init_expression shift to state 406
-- On postfix_init_expression shift to state 407
-- On numeric_literal shift to state 83
-- On new_init_expression shift to state 408
-- On multiplicative_init_expression shift to state 409
-- On member_init_expression shift to state 416
-- On logical_or_init_expression shift to state 430
-- On logical_and_init_expression shift to state 437
-- On literal shift to state 440
-- On left_hand_side_init_expression shift to state 441
-- On labelled_statement shift to state 446
-- On iteration_statement shift to state 447
-- On init_expression shift to state 448
-- On if_statement shift to state 450
-- On identifier shift to state 451
-- On function_declaration shift to state 561
-- On expression_statement shift to state 454
-- On equality_init_expression shift to state 455
-- On empty_statement shift to state 464
-- On default_xml_namespace_statement shift to state 465
-- On continue_statement shift to state 466
-- On conditional_init_expression shift to state 467
-- On call_init_expression shift to state 468
-- On break_statement shift to state 482
-- On block shift to state 483
-- On bitwise_xor_init_expression shift to state 484
-- On bitwise_or_init_expression shift to state 487
-- On bitwise_and_init_expression shift to state 490
-- On assignment_init_expression shift to state 493
-- On array_literal shift to state 494
-- On additive_init_expression shift to state 495
## Reductions:

State 658:
## Known stack suffix:
## source_elements Leof
## LR(1) items:
program -> source_elements Leof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> source_elements Leof

State 659:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

