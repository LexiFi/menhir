File "JSParse.mly", line 83, characters 22-33:
Warning: the token FRWabstract is unused.
File "JSParse.mly", line 84, characters 22-32:
Warning: the token FRWboolean is unused.
File "JSParse.mly", line 85, characters 22-29:
Warning: the token FRWbyte is unused.
File "JSParse.mly", line 86, characters 22-29:
Warning: the token FRWchar is unused.
File "JSParse.mly", line 87, characters 22-30:
Warning: the token FRWclass is unused.
File "JSParse.mly", line 88, characters 22-30:
Warning: the token FRWconst is unused.
File "JSParse.mly", line 89, characters 22-33:
Warning: the token FRWdebugger is unused.
File "JSParse.mly", line 90, characters 22-29:
Warning: the token FRWenum is unused.
File "JSParse.mly", line 91, characters 22-31:
Warning: the token FRWexport is unused.
File "JSParse.mly", line 92, characters 22-32:
Warning: the token FRWextends is unused.
File "JSParse.mly", line 93, characters 22-30:
Warning: the token FRWfinal is unused.
File "JSParse.mly", line 94, characters 22-30:
Warning: the token FRWfloat is unused.
File "JSParse.mly", line 95, characters 22-29:
Warning: the token FRWgoto is unused.
File "JSParse.mly", line 96, characters 22-35:
Warning: the token FRWimplements is unused.
File "JSParse.mly", line 97, characters 22-28:
Warning: the token FRWint is unused.
File "JSParse.mly", line 98, characters 22-34:
Warning: the token FRWinterface is unused.
File "JSParse.mly", line 99, characters 22-29:
Warning: the token FRWlong is unused.
File "JSParse.mly", line 100, characters 22-31:
Warning: the token FRWnative is unused.
File "JSParse.mly", line 101, characters 22-32:
Warning: the token FRWpackage is unused.
File "JSParse.mly", line 102, characters 22-32:
Warning: the token FRWprivate is unused.
File "JSParse.mly", line 103, characters 22-34:
Warning: the token FRWprotected is unused.
File "JSParse.mly", line 104, characters 22-30:
Warning: the token FRWshort is unused.
File "JSParse.mly", line 105, characters 22-31:
Warning: the token FRWstatic is unused.
File "JSParse.mly", line 106, characters 22-30:
Warning: the token FRWsuper is unused.
File "JSParse.mly", line 107, characters 22-37:
Warning: the token FRWsynchronized is unused.
File "JSParse.mly", line 108, characters 22-31:
Warning: the token FRWthrows is unused.
File "JSParse.mly", line 109, characters 22-34:
Warning: the token FRWtransient is unused.
File "JSParse.mly", line 110, characters 22-33:
Warning: the token FRWvolatile is unused.
File "JSParse.mly", line 47, characters 31-40:
Warning: the token LDcomment is unused.
File "JSParse.mly", line 49, characters 22-32:
Warning: the token LInitBegin is unused.
File "JSParse.mly", line 50, characters 22-30:
Warning: the token LInitEnd is unused.
File "JSParse.mly", line 35, characters 29-34:
Warning: the token Lchar is unused.
File "JSParse.mly", line 46, characters 31-39:
Warning: the token Lcomment is unused.
File "JSParse.mly", line 45, characters 22-38:
Warning: the token Lline_terminator is unused.
File "JSParse.mly", line 44, characters 22-33:
Warning: the token Lwhitespace is unused.
Grammar has 117 nonterminal symbols, among which 1 start symbols.
Grammar has 137 terminal symbols.
Grammar has 361 productions.
nullable(xml_tag_content_option) = false
nullable(xml_tag_content) = false
nullable(xml_markup) = false
nullable(xml_list_initialiser) = false
nullable(xml_initialiser) = false
nullable(xml_element_content) = false
nullable(xml_element) = false
nullable(with_statement) = false
nullable(wildcard_identifier) = false
nullable(variable_statement) = false
nullable(variable_declaration_no_in) = false
nullable(variable_declaration_list_no_in) = false
nullable(variable_declaration_list) = false
nullable(variable_declaration) = false
nullable(unary_init_expression) = false
nullable(unary_expression) = false
nullable(try_statement) = false
nullable(throw_statement) = false
nullable(switch_statement) = false
nullable(statement) = false
nullable(source_elements) = false
nullable(source_element) = false
nullable(shift_init_expression) = false
nullable(shift_expression) = false
nullable(sequence_of_init_expression) = false
nullable(sequence_of_expression_no_in) = false
nullable(sequence_of_expression) = false
nullable(return_statement) = false
nullable(relational_init_expression) = false
nullable(relational_expression_no_in) = false
nullable(relational_expression) = false
nullable(qualified_identifier) = false
nullable(property_selector) = false
nullable(property_name_and_value_list) = false
nullable(property_name) = false
nullable(property_identifier) = false
nullable(program) = false
nullable(primary_init_expression) = false
nullable(primary_expression) = false
nullable(postfix_init_expression) = false
nullable(postfix_expression) = false
nullable(optional_statement_list) = true
nullable(optional_expression_no_in) = true
nullable(optional_expression) = true
nullable(object_literal) = false
nullable(numeric_literal) = false
nullable(non_empty_statement_list) = false
nullable(non_empty_element_list) = false
nullable(new_init_expression) = false
nullable(new_expression) = false
nullable(multiplicative_init_expression) = false
nullable(multiplicative_expression) = false
nullable(member_init_expression) = false
nullable(member_expression) = false
nullable(logical_or_init_expression) = false
nullable(logical_or_expression_no_in) = false
nullable(logical_or_expression) = false
nullable(logical_and_init_expression) = false
nullable(logical_and_expression_no_in) = false
nullable(logical_and_expression) = false
nullable(literal) = false
nullable(left_hand_side_init_expression) = false
nullable(left_hand_side_expression) = false
nullable(labelled_statement) = false
nullable(iteration_statement) = false
nullable(initialiser_no_in) = false
nullable(initialiser) = false
nullable(init_expression) = false
nullable(if_statement) = false
nullable(identifier) = false
nullable(function_expression) = false
nullable(function_declaration) = false
nullable(function_body) = false
nullable(formal_parameter_list) = true
nullable(for_bracket) = false
nullable(finally_prod) = false
nullable(expression_statement) = false
nullable(expression_no_in) = false
nullable(expression) = false
nullable(equality_init_expression) = false
nullable(equality_expression_no_in) = false
nullable(equality_expression) = false
nullable(empty_statement) = false
nullable(elision) = false
nullable(default_xml_namespace_statement) = false
nullable(default_clause) = false
nullable(continue_statement) = false
nullable(conditional_init_expression) = false
nullable(conditional_expression_no_in) = false
nullable(conditional_expression) = false
nullable(catch_prod) = false
nullable(case_clauses) = false
nullable(case_clause) = false
nullable(case_block) = false
nullable(call_init_expression) = false
nullable(call_expression) = false
nullable(break_statement) = false
nullable(block) = false
nullable(bitwise_xor_init_expression) = false
nullable(bitwise_xor_expression_no_in) = false
nullable(bitwise_xor_expression) = false
nullable(bitwise_or_init_expression) = false
nullable(bitwise_or_expression_no_in) = false
nullable(bitwise_or_expression) = false
nullable(bitwise_and_init_expression) = false
nullable(bitwise_and_expression_no_in) = false
nullable(bitwise_and_expression) = false
nullable(attribute_identifier) = false
nullable(assignment_operator) = false
nullable(assignment_init_expression) = false
nullable(assignment_expression_no_in) = false
nullable(assignment_expression) = false
nullable(array_literal) = false
nullable(arguments) = false
nullable(argument_list) = false
nullable(additive_init_expression) = false
nullable(additive_expression) = false
first(xml_tag_content_option) = XMLwhitespace XMLtag_chars XMLassign Llbrace
first(xml_tag_content) = XMLwhitespace XMLtag_chars XMLassign Llbrace
first(xml_markup) = XMLpi XMLcomment XMLcdata
first(xml_list_initialiser) = XMLotag_open
first(xml_initialiser) = XMLpi XMLotag_open XMLcomment XMLcdata
first(xml_element_content) = XMLtext XMLpi XMLotag_open XMLcomment XMLcdata Llbrace
first(xml_element) = XMLotag_open
first(with_statement) = KWwith
first(wildcard_identifier) = Lstar
first(variable_statement) = KWvar
first(variable_declaration_no_in) = Lident CKWxml CKWnamespace CKWeach
first(variable_declaration_list_no_in) = Lident CKWxml CKWnamespace CKWeach
first(variable_declaration_list) = Lident CKWxml CKWnamespace CKWeach
first(variable_declaration) = Lident CKWxml CKWnamespace CKWeach
first(unary_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(unary_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(try_statement) = KWtry
first(throw_statement) = KWthrow
first(switch_statement) = KWswitch
first(statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
first(source_elements) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
first(source_element) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
first(shift_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(shift_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(sequence_of_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(sequence_of_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(sequence_of_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(return_statement) = KWreturn
first(relational_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(relational_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(relational_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(qualified_identifier) = Lstar Lident CKWxml CKWnamespace CKWeach
first(property_selector) = Lstar Lident CKWxml CKWnamespace CKWeach
first(property_name_and_value_list) = Lstring Lint Lident Lfloat CKWxml CKWnamespace CKWeach
first(property_name) = Lstring Lint Lident Lfloat CKWxml CKWnamespace CKWeach
first(property_identifier) = Lstar Lident Lat CKWxml CKWnamespace CKWeach
first(program) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
first(primary_init_expression) = Ltrue Lstring Lnull Llparen Llbracket Lint Lident Lfloat Lfalse KWthis CKWxml CKWnamespace CKWeach
first(primary_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Lstring Lstar Lnull Llparen Llbracket Llbrace Lint Lident Lfloat Lfalse Lat KWthis CKWxml CKWnamespace CKWeach
first(postfix_init_expression) = Ltrue Lstring Lregexp Lnull Llparen Llbracket Lint Lident Lfloat Lfalse KWthis KWnew CKWxml CKWnamespace CKWeach
first(postfix_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Lstring Lstar Lregexp Lnull Llparen Llbracket Llbrace Lint Lident Lfloat Lfalse Lat LCcomment KWthis KWnew KWfunction CKWxml CKWnamespace CKWeach
first(optional_statement_list) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
first(optional_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(optional_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(object_literal) = Llbrace
first(numeric_literal) = Lint Lfloat
first(non_empty_statement_list) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
first(non_empty_element_list) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lcomma Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(new_init_expression) = Ltrue Lstring Lregexp Lnull Llparen Llbracket Lint Lident Lfloat Lfalse KWthis KWnew CKWxml CKWnamespace CKWeach
first(new_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Lstring Lstar Lregexp Lnull Llparen Llbracket Llbrace Lint Lident Lfloat Lfalse Lat LCcomment KWthis KWnew KWfunction CKWxml CKWnamespace CKWeach
first(multiplicative_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(multiplicative_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(member_init_expression) = Ltrue Lstring Lregexp Lnull Llparen Llbracket Lint Lident Lfloat Lfalse KWthis KWnew CKWxml CKWnamespace CKWeach
first(member_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Lstring Lstar Lregexp Lnull Llparen Llbracket Llbrace Lint Lident Lfloat Lfalse Lat LCcomment KWthis KWnew KWfunction CKWxml CKWnamespace CKWeach
first(logical_or_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(logical_or_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(logical_or_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(logical_and_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(logical_and_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(logical_and_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(literal) = Ltrue Lstring Lnull Lint Lfloat Lfalse
first(left_hand_side_init_expression) = Ltrue Lstring Lregexp Lnull Llparen Llbracket Lint Lident Lfloat Lfalse KWthis KWnew CKWxml CKWnamespace CKWeach
first(left_hand_side_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Lstring Lstar Lregexp Lnull Llparen Llbracket Llbrace Lint Lident Lfloat Lfalse Lat LCcomment KWthis KWnew KWfunction CKWxml CKWnamespace CKWeach
first(labelled_statement) = Lident CKWxml CKWnamespace CKWeach
first(iteration_statement) = KWwhile KWfor KWdo
first(initialiser_no_in) = Lassign
first(initialiser) = Lassign
first(init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(if_statement) = KWif
first(identifier) = Lident CKWxml CKWnamespace CKWeach
first(function_expression) = LCcomment KWfunction
first(function_declaration) = LCcomment KWfunction
first(function_body) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
first(formal_parameter_list) = Lident Lcomma CKWxml CKWnamespace CKWeach
first(for_bracket) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lsemicolon Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWvar KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(finally_prod) = KWfinally
first(expression_statement) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(equality_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(equality_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(equality_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(empty_statement) = Lsemicolon
first(elision) = Lcomma
first(default_xml_namespace_statement) = CKWdefaultxmlnamespace
first(default_clause) = KWdefault
first(continue_statement) = KWcontinue
first(conditional_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(conditional_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(conditional_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(catch_prod) = KWcatch
first(case_clauses) = KWcase
first(case_clause) = KWcase
first(case_block) = Llbrace
first(call_init_expression) = Ltrue Lstring Lregexp Lnull Llparen Llbracket Lint Lident Lfloat Lfalse KWthis KWnew CKWxml CKWnamespace CKWeach
first(call_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Lstring Lstar Lregexp Lnull Llparen Llbracket Llbrace Lint Lident Lfloat Lfalse Lat LCcomment KWthis KWnew KWfunction CKWxml CKWnamespace CKWeach
first(break_statement) = KWbreak
first(block) = Llbrace
first(bitwise_xor_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_xor_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_xor_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_or_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_or_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_or_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_and_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_and_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(bitwise_and_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(attribute_identifier) = Lat
first(assignment_operator) = Lxorassign Lstarassign Lslashassign Lrunsignedshiftassign Lrsignedshiftassign Lremassign Lplusassign Lorassign Lminusassign Llshiftassign Lassign Landassign
first(assignment_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(assignment_expression_no_in) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(assignment_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(array_literal) = Llbracket
first(arguments) = Llparen
first(argument_list) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
first(additive_init_expression) = Ltrue Ltilde Lstring Lregexp Lplus Lnull Lminus Llparen Llbracket Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWvoid KWtypeof KWthis KWnew KWdelete CKWxml CKWnamespace CKWeach
first(additive_expression) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
minimal(xml_tag_content_option) = (* 1 *) XMLtag_chars
minimal(xml_tag_content) = (* 1 *) XMLtag_chars
minimal(xml_markup) = (* 1 *) XMLcomment
minimal(xml_list_initialiser) = (* 5 *) XMLotag_open XMLtag_close XMLcomment XMLctag_open XMLtag_close
minimal(xml_initialiser) = (* 1 *) XMLcomment
minimal(xml_element_content) = (* 1 *) XMLcomment
minimal(xml_element) = (* 3 *) XMLotag_open XMLtag_chars XMLempty_tag_close
minimal(with_statement) = (* 5 *) KWwith Llparen KWthis Lrparen Lsemicolon
minimal(wildcard_identifier) = (* 1 *) Lstar
minimal(variable_statement) = (* 3 *) KWvar Lident Lsemicolon
minimal(variable_declaration_no_in) = (* 1 *) Lident
minimal(variable_declaration_list_no_in) = (* 1 *) Lident
minimal(variable_declaration_list) = (* 1 *) Lident
minimal(variable_declaration) = (* 1 *) Lident
minimal(unary_init_expression) = (* 1 *) KWthis
minimal(unary_expression) = (* 1 *) KWthis
minimal(try_statement) = (* 6 *) KWtry Llbrace Lrbrace KWfinally Llbrace Lrbrace
minimal(throw_statement) = (* 3 *) KWthrow KWthis Lsemicolon
minimal(switch_statement) = (* 6 *) KWswitch Llparen KWthis Lrparen Llbrace Lrbrace
minimal(statement) = (* 1 *) Lsemicolon
minimal(source_elements) = (* 1 *) Leof
minimal(source_element) = (* 1 *) Lsemicolon
minimal(shift_init_expression) = (* 1 *) KWthis
minimal(shift_expression) = (* 1 *) KWthis
minimal(sequence_of_init_expression) = (* 1 *) KWthis
minimal(sequence_of_expression_no_in) = (* 1 *) KWthis
minimal(sequence_of_expression) = (* 1 *) KWthis
minimal(return_statement) = (* 2 *) KWreturn Lsemicolon
minimal(relational_init_expression) = (* 1 *) KWthis
minimal(relational_expression_no_in) = (* 1 *) KWthis
minimal(relational_expression) = (* 1 *) KWthis
minimal(qualified_identifier) = (* 3 *) Lident Ldcolon Lident
minimal(property_selector) = (* 1 *) Lident
minimal(property_name_and_value_list) = (* 3 *) Lident Lcolon KWthis
minimal(property_name) = (* 1 *) Lident
minimal(property_identifier) = (* 1 *) Lstar
minimal(program) = (* 2 *) Leof Leof
minimal(primary_init_expression) = (* 1 *) KWthis
minimal(primary_expression) = (* 1 *) KWthis
minimal(postfix_init_expression) = (* 1 *) KWthis
minimal(postfix_expression) = (* 1 *) KWthis
minimal(optional_statement_list) = (* 0 *)
minimal(optional_expression_no_in) = (* 0 *)
minimal(optional_expression) = (* 0 *)
minimal(object_literal) = (* 2 *) Llbrace Lrbrace
minimal(numeric_literal) = (* 1 *) Lfloat
minimal(non_empty_statement_list) = (* 1 *) Lsemicolon
minimal(non_empty_element_list) = (* 1 *) Lcomma
minimal(new_init_expression) = (* 1 *) KWthis
minimal(new_expression) = (* 1 *) KWthis
minimal(multiplicative_init_expression) = (* 1 *) KWthis
minimal(multiplicative_expression) = (* 1 *) KWthis
minimal(member_init_expression) = (* 1 *) KWthis
minimal(member_expression) = (* 1 *) KWthis
minimal(logical_or_init_expression) = (* 1 *) KWthis
minimal(logical_or_expression_no_in) = (* 1 *) KWthis
minimal(logical_or_expression) = (* 1 *) KWthis
minimal(logical_and_init_expression) = (* 1 *) KWthis
minimal(logical_and_expression_no_in) = (* 1 *) KWthis
minimal(logical_and_expression) = (* 1 *) KWthis
minimal(literal) = (* 1 *) Lfloat
minimal(left_hand_side_init_expression) = (* 1 *) KWthis
minimal(left_hand_side_expression) = (* 1 *) KWthis
minimal(labelled_statement) = (* 3 *) Lident Lcolon Lsemicolon
minimal(iteration_statement) = (* 5 *) KWwhile Llparen KWthis Lrparen Lsemicolon
minimal(initialiser_no_in) = (* 2 *) Lassign KWthis
minimal(initialiser) = (* 2 *) Lassign KWthis
minimal(init_expression) = (* 1 *) KWthis
minimal(if_statement) = (* 5 *) KWif Llparen KWthis Lrparen Lsemicolon
minimal(identifier) = (* 1 *) Lident
minimal(function_expression) = (* 6 *) KWfunction Llparen Lrparen Llbrace Leof Lrbrace
minimal(function_declaration) = (* 7 *) KWfunction Lident Llparen Lrparen Llbrace Leof Lrbrace
minimal(function_body) = (* 1 *) Leof
minimal(formal_parameter_list) = (* 0 *)
minimal(for_bracket) = (* 2 *) Lsemicolon Lsemicolon
minimal(finally_prod) = (* 3 *) KWfinally Llbrace Lrbrace
minimal(expression_statement) = (* 2 *) KWthis Lsemicolon
minimal(expression_no_in) = (* 1 *) KWthis
minimal(expression) = (* 1 *) KWthis
minimal(equality_init_expression) = (* 1 *) KWthis
minimal(equality_expression_no_in) = (* 1 *) KWthis
minimal(equality_expression) = (* 1 *) KWthis
minimal(empty_statement) = (* 1 *) Lsemicolon
minimal(elision) = (* 1 *) Lcomma
minimal(default_xml_namespace_statement) = (* 4 *) CKWdefaultxmlnamespace Lassign KWthis Lsemicolon
minimal(default_clause) = (* 2 *) KWdefault Lcolon
minimal(continue_statement) = (* 2 *) KWcontinue Lsemicolon
minimal(conditional_init_expression) = (* 1 *) KWthis
minimal(conditional_expression_no_in) = (* 1 *) KWthis
minimal(conditional_expression) = (* 1 *) KWthis
minimal(catch_prod) = (* 6 *) KWcatch Llparen Lident Lrparen Llbrace Lrbrace
minimal(case_clauses) = (* 3 *) KWcase KWthis Lcolon
minimal(case_clause) = (* 3 *) KWcase KWthis Lcolon
minimal(case_block) = (* 2 *) Llbrace Lrbrace
minimal(call_init_expression) = (* 3 *) KWthis Llparen Lrparen
minimal(call_expression) = (* 3 *) KWthis Llparen Lrparen
minimal(break_statement) = (* 2 *) KWbreak Lsemicolon
minimal(block) = (* 2 *) Llbrace Lrbrace
minimal(bitwise_xor_init_expression) = (* 1 *) KWthis
minimal(bitwise_xor_expression_no_in) = (* 1 *) KWthis
minimal(bitwise_xor_expression) = (* 1 *) KWthis
minimal(bitwise_or_init_expression) = (* 1 *) KWthis
minimal(bitwise_or_expression_no_in) = (* 1 *) KWthis
minimal(bitwise_or_expression) = (* 1 *) KWthis
minimal(bitwise_and_init_expression) = (* 1 *) KWthis
minimal(bitwise_and_expression_no_in) = (* 1 *) KWthis
minimal(bitwise_and_expression) = (* 1 *) KWthis
minimal(attribute_identifier) = (* 2 *) Lat Lident
minimal(assignment_operator) = (* 1 *) Lassign
minimal(assignment_init_expression) = (* 1 *) KWthis
minimal(assignment_expression_no_in) = (* 1 *) KWthis
minimal(assignment_expression) = (* 1 *) KWthis
minimal(array_literal) = (* 2 *) Llbracket Lrbracket
minimal(arguments) = (* 2 *) Llparen Lrparen
minimal(argument_list) = (* 1 *) KWthis
minimal(additive_init_expression) = (* 1 *) KWthis
minimal(additive_expression) = (* 1 *) KWthis
follow(xml_tag_content_option) = XMLtag_close XMLempty_tag_close
follow(xml_tag_content) = XMLwhitespace XMLtag_close XMLtag_chars XMLempty_tag_close XMLassign Llbrace
follow(xml_markup) = XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(xml_list_initialiser) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(xml_initialiser) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(xml_element_content) = XMLctag_open
follow(xml_element) = XMLtext XMLpi XMLotag_open XMLctag_open XMLcomment XMLcdata Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Llbrace Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(with_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(wildcard_identifier) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(variable_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(variable_declaration_no_in) = Lsemicolon Lcomma KWin
follow(variable_declaration_list_no_in) = Lsemicolon Lcomma
follow(variable_declaration_list) = Lsemicolon Lcomma
follow(variable_declaration) = Lsemicolon Lcomma
follow(unary_init_expression) = Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin
follow(unary_expression) = Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin
follow(try_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(throw_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(switch_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(source_elements) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(source_element) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(shift_init_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin
follow(shift_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lneq Lne Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin
follow(sequence_of_init_expression) = Lsemicolon Lcomma
follow(sequence_of_expression_no_in) = Lsemicolon Lcomma
follow(sequence_of_expression) = Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon
follow(return_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(relational_init_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin
follow(relational_expression_no_in) = Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin
follow(relational_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin
follow(qualified_identifier) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(property_selector) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(property_name_and_value_list) = Lrbrace Lcomma
follow(property_name) = Lcolon
follow(property_identifier) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(program) = #
follow(primary_init_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(primary_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(postfix_init_expression) = Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin
follow(postfix_expression) = Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin
follow(optional_statement_list) = Lrbrace
follow(optional_expression_no_in) = Lsemicolon
follow(optional_expression) = Lsemicolon Lrparen
follow(object_literal) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(numeric_literal) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(non_empty_statement_list) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfor KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(non_empty_element_list) = Lrbracket Lcomma
follow(new_init_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(new_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(multiplicative_init_expression) = Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrem Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin
follow(multiplicative_expression) = Lxor Lstar Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrem Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin
follow(member_init_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(member_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(logical_or_init_expression) = Lsemicolon Lsc_or Lhook Lcomma
follow(logical_or_expression_no_in) = Lsemicolon Lsc_or Lhook Lcomma Lcolon KWin
follow(logical_or_expression) = Lsemicolon Lsc_or Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon
follow(logical_and_init_expression) = Lsemicolon Lsc_or Lsc_and Lhook Lcomma
follow(logical_and_expression_no_in) = Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon KWin
follow(logical_and_expression) = Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon
follow(literal) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(left_hand_side_init_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(left_hand_side_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Lless Lle Lincr Lhook Lgreater Lge Leqq Leq Ldecr Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(labelled_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(iteration_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(initialiser_no_in) = Lsemicolon Lcomma KWin
follow(initialiser) = Lsemicolon Lcomma
follow(init_expression) = Lsemicolon
follow(if_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(identifier) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Ldcolon Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(function_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(function_declaration) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWdo KWdelete KWcontinue KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(function_body) = Lrbrace
follow(formal_parameter_list) = Lrparen Lcomma
follow(for_bracket) = Lrparen
follow(finally_prod) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(expression_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(expression_no_in) = Lsemicolon
follow(expression) = Lsemicolon Lrparen Lrbracket Lrbrace Lcolon
follow(equality_init_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lbit_or Lbit_and
follow(equality_expression_no_in) = Lxor Lsemicolon Lsc_or Lsc_and Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWin
follow(equality_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lneq Lne Lhook Leqq Leq Lcomma Lcolon Lbit_or Lbit_and
follow(empty_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(elision) = Lrbracket Lcomma
follow(default_xml_namespace_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(default_clause) = Lrbrace KWcase
follow(continue_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(conditional_init_expression) = Lsemicolon Lcomma
follow(conditional_expression_no_in) = Lsemicolon Lcomma Lcolon KWin
follow(conditional_expression) = Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon
follow(catch_prod) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(case_clauses) = Lrbrace KWdefault KWcase
follow(case_clause) = Lrbrace KWdefault KWcase
follow(case_block) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(call_init_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lremassign Lrem Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(call_expression) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(break_statement) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWelse KWdo KWdelete KWdefault KWcontinue KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(block) = Ltrue Ltilde Lstring Lsemicolon Lregexp Lrbrace Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Leof Ldecr Lbang LCcomment KWwith KWwhile KWvoid KWvar KWtypeof KWtry KWthrow KWthis KWswitch KWreturn KWnew KWif KWfunction KWfor KWfinally KWelse KWdo KWdelete KWdefault KWcontinue KWcatch KWcase KWbreak CKWxml CKWnamespace CKWeach CKWdefaultxmlnamespace
follow(bitwise_xor_init_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or
follow(bitwise_xor_expression_no_in) = Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin
follow(bitwise_xor_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or
follow(bitwise_or_init_expression) = Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or
follow(bitwise_or_expression_no_in) = Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or KWin
follow(bitwise_or_expression) = Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or
follow(bitwise_and_init_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lbit_or Lbit_and
follow(bitwise_and_expression_no_in) = Lxor Lsemicolon Lsc_or Lsc_and Lhook Lcomma Lcolon Lbit_or Lbit_and KWin
follow(bitwise_and_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrparen Lrbracket Lrbrace Lhook Lcomma Lcolon Lbit_or Lbit_and
follow(attribute_identifier) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(assignment_operator) = XMLpi XMLotag_open XMLcomment XMLcdata Ltrue Ltilde Lstring Lstar Lregexp Lplus Lnull Lminus Llparen Llbracket Llbrace Lint Lincr Lident Lfloat Lfalse Ldecr Lbang Lat LCcomment KWvoid KWtypeof KWthis KWnew KWfunction KWdelete CKWxml CKWnamespace CKWeach
follow(assignment_init_expression) = Lsemicolon Lcomma
follow(assignment_expression_no_in) = Lsemicolon Lcomma Lcolon KWin
follow(assignment_expression) = Lsemicolon Lrparen Lrbracket Lrbrace Lcomma Lcolon
follow(array_literal) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(arguments) = Lxorassign Lxor Lstarassign Lstar Lslashassign Lslash Lsemicolon Lsc_or Lsc_and Lrunsignedshiftassign Lrunsignedshift Lrsignedshiftassign Lrsignedshift Lrparen Lremassign Lrem Lrbracket Lrbrace Lplusassign Lplus Lorassign Lneq Lne Lminusassign Lminus Llshiftassign Llshift Llparen Lless Lle Llbracket Lincr Lhook Lgreater Lge Leqq Leq Ldot Ldecr Lddot Lcomma Lcolon Lbit_or Lbit_and Lassign Landassign KWinstanceof KWin
follow(argument_list) = Lrparen Lcomma
follow(additive_init_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lbit_or Lbit_and KWinstanceof KWin
follow(additive_expression) = Lxor Lsemicolon Lsc_or Lsc_and Lrunsignedshift Lrsignedshift Lrparen Lrbracket Lrbrace Lplus Lneq Lne Lminus Llshift Lless Lle Lhook Lgreater Lge Leqq Leq Lcomma Lcolon Lbit_or Lbit_and KWinstanceof KWin
Built an LR(0) automaton with 660 states.
The grammar is not SLR(1) -- 12 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 660 states.
Warning: one state has shift/reduce conflicts.
Warning: one shift/reduce conflict was arbitrarily resolved.
239 out of 660 states have a default reduction.
224 out of 660 states are represented.
0 out of 257 symbols keep track of their start position.
0 out of 257 symbols keep track of their end position.
188 out of 362 productions exploit shiftreduce optimization.
0 out of 660 states can peek at an error.
1805 functions before inlining, 237 functions after inlining.
