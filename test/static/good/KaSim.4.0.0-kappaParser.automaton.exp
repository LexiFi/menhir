State 0:
## Known stack suffix:
##
## LR(1) items:
interactive_command' -> . interactive_command [ # ]
## Transitions:
-- On error shift to state 1
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On RUN shift to state 179
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On EOF shift to state 249
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On interactive_command shift to state 250
-- On effect_list shift to state 251
-- On effect shift to state 246
## Reductions:

State 1:
## Known stack suffix:
## error
## LR(1) items:
interactive_command -> error . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production interactive_command -> error

State 2:
## Known stack suffix:
## TRACK
## LR(1) items:
effect -> TRACK . LABEL boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
effect -> TRACK . pattern boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 3
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On LABEL shift to state 65
-- On pattern shift to state 69
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->

State 3:
## Known stack suffix:
## PLUS
## LR(1) items:
mod_agent -> PLUS . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production mod_agent -> PLUS

State 4:
## Known stack suffix:
## OP_PAR
## LR(1) items:
pattern -> OP_PAR . pattern CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 3
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On pattern shift to state 6
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->

State 5:
## Known stack suffix:
## MINUS
## LR(1) items:
mod_agent -> MINUS . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production mod_agent -> MINUS

State 6:
## Known stack suffix:
## OP_PAR pattern
## LR(1) items:
pattern -> OP_PAR pattern . CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## OP_PAR pattern CL_PAR
## LR(1) items:
pattern -> OP_PAR pattern CL_PAR . [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR
--   reduce production pattern -> OP_PAR pattern CL_PAR

State 8:
## Known stack suffix:
## mod_agent
## LR(1) items:
agent_expression -> mod_agent . ID OP_PAR interface_expression CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
agent_expression -> mod_agent . ID error [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
## Transitions:
-- On ID shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## mod_agent ID
## LR(1) items:
agent_expression -> mod_agent ID . OP_PAR interface_expression CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
agent_expression -> mod_agent ID . error [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
## Transitions:
-- On error shift to state 10
-- On OP_PAR shift to state 11
## Reductions:

State 10:
## Known stack suffix:
## mod_agent ID error
## LR(1) items:
agent_expression -> mod_agent ID error . [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR
--   reduce production agent_expression -> mod_agent ID error

State 11:
## Known stack suffix:
## mod_agent ID OP_PAR
## LR(1) items:
agent_expression -> mod_agent ID OP_PAR . interface_expression CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
## Transitions:
-- On ID shift to state 12
-- On port_expression shift to state 57
-- On interface_expression shift to state 60
## Reductions:
-- On CL_PAR
--   reduce production interface_expression ->

State 12:
## Known stack suffix:
## ID
## LR(1) items:
port_expression -> ID . internal_state link_state_mod [ COMMA CL_PAR ]
port_expression -> ID . internal_state link_state link_state_mod [ COMMA CL_PAR ]
port_expression -> ID . internal_state DIV KAPPA_MRK link_state_mod [ COMMA CL_PAR ]
port_expression -> ID . internal_state DIV KAPPA_MRK link_state link_state_mod [ COMMA CL_PAR ]
port_expression -> ID . PLUS EQUAL INT [ COMMA CL_PAR ]
port_expression -> ID . PLUS EQUAL MINUS INT [ COMMA CL_PAR ]
port_expression -> ID . counter_test PLUS EQUAL INT [ COMMA CL_PAR ]
port_expression -> ID . counter_test PLUS EQUAL MINUS INT [ COMMA CL_PAR ]
port_expression -> ID . counter_test [ COMMA CL_PAR ]
## Transitions:
-- On error shift to state 13
-- On TYPE shift to state 14
-- On PLUS shift to state 19
-- On KAPPA_MRK shift to state 24
-- On internal_state shift to state 26
-- On counter_test shift to state 51
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production internal_state ->

State 13:
## Known stack suffix:
## error
## LR(1) items:
internal_state -> error . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production internal_state -> error

State 14:
## Known stack suffix:
## TYPE
## LR(1) items:
counter_test -> TYPE . INT [ PLUS COMMA CL_PAR ]
counter_test -> TYPE . GREATER INT [ PLUS COMMA CL_PAR ]
counter_test -> TYPE . ID [ PLUS COMMA CL_PAR ]
## Transitions:
-- On INT shift to state 15
-- On ID shift to state 16
-- On GREATER shift to state 17
## Reductions:

State 15:
## Known stack suffix:
## TYPE INT
## LR(1) items:
counter_test -> TYPE INT . [ PLUS COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On PLUS COMMA CL_PAR
--   reduce production counter_test -> TYPE INT

State 16:
## Known stack suffix:
## TYPE ID
## LR(1) items:
counter_test -> TYPE ID . [ PLUS COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On PLUS COMMA CL_PAR
--   reduce production counter_test -> TYPE ID

State 17:
## Known stack suffix:
## TYPE GREATER
## LR(1) items:
counter_test -> TYPE GREATER . INT [ PLUS COMMA CL_PAR ]
## Transitions:
-- On INT shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## TYPE GREATER INT
## LR(1) items:
counter_test -> TYPE GREATER INT . [ PLUS COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On PLUS COMMA CL_PAR
--   reduce production counter_test -> TYPE GREATER INT

State 19:
## Known stack suffix:
## ID PLUS
## LR(1) items:
port_expression -> ID PLUS . EQUAL INT [ COMMA CL_PAR ]
port_expression -> ID PLUS . EQUAL MINUS INT [ COMMA CL_PAR ]
## Transitions:
-- On EQUAL shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## ID PLUS EQUAL
## LR(1) items:
port_expression -> ID PLUS EQUAL . INT [ COMMA CL_PAR ]
port_expression -> ID PLUS EQUAL . MINUS INT [ COMMA CL_PAR ]
## Transitions:
-- On MINUS shift to state 21
-- On INT shift to state 23
## Reductions:

State 21:
## Known stack suffix:
## ID PLUS EQUAL MINUS
## LR(1) items:
port_expression -> ID PLUS EQUAL MINUS . INT [ COMMA CL_PAR ]
## Transitions:
-- On INT shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## ID PLUS EQUAL MINUS INT
## LR(1) items:
port_expression -> ID PLUS EQUAL MINUS INT . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID PLUS EQUAL MINUS INT

State 23:
## Known stack suffix:
## ID PLUS EQUAL INT
## LR(1) items:
port_expression -> ID PLUS EQUAL INT . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID PLUS EQUAL INT

State 24:
## Known stack suffix:
## KAPPA_MRK
## LR(1) items:
internal_state -> KAPPA_MRK . internal_state [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
-- On error shift to state 13
-- On KAPPA_MRK shift to state 24
-- On internal_state shift to state 25
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production internal_state ->

State 25:
## Known stack suffix:
## KAPPA_MRK internal_state
## LR(1) items:
internal_state -> KAPPA_MRK internal_state . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production internal_state -> KAPPA_MRK internal_state

State 26:
## Known stack suffix:
## ID internal_state
## LR(1) items:
port_expression -> ID internal_state . link_state_mod [ COMMA CL_PAR ]
port_expression -> ID internal_state . link_state link_state_mod [ COMMA CL_PAR ]
port_expression -> ID internal_state . DIV KAPPA_MRK link_state_mod [ COMMA CL_PAR ]
port_expression -> ID internal_state . DIV KAPPA_MRK link_state link_state_mod [ COMMA CL_PAR ]
## Transitions:
-- On KAPPA_WLD shift to state 27
-- On KAPPA_LNK shift to state 28
-- On DIV shift to state 36
-- On link_state_mod shift to state 48
-- On link_state shift to state 49
-- On a_link_state shift to state 46
## Reductions:
-- On COMMA CL_PAR
--   reduce production link_state_mod ->

State 27:
## Known stack suffix:
## KAPPA_WLD
## LR(1) items:
a_link_state -> KAPPA_WLD . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production a_link_state -> KAPPA_WLD

State 28:
## Known stack suffix:
## KAPPA_LNK
## LR(1) items:
a_link_state -> KAPPA_LNK . DOT [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
a_link_state -> KAPPA_LNK . INT [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
a_link_state -> KAPPA_LNK . KAPPA_SEMI [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
a_link_state -> KAPPA_LNK . ID DOT ID [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
a_link_state -> KAPPA_LNK . error [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
-- On error shift to state 29
-- On KAPPA_SEMI shift to state 30
-- On INT shift to state 31
-- On ID shift to state 32
-- On DOT shift to state 35
## Reductions:

State 29:
## Known stack suffix:
## KAPPA_LNK error
## LR(1) items:
a_link_state -> KAPPA_LNK error . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production a_link_state -> KAPPA_LNK error

State 30:
## Known stack suffix:
## KAPPA_LNK KAPPA_SEMI
## LR(1) items:
a_link_state -> KAPPA_LNK KAPPA_SEMI . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production a_link_state -> KAPPA_LNK KAPPA_SEMI

State 31:
## Known stack suffix:
## KAPPA_LNK INT
## LR(1) items:
a_link_state -> KAPPA_LNK INT . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production a_link_state -> KAPPA_LNK INT

State 32:
## Known stack suffix:
## KAPPA_LNK ID
## LR(1) items:
a_link_state -> KAPPA_LNK ID . DOT ID [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
-- On DOT shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## KAPPA_LNK ID DOT
## LR(1) items:
a_link_state -> KAPPA_LNK ID DOT . ID [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
-- On ID shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## KAPPA_LNK ID DOT ID
## LR(1) items:
a_link_state -> KAPPA_LNK ID DOT ID . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production a_link_state -> KAPPA_LNK ID DOT ID

State 35:
## Known stack suffix:
## KAPPA_LNK DOT
## LR(1) items:
a_link_state -> KAPPA_LNK DOT . [ KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On KAPPA_WLD KAPPA_LNK DIV COMMA CL_PAR
--   reduce production a_link_state -> KAPPA_LNK DOT

State 36:
## Known stack suffix:
## ID internal_state DIV
## LR(1) items:
link_state_mod -> DIV . KAPPA_LNK DOT [ COMMA CL_PAR ]
link_state_mod -> DIV . KAPPA_LNK INT [ COMMA CL_PAR ]
link_state_mod -> DIV . error [ COMMA CL_PAR ]
port_expression -> ID internal_state DIV . KAPPA_MRK link_state_mod [ COMMA CL_PAR ]
port_expression -> ID internal_state DIV . KAPPA_MRK link_state link_state_mod [ COMMA CL_PAR ]
## Transitions:
-- On error shift to state 37
-- On KAPPA_MRK shift to state 38
-- On KAPPA_LNK shift to state 40
## Reductions:

State 37:
## Known stack suffix:
## DIV error
## LR(1) items:
link_state_mod -> DIV error . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production link_state_mod -> DIV error

State 38:
## Known stack suffix:
## ID internal_state DIV KAPPA_MRK
## LR(1) items:
port_expression -> ID internal_state DIV KAPPA_MRK . link_state_mod [ COMMA CL_PAR ]
port_expression -> ID internal_state DIV KAPPA_MRK . link_state link_state_mod [ COMMA CL_PAR ]
## Transitions:
-- On KAPPA_WLD shift to state 27
-- On KAPPA_LNK shift to state 28
-- On DIV shift to state 39
-- On link_state_mod shift to state 43
-- On link_state shift to state 44
-- On a_link_state shift to state 46
## Reductions:
-- On COMMA CL_PAR
--   reduce production link_state_mod ->

State 39:
## Known stack suffix:
## DIV
## LR(1) items:
link_state_mod -> DIV . KAPPA_LNK DOT [ COMMA CL_PAR ]
link_state_mod -> DIV . KAPPA_LNK INT [ COMMA CL_PAR ]
link_state_mod -> DIV . error [ COMMA CL_PAR ]
## Transitions:
-- On error shift to state 37
-- On KAPPA_LNK shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## DIV KAPPA_LNK
## LR(1) items:
link_state_mod -> DIV KAPPA_LNK . DOT [ COMMA CL_PAR ]
link_state_mod -> DIV KAPPA_LNK . INT [ COMMA CL_PAR ]
## Transitions:
-- On INT shift to state 41
-- On DOT shift to state 42
## Reductions:

State 41:
## Known stack suffix:
## DIV KAPPA_LNK INT
## LR(1) items:
link_state_mod -> DIV KAPPA_LNK INT . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production link_state_mod -> DIV KAPPA_LNK INT

State 42:
## Known stack suffix:
## DIV KAPPA_LNK DOT
## LR(1) items:
link_state_mod -> DIV KAPPA_LNK DOT . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production link_state_mod -> DIV KAPPA_LNK DOT

State 43:
## Known stack suffix:
## ID internal_state DIV KAPPA_MRK link_state_mod
## LR(1) items:
port_expression -> ID internal_state DIV KAPPA_MRK link_state_mod . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID internal_state DIV KAPPA_MRK link_state_mod

State 44:
## Known stack suffix:
## ID internal_state DIV KAPPA_MRK link_state
## LR(1) items:
port_expression -> ID internal_state DIV KAPPA_MRK link_state . link_state_mod [ COMMA CL_PAR ]
## Transitions:
-- On DIV shift to state 39
-- On link_state_mod shift to state 45
## Reductions:
-- On COMMA CL_PAR
--   reduce production link_state_mod ->

State 45:
## Known stack suffix:
## ID internal_state DIV KAPPA_MRK link_state link_state_mod
## LR(1) items:
port_expression -> ID internal_state DIV KAPPA_MRK link_state link_state_mod . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID internal_state DIV KAPPA_MRK link_state link_state_mod

State 46:
## Known stack suffix:
## a_link_state
## LR(1) items:
link_state -> a_link_state . link_state [ DIV COMMA CL_PAR ]
link_state -> a_link_state . [ DIV COMMA CL_PAR ]
## Transitions:
-- On KAPPA_WLD shift to state 27
-- On KAPPA_LNK shift to state 28
-- On link_state shift to state 47
-- On a_link_state shift to state 46
## Reductions:
-- On DIV COMMA CL_PAR
--   reduce production link_state -> a_link_state

State 47:
## Known stack suffix:
## a_link_state link_state
## LR(1) items:
link_state -> a_link_state link_state . [ DIV COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On DIV COMMA CL_PAR
--   reduce production link_state -> a_link_state link_state

State 48:
## Known stack suffix:
## ID internal_state link_state_mod
## LR(1) items:
port_expression -> ID internal_state link_state_mod . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID internal_state link_state_mod

State 49:
## Known stack suffix:
## ID internal_state link_state
## LR(1) items:
port_expression -> ID internal_state link_state . link_state_mod [ COMMA CL_PAR ]
## Transitions:
-- On DIV shift to state 39
-- On link_state_mod shift to state 50
## Reductions:
-- On COMMA CL_PAR
--   reduce production link_state_mod ->

State 50:
## Known stack suffix:
## ID internal_state link_state link_state_mod
## LR(1) items:
port_expression -> ID internal_state link_state link_state_mod . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID internal_state link_state link_state_mod

State 51:
## Known stack suffix:
## ID counter_test
## LR(1) items:
port_expression -> ID counter_test . PLUS EQUAL INT [ COMMA CL_PAR ]
port_expression -> ID counter_test . PLUS EQUAL MINUS INT [ COMMA CL_PAR ]
port_expression -> ID counter_test . [ COMMA CL_PAR ]
## Transitions:
-- On PLUS shift to state 52
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID counter_test

State 52:
## Known stack suffix:
## ID counter_test PLUS
## LR(1) items:
port_expression -> ID counter_test PLUS . EQUAL INT [ COMMA CL_PAR ]
port_expression -> ID counter_test PLUS . EQUAL MINUS INT [ COMMA CL_PAR ]
## Transitions:
-- On EQUAL shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## ID counter_test PLUS EQUAL
## LR(1) items:
port_expression -> ID counter_test PLUS EQUAL . INT [ COMMA CL_PAR ]
port_expression -> ID counter_test PLUS EQUAL . MINUS INT [ COMMA CL_PAR ]
## Transitions:
-- On MINUS shift to state 54
-- On INT shift to state 56
## Reductions:

State 54:
## Known stack suffix:
## ID counter_test PLUS EQUAL MINUS
## LR(1) items:
port_expression -> ID counter_test PLUS EQUAL MINUS . INT [ COMMA CL_PAR ]
## Transitions:
-- On INT shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## ID counter_test PLUS EQUAL MINUS INT
## LR(1) items:
port_expression -> ID counter_test PLUS EQUAL MINUS INT . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID counter_test PLUS EQUAL MINUS INT

State 56:
## Known stack suffix:
## ID counter_test PLUS EQUAL INT
## LR(1) items:
port_expression -> ID counter_test PLUS EQUAL INT . [ COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On COMMA CL_PAR
--   reduce production port_expression -> ID counter_test PLUS EQUAL INT

State 57:
## Known stack suffix:
## port_expression
## LR(1) items:
interface_expression -> port_expression . COMMA interface_expression [ CL_PAR ]
interface_expression -> port_expression . [ CL_PAR ]
## Transitions:
-- On COMMA shift to state 58
## Reductions:
-- On CL_PAR
--   reduce production interface_expression -> port_expression

State 58:
## Known stack suffix:
## port_expression COMMA
## LR(1) items:
interface_expression -> port_expression COMMA . interface_expression [ CL_PAR ]
## Transitions:
-- On ID shift to state 12
-- On port_expression shift to state 57
-- On interface_expression shift to state 59
## Reductions:
-- On CL_PAR
--   reduce production interface_expression ->

State 59:
## Known stack suffix:
## port_expression COMMA interface_expression
## LR(1) items:
interface_expression -> port_expression COMMA interface_expression . [ CL_PAR ]
## Transitions:
## Reductions:
-- On CL_PAR
--   reduce production interface_expression -> port_expression COMMA interface_expression

State 60:
## Known stack suffix:
## mod_agent ID OP_PAR interface_expression
## LR(1) items:
agent_expression -> mod_agent ID OP_PAR interface_expression . CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## mod_agent ID OP_PAR interface_expression CL_PAR
## LR(1) items:
agent_expression -> mod_agent ID OP_PAR interface_expression CL_PAR . [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF COMMA CL_PAR
--   reduce production agent_expression -> mod_agent ID OP_PAR interface_expression CL_PAR

State 62:
## Known stack suffix:
## agent_expression
## LR(1) items:
pattern -> agent_expression . COMMA pattern [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR ]
pattern -> agent_expression . [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR ]
## Transitions:
-- On COMMA shift to state 63
## Reductions:
-- On UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR
--   reduce production pattern -> agent_expression

State 63:
## Known stack suffix:
## agent_expression COMMA
## LR(1) items:
pattern -> agent_expression COMMA . pattern [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 3
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On pattern shift to state 64
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->

State 64:
## Known stack suffix:
## agent_expression COMMA pattern
## LR(1) items:
pattern -> agent_expression COMMA pattern . [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE KAPPA_RAR KAPPA_LRAR FALSE EOF CL_PAR
--   reduce production pattern -> agent_expression COMMA pattern

State 65:
## Known stack suffix:
## TRACK LABEL
## LR(1) items:
effect -> TRACK LABEL . boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 66
-- On FALSE shift to state 67
-- On boolean shift to state 68
## Reductions:

State 66:
## Known stack suffix:
## TRUE
## LR(1) items:
boolean -> TRUE . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production boolean -> TRUE

State 67:
## Known stack suffix:
## FALSE
## LR(1) items:
boolean -> FALSE . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production boolean -> FALSE

State 68:
## Known stack suffix:
## TRACK LABEL boolean
## LR(1) items:
effect -> TRACK LABEL boolean . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> TRACK LABEL boolean

State 69:
## Known stack suffix:
## TRACK pattern
## LR(1) items:
effect -> TRACK pattern . boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 66
-- On FALSE shift to state 67
-- On boolean shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## TRACK pattern boolean
## LR(1) items:
effect -> TRACK pattern boolean . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> TRACK pattern boolean

State 71:
## Known stack suffix:
## STOP
## LR(1) items:
effect -> STOP . print_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On print_expr shift to state 170
-- On nonempty_print_expr shift to state 171
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production print_expr ->

State 72:
## Known stack suffix:
## TMAX
## LR(1) items:
constant -> TMAX . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production constant -> TMAX

State 73:
## Known stack suffix:
## TIME
## LR(1) items:
variable -> TIME . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production variable -> TIME

State 74:
## Known stack suffix:
## TAN
## LR(1) items:
small_alg_expr -> TAN . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 163
-- On constant shift to state 113
## Reductions:

State 75:
## Known stack suffix:
## SQRT
## LR(1) items:
small_alg_expr -> SQRT . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 162
-- On constant shift to state 113
## Reductions:

State 76:
## Known stack suffix:
## SINUS
## LR(1) items:
small_alg_expr -> SINUS . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 161
-- On constant shift to state 113
## Reductions:

State 77:
## Known stack suffix:
## PIPE
## LR(1) items:
variable -> PIPE . ID PIPE [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
variable -> PIPE . non_empty_mixture PIPE [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On ID shift to state 78
-- On non_empty_mixture shift to state 85
## Reductions:

State 78:
## Known stack suffix:
## PIPE ID
## LR(1) items:
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR [ PIPE ]
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR COMMA pattern [ PIPE ]
variable -> PIPE ID . PIPE [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On PIPE shift to state 79
-- On OP_PAR shift to state 80
## Reductions:

State 79:
## Known stack suffix:
## PIPE ID PIPE
## LR(1) items:
variable -> PIPE ID PIPE . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production variable -> PIPE ID PIPE

State 80:
## Known stack suffix:
## ID OP_PAR
## LR(1) items:
non_empty_mixture -> ID OP_PAR . interface_expression CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
non_empty_mixture -> ID OP_PAR . interface_expression CL_PAR COMMA pattern [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
## Transitions:
-- On ID shift to state 12
-- On port_expression shift to state 57
-- On interface_expression shift to state 81
## Reductions:
-- On CL_PAR
--   reduce production interface_expression ->

State 81:
## Known stack suffix:
## ID OP_PAR interface_expression
## LR(1) items:
non_empty_mixture -> ID OP_PAR interface_expression . CL_PAR [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
non_empty_mixture -> ID OP_PAR interface_expression . CL_PAR COMMA pattern [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## ID OP_PAR interface_expression CL_PAR
## LR(1) items:
non_empty_mixture -> ID OP_PAR interface_expression CL_PAR . [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
non_empty_mixture -> ID OP_PAR interface_expression CL_PAR . COMMA pattern [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
## Transitions:
-- On COMMA shift to state 83
## Reductions:
-- On UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR
--   reduce production non_empty_mixture -> ID OP_PAR interface_expression CL_PAR

State 83:
## Known stack suffix:
## ID OP_PAR interface_expression CL_PAR COMMA
## LR(1) items:
non_empty_mixture -> ID OP_PAR interface_expression CL_PAR COMMA . pattern [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 3
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On pattern shift to state 84
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->

State 84:
## Known stack suffix:
## ID OP_PAR interface_expression CL_PAR COMMA pattern
## LR(1) items:
non_empty_mixture -> ID OP_PAR interface_expression CL_PAR COMMA pattern . [ UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL TRUE SEMICOLON REPEAT PIPE NEWLINE FALSE EOF CL_PAR
--   reduce production non_empty_mixture -> ID OP_PAR interface_expression CL_PAR COMMA pattern

State 85:
## Known stack suffix:
## PIPE non_empty_mixture
## LR(1) items:
variable -> PIPE non_empty_mixture . PIPE [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On PIPE shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## PIPE non_empty_mixture PIPE
## LR(1) items:
variable -> PIPE non_empty_mixture PIPE . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production variable -> PIPE non_empty_mixture PIPE

State 87:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . alg_expr CL_PAR [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 147
## Reductions:

State 88:
## Known stack suffix:
## TRUE
## LR(1) items:
small_bool_expr -> TRUE . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production small_bool_expr -> TRUE

State 89:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . alg_expr CL_PAR [ UNTIL THEN SMALLER SEMICOLON REPEAT POW PLUS OR OP_PAR OP_CUR NEWLINE MULT MODULO MINUS ID GREATER EQUAL EOF ELSE DIV DIFF COMMA CL_PAR AND ]
small_bool_expr -> OP_PAR . bool_expr CL_PAR [ THEN OR DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 137
-- On alg_expr shift to state 147
## Reductions:

State 90:
## Known stack suffix:
## NULL_EVENT
## LR(1) items:
variable -> NULL_EVENT . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production variable -> NULL_EVENT

State 91:
## Known stack suffix:
## NOT
## LR(1) items:
bool_expr -> NOT . small_bool_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On OP_PAR shift to state 92
-- On FALSE shift to state 130
-- On small_bool_expr shift to state 160
## Reductions:

State 92:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_bool_expr -> OP_PAR . bool_expr CL_PAR [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 137
-- On alg_expr shift to state 144
## Reductions:

State 93:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . alg_expr CL_PAR [ TYPE SMALLER POW PLUS OP_PAR MULT MODULO MINUS ID GREATER EQUAL DIV DIFF CL_CUR ]
small_bool_expr -> OP_PAR . bool_expr CL_PAR [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 137
-- On alg_expr shift to state 147
## Reductions:

State 94:
## Known stack suffix:
## MINUS
## LR(1) items:
mid_alg_expr -> MINUS . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 121
-- On constant shift to state 113
## Reductions:

State 95:
## Known stack suffix:
## MIN
## LR(1) items:
small_alg_expr -> MIN . small_alg_expr small_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 119
-- On nbr shift to state 111
-- On constant shift to state 113
## Reductions:

State 96:
## Known stack suffix:
## MAX
## LR(1) items:
small_alg_expr -> MAX . small_alg_expr small_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 117
-- On nbr shift to state 111
-- On constant shift to state 113
## Reductions:

State 97:
## Known stack suffix:
## LOG
## LR(1) items:
small_alg_expr -> LOG . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 116
-- On constant shift to state 113
## Reductions:

State 98:
## Known stack suffix:
## LABEL
## LR(1) items:
variable -> LABEL . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production variable -> LABEL

State 99:
## Known stack suffix:
## INT
## LR(1) items:
nbr -> INT . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NOT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NOT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production nbr -> INT

State 100:
## Known stack suffix:
## INFINITY
## LR(1) items:
nbr -> INFINITY . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NOT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NOT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production nbr -> INFINITY

State 101:
## Known stack suffix:
## ID
## LR(1) items:
variable -> ID . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production variable -> ID

State 102:
## Known stack suffix:
## FLOAT
## LR(1) items:
nbr -> FLOAT . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NOT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NOT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production nbr -> FLOAT

State 103:
## Known stack suffix:
## EXPONENT
## LR(1) items:
small_alg_expr -> EXPONENT . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 115
-- On constant shift to state 113
## Reductions:

State 104:
## Known stack suffix:
## EVENT
## LR(1) items:
variable -> EVENT . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production variable -> EVENT

State 105:
## Known stack suffix:
## EMAX
## LR(1) items:
constant -> EMAX . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production constant -> EMAX

State 106:
## Known stack suffix:
## CPUTIME
## LR(1) items:
constant -> CPUTIME . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production constant -> CPUTIME

State 107:
## Known stack suffix:
## COSINUS
## LR(1) items:
small_alg_expr -> COSINUS . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 114
-- On constant shift to state 113
## Reductions:

State 108:
## Known stack suffix:
## ABS
## LR(1) items:
small_alg_expr -> ABS . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 112
-- On constant shift to state 113
## Reductions:

State 109:
## Known stack suffix:
## variable
## LR(1) items:
small_alg_expr -> variable . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> variable

State 110:
## Known stack suffix:
## small_alg_expr
## LR(1) items:
mid_alg_expr -> small_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> small_alg_expr

State 111:
## Known stack suffix:
## nbr
## LR(1) items:
constant -> nbr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production constant -> nbr

State 112:
## Known stack suffix:
## ABS mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
small_alg_expr -> ABS mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> ABS mid_alg_expr

State 113:
## Known stack suffix:
## constant
## LR(1) items:
small_alg_expr -> constant . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> constant

State 114:
## Known stack suffix:
## COSINUS mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
small_alg_expr -> COSINUS mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> COSINUS mid_alg_expr

State 115:
## Known stack suffix:
## EXPONENT mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
small_alg_expr -> EXPONENT mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> EXPONENT mid_alg_expr

State 116:
## Known stack suffix:
## LOG mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
small_alg_expr -> LOG mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> LOG mid_alg_expr

State 117:
## Known stack suffix:
## MAX small_alg_expr
## LR(1) items:
small_alg_expr -> MAX small_alg_expr . small_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 118
-- On nbr shift to state 111
-- On constant shift to state 113
## Reductions:

State 118:
## Known stack suffix:
## MAX small_alg_expr small_alg_expr
## LR(1) items:
small_alg_expr -> MAX small_alg_expr small_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> MAX small_alg_expr small_alg_expr

State 119:
## Known stack suffix:
## MIN small_alg_expr
## LR(1) items:
small_alg_expr -> MIN small_alg_expr . small_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 120
-- On nbr shift to state 111
-- On constant shift to state 113
## Reductions:

State 120:
## Known stack suffix:
## MIN small_alg_expr small_alg_expr
## LR(1) items:
small_alg_expr -> MIN small_alg_expr small_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> MIN small_alg_expr small_alg_expr

State 121:
## Known stack suffix:
## MINUS mid_alg_expr
## LR(1) items:
mid_alg_expr -> MINUS mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On POW shift to state 122
-- On MULT shift to state 124
-- On MODULO shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> MINUS mid_alg_expr

State 122:
## Known stack suffix:
## mid_alg_expr POW
## LR(1) items:
mid_alg_expr -> mid_alg_expr POW . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 123
-- On constant shift to state 113
## Reductions:

State 123:
## Known stack suffix:
## mid_alg_expr POW mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr POW mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On POW shift to state 122
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> mid_alg_expr POW mid_alg_expr

State 124:
## Known stack suffix:
## mid_alg_expr MULT
## LR(1) items:
mid_alg_expr -> mid_alg_expr MULT . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 125
-- On constant shift to state 113
## Reductions:

State 125:
## Known stack suffix:
## mid_alg_expr MULT mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr MULT mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On POW shift to state 122
-- On MODULO shift to state 126
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> mid_alg_expr MULT mid_alg_expr

State 126:
## Known stack suffix:
## mid_alg_expr MODULO
## LR(1) items:
mid_alg_expr -> mid_alg_expr MODULO . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 127
-- On constant shift to state 113
## Reductions:

State 127:
## Known stack suffix:
## mid_alg_expr MODULO mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr MODULO mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On POW shift to state 122
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> mid_alg_expr MODULO mid_alg_expr

State 128:
## Known stack suffix:
## mid_alg_expr DIV
## LR(1) items:
mid_alg_expr -> mid_alg_expr DIV . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 129
-- On constant shift to state 113
## Reductions:

State 129:
## Known stack suffix:
## mid_alg_expr DIV mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr DIV mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On POW shift to state 122
-- On MODULO shift to state 126
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> mid_alg_expr DIV mid_alg_expr

State 130:
## Known stack suffix:
## FALSE
## LR(1) items:
small_bool_expr -> FALSE . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production small_bool_expr -> FALSE

State 131:
## Known stack suffix:
## small_bool_expr
## LR(1) items:
bool_expr -> small_bool_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production bool_expr -> small_bool_expr

State 132:
## Known stack suffix:
## mid_alg_expr
## LR(1) items:
alg_expr -> mid_alg_expr . [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND ]
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT POW PLUS OR OP_PAR OP_CUR NEWLINE MULT MODULO MINUS ID GREATER EQUAL EOF ELSE DO DIV DIFF COMMA CL_PAR CL_CUR AND ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT POW PLUS OR OP_PAR OP_CUR NEWLINE MULT MODULO MINUS ID GREATER EQUAL EOF ELSE DO DIV DIFF COMMA CL_PAR CL_CUR AND ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT POW PLUS OR OP_PAR OP_CUR NEWLINE MULT MODULO MINUS ID GREATER EQUAL EOF ELSE DO DIV DIFF COMMA CL_PAR CL_CUR AND ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT POW PLUS OR OP_PAR OP_CUR NEWLINE MULT MODULO MINUS ID GREATER EQUAL EOF ELSE DO DIV DIFF COMMA CL_PAR CL_CUR AND ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT POW PLUS OR OP_PAR OP_CUR NEWLINE MULT MODULO MINUS ID GREATER EQUAL EOF ELSE DO DIV DIFF COMMA CL_PAR CL_CUR AND ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT POW PLUS OR OP_PAR OP_CUR NEWLINE MULT MODULO MINUS ID GREATER EQUAL EOF ELSE DO DIV DIFF COMMA CL_PAR CL_CUR AND ]
## Transitions:
-- On POW shift to state 122
-- On PLUS shift to state 133
-- On MULT shift to state 124
-- On MODULO shift to state 126
-- On MINUS shift to state 135
-- On DIV shift to state 128
## Reductions:
-- On UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND
--   reduce production alg_expr -> mid_alg_expr

State 133:
## Known stack suffix:
## mid_alg_expr PLUS
## LR(1) items:
mid_alg_expr -> mid_alg_expr PLUS . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 134
-- On constant shift to state 113
## Reductions:

State 134:
## Known stack suffix:
## mid_alg_expr PLUS mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr PLUS mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On POW shift to state 122
-- On MULT shift to state 124
-- On MODULO shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> mid_alg_expr PLUS mid_alg_expr

State 135:
## Known stack suffix:
## mid_alg_expr MINUS
## LR(1) items:
mid_alg_expr -> mid_alg_expr MINUS . mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 136
-- On constant shift to state 113
## Reductions:

State 136:
## Known stack suffix:
## mid_alg_expr MINUS mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr MINUS mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On POW shift to state 122
-- On MULT shift to state 124
-- On MODULO shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production mid_alg_expr -> mid_alg_expr MINUS mid_alg_expr

State 137:
## Known stack suffix:
## OP_PAR bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ TYPE SMALLER ID GREATER EQUAL DIFF CL_PAR ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR CL_PAR AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR CL_PAR AND ]
small_bool_expr -> OP_PAR bool_expr . CL_PAR [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On CL_PAR shift to state 159
-- On AND shift to state 142
## Reductions:

State 138:
## Known stack suffix:
## bool_expr THEN
## LR(1) items:
alg_expr -> bool_expr THEN . alg_expr ELSE small_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 156
## Reductions:

State 139:
## Known stack suffix:
## bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR AND ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On AND shift to state 142
## Reductions:

State 140:
## Known stack suffix:
## bool_expr OR
## LR(1) items:
bool_expr -> bool_expr OR . bool_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 141
-- On alg_expr shift to state 144
## Reductions:

State 141:
## Known stack suffix:
## bool_expr OR bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> bool_expr OR bool_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On THEN shift to state 138
-- On AND shift to state 142
## Reductions:
-- On SET OR NEWLINE EOF DO CL_PAR
--   reduce production bool_expr -> bool_expr OR bool_expr

State 142:
## Known stack suffix:
## bool_expr AND
## LR(1) items:
bool_expr -> bool_expr AND . bool_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 143
-- On alg_expr shift to state 144
## Reductions:

State 143:
## Known stack suffix:
## bool_expr AND bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> bool_expr AND bool_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On THEN shift to state 138
## Reductions:
-- On SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production bool_expr -> bool_expr AND bool_expr

State 144:
## Known stack suffix:
## alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:

State 145:
## Known stack suffix:
## alg_expr SMALLER
## LR(1) items:
bool_expr -> alg_expr SMALLER . alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 146
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 155
## Reductions:

State 146:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . alg_expr CL_PAR [ TYPE THEN SMALLER SET POW PLUS OR NEWLINE MULT MODULO MINUS GREATER EQUAL EOF DO DIV DIFF CL_PAR CL_CUR AND ]
small_bool_expr -> OP_PAR . bool_expr CL_PAR [ THEN OR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 137
-- On alg_expr shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## OP_PAR alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR CL_PAR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR CL_PAR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR CL_PAR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR CL_PAR AND ]
small_alg_expr -> OP_PAR alg_expr . CL_PAR [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
-- On CL_PAR shift to state 154
## Reductions:

State 148:
## Known stack suffix:
## alg_expr GREATER
## LR(1) items:
bool_expr -> alg_expr GREATER . alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 146
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## alg_expr GREATER alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr GREATER alg_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production bool_expr -> alg_expr GREATER alg_expr

State 150:
## Known stack suffix:
## alg_expr EQUAL
## LR(1) items:
bool_expr -> alg_expr EQUAL . alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 146
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## alg_expr EQUAL alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr EQUAL alg_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production bool_expr -> alg_expr EQUAL alg_expr

State 152:
## Known stack suffix:
## alg_expr DIFF
## LR(1) items:
bool_expr -> alg_expr DIFF . alg_expr [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 146
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## alg_expr DIFF alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
bool_expr -> alg_expr DIFF alg_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production bool_expr -> alg_expr DIFF alg_expr

State 154:
## Known stack suffix:
## OP_PAR alg_expr CL_PAR
## LR(1) items:
small_alg_expr -> OP_PAR alg_expr CL_PAR . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> OP_PAR alg_expr CL_PAR

State 155:
## Known stack suffix:
## alg_expr SMALLER alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr SMALLER alg_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production bool_expr -> alg_expr SMALLER alg_expr

State 156:
## Known stack suffix:
## bool_expr THEN alg_expr
## LR(1) items:
alg_expr -> bool_expr THEN alg_expr . ELSE small_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND ]
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On ELSE shift to state 157
-- On DIFF shift to state 152
## Reductions:

State 157:
## Known stack suffix:
## bool_expr THEN alg_expr ELSE
## LR(1) items:
alg_expr -> bool_expr THEN alg_expr ELSE . small_alg_expr [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 158
-- On nbr shift to state 111
-- On constant shift to state 113
## Reductions:

State 158:
## Known stack suffix:
## bool_expr THEN alg_expr ELSE small_alg_expr
## LR(1) items:
alg_expr -> bool_expr THEN alg_expr ELSE small_alg_expr . [ UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND ]
## Transitions:
## Reductions:
-- On UNTIL TYPE THEN SMALLER SET SEMICOLON REPEAT OR OP_PAR OP_CUR NEWLINE ID GREATER EQUAL EOF ELSE DO DIFF COMMA CL_PAR CL_CUR AND
--   reduce production alg_expr -> bool_expr THEN alg_expr ELSE small_alg_expr

State 159:
## Known stack suffix:
## OP_PAR bool_expr CL_PAR
## LR(1) items:
small_bool_expr -> OP_PAR bool_expr CL_PAR . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production small_bool_expr -> OP_PAR bool_expr CL_PAR

State 160:
## Known stack suffix:
## NOT small_bool_expr
## LR(1) items:
bool_expr -> NOT small_bool_expr . [ THEN SET OR NEWLINE EOF DO CL_PAR AND ]
## Transitions:
## Reductions:
-- On THEN SET OR NEWLINE EOF DO CL_PAR AND
--   reduce production bool_expr -> NOT small_bool_expr

State 161:
## Known stack suffix:
## SINUS mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
small_alg_expr -> SINUS mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> SINUS mid_alg_expr

State 162:
## Known stack suffix:
## SQRT mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
small_alg_expr -> SQRT mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> SQRT mid_alg_expr

State 163:
## Known stack suffix:
## TAN mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
small_alg_expr -> TAN mid_alg_expr . [ UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS ]
## Transitions:
## Reductions:
-- On UNTIL TYPE TRUE TMAX TIME THEN TAN STRING SQRT SMALLER SINUS SET SEMICOLON REPEAT POW PLUS PIPE OR OP_PAR OP_CUR NULL_EVENT NEWLINE MULT MODULO MINUS MIN MAX LOG LABEL KAPPA_RAR KAPPA_LRAR INT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS COMMA CL_PAR CL_CUR AND ABS
--   reduce production small_alg_expr -> TAN mid_alg_expr

State 164:
## Known stack suffix:
## STRING
## LR(1) items:
nonempty_print_expr -> STRING . [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
nonempty_print_expr -> STRING . DOT nonempty_print_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On DOT shift to state 165
## Reductions:
-- On UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR
--   reduce production nonempty_print_expr -> STRING

State 165:
## Known stack suffix:
## STRING DOT
## LR(1) items:
nonempty_print_expr -> STRING DOT . nonempty_print_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nonempty_print_expr shift to state 166
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:

State 166:
## Known stack suffix:
## STRING DOT nonempty_print_expr
## LR(1) items:
nonempty_print_expr -> STRING DOT nonempty_print_expr . [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR
--   reduce production nonempty_print_expr -> STRING DOT nonempty_print_expr

State 167:
## Known stack suffix:
## mid_alg_expr
## LR(1) items:
mid_alg_expr -> mid_alg_expr . MULT mid_alg_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT POW PLUS NEWLINE MULT MODULO MINUS ID GREATER FALSE EOF DOT DIV CL_PAR ]
mid_alg_expr -> mid_alg_expr . PLUS mid_alg_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT POW PLUS NEWLINE MULT MODULO MINUS ID GREATER FALSE EOF DOT DIV CL_PAR ]
mid_alg_expr -> mid_alg_expr . DIV mid_alg_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT POW PLUS NEWLINE MULT MODULO MINUS ID GREATER FALSE EOF DOT DIV CL_PAR ]
mid_alg_expr -> mid_alg_expr . MINUS mid_alg_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT POW PLUS NEWLINE MULT MODULO MINUS ID GREATER FALSE EOF DOT DIV CL_PAR ]
mid_alg_expr -> mid_alg_expr . POW mid_alg_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT POW PLUS NEWLINE MULT MODULO MINUS ID GREATER FALSE EOF DOT DIV CL_PAR ]
mid_alg_expr -> mid_alg_expr . MODULO mid_alg_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT POW PLUS NEWLINE MULT MODULO MINUS ID GREATER FALSE EOF DOT DIV CL_PAR ]
nonempty_print_expr -> mid_alg_expr . [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
nonempty_print_expr -> mid_alg_expr . DOT nonempty_print_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On POW shift to state 122
-- On PLUS shift to state 133
-- On MULT shift to state 124
-- On MODULO shift to state 126
-- On MINUS shift to state 135
-- On DOT shift to state 168
-- On DIV shift to state 128
## Reductions:
-- On UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR
--   reduce production nonempty_print_expr -> mid_alg_expr

State 168:
## Known stack suffix:
## mid_alg_expr DOT
## LR(1) items:
nonempty_print_expr -> mid_alg_expr DOT . nonempty_print_expr [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nonempty_print_expr shift to state 169
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:

State 169:
## Known stack suffix:
## mid_alg_expr DOT nonempty_print_expr
## LR(1) items:
nonempty_print_expr -> mid_alg_expr DOT nonempty_print_expr . [ UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL TRUE STRING SMALLER SEMICOLON REPEAT NEWLINE ID GREATER FALSE EOF CL_PAR
--   reduce production nonempty_print_expr -> mid_alg_expr DOT nonempty_print_expr

State 170:
## Known stack suffix:
## STOP print_expr
## LR(1) items:
effect -> STOP print_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> STOP print_expr

State 171:
## Known stack suffix:
## nonempty_print_expr
## LR(1) items:
print_expr -> nonempty_print_expr . [ UNTIL SMALLER SEMICOLON REPEAT NEWLINE GREATER EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SMALLER SEMICOLON REPEAT NEWLINE GREATER EOF CL_PAR
--   reduce production print_expr -> nonempty_print_expr

State 172:
## Known stack suffix:
## SPECIES_OF
## LR(1) items:
effect -> SPECIES_OF . nonempty_print_expr non_empty_mixture boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nonempty_print_expr shift to state 173
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:

State 173:
## Known stack suffix:
## SPECIES_OF nonempty_print_expr
## LR(1) items:
effect -> SPECIES_OF nonempty_print_expr . non_empty_mixture boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On ID shift to state 174
-- On non_empty_mixture shift to state 175
## Reductions:

State 174:
## Known stack suffix:
## ID
## LR(1) items:
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR [ UNTIL TRUE SEMICOLON REPEAT NEWLINE FALSE EOF CL_PAR ]
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR COMMA pattern [ UNTIL TRUE SEMICOLON REPEAT NEWLINE FALSE EOF CL_PAR ]
## Transitions:
-- On OP_PAR shift to state 80
## Reductions:

State 175:
## Known stack suffix:
## SPECIES_OF nonempty_print_expr non_empty_mixture
## LR(1) items:
effect -> SPECIES_OF nonempty_print_expr non_empty_mixture . boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 66
-- On FALSE shift to state 67
-- On boolean shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## SPECIES_OF nonempty_print_expr non_empty_mixture boolean
## LR(1) items:
effect -> SPECIES_OF nonempty_print_expr non_empty_mixture boolean . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> SPECIES_OF nonempty_print_expr non_empty_mixture boolean

State 177:
## Known stack suffix:
## SNAPSHOT
## LR(1) items:
effect -> SNAPSHOT . print_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On print_expr shift to state 178
-- On nonempty_print_expr shift to state 171
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production print_expr ->

State 178:
## Known stack suffix:
## SNAPSHOT print_expr
## LR(1) items:
effect -> SNAPSHOT print_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> SNAPSHOT print_expr

State 179:
## Known stack suffix:
## RUN
## LR(1) items:
interactive_command -> RUN . NEWLINE [ # ]
interactive_command -> RUN . bool_expr NEWLINE [ # ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On NEWLINE shift to state 180
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 181
-- On alg_expr shift to state 144
## Reductions:

State 180:
## Known stack suffix:
## RUN NEWLINE
## LR(1) items:
interactive_command -> RUN NEWLINE . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production interactive_command -> RUN NEWLINE

State 181:
## Known stack suffix:
## RUN bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR NEWLINE AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR NEWLINE AND ]
interactive_command -> RUN bool_expr . NEWLINE [ # ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On NEWLINE shift to state 182
-- On AND shift to state 142
## Reductions:

State 182:
## Known stack suffix:
## RUN bool_expr NEWLINE
## LR(1) items:
interactive_command -> RUN bool_expr NEWLINE . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production interactive_command -> RUN bool_expr NEWLINE

State 183:
## Known stack suffix:
## PRINTF
## LR(1) items:
effect -> PRINTF . print_expr SMALLER print_expr GREATER [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On print_expr shift to state 184
-- On nonempty_print_expr shift to state 171
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:
-- On SMALLER
--   reduce production print_expr ->

State 184:
## Known stack suffix:
## PRINTF print_expr
## LR(1) items:
effect -> PRINTF print_expr . SMALLER print_expr GREATER [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On SMALLER shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## PRINTF print_expr SMALLER
## LR(1) items:
effect -> PRINTF print_expr SMALLER . print_expr GREATER [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On print_expr shift to state 186
-- On nonempty_print_expr shift to state 171
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:
-- On GREATER
--   reduce production print_expr ->

State 186:
## Known stack suffix:
## PRINTF print_expr SMALLER print_expr
## LR(1) items:
effect -> PRINTF print_expr SMALLER print_expr . GREATER [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On GREATER shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## PRINTF print_expr SMALLER print_expr GREATER
## LR(1) items:
effect -> PRINTF print_expr SMALLER print_expr GREATER . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> PRINTF print_expr SMALLER print_expr GREATER

State 188:
## Known stack suffix:
## PLOTENTRY
## LR(1) items:
effect -> PLOTENTRY . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> PLOTENTRY

State 189:
## Known stack suffix:
## OP_PAR
## LR(1) items:
effect_list -> OP_PAR . effect_list CL_PAR [ UNTIL REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On effect_list shift to state 244
-- On effect shift to state 246
## Reductions:

State 190:
## Known stack suffix:
## INTRO
## LR(1) items:
effect -> INTRO . alg_expr non_empty_mixture [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
effect -> INTRO . error [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On error shift to state 191
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 192
## Reductions:

State 191:
## Known stack suffix:
## INTRO error
## LR(1) items:
effect -> INTRO error . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> INTRO error

State 192:
## Known stack suffix:
## INTRO alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
effect -> INTRO alg_expr . non_empty_mixture [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On SMALLER shift to state 145
-- On ID shift to state 174
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
-- On non_empty_mixture shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## INTRO alg_expr non_empty_mixture
## LR(1) items:
effect -> INTRO alg_expr non_empty_mixture . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> INTRO alg_expr non_empty_mixture

State 194:
## Known stack suffix:
## ID
## LR(1) items:
effect -> ID . LAR alg_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On LAR shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## ID LAR
## LR(1) items:
effect -> ID LAR . alg_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## ID LAR alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
effect -> ID LAR alg_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> ID LAR alg_expr

State 197:
## Known stack suffix:
## FLUX
## LR(1) items:
effect -> FLUX . nonempty_print_expr boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
effect -> FLUX . nonempty_print_expr STRING boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On STRING shift to state 164
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 110
-- On nonempty_print_expr shift to state 198
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 167
-- On constant shift to state 113
## Reductions:

State 198:
## Known stack suffix:
## FLUX nonempty_print_expr
## LR(1) items:
effect -> FLUX nonempty_print_expr . boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
effect -> FLUX nonempty_print_expr . STRING boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 66
-- On STRING shift to state 199
-- On FALSE shift to state 67
-- On boolean shift to state 201
## Reductions:

State 199:
## Known stack suffix:
## FLUX nonempty_print_expr STRING
## LR(1) items:
effect -> FLUX nonempty_print_expr STRING . boolean [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 66
-- On FALSE shift to state 67
-- On boolean shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## FLUX nonempty_print_expr STRING boolean
## LR(1) items:
effect -> FLUX nonempty_print_expr STRING boolean . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> FLUX nonempty_print_expr STRING boolean

State 201:
## Known stack suffix:
## FLUX nonempty_print_expr boolean
## LR(1) items:
effect -> FLUX nonempty_print_expr boolean . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> FLUX nonempty_print_expr boolean

State 202:
## Known stack suffix:
## DELETE
## LR(1) items:
effect -> DELETE . alg_expr non_empty_mixture [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
effect -> DELETE . error [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On error shift to state 203
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 204
## Reductions:

State 203:
## Known stack suffix:
## DELETE error
## LR(1) items:
effect -> DELETE error . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> DELETE error

State 204:
## Known stack suffix:
## DELETE alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
effect -> DELETE alg_expr . non_empty_mixture [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On SMALLER shift to state 145
-- On ID shift to state 174
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
-- On non_empty_mixture shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## DELETE alg_expr non_empty_mixture
## LR(1) items:
effect -> DELETE alg_expr non_empty_mixture . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> DELETE alg_expr non_empty_mixture

State 206:
## Known stack suffix:
## ASSIGN
## LR(1) items:
effect -> ASSIGN . ID alg_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
effect -> ASSIGN . LABEL alg_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On LABEL shift to state 207
-- On ID shift to state 209
## Reductions:

State 207:
## Known stack suffix:
## ASSIGN LABEL
## LR(1) items:
effect -> ASSIGN LABEL . alg_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## ASSIGN LABEL alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
effect -> ASSIGN LABEL alg_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> ASSIGN LABEL alg_expr

State 209:
## Known stack suffix:
## ASSIGN ID
## LR(1) items:
effect -> ASSIGN ID . alg_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## ASSIGN ID alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
effect -> ASSIGN ID alg_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> ASSIGN ID alg_expr

State 211:
## Known stack suffix:
## APPLY
## LR(1) items:
effect -> APPLY . small_alg_expr rule_content [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 87
-- On NULL_EVENT shift to state 90
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_alg_expr shift to state 212
-- On nbr shift to state 111
-- On constant shift to state 113
## Reductions:

State 212:
## Known stack suffix:
## APPLY small_alg_expr
## LR(1) items:
effect -> APPLY small_alg_expr . rule_content [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 3
-- On PIPE shift to state 213
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On token_expr shift to state 228
-- On rule_content shift to state 237
-- On pattern shift to state 238
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On KAPPA_RAR KAPPA_LRAR
--   reduce production token_expr ->

State 213:
## Known stack suffix:
## PIPE
## LR(1) items:
rule_content -> PIPE . sum_token [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
token_expr -> PIPE . sum_token [ KAPPA_RAR KAPPA_LRAR ]
token_expr -> PIPE . error [ KAPPA_RAR KAPPA_LRAR ]
## Transitions:
-- On error shift to state 214
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 215
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 227
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 223
## Reductions:

State 214:
## Known stack suffix:
## PIPE error
## LR(1) items:
token_expr -> PIPE error . [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production token_expr -> PIPE error

State 215:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . alg_expr CL_PAR [ TYPE SMALLER POW PLUS MULT MODULO MINUS ID GREATER EQUAL DIV DIFF CL_PAR ]
small_bool_expr -> OP_PAR . bool_expr CL_PAR [ THEN OR CL_PAR AND ]
sum_token -> OP_PAR . sum_token CL_PAR [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 215
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 216
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 137
-- On alg_expr shift to state 218
## Reductions:

State 216:
## Known stack suffix:
## OP_PAR sum_token
## LR(1) items:
sum_token -> OP_PAR sum_token . CL_PAR [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## OP_PAR sum_token CL_PAR
## LR(1) items:
sum_token -> OP_PAR sum_token CL_PAR . [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production sum_token -> OP_PAR sum_token CL_PAR

State 218:
## Known stack suffix:
## OP_PAR alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR CL_PAR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR CL_PAR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR CL_PAR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR CL_PAR AND ]
small_alg_expr -> OP_PAR alg_expr . CL_PAR [ TYPE SMALLER POW PLUS MULT MODULO MINUS ID GREATER EQUAL DIV DIFF CL_PAR ]
sum_token -> alg_expr . ID [ CL_PAR ]
sum_token -> alg_expr . ID PLUS sum_token [ CL_PAR ]
sum_token -> alg_expr . TYPE ID [ CL_PAR ]
sum_token -> alg_expr . TYPE ID PLUS sum_token [ CL_PAR ]
## Transitions:
-- On TYPE shift to state 219
-- On SMALLER shift to state 145
-- On ID shift to state 224
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
-- On CL_PAR shift to state 154
## Reductions:

State 219:
## Known stack suffix:
## alg_expr TYPE
## LR(1) items:
sum_token -> alg_expr TYPE . ID [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
sum_token -> alg_expr TYPE . ID PLUS sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On ID shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## alg_expr TYPE ID
## LR(1) items:
sum_token -> alg_expr TYPE ID . [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
sum_token -> alg_expr TYPE ID . PLUS sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 221
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production sum_token -> alg_expr TYPE ID

State 221:
## Known stack suffix:
## alg_expr TYPE ID PLUS
## LR(1) items:
sum_token -> alg_expr TYPE ID PLUS . sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 215
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 222
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 223
## Reductions:

State 222:
## Known stack suffix:
## alg_expr TYPE ID PLUS sum_token
## LR(1) items:
sum_token -> alg_expr TYPE ID PLUS sum_token . [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production sum_token -> alg_expr TYPE ID PLUS sum_token

State 223:
## Known stack suffix:
## alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
sum_token -> alg_expr . ID [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
sum_token -> alg_expr . ID PLUS sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
sum_token -> alg_expr . TYPE ID [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
sum_token -> alg_expr . TYPE ID PLUS sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On TYPE shift to state 219
-- On SMALLER shift to state 145
-- On ID shift to state 224
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:

State 224:
## Known stack suffix:
## alg_expr ID
## LR(1) items:
sum_token -> alg_expr ID . [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
sum_token -> alg_expr ID . PLUS sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 225
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production sum_token -> alg_expr ID

State 225:
## Known stack suffix:
## alg_expr ID PLUS
## LR(1) items:
sum_token -> alg_expr ID PLUS . sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 215
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 226
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 223
## Reductions:

State 226:
## Known stack suffix:
## alg_expr ID PLUS sum_token
## LR(1) items:
sum_token -> alg_expr ID PLUS sum_token . [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production sum_token -> alg_expr ID PLUS sum_token

State 227:
## Known stack suffix:
## PIPE sum_token
## LR(1) items:
rule_content -> PIPE sum_token . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
token_expr -> PIPE sum_token . [ KAPPA_RAR KAPPA_LRAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production rule_content -> PIPE sum_token
-- On KAPPA_RAR KAPPA_LRAR
--   reduce production token_expr -> PIPE sum_token

State 228:
## Known stack suffix:
## token_expr
## LR(1) items:
rule_content -> token_expr . arrow pattern token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
rule_content -> token_expr . arrow token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On KAPPA_RAR shift to state 229
-- On KAPPA_LRAR shift to state 230
-- On arrow shift to state 231
## Reductions:

State 229:
## Known stack suffix:
## KAPPA_RAR
## LR(1) items:
arrow -> KAPPA_RAR . [ UNTIL SEMICOLON REPEAT PLUS PIPE OP_PAR NEWLINE MINUS ID EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT PLUS PIPE OP_PAR NEWLINE MINUS ID EOF CL_PAR
--   reduce production arrow -> KAPPA_RAR

State 230:
## Known stack suffix:
## KAPPA_LRAR
## LR(1) items:
arrow -> KAPPA_LRAR . [ UNTIL SEMICOLON REPEAT PLUS PIPE OP_PAR NEWLINE MINUS ID EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT PLUS PIPE OP_PAR NEWLINE MINUS ID EOF CL_PAR
--   reduce production arrow -> KAPPA_LRAR

State 231:
## Known stack suffix:
## token_expr arrow
## LR(1) items:
rule_content -> token_expr arrow . pattern token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
rule_content -> token_expr arrow . token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 3
-- On PIPE shift to state 232
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On token_expr shift to state 234
-- On pattern shift to state 235
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production token_expr ->

State 232:
## Known stack suffix:
## PIPE
## LR(1) items:
token_expr -> PIPE . sum_token [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
token_expr -> PIPE . error [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
-- On error shift to state 214
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 215
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 233
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 223
## Reductions:

State 233:
## Known stack suffix:
## PIPE sum_token
## LR(1) items:
token_expr -> PIPE sum_token . [ UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production token_expr -> PIPE sum_token

State 234:
## Known stack suffix:
## token_expr arrow token_expr
## LR(1) items:
rule_content -> token_expr arrow token_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production rule_content -> token_expr arrow token_expr

State 235:
## Known stack suffix:
## token_expr arrow pattern
## LR(1) items:
rule_content -> token_expr arrow pattern . token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On PIPE shift to state 232
-- On token_expr shift to state 236
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production token_expr ->

State 236:
## Known stack suffix:
## token_expr arrow pattern token_expr
## LR(1) items:
rule_content -> token_expr arrow pattern token_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production rule_content -> token_expr arrow pattern token_expr

State 237:
## Known stack suffix:
## APPLY small_alg_expr rule_content
## LR(1) items:
effect -> APPLY small_alg_expr rule_content . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production effect -> APPLY small_alg_expr rule_content

State 238:
## Known stack suffix:
## pattern
## LR(1) items:
rule_content -> pattern . token_expr arrow pattern token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
rule_content -> pattern . token_expr arrow token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
rule_content -> pattern . token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On PIPE shift to state 232
-- On token_expr shift to state 239
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE KAPPA_RAR KAPPA_LRAR EOF CL_PAR
--   reduce production token_expr ->

State 239:
## Known stack suffix:
## pattern token_expr
## LR(1) items:
rule_content -> pattern token_expr . arrow pattern token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
rule_content -> pattern token_expr . arrow token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
rule_content -> pattern token_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On KAPPA_RAR shift to state 229
-- On KAPPA_LRAR shift to state 230
-- On arrow shift to state 240
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production rule_content -> pattern token_expr

State 240:
## Known stack suffix:
## pattern token_expr arrow
## LR(1) items:
rule_content -> pattern token_expr arrow . pattern token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
rule_content -> pattern token_expr arrow . token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 3
-- On PIPE shift to state 232
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On token_expr shift to state 241
-- On pattern shift to state 242
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production token_expr ->

State 241:
## Known stack suffix:
## pattern token_expr arrow token_expr
## LR(1) items:
rule_content -> pattern token_expr arrow token_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production rule_content -> pattern token_expr arrow token_expr

State 242:
## Known stack suffix:
## pattern token_expr arrow pattern
## LR(1) items:
rule_content -> pattern token_expr arrow pattern . token_expr [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On PIPE shift to state 232
-- On token_expr shift to state 243
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production token_expr ->

State 243:
## Known stack suffix:
## pattern token_expr arrow pattern token_expr
## LR(1) items:
rule_content -> pattern token_expr arrow pattern token_expr . [ UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL SEMICOLON REPEAT NEWLINE EOF CL_PAR
--   reduce production rule_content -> pattern token_expr arrow pattern token_expr

State 244:
## Known stack suffix:
## OP_PAR effect_list
## LR(1) items:
effect_list -> OP_PAR effect_list . CL_PAR [ UNTIL REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## OP_PAR effect_list CL_PAR
## LR(1) items:
effect_list -> OP_PAR effect_list CL_PAR . [ UNTIL REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL REPEAT NEWLINE EOF CL_PAR
--   reduce production effect_list -> OP_PAR effect_list CL_PAR

State 246:
## Known stack suffix:
## effect
## LR(1) items:
effect_list -> effect . [ UNTIL REPEAT NEWLINE EOF CL_PAR ]
effect_list -> effect . SEMICOLON effect_list [ UNTIL REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On SEMICOLON shift to state 247
## Reductions:
-- On UNTIL REPEAT NEWLINE EOF CL_PAR
--   reduce production effect_list -> effect

State 247:
## Known stack suffix:
## effect SEMICOLON
## LR(1) items:
effect_list -> effect SEMICOLON . effect_list [ UNTIL REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On effect_list shift to state 248
-- On effect shift to state 246
## Reductions:

State 248:
## Known stack suffix:
## effect SEMICOLON effect_list
## LR(1) items:
effect_list -> effect SEMICOLON effect_list . [ UNTIL REPEAT NEWLINE EOF CL_PAR ]
## Transitions:
## Reductions:
-- On UNTIL REPEAT NEWLINE EOF CL_PAR
--   reduce production effect_list -> effect SEMICOLON effect_list

State 249:
## Known stack suffix:
## EOF
## LR(1) items:
interactive_command -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production interactive_command -> EOF

State 250:
## Known stack suffix:
## interactive_command
## LR(1) items:
interactive_command' -> interactive_command . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept interactive_command

State 251:
## Known stack suffix:
## effect_list
## LR(1) items:
interactive_command -> effect_list . NEWLINE [ # ]
## Transitions:
-- On NEWLINE shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## effect_list NEWLINE
## LR(1) items:
interactive_command -> effect_list NEWLINE . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production interactive_command -> effect_list NEWLINE

State 253:
## Known stack suffix:
##
## LR(1) items:
standalone_bool_expr' -> . standalone_bool_expr [ # ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On standalone_bool_expr shift to state 254
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 255
-- On alg_expr shift to state 144
## Reductions:

State 254:
## Known stack suffix:
## standalone_bool_expr
## LR(1) items:
standalone_bool_expr' -> standalone_bool_expr . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept standalone_bool_expr

State 255:
## Known stack suffix:
## bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR EOF AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR EOF AND ]
standalone_bool_expr -> bool_expr . EOF [ # ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On EOF shift to state 256
-- On AND shift to state 142
## Reductions:

State 256:
## Known stack suffix:
## bool_expr EOF
## LR(1) items:
standalone_bool_expr -> bool_expr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production standalone_bool_expr -> bool_expr EOF

State 257:
## Known stack suffix:
##
## LR(1) items:
standalone_effect_list' -> . standalone_effect_list [ # ]
## Transitions:
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On standalone_effect_list shift to state 258
-- On effect_list shift to state 259
-- On effect shift to state 246
## Reductions:

State 258:
## Known stack suffix:
## standalone_effect_list
## LR(1) items:
standalone_effect_list' -> standalone_effect_list . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept standalone_effect_list

State 259:
## Known stack suffix:
## effect_list
## LR(1) items:
standalone_effect_list -> effect_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## effect_list EOF
## LR(1) items:
standalone_effect_list -> effect_list EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production standalone_effect_list -> effect_list EOF

State 261:
## Known stack suffix:
##
## LR(1) items:
start_rule' -> . start_rule [ # ]
## Transitions:
-- On error shift to state 262
-- On TOKEN shift to state 263
-- On SIGNATURE shift to state 265
-- On PLUS shift to state 3
-- On PLOT shift to state 268
-- On PIPE shift to state 271
-- On PERT shift to state 284
-- On OP_PAR shift to state 308
-- On OBS shift to state 311
-- On NEWLINE shift to state 320
-- On MINUS shift to state 5
-- On LET shift to state 321
-- On LABEL shift to state 323
-- On INIT shift to state 376
-- On EOF shift to state 326
-- On CONFIG shift to state 388
-- On token_expr shift to state 328
-- On start_rule shift to state 399
-- On rule_expression shift to state 394
-- On rule_content shift to state 349
-- On pattern shift to state 370
-- On newline shift to state 396
-- On mod_agent shift to state 338
-- On instruction shift to state 397
-- On agent_expression shift to state 344
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On KAPPA_RAR KAPPA_LRAR
--   reduce production token_expr ->

State 262:
## Known stack suffix:
## error
## LR(1) items:
start_rule -> error . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production start_rule -> error

State 263:
## Known stack suffix:
## TOKEN
## LR(1) items:
instruction -> TOKEN . ID [ NEWLINE EOF ]
## Transitions:
-- On ID shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## TOKEN ID
## LR(1) items:
instruction -> TOKEN ID . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> TOKEN ID

State 265:
## Known stack suffix:
## SIGNATURE
## LR(1) items:
instruction -> SIGNATURE . agent_expression [ NEWLINE EOF ]
instruction -> SIGNATURE . error [ NEWLINE EOF ]
## Transitions:
-- On error shift to state 266
-- On PLUS shift to state 3
-- On MINUS shift to state 5
-- On mod_agent shift to state 8
-- On agent_expression shift to state 267
## Reductions:
-- On ID
--   reduce production mod_agent ->

State 266:
## Known stack suffix:
## SIGNATURE error
## LR(1) items:
instruction -> SIGNATURE error . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> SIGNATURE error

State 267:
## Known stack suffix:
## SIGNATURE agent_expression
## LR(1) items:
instruction -> SIGNATURE agent_expression . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> SIGNATURE agent_expression

State 268:
## Known stack suffix:
## PLOT
## LR(1) items:
instruction -> PLOT . alg_expr [ NEWLINE EOF ]
instruction -> PLOT . error [ NEWLINE EOF ]
## Transitions:
-- On error shift to state 269
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 270
## Reductions:

State 269:
## Known stack suffix:
## PLOT error
## LR(1) items:
instruction -> PLOT error . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> PLOT error

State 270:
## Known stack suffix:
## PLOT alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
instruction -> PLOT alg_expr . [ NEWLINE EOF ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> PLOT alg_expr

State 271:
## Known stack suffix:
## PIPE
## LR(1) items:
rule_content -> PIPE . sum_token [ error AT ]
token_expr -> PIPE . sum_token [ KAPPA_RAR KAPPA_LRAR ]
token_expr -> PIPE . error [ KAPPA_RAR KAPPA_LRAR ]
## Transitions:
-- On error shift to state 214
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 272
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 275
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 276
## Reductions:

State 272:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . alg_expr CL_PAR [ TYPE SMALLER POW PLUS MULT MODULO MINUS ID GREATER EQUAL DIV DIFF ]
small_bool_expr -> OP_PAR . bool_expr CL_PAR [ THEN OR AND ]
sum_token -> OP_PAR . sum_token CL_PAR [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 215
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 273
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 137
-- On alg_expr shift to state 218
## Reductions:

State 273:
## Known stack suffix:
## OP_PAR sum_token
## LR(1) items:
sum_token -> OP_PAR sum_token . CL_PAR [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On CL_PAR shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## OP_PAR sum_token CL_PAR
## LR(1) items:
sum_token -> OP_PAR sum_token CL_PAR . [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production sum_token -> OP_PAR sum_token CL_PAR

State 275:
## Known stack suffix:
## PIPE sum_token
## LR(1) items:
rule_content -> PIPE sum_token . [ error AT ]
token_expr -> PIPE sum_token . [ KAPPA_RAR KAPPA_LRAR ]
## Transitions:
## Reductions:
-- On error AT
--   reduce production rule_content -> PIPE sum_token
-- On KAPPA_RAR KAPPA_LRAR
--   reduce production token_expr -> PIPE sum_token

State 276:
## Known stack suffix:
## alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
sum_token -> alg_expr . ID [ error KAPPA_RAR KAPPA_LRAR AT ]
sum_token -> alg_expr . ID PLUS sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
sum_token -> alg_expr . TYPE ID [ error KAPPA_RAR KAPPA_LRAR AT ]
sum_token -> alg_expr . TYPE ID PLUS sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On TYPE shift to state 277
-- On SMALLER shift to state 145
-- On ID shift to state 281
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:

State 277:
## Known stack suffix:
## alg_expr TYPE
## LR(1) items:
sum_token -> alg_expr TYPE . ID [ error KAPPA_RAR KAPPA_LRAR AT ]
sum_token -> alg_expr TYPE . ID PLUS sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On ID shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## alg_expr TYPE ID
## LR(1) items:
sum_token -> alg_expr TYPE ID . [ error KAPPA_RAR KAPPA_LRAR AT ]
sum_token -> alg_expr TYPE ID . PLUS sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On PLUS shift to state 279
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production sum_token -> alg_expr TYPE ID

State 279:
## Known stack suffix:
## alg_expr TYPE ID PLUS
## LR(1) items:
sum_token -> alg_expr TYPE ID PLUS . sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 272
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 280
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 276
## Reductions:

State 280:
## Known stack suffix:
## alg_expr TYPE ID PLUS sum_token
## LR(1) items:
sum_token -> alg_expr TYPE ID PLUS sum_token . [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production sum_token -> alg_expr TYPE ID PLUS sum_token

State 281:
## Known stack suffix:
## alg_expr ID
## LR(1) items:
sum_token -> alg_expr ID . [ error KAPPA_RAR KAPPA_LRAR AT ]
sum_token -> alg_expr ID . PLUS sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On PLUS shift to state 282
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production sum_token -> alg_expr ID

State 282:
## Known stack suffix:
## alg_expr ID PLUS
## LR(1) items:
sum_token -> alg_expr ID PLUS . sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 272
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 283
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 276
## Reductions:

State 283:
## Known stack suffix:
## alg_expr ID PLUS sum_token
## LR(1) items:
sum_token -> alg_expr ID PLUS sum_token . [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production sum_token -> alg_expr ID PLUS sum_token

State 284:
## Known stack suffix:
## PERT
## LR(1) items:
instruction -> PERT . perturbation_declaration [ NEWLINE EOF ]
## Transitions:
-- On REPEAT shift to state 285
-- On ALARM shift to state 291
-- On perturbation_declaration shift to state 293
-- On perturbation_alarm shift to state 294
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS
--   reduce production perturbation_alarm ->

State 285:
## Known stack suffix:
## REPEAT
## LR(1) items:
perturbation_declaration -> REPEAT . bool_expr DO effect_list UNTIL bool_expr [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 286
-- On alg_expr shift to state 144
## Reductions:

State 286:
## Known stack suffix:
## REPEAT bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR DO AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR DO AND ]
perturbation_declaration -> REPEAT bool_expr . DO effect_list UNTIL bool_expr [ NEWLINE EOF ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On DO shift to state 287
-- On AND shift to state 142
## Reductions:

State 287:
## Known stack suffix:
## REPEAT bool_expr DO
## LR(1) items:
perturbation_declaration -> REPEAT bool_expr DO . effect_list UNTIL bool_expr [ NEWLINE EOF ]
## Transitions:
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On effect_list shift to state 288
-- On effect shift to state 246
## Reductions:

State 288:
## Known stack suffix:
## REPEAT bool_expr DO effect_list
## LR(1) items:
perturbation_declaration -> REPEAT bool_expr DO effect_list . UNTIL bool_expr [ NEWLINE EOF ]
## Transitions:
-- On UNTIL shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## REPEAT bool_expr DO effect_list UNTIL
## LR(1) items:
perturbation_declaration -> REPEAT bool_expr DO effect_list UNTIL . bool_expr [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 290
-- On alg_expr shift to state 144
## Reductions:

State 290:
## Known stack suffix:
## REPEAT bool_expr DO effect_list UNTIL bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR NEWLINE EOF AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR NEWLINE EOF AND ]
perturbation_declaration -> REPEAT bool_expr DO effect_list UNTIL bool_expr . [ NEWLINE EOF ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On AND shift to state 142
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_declaration -> REPEAT bool_expr DO effect_list UNTIL bool_expr

State 291:
## Known stack suffix:
## ALARM
## LR(1) items:
perturbation_alarm -> ALARM . nbr [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
## Transitions:
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On FLOAT shift to state 102
-- On nbr shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## ALARM nbr
## LR(1) items:
perturbation_alarm -> ALARM nbr . [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
## Transitions:
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS
--   reduce production perturbation_alarm -> ALARM nbr

State 293:
## Known stack suffix:
## PERT perturbation_declaration
## LR(1) items:
instruction -> PERT perturbation_declaration . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> PERT perturbation_declaration

State 294:
## Known stack suffix:
## perturbation_alarm
## LR(1) items:
perturbation_declaration -> perturbation_alarm . bool_expr DO effect_list perturbation_post [ NEWLINE EOF ]
perturbation_declaration -> perturbation_alarm . DO effect_list perturbation_post [ NEWLINE EOF ]
perturbation_declaration -> perturbation_alarm . bool_expr SET effect_list [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On DO shift to state 295
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 302
-- On alg_expr shift to state 144
## Reductions:

State 295:
## Known stack suffix:
## perturbation_alarm DO
## LR(1) items:
perturbation_declaration -> perturbation_alarm DO . effect_list perturbation_post [ NEWLINE EOF ]
## Transitions:
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On effect_list shift to state 296
-- On effect shift to state 246
## Reductions:

State 296:
## Known stack suffix:
## perturbation_alarm DO effect_list
## LR(1) items:
perturbation_declaration -> perturbation_alarm DO effect_list . perturbation_post [ NEWLINE EOF ]
## Transitions:
-- On UNTIL shift to state 297
-- On REPEAT shift to state 299
-- On perturbation_post shift to state 301
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_post ->

State 297:
## Known stack suffix:
## UNTIL
## LR(1) items:
perturbation_post -> UNTIL . bool_expr [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 298
-- On alg_expr shift to state 144
## Reductions:

State 298:
## Known stack suffix:
## UNTIL bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR NEWLINE EOF AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR NEWLINE EOF AND ]
perturbation_post -> UNTIL bool_expr . [ NEWLINE EOF ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On AND shift to state 142
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_post -> UNTIL bool_expr

State 299:
## Known stack suffix:
## REPEAT
## LR(1) items:
perturbation_post -> REPEAT . bool_expr [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 300
-- On alg_expr shift to state 144
## Reductions:

State 300:
## Known stack suffix:
## REPEAT bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN OR NEWLINE EOF AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN OR NEWLINE EOF AND ]
perturbation_post -> REPEAT bool_expr . [ NEWLINE EOF ]
## Transitions:
-- On THEN shift to state 138
-- On OR shift to state 140
-- On AND shift to state 142
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_post -> REPEAT bool_expr

State 301:
## Known stack suffix:
## perturbation_alarm DO effect_list perturbation_post
## LR(1) items:
perturbation_declaration -> perturbation_alarm DO effect_list perturbation_post . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_declaration -> perturbation_alarm DO effect_list perturbation_post

State 302:
## Known stack suffix:
## perturbation_alarm bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN alg_expr ELSE small_alg_expr [ SMALLER GREATER EQUAL DIFF ]
bool_expr -> bool_expr . AND bool_expr [ THEN SET OR DO AND ]
bool_expr -> bool_expr . OR bool_expr [ THEN SET OR DO AND ]
perturbation_declaration -> perturbation_alarm bool_expr . DO effect_list perturbation_post [ NEWLINE EOF ]
perturbation_declaration -> perturbation_alarm bool_expr . SET effect_list [ NEWLINE EOF ]
## Transitions:
-- On THEN shift to state 138
-- On SET shift to state 303
-- On OR shift to state 140
-- On DO shift to state 305
-- On AND shift to state 142
## Reductions:

State 303:
## Known stack suffix:
## perturbation_alarm bool_expr SET
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr SET . effect_list [ NEWLINE EOF ]
## Transitions:
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On effect_list shift to state 304
-- On effect shift to state 246
## Reductions:

State 304:
## Known stack suffix:
## perturbation_alarm bool_expr SET effect_list
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr SET effect_list . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_declaration -> perturbation_alarm bool_expr SET effect_list

State 305:
## Known stack suffix:
## perturbation_alarm bool_expr DO
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr DO . effect_list perturbation_post [ NEWLINE EOF ]
## Transitions:
-- On TRACK shift to state 2
-- On STOP shift to state 71
-- On SPECIES_OF shift to state 172
-- On SNAPSHOT shift to state 177
-- On PRINTF shift to state 183
-- On PLOTENTRY shift to state 188
-- On OP_PAR shift to state 189
-- On INTRO shift to state 190
-- On ID shift to state 194
-- On FLUX shift to state 197
-- On DELETE shift to state 202
-- On ASSIGN shift to state 206
-- On APPLY shift to state 211
-- On effect_list shift to state 306
-- On effect shift to state 246
## Reductions:

State 306:
## Known stack suffix:
## perturbation_alarm bool_expr DO effect_list
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr DO effect_list . perturbation_post [ NEWLINE EOF ]
## Transitions:
-- On UNTIL shift to state 297
-- On REPEAT shift to state 299
-- On perturbation_post shift to state 307
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_post ->

State 307:
## Known stack suffix:
## perturbation_alarm bool_expr DO effect_list perturbation_post
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr DO effect_list perturbation_post . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production perturbation_declaration -> perturbation_alarm bool_expr DO effect_list perturbation_post

State 308:
## Known stack suffix:
## OP_PAR
## LR(1) items:
pattern -> OP_PAR . pattern CL_PAR [ error PIPE KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On PLUS shift to state 3
-- On OP_PAR shift to state 4
-- On MINUS shift to state 5
-- On pattern shift to state 309
-- On mod_agent shift to state 8
-- On agent_expression shift to state 62
## Reductions:
-- On ID
--   reduce production mod_agent ->

State 309:
## Known stack suffix:
## OP_PAR pattern
## LR(1) items:
pattern -> OP_PAR pattern . CL_PAR [ error PIPE KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On CL_PAR shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## OP_PAR pattern CL_PAR
## LR(1) items:
pattern -> OP_PAR pattern CL_PAR . [ error PIPE KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
## Reductions:
-- On error PIPE KAPPA_RAR KAPPA_LRAR AT
--   reduce production pattern -> OP_PAR pattern CL_PAR

State 311:
## Known stack suffix:
## OBS
## LR(1) items:
instruction -> OBS . variable_declaration [ NEWLINE EOF ]
## Transitions:
-- On LABEL shift to state 312
-- On ID shift to state 317
-- On variable_declaration shift to state 319
## Reductions:

State 312:
## Known stack suffix:
## LABEL
## LR(1) items:
variable_declaration -> LABEL . non_empty_mixture [ NEWLINE EOF ]
variable_declaration -> LABEL . alg_expr [ NEWLINE EOF ]
variable_declaration -> LABEL . error [ NEWLINE EOF ]
## Transitions:
-- On error shift to state 313
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 314
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On non_empty_mixture shift to state 315
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 316
## Reductions:

State 313:
## Known stack suffix:
## LABEL error
## LR(1) items:
variable_declaration -> LABEL error . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production variable_declaration -> LABEL error

State 314:
## Known stack suffix:
## ID
## LR(1) items:
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR [ NEWLINE EOF ]
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR COMMA pattern [ NEWLINE EOF ]
variable -> ID . [ SMALLER POW PLUS NEWLINE MULT MODULO MINUS GREATER EQUAL EOF DIV DIFF ]
## Transitions:
-- On OP_PAR shift to state 80
## Reductions:
-- On SMALLER POW PLUS NEWLINE MULT MODULO MINUS GREATER EQUAL EOF DIV DIFF
--   reduce production variable -> ID

State 315:
## Known stack suffix:
## LABEL non_empty_mixture
## LR(1) items:
variable_declaration -> LABEL non_empty_mixture . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production variable_declaration -> LABEL non_empty_mixture

State 316:
## Known stack suffix:
## LABEL alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
variable_declaration -> LABEL alg_expr . [ NEWLINE EOF ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On NEWLINE EOF
--   reduce production variable_declaration -> LABEL alg_expr

State 317:
## Known stack suffix:
## ID
## LR(1) items:
variable_declaration -> ID . alg_expr [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## ID alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
variable_declaration -> ID alg_expr . [ NEWLINE EOF ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On NEWLINE EOF
--   reduce production variable_declaration -> ID alg_expr

State 319:
## Known stack suffix:
## OBS variable_declaration
## LR(1) items:
instruction -> OBS variable_declaration . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> OBS variable_declaration

State 320:
## Known stack suffix:
## NEWLINE
## LR(1) items:
newline -> NEWLINE . start_rule [ # ]
## Transitions:
-- On error shift to state 262
-- On TOKEN shift to state 263
-- On SIGNATURE shift to state 265
-- On PLUS shift to state 3
-- On PLOT shift to state 268
-- On PIPE shift to state 271
-- On PERT shift to state 284
-- On OP_PAR shift to state 308
-- On OBS shift to state 311
-- On NEWLINE shift to state 320
-- On MINUS shift to state 5
-- On LET shift to state 321
-- On LABEL shift to state 323
-- On INIT shift to state 376
-- On EOF shift to state 326
-- On CONFIG shift to state 388
-- On token_expr shift to state 328
-- On start_rule shift to state 393
-- On rule_expression shift to state 394
-- On rule_content shift to state 349
-- On pattern shift to state 370
-- On newline shift to state 396
-- On mod_agent shift to state 338
-- On instruction shift to state 397
-- On agent_expression shift to state 344
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On KAPPA_RAR KAPPA_LRAR
--   reduce production token_expr ->

State 321:
## Known stack suffix:
## LET
## LR(1) items:
instruction -> LET . variable_declaration [ NEWLINE EOF ]
## Transitions:
-- On LABEL shift to state 312
-- On ID shift to state 317
-- On variable_declaration shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## LET variable_declaration
## LR(1) items:
instruction -> LET variable_declaration . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> LET variable_declaration

State 323:
## Known stack suffix:
## LABEL
## LR(1) items:
start_rule -> LABEL . rule_expression newline [ # ]
start_rule -> LABEL . EQUAL alg_expr newline [ # ]
## Transitions:
-- On PLUS shift to state 3
-- On PIPE shift to state 271
-- On OP_PAR shift to state 308
-- On MINUS shift to state 5
-- On EQUAL shift to state 324
-- On token_expr shift to state 328
-- On rule_expression shift to state 347
-- On rule_content shift to state 349
-- On pattern shift to state 370
-- On mod_agent shift to state 338
-- On agent_expression shift to state 344
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On KAPPA_RAR KAPPA_LRAR
--   reduce production token_expr ->

State 324:
## Known stack suffix:
## LABEL EQUAL
## LR(1) items:
start_rule -> LABEL EQUAL . alg_expr newline [ # ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## LABEL EQUAL alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
start_rule -> LABEL EQUAL alg_expr . newline [ # ]
## Transitions:
-- On SMALLER shift to state 145
-- On NEWLINE shift to state 320
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On EOF shift to state 326
-- On DIFF shift to state 152
-- On newline shift to state 327
## Reductions:

State 326:
## Known stack suffix:
## EOF
## LR(1) items:
newline -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production newline -> EOF

State 327:
## Known stack suffix:
## LABEL EQUAL alg_expr newline
## LR(1) items:
start_rule -> LABEL EQUAL alg_expr newline . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production start_rule -> LABEL EQUAL alg_expr newline

State 328:
## Known stack suffix:
## token_expr
## LR(1) items:
rule_content -> token_expr . arrow pattern token_expr [ error AT ]
rule_content -> token_expr . arrow token_expr [ error AT ]
## Transitions:
-- On KAPPA_RAR shift to state 329
-- On KAPPA_LRAR shift to state 330
-- On arrow shift to state 331
## Reductions:

State 329:
## Known stack suffix:
## KAPPA_RAR
## LR(1) items:
arrow -> KAPPA_RAR . [ error PLUS PIPE OP_PAR MINUS ID AT ]
## Transitions:
## Reductions:
-- On error PLUS PIPE OP_PAR MINUS ID AT
--   reduce production arrow -> KAPPA_RAR

State 330:
## Known stack suffix:
## KAPPA_LRAR
## LR(1) items:
arrow -> KAPPA_LRAR . [ error PLUS PIPE OP_PAR MINUS ID AT ]
## Transitions:
## Reductions:
-- On error PLUS PIPE OP_PAR MINUS ID AT
--   reduce production arrow -> KAPPA_LRAR

State 331:
## Known stack suffix:
## token_expr arrow
## LR(1) items:
rule_content -> token_expr arrow . pattern token_expr [ error AT ]
rule_content -> token_expr arrow . token_expr [ error AT ]
## Transitions:
-- On PLUS shift to state 3
-- On PIPE shift to state 332
-- On OP_PAR shift to state 308
-- On MINUS shift to state 5
-- On token_expr shift to state 335
-- On pattern shift to state 336
-- On mod_agent shift to state 338
-- On agent_expression shift to state 344
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On error AT
--   reduce production token_expr ->

State 332:
## Known stack suffix:
## PIPE
## LR(1) items:
token_expr -> PIPE . sum_token [ error KAPPA_RAR KAPPA_LRAR AT ]
token_expr -> PIPE . error [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On error shift to state 333
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 272
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On sum_token shift to state 334
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 276
## Reductions:

State 333:
## Known stack suffix:
## PIPE error
## LR(1) items:
token_expr -> PIPE error . [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production token_expr -> PIPE error

State 334:
## Known stack suffix:
## PIPE sum_token
## LR(1) items:
token_expr -> PIPE sum_token . [ error KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production token_expr -> PIPE sum_token

State 335:
## Known stack suffix:
## token_expr arrow token_expr
## LR(1) items:
rule_content -> token_expr arrow token_expr . [ error AT ]
## Transitions:
## Reductions:
-- On error AT
--   reduce production rule_content -> token_expr arrow token_expr

State 336:
## Known stack suffix:
## token_expr arrow pattern
## LR(1) items:
rule_content -> token_expr arrow pattern . token_expr [ error AT ]
## Transitions:
-- On PIPE shift to state 332
-- On token_expr shift to state 337
## Reductions:
-- On error AT
--   reduce production token_expr ->

State 337:
## Known stack suffix:
## token_expr arrow pattern token_expr
## LR(1) items:
rule_content -> token_expr arrow pattern token_expr . [ error AT ]
## Transitions:
## Reductions:
-- On error AT
--   reduce production rule_content -> token_expr arrow pattern token_expr

State 338:
## Known stack suffix:
## mod_agent
## LR(1) items:
agent_expression -> mod_agent . ID OP_PAR interface_expression CL_PAR [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
agent_expression -> mod_agent . ID error [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
## Transitions:
-- On ID shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## mod_agent ID
## LR(1) items:
agent_expression -> mod_agent ID . OP_PAR interface_expression CL_PAR [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
agent_expression -> mod_agent ID . error [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
## Transitions:
-- On error shift to state 340
-- On OP_PAR shift to state 341
## Reductions:

State 340:
## Known stack suffix:
## mod_agent ID error
## LR(1) items:
agent_expression -> mod_agent ID error . [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
## Transitions:
## Reductions:
-- On error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT
--   reduce production agent_expression -> mod_agent ID error

State 341:
## Known stack suffix:
## mod_agent ID OP_PAR
## LR(1) items:
agent_expression -> mod_agent ID OP_PAR . interface_expression CL_PAR [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
## Transitions:
-- On ID shift to state 12
-- On port_expression shift to state 57
-- On interface_expression shift to state 342
## Reductions:
-- On CL_PAR
--   reduce production interface_expression ->

State 342:
## Known stack suffix:
## mod_agent ID OP_PAR interface_expression
## LR(1) items:
agent_expression -> mod_agent ID OP_PAR interface_expression . CL_PAR [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
## Transitions:
-- On CL_PAR shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## mod_agent ID OP_PAR interface_expression CL_PAR
## LR(1) items:
agent_expression -> mod_agent ID OP_PAR interface_expression CL_PAR . [ error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT ]
## Transitions:
## Reductions:
-- On error PIPE KAPPA_RAR KAPPA_LRAR COMMA AT
--   reduce production agent_expression -> mod_agent ID OP_PAR interface_expression CL_PAR

State 344:
## Known stack suffix:
## agent_expression
## LR(1) items:
pattern -> agent_expression . COMMA pattern [ error PIPE KAPPA_RAR KAPPA_LRAR AT ]
pattern -> agent_expression . [ error PIPE KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On COMMA shift to state 345
## Reductions:
-- On error PIPE KAPPA_RAR KAPPA_LRAR AT
--   reduce production pattern -> agent_expression

State 345:
## Known stack suffix:
## agent_expression COMMA
## LR(1) items:
pattern -> agent_expression COMMA . pattern [ error PIPE KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
-- On PLUS shift to state 3
-- On OP_PAR shift to state 308
-- On MINUS shift to state 5
-- On pattern shift to state 346
-- On mod_agent shift to state 338
-- On agent_expression shift to state 344
## Reductions:
-- On ID
--   reduce production mod_agent ->

State 346:
## Known stack suffix:
## agent_expression COMMA pattern
## LR(1) items:
pattern -> agent_expression COMMA pattern . [ error PIPE KAPPA_RAR KAPPA_LRAR AT ]
## Transitions:
## Reductions:
-- On error PIPE KAPPA_RAR KAPPA_LRAR AT
--   reduce production pattern -> agent_expression COMMA pattern

State 347:
## Known stack suffix:
## LABEL rule_expression
## LR(1) items:
start_rule -> LABEL rule_expression . newline [ # ]
## Transitions:
-- On NEWLINE shift to state 320
-- On EOF shift to state 326
-- On newline shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## LABEL rule_expression newline
## LR(1) items:
start_rule -> LABEL rule_expression newline . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production start_rule -> LABEL rule_expression newline

State 349:
## Known stack suffix:
## rule_content
## LR(1) items:
rule_expression -> rule_content . birate [ NEWLINE EOF ]
## Transitions:
-- On error shift to state 350
-- On AT shift to state 351
-- On birate shift to state 369
## Reductions:

State 350:
## Known stack suffix:
## error
## LR(1) items:
birate -> error . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production birate -> error

State 351:
## Known stack suffix:
## AT
## LR(1) items:
birate -> AT . rate [ NEWLINE EOF ]
birate -> AT . rate COMMA rate [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On OP_CUR shift to state 352
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On rate shift to state 358
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 361
## Reductions:
-- On NEWLINE EOF COMMA
--   reduce production rate ->

State 352:
## Known stack suffix:
## OP_CUR
## LR(1) items:
rate -> OP_CUR . alg_with_radius CL_CUR [ NEWLINE EOF COMMA ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_with_radius shift to state 353
-- On alg_expr shift to state 355
## Reductions:

State 353:
## Known stack suffix:
## OP_CUR alg_with_radius
## LR(1) items:
rate -> OP_CUR alg_with_radius . CL_CUR [ NEWLINE EOF COMMA ]
## Transitions:
-- On CL_CUR shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## OP_CUR alg_with_radius CL_CUR
## LR(1) items:
rate -> OP_CUR alg_with_radius CL_CUR . [ NEWLINE EOF COMMA ]
## Transitions:
## Reductions:
-- On NEWLINE EOF COMMA
--   reduce production rate -> OP_CUR alg_with_radius CL_CUR

State 355:
## Known stack suffix:
## alg_expr
## LR(1) items:
alg_with_radius -> alg_expr . [ CL_PAR CL_CUR ]
alg_with_radius -> alg_expr . TYPE alg_expr [ CL_PAR CL_CUR ]
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
## Transitions:
-- On TYPE shift to state 356
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On CL_PAR CL_CUR
--   reduce production alg_with_radius -> alg_expr

State 356:
## Known stack suffix:
## alg_expr TYPE
## LR(1) items:
alg_with_radius -> alg_expr TYPE . alg_expr [ CL_PAR CL_CUR ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 146
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 357
## Reductions:

State 357:
## Known stack suffix:
## alg_expr TYPE alg_expr
## LR(1) items:
alg_with_radius -> alg_expr TYPE alg_expr . [ CL_PAR CL_CUR ]
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On CL_PAR CL_CUR
--   reduce production alg_with_radius -> alg_expr TYPE alg_expr

State 358:
## Known stack suffix:
## AT rate
## LR(1) items:
birate -> AT rate . [ NEWLINE EOF ]
birate -> AT rate . COMMA rate [ NEWLINE EOF ]
## Transitions:
-- On COMMA shift to state 359
## Reductions:
-- On NEWLINE EOF
--   reduce production birate -> AT rate

State 359:
## Known stack suffix:
## AT rate COMMA
## LR(1) items:
birate -> AT rate COMMA . rate [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On OP_CUR shift to state 352
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On rate shift to state 360
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 361
## Reductions:
-- On NEWLINE EOF
--   reduce production rate ->

State 360:
## Known stack suffix:
## AT rate COMMA rate
## LR(1) items:
birate -> AT rate COMMA rate . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production birate -> AT rate COMMA rate

State 361:
## Known stack suffix:
## alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
rate -> alg_expr . OP_CUR alg_with_radius CL_CUR [ NEWLINE EOF COMMA ]
rate -> alg_expr . OP_PAR alg_with_radius CL_PAR [ NEWLINE EOF COMMA ]
rate -> alg_expr . [ NEWLINE EOF COMMA ]
rate -> alg_expr . OP_CUR CL_CUR [ NEWLINE EOF COMMA ]
## Transitions:
-- On SMALLER shift to state 145
-- On OP_PAR shift to state 362
-- On OP_CUR shift to state 365
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On NEWLINE EOF COMMA
--   reduce production rate -> alg_expr

State 362:
## Known stack suffix:
## alg_expr OP_PAR
## LR(1) items:
rate -> alg_expr OP_PAR . alg_with_radius CL_PAR [ NEWLINE EOF COMMA ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 146
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_with_radius shift to state 363
-- On alg_expr shift to state 355
## Reductions:

State 363:
## Known stack suffix:
## alg_expr OP_PAR alg_with_radius
## LR(1) items:
rate -> alg_expr OP_PAR alg_with_radius . CL_PAR [ NEWLINE EOF COMMA ]
## Transitions:
-- On CL_PAR shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## alg_expr OP_PAR alg_with_radius CL_PAR
## LR(1) items:
rate -> alg_expr OP_PAR alg_with_radius CL_PAR . [ NEWLINE EOF COMMA ]
## Transitions:
## Reductions:
-- On NEWLINE EOF COMMA
--   reduce production rate -> alg_expr OP_PAR alg_with_radius CL_PAR

State 365:
## Known stack suffix:
## alg_expr OP_CUR
## LR(1) items:
rate -> alg_expr OP_CUR . alg_with_radius CL_CUR [ NEWLINE EOF COMMA ]
rate -> alg_expr OP_CUR . CL_CUR [ NEWLINE EOF COMMA ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On CL_CUR shift to state 366
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_with_radius shift to state 367
-- On alg_expr shift to state 355
## Reductions:

State 366:
## Known stack suffix:
## alg_expr OP_CUR CL_CUR
## LR(1) items:
rate -> alg_expr OP_CUR CL_CUR . [ NEWLINE EOF COMMA ]
## Transitions:
## Reductions:
-- On NEWLINE EOF COMMA
--   reduce production rate -> alg_expr OP_CUR CL_CUR

State 367:
## Known stack suffix:
## alg_expr OP_CUR alg_with_radius
## LR(1) items:
rate -> alg_expr OP_CUR alg_with_radius . CL_CUR [ NEWLINE EOF COMMA ]
## Transitions:
-- On CL_CUR shift to state 368
## Reductions:

State 368:
## Known stack suffix:
## alg_expr OP_CUR alg_with_radius CL_CUR
## LR(1) items:
rate -> alg_expr OP_CUR alg_with_radius CL_CUR . [ NEWLINE EOF COMMA ]
## Transitions:
## Reductions:
-- On NEWLINE EOF COMMA
--   reduce production rate -> alg_expr OP_CUR alg_with_radius CL_CUR

State 369:
## Known stack suffix:
## rule_content birate
## LR(1) items:
rule_expression -> rule_content birate . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production rule_expression -> rule_content birate

State 370:
## Known stack suffix:
## pattern
## LR(1) items:
rule_content -> pattern . token_expr arrow pattern token_expr [ error AT ]
rule_content -> pattern . token_expr arrow token_expr [ error AT ]
rule_content -> pattern . token_expr [ error AT ]
## Transitions:
-- On PIPE shift to state 332
-- On token_expr shift to state 371
## Reductions:
-- On error KAPPA_RAR KAPPA_LRAR AT
--   reduce production token_expr ->

State 371:
## Known stack suffix:
## pattern token_expr
## LR(1) items:
rule_content -> pattern token_expr . arrow pattern token_expr [ error AT ]
rule_content -> pattern token_expr . arrow token_expr [ error AT ]
rule_content -> pattern token_expr . [ error AT ]
## Transitions:
-- On KAPPA_RAR shift to state 329
-- On KAPPA_LRAR shift to state 330
-- On arrow shift to state 372
## Reductions:
-- On error AT
--   reduce production rule_content -> pattern token_expr

State 372:
## Known stack suffix:
## pattern token_expr arrow
## LR(1) items:
rule_content -> pattern token_expr arrow . pattern token_expr [ error AT ]
rule_content -> pattern token_expr arrow . token_expr [ error AT ]
## Transitions:
-- On PLUS shift to state 3
-- On PIPE shift to state 332
-- On OP_PAR shift to state 308
-- On MINUS shift to state 5
-- On token_expr shift to state 373
-- On pattern shift to state 374
-- On mod_agent shift to state 338
-- On agent_expression shift to state 344
## Reductions:
-- On ID
--   reduce production mod_agent ->
-- On error AT
--   reduce production token_expr ->

State 373:
## Known stack suffix:
## pattern token_expr arrow token_expr
## LR(1) items:
rule_content -> pattern token_expr arrow token_expr . [ error AT ]
## Transitions:
## Reductions:
-- On error AT
--   reduce production rule_content -> pattern token_expr arrow token_expr

State 374:
## Known stack suffix:
## pattern token_expr arrow pattern
## LR(1) items:
rule_content -> pattern token_expr arrow pattern . token_expr [ error AT ]
## Transitions:
-- On PIPE shift to state 332
-- On token_expr shift to state 375
## Reductions:
-- On error AT
--   reduce production token_expr ->

State 375:
## Known stack suffix:
## pattern token_expr arrow pattern token_expr
## LR(1) items:
rule_content -> pattern token_expr arrow pattern token_expr . [ error AT ]
## Transitions:
## Reductions:
-- On error AT
--   reduce production rule_content -> pattern token_expr arrow pattern token_expr

State 376:
## Known stack suffix:
## INIT
## LR(1) items:
instruction -> INIT . init_declaration [ NEWLINE EOF ]
instruction -> INIT . error [ NEWLINE EOF ]
## Transitions:
-- On error shift to state 377
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 93
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 378
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On init_declaration shift to state 381
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 382
## Reductions:

State 377:
## Known stack suffix:
## INIT error
## LR(1) items:
instruction -> INIT error . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> INIT error

State 378:
## Known stack suffix:
## ID
## LR(1) items:
init_declaration -> ID . LAR alg_expr [ NEWLINE EOF ]
variable -> ID . [ SMALLER POW PLUS OP_PAR MULT MODULO MINUS ID GREATER EQUAL DIV DIFF ]
## Transitions:
-- On LAR shift to state 379
## Reductions:
-- On SMALLER POW PLUS OP_PAR MULT MODULO MINUS ID GREATER EQUAL DIV DIFF
--   reduce production variable -> ID

State 379:
## Known stack suffix:
## ID LAR
## LR(1) items:
init_declaration -> ID LAR . alg_expr [ NEWLINE EOF ]
## Transitions:
-- On TRUE shift to state 88
-- On TMAX shift to state 72
-- On TIME shift to state 73
-- On TAN shift to state 74
-- On SQRT shift to state 75
-- On SINUS shift to state 76
-- On PIPE shift to state 77
-- On OP_PAR shift to state 89
-- On NULL_EVENT shift to state 90
-- On NOT shift to state 91
-- On MINUS shift to state 94
-- On MIN shift to state 95
-- On MAX shift to state 96
-- On LOG shift to state 97
-- On LABEL shift to state 98
-- On INT shift to state 99
-- On INFINITY shift to state 100
-- On ID shift to state 101
-- On FLOAT shift to state 102
-- On FALSE shift to state 130
-- On EXPONENT shift to state 103
-- On EVENT shift to state 104
-- On EMAX shift to state 105
-- On CPUTIME shift to state 106
-- On COSINUS shift to state 107
-- On ABS shift to state 108
-- On variable shift to state 109
-- On small_bool_expr shift to state 131
-- On small_alg_expr shift to state 110
-- On nbr shift to state 111
-- On mid_alg_expr shift to state 132
-- On constant shift to state 113
-- On bool_expr shift to state 139
-- On alg_expr shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## ID LAR alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
init_declaration -> ID LAR alg_expr . [ NEWLINE EOF ]
## Transitions:
-- On SMALLER shift to state 145
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
## Reductions:
-- On NEWLINE EOF
--   reduce production init_declaration -> ID LAR alg_expr

State 381:
## Known stack suffix:
## INIT init_declaration
## LR(1) items:
instruction -> INIT init_declaration . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> INIT init_declaration

State 382:
## Known stack suffix:
## alg_expr
## LR(1) items:
bool_expr -> alg_expr . GREATER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . SMALLER alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . EQUAL alg_expr [ THEN OR AND ]
bool_expr -> alg_expr . DIFF alg_expr [ THEN OR AND ]
init_declaration -> alg_expr . non_empty_mixture [ NEWLINE EOF ]
init_declaration -> alg_expr . OP_PAR non_empty_mixture CL_PAR [ NEWLINE EOF ]
init_declaration -> alg_expr . ID [ NEWLINE EOF ]
## Transitions:
-- On SMALLER shift to state 145
-- On OP_PAR shift to state 383
-- On ID shift to state 386
-- On GREATER shift to state 148
-- On EQUAL shift to state 150
-- On DIFF shift to state 152
-- On non_empty_mixture shift to state 387
## Reductions:

State 383:
## Known stack suffix:
## alg_expr OP_PAR
## LR(1) items:
init_declaration -> alg_expr OP_PAR . non_empty_mixture CL_PAR [ NEWLINE EOF ]
## Transitions:
-- On ID shift to state 174
-- On non_empty_mixture shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## alg_expr OP_PAR non_empty_mixture
## LR(1) items:
init_declaration -> alg_expr OP_PAR non_empty_mixture . CL_PAR [ NEWLINE EOF ]
## Transitions:
-- On CL_PAR shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## alg_expr OP_PAR non_empty_mixture CL_PAR
## LR(1) items:
init_declaration -> alg_expr OP_PAR non_empty_mixture CL_PAR . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production init_declaration -> alg_expr OP_PAR non_empty_mixture CL_PAR

State 386:
## Known stack suffix:
## alg_expr ID
## LR(1) items:
init_declaration -> alg_expr ID . [ NEWLINE EOF ]
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR [ NEWLINE EOF ]
non_empty_mixture -> ID . OP_PAR interface_expression CL_PAR COMMA pattern [ NEWLINE EOF ]
## Transitions:
-- On OP_PAR shift to state 80
## Reductions:
-- On NEWLINE EOF
--   reduce production init_declaration -> alg_expr ID

State 387:
## Known stack suffix:
## alg_expr non_empty_mixture
## LR(1) items:
init_declaration -> alg_expr non_empty_mixture . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production init_declaration -> alg_expr non_empty_mixture

State 388:
## Known stack suffix:
## CONFIG
## LR(1) items:
instruction -> CONFIG . STRING value_list [ NEWLINE EOF ]
## Transitions:
-- On STRING shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## CONFIG STRING
## LR(1) items:
instruction -> CONFIG STRING . value_list [ NEWLINE EOF ]
## Transitions:
-- On STRING shift to state 390
-- On value_list shift to state 392
## Reductions:

State 390:
## Known stack suffix:
## STRING
## LR(1) items:
value_list -> STRING . [ NEWLINE EOF ]
value_list -> STRING . value_list [ NEWLINE EOF ]
## Transitions:
-- On STRING shift to state 390
-- On value_list shift to state 391
## Reductions:
-- On NEWLINE EOF
--   reduce production value_list -> STRING

State 391:
## Known stack suffix:
## STRING value_list
## LR(1) items:
value_list -> STRING value_list . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production value_list -> STRING value_list

State 392:
## Known stack suffix:
## CONFIG STRING value_list
## LR(1) items:
instruction -> CONFIG STRING value_list . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE EOF
--   reduce production instruction -> CONFIG STRING value_list

State 393:
## Known stack suffix:
## NEWLINE start_rule
## LR(1) items:
newline -> NEWLINE start_rule . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production newline -> NEWLINE start_rule

State 394:
## Known stack suffix:
## rule_expression
## LR(1) items:
start_rule -> rule_expression . newline [ # ]
## Transitions:
-- On NEWLINE shift to state 320
-- On EOF shift to state 326
-- On newline shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## rule_expression newline
## LR(1) items:
start_rule -> rule_expression newline . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production start_rule -> rule_expression newline

State 396:
## Known stack suffix:
## newline
## LR(1) items:
start_rule -> newline . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production start_rule -> newline

State 397:
## Known stack suffix:
## instruction
## LR(1) items:
start_rule -> instruction . newline [ # ]
## Transitions:
-- On NEWLINE shift to state 320
-- On EOF shift to state 326
-- On newline shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## instruction newline
## LR(1) items:
start_rule -> instruction newline . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production start_rule -> instruction newline

State 399:
## Known stack suffix:
## start_rule
## LR(1) items:
start_rule' -> start_rule . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept start_rule

