State 0:
## Known stack suffix:
##
## LR(1) items:
interactive_command' -> . interactive_command [ # ]
## Transitions:
-- On error shift to state 1
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On interactive_command shift to state 8
-- On annot shift to state 9
## Reductions:
-- On TRACK STOP SPECIES_OF SNAPSHOT RUN PRINTF PLOTENTRY INTRO FLUX EOF DELETE ASSIGN APPLY
--   reduce production annot ->

State 1:
## Known stack suffix:
## error
## LR(1) items:
interactive_command -> error . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive_command -> error

State 2:
## Known stack suffix:
## SPACE
## LR(1) items:
annot -> SPACE . annot [ UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 7
## Reductions:
-- On UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS
--   reduce production annot ->

State 3:
## Known stack suffix:
## NEWLINE
## LR(1) items:
annot -> NEWLINE . annot [ UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 6
## Reductions:
-- On UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS
--   reduce production annot ->

State 4:
## Known stack suffix:
## COMMENT
## LR(1) items:
annot -> COMMENT . annot [ UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 5
## Reductions:
-- On UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS
--   reduce production annot ->

State 5:
## Known stack suffix:
## COMMENT annot
## LR(1) items:
annot -> COMMENT annot . [ UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annot -> COMMENT annot

State 6:
## Known stack suffix:
## NEWLINE annot
## LR(1) items:
annot -> NEWLINE annot . [ UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annot -> NEWLINE annot

State 7:
## Known stack suffix:
## SPACE annot
## LR(1) items:
annot -> SPACE annot . [ UNDERSCORE TRUE TRACK TOKEN TMAX TIME THEN TAN STRING STOP SQRT SPECIES_OF SNAPSHOT SMALLER SINUS SIGNATURE SHARP SEMICOLON RUN REPEAT RAR PRINTF POW PLUS PLOTENTRY PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INTRO INT INIT INFINITY ID GREATER FLUX FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF DELETE CPUTIME COSINUS CONFIG COMMA COLON CL_PAR CL_CUR CL_BRA ASSIGN APPLY AND ALARM ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annot -> SPACE annot

State 8:
## Known stack suffix:
## interactive_command
## LR(1) items:
interactive_command' -> interactive_command . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept interactive_command

State 9:
## Known stack suffix:
## annot
## LR(1) items:
interactive_command -> annot . RUN annot SEMICOLON [ # ]
interactive_command -> annot . RUN annot bool_expr SEMICOLON [ # ]
interactive_command -> annot . effect SEMICOLON [ # ]
interactive_command -> annot . EOF [ # ]
## Transitions:
-- On TRACK shift to state 10
-- On STOP shift to state 159
-- On SPECIES_OF shift to state 309
-- On SNAPSHOT shift to state 316
-- On RUN shift to state 318
-- On PRINTF shift to state 323
-- On PLOTENTRY shift to state 327
-- On INTRO shift to state 329
-- On FLUX shift to state 334
-- On EOF shift to state 343
-- On DELETE shift to state 344
-- On ASSIGN shift to state 349
-- On APPLY shift to state 357
-- On effect shift to state 386
## Reductions:

State 10:
## Known stack suffix:
## TRACK
## LR(1) items:
effect -> TRACK . annot LABEL annot boolean annot [ SEMICOLON EOF CL_PAR ]
effect -> TRACK . annot pattern boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 11
## Reductions:
-- On LABEL ID DOT
--   reduce production annot ->

State 11:
## Known stack suffix:
## TRACK annot
## LR(1) items:
effect -> TRACK annot . LABEL annot boolean annot [ SEMICOLON EOF CL_PAR ]
effect -> TRACK annot . pattern boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On LABEL shift to state 12
-- On ID shift to state 18
-- On DOT shift to state 150
-- On pattern shift to state 152
-- On agent shift to state 155
## Reductions:

State 12:
## Known stack suffix:
## TRACK annot LABEL
## LR(1) items:
effect -> TRACK annot LABEL . annot boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 13
## Reductions:
-- On TRUE FALSE
--   reduce production annot ->

State 13:
## Known stack suffix:
## TRACK annot LABEL annot
## LR(1) items:
effect -> TRACK annot LABEL annot . boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 14
-- On FALSE shift to state 15
-- On boolean shift to state 16
## Reductions:

State 14:
## Known stack suffix:
## TRUE
## LR(1) items:
boolean -> TRUE . [ SPACE SEMICOLON NEWLINE GREATER EOF COMMENT CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean -> TRUE

State 15:
## Known stack suffix:
## FALSE
## LR(1) items:
boolean -> FALSE . [ SPACE SEMICOLON NEWLINE GREATER EOF COMMENT CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean -> FALSE

State 16:
## Known stack suffix:
## TRACK annot LABEL annot boolean
## LR(1) items:
effect -> TRACK annot LABEL annot boolean . annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 17
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production annot ->

State 17:
## Known stack suffix:
## TRACK annot LABEL annot boolean annot
## LR(1) items:
effect -> TRACK annot LABEL annot boolean annot . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> TRACK annot LABEL annot boolean annot

State 18:
## Known stack suffix:
## ID
## LR(1) items:
agent -> ID . annot OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
agent -> ID . annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
agent -> ID . annot error [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 25
## Reductions:
-- On error OP_PAR COLON
--   reduce production annot ->

State 19:
## Known stack suffix:
## SPACE
## LR(1) items:
annot -> SPACE . annot [ error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 24
## Reductions:
-- On error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS
--   reduce production annot ->

State 20:
## Known stack suffix:
## NEWLINE
## LR(1) items:
annot -> NEWLINE . annot [ error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 23
## Reductions:
-- On error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS
--   reduce production annot ->

State 21:
## Known stack suffix:
## COMMENT
## LR(1) items:
annot -> COMMENT . annot [ error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 22
## Reductions:
-- On error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS
--   reduce production annot ->

State 22:
## Known stack suffix:
## COMMENT annot
## LR(1) items:
annot -> COMMENT annot . [ error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annot -> COMMENT annot

State 23:
## Known stack suffix:
## NEWLINE annot
## LR(1) items:
annot -> NEWLINE annot . [ error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annot -> NEWLINE annot

State 24:
## Known stack suffix:
## SPACE annot
## LR(1) items:
annot -> SPACE annot . [ error UNDERSCORE TRUE TOKEN TMAX TIME TAN SQRT SINUS SIGNATURE SHARP RAR PLUS PLOT PIPE PERT OP_PAR OP_CUR OP_BRA OBS NULL_EVENT NOT MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX DOT CPUTIME COSINUS CONFIG COMMA COLON CL_PAR AT ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annot -> SPACE annot

State 25:
## Known stack suffix:
## ID annot
## LR(1) items:
agent -> ID annot . OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
agent -> ID annot . COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
agent -> ID annot . error [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On error shift to state 26
-- On OP_PAR shift to state 27
-- On COLON shift to state 141
## Reductions:

State 26:
## Known stack suffix:
## ID annot error
## LR(1) items:
agent -> ID annot error . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> ID annot error

State 27:
## Known stack suffix:
## ID annot OP_PAR
## LR(1) items:
agent -> ID annot OP_PAR . annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 28
## Reductions:
-- On error ID CL_PAR
--   reduce production annot ->

State 28:
## Known stack suffix:
## ID annot OP_PAR annot
## LR(1) items:
agent -> ID annot OP_PAR annot . interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On error shift to state 29
-- On ID shift to state 30
-- On site shift to state 128
-- On interface shift to state 133
## Reductions:
-- On CL_PAR
--   reduce production interface ->

State 29:
## Known stack suffix:
## error
## LR(1) items:
interface -> error . [ CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface -> error

State 30:
## Known stack suffix:
## ID
## LR(1) items:
site -> ID . annot OP_BRA site_link annot OP_CUR annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID . annot OP_CUR annot site_internal annot OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID . annot OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID . annot OP_CUR annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID . annot OP_CUR annot site_counter [ error ID COMMA CL_PAR ]
site -> ID . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 31
## Reductions:
-- On error OP_CUR OP_BRA ID COMMA CL_PAR
--   reduce production annot ->

State 31:
## Known stack suffix:
## ID annot
## LR(1) items:
site -> ID annot . OP_BRA site_link annot OP_CUR annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID annot . OP_CUR annot site_internal annot OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID annot . OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID annot . OP_CUR annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID annot . OP_CUR annot site_counter [ error ID COMMA CL_PAR ]
site -> ID annot . [ error ID COMMA CL_PAR ]
## Transitions:
-- On OP_CUR shift to state 32
-- On OP_BRA shift to state 121
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production site -> ID annot

State 32:
## Known stack suffix:
## ID annot OP_CUR
## LR(1) items:
site -> ID annot OP_CUR . annot site_internal annot OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_CUR . annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_CUR . annot site_counter [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 33
## Reductions:
-- On error SHARP PLUS MINUS ID GREATER EQUAL
--   reduce production annot ->

State 33:
## Known stack suffix:
## ID annot OP_CUR annot
## LR(1) items:
site -> ID annot OP_CUR annot . site_internal annot OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_CUR annot . site_internal annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_CUR annot . site_counter [ error ID COMMA CL_PAR ]
## Transitions:
-- On error shift to state 34
-- On SHARP shift to state 35
-- On PLUS shift to state 36
-- On MINUS shift to state 44
-- On ID shift to state 49
-- On GREATER shift to state 50
-- On EQUAL shift to state 55
-- On site_internal shift to state 59
-- On site_counter shift to state 92
-- On internal_states shift to state 93
-- On internal_state shift to state 101
-- On counter_test shift to state 107
-- On counter_modif shift to state 117
## Reductions:

State 34:
## Known stack suffix:
## error
## LR(1) items:
site_internal -> error . [ error SPACE OP_BRA NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site_internal -> error

State 35:
## Known stack suffix:
## SHARP
## LR(1) items:
internal_state -> SHARP . [ SPACE SHARP NEWLINE ID DIV COMMENT COMMA CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_state -> SHARP

State 36:
## Known stack suffix:
## PLUS
## LR(1) items:
counter_modif -> PLUS . annot EQUAL annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
counter_modif -> PLUS . annot EQUAL annot MINUS annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 37
## Reductions:
-- On EQUAL
--   reduce production annot ->

State 37:
## Known stack suffix:
## PLUS annot
## LR(1) items:
counter_modif -> PLUS annot . EQUAL annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
counter_modif -> PLUS annot . EQUAL annot MINUS annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On EQUAL shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## PLUS annot EQUAL
## LR(1) items:
counter_modif -> PLUS annot EQUAL . annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
counter_modif -> PLUS annot EQUAL . annot MINUS annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 39
## Reductions:
-- On MINUS INT
--   reduce production annot ->

State 39:
## Known stack suffix:
## PLUS annot EQUAL annot
## LR(1) items:
counter_modif -> PLUS annot EQUAL annot . INT [ SPACE NEWLINE COMMENT CL_CUR ]
counter_modif -> PLUS annot EQUAL annot . MINUS annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On MINUS shift to state 40
-- On INT shift to state 43
## Reductions:

State 40:
## Known stack suffix:
## PLUS annot EQUAL annot MINUS
## LR(1) items:
counter_modif -> PLUS annot EQUAL annot MINUS . annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 41
## Reductions:
-- On INT
--   reduce production annot ->

State 41:
## Known stack suffix:
## PLUS annot EQUAL annot MINUS annot
## LR(1) items:
counter_modif -> PLUS annot EQUAL annot MINUS annot . INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On INT shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## PLUS annot EQUAL annot MINUS annot INT
## LR(1) items:
counter_modif -> PLUS annot EQUAL annot MINUS annot INT . [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production counter_modif -> PLUS annot EQUAL annot MINUS annot INT

State 43:
## Known stack suffix:
## PLUS annot EQUAL annot INT
## LR(1) items:
counter_modif -> PLUS annot EQUAL annot INT . [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production counter_modif -> PLUS annot EQUAL annot INT

State 44:
## Known stack suffix:
## MINUS
## LR(1) items:
counter_modif -> MINUS . annot EQUAL annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 45
## Reductions:
-- On EQUAL
--   reduce production annot ->

State 45:
## Known stack suffix:
## MINUS annot
## LR(1) items:
counter_modif -> MINUS annot . EQUAL annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On EQUAL shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## MINUS annot EQUAL
## LR(1) items:
counter_modif -> MINUS annot EQUAL . annot INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 47
## Reductions:
-- On INT
--   reduce production annot ->

State 47:
## Known stack suffix:
## MINUS annot EQUAL annot
## LR(1) items:
counter_modif -> MINUS annot EQUAL annot . INT [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
-- On INT shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## MINUS annot EQUAL annot INT
## LR(1) items:
counter_modif -> MINUS annot EQUAL annot INT . [ SPACE NEWLINE COMMENT CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production counter_modif -> MINUS annot EQUAL annot INT

State 49:
## Known stack suffix:
## ID
## LR(1) items:
internal_state -> ID . [ SPACE SHARP NEWLINE ID DIV COMMENT COMMA CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_state -> ID

State 50:
## Known stack suffix:
## GREATER
## LR(1) items:
counter_test -> GREATER . annot EQUAL annot INT [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 51
## Reductions:
-- On EQUAL
--   reduce production annot ->

State 51:
## Known stack suffix:
## GREATER annot
## LR(1) items:
counter_test -> GREATER annot . EQUAL annot INT [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
-- On EQUAL shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## GREATER annot EQUAL
## LR(1) items:
counter_test -> GREATER annot EQUAL . annot INT [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 53
## Reductions:
-- On INT
--   reduce production annot ->

State 53:
## Known stack suffix:
## GREATER annot EQUAL annot
## LR(1) items:
counter_test -> GREATER annot EQUAL annot . INT [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
-- On INT shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## GREATER annot EQUAL annot INT
## LR(1) items:
counter_test -> GREATER annot EQUAL annot INT . [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production counter_test -> GREATER annot EQUAL annot INT

State 55:
## Known stack suffix:
## EQUAL
## LR(1) items:
counter_test -> EQUAL . annot INT [ SPACE NEWLINE DIV COMMENT CL_CUR ]
counter_test -> EQUAL . annot ID [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 56
## Reductions:
-- On INT ID
--   reduce production annot ->

State 56:
## Known stack suffix:
## EQUAL annot
## LR(1) items:
counter_test -> EQUAL annot . INT [ SPACE NEWLINE DIV COMMENT CL_CUR ]
counter_test -> EQUAL annot . ID [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
-- On INT shift to state 57
-- On ID shift to state 58
## Reductions:

State 57:
## Known stack suffix:
## EQUAL annot INT
## LR(1) items:
counter_test -> EQUAL annot INT . [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production counter_test -> EQUAL annot INT

State 58:
## Known stack suffix:
## EQUAL annot ID
## LR(1) items:
counter_test -> EQUAL annot ID . [ SPACE NEWLINE DIV COMMENT CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production counter_test -> EQUAL annot ID

State 59:
## Known stack suffix:
## ID annot OP_CUR annot site_internal
## LR(1) items:
site -> ID annot OP_CUR annot site_internal . annot OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_CUR annot site_internal . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 60
## Reductions:
-- On error OP_BRA ID COMMA CL_PAR
--   reduce production annot ->

State 60:
## Known stack suffix:
## ID annot OP_CUR annot site_internal annot
## LR(1) items:
site -> ID annot OP_CUR annot site_internal annot . OP_BRA site_link annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_CUR annot site_internal annot . [ error ID COMMA CL_PAR ]
## Transitions:
-- On OP_BRA shift to state 61
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production site -> ID annot OP_CUR annot site_internal annot

State 61:
## Known stack suffix:
## ID annot OP_CUR annot site_internal annot OP_BRA
## LR(1) items:
site -> ID annot OP_CUR annot site_internal annot OP_BRA . site_link annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On site_link shift to state 62
-- On annot shift to state 64
## Reductions:
-- On error UNDERSCORE SHARP INT ID DOT
--   reduce production annot ->

State 62:
## Known stack suffix:
## ID annot OP_CUR annot site_internal annot OP_BRA site_link
## LR(1) items:
site -> ID annot OP_CUR annot site_internal annot OP_BRA site_link . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 63
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production annot ->

State 63:
## Known stack suffix:
## ID annot OP_CUR annot site_internal annot OP_BRA site_link annot
## LR(1) items:
site -> ID annot OP_CUR annot site_internal annot OP_BRA site_link annot . [ error ID COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site -> ID annot OP_CUR annot site_internal annot OP_BRA site_link annot

State 64:
## Known stack suffix:
## annot
## LR(1) items:
site_link -> annot . link_states link_modif CL_BRA [ error SPACE OP_CUR NEWLINE ID COMMENT COMMA CL_PAR ]
site_link -> annot . error [ error SPACE OP_CUR NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
-- On error shift to state 65
-- On UNDERSCORE shift to state 66
-- On SHARP shift to state 67
-- On INT shift to state 68
-- On ID shift to state 69
-- On DOT shift to state 75
-- On link_states shift to state 76
-- On link_state shift to state 86
## Reductions:

State 65:
## Known stack suffix:
## annot error
## LR(1) items:
site_link -> annot error . [ error SPACE OP_CUR NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site_link -> annot error

State 66:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
link_state -> UNDERSCORE . [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_state -> UNDERSCORE

State 67:
## Known stack suffix:
## SHARP
## LR(1) items:
link_state -> SHARP . [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_state -> SHARP

State 68:
## Known stack suffix:
## INT
## LR(1) items:
link_state -> INT . [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_state -> INT

State 69:
## Known stack suffix:
## ID
## LR(1) items:
link_state -> ID . annot DOT annot ID [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
link_state -> ID . annot error [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 70
## Reductions:
-- On error DOT
--   reduce production annot ->

State 70:
## Known stack suffix:
## ID annot
## LR(1) items:
link_state -> ID annot . DOT annot ID [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
link_state -> ID annot . error [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
-- On error shift to state 71
-- On DOT shift to state 72
## Reductions:

State 71:
## Known stack suffix:
## ID annot error
## LR(1) items:
link_state -> ID annot error . [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_state -> ID annot error

State 72:
## Known stack suffix:
## ID annot DOT
## LR(1) items:
link_state -> ID annot DOT . annot ID [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 73
## Reductions:
-- On ID
--   reduce production annot ->

State 73:
## Known stack suffix:
## ID annot DOT annot
## LR(1) items:
link_state -> ID annot DOT annot . ID [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
-- On ID shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## ID annot DOT annot ID
## LR(1) items:
link_state -> ID annot DOT annot ID . [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_state -> ID annot DOT annot ID

State 75:
## Known stack suffix:
## DOT
## LR(1) items:
link_state -> DOT . [ UNDERSCORE SPACE SHARP NEWLINE INT ID DOT DIV COMMENT COMMA CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_state -> DOT

State 76:
## Known stack suffix:
## annot link_states
## LR(1) items:
site_link -> annot link_states . link_modif CL_BRA [ error SPACE OP_CUR NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
-- On DIV shift to state 77
-- On link_modif shift to state 84
## Reductions:
-- On CL_BRA
--   reduce production link_modif ->

State 77:
## Known stack suffix:
## DIV
## LR(1) items:
link_modif -> DIV . annot DOT annot [ CL_BRA ]
link_modif -> DIV . annot INT annot [ CL_BRA ]
link_modif -> DIV . annot error [ CL_BRA ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 78
## Reductions:
-- On error INT DOT
--   reduce production annot ->

State 78:
## Known stack suffix:
## DIV annot
## LR(1) items:
link_modif -> DIV annot . DOT annot [ CL_BRA ]
link_modif -> DIV annot . INT annot [ CL_BRA ]
link_modif -> DIV annot . error [ CL_BRA ]
## Transitions:
-- On error shift to state 79
-- On INT shift to state 80
-- On DOT shift to state 82
## Reductions:

State 79:
## Known stack suffix:
## DIV annot error
## LR(1) items:
link_modif -> DIV annot error . [ CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_modif -> DIV annot error

State 80:
## Known stack suffix:
## DIV annot INT
## LR(1) items:
link_modif -> DIV annot INT . annot [ CL_BRA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 81
## Reductions:
-- On CL_BRA
--   reduce production annot ->

State 81:
## Known stack suffix:
## DIV annot INT annot
## LR(1) items:
link_modif -> DIV annot INT annot . [ CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_modif -> DIV annot INT annot

State 82:
## Known stack suffix:
## DIV annot DOT
## LR(1) items:
link_modif -> DIV annot DOT . annot [ CL_BRA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 83
## Reductions:
-- On CL_BRA
--   reduce production annot ->

State 83:
## Known stack suffix:
## DIV annot DOT annot
## LR(1) items:
link_modif -> DIV annot DOT annot . [ CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_modif -> DIV annot DOT annot

State 84:
## Known stack suffix:
## annot link_states link_modif
## LR(1) items:
site_link -> annot link_states link_modif . CL_BRA [ error SPACE OP_CUR NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
-- On CL_BRA shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## annot link_states link_modif CL_BRA
## LR(1) items:
site_link -> annot link_states link_modif CL_BRA . [ error SPACE OP_CUR NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site_link -> annot link_states link_modif CL_BRA

State 86:
## Known stack suffix:
## link_state
## LR(1) items:
link_states -> link_state . annot [ DIV CL_BRA ]
link_states -> link_state . annot link_states [ DIV CL_BRA ]
link_states -> link_state . annot COMMA annot link_states [ DIV CL_BRA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 87
## Reductions:
-- On UNDERSCORE SHARP INT ID DOT DIV COMMA CL_BRA
--   reduce production annot ->

State 87:
## Known stack suffix:
## link_state annot
## LR(1) items:
link_states -> link_state annot . [ DIV CL_BRA ]
link_states -> link_state annot . link_states [ DIV CL_BRA ]
link_states -> link_state annot . COMMA annot link_states [ DIV CL_BRA ]
## Transitions:
-- On UNDERSCORE shift to state 66
-- On SHARP shift to state 67
-- On INT shift to state 68
-- On ID shift to state 69
-- On DOT shift to state 75
-- On COMMA shift to state 88
-- On link_states shift to state 91
-- On link_state shift to state 86
## Reductions:
-- On DIV CL_BRA
--   reduce production link_states -> link_state annot

State 88:
## Known stack suffix:
## link_state annot COMMA
## LR(1) items:
link_states -> link_state annot COMMA . annot link_states [ DIV CL_BRA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 89
## Reductions:
-- On UNDERSCORE SHARP INT ID DOT
--   reduce production annot ->

State 89:
## Known stack suffix:
## link_state annot COMMA annot
## LR(1) items:
link_states -> link_state annot COMMA annot . link_states [ DIV CL_BRA ]
## Transitions:
-- On UNDERSCORE shift to state 66
-- On SHARP shift to state 67
-- On INT shift to state 68
-- On ID shift to state 69
-- On DOT shift to state 75
-- On link_states shift to state 90
-- On link_state shift to state 86
## Reductions:

State 90:
## Known stack suffix:
## link_state annot COMMA annot link_states
## LR(1) items:
link_states -> link_state annot COMMA annot link_states . [ DIV CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_states -> link_state annot COMMA annot link_states

State 91:
## Known stack suffix:
## link_state annot link_states
## LR(1) items:
link_states -> link_state annot link_states . [ DIV CL_BRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production link_states -> link_state annot link_states

State 92:
## Known stack suffix:
## ID annot OP_CUR annot site_counter
## LR(1) items:
site -> ID annot OP_CUR annot site_counter . [ error ID COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site -> ID annot OP_CUR annot site_counter

State 93:
## Known stack suffix:
## internal_states
## LR(1) items:
site_internal -> internal_states . internal_modif CL_CUR [ error SPACE OP_BRA NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
-- On DIV shift to state 94
-- On internal_modif shift to state 99
## Reductions:
-- On CL_CUR
--   reduce production internal_modif ->

State 94:
## Known stack suffix:
## DIV
## LR(1) items:
internal_modif -> DIV . annot ID annot [ CL_CUR ]
internal_modif -> DIV . annot error [ CL_CUR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 95
## Reductions:
-- On error ID
--   reduce production annot ->

State 95:
## Known stack suffix:
## DIV annot
## LR(1) items:
internal_modif -> DIV annot . ID annot [ CL_CUR ]
internal_modif -> DIV annot . error [ CL_CUR ]
## Transitions:
-- On error shift to state 96
-- On ID shift to state 97
## Reductions:

State 96:
## Known stack suffix:
## DIV annot error
## LR(1) items:
internal_modif -> DIV annot error . [ CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_modif -> DIV annot error

State 97:
## Known stack suffix:
## DIV annot ID
## LR(1) items:
internal_modif -> DIV annot ID . annot [ CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 98
## Reductions:
-- On CL_CUR
--   reduce production annot ->

State 98:
## Known stack suffix:
## DIV annot ID annot
## LR(1) items:
internal_modif -> DIV annot ID annot . [ CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_modif -> DIV annot ID annot

State 99:
## Known stack suffix:
## internal_states internal_modif
## LR(1) items:
site_internal -> internal_states internal_modif . CL_CUR [ error SPACE OP_BRA NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
-- On CL_CUR shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## internal_states internal_modif CL_CUR
## LR(1) items:
site_internal -> internal_states internal_modif CL_CUR . [ error SPACE OP_BRA NEWLINE ID COMMENT COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site_internal -> internal_states internal_modif CL_CUR

State 101:
## Known stack suffix:
## internal_state
## LR(1) items:
internal_states -> internal_state . annot [ DIV CL_CUR ]
internal_states -> internal_state . annot internal_states [ DIV CL_CUR ]
internal_states -> internal_state . annot COMMA annot internal_states [ DIV CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 102
## Reductions:
-- On SHARP ID DIV COMMA CL_CUR
--   reduce production annot ->

State 102:
## Known stack suffix:
## internal_state annot
## LR(1) items:
internal_states -> internal_state annot . [ DIV CL_CUR ]
internal_states -> internal_state annot . internal_states [ DIV CL_CUR ]
internal_states -> internal_state annot . COMMA annot internal_states [ DIV CL_CUR ]
## Transitions:
-- On SHARP shift to state 35
-- On ID shift to state 49
-- On COMMA shift to state 103
-- On internal_states shift to state 106
-- On internal_state shift to state 101
## Reductions:
-- On DIV CL_CUR
--   reduce production internal_states -> internal_state annot

State 103:
## Known stack suffix:
## internal_state annot COMMA
## LR(1) items:
internal_states -> internal_state annot COMMA . annot internal_states [ DIV CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 104
## Reductions:
-- On SHARP ID
--   reduce production annot ->

State 104:
## Known stack suffix:
## internal_state annot COMMA annot
## LR(1) items:
internal_states -> internal_state annot COMMA annot . internal_states [ DIV CL_CUR ]
## Transitions:
-- On SHARP shift to state 35
-- On ID shift to state 49
-- On internal_states shift to state 105
-- On internal_state shift to state 101
## Reductions:

State 105:
## Known stack suffix:
## internal_state annot COMMA annot internal_states
## LR(1) items:
internal_states -> internal_state annot COMMA annot internal_states . [ DIV CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_states -> internal_state annot COMMA annot internal_states

State 106:
## Known stack suffix:
## internal_state annot internal_states
## LR(1) items:
internal_states -> internal_state annot internal_states . [ DIV CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_states -> internal_state annot internal_states

State 107:
## Known stack suffix:
## counter_test
## LR(1) items:
site_counter -> counter_test . annot CL_CUR annot [ error ID COMMA CL_PAR ]
site_counter -> counter_test . annot DIV annot counter_modif annot CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 108
## Reductions:
-- On DIV CL_CUR
--   reduce production annot ->

State 108:
## Known stack suffix:
## counter_test annot
## LR(1) items:
site_counter -> counter_test annot . CL_CUR annot [ error ID COMMA CL_PAR ]
site_counter -> counter_test annot . DIV annot counter_modif annot CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On DIV shift to state 109
-- On CL_CUR shift to state 115
## Reductions:

State 109:
## Known stack suffix:
## counter_test annot DIV
## LR(1) items:
site_counter -> counter_test annot DIV . annot counter_modif annot CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 110
## Reductions:
-- On PLUS MINUS
--   reduce production annot ->

State 110:
## Known stack suffix:
## counter_test annot DIV annot
## LR(1) items:
site_counter -> counter_test annot DIV annot . counter_modif annot CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 44
-- On counter_modif shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## counter_test annot DIV annot counter_modif
## LR(1) items:
site_counter -> counter_test annot DIV annot counter_modif . annot CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 112
## Reductions:
-- On CL_CUR
--   reduce production annot ->

State 112:
## Known stack suffix:
## counter_test annot DIV annot counter_modif annot
## LR(1) items:
site_counter -> counter_test annot DIV annot counter_modif annot . CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On CL_CUR shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## counter_test annot DIV annot counter_modif annot CL_CUR
## LR(1) items:
site_counter -> counter_test annot DIV annot counter_modif annot CL_CUR . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 114
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production annot ->

State 114:
## Known stack suffix:
## counter_test annot DIV annot counter_modif annot CL_CUR annot
## LR(1) items:
site_counter -> counter_test annot DIV annot counter_modif annot CL_CUR annot . [ error ID COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site_counter -> counter_test annot DIV annot counter_modif annot CL_CUR annot

State 115:
## Known stack suffix:
## counter_test annot CL_CUR
## LR(1) items:
site_counter -> counter_test annot CL_CUR . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 116
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production annot ->

State 116:
## Known stack suffix:
## counter_test annot CL_CUR annot
## LR(1) items:
site_counter -> counter_test annot CL_CUR annot . [ error ID COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site_counter -> counter_test annot CL_CUR annot

State 117:
## Known stack suffix:
## counter_modif
## LR(1) items:
site_counter -> counter_modif . annot CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 118
## Reductions:
-- On CL_CUR
--   reduce production annot ->

State 118:
## Known stack suffix:
## counter_modif annot
## LR(1) items:
site_counter -> counter_modif annot . CL_CUR annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On CL_CUR shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## counter_modif annot CL_CUR
## LR(1) items:
site_counter -> counter_modif annot CL_CUR . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 120
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production annot ->

State 120:
## Known stack suffix:
## counter_modif annot CL_CUR annot
## LR(1) items:
site_counter -> counter_modif annot CL_CUR annot . [ error ID COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site_counter -> counter_modif annot CL_CUR annot

State 121:
## Known stack suffix:
## ID annot OP_BRA
## LR(1) items:
site -> ID annot OP_BRA . site_link annot OP_CUR annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_BRA . site_link annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On site_link shift to state 122
-- On annot shift to state 64
## Reductions:
-- On error UNDERSCORE SHARP INT ID DOT
--   reduce production annot ->

State 122:
## Known stack suffix:
## ID annot OP_BRA site_link
## LR(1) items:
site -> ID annot OP_BRA site_link . annot OP_CUR annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_BRA site_link . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 123
## Reductions:
-- On error OP_CUR ID COMMA CL_PAR
--   reduce production annot ->

State 123:
## Known stack suffix:
## ID annot OP_BRA site_link annot
## LR(1) items:
site -> ID annot OP_BRA site_link annot . OP_CUR annot site_internal annot [ error ID COMMA CL_PAR ]
site -> ID annot OP_BRA site_link annot . [ error ID COMMA CL_PAR ]
## Transitions:
-- On OP_CUR shift to state 124
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production site -> ID annot OP_BRA site_link annot

State 124:
## Known stack suffix:
## ID annot OP_BRA site_link annot OP_CUR
## LR(1) items:
site -> ID annot OP_BRA site_link annot OP_CUR . annot site_internal annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 125
## Reductions:
-- On error SHARP ID
--   reduce production annot ->

State 125:
## Known stack suffix:
## ID annot OP_BRA site_link annot OP_CUR annot
## LR(1) items:
site -> ID annot OP_BRA site_link annot OP_CUR annot . site_internal annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On error shift to state 34
-- On SHARP shift to state 35
-- On ID shift to state 49
-- On site_internal shift to state 126
-- On internal_states shift to state 93
-- On internal_state shift to state 101
## Reductions:

State 126:
## Known stack suffix:
## ID annot OP_BRA site_link annot OP_CUR annot site_internal
## LR(1) items:
site -> ID annot OP_BRA site_link annot OP_CUR annot site_internal . annot [ error ID COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 127
## Reductions:
-- On error ID COMMA CL_PAR
--   reduce production annot ->

State 127:
## Known stack suffix:
## ID annot OP_BRA site_link annot OP_CUR annot site_internal annot
## LR(1) items:
site -> ID annot OP_BRA site_link annot OP_CUR annot site_internal annot . [ error ID COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production site -> ID annot OP_BRA site_link annot OP_CUR annot site_internal annot

State 128:
## Known stack suffix:
## site
## LR(1) items:
interface -> site . interface [ CL_PAR ]
interface -> site . COMMA annot interface [ CL_PAR ]
## Transitions:
-- On error shift to state 29
-- On ID shift to state 30
-- On COMMA shift to state 129
-- On site shift to state 128
-- On interface shift to state 132
## Reductions:
-- On CL_PAR
--   reduce production interface ->

State 129:
## Known stack suffix:
## site COMMA
## LR(1) items:
interface -> site COMMA . annot interface [ CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 130
## Reductions:
-- On error ID CL_PAR
--   reduce production annot ->

State 130:
## Known stack suffix:
## site COMMA annot
## LR(1) items:
interface -> site COMMA annot . interface [ CL_PAR ]
## Transitions:
-- On error shift to state 29
-- On ID shift to state 30
-- On site shift to state 128
-- On interface shift to state 131
## Reductions:
-- On CL_PAR
--   reduce production interface ->

State 131:
## Known stack suffix:
## site COMMA annot interface
## LR(1) items:
interface -> site COMMA annot interface . [ CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface -> site COMMA annot interface

State 132:
## Known stack suffix:
## site interface
## LR(1) items:
interface -> site interface . [ CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface -> site interface

State 133:
## Known stack suffix:
## ID annot OP_PAR annot interface
## LR(1) items:
agent -> ID annot OP_PAR annot interface . CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## ID annot OP_PAR annot interface CL_PAR
## LR(1) items:
agent -> ID annot OP_PAR annot interface CL_PAR . agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 135
-- On agent_modif shift to state 140
## Reductions:
-- On TRUE TOKEN SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OBS MINUS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR
--   reduce production annot ->

State 135:
## Known stack suffix:
## annot
## LR(1) items:
agent_modif -> annot . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
agent_modif -> annot . PLUS annot [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
agent_modif -> annot . MINUS annot [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On PLUS shift to state 136
-- On MINUS shift to state 138
## Reductions:
-- On TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR
--   reduce production agent_modif -> annot

State 136:
## Known stack suffix:
## annot PLUS
## LR(1) items:
agent_modif -> annot PLUS . annot [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 137
## Reductions:
-- On TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR
--   reduce production annot ->

State 137:
## Known stack suffix:
## annot PLUS annot
## LR(1) items:
agent_modif -> annot PLUS annot . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent_modif -> annot PLUS annot

State 138:
## Known stack suffix:
## annot MINUS
## LR(1) items:
agent_modif -> annot MINUS . annot [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 139
## Reductions:
-- On TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR
--   reduce production annot ->

State 139:
## Known stack suffix:
## annot MINUS annot
## LR(1) items:
agent_modif -> annot MINUS annot . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent_modif -> annot MINUS annot

State 140:
## Known stack suffix:
## ID annot OP_PAR annot interface CL_PAR agent_modif
## LR(1) items:
agent -> ID annot OP_PAR annot interface CL_PAR agent_modif . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> ID annot OP_PAR annot interface CL_PAR agent_modif

State 141:
## Known stack suffix:
## ID annot COLON
## LR(1) items:
agent -> ID annot COLON . annot ID annot OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 142
## Reductions:
-- On ID
--   reduce production annot ->

State 142:
## Known stack suffix:
## ID annot COLON annot
## LR(1) items:
agent -> ID annot COLON annot . ID annot OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On ID shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## ID annot COLON annot ID
## LR(1) items:
agent -> ID annot COLON annot ID . annot OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 144
## Reductions:
-- On OP_PAR
--   reduce production annot ->

State 144:
## Known stack suffix:
## ID annot COLON annot ID annot
## LR(1) items:
agent -> ID annot COLON annot ID annot . OP_PAR annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On OP_PAR shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR . annot interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 146
## Reductions:
-- On error ID CL_PAR
--   reduce production annot ->

State 146:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot . interface CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On error shift to state 29
-- On ID shift to state 30
-- On site shift to state 128
-- On interface shift to state 147
## Reductions:
-- On CL_PAR
--   reduce production interface ->

State 147:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot interface
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot interface . CL_PAR agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot interface CL_PAR
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot interface CL_PAR . agent_modif [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 135
-- On agent_modif shift to state 149
## Reductions:
-- On TRUE TOKEN SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OBS MINUS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR
--   reduce production annot ->

State 149:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> ID annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif

State 150:
## Known stack suffix:
## DOT
## LR(1) items:
agent -> DOT . annot [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 151
## Reductions:
-- On TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR
--   reduce production annot ->

State 151:
## Known stack suffix:
## DOT annot
## LR(1) items:
agent -> DOT annot . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG COMMA CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> DOT annot

State 152:
## Known stack suffix:
## TRACK annot pattern
## LR(1) items:
effect -> TRACK annot pattern . boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 14
-- On FALSE shift to state 15
-- On boolean shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## TRACK annot pattern boolean
## LR(1) items:
effect -> TRACK annot pattern boolean . annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 154
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production annot ->

State 154:
## Known stack suffix:
## TRACK annot pattern boolean annot
## LR(1) items:
effect -> TRACK annot pattern boolean annot . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> TRACK annot pattern boolean annot

State 155:
## Known stack suffix:
## agent
## LR(1) items:
pattern -> agent . COMMA annot pattern [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG CL_PAR ]
pattern -> agent . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG CL_PAR ]
## Transitions:
-- On COMMA shift to state 156
## Reductions:
-- On TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG CL_PAR
--   reduce production pattern -> agent

State 156:
## Known stack suffix:
## agent COMMA
## LR(1) items:
pattern -> agent COMMA . annot pattern [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 157
## Reductions:
-- On ID DOT
--   reduce production annot ->

State 157:
## Known stack suffix:
## agent COMMA annot
## LR(1) items:
pattern -> agent COMMA annot . pattern [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG CL_PAR ]
## Transitions:
-- On ID shift to state 18
-- On DOT shift to state 150
-- On pattern shift to state 158
-- On agent shift to state 155
## Reductions:

State 158:
## Known stack suffix:
## agent COMMA annot pattern
## LR(1) items:
pattern -> agent COMMA annot pattern . [ TRUE TOKEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID FALSE EOF DOT CONFIG CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> agent COMMA annot pattern

State 159:
## Known stack suffix:
## STOP
## LR(1) items:
effect -> STOP . print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On print_expr shift to state 160
-- On annot shift to state 161
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS SEMICOLON PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EOF EMAX CPUTIME COSINUS CL_PAR ABS
--   reduce production annot ->

State 160:
## Known stack suffix:
## STOP print_expr
## LR(1) items:
effect -> STOP print_expr . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> STOP print_expr

State 161:
## Known stack suffix:
## annot
## LR(1) items:
print_expr -> annot . [ SEMICOLON GREATER EOF CL_PAR ]
print_expr -> annot . nonempty_print_expr [ SEMICOLON GREATER EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On STRING shift to state 290
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 294
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On print_expr_list shift to state 304
-- On nonempty_print_expr shift to state 308
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 306
## Reductions:
-- On SEMICOLON GREATER EOF CL_PAR
--   reduce production print_expr -> annot

State 162:
## Known stack suffix:
## TMAX
## LR(1) items:
constant -> TMAX . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TMAX

State 163:
## Known stack suffix:
## TIME
## LR(1) items:
variable -> TIME . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> TIME

State 164:
## Known stack suffix:
## TAN
## LR(1) items:
small_alg_expr -> TAN . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 165
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 165:
## Known stack suffix:
## TAN annot
## LR(1) items:
small_alg_expr -> TAN annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 289
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 166:
## Known stack suffix:
## SQRT
## LR(1) items:
small_alg_expr -> SQRT . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 167
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 167:
## Known stack suffix:
## SQRT annot
## LR(1) items:
small_alg_expr -> SQRT annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 288
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 168:
## Known stack suffix:
## SINUS
## LR(1) items:
small_alg_expr -> SINUS . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 169
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 169:
## Known stack suffix:
## SINUS annot
## LR(1) items:
small_alg_expr -> SINUS annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 287
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 170:
## Known stack suffix:
## PIPE
## LR(1) items:
variable -> PIPE . annot ID annot PIPE [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
variable -> PIPE . annot pattern PIPE [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 171
## Reductions:
-- On ID DOT
--   reduce production annot ->

State 171:
## Known stack suffix:
## PIPE annot
## LR(1) items:
variable -> PIPE annot . ID annot PIPE [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
variable -> PIPE annot . pattern PIPE [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On ID shift to state 172
-- On DOT shift to state 150
-- On pattern shift to state 175
-- On agent shift to state 155
## Reductions:

State 172:
## Known stack suffix:
## PIPE annot ID
## LR(1) items:
agent -> ID . annot OP_PAR annot interface CL_PAR agent_modif [ PIPE COMMA ]
agent -> ID . annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ PIPE COMMA ]
agent -> ID . annot error [ PIPE COMMA ]
variable -> PIPE annot ID . annot PIPE [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 173
## Reductions:
-- On error PIPE OP_PAR COLON
--   reduce production annot ->

State 173:
## Known stack suffix:
## PIPE annot ID annot
## LR(1) items:
agent -> ID annot . OP_PAR annot interface CL_PAR agent_modif [ PIPE COMMA ]
agent -> ID annot . COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ PIPE COMMA ]
agent -> ID annot . error [ PIPE COMMA ]
variable -> PIPE annot ID annot . PIPE [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On error shift to state 26
-- On PIPE shift to state 174
-- On OP_PAR shift to state 27
-- On COLON shift to state 141
## Reductions:

State 174:
## Known stack suffix:
## PIPE annot ID annot PIPE
## LR(1) items:
variable -> PIPE annot ID annot PIPE . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> PIPE annot ID annot PIPE

State 175:
## Known stack suffix:
## PIPE annot pattern
## LR(1) items:
variable -> PIPE annot pattern . PIPE [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On PIPE shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## PIPE annot pattern PIPE
## LR(1) items:
variable -> PIPE annot pattern PIPE . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> PIPE annot pattern PIPE

State 177:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . annot alg_expr CL_PAR [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 178
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 178:
## Known stack suffix:
## OP_PAR annot
## LR(1) items:
small_alg_expr -> OP_PAR annot . alg_expr CL_PAR [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 283
## Reductions:

State 179:
## Known stack suffix:
## TRUE
## LR(1) items:
small_bool_expr -> TRUE . [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_bool_expr -> TRUE

State 180:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . annot alg_expr CL_PAR [ TOKEN THEN SPACE SMALLER SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NEWLINE MULT MOD MINUS LRAR LET LABEL INIT ID GREATER EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMENT COMMA CL_PAR AND ]
small_bool_expr -> OP_PAR . annot bool_expr CL_PAR [ THEN SPACE OR NEWLINE COMMENT CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 181
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 181:
## Known stack suffix:
## OP_PAR annot
## LR(1) items:
small_alg_expr -> OP_PAR annot . alg_expr CL_PAR [ TOKEN THEN SPACE SMALLER SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NEWLINE MULT MOD MINUS LRAR LET LABEL INIT ID GREATER EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMENT COMMA CL_PAR AND ]
small_bool_expr -> OP_PAR annot . bool_expr CL_PAR [ THEN SPACE OR NEWLINE COMMENT CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 281
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 283
## Reductions:

State 182:
## Known stack suffix:
## NULL_EVENT
## LR(1) items:
variable -> NULL_EVENT . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> NULL_EVENT

State 183:
## Known stack suffix:
## NOT
## LR(1) items:
small_bool_expr -> NOT . annot small_bool_expr [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 184
## Reductions:
-- On TRUE OP_PAR NOT FALSE
--   reduce production annot ->

State 184:
## Known stack suffix:
## NOT annot
## LR(1) items:
small_bool_expr -> NOT annot . small_bool_expr [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On OP_PAR shift to state 185
-- On NOT shift to state 183
-- On FALSE shift to state 225
-- On small_bool_expr shift to state 286
## Reductions:

State 185:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_bool_expr -> OP_PAR . annot bool_expr CL_PAR [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 186
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 186:
## Known stack suffix:
## OP_PAR annot
## LR(1) items:
small_bool_expr -> OP_PAR annot . bool_expr CL_PAR [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 285
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 252
## Reductions:

State 187:
## Known stack suffix:
## OP_PAR
## LR(1) items:
small_alg_expr -> OP_PAR . annot alg_expr CL_PAR [ SPACE SMALLER POW PLUS NEWLINE MULT MOD MINUS GREATER EQUAL DIV DIFF COMMENT COLON CL_CUR ]
small_bool_expr -> OP_PAR . annot bool_expr CL_PAR [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 188
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 188:
## Known stack suffix:
## OP_PAR annot
## LR(1) items:
small_alg_expr -> OP_PAR annot . alg_expr CL_PAR [ SPACE SMALLER POW PLUS NEWLINE MULT MOD MINUS GREATER EQUAL DIV DIFF COMMENT COLON CL_CUR ]
small_bool_expr -> OP_PAR annot . bool_expr CL_PAR [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 281
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 283
## Reductions:

State 189:
## Known stack suffix:
## MINUS
## LR(1) items:
small_alg_expr -> MINUS . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 190
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 190:
## Known stack suffix:
## MINUS annot
## LR(1) items:
small_alg_expr -> MINUS annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 224
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 191:
## Known stack suffix:
## MIN
## LR(1) items:
small_alg_expr -> MIN . annot small_alg_expr annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 192
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 192:
## Known stack suffix:
## MIN annot
## LR(1) items:
small_alg_expr -> MIN annot . small_alg_expr annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 221
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 193:
## Known stack suffix:
## MAX
## LR(1) items:
small_alg_expr -> MAX . annot small_alg_expr annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 194
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 194:
## Known stack suffix:
## MAX annot
## LR(1) items:
small_alg_expr -> MAX annot . small_alg_expr annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 218
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 195:
## Known stack suffix:
## LOG
## LR(1) items:
small_alg_expr -> LOG . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 196
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 196:
## Known stack suffix:
## LOG annot
## LR(1) items:
small_alg_expr -> LOG annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 217
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 197:
## Known stack suffix:
## LABEL
## LR(1) items:
variable -> LABEL . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> LABEL

State 198:
## Known stack suffix:
## INT
## LR(1) items:
nbr -> INT . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nbr -> INT

State 199:
## Known stack suffix:
## INFINITY
## LR(1) items:
nbr -> INFINITY . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nbr -> INFINITY

State 200:
## Known stack suffix:
## ID
## LR(1) items:
variable -> ID . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> ID

State 201:
## Known stack suffix:
## FLOAT
## LR(1) items:
nbr -> FLOAT . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NOT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nbr -> FLOAT

State 202:
## Known stack suffix:
## EXPONENT
## LR(1) items:
small_alg_expr -> EXPONENT . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 203
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 203:
## Known stack suffix:
## EXPONENT annot
## LR(1) items:
small_alg_expr -> EXPONENT annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 216
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 204:
## Known stack suffix:
## EVENT
## LR(1) items:
variable -> EVENT . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> EVENT

State 205:
## Known stack suffix:
## EMAX
## LR(1) items:
constant -> EMAX . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> EMAX

State 206:
## Known stack suffix:
## CPUTIME
## LR(1) items:
constant -> CPUTIME . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CPUTIME

State 207:
## Known stack suffix:
## COSINUS
## LR(1) items:
small_alg_expr -> COSINUS . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 208
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 208:
## Known stack suffix:
## COSINUS annot
## LR(1) items:
small_alg_expr -> COSINUS annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 215
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 209:
## Known stack suffix:
## ABS
## LR(1) items:
small_alg_expr -> ABS . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 210
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 210:
## Known stack suffix:
## ABS annot
## LR(1) items:
small_alg_expr -> ABS annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 212
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 211:
## Known stack suffix:
## variable
## LR(1) items:
small_alg_expr -> variable . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> variable

State 212:
## Known stack suffix:
## ABS annot small_alg_expr
## LR(1) items:
small_alg_expr -> ABS annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> ABS annot small_alg_expr

State 213:
## Known stack suffix:
## nbr
## LR(1) items:
constant -> nbr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> nbr

State 214:
## Known stack suffix:
## constant
## LR(1) items:
small_alg_expr -> constant . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> constant

State 215:
## Known stack suffix:
## COSINUS annot small_alg_expr
## LR(1) items:
small_alg_expr -> COSINUS annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> COSINUS annot small_alg_expr

State 216:
## Known stack suffix:
## EXPONENT annot small_alg_expr
## LR(1) items:
small_alg_expr -> EXPONENT annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> EXPONENT annot small_alg_expr

State 217:
## Known stack suffix:
## LOG annot small_alg_expr
## LR(1) items:
small_alg_expr -> LOG annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> LOG annot small_alg_expr

State 218:
## Known stack suffix:
## MAX annot small_alg_expr
## LR(1) items:
small_alg_expr -> MAX annot small_alg_expr . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 219
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 219:
## Known stack suffix:
## MAX annot small_alg_expr annot
## LR(1) items:
small_alg_expr -> MAX annot small_alg_expr annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 220
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 220:
## Known stack suffix:
## MAX annot small_alg_expr annot small_alg_expr
## LR(1) items:
small_alg_expr -> MAX annot small_alg_expr annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> MAX annot small_alg_expr annot small_alg_expr

State 221:
## Known stack suffix:
## MIN annot small_alg_expr
## LR(1) items:
small_alg_expr -> MIN annot small_alg_expr . annot small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 222
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 222:
## Known stack suffix:
## MIN annot small_alg_expr annot
## LR(1) items:
small_alg_expr -> MIN annot small_alg_expr annot . small_alg_expr [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 223
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 223:
## Known stack suffix:
## MIN annot small_alg_expr annot small_alg_expr
## LR(1) items:
small_alg_expr -> MIN annot small_alg_expr annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> MIN annot small_alg_expr annot small_alg_expr

State 224:
## Known stack suffix:
## MINUS annot small_alg_expr
## LR(1) items:
small_alg_expr -> MINUS annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> MINUS annot small_alg_expr

State 225:
## Known stack suffix:
## FALSE
## LR(1) items:
small_bool_expr -> FALSE . [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_bool_expr -> FALSE

State 226:
## Known stack suffix:
## small_bool_expr
## LR(1) items:
bool_expr_comp -> small_bool_expr . annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 227
## Reductions:
-- On TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND
--   reduce production annot ->

State 227:
## Known stack suffix:
## small_bool_expr annot
## LR(1) items:
bool_expr_comp -> small_bool_expr annot . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr_comp -> small_bool_expr annot

State 228:
## Known stack suffix:
## small_alg_expr
## LR(1) items:
alg_expr_up_to_mod -> small_alg_expr . annot [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_mod -> small_alg_expr . annot POW annot alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 229
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production annot ->

State 229:
## Known stack suffix:
## small_alg_expr annot
## LR(1) items:
alg_expr_up_to_mod -> small_alg_expr annot . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_mod -> small_alg_expr annot . POW annot alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On POW shift to state 230
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr_up_to_mod -> small_alg_expr annot

State 230:
## Known stack suffix:
## small_alg_expr annot POW
## LR(1) items:
alg_expr_up_to_mod -> small_alg_expr annot POW . annot alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 231
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 231:
## Known stack suffix:
## small_alg_expr annot POW annot
## LR(1) items:
alg_expr_up_to_mod -> small_alg_expr annot POW annot . alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_mod shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## small_alg_expr annot POW annot alg_expr_up_to_mod
## LR(1) items:
alg_expr_up_to_mod -> small_alg_expr annot POW annot alg_expr_up_to_mod . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alg_expr_up_to_mod -> small_alg_expr annot POW annot alg_expr_up_to_mod

State 233:
## Known stack suffix:
## bool_expr_no_or
## LR(1) items:
bool_expr -> bool_expr_no_or . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
bool_expr -> bool_expr_no_or . OR annot bool_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
-- On OR shift to state 234
## Reductions:
-- On TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR
--   reduce production bool_expr -> bool_expr_no_or

State 234:
## Known stack suffix:
## bool_expr_no_or OR
## LR(1) items:
bool_expr -> bool_expr_no_or OR . annot bool_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 235
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 235:
## Known stack suffix:
## bool_expr_no_or OR annot
## LR(1) items:
bool_expr -> bool_expr_no_or OR annot . bool_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 280
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 252
## Reductions:

State 236:
## Known stack suffix:
## bool_expr_comp
## LR(1) items:
bool_expr_no_or -> bool_expr_comp . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
bool_expr_no_or -> bool_expr_comp . AND annot bool_expr_no_or [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
-- On AND shift to state 237
## Reductions:
-- On TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR
--   reduce production bool_expr_no_or -> bool_expr_comp

State 237:
## Known stack suffix:
## bool_expr_comp AND
## LR(1) items:
bool_expr_no_or -> bool_expr_comp AND . annot bool_expr_no_or [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 238
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 238:
## Known stack suffix:
## bool_expr_comp AND annot
## LR(1) items:
bool_expr_no_or -> bool_expr_comp AND annot . bool_expr_no_or [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 239
-- On bool_expr_comp shift to state 236
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 252
## Reductions:

State 239:
## Known stack suffix:
## bool_expr_comp AND annot bool_expr_no_or
## LR(1) items:
bool_expr_no_or -> bool_expr_comp AND annot bool_expr_no_or . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr_no_or -> bool_expr_comp AND annot bool_expr_no_or

State 240:
## Known stack suffix:
## alg_expr_up_to_sum
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_sum . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum . MULT annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum . DIV annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On MULT shift to state 241
-- On DIV shift to state 248
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr_up_to_if -> alg_expr_up_to_sum

State 241:
## Known stack suffix:
## alg_expr_up_to_sum MULT
## LR(1) items:
alg_expr_up_to_sum -> alg_expr_up_to_sum MULT . annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 242
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 242:
## Known stack suffix:
## alg_expr_up_to_sum MULT annot
## LR(1) items:
alg_expr_up_to_sum -> alg_expr_up_to_sum MULT annot . alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_prod shift to state 243
-- On alg_expr_up_to_mod shift to state 247
## Reductions:

State 243:
## Known stack suffix:
## alg_expr_up_to_sum MULT annot alg_expr_up_to_prod
## LR(1) items:
alg_expr_up_to_prod -> alg_expr_up_to_prod . MOD annot alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum MULT annot alg_expr_up_to_prod . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On MOD shift to state 244
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr_up_to_sum -> alg_expr_up_to_sum MULT annot alg_expr_up_to_prod

State 244:
## Known stack suffix:
## alg_expr_up_to_prod MOD
## LR(1) items:
alg_expr_up_to_prod -> alg_expr_up_to_prod MOD . annot alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 245
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 245:
## Known stack suffix:
## alg_expr_up_to_prod MOD annot
## LR(1) items:
alg_expr_up_to_prod -> alg_expr_up_to_prod MOD annot . alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_mod shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## alg_expr_up_to_prod MOD annot alg_expr_up_to_mod
## LR(1) items:
alg_expr_up_to_prod -> alg_expr_up_to_prod MOD annot alg_expr_up_to_mod . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alg_expr_up_to_prod -> alg_expr_up_to_prod MOD annot alg_expr_up_to_mod

State 247:
## Known stack suffix:
## alg_expr_up_to_mod
## LR(1) items:
alg_expr_up_to_prod -> alg_expr_up_to_mod . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alg_expr_up_to_prod -> alg_expr_up_to_mod

State 248:
## Known stack suffix:
## alg_expr_up_to_sum DIV
## LR(1) items:
alg_expr_up_to_sum -> alg_expr_up_to_sum DIV . annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 249
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 249:
## Known stack suffix:
## alg_expr_up_to_sum DIV annot
## LR(1) items:
alg_expr_up_to_sum -> alg_expr_up_to_sum DIV annot . alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_prod shift to state 250
-- On alg_expr_up_to_mod shift to state 247
## Reductions:

State 250:
## Known stack suffix:
## alg_expr_up_to_sum DIV annot alg_expr_up_to_prod
## LR(1) items:
alg_expr_up_to_prod -> alg_expr_up_to_prod . MOD annot alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum DIV annot alg_expr_up_to_prod . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On MOD shift to state 244
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr_up_to_sum -> alg_expr_up_to_sum DIV annot alg_expr_up_to_prod

State 251:
## Known stack suffix:
## alg_expr_up_to_prod
## LR(1) items:
alg_expr_up_to_prod -> alg_expr_up_to_prod . MOD annot alg_expr_up_to_mod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MOD MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_prod . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On MOD shift to state 244
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr_up_to_sum -> alg_expr_up_to_prod

State 252:
## Known stack suffix:
## alg_expr_up_to_if
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if . PLUS annot alg_expr_up_to_sum [ SMALLER PLUS MINUS GREATER EQUAL DIFF ]
alg_expr_up_to_if -> alg_expr_up_to_if . MINUS annot alg_expr_up_to_sum [ SMALLER PLUS MINUS GREATER EQUAL DIFF ]
bool_expr_comp -> alg_expr_up_to_if . GREATER annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
bool_expr_comp -> alg_expr_up_to_if . SMALLER annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
bool_expr_comp -> alg_expr_up_to_if . EQUAL annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
bool_expr_comp -> alg_expr_up_to_if . DIFF annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On SMALLER shift to state 253
-- On PLUS shift to state 259
-- On MINUS shift to state 262
-- On GREATER shift to state 265
-- On EQUAL shift to state 268
-- On DIFF shift to state 271
## Reductions:

State 253:
## Known stack suffix:
## alg_expr_up_to_if SMALLER
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if SMALLER . annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 254
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 254:
## Known stack suffix:
## alg_expr_up_to_if SMALLER annot
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if SMALLER annot . alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 279
## Reductions:

State 255:
## Known stack suffix:
## bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN annot alg_expr ELSE annot small_alg_expr annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On THEN shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## bool_expr THEN
## LR(1) items:
alg_expr -> bool_expr THEN . annot alg_expr ELSE annot small_alg_expr annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 257
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 257:
## Known stack suffix:
## bool_expr THEN annot
## LR(1) items:
alg_expr -> bool_expr THEN annot . alg_expr ELSE annot small_alg_expr annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 274
## Reductions:

State 258:
## Known stack suffix:
## alg_expr_up_to_if
## LR(1) items:
alg_expr -> alg_expr_up_to_if . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_if -> alg_expr_up_to_if . PLUS annot alg_expr_up_to_sum [ TOKEN THEN SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_if -> alg_expr_up_to_if . MINUS annot alg_expr_up_to_sum [ TOKEN THEN SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
bool_expr_comp -> alg_expr_up_to_if . GREATER annot alg_expr [ THEN OR CL_PAR AND ]
bool_expr_comp -> alg_expr_up_to_if . SMALLER annot alg_expr [ THEN OR CL_PAR AND ]
bool_expr_comp -> alg_expr_up_to_if . EQUAL annot alg_expr [ THEN OR CL_PAR AND ]
bool_expr_comp -> alg_expr_up_to_if . DIFF annot alg_expr [ THEN OR CL_PAR AND ]
## Transitions:
-- On SMALLER shift to state 253
-- On PLUS shift to state 259
-- On MINUS shift to state 262
-- On GREATER shift to state 265
-- On EQUAL shift to state 268
-- On DIFF shift to state 271
## Reductions:
-- On TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr -> alg_expr_up_to_if

State 259:
## Known stack suffix:
## alg_expr_up_to_if PLUS
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if PLUS . annot alg_expr_up_to_sum [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 260
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 260:
## Known stack suffix:
## alg_expr_up_to_if PLUS annot
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if PLUS annot . alg_expr_up_to_sum [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_sum shift to state 261
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
## Reductions:

State 261:
## Known stack suffix:
## alg_expr_up_to_if PLUS annot alg_expr_up_to_sum
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if PLUS annot alg_expr_up_to_sum . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum . MULT annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum . DIV annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On MULT shift to state 241
-- On DIV shift to state 248
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr_up_to_if -> alg_expr_up_to_if PLUS annot alg_expr_up_to_sum

State 262:
## Known stack suffix:
## alg_expr_up_to_if MINUS
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if MINUS . annot alg_expr_up_to_sum [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 263
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 263:
## Known stack suffix:
## alg_expr_up_to_if MINUS annot
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if MINUS annot . alg_expr_up_to_sum [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_sum shift to state 264
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
## Reductions:

State 264:
## Known stack suffix:
## alg_expr_up_to_if MINUS annot alg_expr_up_to_sum
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if MINUS annot alg_expr_up_to_sum . [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum . MULT annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
alg_expr_up_to_sum -> alg_expr_up_to_sum . DIV annot alg_expr_up_to_prod [ TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MULT MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIV DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On MULT shift to state 241
-- On DIV shift to state 248
## Reductions:
-- On TRUE TOKEN THEN STRING SMALLER SIGNATURE SEMICOLON RAR PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS MINUS LRAR LET LABEL INIT ID GREATER FALSE EQUAL EOF ELSE DOT DO DIFF CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production alg_expr_up_to_if -> alg_expr_up_to_if MINUS annot alg_expr_up_to_sum

State 265:
## Known stack suffix:
## alg_expr_up_to_if GREATER
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if GREATER . annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 266
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 266:
## Known stack suffix:
## alg_expr_up_to_if GREATER annot
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if GREATER annot . alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## alg_expr_up_to_if GREATER annot alg_expr
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if GREATER annot alg_expr . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr_comp -> alg_expr_up_to_if GREATER annot alg_expr

State 268:
## Known stack suffix:
## alg_expr_up_to_if EQUAL
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if EQUAL . annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 269
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 269:
## Known stack suffix:
## alg_expr_up_to_if EQUAL annot
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if EQUAL annot . alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## alg_expr_up_to_if EQUAL annot alg_expr
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if EQUAL annot alg_expr . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr_comp -> alg_expr_up_to_if EQUAL annot alg_expr

State 271:
## Known stack suffix:
## alg_expr_up_to_if DIFF
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if DIFF . annot alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 272
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 272:
## Known stack suffix:
## alg_expr_up_to_if DIFF annot
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if DIFF annot . alg_expr [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## alg_expr_up_to_if DIFF annot alg_expr
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if DIFF annot alg_expr . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr_comp -> alg_expr_up_to_if DIFF annot alg_expr

State 274:
## Known stack suffix:
## bool_expr THEN annot alg_expr
## LR(1) items:
alg_expr -> bool_expr THEN annot alg_expr . ELSE annot small_alg_expr annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On ELSE shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## bool_expr THEN annot alg_expr ELSE
## LR(1) items:
alg_expr -> bool_expr THEN annot alg_expr ELSE . annot small_alg_expr annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 276
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 276:
## Known stack suffix:
## bool_expr THEN annot alg_expr ELSE annot
## LR(1) items:
alg_expr -> bool_expr THEN annot alg_expr ELSE annot . small_alg_expr annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 277
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 277:
## Known stack suffix:
## bool_expr THEN annot alg_expr ELSE annot small_alg_expr
## LR(1) items:
alg_expr -> bool_expr THEN annot alg_expr ELSE annot small_alg_expr . annot [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 278
## Reductions:
-- On TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND
--   reduce production annot ->

State 278:
## Known stack suffix:
## bool_expr THEN annot alg_expr ELSE annot small_alg_expr annot
## LR(1) items:
alg_expr -> bool_expr THEN annot alg_expr ELSE annot small_alg_expr annot . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OP_PAR OP_CUR OBS LRAR LET LABEL INIT ID EOF ELSE DOT DO CONFIG COMMA COLON CL_PAR CL_CUR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alg_expr -> bool_expr THEN annot alg_expr ELSE annot small_alg_expr annot

State 279:
## Known stack suffix:
## alg_expr_up_to_if SMALLER annot alg_expr
## LR(1) items:
bool_expr_comp -> alg_expr_up_to_if SMALLER annot alg_expr . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr_comp -> alg_expr_up_to_if SMALLER annot alg_expr

State 280:
## Known stack suffix:
## bool_expr_no_or OR annot bool_expr
## LR(1) items:
bool_expr -> bool_expr_no_or OR annot bool_expr . [ TOKEN THEN SIGNATURE SEMICOLON RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT DO CONFIG CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr -> bool_expr_no_or OR annot bool_expr

State 281:
## Known stack suffix:
## OP_PAR annot bool_expr
## LR(1) items:
alg_expr -> bool_expr . THEN annot alg_expr ELSE annot small_alg_expr annot [ CL_PAR ]
small_bool_expr -> OP_PAR annot bool_expr . CL_PAR [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On THEN shift to state 256
-- On CL_PAR shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## OP_PAR annot bool_expr CL_PAR
## LR(1) items:
small_bool_expr -> OP_PAR annot bool_expr CL_PAR . [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_bool_expr -> OP_PAR annot bool_expr CL_PAR

State 283:
## Known stack suffix:
## OP_PAR annot alg_expr
## LR(1) items:
small_alg_expr -> OP_PAR annot alg_expr . CL_PAR [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
-- On CL_PAR shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## OP_PAR annot alg_expr CL_PAR
## LR(1) items:
small_alg_expr -> OP_PAR annot alg_expr CL_PAR . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> OP_PAR annot alg_expr CL_PAR

State 285:
## Known stack suffix:
## OP_PAR annot bool_expr
## LR(1) items:
small_bool_expr -> OP_PAR annot bool_expr . CL_PAR [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
-- On CL_PAR shift to state 282
## Reductions:

State 286:
## Known stack suffix:
## NOT annot small_bool_expr
## LR(1) items:
small_bool_expr -> NOT annot small_bool_expr . [ TOKEN THEN SPACE SIGNATURE SEMICOLON RAR PLOT PIPE PERT OR OBS NEWLINE LRAR LET LABEL INIT ID EOF DOT DO CONFIG COMMENT CL_PAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_bool_expr -> NOT annot small_bool_expr

State 287:
## Known stack suffix:
## SINUS annot small_alg_expr
## LR(1) items:
small_alg_expr -> SINUS annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> SINUS annot small_alg_expr

State 288:
## Known stack suffix:
## SQRT annot small_alg_expr
## LR(1) items:
small_alg_expr -> SQRT annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> SQRT annot small_alg_expr

State 289:
## Known stack suffix:
## TAN annot small_alg_expr
## LR(1) items:
small_alg_expr -> TAN annot small_alg_expr . [ TRUE TOKEN TMAX TIME THEN TAN STRING SQRT SPACE SMALLER SINUS SIGNATURE SEMICOLON RAR POW PLUS PLOT PIPE PERT OR OP_PAR OP_CUR OBS NULL_EVENT NEWLINE MULT MOD MINUS MIN MAX LRAR LOG LET LABEL INT INIT INFINITY ID GREATER FLOAT FALSE EXPONENT EVENT EQUAL EOF EMAX ELSE DOT DO DIV DIFF CPUTIME COSINUS CONFIG COMMENT COMMA COLON CL_PAR CL_CUR AND ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_alg_expr -> TAN annot small_alg_expr

State 290:
## Known stack suffix:
## STRING
## LR(1) items:
nonempty_print_expr -> STRING . annot [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
print_expr_list -> STRING . annot DOT annot nonempty_print_expr [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 291
## Reductions:
-- On TRUE STRING SEMICOLON GREATER FALSE EOF DOT CL_PAR
--   reduce production annot ->

State 291:
## Known stack suffix:
## STRING annot
## LR(1) items:
nonempty_print_expr -> STRING annot . [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
print_expr_list -> STRING annot . DOT annot nonempty_print_expr [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On DOT shift to state 292
## Reductions:
-- On TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR
--   reduce production nonempty_print_expr -> STRING annot

State 292:
## Known stack suffix:
## STRING annot DOT
## LR(1) items:
print_expr_list -> STRING annot DOT . annot nonempty_print_expr [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 293
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 293:
## Known stack suffix:
## STRING annot DOT annot
## LR(1) items:
print_expr_list -> STRING annot DOT annot . nonempty_print_expr [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On STRING shift to state 290
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 294
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On print_expr_list shift to state 304
-- On nonempty_print_expr shift to state 307
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 306
## Reductions:

State 294:
## Known stack suffix:
## OP_PAR
## LR(1) items:
nonempty_print_expr -> OP_PAR . annot print_expr_list CL_PAR annot [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
small_alg_expr -> OP_PAR . annot alg_expr CL_PAR [ TRUE STRING SPACE SEMICOLON POW PLUS NEWLINE MULT MOD MINUS GREATER FALSE EOF DOT DIV COMMENT CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 295
## Reductions:
-- On TRUE TMAX TIME TAN STRING SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 295:
## Known stack suffix:
## OP_PAR annot
## LR(1) items:
nonempty_print_expr -> OP_PAR annot . print_expr_list CL_PAR annot [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
small_alg_expr -> OP_PAR annot . alg_expr CL_PAR [ TRUE STRING SPACE SEMICOLON POW PLUS NEWLINE MULT MOD MINUS GREATER FALSE EOF DOT DIV COMMENT CL_PAR ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On STRING shift to state 296
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On print_expr_list shift to state 298
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 301
-- On alg_expr shift to state 283
## Reductions:

State 296:
## Known stack suffix:
## STRING
## LR(1) items:
print_expr_list -> STRING . annot DOT annot nonempty_print_expr [ CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 297
## Reductions:
-- On DOT
--   reduce production annot ->

State 297:
## Known stack suffix:
## STRING annot
## LR(1) items:
print_expr_list -> STRING annot . DOT annot nonempty_print_expr [ CL_PAR ]
## Transitions:
-- On DOT shift to state 292
## Reductions:

State 298:
## Known stack suffix:
## OP_PAR annot print_expr_list
## LR(1) items:
nonempty_print_expr -> OP_PAR annot print_expr_list . CL_PAR annot [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On CL_PAR shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## OP_PAR annot print_expr_list CL_PAR
## LR(1) items:
nonempty_print_expr -> OP_PAR annot print_expr_list CL_PAR . annot [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 300
## Reductions:
-- On TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR
--   reduce production annot ->

State 300:
## Known stack suffix:
## OP_PAR annot print_expr_list CL_PAR annot
## LR(1) items:
nonempty_print_expr -> OP_PAR annot print_expr_list CL_PAR annot . [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_print_expr -> OP_PAR annot print_expr_list CL_PAR annot

State 301:
## Known stack suffix:
## alg_expr_up_to_if
## LR(1) items:
alg_expr -> alg_expr_up_to_if . [ CL_PAR ]
alg_expr_up_to_if -> alg_expr_up_to_if . PLUS annot alg_expr_up_to_sum [ SMALLER PLUS MINUS GREATER EQUAL DOT DIFF CL_PAR ]
alg_expr_up_to_if -> alg_expr_up_to_if . MINUS annot alg_expr_up_to_sum [ SMALLER PLUS MINUS GREATER EQUAL DOT DIFF CL_PAR ]
bool_expr_comp -> alg_expr_up_to_if . GREATER annot alg_expr [ THEN OR AND ]
bool_expr_comp -> alg_expr_up_to_if . SMALLER annot alg_expr [ THEN OR AND ]
bool_expr_comp -> alg_expr_up_to_if . EQUAL annot alg_expr [ THEN OR AND ]
bool_expr_comp -> alg_expr_up_to_if . DIFF annot alg_expr [ THEN OR AND ]
print_expr_list -> alg_expr_up_to_if . DOT annot nonempty_print_expr [ CL_PAR ]
## Transitions:
-- On SMALLER shift to state 253
-- On PLUS shift to state 259
-- On MINUS shift to state 262
-- On GREATER shift to state 265
-- On EQUAL shift to state 268
-- On DOT shift to state 302
-- On DIFF shift to state 271
## Reductions:
-- On CL_PAR
--   reduce production alg_expr -> alg_expr_up_to_if

State 302:
## Known stack suffix:
## alg_expr_up_to_if DOT
## LR(1) items:
print_expr_list -> alg_expr_up_to_if DOT . annot nonempty_print_expr [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 303
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 303:
## Known stack suffix:
## alg_expr_up_to_if DOT annot
## LR(1) items:
print_expr_list -> alg_expr_up_to_if DOT annot . nonempty_print_expr [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On STRING shift to state 290
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 294
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On print_expr_list shift to state 304
-- On nonempty_print_expr shift to state 305
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 306
## Reductions:

State 304:
## Known stack suffix:
## print_expr_list
## LR(1) items:
nonempty_print_expr -> print_expr_list . [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_print_expr -> print_expr_list

State 305:
## Known stack suffix:
## alg_expr_up_to_if DOT annot nonempty_print_expr
## LR(1) items:
print_expr_list -> alg_expr_up_to_if DOT annot nonempty_print_expr . [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production print_expr_list -> alg_expr_up_to_if DOT annot nonempty_print_expr

State 306:
## Known stack suffix:
## alg_expr_up_to_if
## LR(1) items:
alg_expr_up_to_if -> alg_expr_up_to_if . PLUS annot alg_expr_up_to_sum [ TRUE STRING SEMICOLON PLUS MINUS GREATER FALSE EOF DOT CL_PAR ]
alg_expr_up_to_if -> alg_expr_up_to_if . MINUS annot alg_expr_up_to_sum [ TRUE STRING SEMICOLON PLUS MINUS GREATER FALSE EOF DOT CL_PAR ]
nonempty_print_expr -> alg_expr_up_to_if . [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
print_expr_list -> alg_expr_up_to_if . DOT annot nonempty_print_expr [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
-- On PLUS shift to state 259
-- On MINUS shift to state 262
-- On DOT shift to state 302
## Reductions:
-- On TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR
--   reduce production nonempty_print_expr -> alg_expr_up_to_if

State 307:
## Known stack suffix:
## STRING annot DOT annot nonempty_print_expr
## LR(1) items:
print_expr_list -> STRING annot DOT annot nonempty_print_expr . [ TRUE STRING SEMICOLON GREATER FALSE EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production print_expr_list -> STRING annot DOT annot nonempty_print_expr

State 308:
## Known stack suffix:
## annot nonempty_print_expr
## LR(1) items:
print_expr -> annot nonempty_print_expr . [ SEMICOLON GREATER EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production print_expr -> annot nonempty_print_expr

State 309:
## Known stack suffix:
## SPECIES_OF
## LR(1) items:
effect -> SPECIES_OF . annot pattern boolean annot GREATER print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 310
## Reductions:
-- On ID DOT
--   reduce production annot ->

State 310:
## Known stack suffix:
## SPECIES_OF annot
## LR(1) items:
effect -> SPECIES_OF annot . pattern boolean annot GREATER print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On ID shift to state 18
-- On DOT shift to state 150
-- On pattern shift to state 311
-- On agent shift to state 155
## Reductions:

State 311:
## Known stack suffix:
## SPECIES_OF annot pattern
## LR(1) items:
effect -> SPECIES_OF annot pattern . boolean annot GREATER print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 14
-- On FALSE shift to state 15
-- On boolean shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## SPECIES_OF annot pattern boolean
## LR(1) items:
effect -> SPECIES_OF annot pattern boolean . annot GREATER print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 313
## Reductions:
-- On GREATER
--   reduce production annot ->

State 313:
## Known stack suffix:
## SPECIES_OF annot pattern boolean annot
## LR(1) items:
effect -> SPECIES_OF annot pattern boolean annot . GREATER print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On GREATER shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## SPECIES_OF annot pattern boolean annot GREATER
## LR(1) items:
effect -> SPECIES_OF annot pattern boolean annot GREATER . print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On print_expr shift to state 315
-- On annot shift to state 161
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS SEMICOLON PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EOF EMAX CPUTIME COSINUS CL_PAR ABS
--   reduce production annot ->

State 315:
## Known stack suffix:
## SPECIES_OF annot pattern boolean annot GREATER print_expr
## LR(1) items:
effect -> SPECIES_OF annot pattern boolean annot GREATER print_expr . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> SPECIES_OF annot pattern boolean annot GREATER print_expr

State 316:
## Known stack suffix:
## SNAPSHOT
## LR(1) items:
effect -> SNAPSHOT . print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On print_expr shift to state 317
-- On annot shift to state 161
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS SEMICOLON PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EOF EMAX CPUTIME COSINUS CL_PAR ABS
--   reduce production annot ->

State 317:
## Known stack suffix:
## SNAPSHOT print_expr
## LR(1) items:
effect -> SNAPSHOT print_expr . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> SNAPSHOT print_expr

State 318:
## Known stack suffix:
## annot RUN
## LR(1) items:
interactive_command -> annot RUN . annot SEMICOLON [ # ]
interactive_command -> annot RUN . annot bool_expr SEMICOLON [ # ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 319
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS SEMICOLON PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 319:
## Known stack suffix:
## annot RUN annot
## LR(1) items:
interactive_command -> annot RUN annot . SEMICOLON [ # ]
interactive_command -> annot RUN annot . bool_expr SEMICOLON [ # ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On SEMICOLON shift to state 320
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 321
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 252
## Reductions:

State 320:
## Known stack suffix:
## annot RUN annot SEMICOLON
## LR(1) items:
interactive_command -> annot RUN annot SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive_command -> annot RUN annot SEMICOLON

State 321:
## Known stack suffix:
## annot RUN annot bool_expr
## LR(1) items:
interactive_command -> annot RUN annot bool_expr . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## annot RUN annot bool_expr SEMICOLON
## LR(1) items:
interactive_command -> annot RUN annot bool_expr SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive_command -> annot RUN annot bool_expr SEMICOLON

State 323:
## Known stack suffix:
## PRINTF
## LR(1) items:
effect -> PRINTF . print_expr GREATER print_expr [ SEMICOLON EOF CL_PAR ]
effect -> PRINTF . print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On print_expr shift to state 324
-- On annot shift to state 161
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS SEMICOLON PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID GREATER FLOAT EXPONENT EVENT EOF EMAX CPUTIME COSINUS CL_PAR ABS
--   reduce production annot ->

State 324:
## Known stack suffix:
## PRINTF print_expr
## LR(1) items:
effect -> PRINTF print_expr . GREATER print_expr [ SEMICOLON EOF CL_PAR ]
effect -> PRINTF print_expr . [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On GREATER shift to state 325
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production effect -> PRINTF print_expr

State 325:
## Known stack suffix:
## PRINTF print_expr GREATER
## LR(1) items:
effect -> PRINTF print_expr GREATER . print_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On print_expr shift to state 326
-- On annot shift to state 161
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS SEMICOLON PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EOF EMAX CPUTIME COSINUS CL_PAR ABS
--   reduce production annot ->

State 326:
## Known stack suffix:
## PRINTF print_expr GREATER print_expr
## LR(1) items:
effect -> PRINTF print_expr GREATER print_expr . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> PRINTF print_expr GREATER print_expr

State 327:
## Known stack suffix:
## PLOTENTRY
## LR(1) items:
effect -> PLOTENTRY . annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 328
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production annot ->

State 328:
## Known stack suffix:
## PLOTENTRY annot
## LR(1) items:
effect -> PLOTENTRY annot . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> PLOTENTRY annot

State 329:
## Known stack suffix:
## INTRO
## LR(1) items:
effect -> INTRO . annot alg_expr pattern [ SEMICOLON EOF CL_PAR ]
effect -> INTRO . annot error [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 330
## Reductions:
-- On error TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 330:
## Known stack suffix:
## INTRO annot
## LR(1) items:
effect -> INTRO annot . alg_expr pattern [ SEMICOLON EOF CL_PAR ]
effect -> INTRO annot . error [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On error shift to state 331
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 332
## Reductions:

State 331:
## Known stack suffix:
## INTRO annot error
## LR(1) items:
effect -> INTRO annot error . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> INTRO annot error

State 332:
## Known stack suffix:
## INTRO annot alg_expr
## LR(1) items:
effect -> INTRO annot alg_expr . pattern [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On ID shift to state 18
-- On DOT shift to state 150
-- On pattern shift to state 333
-- On agent shift to state 155
## Reductions:

State 333:
## Known stack suffix:
## INTRO annot alg_expr pattern
## LR(1) items:
effect -> INTRO annot alg_expr pattern . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> INTRO annot alg_expr pattern

State 334:
## Known stack suffix:
## FLUX
## LR(1) items:
effect -> FLUX . annot nonempty_print_expr boolean annot [ SEMICOLON EOF CL_PAR ]
effect -> FLUX . annot nonempty_print_expr STRING annot boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 335
## Reductions:
-- On TMAX TIME TAN STRING SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 335:
## Known stack suffix:
## FLUX annot
## LR(1) items:
effect -> FLUX annot . nonempty_print_expr boolean annot [ SEMICOLON EOF CL_PAR ]
effect -> FLUX annot . nonempty_print_expr STRING annot boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On STRING shift to state 290
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 294
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_alg_expr shift to state 228
-- On print_expr_list shift to state 304
-- On nonempty_print_expr shift to state 336
-- On nbr shift to state 213
-- On constant shift to state 214
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 306
## Reductions:

State 336:
## Known stack suffix:
## FLUX annot nonempty_print_expr
## LR(1) items:
effect -> FLUX annot nonempty_print_expr . boolean annot [ SEMICOLON EOF CL_PAR ]
effect -> FLUX annot nonempty_print_expr . STRING annot boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 14
-- On STRING shift to state 337
-- On FALSE shift to state 15
-- On boolean shift to state 341
## Reductions:

State 337:
## Known stack suffix:
## FLUX annot nonempty_print_expr STRING
## LR(1) items:
effect -> FLUX annot nonempty_print_expr STRING . annot boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 338
## Reductions:
-- On TRUE FALSE
--   reduce production annot ->

State 338:
## Known stack suffix:
## FLUX annot nonempty_print_expr STRING annot
## LR(1) items:
effect -> FLUX annot nonempty_print_expr STRING annot . boolean annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 14
-- On FALSE shift to state 15
-- On boolean shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## FLUX annot nonempty_print_expr STRING annot boolean
## LR(1) items:
effect -> FLUX annot nonempty_print_expr STRING annot boolean . annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 340
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production annot ->

State 340:
## Known stack suffix:
## FLUX annot nonempty_print_expr STRING annot boolean annot
## LR(1) items:
effect -> FLUX annot nonempty_print_expr STRING annot boolean annot . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> FLUX annot nonempty_print_expr STRING annot boolean annot

State 341:
## Known stack suffix:
## FLUX annot nonempty_print_expr boolean
## LR(1) items:
effect -> FLUX annot nonempty_print_expr boolean . annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 342
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production annot ->

State 342:
## Known stack suffix:
## FLUX annot nonempty_print_expr boolean annot
## LR(1) items:
effect -> FLUX annot nonempty_print_expr boolean annot . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> FLUX annot nonempty_print_expr boolean annot

State 343:
## Known stack suffix:
## annot EOF
## LR(1) items:
interactive_command -> annot EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive_command -> annot EOF

State 344:
## Known stack suffix:
## DELETE
## LR(1) items:
effect -> DELETE . annot alg_expr pattern [ SEMICOLON EOF CL_PAR ]
effect -> DELETE . annot error [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 345
## Reductions:
-- On error TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 345:
## Known stack suffix:
## DELETE annot
## LR(1) items:
effect -> DELETE annot . alg_expr pattern [ SEMICOLON EOF CL_PAR ]
effect -> DELETE annot . error [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On error shift to state 346
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 347
## Reductions:

State 346:
## Known stack suffix:
## DELETE annot error
## LR(1) items:
effect -> DELETE annot error . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> DELETE annot error

State 347:
## Known stack suffix:
## DELETE annot alg_expr
## LR(1) items:
effect -> DELETE annot alg_expr . pattern [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On ID shift to state 18
-- On DOT shift to state 150
-- On pattern shift to state 348
-- On agent shift to state 155
## Reductions:

State 348:
## Known stack suffix:
## DELETE annot alg_expr pattern
## LR(1) items:
effect -> DELETE annot alg_expr pattern . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> DELETE annot alg_expr pattern

State 349:
## Known stack suffix:
## ASSIGN
## LR(1) items:
effect -> ASSIGN . annot ID annot alg_expr [ SEMICOLON EOF CL_PAR ]
effect -> ASSIGN . annot LABEL annot alg_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 350
## Reductions:
-- On LABEL ID
--   reduce production annot ->

State 350:
## Known stack suffix:
## ASSIGN annot
## LR(1) items:
effect -> ASSIGN annot . ID annot alg_expr [ SEMICOLON EOF CL_PAR ]
effect -> ASSIGN annot . LABEL annot alg_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On LABEL shift to state 351
-- On ID shift to state 354
## Reductions:

State 351:
## Known stack suffix:
## ASSIGN annot LABEL
## LR(1) items:
effect -> ASSIGN annot LABEL . annot alg_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 352
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 352:
## Known stack suffix:
## ASSIGN annot LABEL annot
## LR(1) items:
effect -> ASSIGN annot LABEL annot . alg_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## ASSIGN annot LABEL annot alg_expr
## LR(1) items:
effect -> ASSIGN annot LABEL annot alg_expr . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> ASSIGN annot LABEL annot alg_expr

State 354:
## Known stack suffix:
## ASSIGN annot ID
## LR(1) items:
effect -> ASSIGN annot ID . annot alg_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 355
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 355:
## Known stack suffix:
## ASSIGN annot ID annot
## LR(1) items:
effect -> ASSIGN annot ID annot . alg_expr [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 356
## Reductions:

State 356:
## Known stack suffix:
## ASSIGN annot ID annot alg_expr
## LR(1) items:
effect -> ASSIGN annot ID annot alg_expr . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> ASSIGN annot ID annot alg_expr

State 357:
## Known stack suffix:
## APPLY
## LR(1) items:
effect -> APPLY . annot alg_expr rule_content [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 358
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 358:
## Known stack suffix:
## APPLY annot
## LR(1) items:
effect -> APPLY annot . alg_expr rule_content [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 359
## Reductions:

State 359:
## Known stack suffix:
## APPLY annot alg_expr
## LR(1) items:
effect -> APPLY annot alg_expr . rule_content [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On RAR shift to state 360
-- On PIPE shift to state 361
-- On LRAR shift to state 372
-- On ID shift to state 18
-- On DOT shift to state 150
-- On rule_side shift to state 373
-- On rule_content shift to state 382
-- On pattern shift to state 377
-- On arrow shift to state 383
-- On agent shift to state 155
## Reductions:

State 360:
## Known stack suffix:
## RAR
## LR(1) items:
arrow -> RAR . [ SPACE SEMICOLON PIPE NEWLINE ID EOF DOT COMMENT CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow -> RAR

State 361:
## Known stack suffix:
## PIPE
## LR(1) items:
rule_side -> PIPE . annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
rule_side -> PIPE . annot error [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 362
## Reductions:
-- On error TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 362:
## Known stack suffix:
## PIPE annot
## LR(1) items:
rule_side -> PIPE annot . sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
rule_side -> PIPE annot . error [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On error shift to state 363
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On sum_token shift to state 364
-- On small_alg_expr shift to state 365
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 363:
## Known stack suffix:
## PIPE annot error
## LR(1) items:
rule_side -> PIPE annot error . [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> PIPE annot error

State 364:
## Known stack suffix:
## PIPE annot sum_token
## LR(1) items:
rule_side -> PIPE annot sum_token . [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> PIPE annot sum_token

State 365:
## Known stack suffix:
## small_alg_expr
## LR(1) items:
sum_token -> small_alg_expr . annot ID annot [ SEMICOLON RAR LRAR EOF CL_PAR ]
sum_token -> small_alg_expr . annot ID annot COMMA annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 366
## Reductions:
-- On ID
--   reduce production annot ->

State 366:
## Known stack suffix:
## small_alg_expr annot
## LR(1) items:
sum_token -> small_alg_expr annot . ID annot [ SEMICOLON RAR LRAR EOF CL_PAR ]
sum_token -> small_alg_expr annot . ID annot COMMA annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On ID shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## small_alg_expr annot ID
## LR(1) items:
sum_token -> small_alg_expr annot ID . annot [ SEMICOLON RAR LRAR EOF CL_PAR ]
sum_token -> small_alg_expr annot ID . annot COMMA annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 368
## Reductions:
-- On SEMICOLON RAR LRAR EOF COMMA CL_PAR
--   reduce production annot ->

State 368:
## Known stack suffix:
## small_alg_expr annot ID annot
## LR(1) items:
sum_token -> small_alg_expr annot ID annot . [ SEMICOLON RAR LRAR EOF CL_PAR ]
sum_token -> small_alg_expr annot ID annot . COMMA annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On COMMA shift to state 369
## Reductions:
-- On SEMICOLON RAR LRAR EOF CL_PAR
--   reduce production sum_token -> small_alg_expr annot ID annot

State 369:
## Known stack suffix:
## small_alg_expr annot ID annot COMMA
## LR(1) items:
sum_token -> small_alg_expr annot ID annot COMMA . annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 370
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 370:
## Known stack suffix:
## small_alg_expr annot ID annot COMMA annot
## LR(1) items:
sum_token -> small_alg_expr annot ID annot COMMA annot . sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On sum_token shift to state 371
-- On small_alg_expr shift to state 365
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 371:
## Known stack suffix:
## small_alg_expr annot ID annot COMMA annot sum_token
## LR(1) items:
sum_token -> small_alg_expr annot ID annot COMMA annot sum_token . [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_token -> small_alg_expr annot ID annot COMMA annot sum_token

State 372:
## Known stack suffix:
## LRAR
## LR(1) items:
arrow -> LRAR . [ SPACE SEMICOLON PIPE NEWLINE ID EOF DOT COMMENT CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow -> LRAR

State 373:
## Known stack suffix:
## rule_side
## LR(1) items:
rule_content -> rule_side . arrow annot rule_side [ SEMICOLON EOF CL_PAR ]
rule_content -> rule_side . arrow annot [ SEMICOLON EOF CL_PAR ]
rule_content -> rule_side . [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On RAR shift to state 360
-- On LRAR shift to state 372
-- On arrow shift to state 374
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production rule_content -> rule_side

State 374:
## Known stack suffix:
## rule_side arrow
## LR(1) items:
rule_content -> rule_side arrow . annot rule_side [ SEMICOLON EOF CL_PAR ]
rule_content -> rule_side arrow . annot [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 375
## Reductions:
-- On SEMICOLON PIPE ID EOF DOT CL_PAR
--   reduce production annot ->

State 375:
## Known stack suffix:
## rule_side arrow annot
## LR(1) items:
rule_content -> rule_side arrow annot . rule_side [ SEMICOLON EOF CL_PAR ]
rule_content -> rule_side arrow annot . [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On PIPE shift to state 361
-- On ID shift to state 18
-- On DOT shift to state 150
-- On rule_side shift to state 376
-- On pattern shift to state 377
-- On agent shift to state 155
## Reductions:
-- On SEMICOLON EOF CL_PAR
--   reduce production rule_content -> rule_side arrow annot

State 376:
## Known stack suffix:
## rule_side arrow annot rule_side
## LR(1) items:
rule_content -> rule_side arrow annot rule_side . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_content -> rule_side arrow annot rule_side

State 377:
## Known stack suffix:
## pattern
## LR(1) items:
rule_side -> pattern . [ SEMICOLON RAR LRAR EOF CL_PAR ]
rule_side -> pattern . PIPE annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
rule_side -> pattern . PIPE annot error [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On PIPE shift to state 378
## Reductions:
-- On SEMICOLON RAR LRAR EOF CL_PAR
--   reduce production rule_side -> pattern

State 378:
## Known stack suffix:
## pattern PIPE
## LR(1) items:
rule_side -> pattern PIPE . annot sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
rule_side -> pattern PIPE . annot error [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 379
## Reductions:
-- On error TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 379:
## Known stack suffix:
## pattern PIPE annot
## LR(1) items:
rule_side -> pattern PIPE annot . sum_token [ SEMICOLON RAR LRAR EOF CL_PAR ]
rule_side -> pattern PIPE annot . error [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
-- On error shift to state 380
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On sum_token shift to state 381
-- On small_alg_expr shift to state 365
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 380:
## Known stack suffix:
## pattern PIPE annot error
## LR(1) items:
rule_side -> pattern PIPE annot error . [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> pattern PIPE annot error

State 381:
## Known stack suffix:
## pattern PIPE annot sum_token
## LR(1) items:
rule_side -> pattern PIPE annot sum_token . [ SEMICOLON RAR LRAR EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> pattern PIPE annot sum_token

State 382:
## Known stack suffix:
## APPLY annot alg_expr rule_content
## LR(1) items:
effect -> APPLY annot alg_expr rule_content . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect -> APPLY annot alg_expr rule_content

State 383:
## Known stack suffix:
## arrow
## LR(1) items:
rule_content -> arrow . annot rule_side [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 384
## Reductions:
-- On PIPE ID DOT
--   reduce production annot ->

State 384:
## Known stack suffix:
## arrow annot
## LR(1) items:
rule_content -> arrow annot . rule_side [ SEMICOLON EOF CL_PAR ]
## Transitions:
-- On PIPE shift to state 361
-- On ID shift to state 18
-- On DOT shift to state 150
-- On rule_side shift to state 385
-- On pattern shift to state 377
-- On agent shift to state 155
## Reductions:

State 385:
## Known stack suffix:
## arrow annot rule_side
## LR(1) items:
rule_content -> arrow annot rule_side . [ SEMICOLON EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_content -> arrow annot rule_side

State 386:
## Known stack suffix:
## annot effect
## LR(1) items:
interactive_command -> annot effect . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## annot effect SEMICOLON
## LR(1) items:
interactive_command -> annot effect SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive_command -> annot effect SEMICOLON

State 388:
## Known stack suffix:
##
## LR(1) items:
model' -> . model [ # ]
## Transitions:
-- On error shift to state 389
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On model shift to state 390
-- On annot shift to state 391
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production annot ->

State 389:
## Known stack suffix:
## error
## LR(1) items:
model -> error . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production model -> error

State 390:
## Known stack suffix:
## model
## LR(1) items:
model' -> model . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept model

State 391:
## Known stack suffix:
## annot
## LR(1) items:
model -> annot . model_body [ # ]
## Transitions:
-- On TOKEN shift to state 392
-- On SIGNATURE shift to state 396
-- On RAR shift to state 360
-- On PLOT shift to state 400
-- On PIPE shift to state 404
-- On PERT shift to state 415
-- On OBS shift to state 448
-- On LRAR shift to state 372
-- On LET shift to state 460
-- On LABEL shift to state 463
-- On INIT shift to state 536
-- On ID shift to state 465
-- On EOF shift to state 555
-- On DOT shift to state 490
-- On CONFIG shift to state 556
-- On sentence shift to state 564
-- On rule_side shift to state 492
-- On rule_content shift to state 507
-- On rule shift to state 565
-- On pattern shift to state 498
-- On model_body shift to state 567
-- On arrow shift to state 533
-- On agent shift to state 503
## Reductions:

State 392:
## Known stack suffix:
## TOKEN
## LR(1) items:
sentence -> TOKEN . annot ID annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 393
## Reductions:
-- On ID
--   reduce production annot ->

State 393:
## Known stack suffix:
## TOKEN annot
## LR(1) items:
sentence -> TOKEN annot . ID annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On ID shift to state 394
## Reductions:

State 394:
## Known stack suffix:
## TOKEN annot ID
## LR(1) items:
sentence -> TOKEN annot ID . annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 395
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production annot ->

State 395:
## Known stack suffix:
## TOKEN annot ID annot
## LR(1) items:
sentence -> TOKEN annot ID annot . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> TOKEN annot ID annot

State 396:
## Known stack suffix:
## SIGNATURE
## LR(1) items:
sentence -> SIGNATURE . annot agent [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
sentence -> SIGNATURE . annot error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 397
## Reductions:
-- On error ID DOT
--   reduce production annot ->

State 397:
## Known stack suffix:
## SIGNATURE annot
## LR(1) items:
sentence -> SIGNATURE annot . agent [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
sentence -> SIGNATURE annot . error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 398
-- On ID shift to state 18
-- On DOT shift to state 150
-- On agent shift to state 399
## Reductions:

State 398:
## Known stack suffix:
## SIGNATURE annot error
## LR(1) items:
sentence -> SIGNATURE annot error . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> SIGNATURE annot error

State 399:
## Known stack suffix:
## SIGNATURE annot agent
## LR(1) items:
sentence -> SIGNATURE annot agent . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> SIGNATURE annot agent

State 400:
## Known stack suffix:
## PLOT
## LR(1) items:
sentence -> PLOT . annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
sentence -> PLOT . annot error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 401
## Reductions:
-- On error TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 401:
## Known stack suffix:
## PLOT annot
## LR(1) items:
sentence -> PLOT annot . alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
sentence -> PLOT annot . error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 402
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 403
## Reductions:

State 402:
## Known stack suffix:
## PLOT annot error
## LR(1) items:
sentence -> PLOT annot error . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> PLOT annot error

State 403:
## Known stack suffix:
## PLOT annot alg_expr
## LR(1) items:
sentence -> PLOT annot alg_expr . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> PLOT annot alg_expr

State 404:
## Known stack suffix:
## PIPE
## LR(1) items:
rule_side -> PIPE . annot sum_token [ error RAR LRAR AT ]
rule_side -> PIPE . annot error [ error RAR LRAR AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 405
## Reductions:
-- On error TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 405:
## Known stack suffix:
## PIPE annot
## LR(1) items:
rule_side -> PIPE annot . sum_token [ error RAR LRAR AT ]
rule_side -> PIPE annot . error [ error RAR LRAR AT ]
## Transitions:
-- On error shift to state 406
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On sum_token shift to state 407
-- On small_alg_expr shift to state 408
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 406:
## Known stack suffix:
## PIPE annot error
## LR(1) items:
rule_side -> PIPE annot error . [ error RAR LRAR AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> PIPE annot error

State 407:
## Known stack suffix:
## PIPE annot sum_token
## LR(1) items:
rule_side -> PIPE annot sum_token . [ error RAR LRAR AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> PIPE annot sum_token

State 408:
## Known stack suffix:
## small_alg_expr
## LR(1) items:
sum_token -> small_alg_expr . annot ID annot [ error RAR LRAR AT ]
sum_token -> small_alg_expr . annot ID annot COMMA annot sum_token [ error RAR LRAR AT ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 409
## Reductions:
-- On ID
--   reduce production annot ->

State 409:
## Known stack suffix:
## small_alg_expr annot
## LR(1) items:
sum_token -> small_alg_expr annot . ID annot [ error RAR LRAR AT ]
sum_token -> small_alg_expr annot . ID annot COMMA annot sum_token [ error RAR LRAR AT ]
## Transitions:
-- On ID shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## small_alg_expr annot ID
## LR(1) items:
sum_token -> small_alg_expr annot ID . annot [ error RAR LRAR AT ]
sum_token -> small_alg_expr annot ID . annot COMMA annot sum_token [ error RAR LRAR AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 411
## Reductions:
-- On error RAR LRAR COMMA AT
--   reduce production annot ->

State 411:
## Known stack suffix:
## small_alg_expr annot ID annot
## LR(1) items:
sum_token -> small_alg_expr annot ID annot . [ error RAR LRAR AT ]
sum_token -> small_alg_expr annot ID annot . COMMA annot sum_token [ error RAR LRAR AT ]
## Transitions:
-- On COMMA shift to state 412
## Reductions:
-- On error RAR LRAR AT
--   reduce production sum_token -> small_alg_expr annot ID annot

State 412:
## Known stack suffix:
## small_alg_expr annot ID annot COMMA
## LR(1) items:
sum_token -> small_alg_expr annot ID annot COMMA . annot sum_token [ error RAR LRAR AT ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 413
## Reductions:
-- On TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 413:
## Known stack suffix:
## small_alg_expr annot ID annot COMMA annot
## LR(1) items:
sum_token -> small_alg_expr annot ID annot COMMA annot . sum_token [ error RAR LRAR AT ]
## Transitions:
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On sum_token shift to state 414
-- On small_alg_expr shift to state 408
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 414:
## Known stack suffix:
## small_alg_expr annot ID annot COMMA annot sum_token
## LR(1) items:
sum_token -> small_alg_expr annot ID annot COMMA annot sum_token . [ error RAR LRAR AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_token -> small_alg_expr annot ID annot COMMA annot sum_token

State 415:
## Known stack suffix:
## PERT
## LR(1) items:
sentence -> PERT . perturbation_declaration [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On perturbation_declaration shift to state 416
-- On perturbation_alarm shift to state 417
-- On annot shift to state 443
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ALARM ABS
--   reduce production annot ->

State 416:
## Known stack suffix:
## PERT perturbation_declaration
## LR(1) items:
sentence -> PERT perturbation_declaration . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> PERT perturbation_declaration

State 417:
## Known stack suffix:
## perturbation_alarm
## LR(1) items:
perturbation_declaration -> perturbation_alarm . bool_expr DO annot effect_list perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
perturbation_declaration -> perturbation_alarm . DO annot effect_list perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On DO shift to state 418
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 438
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 252
## Reductions:

State 418:
## Known stack suffix:
## perturbation_alarm DO
## LR(1) items:
perturbation_declaration -> perturbation_alarm DO . annot effect_list perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 419
## Reductions:
-- On TRACK STOP SPECIES_OF SNAPSHOT PRINTF PLOTENTRY OP_PAR INTRO FLUX DELETE ASSIGN APPLY
--   reduce production annot ->

State 419:
## Known stack suffix:
## perturbation_alarm DO annot
## LR(1) items:
perturbation_declaration -> perturbation_alarm DO annot . effect_list perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRACK shift to state 10
-- On STOP shift to state 159
-- On SPECIES_OF shift to state 309
-- On SNAPSHOT shift to state 316
-- On PRINTF shift to state 323
-- On PLOTENTRY shift to state 327
-- On OP_PAR shift to state 420
-- On INTRO shift to state 329
-- On FLUX shift to state 334
-- On DELETE shift to state 344
-- On ASSIGN shift to state 349
-- On APPLY shift to state 357
-- On effect_list shift to state 429
-- On effect shift to state 434
## Reductions:

State 420:
## Known stack suffix:
## OP_PAR
## LR(1) items:
effect_list -> OP_PAR . annot partial_effect_list CL_PAR annot [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 421
## Reductions:
-- On TRACK STOP SPECIES_OF SNAPSHOT PRINTF PLOTENTRY INTRO FLUX DELETE ASSIGN APPLY
--   reduce production annot ->

State 421:
## Known stack suffix:
## OP_PAR annot
## LR(1) items:
effect_list -> OP_PAR annot . partial_effect_list CL_PAR annot [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRACK shift to state 10
-- On STOP shift to state 159
-- On SPECIES_OF shift to state 309
-- On SNAPSHOT shift to state 316
-- On PRINTF shift to state 323
-- On PLOTENTRY shift to state 327
-- On INTRO shift to state 329
-- On FLUX shift to state 334
-- On DELETE shift to state 344
-- On ASSIGN shift to state 349
-- On APPLY shift to state 357
-- On partial_effect_list shift to state 422
-- On effect shift to state 425
## Reductions:

State 422:
## Known stack suffix:
## OP_PAR annot partial_effect_list
## LR(1) items:
effect_list -> OP_PAR annot partial_effect_list . CL_PAR annot [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On CL_PAR shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## OP_PAR annot partial_effect_list CL_PAR
## LR(1) items:
effect_list -> OP_PAR annot partial_effect_list CL_PAR . annot [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 424
## Reductions:
-- On TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production annot ->

State 424:
## Known stack suffix:
## OP_PAR annot partial_effect_list CL_PAR annot
## LR(1) items:
effect_list -> OP_PAR annot partial_effect_list CL_PAR annot . [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect_list -> OP_PAR annot partial_effect_list CL_PAR annot

State 425:
## Known stack suffix:
## effect
## LR(1) items:
partial_effect_list -> effect . SEMICOLON annot [ EOF CL_PAR ]
partial_effect_list -> effect . [ EOF CL_PAR ]
partial_effect_list -> effect . SEMICOLON annot partial_effect_list [ EOF CL_PAR ]
## Transitions:
-- On SEMICOLON shift to state 426
## Reductions:
-- On EOF CL_PAR
--   reduce production partial_effect_list -> effect

State 426:
## Known stack suffix:
## effect SEMICOLON
## LR(1) items:
partial_effect_list -> effect SEMICOLON . annot [ EOF CL_PAR ]
partial_effect_list -> effect SEMICOLON . annot partial_effect_list [ EOF CL_PAR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 427
## Reductions:
-- On TRACK STOP SPECIES_OF SNAPSHOT PRINTF PLOTENTRY INTRO FLUX EOF DELETE CL_PAR ASSIGN APPLY
--   reduce production annot ->

State 427:
## Known stack suffix:
## effect SEMICOLON annot
## LR(1) items:
partial_effect_list -> effect SEMICOLON annot . [ EOF CL_PAR ]
partial_effect_list -> effect SEMICOLON annot . partial_effect_list [ EOF CL_PAR ]
## Transitions:
-- On TRACK shift to state 10
-- On STOP shift to state 159
-- On SPECIES_OF shift to state 309
-- On SNAPSHOT shift to state 316
-- On PRINTF shift to state 323
-- On PLOTENTRY shift to state 327
-- On INTRO shift to state 329
-- On FLUX shift to state 334
-- On DELETE shift to state 344
-- On ASSIGN shift to state 349
-- On APPLY shift to state 357
-- On partial_effect_list shift to state 428
-- On effect shift to state 425
## Reductions:
-- On EOF CL_PAR
--   reduce production partial_effect_list -> effect SEMICOLON annot

State 428:
## Known stack suffix:
## effect SEMICOLON annot partial_effect_list
## LR(1) items:
partial_effect_list -> effect SEMICOLON annot partial_effect_list . [ EOF CL_PAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production partial_effect_list -> effect SEMICOLON annot partial_effect_list

State 429:
## Known stack suffix:
## perturbation_alarm DO annot effect_list
## LR(1) items:
perturbation_declaration -> perturbation_alarm DO annot effect_list . perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On REPEAT shift to state 430
-- On perturbation_post shift to state 433
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production perturbation_post ->

State 430:
## Known stack suffix:
## REPEAT
## LR(1) items:
perturbation_post -> REPEAT . annot bool_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 431
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 431:
## Known stack suffix:
## REPEAT annot
## LR(1) items:
perturbation_post -> REPEAT annot . bool_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 432
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 252
## Reductions:

State 432:
## Known stack suffix:
## REPEAT annot bool_expr
## LR(1) items:
perturbation_post -> REPEAT annot bool_expr . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perturbation_post -> REPEAT annot bool_expr

State 433:
## Known stack suffix:
## perturbation_alarm DO annot effect_list perturbation_post
## LR(1) items:
perturbation_declaration -> perturbation_alarm DO annot effect_list perturbation_post . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perturbation_declaration -> perturbation_alarm DO annot effect_list perturbation_post

State 434:
## Known stack suffix:
## effect
## LR(1) items:
effect_list -> effect . SEMICOLON annot [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
effect_list -> effect . SEMICOLON annot effect_list [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SEMICOLON shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## effect SEMICOLON
## LR(1) items:
effect_list -> effect SEMICOLON . annot [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
effect_list -> effect SEMICOLON . annot effect_list [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 436
## Reductions:
-- On TRACK TOKEN STOP SPECIES_OF SNAPSHOT SIGNATURE REPEAT RAR PRINTF PLOTENTRY PLOT PIPE PERT OP_PAR OBS LRAR LET LABEL INTRO INIT ID FLUX EOF DOT DELETE CONFIG ASSIGN APPLY
--   reduce production annot ->

State 436:
## Known stack suffix:
## effect SEMICOLON annot
## LR(1) items:
effect_list -> effect SEMICOLON annot . [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
effect_list -> effect SEMICOLON annot . effect_list [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRACK shift to state 10
-- On STOP shift to state 159
-- On SPECIES_OF shift to state 309
-- On SNAPSHOT shift to state 316
-- On PRINTF shift to state 323
-- On PLOTENTRY shift to state 327
-- On OP_PAR shift to state 420
-- On INTRO shift to state 329
-- On FLUX shift to state 334
-- On DELETE shift to state 344
-- On ASSIGN shift to state 349
-- On APPLY shift to state 357
-- On effect_list shift to state 437
-- On effect shift to state 434
## Reductions:
-- On TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production effect_list -> effect SEMICOLON annot

State 437:
## Known stack suffix:
## effect SEMICOLON annot effect_list
## LR(1) items:
effect_list -> effect SEMICOLON annot effect_list . [ TOKEN SIGNATURE REPEAT RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect_list -> effect SEMICOLON annot effect_list

State 438:
## Known stack suffix:
## perturbation_alarm bool_expr
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr . DO annot effect_list perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On DO shift to state 439
## Reductions:

State 439:
## Known stack suffix:
## perturbation_alarm bool_expr DO
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr DO . annot effect_list perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 440
## Reductions:
-- On TRACK STOP SPECIES_OF SNAPSHOT PRINTF PLOTENTRY OP_PAR INTRO FLUX DELETE ASSIGN APPLY
--   reduce production annot ->

State 440:
## Known stack suffix:
## perturbation_alarm bool_expr DO annot
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr DO annot . effect_list perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRACK shift to state 10
-- On STOP shift to state 159
-- On SPECIES_OF shift to state 309
-- On SNAPSHOT shift to state 316
-- On PRINTF shift to state 323
-- On PLOTENTRY shift to state 327
-- On OP_PAR shift to state 420
-- On INTRO shift to state 329
-- On FLUX shift to state 334
-- On DELETE shift to state 344
-- On ASSIGN shift to state 349
-- On APPLY shift to state 357
-- On effect_list shift to state 441
-- On effect shift to state 434
## Reductions:

State 441:
## Known stack suffix:
## perturbation_alarm bool_expr DO annot effect_list
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr DO annot effect_list . perturbation_post [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On REPEAT shift to state 430
-- On perturbation_post shift to state 442
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production perturbation_post ->

State 442:
## Known stack suffix:
## perturbation_alarm bool_expr DO annot effect_list perturbation_post
## LR(1) items:
perturbation_declaration -> perturbation_alarm bool_expr DO annot effect_list perturbation_post . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perturbation_declaration -> perturbation_alarm bool_expr DO annot effect_list perturbation_post

State 443:
## Known stack suffix:
## annot
## LR(1) items:
perturbation_alarm -> annot . [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
perturbation_alarm -> annot . ALARM annot nbr annot [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
## Transitions:
-- On ALARM shift to state 444
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS
--   reduce production perturbation_alarm -> annot

State 444:
## Known stack suffix:
## annot ALARM
## LR(1) items:
perturbation_alarm -> annot ALARM . annot nbr annot [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 445
## Reductions:
-- On INT INFINITY FLOAT
--   reduce production annot ->

State 445:
## Known stack suffix:
## annot ALARM annot
## LR(1) items:
perturbation_alarm -> annot ALARM annot . nbr annot [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
## Transitions:
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On FLOAT shift to state 201
-- On nbr shift to state 446
## Reductions:

State 446:
## Known stack suffix:
## annot ALARM annot nbr
## LR(1) items:
perturbation_alarm -> annot ALARM annot nbr . annot [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 447
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS
--   reduce production annot ->

State 447:
## Known stack suffix:
## annot ALARM annot nbr annot
## LR(1) items:
perturbation_alarm -> annot ALARM annot nbr annot . [ TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX DO CPUTIME COSINUS ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perturbation_alarm -> annot ALARM annot nbr annot

State 448:
## Known stack suffix:
## OBS
## LR(1) items:
sentence -> OBS . annot variable_declaration [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 449
## Reductions:
-- On error LABEL ID
--   reduce production annot ->

State 449:
## Known stack suffix:
## OBS annot
## LR(1) items:
sentence -> OBS annot . variable_declaration [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 450
-- On LABEL shift to state 451
-- On ID shift to state 455
-- On variable_declaration shift to state 459
## Reductions:

State 450:
## Known stack suffix:
## error
## LR(1) items:
variable_declaration -> error . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> error

State 451:
## Known stack suffix:
## LABEL
## LR(1) items:
variable_declaration -> LABEL . annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
variable_declaration -> LABEL . annot error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 452
## Reductions:
-- On error TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 452:
## Known stack suffix:
## LABEL annot
## LR(1) items:
variable_declaration -> LABEL annot . alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
variable_declaration -> LABEL annot . error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 453
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 454
## Reductions:

State 453:
## Known stack suffix:
## LABEL annot error
## LR(1) items:
variable_declaration -> LABEL annot error . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> LABEL annot error

State 454:
## Known stack suffix:
## LABEL annot alg_expr
## LR(1) items:
variable_declaration -> LABEL annot alg_expr . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> LABEL annot alg_expr

State 455:
## Known stack suffix:
## ID
## LR(1) items:
variable_declaration -> ID . annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
variable_declaration -> ID . annot error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 456
## Reductions:
-- On error TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 456:
## Known stack suffix:
## ID annot
## LR(1) items:
variable_declaration -> ID annot . alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
variable_declaration -> ID annot . error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 457
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 458
## Reductions:

State 457:
## Known stack suffix:
## ID annot error
## LR(1) items:
variable_declaration -> ID annot error . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> ID annot error

State 458:
## Known stack suffix:
## ID annot alg_expr
## LR(1) items:
variable_declaration -> ID annot alg_expr . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> ID annot alg_expr

State 459:
## Known stack suffix:
## OBS annot variable_declaration
## LR(1) items:
sentence -> OBS annot variable_declaration . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> OBS annot variable_declaration

State 460:
## Known stack suffix:
## LET
## LR(1) items:
sentence -> LET . annot variable_declaration [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 461
## Reductions:
-- On error LABEL ID
--   reduce production annot ->

State 461:
## Known stack suffix:
## LET annot
## LR(1) items:
sentence -> LET annot . variable_declaration [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 450
-- On LABEL shift to state 451
-- On ID shift to state 455
-- On variable_declaration shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## LET annot variable_declaration
## LR(1) items:
sentence -> LET annot variable_declaration . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> LET annot variable_declaration

State 463:
## Known stack suffix:
## LABEL
## LR(1) items:
sentence -> LABEL . annot rule [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
sentence -> LABEL . annot EQUAL annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 464
## Reductions:
-- On RAR PIPE LRAR ID EQUAL DOT
--   reduce production annot ->

State 464:
## Known stack suffix:
## LABEL annot
## LR(1) items:
sentence -> LABEL annot . rule [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
sentence -> LABEL annot . EQUAL annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On RAR shift to state 360
-- On PIPE shift to state 404
-- On LRAR shift to state 372
-- On ID shift to state 465
-- On EQUAL shift to state 487
-- On DOT shift to state 490
-- On rule_side shift to state 492
-- On rule_content shift to state 507
-- On rule shift to state 532
-- On pattern shift to state 498
-- On arrow shift to state 533
-- On agent shift to state 503
## Reductions:

State 465:
## Known stack suffix:
## ID
## LR(1) items:
agent -> ID . annot OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
agent -> ID . annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
agent -> ID . annot error [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 466
## Reductions:
-- On error OP_PAR COLON
--   reduce production annot ->

State 466:
## Known stack suffix:
## ID annot
## LR(1) items:
agent -> ID annot . OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
agent -> ID annot . COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
agent -> ID annot . error [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On error shift to state 467
-- On OP_PAR shift to state 468
-- On COLON shift to state 478
## Reductions:

State 467:
## Known stack suffix:
## ID annot error
## LR(1) items:
agent -> ID annot error . [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> ID annot error

State 468:
## Known stack suffix:
## ID annot OP_PAR
## LR(1) items:
agent -> ID annot OP_PAR . annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 469
## Reductions:
-- On error ID CL_PAR
--   reduce production annot ->

State 469:
## Known stack suffix:
## ID annot OP_PAR annot
## LR(1) items:
agent -> ID annot OP_PAR annot . interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On error shift to state 29
-- On ID shift to state 30
-- On site shift to state 128
-- On interface shift to state 470
## Reductions:
-- On CL_PAR
--   reduce production interface ->

State 470:
## Known stack suffix:
## ID annot OP_PAR annot interface
## LR(1) items:
agent -> ID annot OP_PAR annot interface . CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On CL_PAR shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## ID annot OP_PAR annot interface CL_PAR
## LR(1) items:
agent -> ID annot OP_PAR annot interface CL_PAR . agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 472
-- On agent_modif shift to state 477
## Reductions:
-- On error RAR PLUS PIPE MINUS LRAR COMMA AT
--   reduce production annot ->

State 472:
## Known stack suffix:
## annot
## LR(1) items:
agent_modif -> annot . [ error RAR PIPE LRAR COMMA AT ]
agent_modif -> annot . PLUS annot [ error RAR PIPE LRAR COMMA AT ]
agent_modif -> annot . MINUS annot [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On PLUS shift to state 473
-- On MINUS shift to state 475
## Reductions:
-- On error RAR PIPE LRAR COMMA AT
--   reduce production agent_modif -> annot

State 473:
## Known stack suffix:
## annot PLUS
## LR(1) items:
agent_modif -> annot PLUS . annot [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 474
## Reductions:
-- On error RAR PIPE LRAR COMMA AT
--   reduce production annot ->

State 474:
## Known stack suffix:
## annot PLUS annot
## LR(1) items:
agent_modif -> annot PLUS annot . [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent_modif -> annot PLUS annot

State 475:
## Known stack suffix:
## annot MINUS
## LR(1) items:
agent_modif -> annot MINUS . annot [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 476
## Reductions:
-- On error RAR PIPE LRAR COMMA AT
--   reduce production annot ->

State 476:
## Known stack suffix:
## annot MINUS annot
## LR(1) items:
agent_modif -> annot MINUS annot . [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent_modif -> annot MINUS annot

State 477:
## Known stack suffix:
## ID annot OP_PAR annot interface CL_PAR agent_modif
## LR(1) items:
agent -> ID annot OP_PAR annot interface CL_PAR agent_modif . [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> ID annot OP_PAR annot interface CL_PAR agent_modif

State 478:
## Known stack suffix:
## ID annot COLON
## LR(1) items:
agent -> ID annot COLON . annot ID annot OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 479
## Reductions:
-- On ID
--   reduce production annot ->

State 479:
## Known stack suffix:
## ID annot COLON annot
## LR(1) items:
agent -> ID annot COLON annot . ID annot OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On ID shift to state 480
## Reductions:

State 480:
## Known stack suffix:
## ID annot COLON annot ID
## LR(1) items:
agent -> ID annot COLON annot ID . annot OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 481
## Reductions:
-- On OP_PAR
--   reduce production annot ->

State 481:
## Known stack suffix:
## ID annot COLON annot ID annot
## LR(1) items:
agent -> ID annot COLON annot ID annot . OP_PAR annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On OP_PAR shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR . annot interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 483
## Reductions:
-- On error ID CL_PAR
--   reduce production annot ->

State 483:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot . interface CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On error shift to state 29
-- On ID shift to state 30
-- On site shift to state 128
-- On interface shift to state 484
## Reductions:
-- On CL_PAR
--   reduce production interface ->

State 484:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot interface
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot interface . CL_PAR agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On CL_PAR shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot interface CL_PAR
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot interface CL_PAR . agent_modif [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 472
-- On agent_modif shift to state 486
## Reductions:
-- On error RAR PLUS PIPE MINUS LRAR COMMA AT
--   reduce production annot ->

State 486:
## Known stack suffix:
## ID annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif
## LR(1) items:
agent -> ID annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif . [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> ID annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif

State 487:
## Known stack suffix:
## LABEL annot EQUAL
## LR(1) items:
sentence -> LABEL annot EQUAL . annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 488
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 488:
## Known stack suffix:
## LABEL annot EQUAL annot
## LR(1) items:
sentence -> LABEL annot EQUAL annot . alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 489
## Reductions:

State 489:
## Known stack suffix:
## LABEL annot EQUAL annot alg_expr
## LR(1) items:
sentence -> LABEL annot EQUAL annot alg_expr . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> LABEL annot EQUAL annot alg_expr

State 490:
## Known stack suffix:
## DOT
## LR(1) items:
agent -> DOT . annot [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 491
## Reductions:
-- On error RAR PIPE LRAR COMMA AT
--   reduce production annot ->

State 491:
## Known stack suffix:
## DOT annot
## LR(1) items:
agent -> DOT annot . [ error RAR PIPE LRAR COMMA AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production agent -> DOT annot

State 492:
## Known stack suffix:
## rule_side
## LR(1) items:
rule_content -> rule_side . arrow annot rule_side [ error AT ]
rule_content -> rule_side . arrow annot [ error AT ]
rule_content -> rule_side . [ error AT ]
## Transitions:
-- On RAR shift to state 493
-- On LRAR shift to state 494
-- On arrow shift to state 495
## Reductions:
-- On error AT
--   reduce production rule_content -> rule_side

State 493:
## Known stack suffix:
## RAR
## LR(1) items:
arrow -> RAR . [ error SPACE PIPE NEWLINE ID DOT COMMENT AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow -> RAR

State 494:
## Known stack suffix:
## LRAR
## LR(1) items:
arrow -> LRAR . [ error SPACE PIPE NEWLINE ID DOT COMMENT AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow -> LRAR

State 495:
## Known stack suffix:
## rule_side arrow
## LR(1) items:
rule_content -> rule_side arrow . annot rule_side [ error AT ]
rule_content -> rule_side arrow . annot [ error AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 496
## Reductions:
-- On error PIPE ID DOT AT
--   reduce production annot ->

State 496:
## Known stack suffix:
## rule_side arrow annot
## LR(1) items:
rule_content -> rule_side arrow annot . rule_side [ error AT ]
rule_content -> rule_side arrow annot . [ error AT ]
## Transitions:
-- On PIPE shift to state 404
-- On ID shift to state 465
-- On DOT shift to state 490
-- On rule_side shift to state 497
-- On pattern shift to state 498
-- On agent shift to state 503
## Reductions:
-- On error AT
--   reduce production rule_content -> rule_side arrow annot

State 497:
## Known stack suffix:
## rule_side arrow annot rule_side
## LR(1) items:
rule_content -> rule_side arrow annot rule_side . [ error AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_content -> rule_side arrow annot rule_side

State 498:
## Known stack suffix:
## pattern
## LR(1) items:
rule_side -> pattern . [ error RAR LRAR AT ]
rule_side -> pattern . PIPE annot sum_token [ error RAR LRAR AT ]
rule_side -> pattern . PIPE annot error [ error RAR LRAR AT ]
## Transitions:
-- On PIPE shift to state 499
## Reductions:
-- On error RAR LRAR AT
--   reduce production rule_side -> pattern

State 499:
## Known stack suffix:
## pattern PIPE
## LR(1) items:
rule_side -> pattern PIPE . annot sum_token [ error RAR LRAR AT ]
rule_side -> pattern PIPE . annot error [ error RAR LRAR AT ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 500
## Reductions:
-- On error TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 500:
## Known stack suffix:
## pattern PIPE annot
## LR(1) items:
rule_side -> pattern PIPE annot . sum_token [ error RAR LRAR AT ]
rule_side -> pattern PIPE annot . error [ error RAR LRAR AT ]
## Transitions:
-- On error shift to state 501
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 177
-- On NULL_EVENT shift to state 182
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On sum_token shift to state 502
-- On small_alg_expr shift to state 408
-- On nbr shift to state 213
-- On constant shift to state 214
## Reductions:

State 501:
## Known stack suffix:
## pattern PIPE annot error
## LR(1) items:
rule_side -> pattern PIPE annot error . [ error RAR LRAR AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> pattern PIPE annot error

State 502:
## Known stack suffix:
## pattern PIPE annot sum_token
## LR(1) items:
rule_side -> pattern PIPE annot sum_token . [ error RAR LRAR AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_side -> pattern PIPE annot sum_token

State 503:
## Known stack suffix:
## agent
## LR(1) items:
pattern -> agent . COMMA annot pattern [ error RAR PIPE LRAR AT ]
pattern -> agent . [ error RAR PIPE LRAR AT ]
## Transitions:
-- On COMMA shift to state 504
## Reductions:
-- On error RAR PIPE LRAR AT
--   reduce production pattern -> agent

State 504:
## Known stack suffix:
## agent COMMA
## LR(1) items:
pattern -> agent COMMA . annot pattern [ error RAR PIPE LRAR AT ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 505
## Reductions:
-- On ID DOT
--   reduce production annot ->

State 505:
## Known stack suffix:
## agent COMMA annot
## LR(1) items:
pattern -> agent COMMA annot . pattern [ error RAR PIPE LRAR AT ]
## Transitions:
-- On ID shift to state 465
-- On DOT shift to state 490
-- On pattern shift to state 506
-- On agent shift to state 503
## Reductions:

State 506:
## Known stack suffix:
## agent COMMA annot pattern
## LR(1) items:
pattern -> agent COMMA annot pattern . [ error RAR PIPE LRAR AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> agent COMMA annot pattern

State 507:
## Known stack suffix:
## rule_content
## LR(1) items:
rule -> rule_content . birate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
rule -> rule_content . error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 508
-- On AT shift to state 509
-- On birate shift to state 531
## Reductions:

State 508:
## Known stack suffix:
## rule_content error
## LR(1) items:
rule -> rule_content error . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> rule_content error

State 509:
## Known stack suffix:
## AT
## LR(1) items:
birate -> AT . annot rate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
birate -> AT . annot rate COMMA annot rate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 510
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR OP_CUR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 510:
## Known stack suffix:
## AT annot
## LR(1) items:
birate -> AT annot . rate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
birate -> AT annot . rate COMMA annot rate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On OP_CUR shift to state 511
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On rate shift to state 521
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 525
## Reductions:

State 511:
## Known stack suffix:
## OP_CUR
## LR(1) items:
rate -> OP_CUR . annot alg_with_radius CL_CUR annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 512
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 512:
## Known stack suffix:
## OP_CUR annot
## LR(1) items:
rate -> OP_CUR annot . alg_with_radius CL_CUR annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_with_radius shift to state 513
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 517
## Reductions:

State 513:
## Known stack suffix:
## OP_CUR annot alg_with_radius
## LR(1) items:
rate -> OP_CUR annot alg_with_radius . CL_CUR annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On CL_CUR shift to state 514
## Reductions:

State 514:
## Known stack suffix:
## OP_CUR annot alg_with_radius CL_CUR
## LR(1) items:
rate -> OP_CUR annot alg_with_radius CL_CUR . annot alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 515
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 515:
## Known stack suffix:
## OP_CUR annot alg_with_radius CL_CUR annot
## LR(1) items:
rate -> OP_CUR annot alg_with_radius CL_CUR annot . alg_expr [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## OP_CUR annot alg_with_radius CL_CUR annot alg_expr
## LR(1) items:
rate -> OP_CUR annot alg_with_radius CL_CUR annot alg_expr . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rate -> OP_CUR annot alg_with_radius CL_CUR annot alg_expr

State 517:
## Known stack suffix:
## alg_expr
## LR(1) items:
alg_with_radius -> alg_expr . [ CL_CUR ]
alg_with_radius -> alg_expr . COLON annot alg_expr [ CL_CUR ]
## Transitions:
-- On COLON shift to state 518
## Reductions:
-- On CL_CUR
--   reduce production alg_with_radius -> alg_expr

State 518:
## Known stack suffix:
## alg_expr COLON
## LR(1) items:
alg_with_radius -> alg_expr COLON . annot alg_expr [ CL_CUR ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 519
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 519:
## Known stack suffix:
## alg_expr COLON annot
## LR(1) items:
alg_with_radius -> alg_expr COLON annot . alg_expr [ CL_CUR ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## alg_expr COLON annot alg_expr
## LR(1) items:
alg_with_radius -> alg_expr COLON annot alg_expr . [ CL_CUR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alg_with_radius -> alg_expr COLON annot alg_expr

State 521:
## Known stack suffix:
## AT annot rate
## LR(1) items:
birate -> AT annot rate . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
birate -> AT annot rate . COMMA annot rate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On COMMA shift to state 522
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production birate -> AT annot rate

State 522:
## Known stack suffix:
## AT annot rate COMMA
## LR(1) items:
birate -> AT annot rate COMMA . annot rate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 523
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR OP_CUR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 523:
## Known stack suffix:
## AT annot rate COMMA annot
## LR(1) items:
birate -> AT annot rate COMMA annot . rate [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On OP_CUR shift to state 511
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On rate shift to state 524
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 525
## Reductions:

State 524:
## Known stack suffix:
## AT annot rate COMMA annot rate
## LR(1) items:
birate -> AT annot rate COMMA annot rate . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production birate -> AT annot rate COMMA annot rate

State 525:
## Known stack suffix:
## alg_expr
## LR(1) items:
rate -> alg_expr . OP_CUR annot alg_with_radius CL_CUR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
rate -> alg_expr . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On OP_CUR shift to state 526
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA
--   reduce production rate -> alg_expr

State 526:
## Known stack suffix:
## alg_expr OP_CUR
## LR(1) items:
rate -> alg_expr OP_CUR . annot alg_with_radius CL_CUR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 527
## Reductions:
-- On TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 527:
## Known stack suffix:
## alg_expr OP_CUR annot
## LR(1) items:
rate -> alg_expr OP_CUR annot . alg_with_radius CL_CUR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_with_radius shift to state 528
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 517
## Reductions:

State 528:
## Known stack suffix:
## alg_expr OP_CUR annot alg_with_radius
## LR(1) items:
rate -> alg_expr OP_CUR annot alg_with_radius . CL_CUR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On CL_CUR shift to state 529
## Reductions:

State 529:
## Known stack suffix:
## alg_expr OP_CUR annot alg_with_radius CL_CUR
## LR(1) items:
rate -> alg_expr OP_CUR annot alg_with_radius CL_CUR . annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 530
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA
--   reduce production annot ->

State 530:
## Known stack suffix:
## alg_expr OP_CUR annot alg_with_radius CL_CUR annot
## LR(1) items:
rate -> alg_expr OP_CUR annot alg_with_radius CL_CUR annot . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rate -> alg_expr OP_CUR annot alg_with_radius CL_CUR annot

State 531:
## Known stack suffix:
## rule_content birate
## LR(1) items:
rule -> rule_content birate . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> rule_content birate

State 532:
## Known stack suffix:
## LABEL annot rule
## LR(1) items:
sentence -> LABEL annot rule . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> LABEL annot rule

State 533:
## Known stack suffix:
## arrow
## LR(1) items:
rule_content -> arrow . annot rule_side [ error AT ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 534
## Reductions:
-- On PIPE ID DOT
--   reduce production annot ->

State 534:
## Known stack suffix:
## arrow annot
## LR(1) items:
rule_content -> arrow annot . rule_side [ error AT ]
## Transitions:
-- On PIPE shift to state 404
-- On ID shift to state 465
-- On DOT shift to state 490
-- On rule_side shift to state 535
-- On pattern shift to state 498
-- On agent shift to state 503
## Reductions:

State 535:
## Known stack suffix:
## arrow annot rule_side
## LR(1) items:
rule_content -> arrow annot rule_side . [ error AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_content -> arrow annot rule_side

State 536:
## Known stack suffix:
## INIT
## LR(1) items:
sentence -> INIT . annot init_declaration [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 537
## Reductions:
-- On error TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 537:
## Known stack suffix:
## INIT annot
## LR(1) items:
sentence -> INIT annot . init_declaration [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 538
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 180
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On init_declaration shift to state 539
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 255
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 258
-- On alg_expr shift to state 540
## Reductions:

State 538:
## Known stack suffix:
## error
## LR(1) items:
init_declaration -> error . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declaration -> error

State 539:
## Known stack suffix:
## INIT annot init_declaration
## LR(1) items:
sentence -> INIT annot init_declaration . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> INIT annot init_declaration

State 540:
## Known stack suffix:
## alg_expr
## LR(1) items:
init_declaration -> alg_expr . pattern [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
init_declaration -> alg_expr . OP_PAR annot pattern CL_PAR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
init_declaration -> alg_expr . id_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On OP_PAR shift to state 541
-- On ID shift to state 546
-- On DOT shift to state 150
-- On pattern shift to state 553
-- On id_list shift to state 554
-- On agent shift to state 155
## Reductions:

State 541:
## Known stack suffix:
## alg_expr OP_PAR
## LR(1) items:
init_declaration -> alg_expr OP_PAR . annot pattern CL_PAR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 542
## Reductions:
-- On ID DOT
--   reduce production annot ->

State 542:
## Known stack suffix:
## alg_expr OP_PAR annot
## LR(1) items:
init_declaration -> alg_expr OP_PAR annot . pattern CL_PAR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On ID shift to state 18
-- On DOT shift to state 150
-- On pattern shift to state 543
-- On agent shift to state 155
## Reductions:

State 543:
## Known stack suffix:
## alg_expr OP_PAR annot pattern
## LR(1) items:
init_declaration -> alg_expr OP_PAR annot pattern . CL_PAR annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On CL_PAR shift to state 544
## Reductions:

State 544:
## Known stack suffix:
## alg_expr OP_PAR annot pattern CL_PAR
## LR(1) items:
init_declaration -> alg_expr OP_PAR annot pattern CL_PAR . annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 545
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production annot ->

State 545:
## Known stack suffix:
## alg_expr OP_PAR annot pattern CL_PAR annot
## LR(1) items:
init_declaration -> alg_expr OP_PAR annot pattern CL_PAR annot . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declaration -> alg_expr OP_PAR annot pattern CL_PAR annot

State 546:
## Known stack suffix:
## ID
## LR(1) items:
agent -> ID . annot OP_PAR annot interface CL_PAR agent_modif [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
agent -> ID . annot COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
agent -> ID . annot error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
id_list -> ID . annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
id_list -> ID . annot COMMA annot id_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On annot shift to state 547
## Reductions:
-- On error TOKEN SIGNATURE RAR PLOT PIPE PERT OP_PAR OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA COLON
--   reduce production annot ->

State 547:
## Known stack suffix:
## ID annot
## LR(1) items:
agent -> ID annot . OP_PAR annot interface CL_PAR agent_modif [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
agent -> ID annot . COLON annot ID annot OP_PAR annot interface CL_PAR agent_modif [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
agent -> ID annot . error [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA ]
id_list -> ID annot . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
id_list -> ID annot . COMMA annot id_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On error shift to state 26
-- On OP_PAR shift to state 27
-- On COMMA shift to state 548
-- On COLON shift to state 141
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production id_list -> ID annot

State 548:
## Known stack suffix:
## ID annot COMMA
## LR(1) items:
id_list -> ID annot COMMA . annot id_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 549
## Reductions:
-- On ID
--   reduce production annot ->

State 549:
## Known stack suffix:
## ID annot COMMA annot
## LR(1) items:
id_list -> ID annot COMMA annot . id_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On ID shift to state 550
-- On id_list shift to state 552
## Reductions:

State 550:
## Known stack suffix:
## ID
## LR(1) items:
id_list -> ID . annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
id_list -> ID . annot COMMA annot id_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 551
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG COMMA
--   reduce production annot ->

State 551:
## Known stack suffix:
## ID annot
## LR(1) items:
id_list -> ID annot . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
id_list -> ID annot . COMMA annot id_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On COMMA shift to state 548
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production id_list -> ID annot

State 552:
## Known stack suffix:
## ID annot COMMA annot id_list
## LR(1) items:
id_list -> ID annot COMMA annot id_list . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id_list -> ID annot COMMA annot id_list

State 553:
## Known stack suffix:
## alg_expr pattern
## LR(1) items:
init_declaration -> alg_expr pattern . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declaration -> alg_expr pattern

State 554:
## Known stack suffix:
## alg_expr id_list
## LR(1) items:
init_declaration -> alg_expr id_list . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declaration -> alg_expr id_list

State 555:
## Known stack suffix:
## EOF
## LR(1) items:
model_body -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production model_body -> EOF

State 556:
## Known stack suffix:
## CONFIG
## LR(1) items:
sentence -> CONFIG . annot STRING annot value_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 557
## Reductions:
-- On STRING
--   reduce production annot ->

State 557:
## Known stack suffix:
## CONFIG annot
## LR(1) items:
sentence -> CONFIG annot . STRING annot value_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On STRING shift to state 558
## Reductions:

State 558:
## Known stack suffix:
## CONFIG annot STRING
## LR(1) items:
sentence -> CONFIG annot STRING . annot value_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 559
## Reductions:
-- On STRING
--   reduce production annot ->

State 559:
## Known stack suffix:
## CONFIG annot STRING annot
## LR(1) items:
sentence -> CONFIG annot STRING annot . value_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On STRING shift to state 560
-- On value_list shift to state 563
## Reductions:

State 560:
## Known stack suffix:
## STRING
## LR(1) items:
value_list -> STRING . annot [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
value_list -> STRING . annot value_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On annot shift to state 561
## Reductions:
-- On TOKEN STRING SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production annot ->

State 561:
## Known stack suffix:
## STRING annot
## LR(1) items:
value_list -> STRING annot . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
value_list -> STRING annot . value_list [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
-- On STRING shift to state 560
-- On value_list shift to state 562
## Reductions:
-- On TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG
--   reduce production value_list -> STRING annot

State 562:
## Known stack suffix:
## STRING annot value_list
## LR(1) items:
value_list -> STRING annot value_list . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_list -> STRING annot value_list

State 563:
## Known stack suffix:
## CONFIG annot STRING annot value_list
## LR(1) items:
sentence -> CONFIG annot STRING annot value_list . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> CONFIG annot STRING annot value_list

State 564:
## Known stack suffix:
## sentence
## LR(1) items:
model_body -> sentence . model_body [ # ]
## Transitions:
-- On TOKEN shift to state 392
-- On SIGNATURE shift to state 396
-- On RAR shift to state 360
-- On PLOT shift to state 400
-- On PIPE shift to state 404
-- On PERT shift to state 415
-- On OBS shift to state 448
-- On LRAR shift to state 372
-- On LET shift to state 460
-- On LABEL shift to state 463
-- On INIT shift to state 536
-- On ID shift to state 465
-- On EOF shift to state 555
-- On DOT shift to state 490
-- On CONFIG shift to state 556
-- On sentence shift to state 564
-- On rule_side shift to state 492
-- On rule_content shift to state 507
-- On rule shift to state 565
-- On pattern shift to state 498
-- On model_body shift to state 566
-- On arrow shift to state 533
-- On agent shift to state 503
## Reductions:

State 565:
## Known stack suffix:
## rule
## LR(1) items:
sentence -> rule . [ TOKEN SIGNATURE RAR PLOT PIPE PERT OBS LRAR LET LABEL INIT ID EOF DOT CONFIG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sentence -> rule

State 566:
## Known stack suffix:
## sentence model_body
## LR(1) items:
model_body -> sentence model_body . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production model_body -> sentence model_body

State 567:
## Known stack suffix:
## annot model_body
## LR(1) items:
model -> annot model_body . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production model -> annot model_body

State 568:
## Known stack suffix:
##
## LR(1) items:
standalone_bool_expr' -> . standalone_bool_expr [ # ]
## Transitions:
-- On SPACE shift to state 19
-- On NEWLINE shift to state 20
-- On COMMENT shift to state 21
-- On standalone_bool_expr shift to state 569
-- On annot shift to state 570
## Reductions:
-- On error TRUE TMAX TIME TAN SQRT SINUS PIPE OP_PAR NULL_EVENT NOT MINUS MIN MAX LOG LABEL INT INFINITY ID FLOAT FALSE EXPONENT EVENT EMAX CPUTIME COSINUS ABS
--   reduce production annot ->

State 569:
## Known stack suffix:
## standalone_bool_expr
## LR(1) items:
standalone_bool_expr' -> standalone_bool_expr . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept standalone_bool_expr

State 570:
## Known stack suffix:
## annot
## LR(1) items:
standalone_bool_expr -> annot . bool_expr EOF [ # ]
standalone_bool_expr -> annot . error [ # ]
## Transitions:
-- On error shift to state 571
-- On TRUE shift to state 179
-- On TMAX shift to state 162
-- On TIME shift to state 163
-- On TAN shift to state 164
-- On SQRT shift to state 166
-- On SINUS shift to state 168
-- On PIPE shift to state 170
-- On OP_PAR shift to state 187
-- On NULL_EVENT shift to state 182
-- On NOT shift to state 183
-- On MINUS shift to state 189
-- On MIN shift to state 191
-- On MAX shift to state 193
-- On LOG shift to state 195
-- On LABEL shift to state 197
-- On INT shift to state 198
-- On INFINITY shift to state 199
-- On ID shift to state 200
-- On FLOAT shift to state 201
-- On FALSE shift to state 225
-- On EXPONENT shift to state 202
-- On EVENT shift to state 204
-- On EMAX shift to state 205
-- On CPUTIME shift to state 206
-- On COSINUS shift to state 207
-- On ABS shift to state 209
-- On variable shift to state 211
-- On small_bool_expr shift to state 226
-- On small_alg_expr shift to state 228
-- On nbr shift to state 213
-- On constant shift to state 214
-- On bool_expr_no_or shift to state 233
-- On bool_expr_comp shift to state 236
-- On bool_expr shift to state 572
-- On alg_expr_up_to_sum shift to state 240
-- On alg_expr_up_to_prod shift to state 251
-- On alg_expr_up_to_mod shift to state 247
-- On alg_expr_up_to_if shift to state 252
## Reductions:

State 571:
## Known stack suffix:
## annot error
## LR(1) items:
standalone_bool_expr -> annot error . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production standalone_bool_expr -> annot error

State 572:
## Known stack suffix:
## annot bool_expr
## LR(1) items:
standalone_bool_expr -> annot bool_expr . EOF [ # ]
## Transitions:
-- On EOF shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## annot bool_expr EOF
## LR(1) items:
standalone_bool_expr -> annot bool_expr EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production standalone_bool_expr -> annot bool_expr EOF

State 574:
## Known stack suffix:
##
## LR(1) items:
standalone_effect_list' -> . standalone_effect_list [ # ]
## Transitions:
-- On error shift to state 575
-- On SPACE shift to state 2
-- On NEWLINE shift to state 3
-- On COMMENT shift to state 4
-- On standalone_effect_list shift to state 576
-- On annot shift to state 577
## Reductions:
-- On TRACK STOP SPECIES_OF SNAPSHOT PRINTF PLOTENTRY INTRO FLUX DELETE ASSIGN APPLY
--   reduce production annot ->

State 575:
## Known stack suffix:
## error
## LR(1) items:
standalone_effect_list -> error . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production standalone_effect_list -> error

State 576:
## Known stack suffix:
## standalone_effect_list
## LR(1) items:
standalone_effect_list' -> standalone_effect_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept standalone_effect_list

State 577:
## Known stack suffix:
## annot
## LR(1) items:
standalone_effect_list -> annot . partial_effect_list EOF [ # ]
## Transitions:
-- On TRACK shift to state 10
-- On STOP shift to state 159
-- On SPECIES_OF shift to state 309
-- On SNAPSHOT shift to state 316
-- On PRINTF shift to state 323
-- On PLOTENTRY shift to state 327
-- On INTRO shift to state 329
-- On FLUX shift to state 334
-- On DELETE shift to state 344
-- On ASSIGN shift to state 349
-- On APPLY shift to state 357
-- On partial_effect_list shift to state 578
-- On effect shift to state 425
## Reductions:

State 578:
## Known stack suffix:
## annot partial_effect_list
## LR(1) items:
standalone_effect_list -> annot partial_effect_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 579
## Reductions:

State 579:
## Known stack suffix:
## annot partial_effect_list EOF
## LR(1) items:
standalone_effect_list -> annot partial_effect_list EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production standalone_effect_list -> annot partial_effect_list EOF

