%{
  let add_pos e x =
    (x,
    Locality.of_pos (Parsing.symbol_start_pos ()) (Parsing.rhs_end_pos e))
  let rhs_pos i =
    Locality.of_pos (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i)
  let end_pos = Parsing.rhs_end_pos
  let start_pos = Parsing.rhs_start_pos

  let internal_memory = ref []
  let add x = internal_memory := x :: !internal_memory
  let output () =
    let o = List.rev !internal_memory in let () = internal_memory := [] in o
%}
%start interactive_command
%start model
%start standalone_bool_expr
%start standalone_effect_list
%token ABS
%token ALARM
%token AND
%token APPLY
%token ASSIGN
%token AT
%token CL_BRA
%token CL_CUR
%token CL_PAR
%token COLON
%token COMMA
%token <string> COMMENT
%token CONFIG
%token COSINUS
%token CPUTIME
%token DELETE
%token DIFF
%token DIV
%token DO
%token DOT
%token ELSE
%token EMAX
%token EOF
%token EQUAL
%token EVENT
%token EXPONENT
%token FALSE
%token <float> FLOAT
%token FLUX
%token GREATER
%token <string> ID
%token INFINITY
%token INIT
%token <int> INT
%token INTRO
%token <string> LABEL
%token LET
%token LOG
%token LRAR
%token MAX
%token MIN
%token MINUS
%token MOD
%token MULT
%token NEWLINE
%token NOT
%token NULL_EVENT
%token OBS
%token OP_BRA
%token OP_CUR
%token OP_PAR
%token OR
%token PERT
%token PIPE
%token PLOT
%token PLOTENTRY
%token PLUS
%token POW
%token PRINTF
%token RAR
%token REPEAT
%token RUN
%token SEMICOLON
%token SHARP
%token SIGNATURE
%token SINUS
%token SMALLER
%token SNAPSHOT
%token <string> SPACE
%token SPECIES_OF
%token SQRT
%token STOP
%token <string> STRING
%token TAN
%token THEN
%token TIME
%token TMAX
%token TOKEN
%token TRACK
%token TRUE
%token UNDERSCORE
%type <(Ast.mixture,Ast.mixture,string,Ast.rule) Ast.command> interactive_command
%type <Ast.parsing_instruction list> model
%type <(Ast.mixture,string) Alg_expr.bool Locality.annot> standalone_bool_expr
%type <(Ast.mixture,Ast.mixture,string,Ast.rule) Ast.modif_expr list> standalone_effect_list
%%

annot:
  
    {    ( [] )}
| _1 = NEWLINE _2 = annot
    {                  ( "
"::_2 )}
| _1 = SPACE _2 = annot
    {                ( _1::_2 )}
| _1 = COMMENT _2 = annot
    {                  ( _1::_2 )}

nbr:
  _1 = INFINITY
    {             ( Nbr.F infinity )}
| _1 = FLOAT
    {          ( Nbr.F _1 )}
| _1 = INT
    {        ( Nbr.I _1 )}

link_state:
  _1 = DOT
    {        ( add_pos 1 Ast.LNK_FREE )}
| _1 = INT
    {        ( add_pos 1 (Ast.LNK_VALUE (_1,())) )}
| _1 = UNDERSCORE
    {               ( add_pos 1 Ast.LNK_SOME )}
| _1 = ID _2 = annot _3 = DOT _4 = annot _5 = ID
    {    ( add_pos 5 (Ast.LNK_TYPE ((_1,rhs_pos 1),(_5,rhs_pos 5))) )}
| _1 = SHARP
    {          ( add_pos 1 Ast.LNK_ANY )}
| _1 = ID _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error (add_pos 3 "incomplete link state")) )}

link_states:
  _1 = link_state _2 = annot
    {                     ( [_1] )}
| _1 = link_state _2 = annot _3 = link_states
    {                                 ( _1 :: _3 )}
| _1 = link_state _2 = annot _3 = COMMA _4 = annot _5 = link_states
    {                                             ( _1 :: _5 )}

link_modif:
  
    {    ( None )}
| _1 = DIV _2 = annot _3 = DOT _4 = annot
    {                        ( Some None )}
| _1 = DIV _2 = annot _3 = INT _4 = annot
    {                        ( Some (Some (_3, rhs_pos 3)) )}
| _1 = DIV _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 3 "incomplete link modification")) )}

internal_state:
  _1 = ID
    {       ( add_pos 1 (Some _1) )}
| _1 = SHARP
    {          ( add_pos 1 None )}

internal_states:
  _1 = internal_state _2 = annot
    {                         ( [_1] )}
| _1 = internal_state _2 = annot _3 = internal_states
    {                                         ( _1 :: _3 )}
| _1 = internal_state _2 = annot _3 = COMMA _4 = annot _5 = internal_states
    {                                                     ( _1 :: _5 )}

internal_modif:
  
    {    ( None )}
| _1 = DIV _2 = annot _3 = ID _4 = annot
    {                       ( Some (_3, rhs_pos 3) )}
| _1 = DIV _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 3 "incomplete link modification")) )}

site_link:
  _1 = annot _2 = link_states _3 = link_modif _4 = CL_BRA
    {                                        ( (_2, _3) )}
| _1 = annot _2 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               ("invalid linking state or missing ']'",rhs_pos 4)) )}

site_internal:
  _1 = internal_states _2 = internal_modif _3 = CL_CUR
    {                                          ( (_1, _2) )}
| _1 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               ("invalid internal state or missing '}'",rhs_pos 3)) )}

counter_modif:
  _1 = PLUS _2 = annot _3 = EQUAL _4 = annot _5 = INT
    {                               ( (_5, rhs_pos 5) )}
| _1 = PLUS _2 = annot _3 = EQUAL _4 = annot _5 = MINUS _6 = annot _7 = INT
    {                                           ( (- _7, rhs_pos 7) )}
| _1 = MINUS _2 = annot _3 = EQUAL _4 = annot _5 = INT
    {                                ( (- _5, rhs_pos 5) )}

counter_test:
  _1 = EQUAL _2 = annot _3 = INT
    {                    ( (Ast.CEQ _3,rhs_pos 3) )}
| _1 = GREATER _2 = annot _3 = EQUAL _4 = annot _5 = INT
    {                                  ( (Ast.CGTE _5,rhs_pos 5) )}
| _1 = EQUAL _2 = annot _3 = ID
    {                   ( (Ast.CVAR _3,rhs_pos 3) )}

site_counter:
  _1 = counter_modif _2 = annot _3 = CL_CUR _4 = annot
    {                                     ( (None, _1) )}
| _1 = counter_test _2 = annot _3 = CL_CUR _4 = annot
    {                                    ( (Some _1, Locality.dummy_annot 0) )}
| _1 = counter_test _2 = annot _3 = DIV _4 = annot _5 = counter_modif _6 = annot _7 = CL_CUR _8 = annot
    {    ( (Some _1,_5) )}

site:
  _1 = ID _2 = annot _3 = OP_BRA _4 = site_link _5 = annot _6 = OP_CUR _7 = annot _8 = site_internal _9 = annot
    {    ( let (port_lnk, port_lnk_mod) = _4 in
      let (port_int, port_int_mod) = _8 in
      Ast.Port
        { Ast.port_nme=(_1,rhs_pos 1); Ast.port_int;
          Ast.port_lnk; Ast.port_int_mod; Ast.port_lnk_mod; } )}
| _1 = ID _2 = annot _3 = OP_CUR _4 = annot _5 = site_internal _6 = annot _7 = OP_BRA _8 = site_link _9 = annot
    {    ( let (port_int, port_int_mod) = _5 in
      let (port_lnk, port_lnk_mod) = _8 in
      Ast.Port
        { Ast.port_nme=(_1,rhs_pos 1); Ast.port_int;
          Ast.port_lnk; Ast.port_int_mod; Ast.port_lnk_mod; } )}
| _1 = ID _2 = annot _3 = OP_BRA _4 = site_link _5 = annot
    {    ( let (port_lnk, port_lnk_mod) = _4 in
      Ast.Port
        { Ast.port_nme=(_1,rhs_pos 1); Ast.port_int=[];
          Ast.port_lnk; Ast.port_int_mod=None; Ast.port_lnk_mod; } )}
| _1 = ID _2 = annot _3 = OP_CUR _4 = annot _5 = site_internal _6 = annot
    {    ( let (port_int, port_int_mod) = _5 in
      Ast.Port
        { Ast.port_nme=(_1,rhs_pos 1);Ast.port_lnk=[];
          Ast.port_int; Ast.port_int_mod; Ast.port_lnk_mod=None; } )}
| _1 = ID _2 = annot _3 = OP_CUR _4 = annot _5 = site_counter
    {    ( let (count_test,count_delta) = _5 in
      Ast.Counter
        { Ast.count_nme=(_1,rhs_pos 1); Ast.count_test; Ast.count_delta } )}
| _1 = ID _2 = annot
    {    ( Ast.Port
        { Ast.port_nme=(_1,rhs_pos 1);Ast.port_lnk=[]; Ast.port_int=[];
          Ast.port_int_mod=None; Ast.port_lnk_mod=None; } )}

interface:
  
    {    ( [] )}
| _1 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 1 ("Malformed site expression"))) )}
| _1 = site _2 = interface
    {                   ( _1 :: _2 )}
| _1 = site _2 = COMMA _3 = annot _4 = interface
    {                               ( _1 :: _4 )}

agent_modif:
  _1 = annot
    {          ( None,start_pos 1,_1 )}
| _1 = annot _2 = PLUS _3 = annot
    {                     ( Some Ast.Create,end_pos 2,_3 )}
| _1 = annot _2 = MINUS _3 = annot
    {                      ( Some Ast.Erase,end_pos 2,_3 )}

agent:
  _1 = DOT _2 = annot
    {              ( (Ast.Absent (rhs_pos 1),end_pos 1,_2) )}
| _1 = ID _2 = annot _3 = OP_PAR _4 = annot _5 = interface _6 = CL_PAR _7 = agent_modif
    {    ( let modif,pend,an = _7 in
      (Ast.Present ((_1,rhs_pos 1), _5, modif),pend,an) )}
| _1 = ID _2 = annot _3 = COLON _4 = annot _5 = ID _6 = annot _7 = OP_PAR _8 = annot _9 = interface _10 = CL_PAR _11 = agent_modif
    {    ( let modif,pend,an = _11 in
      (Ast.Present ((_5,rhs_pos 5), _9, modif),pend,an) )}
| _1 = ID _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 3 ("Malformed agent '"^_1^"'"))) )}

pattern:
  _1 = agent _2 = COMMA _3 = annot _4 = pattern
    {    ( let (x,_,_) = _1 in let (y,pend,p) = _4 in (x::y,pend,p) )}
| _1 = agent
    {          ( let (x,pend,p) = _1 in ([x],pend,p) )}

constant:
  _1 = nbr
    {        ( add_pos 1 (Alg_expr.CONST _1) )}
| _1 = EMAX
    {         ( add_pos 1 (Alg_expr.STATE_ALG_OP (Operator.EMAX_VAR)) )}
| _1 = TMAX
    {         ( add_pos 1 (Alg_expr.STATE_ALG_OP (Operator.TMAX_VAR)) )}
| _1 = CPUTIME
    {            ( add_pos 1 (Alg_expr.STATE_ALG_OP (Operator.CPUTIME)) )}

variable:
  _1 = PIPE _2 = annot _3 = ID _4 = annot _5 = PIPE
    {                             ( add_pos 5 (Alg_expr.TOKEN_ID (_3)) )}
| _1 = PIPE _2 = annot _3 = pattern _4 = PIPE
    {    ( let (p,_,_) = _3 in add_pos 4 (Alg_expr.KAPPA_INSTANCE p) )}
| _1 = ID
    {       ( add_pos 1 (Alg_expr.ALG_VAR (_1)) )}
| _1 = LABEL
    {          ( add_pos 1 (Alg_expr.ALG_VAR (_1)) )}
| _1 = TIME
    {         ( add_pos 1 (Alg_expr.STATE_ALG_OP (Operator.TIME_VAR)) )}
| _1 = EVENT
    {          ( add_pos 1 (Alg_expr.STATE_ALG_OP (Operator.EVENT_VAR)) )}
| _1 = NULL_EVENT
    {    ( add_pos 1 (Alg_expr.STATE_ALG_OP (Operator.NULL_EVENT_VAR)) )}

small_alg_expr:
  _1 = OP_PAR _2 = annot _3 = alg_expr _4 = CL_PAR
    {                                 ( let (x,_,_) = _3 in x )}
| _1 = constant
    {             ( _1 )}
| _1 = variable
    {             ( _1 )}
| _1 = MAX _2 = annot _3 = small_alg_expr _4 = annot _5 = small_alg_expr
    {    ( add_pos 5 (Alg_expr.BIN_ALG_OP(Operator.MAX,_3,_5)) )}
| _1 = MIN _2 = annot _3 = small_alg_expr _4 = annot _5 = small_alg_expr
    {    ( add_pos 5 (Alg_expr.BIN_ALG_OP(Operator.MIN,_3,_5)) )}
| _1 = EXPONENT _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.EXP,_3)) )}
| _1 = SINUS _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.SINUS,_3)) )}
| _1 = COSINUS _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.COSINUS,_3)) )}
| _1 = TAN _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.TAN,_3)) )}
| _1 = ABS _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.INT,_3)) )}
| _1 = SQRT _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.SQRT,_3)) )}
| _1 = LOG _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.LOG,_3)) )}
| _1 = MINUS _2 = annot _3 = small_alg_expr
    {    ( add_pos 3 (Alg_expr.UN_ALG_OP(Operator.UMINUS,_3)) )}

alg_expr_up_to_mod:
  _1 = small_alg_expr _2 = annot
    {                         ( (_1,end_pos 1,_2) )}
| _1 = small_alg_expr _2 = annot _3 = POW _4 = annot _5 = alg_expr_up_to_mod
    {    ( let (x,y,z) = _5 in
      (add_pos 4 (Alg_expr.BIN_ALG_OP(Operator.POW,_1,x)),y,z) )}

alg_expr_up_to_prod:
  _1 = alg_expr_up_to_mod
    {                       ( _1 )}
| _1 = alg_expr_up_to_prod _2 = MOD _3 = annot _4 = alg_expr_up_to_mod
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.BIN_ALG_OP (Operator.MODULO,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}

alg_expr_up_to_sum:
  _1 = alg_expr_up_to_prod
    {                        ( _1 )}
| _1 = alg_expr_up_to_sum _2 = MULT _3 = annot _4 = alg_expr_up_to_prod
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.BIN_ALG_OP(Operator.MULT,x,y),
       Locality.of_pos (start_pos 1) pend),
       pend,an) )}
| _1 = alg_expr_up_to_sum _2 = DIV _3 = annot _4 = alg_expr_up_to_prod
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.BIN_ALG_OP(Operator.DIV,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}

alg_expr_up_to_if:
  _1 = alg_expr_up_to_sum
    {                       ( _1 )}
| _1 = alg_expr_up_to_if _2 = PLUS _3 = annot _4 = alg_expr_up_to_sum
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.BIN_ALG_OP(Operator.SUM,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}
| _1 = alg_expr_up_to_if _2 = MINUS _3 = annot _4 = alg_expr_up_to_sum
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.BIN_ALG_OP(Operator.MINUS,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}

alg_expr:
  _1 = alg_expr_up_to_if
    {                      ( _1 )}
| _1 = bool_expr _2 = THEN _3 = annot _4 = alg_expr _5 = ELSE _6 = annot _7 = small_alg_expr _8 = annot
    {    ( let (i,_,_) = _1 in
      let (t,_,_) = _4 in
  ((Alg_expr.IF(i,t,_7),
    Locality.of_pos (start_pos 1) (end_pos 7)),end_pos 7,_8) )}

boolean:
  _1 = TRUE
    {         ( true )}
| _1 = FALSE
    {          ( false )}

small_bool_expr:
  _1 = OP_PAR _2 = annot _3 = bool_expr _4 = CL_PAR
    {                                  ( let (x,_,_) = _3 in x )}
| _1 = TRUE
    {         ( add_pos 1 Alg_expr.TRUE )}
| _1 = FALSE
    {          ( add_pos 1 Alg_expr.FALSE )}
| _1 = NOT _2 = annot _3 = small_bool_expr
    {    ( add_pos 3 (Alg_expr.UN_BOOL_OP(Operator.NOT,_3)) )}

bool_expr_comp:
  _1 = small_bool_expr _2 = annot
    {                          ( (_1,end_pos 1, _2) )}
| _1 = alg_expr_up_to_if _2 = GREATER _3 = annot _4 = alg_expr
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.COMPARE_OP(Operator.GREATER,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}
| _1 = alg_expr_up_to_if _2 = SMALLER _3 = annot _4 = alg_expr
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.COMPARE_OP(Operator.SMALLER,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}
| _1 = alg_expr_up_to_if _2 = EQUAL _3 = annot _4 = alg_expr
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.COMPARE_OP(Operator.EQUAL,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}
| _1 = alg_expr_up_to_if _2 = DIFF _3 = annot _4 = alg_expr
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.COMPARE_OP(Operator.DIFF,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}

bool_expr_no_or:
  _1 = bool_expr_comp
    {                   ( _1 )}
| _1 = bool_expr_comp _2 = AND _3 = annot _4 = bool_expr_no_or
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.BIN_BOOL_OP(Operator.AND,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}

bool_expr:
  _1 = bool_expr_no_or
    {                    ( _1 )}
| _1 = bool_expr_no_or _2 = OR _3 = annot _4 = bool_expr
    {    ( let (y,pend,an) = _4 in
      let (x,_,_) = _1 in
      ((Alg_expr.BIN_BOOL_OP(Operator.OR,x,y),
        Locality.of_pos (start_pos 1) pend),
       pend,an) )}

standalone_bool_expr:
  _1 = annot _2 = bool_expr _3 = EOF
    {                        ( let (x,_,_) = _2 in x )}
| _1 = annot _2 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 2 "Problematic boolean expression")) )}

arrow:
  _1 = RAR
    {        (false)}
| _1 = LRAR
    {         (true)}

sum_token:
  _1 = small_alg_expr _2 = annot _3 = ID _4 = annot
    {                                  ( [(_1,(_3,rhs_pos 3))],end_pos 3,_4 )}
| _1 = small_alg_expr _2 = annot _3 = ID _4 = annot _5 = COMMA _6 = annot _7 = sum_token
    {    ( let (l,pend,an) = _7 in (_1,(_3,rhs_pos 3)) :: l,pend,an )}

rule_side:
  _1 = pattern
    {            ( let (p,pend,an) = _1 in (p,[],pend,an) )}
| _1 = pattern _2 = PIPE _3 = annot _4 = sum_token
    {    ( let (p,_,_) = _1 in
      let (t,pend,an) = _4 in (p, t, pend, an) )}
| _1 = PIPE _2 = annot _3 = sum_token
    {                         ( let (t,pend,an) = _3 in ([], t, pend, an) )}
| _1 = pattern _2 = PIPE _3 = annot _4 = error
    {    ( raise (ExceptionDefn.Syntax_Error
	(add_pos 4 "Malformed token expression, I was expecting a_0 t_0, ... \
, a_n t_n where t_i are tokens and a_i any algebraic formula")) )}
| _1 = PIPE _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
	(add_pos 3 "Malformed token expression, I was expecting a_0 t_0, ... \
, a_n t_n where t_i are tokens and a_i any algebraic formula")) )}

rule_content:
  _1 = rule_side _2 = arrow _3 = annot _4 = rule_side
    {    ( let (lhs,rm_token,_,_) = _1 in
      let (rhs,add_token,pend,an) = _4 in
      (Ast.Arrow {Ast.lhs; Ast.rm_token; Ast.rhs; Ast.add_token},_2,pend,an) )}
| _1 = rule_side _2 = arrow _3 = annot
    {    ( let (lhs,rm_token,_,_) = _1 in
      (Ast.Arrow {Ast.lhs; Ast.rm_token; Ast.rhs=[]; Ast.add_token=[]},_2,end_pos 2,_3) )}
| _1 = arrow _2 = annot _3 = rule_side
    {    ( let (rhs,add_token,pend,an) = _3 in
      (Ast.Arrow {Ast.lhs=[]; Ast.rm_token=[]; Ast.rhs; Ast.add_token},_1,pend,an) )}
| _1 = rule_side
    {    ( let (mix,delta_token,pend,an) = _1 in
      (Ast.Edit {Ast.mix; Ast.delta_token},false,pend,an) )}

alg_with_radius:
  _1 = alg_expr
    {             ( let (x,_,_) = _1 in (x,None) )}
| _1 = alg_expr _2 = COLON _3 = annot _4 = alg_expr
    {    ( let (x,_,_) = _1 in let (y,_,_) = _4 in (x, Some y) )}

rate:
  _1 = OP_CUR _2 = annot _3 = alg_with_radius _4 = CL_CUR _5 = annot _6 = alg_expr
    {    ( let (b,pend,an) = _6 in (b,Some _3,pend,an) )}
| _1 = alg_expr _2 = OP_CUR _3 = annot _4 = alg_with_radius _5 = CL_CUR _6 = annot
    {    ( let (x,_,_) = _1 in (x,Some _4,end_pos 5,_6) )}
| _1 = alg_expr
    {             ( let (a,pend,an) = _1 in (a,None,pend,an) )}

birate:
  _1 = AT _2 = annot _3 = rate
    {                  ( let (k2,k1,pend,an) = _3 in (k2,k1,None,None,pend,an) )}
| _1 = AT _2 = annot _3 = rate _4 = COMMA _5 = annot _6 = rate
    {    ( let (k2,k1,_,_) = _3 in
      let (kback,kback1,pend,an) = _6 in
      (k2,k1,Some kback,kback1,pend,an) )}

rule:
  _1 = rule_content _2 = birate
    {    ( let (k_def,k_un,k_op,k_op_un,pos_end,_annot) = _2 in
      let (rewrite,bidirectional,_,_) = _1 in
      ({
        Ast.rewrite;Ast.bidirectional;
        Ast.k_def; Ast.k_un; Ast.k_op; Ast.k_op_un;
      },Locality.of_pos (start_pos 1) pos_end) )}
| _1 = rule_content _2 = error
    {    ( raise (ExceptionDefn.Syntax_Error (add_pos 2 "rule rate expected")) )}

variable_declaration:
  _1 = LABEL _2 = annot _3 = alg_expr
    {                         ( let (v,pend,an) = _3 in ((_1,rhs_pos 1),v,pend,an) )}
| _1 = ID _2 = annot _3 = alg_expr
    {                      ( let (v,pend,an) = _3 in ((_1,rhs_pos 1),v,pend,an) )}
| _1 = LABEL _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 3 ("Illegal definition of variable '"^_1^"'"))) )}
| _1 = ID _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 3 ("Illegal definition of variable '"^_1^"'"))) )}
| _1 = error
    {    ( raise (ExceptionDefn.Syntax_Error (add_pos 1 ("label expected"))) )}

id_list:
  _1 = ID _2 = annot
    {             ( [ _1,rhs_pos 1 ] )}
| _1 = ID _2 = annot _3 = COMMA _4 = annot _5 = id_list
    {                                 ( (_1,rhs_pos 1) :: _5 )}

init_declaration:
  _1 = alg_expr _2 = pattern
    {    ( let (v,_,_) = _1 in
      let (p,pend,_) = _2 in
      (v,Ast.INIT_MIX (p,Locality.of_pos (start_pos 2) pend)) )}
| _1 = alg_expr _2 = OP_PAR _3 = annot _4 = pattern _5 = CL_PAR _6 = annot
    {    ( let (v,_,_) = _1 in
      let (p,pend,_) = _4 in
      (v,Ast.INIT_MIX (p,Locality.of_pos (start_pos 4) pend)) )}
| _1 = alg_expr _2 = id_list
    {    ( let (v,_,_) = _1 in (v,Ast.INIT_TOK _2) )}
| _1 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 1 "Malformed initial condition")) )}

value_list:
  _1 = STRING _2 = annot
    {                 ([_1, rhs_pos 1])}
| _1 = STRING _2 = annot _3 = value_list
    {                            ((_1,rhs_pos 1)::_3)}

nonempty_print_expr:
  _1 = STRING _2 = annot
    {    ( ([Primitives.Str_pexpr (add_pos 1 _1)],end_pos 1,_2) )}
| _1 = alg_expr_up_to_if
    {    ( let (a,pend,p) = _1 in ([Primitives.Alg_pexpr a],pend,p) )}
| _1 = print_expr_list
    {                    ( _1 )}
| _1 = OP_PAR _2 = annot _3 = print_expr_list _4 = CL_PAR _5 = annot
    {    ( let (v,_,an) = _3 in (v,end_pos 4,an @ _5) )}

print_expr_list:
  _1 = STRING _2 = annot _3 = DOT _4 = annot _5 = nonempty_print_expr
    {    ( let (l,pend,p) = _5 in (Primitives.Str_pexpr (_1, rhs_pos 1)::l,pend,p) )}
| _1 = alg_expr_up_to_if _2 = DOT _3 = annot _4 = nonempty_print_expr
    {    ( let (l,pend,p) = _4 in
      let (v,_,_) = _1 in
      (Primitives.Alg_pexpr v::l,pend,p) )}

print_expr:
  _1 = annot
    {          ( ([],start_pos 1,_1) )}
| _1 = annot _2 = nonempty_print_expr
    {                              ( _2 )}

effect:
  _1 = ASSIGN _2 = annot _3 = ID _4 = annot _5 = alg_expr
    {    ( let (a,pend,p) = _5 in (Ast.UPDATE ((_3,rhs_pos 3),a),pend,p) )}
| _1 = ASSIGN _2 = annot _3 = LABEL _4 = annot _5 = alg_expr
    {    ( let (a,pend,p) = _5 in (Ast.UPDATE ((_3,rhs_pos 3),a),pend,p) )}
| _1 = TRACK _2 = annot _3 = LABEL _4 = annot _5 = boolean _6 = annot
    {    ( (Ast.CFLOWLABEL (_5,(_3,rhs_pos 3)),end_pos 5,_6) )}
| _1 = TRACK _2 = annot _3 = pattern _4 = boolean _5 = annot
    {    ( let (pat,epat,_) = _3 in
      (Ast.CFLOWMIX (_4,(pat,Locality.of_pos (start_pos 3) epat)),end_pos 4, _5) )}
| _1 = FLUX _2 = annot _3 = nonempty_print_expr _4 = boolean _5 = annot
    {    ( let (p,_,_) = _3 in
      ((if _4 then Ast.DIN (Primitives.RELATIVE,p) else Ast.DINOFF p),
       end_pos 4,_5) )}
| _1 = FLUX _2 = annot _3 = nonempty_print_expr _4 = STRING _5 = annot _6 = boolean _7 = annot
    {    ( let (p,_,_) = _3 in
      if _6 && _4 = "absolute" then
        (Ast.DIN (Primitives.ABSOLUTE,p),end_pos 6,_7)
      else if _6 && _4 = "probability" then
        (Ast.DIN (Primitives.PROBABILITY,p),end_pos 6,_7)
      else if _6 && _4 = "relative" then
        (Ast.DIN (Primitives.RELATIVE,p),end_pos 6,_7)
      else raise (ExceptionDefn.Syntax_Error
                    ("Incorrect DIN expression",rhs_pos 4)) )}
| _1 = APPLY _2 = annot _3 = alg_expr _4 = rule_content
    {    ( let (rewrite,_,pend,an) = _4 in
      let (v,_,_) = _3 in
      Ast.APPLY(v,
                ({ Ast.rewrite; Ast.bidirectional = false;
                   Ast.k_def=Alg_expr.const Nbr.zero;Ast.k_un=None;
                   Ast.k_op=None; Ast.k_op_un=None},
                 Locality.of_pos (start_pos 3) pend)),
      pend,an
    )}
| _1 = INTRO _2 = annot _3 = alg_expr _4 = pattern
    {    ( let (m,pend,p) = _4 in
      let (v,_,_) = _3 in
      (Ast.APPLY(v,
                 ({Ast.rewrite =
		   Ast.Edit {Ast.mix=Ast.to_created_mixture m;
                     Ast.delta_token=[];};
		   Ast.bidirectional=false;
                   Ast.k_def=Alg_expr.const Nbr.zero; Ast.k_un=None;
                   Ast.k_op=None; Ast.k_op_un=None},
                  Locality.of_pos (start_pos 4) pend)),
       pend,p) )}
| _1 = INTRO _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 3 "Malformed intervention instruction, I was expecting \
'$ADD alg_expression kappa_expression'")) )}
| _1 = DELETE _2 = annot _3 = alg_expr _4 = pattern
    {    ( let (m,pend,p) = _4 in
      let (v,_,_) = _3 in
      (Ast.APPLY(v,
               ({Ast.rewrite =
		 Ast.Edit {Ast.mix=Ast.to_erased_mixture m;
                   Ast.delta_token=[];};
		 Ast.bidirectional=false;
                 Ast.k_def=Alg_expr.const Nbr.zero; Ast.k_un=None;
                 Ast.k_op=None; Ast.k_op_un=None},
                Locality.of_pos (start_pos 4) pend)),
       pend,p) )}
| _1 = DELETE _2 = annot _3 = error
    {           ( raise (ExceptionDefn.Syntax_Error
                      (add_pos 3 "Malformed intervention instruction, I was \
expecting '$DEL alg_expression kappa_expression'")) )}
| _1 = SNAPSHOT _2 = print_expr
    {                        ( let (s,pend,p) = _2 in (Ast.SNAPSHOT s,pend,p) )}
| _1 = STOP _2 = print_expr
    {                    ( let (s,pend,p) = _2 in (Ast.STOP s,pend,p) )}
| _1 = PRINTF _2 = print_expr _3 = GREATER _4 = print_expr
    {    ( let (f,pend,p) = _4 in let (c,_,_) = _2 in (Ast.PRINT (f,c),pend,p) )}
| _1 = PRINTF _2 = print_expr
    {                      ( let (c,pend,p) = _2 in (Ast.PRINT ([],c),pend,p) )}
| _1 = PLOTENTRY _2 = annot
    {                    ( (Ast.PLOTENTRY,end_pos 1,_2) )}
| _1 = SPECIES_OF _2 = annot _3 = pattern _4 = boolean _5 = annot _6 = GREATER _7 = print_expr
    {    (
      let (file,pend,p) = _7 in
      let (pat,pendp,_) = _3 in
      (Ast.SPECIES_OF (_4,file,(pat, Locality.of_pos (start_pos 3) pendp)),
       pend,p) )}

partial_effect_list:
  _1 = effect _2 = SEMICOLON _3 = annot
    {                           ( let (e,_,_) = _1 in ([e],end_pos 2,_3) )}
| _1 = effect
    {           ( let (e,p,a) = _1 in ([e],p,a) )}
| _1 = effect _2 = SEMICOLON _3 = annot _4 = partial_effect_list
    {    ( let (e,_,_) = _1 in let (l,pend,a) = _4 in (e::l,pend,a) )}

effect_list:
  _1 = OP_PAR _2 = annot _3 = partial_effect_list _4 = CL_PAR _5 = annot
    {                                                  ( _3 )}
| _1 = effect _2 = SEMICOLON _3 = annot
    {                           ( let (e,_,_) = _1 in ([e],end_pos 2,_3) )}
| _1 = effect _2 = SEMICOLON _3 = annot _4 = effect_list
    {    ( let (e,_,_) = _1 in let (l,pend,a) = _4 in (e::l,pend,a) )}

standalone_effect_list:
  _1 = annot _2 = partial_effect_list _3 = EOF
    {                                  ( let (e,_,_) = _2 in e )}
| _1 = error
    {    ( raise (ExceptionDefn.Syntax_Error (add_pos 1 "Problematic effect list")) )}

perturbation_alarm:
  _1 = annot
    {          ( None )}
| _1 = annot _2 = ALARM _3 = annot _4 = nbr _5 = annot
    {                                ( Some _4 )}

perturbation_post:
  
    {    ( (None, Parsing.symbol_start_pos (),[]) )}
| _1 = REPEAT _2 = annot _3 = bool_expr
    {                           ( let (b,pend,p) = _3 in (Some b,pend,p) )}

perturbation_declaration:
  _1 = perturbation_alarm _2 = bool_expr _3 = DO _4 = annot _5 = effect_list _6 = perturbation_post
    {    ( let (pre,_,_) = _2 in
      let (e,_,_) = _5 in
      let (post,_,_) = _6 in
      (_1,Some pre,e,post) )}
| _1 = perturbation_alarm _2 = DO _3 = annot _4 = effect_list _5 = perturbation_post
    {    ( let (e,_,_) = _4 in let (post,_,_) = _5 in (_1,None,e,post) )}

sentence:
  _1 = LABEL _2 = annot _3 = rule
    {    ( add (Ast.RULE(Some (_1, rhs_pos 1),_3)) )}
| _1 = LABEL _2 = annot _3 = EQUAL _4 = annot _5 = alg_expr
    {    ( let (v,_,_) = _5 in add (Ast.DECLARE ((_1,rhs_pos 1),v)) )}
| _1 = rule
    {         ( add (Ast.RULE (None,_1)) )}
| _1 = SIGNATURE _2 = annot _3 = agent
    {                          ( let (a,_,_) = _3 in add (Ast.SIG a) )}
| _1 = SIGNATURE _2 = annot _3 = error
    {    ( raise
        (ExceptionDefn.Syntax_Error (add_pos 3 "Malformed agent signature")) )}
| _1 = TOKEN _2 = annot _3 = ID _4 = annot
    {                         ( add (Ast.TOKENSIG (_3,rhs_pos 3)) )}
| _1 = PLOT _2 = annot _3 = alg_expr
    {                        ( let (v,_,_) = _3 in add (Ast.PLOT v) )}
| _1 = PLOT _2 = annot _3 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 3
                  "Malformed plot instruction, \
an algebraic expression is expected")) )}
| _1 = LET _2 = annot _3 = variable_declaration
    {    ( let (i,v,_,_) = _3 in add (Ast.DECLARE (i,v)) )}
| _1 = OBS _2 = annot _3 = variable_declaration
    {                                   ( let (i,v,_,_) = _3 in add (Ast.OBS (i,v)) )}
| _1 = INIT _2 = annot _3 = init_declaration
    {    ( let (alg,init) = _3 in add (Ast.INIT (alg,init)) )}
| _1 = PERT _2 = perturbation_declaration
    {                                  ( add (Ast.PERT (_2, rhs_pos 2)) )}
| _1 = CONFIG _2 = annot _3 = STRING _4 = annot _5 = value_list
    {    ( add (Ast.CONFIG ((_3,rhs_pos 3),_5)) )}

model_body:
  _1 = sentence _2 = model_body
    {                        ( _2 )}
| _1 = EOF
    {        ( output () )}

model:
  _1 = annot _2 = model_body
    {                     ( _2 )}
| _1 = error
    {    ( raise (ExceptionDefn.Syntax_Error
               (add_pos 1 "Incorrect beginning of sentence")) )}

interactive_command:
  _1 = annot _2 = RUN _3 = annot _4 = SEMICOLON
    {                              ( Ast.RUN (Locality.dummy_annot Alg_expr.FALSE) )}
| _1 = annot _2 = RUN _3 = annot _4 = bool_expr _5 = SEMICOLON
    {                                        ( let (pause,_,_) = _4 in Ast.RUN pause )}
| _1 = annot _2 = effect _3 = SEMICOLON
    {                           ( let (eff,_,_) = _2 in Ast.MODIFY [eff] )}
| _1 = annot _2 = EOF
    {              ( Ast.QUIT )}
| _1 = error
    {    ( raise (ExceptionDefn.Syntax_Error (add_pos 1 "Unrecognized command")) )}

%%
