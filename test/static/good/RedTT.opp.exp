%{
  open RedTT_Core
  open TmUtil
  open RedBasis
  open Bwd
  open BwdNotation
  module E = ML
  module R = ResEnv

  let locate loc con =
    E.{con; span = Some loc}

  let atom_to_econ a =
    if a = "_" then E.Hope else E.Var {name = a; ushift = 0}

  let lost_eterm e : E.eterm =
    E.{con = e; span = None}

  let atom_to_lost_eterm a : E.eterm =
    lost_eterm (atom_to_econ a)

  let atom_to_lost_frame a : E.frame =
    E.App (atom_to_lost_eterm a)

  let lost_frame e : E.frame =
    E.App (lost_eterm e)

  let spine_to_econ (e, es) =
    match es with
    | [] -> e
    | _ -> E.Cut (lost_eterm e, es)
%}
%start mltoplevel
%token AST
%token AT
%token <string> ATOM
%token BACKTICK
%token BANG
%token BEGIN
%token BOUNDARY
%token BOX
%token CAP
%token CARET
%token CHECK
%token COE
%token COLON
%token COM
%token COMMA
%token COMP
%token DATA
%token DEBUG
%token DEF
%token DIM
%token DOT
%token ELIM
%token END
%token EOF
%token EQUALS
%token FST
%token FUN
%token HASH
%token HCOM
%token <string option> HOLE_NAME
%token <string list> IMPORT
%token IN
%token INTRO
%token KAN
%token LAM
%token LBR
%token LET
%token LGL
%token LLGL
%token LPR
%token LSQ
%token LTR
%token META
%token NORMALIZE
%token <int> NUMERAL
%token OPAQUE
%token PAIR
%token PIPE
%token PRE
%token PRINT
%token PRIVATE
%token PUBLIC
%token QUIT
%token RBR
%token REFL
%token RGL
%token RIGHT_ARROW
%token RIGHT_TACK
%token RPR
%token RRGL
%token RSQ
%token RTR
%token SEMI
%token SND
%token <string> STRING
%token TIMES
%token TYPE
%token UNIV
%token V
%token VIN
%token VPROJ
%token WHERE
%token WITH
%type <ML.mlcmd ML.info> mltoplevel
%%

option_PIPE_:
  
    {    ( None )} [@name none_PIPE]
| x = PIPE
    {    ( Some x )} [@name some_PIPE]

option_located_atomic__:
  
    {    ( None )} [@name none_located_atomic_]
| x = located_atomic_
    {    ( Some x )} [@name some_located_atomic_]

option_preceded_COLON_univ_spec__:
  
    {    ( None )} [@name none_preceded_COLON_univ_spec_]
| _1 = COLON x = univ_spec
    {let x =     ( x ) in
    ( Some x )} [@name some_preceded_COLON_univ_spec_]

option_preceded_IN_located_econ___:
  
    {    ( None )} [@name none_preceded_IN_located_econ__]
| _1 = IN x = located_econ_
    {let x =     ( x ) in
    ( Some x )} [@name some_preceded_IN_located_econ__]

loption_pipe_block_eface__:
  
    {    ( [] )} [@name none_pipe_block_eface_]
| x = pipe_block_eface_
    {    ( x )} [@name some_pipe_block_eface_]

loption_separated_nonempty_list_COMMA_mlval__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_mlval_]
| x = separated_nonempty_list_COMMA_mlval_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_mlval_]

loption_separated_nonempty_list_PIPE_eclause__:
  
    {    ( [] )} [@name none_separated_nonempty_list_PIPE_eclause_]
| x = separated_nonempty_list_PIPE_eclause_
    {    ( x )} [@name some_separated_nonempty_list_PIPE_eclause_]

loption_separated_nonempty_list_PIPE_econstr__:
  
    {    ( [] )} [@name none_separated_nonempty_list_PIPE_econstr_]
| x = separated_nonempty_list_PIPE_econstr_
    {    ( x )} [@name some_separated_nonempty_list_PIPE_econstr_]

loption_separated_nonempty_list_PIPE_eface__:
  
    {    ( [] )} [@name none_separated_nonempty_list_PIPE_eface_]
| x = separated_nonempty_list_PIPE_eface_
    {    ( x )} [@name some_separated_nonempty_list_PIPE_eface_]

loption_separated_nonempty_list_PIPE_located_econ___:
  
    {    ( [] )} [@name none_separated_nonempty_list_PIPE_located_econ__]
| x = separated_nonempty_list_PIPE_located_econ__
    {    ( x )} [@name some_separated_nonempty_list_PIPE_located_econ__]

list_ATOM_:
  
    {    ( [] )} [@name nil_ATOM]
| x = ATOM xs = list_ATOM_
    {    ( x :: xs )} [@name cons_ATOM]

list_einvpat_:
  
    {    ( [] )} [@name nil_einvpat]
| x = einvpat xs = list_einvpat_
    {    ( x :: xs )} [@name cons_einvpat]

list_epatbind_:
  
    {    ( [] )} [@name nil_epatbind]
| x = epatbind xs = list_epatbind_
    {    ( x :: xs )} [@name cons_epatbind]

list_etele_cell_:
  
    {    ( [] )} [@name nil_etele_cell]
| x = etele_cell xs = list_etele_cell_
    {    ( x :: xs )} [@name cons_etele_cell]

list_face_dimbind_tm___:
  
    {    ( [] )} [@name nil_face_dimbind_tm__]
| x = face_dimbind_tm__ xs = list_face_dimbind_tm___
    {    ( x :: xs )} [@name cons_face_dimbind_tm__]

list_face_tm__:
  
    {    ( [] )} [@name nil_face_tm_]
| x = face_tm_ xs = list_face_tm__
    {    ( x :: xs )} [@name cons_face_tm_]

list_framic_:
  
    {    ( [] )} [@name nil_framic]
| x = framic xs = list_framic_
    {    ( x :: xs )} [@name cons_framic]

list_tm_:
  
    {    ( [] )} [@name nil_tm]
| x = tm xs = list_tm_
    {    ( x :: xs )} [@name cons_tm]

nonempty_list_ATOM_:
  x = ATOM
    {    ( [ x ] )} [@name one_ATOM]
| x = ATOM xs = nonempty_list_ATOM_
    {    ( x :: xs )} [@name more_ATOM]

nonempty_list_etele_cell_:
  x = etele_cell
    {    ( [ x ] )} [@name one_etele_cell]
| x = etele_cell xs = nonempty_list_etele_cell_
    {    ( x :: xs )} [@name more_etele_cell]

separated_nonempty_list_COMMA_einvpat_:
  x = einvpat
    {    ( [ x ] )} [@name one_COMMA_einvpat]
| x = einvpat _2 = COMMA xs = separated_nonempty_list_COMMA_einvpat_
    {    ( x :: xs )} [@name more_COMMA_einvpat]

separated_nonempty_list_COMMA_located_econ__:
  x = located_econ_
    {    ( [ x ] )} [@name one_COMMA_located_econ_]
| x = located_econ_ _2 = COMMA xs = separated_nonempty_list_COMMA_located_econ__
    {    ( x :: xs )} [@name more_COMMA_located_econ_]

separated_nonempty_list_COMMA_mlval_:
  x = mlval
    {    ( [ x ] )} [@name one_COMMA_mlval]
| x = mlval _2 = COMMA xs = separated_nonempty_list_COMMA_mlval_
    {    ( x :: xs )} [@name more_COMMA_mlval]

separated_nonempty_list_PIPE_eclause_:
  x = eclause
    {    ( [ x ] )} [@name one_PIPE_eclause]
| x = eclause _2 = PIPE xs = separated_nonempty_list_PIPE_eclause_
    {    ( x :: xs )} [@name more_PIPE_eclause]

separated_nonempty_list_PIPE_ecofib0_:
  x = ecofib0
    {    ( [ x ] )} [@name one_PIPE_ecofib0]
| x = ecofib0 _2 = PIPE xs = separated_nonempty_list_PIPE_ecofib0_
    {    ( x :: xs )} [@name more_PIPE_ecofib0]

separated_nonempty_list_PIPE_econstr_:
  x = econstr
    {    ( [ x ] )} [@name one_PIPE_econstr]
| x = econstr _2 = PIPE xs = separated_nonempty_list_PIPE_econstr_
    {    ( x :: xs )} [@name more_PIPE_econstr]

separated_nonempty_list_PIPE_eface_:
  x = eface
    {    ( [ x ] )} [@name one_PIPE_eface]
| x = eface _2 = PIPE xs = separated_nonempty_list_PIPE_eface_
    {    ( x :: xs )} [@name more_PIPE_eface]

separated_nonempty_list_PIPE_located_econ__:
  x = located_econ_
    {    ( [ x ] )} [@name one_PIPE_located_econ_]
| x = located_econ_ _2 = PIPE xs = separated_nonempty_list_PIPE_located_econ__
    {    ( x :: xs )} [@name more_PIPE_located_econ_]

located_EOF_:
  e = EOF
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
let _loc = (_startpos, _endpos) in
    ( locate _loc e )}

located_atomic_:
  e = atomic
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
let _loc = (_startpos, _endpos) in
    ( locate _loc e )}

located_atomic_mlcmd_:
  e = atomic_mlcmd
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
let _loc = (_startpos, _endpos) in
    ( locate _loc e )}

located_atomoid_econ_:
  e = atomoid_econ
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
let _loc = (_startpos, _endpos) in
    ( locate _loc e )}

located_econ_:
  e = econ
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
let _loc = (_startpos, _endpos) in
    ( locate _loc e )}

located_edimension_:
  e = edimension
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
let _loc = (_startpos, _endpos) in
    ( locate _loc e )}

located_spine_con_:
  e = spine_con
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
let _loc = (_startpos, _endpos) in
    ( locate _loc e )}

edata_params:
  params = nonempty_list_etele_cell_ _2 = RIGHT_TACK
    {    ( params )}
| 
    {    ( [] )}

univ_spec:
  _1 = TYPE k = kind
    {    ( (k, `Const 0) )}
| _1 = TYPE k = kind _3 = CARET l = NUMERAL
    {    ( (k, `Const l) )}

debug_filter:
  
    {    ( `All )}
| a = ATOM
    {    ( match a with
      | "all" -> `All
      | "constraints" -> `Constraints
      | "unsolved" -> `Unsolved
      | _ -> failwith "Invalid debug filter: try 'all' or 'constraints' or 'unsolved'" )}

eproj:
  _1 = DOT _2 = FST
    {    ( E.Fst )}
| _1 = DOT _2 = SND
    {    ( E.Snd )}
| _1 = DOT _2 = VPROJ
    {    ( E.VProj )}
| _1 = DOT _2 = CAP
    {    ( E.Cap )}

atom_econ:
  a = ATOM
    {    ( atom_to_econ a )}
| a = ATOM _2 = CARET k = NUMERAL
    {    ( E.Var {name = a; ushift = k} )}

atomoid_econ:
  _1 = BACKTICK t = tm
    {    ( E.Quo t )}
| a = HOLE_NAME
    {    ( E.Hole (a, None) )}
| _1 = HOLE_NAME _2 = LBR e = located_econ_ _4 = RBR
    {    ( E.Guess e )}
| _1 = ELIM scrut = option_located_atomic__ mot = option_preceded_IN_located_econ___ clauses = pipe_block_eclause_
    {    ( match scrut with
    | Some scrut -> E.Elim {mot; scrut; clauses}
    | None -> E.ElimFun {clauses} )}
| spec = univ_spec
    {    ( let k, l = spec in E.Type (k, l) )}
| _1 = LPR _2 = RPR
    {    ( E.Tuple [] )}
| _1 = LPR e = econ _3 = RPR
    {    ( e )}
| _1 = LPR e = located_econ_ _3 = COMMA es = separated_nonempty_list_COMMA_located_econ__ _5 = RPR
    {    ( E.Tuple (e :: es) )}
| _1 = REFL
    {    ( E.Refl )}
| n = NUMERAL
    {    ( E.Num n )}
| _1 = LTR c = mlcmd _3 = RTR
    {    ( E.RunML c )}

atomic:
  e = atom_econ
    {    ( e )}
| e = atomoid_econ
    {    ( e )}

framoid:
  e = located_atomoid_econ_
    {    ( E.App e )}
| p = eproj
    {    ( p )}

framic:
  e = located_atomic_
    {    ( E.App e )}
| p = eproj
    {    ( p )}

app_proj_spine:
  atoms = nonempty_list_ATOM_
    {    ( let head, tail = ListUtil.split_head atoms in
      atom_to_econ head, List.map atom_to_lost_frame tail )}
| atoms = nonempty_list_ATOM_ p = framoid fs = list_framic_
    {    ( let head, medium = ListUtil.split_head atoms in
      atom_to_econ head, List.concat [List.map atom_to_lost_frame medium; [p]; fs] )}
| atoms = nonempty_list_ATOM_ _2 = CARET k = NUMERAL fs = list_framic_
    {    ( let atoms, last_atom = ListUtil.split_last atoms in
      let econs = List.append (List.map atom_to_econ atoms) [E.Var {name = last_atom; ushift = k}] in
      let head_econ, middle_econs = ListUtil.split_head econs in
      head_econ, List.append (List.map lost_frame middle_econs) fs )}
| e = atomoid_econ fs = list_framic_
    {    ( e, fs )}

spine_con:
  ap = app_proj_spine
    {    ( spine_to_econ ap )}
| _1 = LSQ dims = nonempty_list_ATOM_ _3 = RSQ ty = located_econ_ sys = pipe_block_eface_
    {    ( E.Ext (dims, ty, sys))}
| _1 = COMP r0 = located_atomic_ r1 = located_atomic_ cap = located_atomic_ sys = pipe_block_eface_
    {    ( E.HCom {r = r0; r' = r1; cap; sys})}
| _1 = COMP r0 = located_atomic_ r1 = located_atomic_ cap = located_atomic_ _5 = IN fam = located_econ_ sys = pipe_block_eface_
    {    ( E.Com {r = r0; r' = r1; fam; cap; sys})}
| _1 = V x = ATOM ty0 = located_atomic_ ty1 = located_atomic_ equiv = located_atomic_
    {    ( E.V {x; ty0; ty1; equiv} )}
| _1 = BOX cap = located_atomic_ sys = pipe_block_located_econ__
    {    ( E.Box {cap; sys})}

pipe_block_eclause_:
  _1 = WITH _1_inlined1 = option_PIPE_ xs = loption_separated_nonempty_list_PIPE_eclause__ _3 = END
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}
| _1 = LSQ _1_inlined1 = option_PIPE_ xs = loption_separated_nonempty_list_PIPE_eclause__ _3 = RSQ
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}

pipe_block_eface_:
  _1 = WITH _1_inlined1 = option_PIPE_ xs = loption_separated_nonempty_list_PIPE_eface__ _3 = END
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}
| _1 = LSQ _1_inlined1 = option_PIPE_ xs = loption_separated_nonempty_list_PIPE_eface__ _3 = RSQ
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}

pipe_block_located_econ__:
  _1 = WITH _1_inlined1 = option_PIPE_ xs = loption_separated_nonempty_list_PIPE_located_econ___ _3 = END
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}
| _1 = LSQ _1_inlined1 = option_PIPE_ xs = loption_separated_nonempty_list_PIPE_located_econ___ _3 = RSQ
    {let x =
  let x =
    let x =     ( xs ) in
        ( x )
  in
      ( x )
in
    ( x )}

econ:
  e = spine_con
    {    ( e )}
| a = HOLE_NAME _2 = SEMI e = located_econ_
    {    ( E.Hole (a, Some e) )}
| _1 = LAM xs = list_einvpat_ _3 = RIGHT_ARROW e = located_econ_
    {    ( E.Lam (xs, e) )}
| _1 = LET pat = einvpat sch = escheme _4 = EQUALS tm = located_econ_ _6 = IN body = located_econ_
    {    ( E.Let {pat; sch = sch; tm; body} )}
| _1 = COE r0 = located_atomic_ r1 = located_atomic_ tm = located_atomic_ _5 = IN fam = located_econ_
    {    ( E.Coe {r = r0; r' = r1; fam; tm} )}
| tele = nonempty_list_etele_cell_ _2 = RIGHT_ARROW cod = located_econ_
    {    ( E.Pi (List.flatten tele, cod) )}
| tele = nonempty_list_etele_cell_ _1 = TIMES cod = located_econ_
    {let _2 =     () in
    ( E.Sg (List.flatten tele, cod) )}
| tele = nonempty_list_etele_cell_ _1 = AST cod = located_econ_
    {let _2 =     () in
    ( E.Sg (List.flatten tele, cod) )}
| dom = located_spine_con_ _2 = RIGHT_ARROW cod = located_econ_
    {    ( E.Pi ([`Ty ("_", dom)], cod) )}
| dom = located_spine_con_ _1 = TIMES cod = located_econ_
    {let _2 =     () in
    ( E.Sg ([`Ty ("_", dom)], cod) )}
| dom = located_spine_con_ _1 = AST cod = located_econ_
    {let _2 =     () in
    ( E.Sg ([`Ty ("_", dom)], cod) )}

eclause:
  lbl = ATOM pbinds = list_epatbind_ _3 = RIGHT_ARROW bdy = located_econ_
    {    ( `Con (lbl, pbinds, bdy) )}
| _1 = AST _2 = RIGHT_ARROW bdy = located_econ_
    {    ( `All bdy )}

epatbind:
  x = einvpat
    {    ( `Bind x )}
| _1 = LPR x = einvpat _3 = RIGHT_ARROW ih = einvpat _5 = RPR
    {    ( `BindIH (x, ih) )}

einvpat:
  x = ATOM
    {    ( `Var (`User x) )}
| _1 = AST
    {    ( `Wildcard )}
| _1 = LPR xs = separated_nonempty_list_COMMA_einvpat_ _3 = RPR
    {    ( let xs, x = ListUtil.split_last xs in
      List.fold_right (fun x xs -> `SplitAs (x, xs)) xs x )}
| _1 = LSQ x = einvpat _3 = COMMA _4 = RSQ
    {    ( `Bite x )}
| _1 = LSQ _2 = COMMA _3 = RSQ
    {    ( `Split )}

edimension:
  n = NUMERAL
    {    ( E.Num n )}
| a = ATOM
    {    ( atom_to_econ a )}
| _1 = LPR d = edimension _3 = RPR
    {    ( d )}

eequation:
  r0 = located_edimension_ _2 = EQUALS r1 = located_edimension_
    {    ( r0, r1 )}

ecofib0:
  xi = eequation
    {    ( [xi] )}
| _1 = BOUNDARY _2 = LSQ xs = nonempty_list_ATOM_ _4 = RSQ
    {let _loc_xs_ = (_startpos_xs_, _endpos_xs_) in
    ( let xi x =
        let pos = _loc_xs_ in
        let r = locate pos @@ E.Var {name = x; ushift = 0} in
        [r, locate pos (E.Num 0);
         r, locate pos (E.Num 1)]
      in
      List.flatten @@ List.map xi xs )}
| _1 = LPR e = ecofib _3 = RPR
    {    ( e )}

ecofib:
  phi = separated_nonempty_list_PIPE_ecofib0_
    {    ( List.flatten phi )}

eface:
  phi = ecofib _2 = RIGHT_ARROW e = located_econ_
    {    ( phi, e )}
| phi = ecofib0 xs = nonempty_list_ATOM_ _3 = RIGHT_ARROW e = located_econ_
    {    ( phi, locate (_startpos_xs_, _endpos_e_) (E.Lam (List.map (fun x -> `Var (`User x)) xs, e)) )}

escheme:
  tele = list_etele_cell_ _2 = COLON cod = located_econ_
    {    ( (List.flatten tele, cod) )}
| tele = list_etele_cell_
    {    ( (List.flatten tele, locate (_endpos_tele_, _endpos_tele_) E.Hope) )}

etele_cell:
  _1 = LPR xs = nonempty_list_ATOM_ _3 = COLON ty = located_econ_ _5 = RPR
    {    ( List.map (fun x -> `Ty (x, ty)) xs )}
| _1 = LPR xs = nonempty_list_ATOM_ _3 = COLON _4 = DIM _5 = RPR
    {    ( List.map (fun x -> `I x) xs )}
| _1 = DIM
    {    ( [`I "_"] )}

econstr:
  clbl = ATOM specs = list_etele_cell_ boundary = loption_pipe_block_eface__
    {  ( clbl, E.EConstr {specs = List.flatten specs; boundary} )}

data_modifiers:
  _1 = PRIVATE
    {    ( `Private )}
| 
    {    ( `Public )}

def_modifiers:
  _1 = OPAQUE
    {    ( `Public, `Opaque )}
| _1 = PRIVATE
    {    ( `Private, `Transparent )}
| _1 = OPAQUE _2 = PRIVATE
    {    ( `Private, `Opaque )}
| _1 = PRIVATE _2 = OPAQUE
    {    ( `Private, `Opaque )}
| 
    {    ( `Public, `Transparent )}

data_decl:
  _1 = DATA params = edata_params dlbl = ATOM univ_spec = option_preceded_COLON_univ_spec__ _5 = WHERE _6 = option_PIPE_ xs = loption_separated_nonempty_list_PIPE_econstr__
    {let constrs =     ( xs ) in
    ( let kind, lvl =
        match univ_spec with
        | Some (k, l) -> k, l
        | None -> `Kan, `Const 0
      in
      let params = List.flatten params in
      dlbl, E.EDesc {params; constrs; kind; lvl} )}

mltoplevel:
  _1 = META _2 = LTR _3 = LET a = ATOM _5 = EQUALS cmd = mlcmd _7 = RTR rest = mltoplevel
    {    ( {rest with con = E.MlBind (cmd, `User a, rest.con)} )}
| _1 = META _2 = LTR c = mlcmd _4 = RTR rest = mltoplevel
    {    ( {rest with con = E.MlBind (c, `Gen (Name.fresh ()), rest.con)} )}
| modifiers = def_modifiers _2 = DEF a = ATOM sch = escheme _5 = EQUALS tm = located_econ_ rest = mltoplevel
    {    ( let name = E.MlRef (Name.named (Some a)) in
      let visibility, opacity = modifiers in
      {rest with con = MlBind (E.define ~visibility ~name ~opacity ~scheme:sch ~tm, `User a, rest.con)} )}
| visibility = data_modifiers decl = data_decl rest = mltoplevel
    {    ( let a, desc = decl in
      let name = E.MlRef (Name.named (Some a)) in
      {rest with con = MlBind (E.MlDeclData {visibility; name; desc}, `User a, rest.con)} )}
| path = IMPORT rest = mltoplevel
    {    ( {rest with con = E.mlbind (E.MlImport (`Private, path)) @@ fun _ -> rest.con} )}
| _1 = PUBLIC path = IMPORT rest = mltoplevel
    {    ( {rest with con = E.mlbind (E.MlImport (`Public, path)) @@ fun _ -> rest.con} )}
| _1 = QUIT rest = mltoplevel
    {    ( {rest with con = E.MlRet (E.MlTuple [])} )}
| x = located_EOF_
    {    ( {x with con = E.MlRet (E.MlTuple [])} )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( raise @@ ParseError.E (_startpos, _endpos) )}

mlcmd:
  _1 = LET a = ATOM _3 = EQUALS cmd = mlcmd _5 = IN rest = mlcmd
    {    ( E.MlBind (cmd, `User a, rest) )}
| c = atomic_mlcmd _2 = SEMI rest = mlcmd
    {    ( E.MlBind (c, `Gen (Name.fresh ()), rest) )}
| _1 = FUN a = ATOM _3 = RIGHT_ARROW c = mlcmd
    {    ( E.MlLam (`User a, c) )}
| _1 = CHECK tm = mlval _3 = COLON ty = mlval
    {    ( E.MlCheck {ty; tm} )}
| c = atomic_mlcmd v = mlval
    {    ( E.MlApp (c, v) )}
| c = atomic_mlcmd
    {    ( c )}
| _1 = DEBUG f = debug_filter
    {    ( E.MlDebug f )}

atomic_mlcmd:
  _1 = LPR c = mlcmd _3 = RPR
    {    ( c )}
| _1 = BEGIN c = mlcmd _3 = END
    {    ( c )}
| _1 = BANG v = mlval
    {    ( E.MlUnleash v )}
| _1 = PRINT c = located_atomic_mlcmd_
    {    ( let open E in
      mlbind c.con @@ fun x ->
      MlPrint {c with con = x} )}
| _1 = NORMALIZE c = atomic_mlcmd
    {    ( E.mlbind c @@ fun x -> E.MlNormalize x )}
| _1 = LLGL visibility = data_modifiers decl = data_decl _4 = RRGL
    {    ( let name, desc = decl in
      let name = E.MlRef (Name.named (Some name)) in
      E.MlDeclData {visibility; name; desc} )}
| _1 = LLGL modifiers = def_modifiers _3 = DEF a = ATOM sch = escheme _6 = EQUALS tm = located_econ_ _8 = RRGL
    {    ( let name = E.MlRef (Name.named (Some a)) in
      let visibility, opacity = modifiers in
      E.define ~name ~visibility ~opacity ~scheme:sch ~tm )}
| _1 = LLGL e = located_econ_ _3 = RRGL
    {    ( E.MlElab e )}
| v = mlval
    {    ( E.MlRet v )}

mlval:
  _1 = LGL xs = loption_separated_nonempty_list_COMMA_mlval__ _3 = RGL
    {let vs =     ( xs ) in
    ( E.MlTuple vs )}
| _1 = LBR c = mlcmd _3 = RBR
    {    ( E.MlThunk c )}
| s = STRING
    {    ( E.MlString s )}
| a = ATOM
    {    ( E.MlVar (`User a) )}

tele_with_env:
  dom = tm rest = tele_with_env
    {    ( fun env ->
      let env' = R.bind "_" env in
      let tele, env'' = rest env' in
      TCons (None, dom env, tele), env'' )}
| _1 = LSQ x = ATOM _3 = COLON dom = tm _5 = RSQ rest = tele_with_env
    {    ( fun env ->
      let env' = R.bind x env in
      let tele, env'' = rest env' in
      TCons (Some x, dom env, tele), env'' )}
| cod = tm
    {    ( fun env ->
      TEnd (cod env), env )}

tele:
  tl = tele_with_env
    {    ( fun env ->
      fst @@ tl env)}

face_dimbind_tm__:
  _1 = LSQ r0 = tm _3 = EQUALS r1 = tm e = dimbind_tm_ _6 = RSQ
    {    ( fun env ->
      r0 env, r1 env, e env )}

face_tm_:
  _1 = LSQ r0 = tm _3 = EQUALS r1 = tm e = tm _6 = RSQ
    {    ( fun env ->
      r0 env, r1 env, e env )}

dimbind_tm_:
  _1 = LGL x = ATOM _3 = RGL e = tm
    {    ( fun env ->
      Tm.B (Some x, e @@ R.bind x env) )}

multibind_constrained_:
  e = constrained
    {    ( fun env ->
      MBEnd (e env) )}
| _1 = LSQ x = ATOM _3 = RSQ mb = multibind_constrained_
    {    ( fun env ->
      MBConsVar (Some x, mb @@ R.bind x env) )}
| _1 = LGL xs = list_ATOM_ _3 = RGL mb = multibind_constrained_
    {    ( fun env ->
      MBConsDims (List.map (fun x -> Some x) xs, mb @@ R.bindn xs env) )}

multibind_tm_:
  e = tm
    {    ( fun env ->
      MBEnd (e env) )}
| _1 = LSQ x = ATOM _3 = RSQ mb = multibind_tm_
    {    ( fun env ->
      MBConsVar (Some x, mb @@ R.bind x env) )}
| _1 = LGL xs = list_ATOM_ _3 = RGL mb = multibind_tm_
    {    ( fun env ->
      MBConsDims (List.map (fun x -> Some x) xs, mb @@ R.bindn xs env) )}

elist_face_dimbind_tm___:
  xs = list_face_dimbind_tm___
    {    ( fun env ->
      List.map (fun x -> x env) xs)}

elist_face_tm__:
  xs = list_face_tm__
    {    ( fun env ->
      List.map (fun x -> x env) xs)}

elist_tm_:
  xs = list_tm_
    {    ( fun env ->
      List.map (fun x -> x env) xs)}

constrained:
  ty = tm sys = elist_face_tm__
    {    ( fun env ->
      ty env, sys env )}

kind:
  _1 = KAN
    {    ( `Kan )}
| _1 = PRE
    {    ( `Pre )}
| 
    {    ( `Kan )}

tm:
  i = NUMERAL
    {let _endpos = _endpos_i_ in
let _startpos = _startpos_i_ in
    ( fun _env ->
      make_dim_const _startpos _endpos i )}
| _1 = LPR _2 = UNIV k = kind i = NUMERAL _5 = RPR
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( fun _env ->
      make_node _startpos _endpos @@
      Tm.Univ {kind = k; lvl = `Const i} )}
| _1 = LPR _2 = V r = tm ty0 = tm ty1 = tm equiv = tm _7 = RPR
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      make_node _startpos _endpos @@
      Tm.V {r = r env; ty0 = ty0 env; ty1 = ty1 env; equiv = equiv env} )}
| _1 = LPR _2 = VIN r = tm tm0 = tm tm1 = tm _6 = RPR
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      make_node _startpos _endpos @@
      Tm.VIn {r = r env; tm0 = tm0 env; tm1 = tm1 env} )}
| _1 = LPR _2 = RIGHT_ARROW tele = tele _4 = RPR
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      pi_from_tele (Some (_startpos, _endpos)) @@ tele env )}
| _1 = LPR _1_inlined1 = TIMES tele = tele _4 = RPR
    {let _2 =     () in
let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      sg_from_tele (Some (_startpos, _endpos)) @@ tele env )}
| _1 = LPR _1_inlined1 = AST tele = tele _4 = RPR
    {let _2 =     () in
let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      sg_from_tele (Some (_startpos, _endpos)) @@ tele env )}
| _1 = LPR _2 = HASH mb = multibind_constrained_ _4 = RPR
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      ext_from_multibind _startpos _endpos @@ mb env )}
| _1 = LPR _2 = LAM mb = multibind_tm_ _4 = RPR
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      lam_from_multibind (Some (_startpos, _endpos)) @@ mb env )}
| _1 = LPR _2 = PAIR e0 = tm e1 = tm _5 = RPR
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      make_node _startpos _endpos @@
      Tm.Cons (e0 env, e1 env) )}
| _1 = LPR _2 = DATA dlbl = ATOM _4 = RPR
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      make_node _startpos _endpos @@
      let alpha = R.get_name dlbl env in
      Tm.Data {lbl = alpha; params = []} )}
| _1 = LPR dlbl = ATOM _3 = DOT _4 = INTRO clbl = ATOM es = elist_tm_ _7 = RPR
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      make_node _startpos _endpos @@
      let alpha = R.get_name dlbl env in
      Tm.Intro (alpha, clbl, [], es env) )}
| e = cmd
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
    ( fun env ->
      make_node _startpos _endpos @@
      Tm.Up (e env) )}
| _1 = LPR _2 = LET _3 = LSQ x = ATOM e0 = cmd _6 = RSQ e1 = tm _8 = RPR
    {let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
    ( fun env ->
      make_node _startpos _endpos @@
      Tm.Let (e0 env, Tm.B (Some x, e1 @@ R.bind x env)))}

head:
  a = ATOM _2 = CARET k = NUMERAL
    {    ( fun env ->
      let x = R.get_name a env in
      Tm.Var {name = x; twin = `Only; ushift = k} )}
| a = ATOM
    {    ( fun env ->
      match R.get a env with
      | `Ix i -> Tm.Ix (i, `Only)
      | `Name x -> Tm.Var {name = x; twin = `Only; ushift = 0} )}
| _1 = LPR _2 = HCOM r0 = tm r1 = tm ty = tm cap = tm sys = elist_face_dimbind_tm___ _8 = RPR
    {    ( fun env ->
      Tm.HCom {r = r0 env; r' = r1 env; ty = ty env; cap = cap env; sys = sys env} )}
| _1 = LPR _2 = COM r0 = tm r1 = tm ty = dimbind_tm_ cap = tm sys = elist_face_dimbind_tm___ _8 = RPR
    {    ( fun env ->
      Tm.Com {r = r0 env; r' = r1 env; ty = ty env; cap = cap env; sys = sys env} )}
| _1 = LPR _2 = COE r0 = tm r1 = tm ty = dimbind_tm_ tm = tm _7 = RPR
    {    ( fun env ->
      Tm.Coe {r = r0 env; r' = r1 env; ty = ty env; tm = tm env} )}
| _1 = LPR _2 = COLON ty = tm tm = tm _5 = RPR
    {    ( fun env ->
      Tm.Down {ty = ty env; tm = tm env} )}

cmd:
  c = cut
    {    ( fun env ->
      let hd, sp = c env in
      hd, Bwd.to_list sp )}

cut:
  hd = head
    {    ( fun env ->
      hd env, Emp )}
| _1 = LPR _2 = FST e = cut _4 = RPR
    {    ( fun env ->
      let hd, fs = e env in
      hd, fs #< Tm.Fst )}
| _1 = LPR _2 = SND e = cut _4 = RPR
    {    ( fun env ->
      let hd, fs = e env in
      hd, fs #< Tm.Snd )}
| _1 = LPR e = cut arg0 = tm rest = elist_tm_ _5 = RPR
    {    ( fun env ->
      let hd, fs = e env in
      let args = arg0 env :: rest env in
      hd, (fs <>< List.map (fun t -> Tm.FunApp t) args) )}
| _1 = LPR _2 = AT e = cut args = elist_tm_ _5 = RPR
    {    ( fun env ->
      let hd, fs = e env in
      hd, fs #< (Tm.ExtApp (args env)) )}
| _1 = LPR _2 = VPROJ r = tm e = cut ty0 = tm ty1 = tm func = tm _8 = RPR
    {    ( fun env ->
      let hd, fs = e env in
      hd, fs #< (Tm.VProj {r = r env; ty0 = ty0 env; ty1 = ty1 env; func = func env}))}

%%
