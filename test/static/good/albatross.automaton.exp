State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On KWuse shift to state 1
-- On use_block shift to state 13
-- On file shift to state 422
-- On decls shift to state 423
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production decls ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWuse KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production decls ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
## Known stack suffix:
## KWuse
## LR(1) items:
use_block -> KWuse . module_list KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LIDENTIFIER shift to state 2
-- On one_module shift to state 3
-- On module_list shift to state 11
-- On dotted_id_list shift to state 8
## Reductions:

State 2:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
dotted_id_list -> LIDENTIFIER . [ SEMICOL NEWLINE KWend DOT ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE KWend DOT
--   reduce production dotted_id_list -> LIDENTIFIER

State 3:
## Known stack suffix:
## one_module
## LR(1) items:
module_list -> one_module . [ KWend ]
module_list -> one_module . separator module_list [ KWend ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 6
## Reductions:
-- On KWend
--   reduce production module_list -> one_module

State 4:
## Known stack suffix:
## SEMICOL
## LR(1) items:
separator -> SEMICOL . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Reductions:
-- On USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult
--   reduce production separator -> SEMICOL

State 5:
## Known stack suffix:
## NEWLINE
## LR(1) items:
separator -> NEWLINE . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Reductions:
-- On USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult
--   reduce production separator -> NEWLINE

State 6:
## Known stack suffix:
## one_module separator
## LR(1) items:
module_list -> one_module separator . module_list [ KWend ]
## Transitions:
-- On LIDENTIFIER shift to state 2
-- On one_module shift to state 3
-- On module_list shift to state 7
-- On dotted_id_list shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## one_module separator module_list
## LR(1) items:
module_list -> one_module separator module_list . [ KWend ]
## Transitions:
## Reductions:
-- On KWend
--   reduce production module_list -> one_module separator module_list

State 8:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ SEMICOL NEWLINE KWend DOT ]
one_module -> dotted_id_list . [ SEMICOL NEWLINE KWend ]
## Transitions:
-- On DOT shift to state 9
## Reductions:
-- On SEMICOL NEWLINE KWend
--   reduce production one_module -> dotted_id_list

State 9:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ SEMICOL NEWLINE KWend DOT ]
## Transitions:
-- On LIDENTIFIER shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## dotted_id_list DOT LIDENTIFIER
## LR(1) items:
dotted_id_list -> dotted_id_list DOT LIDENTIFIER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production dotted_id_list -> dotted_id_list DOT LIDENTIFIER
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production dotted_id_list -> dotted_id_list DOT LIDENTIFIER
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## KWuse module_list
## LR(1) items:
use_block -> KWuse module_list . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## KWuse module_list KWend
## LR(1) items:
use_block -> KWuse module_list KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production use_block -> KWuse module_list KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production use_block -> KWuse module_list KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 13:
## Known stack suffix:
## use_block
## LR(1) items:
file -> use_block . optsemi decls [ # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 15
## Reductions:
-- On UIDENTIFIER NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production optsemi ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production optsemi ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 14:
## Known stack suffix:
## SEMICOL
## LR(1) items:
optsemi -> SEMICOL . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER LBRACKET KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWghost KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER LBRACKET KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWghost KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall #
--   reduce production optsemi -> SEMICOL
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER LBRACKET KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWghost KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production optsemi -> SEMICOL
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 15:
## Known stack suffix:
## use_block optsemi
## LR(1) items:
file -> use_block optsemi . decls [ # ]
## Transitions:
-- On decls shift to state 16
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production decls ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production decls ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 16:
## Known stack suffix:
## use_block optsemi decls
## LR(1) items:
decls -> decls . optsemi decl [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
file -> use_block optsemi decls . [ # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 17
## Reductions:
-- On #
--   reduce production file -> use_block optsemi decls
-- On UIDENTIFIER NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
--   reduce production optsemi ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production file -> use_block optsemi decls
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 17:
## Known stack suffix:
## decls optsemi
## LR(1) items:
decls -> decls optsemi . decl [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On UIDENTIFIER shift to state 18
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWimmutable shift to state 87
-- On KWfalse shift to state 88
-- On KWdeferred shift to state 89
-- On KWcase shift to state 90
-- On KWall shift to state 91
-- On proof_all_expr shift to state 316
-- On nameopconst_info shift to state 317
-- On nameopconst shift to state 368
-- On named_feature shift to state 369
-- On header_mark shift to state 370
-- On formal_generic shift to state 418
-- On featopconst shift to state 386
-- On decl shift to state 419
-- On class_declaration shift to state 420
-- On ass_feat shift to state 421
## Reductions:
-- On KWclass
--   reduce production header_mark ->

State 18:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
formal_generic -> UIDENTIFIER . COLON type_nt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On COLON shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## UIDENTIFIER COLON
## LR(1) items:
formal_generic -> UIDENTIFIER COLON . type_nt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 54
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 20:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
simple_type -> UIDENTIFIER . actual_generics [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On LBRACKET shift to state 21
-- On actual_generics shift to state 53
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production actual_generics ->
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production actual_generics ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
## Known stack suffix:
## LBRACKET
## LR(1) items:
actual_generics -> LBRACKET . type_list RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 49
-- On type_list_min2 shift to state 50
-- On type_list shift to state 51
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 22:
## Known stack suffix:
## LPAREN
## LR(1) items:
elem_type -> LPAREN . type_nt RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
tuple_type -> LPAREN . type_list_min2 RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 38
-- On type_list_min2 shift to state 47
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 23:
## Known stack suffix:
## LBRACKET
## LR(1) items:
list_type -> LBRACKET . elem_type RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 32
-- On dotted_id_list shift to state 36
## Reductions:

State 24:
## Known stack suffix:
## tuple_type
## LR(1) items:
elem_type -> tuple_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production elem_type -> tuple_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production elem_type -> tuple_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 25:
## Known stack suffix:
## star_type
## LR(1) items:
elem_type -> star_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production elem_type -> star_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production elem_type -> star_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
## Known stack suffix:
## simple_type
## LR(1) items:
elem_type -> simple_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production elem_type -> simple_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production elem_type -> simple_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 27:
## Known stack suffix:
## qmark_type
## LR(1) items:
elem_type -> qmark_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production elem_type -> qmark_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production elem_type -> qmark_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 28:
## Known stack suffix:
## path
## LR(1) items:
simple_type -> path . UIDENTIFIER actual_generics [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## path UIDENTIFIER
## LR(1) items:
simple_type -> path UIDENTIFIER . actual_generics [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On LBRACKET shift to state 21
-- On actual_generics shift to state 30
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production actual_generics ->
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production actual_generics ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 30:
## Known stack suffix:
## path UIDENTIFIER actual_generics
## LR(1) items:
simple_type -> path UIDENTIFIER actual_generics . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production simple_type -> path UIDENTIFIER actual_generics
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production simple_type -> path UIDENTIFIER actual_generics
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 31:
## Known stack suffix:
## list_type
## LR(1) items:
elem_type -> list_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production elem_type -> list_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production elem_type -> list_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 32:
## Known stack suffix:
## LBRACKET elem_type
## LR(1) items:
list_type -> LBRACKET elem_type . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
qmark_type -> elem_type . QMARK [ TIMES RBRACKET QMARK ]
star_type -> elem_type . TIMES [ TIMES RBRACKET QMARK ]
## Transitions:
-- On TIMES shift to state 33
-- On RBRACKET shift to state 34
-- On QMARK shift to state 35
## Reductions:

State 33:
## Known stack suffix:
## elem_type TIMES
## LR(1) items:
star_type -> elem_type TIMES . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production star_type -> elem_type TIMES
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production star_type -> elem_type TIMES
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 34:
## Known stack suffix:
## LBRACKET elem_type RBRACKET
## LR(1) items:
list_type -> LBRACKET elem_type RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production list_type -> LBRACKET elem_type RBRACKET
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production list_type -> LBRACKET elem_type RBRACKET
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 35:
## Known stack suffix:
## elem_type QMARK
## LR(1) items:
qmark_type -> elem_type QMARK . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production qmark_type -> elem_type QMARK
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production qmark_type -> elem_type QMARK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 36:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ DOT ]
path -> dotted_id_list . DOT [ UIDENTIFIER ]
## Transitions:
-- On DOT shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ DOT ]
path -> dotted_id_list DOT . [ UIDENTIFIER ]
## Transitions:
-- On LIDENTIFIER shift to state 10
## Reductions:
-- On UIDENTIFIER
--   reduce production path -> dotted_id_list DOT

State 38:
## Known stack suffix:
## LPAREN type_nt
## LR(1) items:
elem_type -> LPAREN type_nt . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
type_list_min2 -> type_nt . COMMA type_nt [ RPAREN ]
type_list_min2 -> type_nt . COMMA type_list_min2 [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 39
-- On COMMA shift to state 40
## Reductions:

State 39:
## Known stack suffix:
## LPAREN type_nt RPAREN
## LR(1) items:
elem_type -> LPAREN type_nt RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production elem_type -> LPAREN type_nt RPAREN
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production elem_type -> LPAREN type_nt RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 40:
## Known stack suffix:
## type_nt COMMA
## LR(1) items:
type_list_min2 -> type_nt COMMA . type_nt [ RPAREN RBRACKET ]
type_list_min2 -> type_nt COMMA . type_list_min2 [ RPAREN RBRACKET ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 41
-- On type_list_min2 shift to state 42
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 41:
## Known stack suffix:
## type_nt COMMA type_nt
## LR(1) items:
type_list_min2 -> type_nt . COMMA type_nt [ RPAREN RBRACKET ]
type_list_min2 -> type_nt COMMA type_nt . [ RPAREN RBRACKET ]
type_list_min2 -> type_nt . COMMA type_list_min2 [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:
-- On RPAREN RBRACKET
--   reduce production type_list_min2 -> type_nt COMMA type_nt

State 42:
## Known stack suffix:
## type_nt COMMA type_list_min2
## LR(1) items:
type_list_min2 -> type_nt COMMA type_list_min2 . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET
--   reduce production type_list_min2 -> type_nt COMMA type_list_min2

State 43:
## Known stack suffix:
## elem_type
## LR(1) items:
arrow_type -> elem_type . ARROW type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
type_nt -> elem_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
-- On ARROW shift to state 44
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN #
--   reduce production type_nt -> elem_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production type_nt -> elem_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 44:
## Known stack suffix:
## elem_type ARROW
## LR(1) items:
arrow_type -> elem_type ARROW . type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 45
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 45:
## Known stack suffix:
## elem_type ARROW type_nt
## LR(1) items:
arrow_type -> elem_type ARROW type_nt . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN #
--   reduce production arrow_type -> elem_type ARROW type_nt
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN
**   There is a tension between
**   (1) reducing production arrow_type -> elem_type ARROW type_nt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 46:
## Known stack suffix:
## arrow_type
## LR(1) items:
type_nt -> arrow_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN #
--   reduce production type_nt -> arrow_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN
**   There is a tension between
**   (1) reducing production type_nt -> arrow_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 47:
## Known stack suffix:
## LPAREN type_list_min2
## LR(1) items:
tuple_type -> LPAREN type_list_min2 . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On RPAREN shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LPAREN type_list_min2 RPAREN
## LR(1) items:
tuple_type -> LPAREN type_list_min2 RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production tuple_type -> LPAREN type_list_min2 RPAREN
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production tuple_type -> LPAREN type_list_min2 RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 49:
## Known stack suffix:
## type_nt
## LR(1) items:
type_list -> type_nt . [ RPAREN RBRACKET ]
type_list_min2 -> type_nt . COMMA type_nt [ RPAREN RBRACKET ]
type_list_min2 -> type_nt . COMMA type_list_min2 [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:
-- On RPAREN RBRACKET
--   reduce production type_list -> type_nt

State 50:
## Known stack suffix:
## type_list_min2
## LR(1) items:
type_list -> type_list_min2 . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET
--   reduce production type_list -> type_list_min2

State 51:
## Known stack suffix:
## LBRACKET type_list
## LR(1) items:
actual_generics -> LBRACKET type_list . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On RBRACKET shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LBRACKET type_list RBRACKET
## LR(1) items:
actual_generics -> LBRACKET type_list RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production actual_generics -> LBRACKET type_list RBRACKET
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production actual_generics -> LBRACKET type_list RBRACKET
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 53:
## Known stack suffix:
## UIDENTIFIER actual_generics
## LR(1) items:
simple_type -> UIDENTIFIER actual_generics . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW #
--   reduce production simple_type -> UIDENTIFIER actual_generics
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW
**   There is a tension between
**   (1) reducing production simple_type -> UIDENTIFIER actual_generics
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 54:
## Known stack suffix:
## UIDENTIFIER COLON type_nt
## LR(1) items:
formal_generic -> UIDENTIFIER COLON type_nt . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production formal_generic -> UIDENTIFIER COLON type_nt
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production formal_generic -> UIDENTIFIER COLON type_nt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 55:
## Known stack suffix:
## NUMBER
## LR(1) items:
featopconst -> NUMBER . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Reductions:
-- On SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON
--   reduce production featopconst -> NUMBER

State 56:
## Known stack suffix:
## LPAREN
## LR(1) items:
featopconst -> LPAREN . operator RPAREN [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
-- On TIMES shift to state 57
-- On ROPERATOR shift to state 58
-- On PLUS shift to state 59
-- On PARENOP shift to state 60
-- On OPERATOR shift to state 61
-- On NOTIN shift to state 62
-- On NEQV shift to state 63
-- On NEQ shift to state 64
-- On MINUS shift to state 65
-- On LT shift to state 66
-- On LE shift to state 67
-- On KWor shift to state 68
-- On KWnot shift to state 69
-- On KWin shift to state 70
-- On KWand shift to state 71
-- On GT shift to state 72
-- On GE shift to state 73
-- On EQV shift to state 74
-- On EQ shift to state 75
-- On DIVIDE shift to state 76
-- On DCOLON shift to state 77
-- On DBAR shift to state 78
-- On DARROW shift to state 79
-- On CARET shift to state 80
-- On BRACKETOP shift to state 81
-- On BAR shift to state 82
-- On operator shift to state 83
## Reductions:

State 57:
## Known stack suffix:
## TIMES
## LR(1) items:
operator -> TIMES . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> TIMES

State 58:
## Known stack suffix:
## ROPERATOR
## LR(1) items:
operator -> ROPERATOR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> ROPERATOR

State 59:
## Known stack suffix:
## PLUS
## LR(1) items:
operator -> PLUS . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> PLUS

State 60:
## Known stack suffix:
## PARENOP
## LR(1) items:
operator -> PARENOP . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> PARENOP

State 61:
## Known stack suffix:
## OPERATOR
## LR(1) items:
operator -> OPERATOR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> OPERATOR

State 62:
## Known stack suffix:
## NOTIN
## LR(1) items:
operator -> NOTIN . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> NOTIN

State 63:
## Known stack suffix:
## NEQV
## LR(1) items:
operator -> NEQV . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> NEQV

State 64:
## Known stack suffix:
## NEQ
## LR(1) items:
operator -> NEQ . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> NEQ

State 65:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUS

State 66:
## Known stack suffix:
## LT
## LR(1) items:
operator -> LT . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> LT

State 67:
## Known stack suffix:
## LE
## LR(1) items:
operator -> LE . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> LE

State 68:
## Known stack suffix:
## KWor
## LR(1) items:
operator -> KWor . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> KWor

State 69:
## Known stack suffix:
## KWnot
## LR(1) items:
operator -> KWnot . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> KWnot

State 70:
## Known stack suffix:
## KWin
## LR(1) items:
operator -> KWin . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> KWin

State 71:
## Known stack suffix:
## KWand
## LR(1) items:
operator -> KWand . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> KWand

State 72:
## Known stack suffix:
## GT
## LR(1) items:
operator -> GT . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> GT

State 73:
## Known stack suffix:
## GE
## LR(1) items:
operator -> GE . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> GE

State 74:
## Known stack suffix:
## EQV
## LR(1) items:
operator -> EQV . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> EQV

State 75:
## Known stack suffix:
## EQ
## LR(1) items:
operator -> EQ . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> EQ

State 76:
## Known stack suffix:
## DIVIDE
## LR(1) items:
operator -> DIVIDE . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> DIVIDE

State 77:
## Known stack suffix:
## DCOLON
## LR(1) items:
operator -> DCOLON . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> DCOLON

State 78:
## Known stack suffix:
## DBAR
## LR(1) items:
operator -> DBAR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> DBAR

State 79:
## Known stack suffix:
## DARROW
## LR(1) items:
operator -> DARROW . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> DARROW

State 80:
## Known stack suffix:
## CARET
## LR(1) items:
operator -> CARET . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> CARET

State 81:
## Known stack suffix:
## BRACKETOP
## LR(1) items:
operator -> BRACKETOP . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> BRACKETOP

State 82:
## Known stack suffix:
## BAR
## LR(1) items:
operator -> BAR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> BAR

State 83:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
featopconst -> LPAREN operator . RPAREN [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
-- On RPAREN shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
featopconst -> LPAREN operator RPAREN . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Reductions:
-- On SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON
--   reduce production featopconst -> LPAREN operator RPAREN

State 85:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
nameopconst -> LIDENTIFIER . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Reductions:
-- On SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON
--   reduce production nameopconst -> LIDENTIFIER

State 86:
## Known stack suffix:
## KWtrue
## LR(1) items:
featopconst -> KWtrue . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Reductions:
-- On SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON
--   reduce production featopconst -> KWtrue

State 87:
## Known stack suffix:
## KWimmutable
## LR(1) items:
header_mark -> KWimmutable . [ KWclass ]
## Transitions:
## Reductions:
-- On KWclass
--   reduce production header_mark -> KWimmutable

State 88:
## Known stack suffix:
## KWfalse
## LR(1) items:
featopconst -> KWfalse . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Reductions:
-- On SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON
--   reduce production featopconst -> KWfalse

State 89:
## Known stack suffix:
## KWdeferred
## LR(1) items:
header_mark -> KWdeferred . [ KWclass ]
## Transitions:
## Reductions:
-- On KWclass
--   reduce production header_mark -> KWdeferred

State 90:
## Known stack suffix:
## KWcase
## LR(1) items:
header_mark -> KWcase . [ KWclass ]
## Transitions:
## Reductions:
-- On KWclass
--   reduce production header_mark -> KWcase

State 91:
## Known stack suffix:
## KWall
## LR(1) items:
proof_all_expr -> KWall . formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments_opt shift to state 104
-- On formal_arguments shift to state 315
## Reductions:
-- On SEMICOL NEWLINE KWrequire KWproof KWnote KWensure KWdeferred
--   reduce production formal_arguments_opt ->

State 92:
## Known stack suffix:
## LPAREN
## LR(1) items:
formal_arguments -> LPAREN . entity_list RPAREN [ USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW # ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 96
-- On entity_list shift to state 99
-- On entity_group shift to state 101
## Reductions:

State 93:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
identifier_list -> LIDENTIFIER . [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
identifier_list -> LIDENTIFIER . COMMA identifier_list [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
## Transitions:
-- On COMMA shift to state 94
## Reductions:
-- On SEMICOL RPAREN KWproof KWdo COLON ASSIGN
--   reduce production identifier_list -> LIDENTIFIER

State 94:
## Known stack suffix:
## LIDENTIFIER COMMA
## LR(1) items:
identifier_list -> LIDENTIFIER COMMA . identifier_list [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## LIDENTIFIER COMMA identifier_list
## LR(1) items:
identifier_list -> LIDENTIFIER COMMA identifier_list . [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
## Transitions:
## Reductions:
-- On SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN
--   reduce production identifier_list -> LIDENTIFIER COMMA identifier_list

State 96:
## Known stack suffix:
## identifier_list
## LR(1) items:
entity_group -> identifier_list . [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
entity_group -> identifier_list . COLON type_nt [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
## Transitions:
-- On COLON shift to state 97
## Reductions:
-- On SEMICOL RPAREN KWproof KWdo COMMA ASSIGN
--   reduce production entity_group -> identifier_list

State 97:
## Known stack suffix:
## identifier_list COLON
## LR(1) items:
entity_group -> identifier_list COLON . type_nt [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 98
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 98:
## Known stack suffix:
## identifier_list COLON type_nt
## LR(1) items:
entity_group -> identifier_list COLON type_nt . [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On SEMICOL RPAREN KWproof KWdo COMMA ASSIGN
--   reduce production entity_group -> identifier_list COLON type_nt

State 99:
## Known stack suffix:
## LPAREN entity_list
## LR(1) items:
formal_arguments -> LPAREN entity_list . RPAREN [ USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW # ]
## Transitions:
-- On RPAREN shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LPAREN entity_list RPAREN
## LR(1) items:
formal_arguments -> LPAREN entity_list RPAREN . [ USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW # ]
## Transitions:
## Reductions:
-- On USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW #
--   reduce production formal_arguments -> LPAREN entity_list RPAREN
** End-of-stream conflict on USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW
**   There is a tension between
**   (1) reducing production formal_arguments -> LPAREN entity_list RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 101:
## Known stack suffix:
## entity_group
## LR(1) items:
entity_list -> entity_group . [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
entity_list -> entity_group . COMMA entity_list [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
## Transitions:
-- On COMMA shift to state 102
## Reductions:
-- On SEMICOL RPAREN KWproof KWdo ASSIGN
--   reduce production entity_list -> entity_group

State 102:
## Known stack suffix:
## entity_group COMMA
## LR(1) items:
entity_list -> entity_group COMMA . entity_list [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 96
-- On entity_list shift to state 103
-- On entity_group shift to state 101
## Reductions:

State 103:
## Known stack suffix:
## entity_group COMMA entity_list
## LR(1) items:
entity_list -> entity_group COMMA entity_list . [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
## Transitions:
## Reductions:
-- On SEMICOL RPAREN KWproof KWdo ASSIGN
--   reduce production entity_list -> entity_group COMMA entity_list

State 104:
## Known stack suffix:
## KWall formal_arguments_opt
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt . opt_nl ass_req_opt ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 107
## Reductions:
-- On KWrequire KWproof KWnote KWensure KWdeferred
--   reduce production opt_nl ->

State 105:
## Known stack suffix:
## SEMICOL
## LR(1) items:
opt_nl -> SEMICOL . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Reductions:
-- On USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult
--   reduce production opt_nl -> SEMICOL

State 106:
## Known stack suffix:
## NEWLINE
## LR(1) items:
opt_nl -> NEWLINE . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Reductions:
-- On USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult
--   reduce production opt_nl -> NEWLINE

State 107:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl . ass_req_opt ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWrequire shift to state 108
-- On ass_req_opt shift to state 277
-- On ass_req shift to state 295
## Reductions:
-- On KWproof KWnote KWensure KWdeferred
--   reduce production ass_req_opt ->

State 108:
## Known stack suffix:
## KWrequire
## LR(1) items:
ass_req -> KWrequire . ass_seq [ KWproof KWnote KWensure KWdeferred ]
ass_req -> KWrequire . ass_seq separator [ KWproof KWnote KWensure KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 273
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_seq shift to state 274
## Reductions:

State 109:
## Known stack suffix:
## USCORE
## LR(1) items:
atomic_expr -> USCORE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production atomic_expr -> USCORE
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production atomic_expr -> USCORE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 110:
## Known stack suffix:
## TIMES
## LR(1) items:
operator_expr -> TIMES . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 272
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 111:
## Known stack suffix:
## PLUS
## LR(1) items:
operator_expr -> PLUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 213
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 112:
## Known stack suffix:
## NUMBER
## LR(1) items:
atomic_expr -> NUMBER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production atomic_expr -> NUMBER
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production atomic_expr -> NUMBER
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 113:
## Known stack suffix:
## MINUS
## LR(1) items:
operator_expr -> MINUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 215
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 114:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . operator RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . expr RPAREN ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 115
-- On ROPERATOR shift to state 58
-- On PLUS shift to state 212
-- On PARENOP shift to state 60
-- On OPERATOR shift to state 61
-- On NUMBER shift to state 112
-- On NOTIN shift to state 62
-- On NEQV shift to state 63
-- On NEQ shift to state 64
-- On MINUS shift to state 214
-- On LT shift to state 66
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LE shift to state 67
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWor shift to state 68
-- On KWold shift to state 124
-- On KWnot shift to state 224
-- On KWinspect shift to state 126
-- On KWin shift to state 70
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWand shift to state 71
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On GT shift to state 72
-- On GE shift to state 73
-- On EQV shift to state 74
-- On EQ shift to state 75
-- On DIVIDE shift to state 76
-- On DCOLON shift to state 77
-- On DBAR shift to state 78
-- On DARROW shift to state 79
-- On CARET shift to state 80
-- On BRACKETOP shift to state 81
-- On BAR shift to state 82
-- On operator_expr shift to state 145
-- On operator shift to state 226
-- On expr shift to state 228
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 115:
## Known stack suffix:
## TIMES
## LR(1) items:
operator -> TIMES . [ RPAREN ]
operator_expr -> TIMES . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 272
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN
--   reduce production operator -> TIMES

State 116:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
dotted_id_list -> LIDENTIFIER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LIDENTIFIER . ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On ARROW shift to state 117
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production dotted_id_list -> LIDENTIFIER
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW
**   There is a tension between
**   (1) reducing production dotted_id_list -> LIDENTIFIER
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 117:
## Known stack suffix:
## LIDENTIFIER ARROW
## LR(1) items:
expr -> LIDENTIFIER ARROW . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 271
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 118:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 217
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 119:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 269
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 120:
## Known stack suffix:
## KWtrue
## LR(1) items:
atomic_expr -> KWtrue . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production atomic_expr -> KWtrue
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production atomic_expr -> KWtrue
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 121:
## Known stack suffix:
## KWsome
## LR(1) items:
expr -> KWsome . formal_arguments opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## KWsome formal_arguments
## LR(1) items:
expr -> KWsome formal_arguments . opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 123
## Reductions:
-- On USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWold KWnot KWinspect KWif KWfalse KWall KWagent KWResult
--   reduce production opt_nl ->

State 123:
## Known stack suffix:
## KWsome formal_arguments opt_nl
## LR(1) items:
expr -> KWsome formal_arguments opt_nl . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 268
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 124:
## Known stack suffix:
## KWold
## LR(1) items:
operator_expr -> KWold . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 267
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 125:
## Known stack suffix:
## KWnot
## LR(1) items:
operator_expr -> KWnot . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 225
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 126:
## Known stack suffix:
## KWinspect
## LR(1) items:
exp_inspect -> KWinspect . expr exp_case_list KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 258
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 127:
## Known stack suffix:
## KWif
## LR(1) items:
exp_conditional -> KWif . exp_then_part_list exp_else_part KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 247
-- On exp_then_part_list shift to state 250
-- On exp_then_part shift to state 255
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 128:
## Known stack suffix:
## KWfalse
## LR(1) items:
atomic_expr -> KWfalse . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production atomic_expr -> KWfalse
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production atomic_expr -> KWfalse
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 129:
## Known stack suffix:
## KWall
## LR(1) items:
expr -> KWall . formal_arguments opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## KWall formal_arguments
## LR(1) items:
expr -> KWall formal_arguments . opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 131
## Reductions:
-- On USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWold KWnot KWinspect KWif KWfalse KWall KWagent KWResult
--   reduce production opt_nl ->

State 131:
## Known stack suffix:
## KWall formal_arguments opt_nl
## LR(1) items:
expr -> KWall formal_arguments opt_nl . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 246
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 132:
## Known stack suffix:
## KWagent
## LR(1) items:
expr -> KWagent . formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments_info shift to state 133
-- On formal_arguments shift to state 245
## Reductions:

State 133:
## Known stack suffix:
## KWagent formal_arguments_info
## LR(1) items:
expr -> KWagent formal_arguments_info . return_type_opt optsemi require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type_opt shift to state 141
-- On return_type shift to state 244
## Reductions:
-- On SEMICOL KWrequire KWensure
--   reduce production return_type_opt ->

State 134:
## Known stack suffix:
## EXCLAM
## LR(1) items:
return_type -> EXCLAM . COLON elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On COLON shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## EXCLAM COLON
## LR(1) items:
return_type -> EXCLAM COLON . elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 136
-- On dotted_id_list shift to state 36
## Reductions:

State 136:
## Known stack suffix:
## EXCLAM COLON elem_type
## LR(1) items:
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> EXCLAM COLON elem_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW #
--   reduce production return_type -> EXCLAM COLON elem_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW
**   There is a tension between
**   (1) reducing production return_type -> EXCLAM COLON elem_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 137:
## Known stack suffix:
## COLON
## LR(1) items:
return_type -> COLON . elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> COLON . KWghost elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On KWghost shift to state 138
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 140
-- On dotted_id_list shift to state 36
## Reductions:

State 138:
## Known stack suffix:
## COLON KWghost
## LR(1) items:
return_type -> COLON KWghost . elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 139
-- On dotted_id_list shift to state 36
## Reductions:

State 139:
## Known stack suffix:
## COLON KWghost elem_type
## LR(1) items:
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> COLON KWghost elem_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW #
--   reduce production return_type -> COLON KWghost elem_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW
**   There is a tension between
**   (1) reducing production return_type -> COLON KWghost elem_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 140:
## Known stack suffix:
## COLON elem_type
## LR(1) items:
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> COLON elem_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW #
--   reduce production return_type -> COLON elem_type
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW
**   There is a tension between
**   (1) reducing production return_type -> COLON elem_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 141:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt . optsemi require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 142
## Reductions:
-- On KWrequire KWensure
--   reduce production optsemi ->

State 142:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi . require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWrequire shift to state 143
-- On require_block_opt shift to state 238
-- On require_block shift to state 243
## Reductions:
-- On KWensure
--   reduce production require_block_opt ->

State 143:
## Known stack suffix:
## KWrequire
## LR(1) items:
require_block -> KWrequire . compound [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 237
-- On atomic_expr shift to state 187
## Reductions:

State 144:
## Known stack suffix:
## KWResult
## LR(1) items:
atomic_expr -> KWResult . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production atomic_expr -> KWResult
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production atomic_expr -> KWResult
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 145:
## Known stack suffix:
## operator_expr
## LR(1) items:
expr -> operator_expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> operator_expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> operator_expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 146:
## Known stack suffix:
## info_expr
## LR(1) items:
compound_list -> info_expr . optsemi [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
compound_list -> info_expr . SEMICOL compound_list [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
-- On SEMICOL shift to state 147
-- On optsemi shift to state 235
## Reductions:
-- On KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred
--   reduce production optsemi ->

State 147:
## Known stack suffix:
## info_expr SEMICOL
## LR(1) items:
compound_list -> info_expr SEMICOL . compound_list [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
optsemi -> SEMICOL . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 234
-- On atomic_expr shift to state 187
## Reductions:
-- On KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred
--   reduce production optsemi -> SEMICOL

State 148:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
info_expr -> expr . [ UIDENTIFIER SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER NEWLINE LIDENTIFIER KWtrue KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall #
--   reduce production info_expr -> expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production info_expr -> expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 149:
## Known stack suffix:
## expr TIMES
## LR(1) items:
operator_expr -> expr TIMES . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 150
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 150:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr TIMES expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr TIMES expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr TIMES expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 151:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 152
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 152:
## Known stack suffix:
## expr LPAREN expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr LPAREN expr . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RPAREN shift to state 153
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 153:
## Known stack suffix:
## expr LPAREN expr RPAREN
## LR(1) items:
expr -> expr LPAREN expr RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> expr LPAREN expr RPAREN
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> expr LPAREN expr RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 154:
## Known stack suffix:
## expr PLUS
## LR(1) items:
operator_expr -> expr PLUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 155
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 155:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr PLUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr PLUS expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr PLUS expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 156:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 157
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 157:
## Known stack suffix:
## expr LBRACKET expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr LBRACKET expr . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACKET shift to state 158
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 158:
## Known stack suffix:
## expr LBRACKET expr RBRACKET
## LR(1) items:
expr -> expr LBRACKET expr RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> expr LBRACKET expr RBRACKET
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> expr LBRACKET expr RBRACKET
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 159:
## Known stack suffix:
## expr NOTIN
## LR(1) items:
operator_expr -> expr NOTIN . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 160
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 160:
## Known stack suffix:
## expr NOTIN expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr NOTIN expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr NOTIN expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr NOTIN expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 161:
## Known stack suffix:
## expr MINUS
## LR(1) items:
operator_expr -> expr MINUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 162
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 162:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr MINUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr MINUS expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr MINUS expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 163:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr DOT . LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LIDENTIFIER shift to state 164
-- On LBRACE shift to state 165
## Reductions:

State 164:
## Known stack suffix:
## expr DOT LIDENTIFIER
## LR(1) items:
expr -> expr DOT LIDENTIFIER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> expr DOT LIDENTIFIER
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> expr DOT LIDENTIFIER
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 165:
## Known stack suffix:
## expr DOT LBRACE
## LR(1) items:
expr -> expr DOT LBRACE . expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 166
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 166:
## Known stack suffix:
## expr DOT LBRACE expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr DOT LBRACE expr . RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACE shift to state 167
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 167:
## Known stack suffix:
## expr DOT LBRACE expr RBRACE
## LR(1) items:
expr -> expr DOT LBRACE expr RBRACE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> expr DOT LBRACE expr RBRACE
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> expr DOT LBRACE expr RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 168:
## Known stack suffix:
## expr NEQ
## LR(1) items:
operator_expr -> expr NEQ . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 169
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 169:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr NEQ expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr NEQ expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr NEQ expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 170:
## Known stack suffix:
## expr DIVIDE
## LR(1) items:
operator_expr -> expr DIVIDE . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 171
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 171:
## Known stack suffix:
## expr DIVIDE expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DIVIDE expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr DIVIDE expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr DIVIDE expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 172:
## Known stack suffix:
## expr DCOLON
## LR(1) items:
operator_expr -> expr DCOLON . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 173
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 173:
## Known stack suffix:
## expr DCOLON expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DCOLON expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr DCOLON expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr DCOLON expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 174:
## Known stack suffix:
## expr CARET
## LR(1) items:
operator_expr -> expr CARET . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 175
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 175:
## Known stack suffix:
## expr CARET expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr CARET expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr CARET expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr CARET expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 176:
## Known stack suffix:
## exp_inspect
## LR(1) items:
expr -> exp_inspect . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> exp_inspect
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> exp_inspect
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 177:
## Known stack suffix:
## exp_conditional
## LR(1) items:
expr -> exp_conditional . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> exp_conditional
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> exp_conditional
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 178:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
atomic_expr -> dotted_id_list . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On DOT shift to state 179
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production atomic_expr -> dotted_id_list
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production atomic_expr -> dotted_id_list
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 179:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 180
-- On LIDENTIFIER shift to state 10
-- On LBRACE shift to state 221
## Reductions:

State 180:
## Known stack suffix:
## dotted_id_list DOT LPAREN
## LR(1) items:
expr -> dotted_id_list DOT LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 181
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 181:
## Known stack suffix:
## dotted_id_list DOT LPAREN expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> dotted_id_list DOT LPAREN expr . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RPAREN shift to state 182
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 182:
## Known stack suffix:
## dotted_id_list DOT LPAREN expr RPAREN
## LR(1) items:
expr -> dotted_id_list DOT LPAREN expr RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> dotted_id_list DOT LPAREN expr RPAREN
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> dotted_id_list DOT LPAREN expr RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 183:
## Known stack suffix:
## expr LT
## LR(1) items:
operator_expr -> expr LT . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 184
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 184:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr LT expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr LT expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr LT expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 185:
## Known stack suffix:
## expr DBAR
## LR(1) items:
operator_expr -> expr DBAR . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 186
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 186:
## Known stack suffix:
## expr DBAR expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DBAR expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NOTIN NEWLINE NEQ LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr DBAR expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr DBAR expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 187:
## Known stack suffix:
## atomic_expr
## LR(1) items:
expr -> atomic_expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> atomic_expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> atomic_expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 188:
## Known stack suffix:
## expr BAR
## LR(1) items:
operator_expr -> expr BAR . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 189
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 189:
## Known stack suffix:
## expr BAR expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr BAR expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NOTIN NEWLINE NEQ LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> expr BAR expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr BAR expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 190:
## Known stack suffix:
## expr LE
## LR(1) items:
operator_expr -> expr LE . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 191
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 191:
## Known stack suffix:
## expr LE expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr LE expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr LE expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr LE expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 192:
## Known stack suffix:
## expr KWor
## LR(1) items:
operator_expr -> expr KWor . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 193
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 193:
## Known stack suffix:
## expr KWor expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWor expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr KWor expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr KWor expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 194:
## Known stack suffix:
## expr KWin
## LR(1) items:
operator_expr -> expr KWin . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 195
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 195:
## Known stack suffix:
## expr KWin expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWin expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr KWin expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr KWin expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 196:
## Known stack suffix:
## expr KWas
## LR(1) items:
operator_expr -> expr KWas . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 197
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 197:
## Known stack suffix:
## expr KWas expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWas expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr KWas expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr KWas expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 198:
## Known stack suffix:
## expr GT
## LR(1) items:
operator_expr -> expr GT . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 199
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 199:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr GT expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr GT expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr GT expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 200:
## Known stack suffix:
## expr GE
## LR(1) items:
operator_expr -> expr GE . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 201
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 201:
## Known stack suffix:
## expr GE expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr GE expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr GE expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr GE expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 202:
## Known stack suffix:
## expr EQ
## LR(1) items:
operator_expr -> expr EQ . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 203
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 203:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr EQ expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr EQ expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr EQ expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 204:
## Known stack suffix:
## expr KWand
## LR(1) items:
operator_expr -> expr KWand . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 205
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 205:
## Known stack suffix:
## expr KWand expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWand expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWor KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWand KWall DARROW COMMA COLON #
--   reduce production operator_expr -> expr KWand expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr KWand expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 206:
## Known stack suffix:
## expr DARROW
## LR(1) items:
operator_expr -> expr DARROW . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 207
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 207:
## Known stack suffix:
## expr DARROW expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DARROW expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWall COMMA COLON #
--   reduce production operator_expr -> expr DARROW expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr DARROW expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 208:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr -> expr COMMA . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 209
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 209:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr COMMA expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production expr -> expr COMMA expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> expr COMMA expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 210:
## Known stack suffix:
## expr COLON
## LR(1) items:
expr -> expr COLON . type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr COLON . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On UIDENTIFIER shift to state 20
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 211
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 216
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On type_nt shift to state 232
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On operator_expr shift to state 145
-- On list_type shift to state 31
-- On expr shift to state 233
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 219
-- On atomic_expr shift to state 187
-- On arrow_type shift to state 46
## Reductions:

State 211:
## Known stack suffix:
## LPAREN
## LR(1) items:
elem_type -> LPAREN . type_nt RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW # ]
expr -> LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . operator RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . expr RPAREN ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
tuple_type -> LPAREN . type_list_min2 RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW # ]
## Transitions:
-- On USCORE shift to state 109
-- On UIDENTIFIER shift to state 20
-- On TIMES shift to state 115
-- On ROPERATOR shift to state 58
-- On PLUS shift to state 212
-- On PARENOP shift to state 60
-- On OPERATOR shift to state 61
-- On NUMBER shift to state 112
-- On NOTIN shift to state 62
-- On NEQV shift to state 63
-- On NEQ shift to state 64
-- On MINUS shift to state 214
-- On LT shift to state 66
-- On LPAREN shift to state 211
-- On LIDENTIFIER shift to state 116
-- On LE shift to state 67
-- On LBRACKET shift to state 216
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWor shift to state 68
-- On KWold shift to state 124
-- On KWnot shift to state 224
-- On KWinspect shift to state 126
-- On KWin shift to state 70
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWand shift to state 71
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On GT shift to state 72
-- On GE shift to state 73
-- On EQV shift to state 74
-- On EQ shift to state 75
-- On DIVIDE shift to state 76
-- On DCOLON shift to state 77
-- On DBAR shift to state 78
-- On DARROW shift to state 79
-- On CARET shift to state 80
-- On BRACKETOP shift to state 81
-- On BAR shift to state 82
-- On type_nt shift to state 38
-- On type_list_min2 shift to state 47
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On operator_expr shift to state 145
-- On operator shift to state 226
-- On list_type shift to state 31
-- On expr shift to state 228
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 219
-- On atomic_expr shift to state 187
-- On arrow_type shift to state 46
## Reductions:

State 212:
## Known stack suffix:
## PLUS
## LR(1) items:
operator -> PLUS . [ RPAREN ]
operator_expr -> PLUS . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 213
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN
--   reduce production operator -> PLUS

State 213:
## Known stack suffix:
## PLUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> PLUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> PLUS expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> PLUS expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 214:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
operator_expr -> MINUS . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 215
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN
--   reduce production operator -> MINUS

State 215:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> MINUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> MINUS expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> MINUS expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 216:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
list_type -> LBRACKET . elem_type RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW # ]
## Transitions:
-- On USCORE shift to state 109
-- On UIDENTIFIER shift to state 20
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 211
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 216
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On operator_expr shift to state 145
-- On list_type shift to state 31
-- On expr shift to state 217
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On elem_type shift to state 32
-- On dotted_id_list shift to state 219
-- On atomic_expr shift to state 187
## Reductions:

State 217:
## Known stack suffix:
## LBRACKET expr
## LR(1) items:
expr -> LBRACKET expr . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COMMA expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACKET shift to state 218
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 218:
## Known stack suffix:
## LBRACKET expr RBRACKET
## LR(1) items:
expr -> LBRACKET expr RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> LBRACKET expr RBRACKET
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> LBRACKET expr RBRACKET
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 219:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
atomic_expr -> dotted_id_list . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
path -> dotted_id_list . DOT [ UIDENTIFIER ]
## Transitions:
-- On DOT shift to state 220
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production atomic_expr -> dotted_id_list
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production atomic_expr -> dotted_id_list
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 220:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
path -> dotted_id_list DOT . [ UIDENTIFIER ]
## Transitions:
-- On LPAREN shift to state 180
-- On LIDENTIFIER shift to state 10
-- On LBRACE shift to state 221
## Reductions:
-- On UIDENTIFIER
--   reduce production path -> dotted_id_list DOT

State 221:
## Known stack suffix:
## dotted_id_list DOT LBRACE
## LR(1) items:
expr -> dotted_id_list DOT LBRACE . expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 222
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 222:
## Known stack suffix:
## dotted_id_list DOT LBRACE expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> dotted_id_list DOT LBRACE expr . RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACE shift to state 223
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 223:
## Known stack suffix:
## dotted_id_list DOT LBRACE expr RBRACE
## LR(1) items:
expr -> dotted_id_list DOT LBRACE expr RBRACE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> dotted_id_list DOT LBRACE expr RBRACE
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> dotted_id_list DOT LBRACE expr RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 224:
## Known stack suffix:
## KWnot
## LR(1) items:
operator -> KWnot . [ RPAREN ]
operator_expr -> KWnot . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 225
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN
--   reduce production operator -> KWnot

State 225:
## Known stack suffix:
## KWnot expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> KWnot expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production operator_expr -> KWnot expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> KWnot expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 226:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
expr -> LPAREN operator . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On RPAREN shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
expr -> LPAREN operator RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> LPAREN operator RPAREN
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> LPAREN operator RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 228:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> LPAREN expr . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COMMA expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> LPAREN expr . RPAREN ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RPAREN shift to state 229
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 229:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN expr RPAREN . ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On ARROW shift to state 230
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> LPAREN expr RPAREN
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW
**   There is a tension between
**   (1) reducing production expr -> LPAREN expr RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 230:
## Known stack suffix:
## LPAREN expr RPAREN ARROW
## LR(1) items:
expr -> LPAREN expr RPAREN ARROW . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 231
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 231:
## Known stack suffix:
## LPAREN expr RPAREN ARROW expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN expr RPAREN ARROW expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production expr -> LPAREN expr RPAREN ARROW expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> LPAREN expr RPAREN ARROW expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 232:
## Known stack suffix:
## expr COLON type_nt
## LR(1) items:
expr -> expr COLON type_nt . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> expr COLON type_nt
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> expr COLON type_nt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 233:
## Known stack suffix:
## expr COLON expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr COLON expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWall COMMA COLON #
--   reduce production operator_expr -> expr COLON expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> expr COLON expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 234:
## Known stack suffix:
## info_expr SEMICOL compound_list
## LR(1) items:
compound_list -> info_expr SEMICOL compound_list . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Reductions:
-- On KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred
--   reduce production compound_list -> info_expr SEMICOL compound_list

State 235:
## Known stack suffix:
## info_expr optsemi
## LR(1) items:
compound_list -> info_expr optsemi . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Reductions:
-- On KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred
--   reduce production compound_list -> info_expr optsemi

State 236:
## Known stack suffix:
## compound_list
## LR(1) items:
compound -> compound_list . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Reductions:
-- On KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred
--   reduce production compound -> compound_list

State 237:
## Known stack suffix:
## KWrequire compound
## LR(1) items:
require_block -> KWrequire compound . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Reductions:
-- On KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred
--   reduce production require_block -> KWrequire compound

State 238:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi require_block_opt
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt . ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWensure shift to state 239
-- On ensure_block shift to state 241
## Reductions:

State 239:
## Known stack suffix:
## KWensure
## LR(1) items:
ensure_block -> KWensure . compound [ KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 240
-- On atomic_expr shift to state 187
## Reductions:

State 240:
## Known stack suffix:
## KWensure compound
## LR(1) items:
ensure_block -> KWensure compound . [ KWend ]
## Transitions:
## Reductions:
-- On KWend
--   reduce production ensure_block -> KWensure compound

State 241:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block . KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWend shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 243:
## Known stack suffix:
## require_block
## LR(1) items:
require_block_opt -> require_block . [ KWensure ]
## Transitions:
## Reductions:
-- On KWensure
--   reduce production require_block_opt -> require_block

State 244:
## Known stack suffix:
## return_type
## LR(1) items:
return_type_opt -> return_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall ARROW #
--   reduce production return_type_opt -> return_type
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall ARROW
**   There is a tension between
**   (1) reducing production return_type_opt -> return_type
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 245:
## Known stack suffix:
## formal_arguments
## LR(1) items:
formal_arguments_info -> formal_arguments . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EXCLAM COLON ARROW # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EXCLAM COLON ARROW #
--   reduce production formal_arguments_info -> formal_arguments
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EXCLAM COLON ARROW
**   There is a tension between
**   (1) reducing production formal_arguments_info -> formal_arguments
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 246:
## Known stack suffix:
## KWall formal_arguments opt_nl expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> KWall formal_arguments opt_nl expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production expr -> KWall formal_arguments opt_nl expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> KWall formal_arguments opt_nl expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 247:
## Known stack suffix:
## expr
## LR(1) items:
exp_then_part -> expr . KWthen expr [ KWend KWelseif KWelse ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWthen shift to state 248
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 248:
## Known stack suffix:
## expr KWthen
## LR(1) items:
exp_then_part -> expr KWthen . expr [ KWend KWelseif KWelse ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 249
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 249:
## Known stack suffix:
## expr KWthen expr
## LR(1) items:
exp_then_part -> expr KWthen expr . [ KWend KWelseif KWelse ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On KWend KWelseif KWelse
--   reduce production exp_then_part -> expr KWthen expr

State 250:
## Known stack suffix:
## KWif exp_then_part_list
## LR(1) items:
exp_conditional -> KWif exp_then_part_list . exp_else_part KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWelse shift to state 251
-- On exp_else_part shift to state 253
## Reductions:
-- On KWend
--   reduce production exp_else_part ->

State 251:
## Known stack suffix:
## KWelse
## LR(1) items:
exp_else_part -> KWelse . expr [ KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 252
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 252:
## Known stack suffix:
## KWelse expr
## LR(1) items:
exp_else_part -> KWelse expr . [ KWend ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On KWend
--   reduce production exp_else_part -> KWelse expr

State 253:
## Known stack suffix:
## KWif exp_then_part_list exp_else_part
## LR(1) items:
exp_conditional -> KWif exp_then_part_list exp_else_part . KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWend shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## KWif exp_then_part_list exp_else_part KWend
## LR(1) items:
exp_conditional -> KWif exp_then_part_list exp_else_part KWend . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production exp_conditional -> KWif exp_then_part_list exp_else_part KWend
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production exp_conditional -> KWif exp_then_part_list exp_else_part KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 255:
## Known stack suffix:
## exp_then_part
## LR(1) items:
exp_then_part_list -> exp_then_part . [ KWend KWelse ]
exp_then_part_list -> exp_then_part . KWelseif exp_then_part_list [ KWend KWelse ]
## Transitions:
-- On KWelseif shift to state 256
## Reductions:
-- On KWend KWelse
--   reduce production exp_then_part_list -> exp_then_part

State 256:
## Known stack suffix:
## exp_then_part KWelseif
## LR(1) items:
exp_then_part_list -> exp_then_part KWelseif . exp_then_part_list [ KWend KWelse ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 247
-- On exp_then_part_list shift to state 257
-- On exp_then_part shift to state 255
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 257:
## Known stack suffix:
## exp_then_part KWelseif exp_then_part_list
## LR(1) items:
exp_then_part_list -> exp_then_part KWelseif exp_then_part_list . [ KWend KWelse ]
## Transitions:
## Reductions:
-- On KWend KWelse
--   reduce production exp_then_part_list -> exp_then_part KWelseif exp_then_part_list

State 258:
## Known stack suffix:
## KWinspect expr
## LR(1) items:
exp_inspect -> KWinspect expr . exp_case_list KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWcase shift to state 259
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
-- On exp_case_list shift to state 263
-- On exp_case shift to state 265
## Reductions:

State 259:
## Known stack suffix:
## KWcase
## LR(1) items:
exp_case -> KWcase . expr KWthen expr [ KWend KWcase ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 260
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 260:
## Known stack suffix:
## KWcase expr
## LR(1) items:
exp_case -> KWcase expr . KWthen expr [ KWend KWcase ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWthen shift to state 261
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 261:
## Known stack suffix:
## KWcase expr KWthen
## LR(1) items:
exp_case -> KWcase expr KWthen . expr [ KWend KWcase ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 262
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 262:
## Known stack suffix:
## KWcase expr KWthen expr
## LR(1) items:
exp_case -> KWcase expr KWthen expr . [ KWend KWcase ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On KWend KWcase
--   reduce production exp_case -> KWcase expr KWthen expr

State 263:
## Known stack suffix:
## KWinspect expr exp_case_list
## LR(1) items:
exp_inspect -> KWinspect expr exp_case_list . KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWend shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## KWinspect expr exp_case_list KWend
## LR(1) items:
exp_inspect -> KWinspect expr exp_case_list KWend . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production exp_inspect -> KWinspect expr exp_case_list KWend
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production exp_inspect -> KWinspect expr exp_case_list KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 265:
## Known stack suffix:
## exp_case
## LR(1) items:
exp_case_list -> exp_case . [ KWend ]
exp_case_list -> exp_case . exp_case_list [ KWend ]
## Transitions:
-- On KWcase shift to state 259
-- On exp_case_list shift to state 266
-- On exp_case shift to state 265
## Reductions:
-- On KWend
--   reduce production exp_case_list -> exp_case

State 266:
## Known stack suffix:
## exp_case exp_case_list
## LR(1) items:
exp_case_list -> exp_case exp_case_list . [ KWend ]
## Transitions:
## Reductions:
-- On KWend
--   reduce production exp_case_list -> exp_case exp_case_list

State 267:
## Known stack suffix:
## KWold expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> KWold expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production operator_expr -> KWold expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> KWold expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 268:
## Known stack suffix:
## KWsome formal_arguments opt_nl expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> KWsome formal_arguments opt_nl expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production expr -> KWsome formal_arguments opt_nl expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> KWsome formal_arguments opt_nl expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 269:
## Known stack suffix:
## LBRACE expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> LBRACE expr . RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACE shift to state 270
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 270:
## Known stack suffix:
## LBRACE expr RBRACE
## LR(1) items:
expr -> LBRACE expr RBRACE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR #
--   reduce production expr -> LBRACE expr RBRACE
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> LBRACE expr RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 271:
## Known stack suffix:
## LIDENTIFIER ARROW expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LIDENTIFIER ARROW expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER SEMICOL RPAREN RBRACKET RBRACE NUMBER NEWLINE LIDENTIFIER KWtrue KWthen KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production expr -> LIDENTIFIER ARROW expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production expr -> LIDENTIFIER ARROW expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 272:
## Known stack suffix:
## TIMES expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> TIMES expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LIDENTIFIER LE KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DIVIDE DBAR DARROW COMMA COLON BAR #
--   reduce production operator_expr -> TIMES expr
** End-of-stream conflict on UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR
**   There is a tension between
**   (1) reducing production operator_expr -> TIMES expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 273:
## Known stack suffix:
## info_expr
## LR(1) items:
ass_seq -> info_expr . [ SEMICOL NEWLINE KWproof KWnote KWensure KWend KWdeferred ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE KWproof KWnote KWensure KWend KWdeferred
--   reduce production ass_seq -> info_expr

State 274:
## Known stack suffix:
## KWrequire ass_seq
## LR(1) items:
ass_req -> KWrequire ass_seq . [ KWproof KWnote KWensure KWdeferred ]
ass_req -> KWrequire ass_seq . separator [ KWproof KWnote KWensure KWdeferred ]
ass_seq -> ass_seq . separator info_expr [ SEMICOL NEWLINE KWproof KWnote KWensure KWdeferred ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 275
## Reductions:
-- On KWproof KWnote KWensure KWdeferred
--   reduce production ass_req -> KWrequire ass_seq

State 275:
## Known stack suffix:
## KWrequire ass_seq separator
## LR(1) items:
ass_req -> KWrequire ass_seq separator . [ KWproof KWnote KWensure KWdeferred ]
ass_seq -> ass_seq separator . info_expr [ SEMICOL NEWLINE KWproof KWnote KWensure KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 276
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On KWproof KWnote KWensure KWdeferred
--   reduce production ass_req -> KWrequire ass_seq separator

State 276:
## Known stack suffix:
## ass_seq separator info_expr
## LR(1) items:
ass_seq -> ass_seq separator info_expr . [ SEMICOL NEWLINE KWproof KWnote KWensure KWend KWdeferred ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE KWproof KWnote KWensure KWend KWdeferred
--   reduce production ass_seq -> ass_seq separator info_expr

State 277:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt . ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWproof shift to state 278
-- On KWnote shift to state 283
-- On KWdeferred shift to state 286
-- On implementation_note shift to state 287
-- On ass_imp shift to state 312
-- On ass_check shift to state 294
## Reductions:
-- On KWensure
--   reduce production ass_imp ->

State 278:
## Known stack suffix:
## KWproof
## LR(1) items:
ass_check -> KWproof . proof_seq separator [ KWensure ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWrequire shift to state 108
-- On KWproof shift to state 278
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 279
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On proof_seq shift to state 296
-- On proof_expr_struct shift to state 298
-- On proof_expr shift to state 311
-- On proof_all_expr_inner shift to state 300
-- On operator_expr shift to state 145
-- On info_expr shift to state 301
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_req shift to state 302
-- On ass_check shift to state 308
## Reductions:

State 279:
## Known stack suffix:
## KWall
## LR(1) items:
expr -> KWall . formal_arguments opt_nl expr [ TIMES SEMICOL PLUS NOTIN NEWLINE NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
proof_all_expr_inner -> KWall . formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## KWall formal_arguments
## LR(1) items:
expr -> KWall formal_arguments . opt_nl expr [ TIMES SEMICOL PLUS NOTIN NEWLINE NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
proof_all_expr_inner -> KWall formal_arguments . opt_nl ass_req_opt ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 281
## Reductions:
-- On USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult
--   reduce production opt_nl ->

State 281:
## Known stack suffix:
## KWall formal_arguments opt_nl
## LR(1) items:
expr -> KWall formal_arguments opt_nl . expr [ TIMES SEMICOL PLUS NOTIN NEWLINE NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
proof_all_expr_inner -> KWall formal_arguments opt_nl . ass_req_opt ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWrequire shift to state 108
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 246
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_req_opt shift to state 282
-- On ass_req shift to state 295
## Reductions:
-- On KWproof KWnote KWensure KWdeferred
--   reduce production ass_req_opt ->

State 282:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt . ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWproof shift to state 278
-- On KWnote shift to state 283
-- On KWdeferred shift to state 286
-- On implementation_note shift to state 287
-- On ass_imp shift to state 288
-- On ass_check shift to state 294
## Reductions:
-- On KWensure
--   reduce production ass_imp ->

State 283:
## Known stack suffix:
## KWnote
## LR(1) items:
implementation_note -> KWnote . LIDENTIFIER optsemi [ KWensure KWend ]
## Transitions:
-- On LIDENTIFIER shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## KWnote LIDENTIFIER
## LR(1) items:
implementation_note -> KWnote LIDENTIFIER . optsemi [ KWensure KWend ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 285
## Reductions:
-- On KWensure KWend
--   reduce production optsemi ->

State 285:
## Known stack suffix:
## KWnote LIDENTIFIER optsemi
## LR(1) items:
implementation_note -> KWnote LIDENTIFIER optsemi . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production implementation_note -> KWnote LIDENTIFIER optsemi

State 286:
## Known stack suffix:
## KWdeferred
## LR(1) items:
ass_imp -> KWdeferred . [ KWensure ]
## Transitions:
## Reductions:
-- On KWensure
--   reduce production ass_imp -> KWdeferred

State 287:
## Known stack suffix:
## implementation_note
## LR(1) items:
ass_imp -> implementation_note . [ KWensure ]
## Transitions:
## Reductions:
-- On KWensure
--   reduce production ass_imp -> implementation_note

State 288:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt ass_imp
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 292
## Reductions:

State 289:
## Known stack suffix:
## KWensure
## LR(1) items:
ass_ens -> KWensure . ass_seq [ KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 273
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_seq shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## KWensure ass_seq
## LR(1) items:
ass_ens -> KWensure ass_seq . [ KWend ]
ass_seq -> ass_seq . separator info_expr [ SEMICOL NEWLINE KWend ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 291
## Reductions:
-- On KWend
--   reduce production ass_ens -> KWensure ass_seq

State 291:
## Known stack suffix:
## ass_seq separator
## LR(1) items:
ass_seq -> ass_seq separator . info_expr [ SEMICOL NEWLINE KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 276
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 292:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend

State 294:
## Known stack suffix:
## ass_check
## LR(1) items:
ass_imp -> ass_check . [ KWensure ]
## Transitions:
## Reductions:
-- On KWensure
--   reduce production ass_imp -> ass_check

State 295:
## Known stack suffix:
## ass_req
## LR(1) items:
ass_req_opt -> ass_req . [ KWproof KWnote KWensure KWdeferred ]
## Transitions:
## Reductions:
-- On KWproof KWnote KWensure KWdeferred
--   reduce production ass_req_opt -> ass_req

State 296:
## Known stack suffix:
## KWproof proof_seq
## LR(1) items:
ass_check -> KWproof proof_seq . separator [ KWensure ]
proof_seq -> proof_seq . separator proof_expr [ SEMICOL NEWLINE ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## KWproof proof_seq separator
## LR(1) items:
ass_check -> KWproof proof_seq separator . [ KWensure ]
proof_seq -> proof_seq separator . proof_expr [ SEMICOL NEWLINE ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWrequire shift to state 108
-- On KWproof shift to state 278
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 279
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On proof_expr_struct shift to state 298
-- On proof_expr shift to state 299
-- On proof_all_expr_inner shift to state 300
-- On operator_expr shift to state 145
-- On info_expr shift to state 301
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_req shift to state 302
-- On ass_check shift to state 308
## Reductions:
-- On KWensure
--   reduce production ass_check -> KWproof proof_seq separator

State 298:
## Known stack suffix:
## proof_expr_struct
## LR(1) items:
proof_expr -> proof_expr_struct . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_expr -> proof_expr_struct

State 299:
## Known stack suffix:
## proof_seq separator proof_expr
## LR(1) items:
proof_seq -> proof_seq separator proof_expr . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_seq -> proof_seq separator proof_expr

State 300:
## Known stack suffix:
## proof_all_expr_inner
## LR(1) items:
proof_expr -> proof_all_expr_inner . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_expr -> proof_all_expr_inner

State 301:
## Known stack suffix:
## info_expr
## LR(1) items:
proof_expr -> info_expr . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_expr -> info_expr

State 302:
## Known stack suffix:
## ass_req
## LR(1) items:
proof_expr_struct -> ass_req . ass_check ass_ens KWend [ SEMICOL NEWLINE ]
proof_expr_struct -> ass_req . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWproof shift to state 278
-- On KWensure shift to state 289
-- On ass_ens shift to state 303
-- On ass_check shift to state 305
## Reductions:

State 303:
## Known stack suffix:
## ass_req ass_ens
## LR(1) items:
proof_expr_struct -> ass_req ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## ass_req ass_ens KWend
## LR(1) items:
proof_expr_struct -> ass_req ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_expr_struct -> ass_req ass_ens KWend

State 305:
## Known stack suffix:
## ass_req ass_check
## LR(1) items:
proof_expr_struct -> ass_req ass_check . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## ass_req ass_check ass_ens
## LR(1) items:
proof_expr_struct -> ass_req ass_check ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## ass_req ass_check ass_ens KWend
## LR(1) items:
proof_expr_struct -> ass_req ass_check ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_expr_struct -> ass_req ass_check ass_ens KWend

State 308:
## Known stack suffix:
## ass_check
## LR(1) items:
proof_expr_struct -> ass_check . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## ass_check ass_ens
## LR(1) items:
proof_expr_struct -> ass_check ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## ass_check ass_ens KWend
## LR(1) items:
proof_expr_struct -> ass_check ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_expr_struct -> ass_check ass_ens KWend

State 311:
## Known stack suffix:
## proof_expr
## LR(1) items:
proof_seq -> proof_expr . [ SEMICOL NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE
--   reduce production proof_seq -> proof_expr

State 312:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt ass_imp
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp . ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 315:
## Known stack suffix:
## formal_arguments
## LR(1) items:
formal_arguments_opt -> formal_arguments . [ SEMICOL NEWLINE KWrequire KWproof KWnote KWinherit KWensure KWend KWdeferred ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE KWrequire KWproof KWnote KWinherit KWensure KWend KWdeferred
--   reduce production formal_arguments_opt -> formal_arguments

State 316:
## Known stack suffix:
## proof_all_expr
## LR(1) items:
ass_feat -> proof_all_expr . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production ass_feat -> proof_all_expr
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production ass_feat -> proof_all_expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 317:
## Known stack suffix:
## nameopconst_info
## LR(1) items:
named_feature -> nameopconst_info . formal_arguments_info return_type_opt optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info . return_type optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info . formal_arguments_info return_type_opt ARROW info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info . return_type EQ info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LPAREN shift to state 92
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type shift to state 318
-- On formal_arguments_info shift to state 362
-- On formal_arguments shift to state 245
## Reductions:

State 318:
## Known stack suffix:
## nameopconst_info return_type
## LR(1) items:
named_feature -> nameopconst_info return_type . optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info return_type . EQ info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On EQ shift to state 319
-- On optsemi shift to state 321
## Reductions:
-- On UIDENTIFIER NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall #
--   reduce production optsemi ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ
**   There is a tension between
**   (1) reducing production optsemi ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 319:
## Known stack suffix:
## nameopconst_info return_type EQ
## LR(1) items:
named_feature -> nameopconst_info return_type EQ . info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 320
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 320:
## Known stack suffix:
## nameopconst_info return_type EQ info_expr
## LR(1) items:
named_feature -> nameopconst_info return_type EQ info_expr . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production named_feature -> nameopconst_info return_type EQ info_expr
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production named_feature -> nameopconst_info return_type EQ info_expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 321:
## Known stack suffix:
## nameopconst_info return_type optsemi
## LR(1) items:
named_feature -> nameopconst_info return_type optsemi . feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWrequire shift to state 143
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWdeferred shift to state 328
-- On require_block shift to state 329
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 346
-- On feature_body_opt shift to state 360
-- On feature_body shift to state 361
-- On ensure_block shift to state 351
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWclass KWcase KWall #
--   reduce production feature_body_opt ->
-- On KWproof KWdo
--   reduce production local_block ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body_opt ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 322:
## Known stack suffix:
## KWlocal
## LR(1) items:
local_block -> KWlocal . local_list [ KWproof KWdo ]
## Transitions:
-- On LIDENTIFIER shift to state 323
-- On local_list shift to state 353
-- On local_declaration shift to state 354
-- On identifier_list shift to state 96
-- On entity_list shift to state 357
-- On entity_group shift to state 101
## Reductions:

State 323:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
identifier_list -> LIDENTIFIER . [ SEMICOL KWproof KWdo COMMA COLON ASSIGN ]
identifier_list -> LIDENTIFIER . COMMA identifier_list [ SEMICOL KWproof KWdo COMMA COLON ASSIGN ]
local_declaration -> LIDENTIFIER . LPAREN entity_list RPAREN return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On LPAREN shift to state 324
-- On COMMA shift to state 94
## Reductions:
-- On SEMICOL KWproof KWdo COLON ASSIGN
--   reduce production identifier_list -> LIDENTIFIER

State 324:
## Known stack suffix:
## LIDENTIFIER LPAREN
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN . entity_list RPAREN return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 96
-- On entity_list shift to state 325
-- On entity_group shift to state 101
## Reductions:

State 325:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list . RPAREN return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On RPAREN shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list RPAREN
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN . return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type_opt shift to state 327
-- On return_type shift to state 244
## Reductions:
-- On KWrequire KWproof KWnote KWlocal KWensure KWdo KWdeferred
--   reduce production return_type_opt ->

State 327:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list RPAREN return_type_opt
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN return_type_opt . feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On KWrequire shift to state 143
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWdeferred shift to state 328
-- On require_block shift to state 329
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 346
-- On feature_body shift to state 350
-- On ensure_block shift to state 351
## Reductions:
-- On KWproof KWdo
--   reduce production local_block ->

State 328:
## Known stack suffix:
## KWdeferred
## LR(1) items:
feature_implementation -> KWdeferred . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production feature_implementation -> KWdeferred

State 329:
## Known stack suffix:
## require_block
## LR(1) items:
feature_body -> require_block . feature_implementation ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block . feature_implementation KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block . ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWend shift to state 330
-- On KWdeferred shift to state 328
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 340
-- On ensure_block shift to state 344
## Reductions:
-- On KWproof KWdo
--   reduce production local_block ->

State 330:
## Known stack suffix:
## require_block KWend
## LR(1) items:
feature_body -> require_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production feature_body -> require_block KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body -> require_block KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 331:
## Known stack suffix:
## local_block
## LR(1) items:
implementation_block -> local_block . do_block [ KWensure KWend ]
implementation_block -> local_block . proof_block [ KWensure KWend ]
## Transitions:
-- On KWproof shift to state 332
-- On KWdo shift to state 334
-- On proof_block shift to state 336
-- On do_block shift to state 337
## Reductions:

State 332:
## Known stack suffix:
## KWproof
## LR(1) items:
proof_block -> KWproof . compound [ KWensure KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 333
-- On atomic_expr shift to state 187
## Reductions:

State 333:
## Known stack suffix:
## KWproof compound
## LR(1) items:
proof_block -> KWproof compound . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production proof_block -> KWproof compound

State 334:
## Known stack suffix:
## KWdo
## LR(1) items:
do_block -> KWdo . compound [ KWensure KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 335
-- On atomic_expr shift to state 187
## Reductions:

State 335:
## Known stack suffix:
## KWdo compound
## LR(1) items:
do_block -> KWdo compound . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production do_block -> KWdo compound

State 336:
## Known stack suffix:
## local_block proof_block
## LR(1) items:
implementation_block -> local_block proof_block . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production implementation_block -> local_block proof_block

State 337:
## Known stack suffix:
## local_block do_block
## LR(1) items:
implementation_block -> local_block do_block . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production implementation_block -> local_block do_block

State 338:
## Known stack suffix:
## implementation_note
## LR(1) items:
feature_implementation -> implementation_note . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production feature_implementation -> implementation_note

State 339:
## Known stack suffix:
## implementation_block
## LR(1) items:
feature_implementation -> implementation_block . [ KWensure KWend ]
## Transitions:
## Reductions:
-- On KWensure KWend
--   reduce production feature_implementation -> implementation_block

State 340:
## Known stack suffix:
## require_block feature_implementation
## LR(1) items:
feature_body -> require_block feature_implementation . ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block feature_implementation . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWensure shift to state 239
-- On KWend shift to state 341
-- On ensure_block shift to state 342
## Reductions:

State 341:
## Known stack suffix:
## require_block feature_implementation KWend
## LR(1) items:
feature_body -> require_block feature_implementation KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production feature_body -> require_block feature_implementation KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body -> require_block feature_implementation KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 342:
## Known stack suffix:
## require_block feature_implementation ensure_block
## LR(1) items:
feature_body -> require_block feature_implementation ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## require_block feature_implementation ensure_block KWend
## LR(1) items:
feature_body -> require_block feature_implementation ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production feature_body -> require_block feature_implementation ensure_block KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body -> require_block feature_implementation ensure_block KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 344:
## Known stack suffix:
## require_block ensure_block
## LR(1) items:
feature_body -> require_block ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## require_block ensure_block KWend
## LR(1) items:
feature_body -> require_block ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production feature_body -> require_block ensure_block KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body -> require_block ensure_block KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 346:
## Known stack suffix:
## feature_implementation
## LR(1) items:
feature_body -> feature_implementation . ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> feature_implementation . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWensure shift to state 239
-- On KWend shift to state 347
-- On ensure_block shift to state 348
## Reductions:

State 347:
## Known stack suffix:
## feature_implementation KWend
## LR(1) items:
feature_body -> feature_implementation KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production feature_body -> feature_implementation KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body -> feature_implementation KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 348:
## Known stack suffix:
## feature_implementation ensure_block
## LR(1) items:
feature_body -> feature_implementation ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## feature_implementation ensure_block KWend
## LR(1) items:
feature_body -> feature_implementation ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production feature_body -> feature_implementation ensure_block KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body -> feature_implementation ensure_block KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 350:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list RPAREN return_type_opt feature_body
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN return_type_opt feature_body . [ SEMICOL KWproof KWdo ]
## Transitions:
## Reductions:
-- On SEMICOL KWproof KWdo
--   reduce production local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN return_type_opt feature_body

State 351:
## Known stack suffix:
## ensure_block
## LR(1) items:
feature_body -> ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## ensure_block KWend
## LR(1) items:
feature_body -> ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall #
--   reduce production feature_body -> ensure_block KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body -> ensure_block KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 353:
## Known stack suffix:
## KWlocal local_list
## LR(1) items:
local_block -> KWlocal local_list . [ KWproof KWdo ]
## Transitions:
## Reductions:
-- On KWproof KWdo
--   reduce production local_block -> KWlocal local_list

State 354:
## Known stack suffix:
## local_declaration
## LR(1) items:
local_list -> local_declaration . [ KWproof KWdo ]
local_list -> local_declaration . SEMICOL local_list [ KWproof KWdo ]
## Transitions:
-- On SEMICOL shift to state 355
## Reductions:
-- On KWproof KWdo
--   reduce production local_list -> local_declaration

State 355:
## Known stack suffix:
## local_declaration SEMICOL
## LR(1) items:
local_list -> local_declaration SEMICOL . local_list [ KWproof KWdo ]
## Transitions:
-- On LIDENTIFIER shift to state 323
-- On local_list shift to state 356
-- On local_declaration shift to state 354
-- On identifier_list shift to state 96
-- On entity_list shift to state 357
-- On entity_group shift to state 101
## Reductions:

State 356:
## Known stack suffix:
## local_declaration SEMICOL local_list
## LR(1) items:
local_list -> local_declaration SEMICOL local_list . [ KWproof KWdo ]
## Transitions:
## Reductions:
-- On KWproof KWdo
--   reduce production local_list -> local_declaration SEMICOL local_list

State 357:
## Known stack suffix:
## entity_list
## LR(1) items:
local_declaration -> entity_list . [ SEMICOL KWproof KWdo ]
local_declaration -> entity_list . ASSIGN expr [ SEMICOL KWproof KWdo ]
## Transitions:
-- On ASSIGN shift to state 358
## Reductions:
-- On SEMICOL KWproof KWdo
--   reduce production local_declaration -> entity_list

State 358:
## Known stack suffix:
## entity_list ASSIGN
## LR(1) items:
local_declaration -> entity_list ASSIGN . expr [ SEMICOL KWproof KWdo ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 359
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 359:
## Known stack suffix:
## entity_list ASSIGN expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
local_declaration -> entity_list ASSIGN expr . [ SEMICOL KWproof KWdo ]
operator_expr -> expr . PLUS expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On SEMICOL KWproof KWdo
--   reduce production local_declaration -> entity_list ASSIGN expr

State 360:
## Known stack suffix:
## nameopconst_info return_type optsemi feature_body_opt
## LR(1) items:
named_feature -> nameopconst_info return_type optsemi feature_body_opt . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production named_feature -> nameopconst_info return_type optsemi feature_body_opt
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production named_feature -> nameopconst_info return_type optsemi feature_body_opt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 361:
## Known stack suffix:
## feature_body
## LR(1) items:
feature_body_opt -> feature_body . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production feature_body_opt -> feature_body
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body_opt -> feature_body
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 362:
## Known stack suffix:
## nameopconst_info formal_arguments_info
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info . return_type_opt optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info formal_arguments_info . return_type_opt ARROW info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type_opt shift to state 363
-- On return_type shift to state 244
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall ARROW #
--   reduce production return_type_opt ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EXCLAM COLON ARROW
**   There is a tension between
**   (1) reducing production return_type_opt ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 363:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt . optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info formal_arguments_info return_type_opt . ARROW info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On ARROW shift to state 364
-- On optsemi shift to state 366
## Reductions:
-- On UIDENTIFIER NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall #
--   reduce production optsemi ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall ARROW
**   There is a tension between
**   (1) reducing production optsemi ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 364:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt ARROW
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt ARROW . info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 365
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 365:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt ARROW info_expr
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt ARROW info_expr . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production named_feature -> nameopconst_info formal_arguments_info return_type_opt ARROW info_expr
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production named_feature -> nameopconst_info formal_arguments_info return_type_opt ARROW info_expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 366:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt optsemi
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt optsemi . feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWrequire shift to state 143
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWdeferred shift to state 328
-- On require_block shift to state 329
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 346
-- On feature_body_opt shift to state 367
-- On feature_body shift to state 361
-- On ensure_block shift to state 351
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWclass KWcase KWall #
--   reduce production feature_body_opt ->
-- On KWproof KWdo
--   reduce production local_block ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production feature_body_opt ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 367:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt optsemi feature_body_opt
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt optsemi feature_body_opt . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production named_feature -> nameopconst_info formal_arguments_info return_type_opt optsemi feature_body_opt
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production named_feature -> nameopconst_info formal_arguments_info return_type_opt optsemi feature_body_opt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 368:
## Known stack suffix:
## nameopconst
## LR(1) items:
nameopconst_info -> nameopconst . [ SEMICOL NEWLINE LPAREN KWinherit KWend EXCLAM COLON ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE LPAREN KWinherit KWend EXCLAM COLON
--   reduce production nameopconst_info -> nameopconst

State 369:
## Known stack suffix:
## named_feature
## LR(1) items:
decl -> named_feature . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production decl -> named_feature
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production decl -> named_feature
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 370:
## Known stack suffix:
## header_mark
## LR(1) items:
class_declaration -> header_mark . KWclass class_name class_generics create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWclass shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## header_mark KWclass
## LR(1) items:
class_declaration -> header_mark KWclass . class_name class_generics create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On UIDENTIFIER shift to state 372
-- On LIDENTIFIER shift to state 2
-- On path shift to state 373
-- On dotted_id_list shift to state 36
-- On class_name shift to state 375
## Reductions:

State 372:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
class_name -> UIDENTIFIER . [ LBRACKET KWinherit KWend KWcreate ]
## Transitions:
## Reductions:
-- On LBRACKET KWinherit KWend KWcreate
--   reduce production class_name -> UIDENTIFIER

State 373:
## Known stack suffix:
## path
## LR(1) items:
class_name -> path . UIDENTIFIER [ LBRACKET KWinherit KWend KWcreate ]
## Transitions:
-- On UIDENTIFIER shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## path UIDENTIFIER
## LR(1) items:
class_name -> path UIDENTIFIER . [ LBRACKET KWinherit KWend KWcreate ]
## Transitions:
## Reductions:
-- On LBRACKET KWinherit KWend KWcreate
--   reduce production class_name -> path UIDENTIFIER

State 375:
## Known stack suffix:
## header_mark KWclass class_name
## LR(1) items:
class_declaration -> header_mark KWclass class_name . class_generics create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LBRACKET shift to state 376
-- On class_generics shift to state 382
## Reductions:
-- On KWinherit KWend KWcreate
--   reduce production class_generics ->

State 376:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_generics -> LBRACKET . uidentifier_list RBRACKET [ KWinherit KWend KWcreate ]
## Transitions:
-- On UIDENTIFIER shift to state 377
-- On uidentifier_list shift to state 380
## Reductions:

State 377:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
uidentifier_list -> UIDENTIFIER . [ RBRACKET ]
uidentifier_list -> UIDENTIFIER . COMMA uidentifier_list [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 378
## Reductions:
-- On RBRACKET
--   reduce production uidentifier_list -> UIDENTIFIER

State 378:
## Known stack suffix:
## UIDENTIFIER COMMA
## LR(1) items:
uidentifier_list -> UIDENTIFIER COMMA . uidentifier_list [ RBRACKET ]
## Transitions:
-- On UIDENTIFIER shift to state 377
-- On uidentifier_list shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## UIDENTIFIER COMMA uidentifier_list
## LR(1) items:
uidentifier_list -> UIDENTIFIER COMMA uidentifier_list . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production uidentifier_list -> UIDENTIFIER COMMA uidentifier_list

State 380:
## Known stack suffix:
## LBRACKET uidentifier_list
## LR(1) items:
class_generics -> LBRACKET uidentifier_list . RBRACKET [ KWinherit KWend KWcreate ]
## Transitions:
-- On RBRACKET shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## LBRACKET uidentifier_list RBRACKET
## LR(1) items:
class_generics -> LBRACKET uidentifier_list RBRACKET . [ KWinherit KWend KWcreate ]
## Transitions:
## Reductions:
-- On KWinherit KWend KWcreate
--   reduce production class_generics -> LBRACKET uidentifier_list RBRACKET

State 382:
## Known stack suffix:
## header_mark KWclass class_name class_generics
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics . create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWcreate shift to state 383
-- On create_clause shift to state 391
## Reductions:
-- On KWinherit KWend
--   reduce production create_clause ->

State 383:
## Known stack suffix:
## KWcreate
## LR(1) items:
create_clause -> KWcreate . constructor_list [ KWinherit KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On nameopconst_info shift to state 384
-- On nameopconst shift to state 368
-- On featopconst shift to state 386
-- On constructor_list shift to state 387
-- On constructor shift to state 388
## Reductions:

State 384:
## Known stack suffix:
## nameopconst_info
## LR(1) items:
constructor -> nameopconst_info . formal_arguments_opt [ SEMICOL NEWLINE KWinherit KWend ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments_opt shift to state 385
-- On formal_arguments shift to state 315
## Reductions:
-- On SEMICOL NEWLINE KWinherit KWend
--   reduce production formal_arguments_opt ->

State 385:
## Known stack suffix:
## nameopconst_info formal_arguments_opt
## LR(1) items:
constructor -> nameopconst_info formal_arguments_opt . [ SEMICOL NEWLINE KWinherit KWend ]
## Transitions:
## Reductions:
-- On SEMICOL NEWLINE KWinherit KWend
--   reduce production constructor -> nameopconst_info formal_arguments_opt

State 386:
## Known stack suffix:
## featopconst
## LR(1) items:
nameopconst -> featopconst . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Reductions:
-- On SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON
--   reduce production nameopconst -> featopconst

State 387:
## Known stack suffix:
## KWcreate constructor_list
## LR(1) items:
create_clause -> KWcreate constructor_list . [ KWinherit KWend ]
## Transitions:
## Reductions:
-- On KWinherit KWend
--   reduce production create_clause -> KWcreate constructor_list

State 388:
## Known stack suffix:
## constructor
## LR(1) items:
constructor_list -> constructor . [ KWinherit KWend ]
constructor_list -> constructor . separator constructor_list [ KWinherit KWend ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 389
## Reductions:
-- On KWinherit KWend
--   reduce production constructor_list -> constructor

State 389:
## Known stack suffix:
## constructor separator
## LR(1) items:
constructor_list -> constructor separator . constructor_list [ KWinherit KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On nameopconst_info shift to state 384
-- On nameopconst shift to state 368
-- On featopconst shift to state 386
-- On constructor_list shift to state 390
-- On constructor shift to state 388
## Reductions:

State 390:
## Known stack suffix:
## constructor separator constructor_list
## LR(1) items:
constructor_list -> constructor separator constructor_list . [ KWinherit KWend ]
## Transitions:
## Reductions:
-- On KWinherit KWend
--   reduce production constructor_list -> constructor separator constructor_list

State 391:
## Known stack suffix:
## header_mark KWclass class_name class_generics create_clause
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics create_clause . inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWinherit shift to state 392
-- On inherit_clause shift to state 416
## Reductions:
-- On KWend
--   reduce production inherit_clause ->

State 392:
## Known stack suffix:
## KWinherit
## LR(1) items:
inherit_clause -> KWinherit . parent_list [ KWend ]
## Transitions:
-- On KWghost shift to state 393
-- On parent_list shift to state 394
-- On parent shift to state 395
-- On optghost shift to state 398
## Reductions:
-- On UIDENTIFIER LPAREN LIDENTIFIER LBRACKET
--   reduce production optghost ->

State 393:
## Known stack suffix:
## KWghost
## LR(1) items:
optghost -> KWghost . [ UIDENTIFIER LPAREN LIDENTIFIER LBRACKET ]
## Transitions:
## Reductions:
-- On UIDENTIFIER LPAREN LIDENTIFIER LBRACKET
--   reduce production optghost -> KWghost

State 394:
## Known stack suffix:
## KWinherit parent_list
## LR(1) items:
inherit_clause -> KWinherit parent_list . [ KWend ]
## Transitions:
## Reductions:
-- On KWend
--   reduce production inherit_clause -> KWinherit parent_list

State 395:
## Known stack suffix:
## parent
## LR(1) items:
parent_list -> parent . [ KWend ]
parent_list -> parent . optsemi parent_list [ KWend ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 396
## Reductions:
-- On UIDENTIFIER LPAREN LIDENTIFIER LBRACKET KWghost
--   reduce production optsemi ->
-- On KWend
--   reduce production parent_list -> parent

State 396:
## Known stack suffix:
## parent optsemi
## LR(1) items:
parent_list -> parent optsemi . parent_list [ KWend ]
## Transitions:
-- On KWghost shift to state 393
-- On parent_list shift to state 397
-- On parent shift to state 395
-- On optghost shift to state 398
## Reductions:
-- On UIDENTIFIER LPAREN LIDENTIFIER LBRACKET
--   reduce production optghost ->

State 397:
## Known stack suffix:
## parent optsemi parent_list
## LR(1) items:
parent_list -> parent optsemi parent_list . [ KWend ]
## Transitions:
## Reductions:
-- On KWend
--   reduce production parent_list -> parent optsemi parent_list

State 398:
## Known stack suffix:
## optghost
## LR(1) items:
parent -> optghost . type_nt feature_adaptation [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 399
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 399:
## Known stack suffix:
## optghost type_nt
## LR(1) items:
parent -> optghost type_nt . feature_adaptation [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On KWrename shift to state 400
-- On feature_adaptation shift to state 415
## Reductions:
-- On UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend
--   reduce production feature_adaptation ->

State 400:
## Known stack suffix:
## KWrename
## LR(1) items:
feature_adaptation -> KWrename . rename_list KWend [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On rename_list shift to state 401
-- On rename_item shift to state 403
-- On nameopconst shift to state 406
-- On name_sig shift to state 412
-- On featopconst shift to state 386
## Reductions:

State 401:
## Known stack suffix:
## KWrename rename_list
## LR(1) items:
feature_adaptation -> KWrename rename_list . KWend [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On KWend shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## KWrename rename_list KWend
## LR(1) items:
feature_adaptation -> KWrename rename_list KWend . [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend
--   reduce production feature_adaptation -> KWrename rename_list KWend

State 403:
## Known stack suffix:
## rename_item
## LR(1) items:
rename_list -> rename_item . [ KWend ]
rename_list -> rename_item . optsemi rename_list [ KWend ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 404
## Reductions:
-- On NUMBER LPAREN LIDENTIFIER KWtrue KWfalse
--   reduce production optsemi ->
-- On KWend
--   reduce production rename_list -> rename_item

State 404:
## Known stack suffix:
## rename_item optsemi
## LR(1) items:
rename_list -> rename_item optsemi . rename_list [ KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On rename_list shift to state 405
-- On rename_item shift to state 403
-- On nameopconst shift to state 406
-- On name_sig shift to state 412
-- On featopconst shift to state 386
## Reductions:

State 405:
## Known stack suffix:
## rename_item optsemi rename_list
## LR(1) items:
rename_list -> rename_item optsemi rename_list . [ KWend ]
## Transitions:
## Reductions:
-- On KWend
--   reduce production rename_list -> rename_item optsemi rename_list

State 406:
## Known stack suffix:
## nameopconst
## LR(1) items:
name_sig -> nameopconst . [ KWas ]
name_sig -> nameopconst . LPAREN type_list RPAREN [ KWas ]
name_sig -> nameopconst . LPAREN type_list RPAREN COLON type_nt [ KWas ]
## Transitions:
-- On LPAREN shift to state 407
## Reductions:
-- On KWas
--   reduce production name_sig -> nameopconst

State 407:
## Known stack suffix:
## nameopconst LPAREN
## LR(1) items:
name_sig -> nameopconst LPAREN . type_list RPAREN [ KWas ]
name_sig -> nameopconst LPAREN . type_list RPAREN COLON type_nt [ KWas ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 49
-- On type_list_min2 shift to state 50
-- On type_list shift to state 408
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 408:
## Known stack suffix:
## nameopconst LPAREN type_list
## LR(1) items:
name_sig -> nameopconst LPAREN type_list . RPAREN [ KWas ]
name_sig -> nameopconst LPAREN type_list . RPAREN COLON type_nt [ KWas ]
## Transitions:
-- On RPAREN shift to state 409
## Reductions:

State 409:
## Known stack suffix:
## nameopconst LPAREN type_list RPAREN
## LR(1) items:
name_sig -> nameopconst LPAREN type_list RPAREN . [ KWas ]
name_sig -> nameopconst LPAREN type_list RPAREN . COLON type_nt [ KWas ]
## Transitions:
-- On COLON shift to state 410
## Reductions:
-- On KWas
--   reduce production name_sig -> nameopconst LPAREN type_list RPAREN

State 410:
## Known stack suffix:
## nameopconst LPAREN type_list RPAREN COLON
## LR(1) items:
name_sig -> nameopconst LPAREN type_list RPAREN COLON . type_nt [ KWas ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 411
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 411:
## Known stack suffix:
## nameopconst LPAREN type_list RPAREN COLON type_nt
## LR(1) items:
name_sig -> nameopconst LPAREN type_list RPAREN COLON type_nt . [ KWas ]
## Transitions:
## Reductions:
-- On KWas
--   reduce production name_sig -> nameopconst LPAREN type_list RPAREN COLON type_nt

State 412:
## Known stack suffix:
## name_sig
## LR(1) items:
rename_item -> name_sig . KWas nameopconst [ SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWfalse KWend ]
## Transitions:
-- On KWas shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## name_sig KWas
## LR(1) items:
rename_item -> name_sig KWas . nameopconst [ SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWfalse KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On nameopconst shift to state 414
-- On featopconst shift to state 386
## Reductions:

State 414:
## Known stack suffix:
## name_sig KWas nameopconst
## LR(1) items:
rename_item -> name_sig KWas nameopconst . [ SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWfalse KWend ]
## Transitions:
## Reductions:
-- On SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWfalse KWend
--   reduce production rename_item -> name_sig KWas nameopconst

State 415:
## Known stack suffix:
## optghost type_nt feature_adaptation
## LR(1) items:
parent -> optghost type_nt feature_adaptation . [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend
--   reduce production parent -> optghost type_nt feature_adaptation

State 416:
## Known stack suffix:
## header_mark KWclass class_name class_generics create_clause inherit_clause
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics create_clause inherit_clause . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## header_mark KWclass class_name class_generics create_clause inherit_clause KWend
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics create_clause inherit_clause KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production class_declaration -> header_mark KWclass class_name class_generics create_clause inherit_clause KWend
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production class_declaration -> header_mark KWclass class_name class_generics create_clause inherit_clause KWend
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 418:
## Known stack suffix:
## formal_generic
## LR(1) items:
decl -> formal_generic . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production decl -> formal_generic
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production decl -> formal_generic
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 419:
## Known stack suffix:
## decls optsemi decl
## LR(1) items:
decls -> decls optsemi decl . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production decls -> decls optsemi decl
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production decls -> decls optsemi decl
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 420:
## Known stack suffix:
## class_declaration
## LR(1) items:
decl -> class_declaration . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production decl -> class_declaration
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production decl -> class_declaration
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 421:
## Known stack suffix:
## ass_feat
## LR(1) items:
decl -> ass_feat . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Reductions:
-- On UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall #
--   reduce production decl -> ass_feat
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production decl -> ass_feat
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 422:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 423:
## Known stack suffix:
## decls
## LR(1) items:
decls -> decls . optsemi decl [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
file -> decls . [ # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 17
## Reductions:
-- On #
--   reduce production file -> decls
-- On UIDENTIFIER NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
--   reduce production optsemi ->
** End-of-stream conflict on UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production file -> decls
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 424:
## Known stack suffix:
##
## LR(1) items:
use_block_opt' -> . use_block_opt [ # ]
## Transitions:
-- On UIDENTIFIER shift to state 18
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWuse shift to state 1
-- On KWtrue shift to state 86
-- On KWimmutable shift to state 87
-- On KWfalse shift to state 88
-- On KWdeferred shift to state 89
-- On KWcase shift to state 90
-- On KWall shift to state 91
-- On use_block_opt shift to state 425
-- On use_block shift to state 426
-- On proof_all_expr shift to state 316
-- On nameopconst_info shift to state 317
-- On nameopconst shift to state 368
-- On named_feature shift to state 369
-- On header_mark shift to state 370
-- On formal_generic shift to state 418
-- On featopconst shift to state 386
-- On decl shift to state 427
-- On class_declaration shift to state 420
-- On ass_feat shift to state 421
## Reductions:
-- On KWclass
--   reduce production header_mark ->
-- On #
--   reduce production use_block_opt ->
** End-of-stream conflict on UIDENTIFIER NUMBER LPAREN LIDENTIFIER KWuse KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall
**   There is a tension between
**   (1) reducing production use_block_opt ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 425:
## Known stack suffix:
## use_block_opt
## LR(1) items:
use_block_opt' -> use_block_opt . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept use_block_opt

State 426:
## Known stack suffix:
## use_block
## LR(1) items:
use_block_opt -> use_block . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_block_opt -> use_block

State 427:
## Known stack suffix:
## decl
## LR(1) items:
use_block_opt -> decl . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_block_opt -> decl

