State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On KWuse shift to state 1
-- On use_block shift to state 13
-- On file shift to state 422
-- On decls shift to state 423
## Reductions:
-- On UIDENTIFIER reduce production decls ->
-- On SEMICOL reduce production decls ->
-- On NUMBER reduce production decls ->
-- On LPAREN reduce production decls ->
-- On LIDENTIFIER reduce production decls ->
-- On KWtrue reduce production decls ->
-- On KWimmutable reduce production decls ->
-- On KWfalse reduce production decls ->
-- On KWdeferred reduce production decls ->
-- On KWclass reduce production decls ->
-- On KWcase reduce production decls ->
-- On KWall reduce production decls ->

State 1:
## Known stack suffix:
## KWuse
## LR(1) items:
use_block -> KWuse . module_list KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LIDENTIFIER shift to state 2
-- On one_module shift to state 3
-- On module_list shift to state 11
-- On dotted_id_list shift to state 8
## Reductions:

State 2:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
dotted_id_list -> LIDENTIFIER . [ SEMICOL NEWLINE KWend DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dotted_id_list -> LIDENTIFIER

State 3:
## Known stack suffix:
## one_module
## LR(1) items:
module_list -> one_module . [ KWend ]
module_list -> one_module . separator module_list [ KWend ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 6
## Reductions:
-- On KWend reduce production module_list -> one_module

State 4:
## Known stack suffix:
## SEMICOL
## LR(1) items:
separator -> SEMICOL . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separator -> SEMICOL

State 5:
## Known stack suffix:
## NEWLINE
## LR(1) items:
separator -> NEWLINE . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separator -> NEWLINE

State 6:
## Known stack suffix:
## one_module separator
## LR(1) items:
module_list -> one_module separator . module_list [ KWend ]
## Transitions:
-- On LIDENTIFIER shift to state 2
-- On one_module shift to state 3
-- On module_list shift to state 7
-- On dotted_id_list shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## one_module separator module_list
## LR(1) items:
module_list -> one_module separator module_list . [ KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_list -> one_module separator module_list

State 8:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ SEMICOL NEWLINE KWend DOT ]
one_module -> dotted_id_list . [ SEMICOL NEWLINE KWend ]
## Transitions:
-- On DOT shift to state 9
## Reductions:
-- On SEMICOL reduce production one_module -> dotted_id_list
-- On NEWLINE reduce production one_module -> dotted_id_list
-- On KWend reduce production one_module -> dotted_id_list

State 9:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ SEMICOL NEWLINE KWend DOT ]
## Transitions:
-- On LIDENTIFIER shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## dotted_id_list DOT LIDENTIFIER
## LR(1) items:
dotted_id_list -> dotted_id_list DOT LIDENTIFIER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dotted_id_list -> dotted_id_list DOT LIDENTIFIER

State 11:
## Known stack suffix:
## KWuse module_list
## LR(1) items:
use_block -> KWuse module_list . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## KWuse module_list KWend
## LR(1) items:
use_block -> KWuse module_list KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production use_block -> KWuse module_list KWend

State 13:
## Known stack suffix:
## use_block
## LR(1) items:
file -> use_block . optsemi decls [ # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 15
## Reductions:
-- On UIDENTIFIER reduce production optsemi ->
-- On NUMBER reduce production optsemi ->
-- On LPAREN reduce production optsemi ->
-- On LIDENTIFIER reduce production optsemi ->
-- On KWtrue reduce production optsemi ->
-- On KWimmutable reduce production optsemi ->
-- On KWfalse reduce production optsemi ->
-- On KWdeferred reduce production optsemi ->
-- On KWclass reduce production optsemi ->
-- On KWcase reduce production optsemi ->
-- On KWall reduce production optsemi ->

State 14:
## Known stack suffix:
## SEMICOL
## LR(1) items:
optsemi -> SEMICOL . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER LBRACKET KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWghost KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optsemi -> SEMICOL

State 15:
## Known stack suffix:
## use_block optsemi
## LR(1) items:
file -> use_block optsemi . decls [ # ]
## Transitions:
-- On decls shift to state 16
## Default reduction:
-- After reading the next token, reduce production decls ->

State 16:
## Known stack suffix:
## use_block optsemi decls
## LR(1) items:
decls -> decls . optsemi decl [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
file -> use_block optsemi decls . [ # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 17
## Reductions:
-- On UIDENTIFIER reduce production optsemi ->
-- On NUMBER reduce production optsemi ->
-- On LPAREN reduce production optsemi ->
-- On LIDENTIFIER reduce production optsemi ->
-- On KWtrue reduce production optsemi ->
-- On KWimmutable reduce production optsemi ->
-- On KWfalse reduce production optsemi ->
-- On KWdeferred reduce production optsemi ->
-- On KWclass reduce production optsemi ->
-- On KWcase reduce production optsemi ->
-- On KWall reduce production optsemi ->

State 17:
## Known stack suffix:
## decls optsemi
## LR(1) items:
decls -> decls optsemi . decl [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On UIDENTIFIER shift to state 18
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWimmutable shift to state 87
-- On KWfalse shift to state 88
-- On KWdeferred shift to state 89
-- On KWcase shift to state 90
-- On KWall shift to state 91
-- On proof_all_expr shift to state 316
-- On nameopconst_info shift to state 317
-- On nameopconst shift to state 368
-- On named_feature shift to state 369
-- On header_mark shift to state 370
-- On formal_generic shift to state 418
-- On featopconst shift to state 386
-- On decl shift to state 419
-- On class_declaration shift to state 420
-- On ass_feat shift to state 421
## Reductions:
-- On KWclass reduce production header_mark ->

State 18:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
formal_generic -> UIDENTIFIER . COLON type_nt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On COLON shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## UIDENTIFIER COLON
## LR(1) items:
formal_generic -> UIDENTIFIER COLON . type_nt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 54
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 20:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
simple_type -> UIDENTIFIER . actual_generics [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On LBRACKET shift to state 21
-- On actual_generics shift to state 53
## Reductions:
-- On UIDENTIFIER reduce production actual_generics ->
-- On TIMES reduce production actual_generics ->
-- On SEMICOL reduce production actual_generics ->
-- On RPAREN reduce production actual_generics ->
-- On RBRACKET reduce production actual_generics ->
-- On RBRACE reduce production actual_generics ->
-- On QMARK reduce production actual_generics ->
-- On PLUS reduce production actual_generics ->
-- On NUMBER reduce production actual_generics ->
-- On NOTIN reduce production actual_generics ->
-- On NEWLINE reduce production actual_generics ->
-- On NEQ reduce production actual_generics ->
-- On MINUS reduce production actual_generics ->
-- On LT reduce production actual_generics ->
-- On LPAREN reduce production actual_generics ->
-- On LIDENTIFIER reduce production actual_generics ->
-- On LE reduce production actual_generics ->
-- On KWtrue reduce production actual_generics ->
-- On KWthen reduce production actual_generics ->
-- On KWrequire reduce production actual_generics ->
-- On KWrename reduce production actual_generics ->
-- On KWproof reduce production actual_generics ->
-- On KWor reduce production actual_generics ->
-- On KWnote reduce production actual_generics ->
-- On KWlocal reduce production actual_generics ->
-- On KWin reduce production actual_generics ->
-- On KWimmutable reduce production actual_generics ->
-- On KWghost reduce production actual_generics ->
-- On KWfalse reduce production actual_generics ->
-- On KWensure reduce production actual_generics ->
-- On KWend reduce production actual_generics ->
-- On KWelseif reduce production actual_generics ->
-- On KWelse reduce production actual_generics ->
-- On KWdo reduce production actual_generics ->
-- On KWdeferred reduce production actual_generics ->
-- On KWclass reduce production actual_generics ->
-- On KWcase reduce production actual_generics ->
-- On KWas reduce production actual_generics ->
-- On KWand reduce production actual_generics ->
-- On KWall reduce production actual_generics ->
-- On GT reduce production actual_generics ->
-- On GE reduce production actual_generics ->
-- On EQ reduce production actual_generics ->
-- On DOT reduce production actual_generics ->
-- On DIVIDE reduce production actual_generics ->
-- On DCOLON reduce production actual_generics ->
-- On DBAR reduce production actual_generics ->
-- On DARROW reduce production actual_generics ->
-- On COMMA reduce production actual_generics ->
-- On COLON reduce production actual_generics ->
-- On CARET reduce production actual_generics ->
-- On BAR reduce production actual_generics ->
-- On ASSIGN reduce production actual_generics ->
-- On ARROW reduce production actual_generics ->

State 21:
## Known stack suffix:
## LBRACKET
## LR(1) items:
actual_generics -> LBRACKET . type_list RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 49
-- On type_list_min2 shift to state 50
-- On type_list shift to state 51
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 22:
## Known stack suffix:
## LPAREN
## LR(1) items:
elem_type -> LPAREN . type_nt RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
tuple_type -> LPAREN . type_list_min2 RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 38
-- On type_list_min2 shift to state 47
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 23:
## Known stack suffix:
## LBRACKET
## LR(1) items:
list_type -> LBRACKET . elem_type RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 32
-- On dotted_id_list shift to state 36
## Reductions:

State 24:
## Known stack suffix:
## tuple_type
## LR(1) items:
elem_type -> tuple_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem_type -> tuple_type

State 25:
## Known stack suffix:
## star_type
## LR(1) items:
elem_type -> star_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem_type -> star_type

State 26:
## Known stack suffix:
## simple_type
## LR(1) items:
elem_type -> simple_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem_type -> simple_type

State 27:
## Known stack suffix:
## qmark_type
## LR(1) items:
elem_type -> qmark_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem_type -> qmark_type

State 28:
## Known stack suffix:
## path
## LR(1) items:
simple_type -> path . UIDENTIFIER actual_generics [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## path UIDENTIFIER
## LR(1) items:
simple_type -> path UIDENTIFIER . actual_generics [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On LBRACKET shift to state 21
-- On actual_generics shift to state 30
## Reductions:
-- On UIDENTIFIER reduce production actual_generics ->
-- On TIMES reduce production actual_generics ->
-- On SEMICOL reduce production actual_generics ->
-- On RPAREN reduce production actual_generics ->
-- On RBRACKET reduce production actual_generics ->
-- On RBRACE reduce production actual_generics ->
-- On QMARK reduce production actual_generics ->
-- On PLUS reduce production actual_generics ->
-- On NUMBER reduce production actual_generics ->
-- On NOTIN reduce production actual_generics ->
-- On NEWLINE reduce production actual_generics ->
-- On NEQ reduce production actual_generics ->
-- On MINUS reduce production actual_generics ->
-- On LT reduce production actual_generics ->
-- On LPAREN reduce production actual_generics ->
-- On LIDENTIFIER reduce production actual_generics ->
-- On LE reduce production actual_generics ->
-- On KWtrue reduce production actual_generics ->
-- On KWthen reduce production actual_generics ->
-- On KWrequire reduce production actual_generics ->
-- On KWrename reduce production actual_generics ->
-- On KWproof reduce production actual_generics ->
-- On KWor reduce production actual_generics ->
-- On KWnote reduce production actual_generics ->
-- On KWlocal reduce production actual_generics ->
-- On KWin reduce production actual_generics ->
-- On KWimmutable reduce production actual_generics ->
-- On KWghost reduce production actual_generics ->
-- On KWfalse reduce production actual_generics ->
-- On KWensure reduce production actual_generics ->
-- On KWend reduce production actual_generics ->
-- On KWelseif reduce production actual_generics ->
-- On KWelse reduce production actual_generics ->
-- On KWdo reduce production actual_generics ->
-- On KWdeferred reduce production actual_generics ->
-- On KWclass reduce production actual_generics ->
-- On KWcase reduce production actual_generics ->
-- On KWas reduce production actual_generics ->
-- On KWand reduce production actual_generics ->
-- On KWall reduce production actual_generics ->
-- On GT reduce production actual_generics ->
-- On GE reduce production actual_generics ->
-- On EQ reduce production actual_generics ->
-- On DOT reduce production actual_generics ->
-- On DIVIDE reduce production actual_generics ->
-- On DCOLON reduce production actual_generics ->
-- On DBAR reduce production actual_generics ->
-- On DARROW reduce production actual_generics ->
-- On COMMA reduce production actual_generics ->
-- On COLON reduce production actual_generics ->
-- On CARET reduce production actual_generics ->
-- On BAR reduce production actual_generics ->
-- On ASSIGN reduce production actual_generics ->
-- On ARROW reduce production actual_generics ->

State 30:
## Known stack suffix:
## path UIDENTIFIER actual_generics
## LR(1) items:
simple_type -> path UIDENTIFIER actual_generics . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_type -> path UIDENTIFIER actual_generics

State 31:
## Known stack suffix:
## list_type
## LR(1) items:
elem_type -> list_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem_type -> list_type

State 32:
## Known stack suffix:
## LBRACKET elem_type
## LR(1) items:
list_type -> LBRACKET elem_type . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
qmark_type -> elem_type . QMARK [ TIMES RBRACKET QMARK ]
star_type -> elem_type . TIMES [ TIMES RBRACKET QMARK ]
## Transitions:
-- On TIMES shift to state 33
-- On RBRACKET shift to state 34
-- On QMARK shift to state 35
## Reductions:

State 33:
## Known stack suffix:
## elem_type TIMES
## LR(1) items:
star_type -> elem_type TIMES . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production star_type -> elem_type TIMES

State 34:
## Known stack suffix:
## LBRACKET elem_type RBRACKET
## LR(1) items:
list_type -> LBRACKET elem_type RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_type -> LBRACKET elem_type RBRACKET

State 35:
## Known stack suffix:
## elem_type QMARK
## LR(1) items:
qmark_type -> elem_type QMARK . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmark_type -> elem_type QMARK

State 36:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ DOT ]
path -> dotted_id_list . DOT [ UIDENTIFIER ]
## Transitions:
-- On DOT shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ DOT ]
path -> dotted_id_list DOT . [ UIDENTIFIER ]
## Transitions:
-- On LIDENTIFIER shift to state 10
## Reductions:
-- On UIDENTIFIER reduce production path -> dotted_id_list DOT

State 38:
## Known stack suffix:
## LPAREN type_nt
## LR(1) items:
elem_type -> LPAREN type_nt . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
type_list_min2 -> type_nt . COMMA type_nt [ RPAREN ]
type_list_min2 -> type_nt . COMMA type_list_min2 [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 39
-- On COMMA shift to state 40
## Reductions:

State 39:
## Known stack suffix:
## LPAREN type_nt RPAREN
## LR(1) items:
elem_type -> LPAREN type_nt RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elem_type -> LPAREN type_nt RPAREN

State 40:
## Known stack suffix:
## type_nt COMMA
## LR(1) items:
type_list_min2 -> type_nt COMMA . type_nt [ RPAREN RBRACKET ]
type_list_min2 -> type_nt COMMA . type_list_min2 [ RPAREN RBRACKET ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 41
-- On type_list_min2 shift to state 42
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 41:
## Known stack suffix:
## type_nt COMMA type_nt
## LR(1) items:
type_list_min2 -> type_nt . COMMA type_nt [ RPAREN RBRACKET ]
type_list_min2 -> type_nt COMMA type_nt . [ RPAREN RBRACKET ]
type_list_min2 -> type_nt . COMMA type_list_min2 [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:
-- On RPAREN reduce production type_list_min2 -> type_nt COMMA type_nt
-- On RBRACKET reduce production type_list_min2 -> type_nt COMMA type_nt

State 42:
## Known stack suffix:
## type_nt COMMA type_list_min2
## LR(1) items:
type_list_min2 -> type_nt COMMA type_list_min2 . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_list_min2 -> type_nt COMMA type_list_min2

State 43:
## Known stack suffix:
## elem_type
## LR(1) items:
arrow_type -> elem_type . ARROW type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
type_nt -> elem_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
-- On ARROW shift to state 44
## Reductions:
-- On UIDENTIFIER reduce production type_nt -> elem_type
-- On SEMICOL reduce production type_nt -> elem_type
-- On RPAREN reduce production type_nt -> elem_type
-- On RBRACKET reduce production type_nt -> elem_type
-- On RBRACE reduce production type_nt -> elem_type
-- On PLUS reduce production type_nt -> elem_type
-- On NUMBER reduce production type_nt -> elem_type
-- On NOTIN reduce production type_nt -> elem_type
-- On NEWLINE reduce production type_nt -> elem_type
-- On NEQ reduce production type_nt -> elem_type
-- On MINUS reduce production type_nt -> elem_type
-- On LT reduce production type_nt -> elem_type
-- On LPAREN reduce production type_nt -> elem_type
-- On LIDENTIFIER reduce production type_nt -> elem_type
-- On LE reduce production type_nt -> elem_type
-- On LBRACKET reduce production type_nt -> elem_type
-- On KWtrue reduce production type_nt -> elem_type
-- On KWthen reduce production type_nt -> elem_type
-- On KWrename reduce production type_nt -> elem_type
-- On KWproof reduce production type_nt -> elem_type
-- On KWor reduce production type_nt -> elem_type
-- On KWnote reduce production type_nt -> elem_type
-- On KWlocal reduce production type_nt -> elem_type
-- On KWin reduce production type_nt -> elem_type
-- On KWimmutable reduce production type_nt -> elem_type
-- On KWghost reduce production type_nt -> elem_type
-- On KWfalse reduce production type_nt -> elem_type
-- On KWensure reduce production type_nt -> elem_type
-- On KWend reduce production type_nt -> elem_type
-- On KWelseif reduce production type_nt -> elem_type
-- On KWelse reduce production type_nt -> elem_type
-- On KWdo reduce production type_nt -> elem_type
-- On KWdeferred reduce production type_nt -> elem_type
-- On KWclass reduce production type_nt -> elem_type
-- On KWcase reduce production type_nt -> elem_type
-- On KWas reduce production type_nt -> elem_type
-- On KWand reduce production type_nt -> elem_type
-- On KWall reduce production type_nt -> elem_type
-- On GT reduce production type_nt -> elem_type
-- On GE reduce production type_nt -> elem_type
-- On EQ reduce production type_nt -> elem_type
-- On DOT reduce production type_nt -> elem_type
-- On DIVIDE reduce production type_nt -> elem_type
-- On DCOLON reduce production type_nt -> elem_type
-- On DBAR reduce production type_nt -> elem_type
-- On DARROW reduce production type_nt -> elem_type
-- On COMMA reduce production type_nt -> elem_type
-- On COLON reduce production type_nt -> elem_type
-- On CARET reduce production type_nt -> elem_type
-- On BAR reduce production type_nt -> elem_type
-- On ASSIGN reduce production type_nt -> elem_type

State 44:
## Known stack suffix:
## elem_type ARROW
## LR(1) items:
arrow_type -> elem_type ARROW . type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 45
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 45:
## Known stack suffix:
## elem_type ARROW type_nt
## LR(1) items:
arrow_type -> elem_type ARROW type_nt . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_type -> elem_type ARROW type_nt

State 46:
## Known stack suffix:
## arrow_type
## LR(1) items:
type_nt -> arrow_type . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_nt -> arrow_type

State 47:
## Known stack suffix:
## LPAREN type_list_min2
## LR(1) items:
tuple_type -> LPAREN type_list_min2 . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On RPAREN shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LPAREN type_list_min2 RPAREN
## LR(1) items:
tuple_type -> LPAREN type_list_min2 RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tuple_type -> LPAREN type_list_min2 RPAREN

State 49:
## Known stack suffix:
## type_nt
## LR(1) items:
type_list -> type_nt . [ RPAREN RBRACKET ]
type_list_min2 -> type_nt . COMMA type_nt [ RPAREN RBRACKET ]
type_list_min2 -> type_nt . COMMA type_list_min2 [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:
-- On RPAREN reduce production type_list -> type_nt
-- On RBRACKET reduce production type_list -> type_nt

State 50:
## Known stack suffix:
## type_list_min2
## LR(1) items:
type_list -> type_list_min2 . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_list -> type_list_min2

State 51:
## Known stack suffix:
## LBRACKET type_list
## LR(1) items:
actual_generics -> LBRACKET type_list . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
-- On RBRACKET shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LBRACKET type_list RBRACKET
## LR(1) items:
actual_generics -> LBRACKET type_list RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production actual_generics -> LBRACKET type_list RBRACKET

State 53:
## Known stack suffix:
## UIDENTIFIER actual_generics
## LR(1) items:
simple_type -> UIDENTIFIER actual_generics . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWrequire KWrename KWproof KWor KWnote KWlocal KWin KWimmutable KWghost KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ASSIGN ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_type -> UIDENTIFIER actual_generics

State 54:
## Known stack suffix:
## UIDENTIFIER COLON type_nt
## LR(1) items:
formal_generic -> UIDENTIFIER COLON type_nt . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_generic -> UIDENTIFIER COLON type_nt

State 55:
## Known stack suffix:
## NUMBER
## LR(1) items:
featopconst -> NUMBER . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production featopconst -> NUMBER

State 56:
## Known stack suffix:
## LPAREN
## LR(1) items:
featopconst -> LPAREN . operator RPAREN [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
-- On TIMES shift to state 57
-- On ROPERATOR shift to state 58
-- On PLUS shift to state 59
-- On PARENOP shift to state 60
-- On OPERATOR shift to state 61
-- On NOTIN shift to state 62
-- On NEQV shift to state 63
-- On NEQ shift to state 64
-- On MINUS shift to state 65
-- On LT shift to state 66
-- On LE shift to state 67
-- On KWor shift to state 68
-- On KWnot shift to state 69
-- On KWin shift to state 70
-- On KWand shift to state 71
-- On GT shift to state 72
-- On GE shift to state 73
-- On EQV shift to state 74
-- On EQ shift to state 75
-- On DIVIDE shift to state 76
-- On DCOLON shift to state 77
-- On DBAR shift to state 78
-- On DARROW shift to state 79
-- On CARET shift to state 80
-- On BRACKETOP shift to state 81
-- On BAR shift to state 82
-- On operator shift to state 83
## Reductions:

State 57:
## Known stack suffix:
## TIMES
## LR(1) items:
operator -> TIMES . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> TIMES

State 58:
## Known stack suffix:
## ROPERATOR
## LR(1) items:
operator -> ROPERATOR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> ROPERATOR

State 59:
## Known stack suffix:
## PLUS
## LR(1) items:
operator -> PLUS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> PLUS

State 60:
## Known stack suffix:
## PARENOP
## LR(1) items:
operator -> PARENOP . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> PARENOP

State 61:
## Known stack suffix:
## OPERATOR
## LR(1) items:
operator -> OPERATOR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> OPERATOR

State 62:
## Known stack suffix:
## NOTIN
## LR(1) items:
operator -> NOTIN . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> NOTIN

State 63:
## Known stack suffix:
## NEQV
## LR(1) items:
operator -> NEQV . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> NEQV

State 64:
## Known stack suffix:
## NEQ
## LR(1) items:
operator -> NEQ . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> NEQ

State 65:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> MINUS

State 66:
## Known stack suffix:
## LT
## LR(1) items:
operator -> LT . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> LT

State 67:
## Known stack suffix:
## LE
## LR(1) items:
operator -> LE . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> LE

State 68:
## Known stack suffix:
## KWor
## LR(1) items:
operator -> KWor . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> KWor

State 69:
## Known stack suffix:
## KWnot
## LR(1) items:
operator -> KWnot . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> KWnot

State 70:
## Known stack suffix:
## KWin
## LR(1) items:
operator -> KWin . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> KWin

State 71:
## Known stack suffix:
## KWand
## LR(1) items:
operator -> KWand . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> KWand

State 72:
## Known stack suffix:
## GT
## LR(1) items:
operator -> GT . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> GT

State 73:
## Known stack suffix:
## GE
## LR(1) items:
operator -> GE . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> GE

State 74:
## Known stack suffix:
## EQV
## LR(1) items:
operator -> EQV . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> EQV

State 75:
## Known stack suffix:
## EQ
## LR(1) items:
operator -> EQ . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> EQ

State 76:
## Known stack suffix:
## DIVIDE
## LR(1) items:
operator -> DIVIDE . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> DIVIDE

State 77:
## Known stack suffix:
## DCOLON
## LR(1) items:
operator -> DCOLON . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> DCOLON

State 78:
## Known stack suffix:
## DBAR
## LR(1) items:
operator -> DBAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> DBAR

State 79:
## Known stack suffix:
## DARROW
## LR(1) items:
operator -> DARROW . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> DARROW

State 80:
## Known stack suffix:
## CARET
## LR(1) items:
operator -> CARET . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> CARET

State 81:
## Known stack suffix:
## BRACKETOP
## LR(1) items:
operator -> BRACKETOP . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> BRACKETOP

State 82:
## Known stack suffix:
## BAR
## LR(1) items:
operator -> BAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> BAR

State 83:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
featopconst -> LPAREN operator . RPAREN [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
-- On RPAREN shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
featopconst -> LPAREN operator RPAREN . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production featopconst -> LPAREN operator RPAREN

State 85:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
nameopconst -> LIDENTIFIER . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nameopconst -> LIDENTIFIER

State 86:
## Known stack suffix:
## KWtrue
## LR(1) items:
featopconst -> KWtrue . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production featopconst -> KWtrue

State 87:
## Known stack suffix:
## KWimmutable
## LR(1) items:
header_mark -> KWimmutable . [ KWclass ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production header_mark -> KWimmutable

State 88:
## Known stack suffix:
## KWfalse
## LR(1) items:
featopconst -> KWfalse . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production featopconst -> KWfalse

State 89:
## Known stack suffix:
## KWdeferred
## LR(1) items:
header_mark -> KWdeferred . [ KWclass ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production header_mark -> KWdeferred

State 90:
## Known stack suffix:
## KWcase
## LR(1) items:
header_mark -> KWcase . [ KWclass ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production header_mark -> KWcase

State 91:
## Known stack suffix:
## KWall
## LR(1) items:
proof_all_expr -> KWall . formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments_opt shift to state 104
-- On formal_arguments shift to state 315
## Reductions:
-- On SEMICOL reduce production formal_arguments_opt ->
-- On NEWLINE reduce production formal_arguments_opt ->
-- On KWrequire reduce production formal_arguments_opt ->
-- On KWproof reduce production formal_arguments_opt ->
-- On KWnote reduce production formal_arguments_opt ->
-- On KWensure reduce production formal_arguments_opt ->
-- On KWdeferred reduce production formal_arguments_opt ->

State 92:
## Known stack suffix:
## LPAREN
## LR(1) items:
formal_arguments -> LPAREN . entity_list RPAREN [ USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW # ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 96
-- On entity_list shift to state 99
-- On entity_group shift to state 101
## Reductions:

State 93:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
identifier_list -> LIDENTIFIER . [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
identifier_list -> LIDENTIFIER . COMMA identifier_list [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
## Transitions:
-- On COMMA shift to state 94
## Reductions:
-- On SEMICOL reduce production identifier_list -> LIDENTIFIER
-- On RPAREN reduce production identifier_list -> LIDENTIFIER
-- On KWproof reduce production identifier_list -> LIDENTIFIER
-- On KWdo reduce production identifier_list -> LIDENTIFIER
-- On COLON reduce production identifier_list -> LIDENTIFIER
-- On ASSIGN reduce production identifier_list -> LIDENTIFIER

State 94:
## Known stack suffix:
## LIDENTIFIER COMMA
## LR(1) items:
identifier_list -> LIDENTIFIER COMMA . identifier_list [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## LIDENTIFIER COMMA identifier_list
## LR(1) items:
identifier_list -> LIDENTIFIER COMMA identifier_list . [ SEMICOL RPAREN KWproof KWdo COMMA COLON ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_list -> LIDENTIFIER COMMA identifier_list

State 96:
## Known stack suffix:
## identifier_list
## LR(1) items:
entity_group -> identifier_list . [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
entity_group -> identifier_list . COLON type_nt [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
## Transitions:
-- On COLON shift to state 97
## Reductions:
-- On SEMICOL reduce production entity_group -> identifier_list
-- On RPAREN reduce production entity_group -> identifier_list
-- On KWproof reduce production entity_group -> identifier_list
-- On KWdo reduce production entity_group -> identifier_list
-- On COMMA reduce production entity_group -> identifier_list
-- On ASSIGN reduce production entity_group -> identifier_list

State 97:
## Known stack suffix:
## identifier_list COLON
## LR(1) items:
entity_group -> identifier_list COLON . type_nt [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 98
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 98:
## Known stack suffix:
## identifier_list COLON type_nt
## LR(1) items:
entity_group -> identifier_list COLON type_nt . [ SEMICOL RPAREN KWproof KWdo COMMA ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production entity_group -> identifier_list COLON type_nt

State 99:
## Known stack suffix:
## LPAREN entity_list
## LR(1) items:
formal_arguments -> LPAREN entity_list . RPAREN [ USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW # ]
## Transitions:
-- On RPAREN shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LPAREN entity_list RPAREN
## LR(1) items:
formal_arguments -> LPAREN entity_list RPAREN . [ USCORE UIDENTIFIER TIMES SEMICOL PLUS NUMBER NEWLINE MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWlocal KWinspect KWinherit KWimmutable KWif KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall KWagent KWResult EXCLAM COLON ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_arguments -> LPAREN entity_list RPAREN

State 101:
## Known stack suffix:
## entity_group
## LR(1) items:
entity_list -> entity_group . [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
entity_list -> entity_group . COMMA entity_list [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
## Transitions:
-- On COMMA shift to state 102
## Reductions:
-- On SEMICOL reduce production entity_list -> entity_group
-- On RPAREN reduce production entity_list -> entity_group
-- On KWproof reduce production entity_list -> entity_group
-- On KWdo reduce production entity_list -> entity_group
-- On ASSIGN reduce production entity_list -> entity_group

State 102:
## Known stack suffix:
## entity_group COMMA
## LR(1) items:
entity_list -> entity_group COMMA . entity_list [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 96
-- On entity_list shift to state 103
-- On entity_group shift to state 101
## Reductions:

State 103:
## Known stack suffix:
## entity_group COMMA entity_list
## LR(1) items:
entity_list -> entity_group COMMA entity_list . [ SEMICOL RPAREN KWproof KWdo ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production entity_list -> entity_group COMMA entity_list

State 104:
## Known stack suffix:
## KWall formal_arguments_opt
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt . opt_nl ass_req_opt ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 107
## Reductions:
-- On KWrequire reduce production opt_nl ->
-- On KWproof reduce production opt_nl ->
-- On KWnote reduce production opt_nl ->
-- On KWensure reduce production opt_nl ->
-- On KWdeferred reduce production opt_nl ->

State 105:
## Known stack suffix:
## SEMICOL
## LR(1) items:
opt_nl -> SEMICOL . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_nl -> SEMICOL

State 106:
## Known stack suffix:
## NEWLINE
## LR(1) items:
opt_nl -> NEWLINE . [ USCORE TIMES PLUS NUMBER MINUS LPAREN LIDENTIFIER LBRACKET LBRACE KWtrue KWsome KWrequire KWproof KWold KWnote KWnot KWinspect KWif KWfalse KWensure KWdeferred KWall KWagent KWResult ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_nl -> NEWLINE

State 107:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl . ass_req_opt ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWrequire shift to state 108
-- On ass_req_opt shift to state 277
-- On ass_req shift to state 295
## Reductions:
-- On KWproof reduce production ass_req_opt ->
-- On KWnote reduce production ass_req_opt ->
-- On KWensure reduce production ass_req_opt ->
-- On KWdeferred reduce production ass_req_opt ->

State 108:
## Known stack suffix:
## KWrequire
## LR(1) items:
ass_req -> KWrequire . ass_seq [ KWproof KWnote KWensure KWdeferred ]
ass_req -> KWrequire . ass_seq separator [ KWproof KWnote KWensure KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 273
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_seq shift to state 274
## Reductions:

State 109:
## Known stack suffix:
## USCORE
## LR(1) items:
atomic_expr -> USCORE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expr -> USCORE

State 110:
## Known stack suffix:
## TIMES
## LR(1) items:
operator_expr -> TIMES . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 272
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 111:
## Known stack suffix:
## PLUS
## LR(1) items:
operator_expr -> PLUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 213
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 112:
## Known stack suffix:
## NUMBER
## LR(1) items:
atomic_expr -> NUMBER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expr -> NUMBER

State 113:
## Known stack suffix:
## MINUS
## LR(1) items:
operator_expr -> MINUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 215
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 114:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . operator RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . expr RPAREN ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 115
-- On ROPERATOR shift to state 58
-- On PLUS shift to state 212
-- On PARENOP shift to state 60
-- On OPERATOR shift to state 61
-- On NUMBER shift to state 112
-- On NOTIN shift to state 62
-- On NEQV shift to state 63
-- On NEQ shift to state 64
-- On MINUS shift to state 214
-- On LT shift to state 66
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LE shift to state 67
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWor shift to state 68
-- On KWold shift to state 124
-- On KWnot shift to state 224
-- On KWinspect shift to state 126
-- On KWin shift to state 70
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWand shift to state 71
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On GT shift to state 72
-- On GE shift to state 73
-- On EQV shift to state 74
-- On EQ shift to state 75
-- On DIVIDE shift to state 76
-- On DCOLON shift to state 77
-- On DBAR shift to state 78
-- On DARROW shift to state 79
-- On CARET shift to state 80
-- On BRACKETOP shift to state 81
-- On BAR shift to state 82
-- On operator_expr shift to state 145
-- On operator shift to state 226
-- On expr shift to state 228
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 115:
## Known stack suffix:
## TIMES
## LR(1) items:
operator -> TIMES . [ RPAREN ]
operator_expr -> TIMES . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 272
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN reduce production operator -> TIMES

State 116:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
dotted_id_list -> LIDENTIFIER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LIDENTIFIER . ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On ARROW shift to state 117
## Reductions:
-- On UIDENTIFIER reduce production dotted_id_list -> LIDENTIFIER
-- On TIMES reduce production dotted_id_list -> LIDENTIFIER
-- On SEMICOL reduce production dotted_id_list -> LIDENTIFIER
-- On RPAREN reduce production dotted_id_list -> LIDENTIFIER
-- On RBRACKET reduce production dotted_id_list -> LIDENTIFIER
-- On RBRACE reduce production dotted_id_list -> LIDENTIFIER
-- On PLUS reduce production dotted_id_list -> LIDENTIFIER
-- On NUMBER reduce production dotted_id_list -> LIDENTIFIER
-- On NOTIN reduce production dotted_id_list -> LIDENTIFIER
-- On NEWLINE reduce production dotted_id_list -> LIDENTIFIER
-- On NEQ reduce production dotted_id_list -> LIDENTIFIER
-- On MINUS reduce production dotted_id_list -> LIDENTIFIER
-- On LT reduce production dotted_id_list -> LIDENTIFIER
-- On LPAREN reduce production dotted_id_list -> LIDENTIFIER
-- On LIDENTIFIER reduce production dotted_id_list -> LIDENTIFIER
-- On LE reduce production dotted_id_list -> LIDENTIFIER
-- On LBRACKET reduce production dotted_id_list -> LIDENTIFIER
-- On KWtrue reduce production dotted_id_list -> LIDENTIFIER
-- On KWthen reduce production dotted_id_list -> LIDENTIFIER
-- On KWproof reduce production dotted_id_list -> LIDENTIFIER
-- On KWor reduce production dotted_id_list -> LIDENTIFIER
-- On KWnote reduce production dotted_id_list -> LIDENTIFIER
-- On KWlocal reduce production dotted_id_list -> LIDENTIFIER
-- On KWin reduce production dotted_id_list -> LIDENTIFIER
-- On KWimmutable reduce production dotted_id_list -> LIDENTIFIER
-- On KWfalse reduce production dotted_id_list -> LIDENTIFIER
-- On KWensure reduce production dotted_id_list -> LIDENTIFIER
-- On KWend reduce production dotted_id_list -> LIDENTIFIER
-- On KWelseif reduce production dotted_id_list -> LIDENTIFIER
-- On KWelse reduce production dotted_id_list -> LIDENTIFIER
-- On KWdo reduce production dotted_id_list -> LIDENTIFIER
-- On KWdeferred reduce production dotted_id_list -> LIDENTIFIER
-- On KWclass reduce production dotted_id_list -> LIDENTIFIER
-- On KWcase reduce production dotted_id_list -> LIDENTIFIER
-- On KWas reduce production dotted_id_list -> LIDENTIFIER
-- On KWand reduce production dotted_id_list -> LIDENTIFIER
-- On KWall reduce production dotted_id_list -> LIDENTIFIER
-- On GT reduce production dotted_id_list -> LIDENTIFIER
-- On GE reduce production dotted_id_list -> LIDENTIFIER
-- On EQ reduce production dotted_id_list -> LIDENTIFIER
-- On DOT reduce production dotted_id_list -> LIDENTIFIER
-- On DIVIDE reduce production dotted_id_list -> LIDENTIFIER
-- On DCOLON reduce production dotted_id_list -> LIDENTIFIER
-- On DBAR reduce production dotted_id_list -> LIDENTIFIER
-- On DARROW reduce production dotted_id_list -> LIDENTIFIER
-- On COMMA reduce production dotted_id_list -> LIDENTIFIER
-- On COLON reduce production dotted_id_list -> LIDENTIFIER
-- On CARET reduce production dotted_id_list -> LIDENTIFIER
-- On BAR reduce production dotted_id_list -> LIDENTIFIER

State 117:
## Known stack suffix:
## LIDENTIFIER ARROW
## LR(1) items:
expr -> LIDENTIFIER ARROW . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 271
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 118:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 217
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 119:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 269
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 120:
## Known stack suffix:
## KWtrue
## LR(1) items:
atomic_expr -> KWtrue . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expr -> KWtrue

State 121:
## Known stack suffix:
## KWsome
## LR(1) items:
expr -> KWsome . formal_arguments opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## KWsome formal_arguments
## LR(1) items:
expr -> KWsome formal_arguments . opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 123
## Reductions:
-- On USCORE reduce production opt_nl ->
-- On TIMES reduce production opt_nl ->
-- On PLUS reduce production opt_nl ->
-- On NUMBER reduce production opt_nl ->
-- On MINUS reduce production opt_nl ->
-- On LPAREN reduce production opt_nl ->
-- On LIDENTIFIER reduce production opt_nl ->
-- On LBRACKET reduce production opt_nl ->
-- On LBRACE reduce production opt_nl ->
-- On KWtrue reduce production opt_nl ->
-- On KWsome reduce production opt_nl ->
-- On KWold reduce production opt_nl ->
-- On KWnot reduce production opt_nl ->
-- On KWinspect reduce production opt_nl ->
-- On KWif reduce production opt_nl ->
-- On KWfalse reduce production opt_nl ->
-- On KWall reduce production opt_nl ->
-- On KWagent reduce production opt_nl ->
-- On KWResult reduce production opt_nl ->

State 123:
## Known stack suffix:
## KWsome formal_arguments opt_nl
## LR(1) items:
expr -> KWsome formal_arguments opt_nl . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 268
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 124:
## Known stack suffix:
## KWold
## LR(1) items:
operator_expr -> KWold . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 267
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 125:
## Known stack suffix:
## KWnot
## LR(1) items:
operator_expr -> KWnot . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 225
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 126:
## Known stack suffix:
## KWinspect
## LR(1) items:
exp_inspect -> KWinspect . expr exp_case_list KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 258
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 127:
## Known stack suffix:
## KWif
## LR(1) items:
exp_conditional -> KWif . exp_then_part_list exp_else_part KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 247
-- On exp_then_part_list shift to state 250
-- On exp_then_part shift to state 255
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 128:
## Known stack suffix:
## KWfalse
## LR(1) items:
atomic_expr -> KWfalse . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expr -> KWfalse

State 129:
## Known stack suffix:
## KWall
## LR(1) items:
expr -> KWall . formal_arguments opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## KWall formal_arguments
## LR(1) items:
expr -> KWall formal_arguments . opt_nl expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 131
## Reductions:
-- On USCORE reduce production opt_nl ->
-- On TIMES reduce production opt_nl ->
-- On PLUS reduce production opt_nl ->
-- On NUMBER reduce production opt_nl ->
-- On MINUS reduce production opt_nl ->
-- On LPAREN reduce production opt_nl ->
-- On LIDENTIFIER reduce production opt_nl ->
-- On LBRACKET reduce production opt_nl ->
-- On LBRACE reduce production opt_nl ->
-- On KWtrue reduce production opt_nl ->
-- On KWsome reduce production opt_nl ->
-- On KWold reduce production opt_nl ->
-- On KWnot reduce production opt_nl ->
-- On KWinspect reduce production opt_nl ->
-- On KWif reduce production opt_nl ->
-- On KWfalse reduce production opt_nl ->
-- On KWall reduce production opt_nl ->
-- On KWagent reduce production opt_nl ->
-- On KWResult reduce production opt_nl ->

State 131:
## Known stack suffix:
## KWall formal_arguments opt_nl
## LR(1) items:
expr -> KWall formal_arguments opt_nl . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 246
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 132:
## Known stack suffix:
## KWagent
## LR(1) items:
expr -> KWagent . formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments_info shift to state 133
-- On formal_arguments shift to state 245
## Reductions:

State 133:
## Known stack suffix:
## KWagent formal_arguments_info
## LR(1) items:
expr -> KWagent formal_arguments_info . return_type_opt optsemi require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type_opt shift to state 141
-- On return_type shift to state 244
## Reductions:
-- On SEMICOL reduce production return_type_opt ->
-- On KWrequire reduce production return_type_opt ->
-- On KWensure reduce production return_type_opt ->

State 134:
## Known stack suffix:
## EXCLAM
## LR(1) items:
return_type -> EXCLAM . COLON elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On COLON shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## EXCLAM COLON
## LR(1) items:
return_type -> EXCLAM COLON . elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 136
-- On dotted_id_list shift to state 36
## Reductions:

State 136:
## Known stack suffix:
## EXCLAM COLON elem_type
## LR(1) items:
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> EXCLAM COLON elem_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
## Reductions:
-- On UIDENTIFIER reduce production return_type -> EXCLAM COLON elem_type
-- On SEMICOL reduce production return_type -> EXCLAM COLON elem_type
-- On NUMBER reduce production return_type -> EXCLAM COLON elem_type
-- On LPAREN reduce production return_type -> EXCLAM COLON elem_type
-- On LIDENTIFIER reduce production return_type -> EXCLAM COLON elem_type
-- On KWtrue reduce production return_type -> EXCLAM COLON elem_type
-- On KWrequire reduce production return_type -> EXCLAM COLON elem_type
-- On KWproof reduce production return_type -> EXCLAM COLON elem_type
-- On KWnote reduce production return_type -> EXCLAM COLON elem_type
-- On KWlocal reduce production return_type -> EXCLAM COLON elem_type
-- On KWimmutable reduce production return_type -> EXCLAM COLON elem_type
-- On KWfalse reduce production return_type -> EXCLAM COLON elem_type
-- On KWensure reduce production return_type -> EXCLAM COLON elem_type
-- On KWdo reduce production return_type -> EXCLAM COLON elem_type
-- On KWdeferred reduce production return_type -> EXCLAM COLON elem_type
-- On KWclass reduce production return_type -> EXCLAM COLON elem_type
-- On KWcase reduce production return_type -> EXCLAM COLON elem_type
-- On KWall reduce production return_type -> EXCLAM COLON elem_type
-- On EQ reduce production return_type -> EXCLAM COLON elem_type
-- On ARROW reduce production return_type -> EXCLAM COLON elem_type

State 137:
## Known stack suffix:
## COLON
## LR(1) items:
return_type -> COLON . elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> COLON . KWghost elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On KWghost shift to state 138
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 140
-- On dotted_id_list shift to state 36
## Reductions:

State 138:
## Known stack suffix:
## COLON KWghost
## LR(1) items:
return_type -> COLON KWghost . elem_type [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 139
-- On dotted_id_list shift to state 36
## Reductions:

State 139:
## Known stack suffix:
## COLON KWghost elem_type
## LR(1) items:
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> COLON KWghost elem_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
## Reductions:
-- On UIDENTIFIER reduce production return_type -> COLON KWghost elem_type
-- On SEMICOL reduce production return_type -> COLON KWghost elem_type
-- On NUMBER reduce production return_type -> COLON KWghost elem_type
-- On LPAREN reduce production return_type -> COLON KWghost elem_type
-- On LIDENTIFIER reduce production return_type -> COLON KWghost elem_type
-- On KWtrue reduce production return_type -> COLON KWghost elem_type
-- On KWrequire reduce production return_type -> COLON KWghost elem_type
-- On KWproof reduce production return_type -> COLON KWghost elem_type
-- On KWnote reduce production return_type -> COLON KWghost elem_type
-- On KWlocal reduce production return_type -> COLON KWghost elem_type
-- On KWimmutable reduce production return_type -> COLON KWghost elem_type
-- On KWfalse reduce production return_type -> COLON KWghost elem_type
-- On KWensure reduce production return_type -> COLON KWghost elem_type
-- On KWdo reduce production return_type -> COLON KWghost elem_type
-- On KWdeferred reduce production return_type -> COLON KWghost elem_type
-- On KWclass reduce production return_type -> COLON KWghost elem_type
-- On KWcase reduce production return_type -> COLON KWghost elem_type
-- On KWall reduce production return_type -> COLON KWghost elem_type
-- On EQ reduce production return_type -> COLON KWghost elem_type
-- On ARROW reduce production return_type -> COLON KWghost elem_type

State 140:
## Known stack suffix:
## COLON elem_type
## LR(1) items:
qmark_type -> elem_type . QMARK [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
return_type -> COLON elem_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
star_type -> elem_type . TIMES [ UIDENTIFIER TIMES SEMICOL QMARK NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EQ ARROW # ]
## Transitions:
-- On TIMES shift to state 33
-- On QMARK shift to state 35
## Reductions:
-- On UIDENTIFIER reduce production return_type -> COLON elem_type
-- On SEMICOL reduce production return_type -> COLON elem_type
-- On NUMBER reduce production return_type -> COLON elem_type
-- On LPAREN reduce production return_type -> COLON elem_type
-- On LIDENTIFIER reduce production return_type -> COLON elem_type
-- On KWtrue reduce production return_type -> COLON elem_type
-- On KWrequire reduce production return_type -> COLON elem_type
-- On KWproof reduce production return_type -> COLON elem_type
-- On KWnote reduce production return_type -> COLON elem_type
-- On KWlocal reduce production return_type -> COLON elem_type
-- On KWimmutable reduce production return_type -> COLON elem_type
-- On KWfalse reduce production return_type -> COLON elem_type
-- On KWensure reduce production return_type -> COLON elem_type
-- On KWdo reduce production return_type -> COLON elem_type
-- On KWdeferred reduce production return_type -> COLON elem_type
-- On KWclass reduce production return_type -> COLON elem_type
-- On KWcase reduce production return_type -> COLON elem_type
-- On KWall reduce production return_type -> COLON elem_type
-- On EQ reduce production return_type -> COLON elem_type
-- On ARROW reduce production return_type -> COLON elem_type

State 141:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt . optsemi require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 142
## Reductions:
-- On KWrequire reduce production optsemi ->
-- On KWensure reduce production optsemi ->

State 142:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi . require_block_opt ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWrequire shift to state 143
-- On require_block_opt shift to state 238
-- On require_block shift to state 243
## Reductions:
-- On KWensure reduce production require_block_opt ->

State 143:
## Known stack suffix:
## KWrequire
## LR(1) items:
require_block -> KWrequire . compound [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 237
-- On atomic_expr shift to state 187
## Reductions:

State 144:
## Known stack suffix:
## KWResult
## LR(1) items:
atomic_expr -> KWResult . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expr -> KWResult

State 145:
## Known stack suffix:
## operator_expr
## LR(1) items:
expr -> operator_expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> operator_expr

State 146:
## Known stack suffix:
## info_expr
## LR(1) items:
compound_list -> info_expr . optsemi [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
compound_list -> info_expr . SEMICOL compound_list [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
-- On SEMICOL shift to state 147
-- On optsemi shift to state 235
## Reductions:
-- On KWproof reduce production optsemi ->
-- On KWnote reduce production optsemi ->
-- On KWlocal reduce production optsemi ->
-- On KWensure reduce production optsemi ->
-- On KWend reduce production optsemi ->
-- On KWdo reduce production optsemi ->
-- On KWdeferred reduce production optsemi ->

State 147:
## Known stack suffix:
## info_expr SEMICOL
## LR(1) items:
compound_list -> info_expr SEMICOL . compound_list [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
optsemi -> SEMICOL . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 234
-- On atomic_expr shift to state 187
## Reductions:
-- On KWproof reduce production optsemi -> SEMICOL
-- On KWnote reduce production optsemi -> SEMICOL
-- On KWlocal reduce production optsemi -> SEMICOL
-- On KWensure reduce production optsemi -> SEMICOL
-- On KWend reduce production optsemi -> SEMICOL
-- On KWdo reduce production optsemi -> SEMICOL
-- On KWdeferred reduce production optsemi -> SEMICOL

State 148:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
info_expr -> expr . [ UIDENTIFIER SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWall # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production info_expr -> expr
-- On SEMICOL reduce production info_expr -> expr
-- On NUMBER reduce production info_expr -> expr
-- On NEWLINE reduce production info_expr -> expr
-- On LIDENTIFIER reduce production info_expr -> expr
-- On KWtrue reduce production info_expr -> expr
-- On KWproof reduce production info_expr -> expr
-- On KWnote reduce production info_expr -> expr
-- On KWlocal reduce production info_expr -> expr
-- On KWimmutable reduce production info_expr -> expr
-- On KWfalse reduce production info_expr -> expr
-- On KWensure reduce production info_expr -> expr
-- On KWend reduce production info_expr -> expr
-- On KWdo reduce production info_expr -> expr
-- On KWdeferred reduce production info_expr -> expr
-- On KWclass reduce production info_expr -> expr
-- On KWcase reduce production info_expr -> expr
-- On KWall reduce production info_expr -> expr

State 149:
## Known stack suffix:
## expr TIMES
## LR(1) items:
operator_expr -> expr TIMES . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 150
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 150:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr TIMES expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr TIMES expr
-- On TIMES reduce production operator_expr -> expr TIMES expr
-- On SEMICOL reduce production operator_expr -> expr TIMES expr
-- On RPAREN reduce production operator_expr -> expr TIMES expr
-- On RBRACKET reduce production operator_expr -> expr TIMES expr
-- On RBRACE reduce production operator_expr -> expr TIMES expr
-- On PLUS reduce production operator_expr -> expr TIMES expr
-- On NUMBER reduce production operator_expr -> expr TIMES expr
-- On NOTIN reduce production operator_expr -> expr TIMES expr
-- On NEWLINE reduce production operator_expr -> expr TIMES expr
-- On NEQ reduce production operator_expr -> expr TIMES expr
-- On MINUS reduce production operator_expr -> expr TIMES expr
-- On LT reduce production operator_expr -> expr TIMES expr
-- On LIDENTIFIER reduce production operator_expr -> expr TIMES expr
-- On LE reduce production operator_expr -> expr TIMES expr
-- On KWtrue reduce production operator_expr -> expr TIMES expr
-- On KWthen reduce production operator_expr -> expr TIMES expr
-- On KWproof reduce production operator_expr -> expr TIMES expr
-- On KWor reduce production operator_expr -> expr TIMES expr
-- On KWnote reduce production operator_expr -> expr TIMES expr
-- On KWlocal reduce production operator_expr -> expr TIMES expr
-- On KWin reduce production operator_expr -> expr TIMES expr
-- On KWimmutable reduce production operator_expr -> expr TIMES expr
-- On KWfalse reduce production operator_expr -> expr TIMES expr
-- On KWensure reduce production operator_expr -> expr TIMES expr
-- On KWend reduce production operator_expr -> expr TIMES expr
-- On KWelseif reduce production operator_expr -> expr TIMES expr
-- On KWelse reduce production operator_expr -> expr TIMES expr
-- On KWdo reduce production operator_expr -> expr TIMES expr
-- On KWdeferred reduce production operator_expr -> expr TIMES expr
-- On KWclass reduce production operator_expr -> expr TIMES expr
-- On KWcase reduce production operator_expr -> expr TIMES expr
-- On KWas reduce production operator_expr -> expr TIMES expr
-- On KWand reduce production operator_expr -> expr TIMES expr
-- On KWall reduce production operator_expr -> expr TIMES expr
-- On GT reduce production operator_expr -> expr TIMES expr
-- On GE reduce production operator_expr -> expr TIMES expr
-- On EQ reduce production operator_expr -> expr TIMES expr
-- On DIVIDE reduce production operator_expr -> expr TIMES expr
-- On DBAR reduce production operator_expr -> expr TIMES expr
-- On DARROW reduce production operator_expr -> expr TIMES expr
-- On COMMA reduce production operator_expr -> expr TIMES expr
-- On COLON reduce production operator_expr -> expr TIMES expr
-- On BAR reduce production operator_expr -> expr TIMES expr

State 151:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 152
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 152:
## Known stack suffix:
## expr LPAREN expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr LPAREN expr . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RPAREN shift to state 153
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 153:
## Known stack suffix:
## expr LPAREN expr RPAREN
## LR(1) items:
expr -> expr LPAREN expr RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LPAREN expr RPAREN

State 154:
## Known stack suffix:
## expr PLUS
## LR(1) items:
operator_expr -> expr PLUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 155
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 155:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr PLUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr PLUS expr
-- On SEMICOL reduce production operator_expr -> expr PLUS expr
-- On RPAREN reduce production operator_expr -> expr PLUS expr
-- On RBRACKET reduce production operator_expr -> expr PLUS expr
-- On RBRACE reduce production operator_expr -> expr PLUS expr
-- On PLUS reduce production operator_expr -> expr PLUS expr
-- On NUMBER reduce production operator_expr -> expr PLUS expr
-- On NOTIN reduce production operator_expr -> expr PLUS expr
-- On NEWLINE reduce production operator_expr -> expr PLUS expr
-- On NEQ reduce production operator_expr -> expr PLUS expr
-- On MINUS reduce production operator_expr -> expr PLUS expr
-- On LT reduce production operator_expr -> expr PLUS expr
-- On LIDENTIFIER reduce production operator_expr -> expr PLUS expr
-- On LE reduce production operator_expr -> expr PLUS expr
-- On KWtrue reduce production operator_expr -> expr PLUS expr
-- On KWthen reduce production operator_expr -> expr PLUS expr
-- On KWproof reduce production operator_expr -> expr PLUS expr
-- On KWor reduce production operator_expr -> expr PLUS expr
-- On KWnote reduce production operator_expr -> expr PLUS expr
-- On KWlocal reduce production operator_expr -> expr PLUS expr
-- On KWin reduce production operator_expr -> expr PLUS expr
-- On KWimmutable reduce production operator_expr -> expr PLUS expr
-- On KWfalse reduce production operator_expr -> expr PLUS expr
-- On KWensure reduce production operator_expr -> expr PLUS expr
-- On KWend reduce production operator_expr -> expr PLUS expr
-- On KWelseif reduce production operator_expr -> expr PLUS expr
-- On KWelse reduce production operator_expr -> expr PLUS expr
-- On KWdo reduce production operator_expr -> expr PLUS expr
-- On KWdeferred reduce production operator_expr -> expr PLUS expr
-- On KWclass reduce production operator_expr -> expr PLUS expr
-- On KWcase reduce production operator_expr -> expr PLUS expr
-- On KWas reduce production operator_expr -> expr PLUS expr
-- On KWand reduce production operator_expr -> expr PLUS expr
-- On KWall reduce production operator_expr -> expr PLUS expr
-- On GT reduce production operator_expr -> expr PLUS expr
-- On GE reduce production operator_expr -> expr PLUS expr
-- On EQ reduce production operator_expr -> expr PLUS expr
-- On DBAR reduce production operator_expr -> expr PLUS expr
-- On DARROW reduce production operator_expr -> expr PLUS expr
-- On COMMA reduce production operator_expr -> expr PLUS expr
-- On COLON reduce production operator_expr -> expr PLUS expr
-- On BAR reduce production operator_expr -> expr PLUS expr

State 156:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 157
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 157:
## Known stack suffix:
## expr LBRACKET expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr LBRACKET expr . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACKET shift to state 158
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 158:
## Known stack suffix:
## expr LBRACKET expr RBRACKET
## LR(1) items:
expr -> expr LBRACKET expr RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LBRACKET expr RBRACKET

State 159:
## Known stack suffix:
## expr NOTIN
## LR(1) items:
operator_expr -> expr NOTIN . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 160
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 160:
## Known stack suffix:
## expr NOTIN expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr NOTIN expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr NOTIN expr
-- On SEMICOL reduce production operator_expr -> expr NOTIN expr
-- On RPAREN reduce production operator_expr -> expr NOTIN expr
-- On RBRACKET reduce production operator_expr -> expr NOTIN expr
-- On RBRACE reduce production operator_expr -> expr NOTIN expr
-- On NUMBER reduce production operator_expr -> expr NOTIN expr
-- On NEWLINE reduce production operator_expr -> expr NOTIN expr
-- On LIDENTIFIER reduce production operator_expr -> expr NOTIN expr
-- On KWtrue reduce production operator_expr -> expr NOTIN expr
-- On KWthen reduce production operator_expr -> expr NOTIN expr
-- On KWproof reduce production operator_expr -> expr NOTIN expr
-- On KWor reduce production operator_expr -> expr NOTIN expr
-- On KWnote reduce production operator_expr -> expr NOTIN expr
-- On KWlocal reduce production operator_expr -> expr NOTIN expr
-- On KWimmutable reduce production operator_expr -> expr NOTIN expr
-- On KWfalse reduce production operator_expr -> expr NOTIN expr
-- On KWensure reduce production operator_expr -> expr NOTIN expr
-- On KWend reduce production operator_expr -> expr NOTIN expr
-- On KWelseif reduce production operator_expr -> expr NOTIN expr
-- On KWelse reduce production operator_expr -> expr NOTIN expr
-- On KWdo reduce production operator_expr -> expr NOTIN expr
-- On KWdeferred reduce production operator_expr -> expr NOTIN expr
-- On KWclass reduce production operator_expr -> expr NOTIN expr
-- On KWcase reduce production operator_expr -> expr NOTIN expr
-- On KWand reduce production operator_expr -> expr NOTIN expr
-- On KWall reduce production operator_expr -> expr NOTIN expr
-- On DARROW reduce production operator_expr -> expr NOTIN expr
-- On COMMA reduce production operator_expr -> expr NOTIN expr
-- On COLON reduce production operator_expr -> expr NOTIN expr

State 161:
## Known stack suffix:
## expr MINUS
## LR(1) items:
operator_expr -> expr MINUS . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 162
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 162:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr MINUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr MINUS expr
-- On SEMICOL reduce production operator_expr -> expr MINUS expr
-- On RPAREN reduce production operator_expr -> expr MINUS expr
-- On RBRACKET reduce production operator_expr -> expr MINUS expr
-- On RBRACE reduce production operator_expr -> expr MINUS expr
-- On PLUS reduce production operator_expr -> expr MINUS expr
-- On NUMBER reduce production operator_expr -> expr MINUS expr
-- On NOTIN reduce production operator_expr -> expr MINUS expr
-- On NEWLINE reduce production operator_expr -> expr MINUS expr
-- On NEQ reduce production operator_expr -> expr MINUS expr
-- On MINUS reduce production operator_expr -> expr MINUS expr
-- On LT reduce production operator_expr -> expr MINUS expr
-- On LIDENTIFIER reduce production operator_expr -> expr MINUS expr
-- On LE reduce production operator_expr -> expr MINUS expr
-- On KWtrue reduce production operator_expr -> expr MINUS expr
-- On KWthen reduce production operator_expr -> expr MINUS expr
-- On KWproof reduce production operator_expr -> expr MINUS expr
-- On KWor reduce production operator_expr -> expr MINUS expr
-- On KWnote reduce production operator_expr -> expr MINUS expr
-- On KWlocal reduce production operator_expr -> expr MINUS expr
-- On KWin reduce production operator_expr -> expr MINUS expr
-- On KWimmutable reduce production operator_expr -> expr MINUS expr
-- On KWfalse reduce production operator_expr -> expr MINUS expr
-- On KWensure reduce production operator_expr -> expr MINUS expr
-- On KWend reduce production operator_expr -> expr MINUS expr
-- On KWelseif reduce production operator_expr -> expr MINUS expr
-- On KWelse reduce production operator_expr -> expr MINUS expr
-- On KWdo reduce production operator_expr -> expr MINUS expr
-- On KWdeferred reduce production operator_expr -> expr MINUS expr
-- On KWclass reduce production operator_expr -> expr MINUS expr
-- On KWcase reduce production operator_expr -> expr MINUS expr
-- On KWas reduce production operator_expr -> expr MINUS expr
-- On KWand reduce production operator_expr -> expr MINUS expr
-- On KWall reduce production operator_expr -> expr MINUS expr
-- On GT reduce production operator_expr -> expr MINUS expr
-- On GE reduce production operator_expr -> expr MINUS expr
-- On EQ reduce production operator_expr -> expr MINUS expr
-- On DBAR reduce production operator_expr -> expr MINUS expr
-- On DARROW reduce production operator_expr -> expr MINUS expr
-- On COMMA reduce production operator_expr -> expr MINUS expr
-- On COLON reduce production operator_expr -> expr MINUS expr
-- On BAR reduce production operator_expr -> expr MINUS expr

State 163:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr DOT . LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LIDENTIFIER shift to state 164
-- On LBRACE shift to state 165
## Reductions:

State 164:
## Known stack suffix:
## expr DOT LIDENTIFIER
## LR(1) items:
expr -> expr DOT LIDENTIFIER . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr DOT LIDENTIFIER

State 165:
## Known stack suffix:
## expr DOT LBRACE
## LR(1) items:
expr -> expr DOT LBRACE . expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 166
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 166:
## Known stack suffix:
## expr DOT LBRACE expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr DOT LBRACE expr . RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACE shift to state 167
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 167:
## Known stack suffix:
## expr DOT LBRACE expr RBRACE
## LR(1) items:
expr -> expr DOT LBRACE expr RBRACE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr DOT LBRACE expr RBRACE

State 168:
## Known stack suffix:
## expr NEQ
## LR(1) items:
operator_expr -> expr NEQ . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 169
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 169:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr NEQ expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr NEQ expr
-- On SEMICOL reduce production operator_expr -> expr NEQ expr
-- On RPAREN reduce production operator_expr -> expr NEQ expr
-- On RBRACKET reduce production operator_expr -> expr NEQ expr
-- On RBRACE reduce production operator_expr -> expr NEQ expr
-- On NUMBER reduce production operator_expr -> expr NEQ expr
-- On NEWLINE reduce production operator_expr -> expr NEQ expr
-- On LIDENTIFIER reduce production operator_expr -> expr NEQ expr
-- On KWtrue reduce production operator_expr -> expr NEQ expr
-- On KWthen reduce production operator_expr -> expr NEQ expr
-- On KWproof reduce production operator_expr -> expr NEQ expr
-- On KWor reduce production operator_expr -> expr NEQ expr
-- On KWnote reduce production operator_expr -> expr NEQ expr
-- On KWlocal reduce production operator_expr -> expr NEQ expr
-- On KWimmutable reduce production operator_expr -> expr NEQ expr
-- On KWfalse reduce production operator_expr -> expr NEQ expr
-- On KWensure reduce production operator_expr -> expr NEQ expr
-- On KWend reduce production operator_expr -> expr NEQ expr
-- On KWelseif reduce production operator_expr -> expr NEQ expr
-- On KWelse reduce production operator_expr -> expr NEQ expr
-- On KWdo reduce production operator_expr -> expr NEQ expr
-- On KWdeferred reduce production operator_expr -> expr NEQ expr
-- On KWclass reduce production operator_expr -> expr NEQ expr
-- On KWcase reduce production operator_expr -> expr NEQ expr
-- On KWand reduce production operator_expr -> expr NEQ expr
-- On KWall reduce production operator_expr -> expr NEQ expr
-- On DARROW reduce production operator_expr -> expr NEQ expr
-- On COMMA reduce production operator_expr -> expr NEQ expr
-- On COLON reduce production operator_expr -> expr NEQ expr

State 170:
## Known stack suffix:
## expr DIVIDE
## LR(1) items:
operator_expr -> expr DIVIDE . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 171
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 171:
## Known stack suffix:
## expr DIVIDE expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DIVIDE expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr DIVIDE expr
-- On TIMES reduce production operator_expr -> expr DIVIDE expr
-- On SEMICOL reduce production operator_expr -> expr DIVIDE expr
-- On RPAREN reduce production operator_expr -> expr DIVIDE expr
-- On RBRACKET reduce production operator_expr -> expr DIVIDE expr
-- On RBRACE reduce production operator_expr -> expr DIVIDE expr
-- On PLUS reduce production operator_expr -> expr DIVIDE expr
-- On NUMBER reduce production operator_expr -> expr DIVIDE expr
-- On NOTIN reduce production operator_expr -> expr DIVIDE expr
-- On NEWLINE reduce production operator_expr -> expr DIVIDE expr
-- On NEQ reduce production operator_expr -> expr DIVIDE expr
-- On MINUS reduce production operator_expr -> expr DIVIDE expr
-- On LT reduce production operator_expr -> expr DIVIDE expr
-- On LIDENTIFIER reduce production operator_expr -> expr DIVIDE expr
-- On LE reduce production operator_expr -> expr DIVIDE expr
-- On KWtrue reduce production operator_expr -> expr DIVIDE expr
-- On KWthen reduce production operator_expr -> expr DIVIDE expr
-- On KWproof reduce production operator_expr -> expr DIVIDE expr
-- On KWor reduce production operator_expr -> expr DIVIDE expr
-- On KWnote reduce production operator_expr -> expr DIVIDE expr
-- On KWlocal reduce production operator_expr -> expr DIVIDE expr
-- On KWin reduce production operator_expr -> expr DIVIDE expr
-- On KWimmutable reduce production operator_expr -> expr DIVIDE expr
-- On KWfalse reduce production operator_expr -> expr DIVIDE expr
-- On KWensure reduce production operator_expr -> expr DIVIDE expr
-- On KWend reduce production operator_expr -> expr DIVIDE expr
-- On KWelseif reduce production operator_expr -> expr DIVIDE expr
-- On KWelse reduce production operator_expr -> expr DIVIDE expr
-- On KWdo reduce production operator_expr -> expr DIVIDE expr
-- On KWdeferred reduce production operator_expr -> expr DIVIDE expr
-- On KWclass reduce production operator_expr -> expr DIVIDE expr
-- On KWcase reduce production operator_expr -> expr DIVIDE expr
-- On KWas reduce production operator_expr -> expr DIVIDE expr
-- On KWand reduce production operator_expr -> expr DIVIDE expr
-- On KWall reduce production operator_expr -> expr DIVIDE expr
-- On GT reduce production operator_expr -> expr DIVIDE expr
-- On GE reduce production operator_expr -> expr DIVIDE expr
-- On EQ reduce production operator_expr -> expr DIVIDE expr
-- On DIVIDE reduce production operator_expr -> expr DIVIDE expr
-- On DBAR reduce production operator_expr -> expr DIVIDE expr
-- On DARROW reduce production operator_expr -> expr DIVIDE expr
-- On COMMA reduce production operator_expr -> expr DIVIDE expr
-- On COLON reduce production operator_expr -> expr DIVIDE expr
-- On BAR reduce production operator_expr -> expr DIVIDE expr

State 172:
## Known stack suffix:
## expr DCOLON
## LR(1) items:
operator_expr -> expr DCOLON . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 173
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 173:
## Known stack suffix:
## expr DCOLON expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DCOLON expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr DCOLON expr
-- On TIMES reduce production operator_expr -> expr DCOLON expr
-- On SEMICOL reduce production operator_expr -> expr DCOLON expr
-- On RPAREN reduce production operator_expr -> expr DCOLON expr
-- On RBRACKET reduce production operator_expr -> expr DCOLON expr
-- On RBRACE reduce production operator_expr -> expr DCOLON expr
-- On PLUS reduce production operator_expr -> expr DCOLON expr
-- On NUMBER reduce production operator_expr -> expr DCOLON expr
-- On NOTIN reduce production operator_expr -> expr DCOLON expr
-- On NEWLINE reduce production operator_expr -> expr DCOLON expr
-- On NEQ reduce production operator_expr -> expr DCOLON expr
-- On MINUS reduce production operator_expr -> expr DCOLON expr
-- On LT reduce production operator_expr -> expr DCOLON expr
-- On LIDENTIFIER reduce production operator_expr -> expr DCOLON expr
-- On LE reduce production operator_expr -> expr DCOLON expr
-- On KWtrue reduce production operator_expr -> expr DCOLON expr
-- On KWthen reduce production operator_expr -> expr DCOLON expr
-- On KWproof reduce production operator_expr -> expr DCOLON expr
-- On KWor reduce production operator_expr -> expr DCOLON expr
-- On KWnote reduce production operator_expr -> expr DCOLON expr
-- On KWlocal reduce production operator_expr -> expr DCOLON expr
-- On KWin reduce production operator_expr -> expr DCOLON expr
-- On KWimmutable reduce production operator_expr -> expr DCOLON expr
-- On KWfalse reduce production operator_expr -> expr DCOLON expr
-- On KWensure reduce production operator_expr -> expr DCOLON expr
-- On KWend reduce production operator_expr -> expr DCOLON expr
-- On KWelseif reduce production operator_expr -> expr DCOLON expr
-- On KWelse reduce production operator_expr -> expr DCOLON expr
-- On KWdo reduce production operator_expr -> expr DCOLON expr
-- On KWdeferred reduce production operator_expr -> expr DCOLON expr
-- On KWclass reduce production operator_expr -> expr DCOLON expr
-- On KWcase reduce production operator_expr -> expr DCOLON expr
-- On KWas reduce production operator_expr -> expr DCOLON expr
-- On KWand reduce production operator_expr -> expr DCOLON expr
-- On KWall reduce production operator_expr -> expr DCOLON expr
-- On GT reduce production operator_expr -> expr DCOLON expr
-- On GE reduce production operator_expr -> expr DCOLON expr
-- On EQ reduce production operator_expr -> expr DCOLON expr
-- On DIVIDE reduce production operator_expr -> expr DCOLON expr
-- On DBAR reduce production operator_expr -> expr DCOLON expr
-- On DARROW reduce production operator_expr -> expr DCOLON expr
-- On COMMA reduce production operator_expr -> expr DCOLON expr
-- On COLON reduce production operator_expr -> expr DCOLON expr
-- On BAR reduce production operator_expr -> expr DCOLON expr

State 174:
## Known stack suffix:
## expr CARET
## LR(1) items:
operator_expr -> expr CARET . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 175
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 175:
## Known stack suffix:
## expr CARET expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr CARET expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr CARET expr
-- On TIMES reduce production operator_expr -> expr CARET expr
-- On SEMICOL reduce production operator_expr -> expr CARET expr
-- On RPAREN reduce production operator_expr -> expr CARET expr
-- On RBRACKET reduce production operator_expr -> expr CARET expr
-- On RBRACE reduce production operator_expr -> expr CARET expr
-- On PLUS reduce production operator_expr -> expr CARET expr
-- On NUMBER reduce production operator_expr -> expr CARET expr
-- On NOTIN reduce production operator_expr -> expr CARET expr
-- On NEWLINE reduce production operator_expr -> expr CARET expr
-- On NEQ reduce production operator_expr -> expr CARET expr
-- On MINUS reduce production operator_expr -> expr CARET expr
-- On LT reduce production operator_expr -> expr CARET expr
-- On LIDENTIFIER reduce production operator_expr -> expr CARET expr
-- On LE reduce production operator_expr -> expr CARET expr
-- On KWtrue reduce production operator_expr -> expr CARET expr
-- On KWthen reduce production operator_expr -> expr CARET expr
-- On KWproof reduce production operator_expr -> expr CARET expr
-- On KWor reduce production operator_expr -> expr CARET expr
-- On KWnote reduce production operator_expr -> expr CARET expr
-- On KWlocal reduce production operator_expr -> expr CARET expr
-- On KWin reduce production operator_expr -> expr CARET expr
-- On KWimmutable reduce production operator_expr -> expr CARET expr
-- On KWfalse reduce production operator_expr -> expr CARET expr
-- On KWensure reduce production operator_expr -> expr CARET expr
-- On KWend reduce production operator_expr -> expr CARET expr
-- On KWelseif reduce production operator_expr -> expr CARET expr
-- On KWelse reduce production operator_expr -> expr CARET expr
-- On KWdo reduce production operator_expr -> expr CARET expr
-- On KWdeferred reduce production operator_expr -> expr CARET expr
-- On KWclass reduce production operator_expr -> expr CARET expr
-- On KWcase reduce production operator_expr -> expr CARET expr
-- On KWas reduce production operator_expr -> expr CARET expr
-- On KWand reduce production operator_expr -> expr CARET expr
-- On KWall reduce production operator_expr -> expr CARET expr
-- On GT reduce production operator_expr -> expr CARET expr
-- On GE reduce production operator_expr -> expr CARET expr
-- On EQ reduce production operator_expr -> expr CARET expr
-- On DIVIDE reduce production operator_expr -> expr CARET expr
-- On DBAR reduce production operator_expr -> expr CARET expr
-- On DARROW reduce production operator_expr -> expr CARET expr
-- On COMMA reduce production operator_expr -> expr CARET expr
-- On COLON reduce production operator_expr -> expr CARET expr
-- On BAR reduce production operator_expr -> expr CARET expr

State 176:
## Known stack suffix:
## exp_inspect
## LR(1) items:
expr -> exp_inspect . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> exp_inspect

State 177:
## Known stack suffix:
## exp_conditional
## LR(1) items:
expr -> exp_conditional . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> exp_conditional

State 178:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
atomic_expr -> dotted_id_list . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On DOT shift to state 179
## Reductions:
-- On UIDENTIFIER reduce production atomic_expr -> dotted_id_list
-- On TIMES reduce production atomic_expr -> dotted_id_list
-- On SEMICOL reduce production atomic_expr -> dotted_id_list
-- On RPAREN reduce production atomic_expr -> dotted_id_list
-- On RBRACKET reduce production atomic_expr -> dotted_id_list
-- On RBRACE reduce production atomic_expr -> dotted_id_list
-- On PLUS reduce production atomic_expr -> dotted_id_list
-- On NUMBER reduce production atomic_expr -> dotted_id_list
-- On NOTIN reduce production atomic_expr -> dotted_id_list
-- On NEWLINE reduce production atomic_expr -> dotted_id_list
-- On NEQ reduce production atomic_expr -> dotted_id_list
-- On MINUS reduce production atomic_expr -> dotted_id_list
-- On LT reduce production atomic_expr -> dotted_id_list
-- On LPAREN reduce production atomic_expr -> dotted_id_list
-- On LIDENTIFIER reduce production atomic_expr -> dotted_id_list
-- On LE reduce production atomic_expr -> dotted_id_list
-- On LBRACKET reduce production atomic_expr -> dotted_id_list
-- On KWtrue reduce production atomic_expr -> dotted_id_list
-- On KWthen reduce production atomic_expr -> dotted_id_list
-- On KWproof reduce production atomic_expr -> dotted_id_list
-- On KWor reduce production atomic_expr -> dotted_id_list
-- On KWnote reduce production atomic_expr -> dotted_id_list
-- On KWlocal reduce production atomic_expr -> dotted_id_list
-- On KWin reduce production atomic_expr -> dotted_id_list
-- On KWimmutable reduce production atomic_expr -> dotted_id_list
-- On KWfalse reduce production atomic_expr -> dotted_id_list
-- On KWensure reduce production atomic_expr -> dotted_id_list
-- On KWend reduce production atomic_expr -> dotted_id_list
-- On KWelseif reduce production atomic_expr -> dotted_id_list
-- On KWelse reduce production atomic_expr -> dotted_id_list
-- On KWdo reduce production atomic_expr -> dotted_id_list
-- On KWdeferred reduce production atomic_expr -> dotted_id_list
-- On KWclass reduce production atomic_expr -> dotted_id_list
-- On KWcase reduce production atomic_expr -> dotted_id_list
-- On KWas reduce production atomic_expr -> dotted_id_list
-- On KWand reduce production atomic_expr -> dotted_id_list
-- On KWall reduce production atomic_expr -> dotted_id_list
-- On GT reduce production atomic_expr -> dotted_id_list
-- On GE reduce production atomic_expr -> dotted_id_list
-- On EQ reduce production atomic_expr -> dotted_id_list
-- On DIVIDE reduce production atomic_expr -> dotted_id_list
-- On DCOLON reduce production atomic_expr -> dotted_id_list
-- On DBAR reduce production atomic_expr -> dotted_id_list
-- On DARROW reduce production atomic_expr -> dotted_id_list
-- On COMMA reduce production atomic_expr -> dotted_id_list
-- On COLON reduce production atomic_expr -> dotted_id_list
-- On CARET reduce production atomic_expr -> dotted_id_list
-- On BAR reduce production atomic_expr -> dotted_id_list

State 179:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 180
-- On LIDENTIFIER shift to state 10
-- On LBRACE shift to state 221
## Reductions:

State 180:
## Known stack suffix:
## dotted_id_list DOT LPAREN
## LR(1) items:
expr -> dotted_id_list DOT LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 181
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 181:
## Known stack suffix:
## dotted_id_list DOT LPAREN expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> dotted_id_list DOT LPAREN expr . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RPAREN shift to state 182
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 182:
## Known stack suffix:
## dotted_id_list DOT LPAREN expr RPAREN
## LR(1) items:
expr -> dotted_id_list DOT LPAREN expr RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> dotted_id_list DOT LPAREN expr RPAREN

State 183:
## Known stack suffix:
## expr LT
## LR(1) items:
operator_expr -> expr LT . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 184
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 184:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr LT expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr LT expr
-- On SEMICOL reduce production operator_expr -> expr LT expr
-- On RPAREN reduce production operator_expr -> expr LT expr
-- On RBRACKET reduce production operator_expr -> expr LT expr
-- On RBRACE reduce production operator_expr -> expr LT expr
-- On NUMBER reduce production operator_expr -> expr LT expr
-- On NEWLINE reduce production operator_expr -> expr LT expr
-- On LIDENTIFIER reduce production operator_expr -> expr LT expr
-- On KWtrue reduce production operator_expr -> expr LT expr
-- On KWthen reduce production operator_expr -> expr LT expr
-- On KWproof reduce production operator_expr -> expr LT expr
-- On KWor reduce production operator_expr -> expr LT expr
-- On KWnote reduce production operator_expr -> expr LT expr
-- On KWlocal reduce production operator_expr -> expr LT expr
-- On KWimmutable reduce production operator_expr -> expr LT expr
-- On KWfalse reduce production operator_expr -> expr LT expr
-- On KWensure reduce production operator_expr -> expr LT expr
-- On KWend reduce production operator_expr -> expr LT expr
-- On KWelseif reduce production operator_expr -> expr LT expr
-- On KWelse reduce production operator_expr -> expr LT expr
-- On KWdo reduce production operator_expr -> expr LT expr
-- On KWdeferred reduce production operator_expr -> expr LT expr
-- On KWclass reduce production operator_expr -> expr LT expr
-- On KWcase reduce production operator_expr -> expr LT expr
-- On KWand reduce production operator_expr -> expr LT expr
-- On KWall reduce production operator_expr -> expr LT expr
-- On DARROW reduce production operator_expr -> expr LT expr
-- On COMMA reduce production operator_expr -> expr LT expr
-- On COLON reduce production operator_expr -> expr LT expr

State 185:
## Known stack suffix:
## expr DBAR
## LR(1) items:
operator_expr -> expr DBAR . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 186
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 186:
## Known stack suffix:
## expr DBAR expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DBAR expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr DBAR expr
-- On SEMICOL reduce production operator_expr -> expr DBAR expr
-- On RPAREN reduce production operator_expr -> expr DBAR expr
-- On RBRACKET reduce production operator_expr -> expr DBAR expr
-- On RBRACE reduce production operator_expr -> expr DBAR expr
-- On NUMBER reduce production operator_expr -> expr DBAR expr
-- On NOTIN reduce production operator_expr -> expr DBAR expr
-- On NEWLINE reduce production operator_expr -> expr DBAR expr
-- On NEQ reduce production operator_expr -> expr DBAR expr
-- On LT reduce production operator_expr -> expr DBAR expr
-- On LIDENTIFIER reduce production operator_expr -> expr DBAR expr
-- On LE reduce production operator_expr -> expr DBAR expr
-- On KWtrue reduce production operator_expr -> expr DBAR expr
-- On KWthen reduce production operator_expr -> expr DBAR expr
-- On KWproof reduce production operator_expr -> expr DBAR expr
-- On KWor reduce production operator_expr -> expr DBAR expr
-- On KWnote reduce production operator_expr -> expr DBAR expr
-- On KWlocal reduce production operator_expr -> expr DBAR expr
-- On KWin reduce production operator_expr -> expr DBAR expr
-- On KWimmutable reduce production operator_expr -> expr DBAR expr
-- On KWfalse reduce production operator_expr -> expr DBAR expr
-- On KWensure reduce production operator_expr -> expr DBAR expr
-- On KWend reduce production operator_expr -> expr DBAR expr
-- On KWelseif reduce production operator_expr -> expr DBAR expr
-- On KWelse reduce production operator_expr -> expr DBAR expr
-- On KWdo reduce production operator_expr -> expr DBAR expr
-- On KWdeferred reduce production operator_expr -> expr DBAR expr
-- On KWclass reduce production operator_expr -> expr DBAR expr
-- On KWcase reduce production operator_expr -> expr DBAR expr
-- On KWas reduce production operator_expr -> expr DBAR expr
-- On KWand reduce production operator_expr -> expr DBAR expr
-- On KWall reduce production operator_expr -> expr DBAR expr
-- On GT reduce production operator_expr -> expr DBAR expr
-- On GE reduce production operator_expr -> expr DBAR expr
-- On EQ reduce production operator_expr -> expr DBAR expr
-- On DBAR reduce production operator_expr -> expr DBAR expr
-- On DARROW reduce production operator_expr -> expr DBAR expr
-- On COMMA reduce production operator_expr -> expr DBAR expr
-- On COLON reduce production operator_expr -> expr DBAR expr
-- On BAR reduce production operator_expr -> expr DBAR expr

State 187:
## Known stack suffix:
## atomic_expr
## LR(1) items:
expr -> atomic_expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> atomic_expr

State 188:
## Known stack suffix:
## expr BAR
## LR(1) items:
operator_expr -> expr BAR . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 189
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 189:
## Known stack suffix:
## expr BAR expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr BAR expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr BAR expr
-- On SEMICOL reduce production operator_expr -> expr BAR expr
-- On RPAREN reduce production operator_expr -> expr BAR expr
-- On RBRACKET reduce production operator_expr -> expr BAR expr
-- On RBRACE reduce production operator_expr -> expr BAR expr
-- On NUMBER reduce production operator_expr -> expr BAR expr
-- On NOTIN reduce production operator_expr -> expr BAR expr
-- On NEWLINE reduce production operator_expr -> expr BAR expr
-- On NEQ reduce production operator_expr -> expr BAR expr
-- On LT reduce production operator_expr -> expr BAR expr
-- On LIDENTIFIER reduce production operator_expr -> expr BAR expr
-- On LE reduce production operator_expr -> expr BAR expr
-- On KWtrue reduce production operator_expr -> expr BAR expr
-- On KWthen reduce production operator_expr -> expr BAR expr
-- On KWproof reduce production operator_expr -> expr BAR expr
-- On KWor reduce production operator_expr -> expr BAR expr
-- On KWnote reduce production operator_expr -> expr BAR expr
-- On KWlocal reduce production operator_expr -> expr BAR expr
-- On KWin reduce production operator_expr -> expr BAR expr
-- On KWimmutable reduce production operator_expr -> expr BAR expr
-- On KWfalse reduce production operator_expr -> expr BAR expr
-- On KWensure reduce production operator_expr -> expr BAR expr
-- On KWend reduce production operator_expr -> expr BAR expr
-- On KWelseif reduce production operator_expr -> expr BAR expr
-- On KWelse reduce production operator_expr -> expr BAR expr
-- On KWdo reduce production operator_expr -> expr BAR expr
-- On KWdeferred reduce production operator_expr -> expr BAR expr
-- On KWclass reduce production operator_expr -> expr BAR expr
-- On KWcase reduce production operator_expr -> expr BAR expr
-- On KWas reduce production operator_expr -> expr BAR expr
-- On KWand reduce production operator_expr -> expr BAR expr
-- On KWall reduce production operator_expr -> expr BAR expr
-- On GT reduce production operator_expr -> expr BAR expr
-- On GE reduce production operator_expr -> expr BAR expr
-- On EQ reduce production operator_expr -> expr BAR expr
-- On DBAR reduce production operator_expr -> expr BAR expr
-- On DARROW reduce production operator_expr -> expr BAR expr
-- On COMMA reduce production operator_expr -> expr BAR expr
-- On COLON reduce production operator_expr -> expr BAR expr
-- On BAR reduce production operator_expr -> expr BAR expr

State 190:
## Known stack suffix:
## expr LE
## LR(1) items:
operator_expr -> expr LE . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 191
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 191:
## Known stack suffix:
## expr LE expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr LE expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr LE expr
-- On SEMICOL reduce production operator_expr -> expr LE expr
-- On RPAREN reduce production operator_expr -> expr LE expr
-- On RBRACKET reduce production operator_expr -> expr LE expr
-- On RBRACE reduce production operator_expr -> expr LE expr
-- On NUMBER reduce production operator_expr -> expr LE expr
-- On NEWLINE reduce production operator_expr -> expr LE expr
-- On LIDENTIFIER reduce production operator_expr -> expr LE expr
-- On KWtrue reduce production operator_expr -> expr LE expr
-- On KWthen reduce production operator_expr -> expr LE expr
-- On KWproof reduce production operator_expr -> expr LE expr
-- On KWor reduce production operator_expr -> expr LE expr
-- On KWnote reduce production operator_expr -> expr LE expr
-- On KWlocal reduce production operator_expr -> expr LE expr
-- On KWimmutable reduce production operator_expr -> expr LE expr
-- On KWfalse reduce production operator_expr -> expr LE expr
-- On KWensure reduce production operator_expr -> expr LE expr
-- On KWend reduce production operator_expr -> expr LE expr
-- On KWelseif reduce production operator_expr -> expr LE expr
-- On KWelse reduce production operator_expr -> expr LE expr
-- On KWdo reduce production operator_expr -> expr LE expr
-- On KWdeferred reduce production operator_expr -> expr LE expr
-- On KWclass reduce production operator_expr -> expr LE expr
-- On KWcase reduce production operator_expr -> expr LE expr
-- On KWand reduce production operator_expr -> expr LE expr
-- On KWall reduce production operator_expr -> expr LE expr
-- On DARROW reduce production operator_expr -> expr LE expr
-- On COMMA reduce production operator_expr -> expr LE expr
-- On COLON reduce production operator_expr -> expr LE expr

State 192:
## Known stack suffix:
## expr KWor
## LR(1) items:
operator_expr -> expr KWor . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 193
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 193:
## Known stack suffix:
## expr KWor expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWor expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr KWor expr
-- On SEMICOL reduce production operator_expr -> expr KWor expr
-- On RPAREN reduce production operator_expr -> expr KWor expr
-- On RBRACKET reduce production operator_expr -> expr KWor expr
-- On RBRACE reduce production operator_expr -> expr KWor expr
-- On NUMBER reduce production operator_expr -> expr KWor expr
-- On NEWLINE reduce production operator_expr -> expr KWor expr
-- On LIDENTIFIER reduce production operator_expr -> expr KWor expr
-- On KWtrue reduce production operator_expr -> expr KWor expr
-- On KWthen reduce production operator_expr -> expr KWor expr
-- On KWproof reduce production operator_expr -> expr KWor expr
-- On KWor reduce production operator_expr -> expr KWor expr
-- On KWnote reduce production operator_expr -> expr KWor expr
-- On KWlocal reduce production operator_expr -> expr KWor expr
-- On KWimmutable reduce production operator_expr -> expr KWor expr
-- On KWfalse reduce production operator_expr -> expr KWor expr
-- On KWensure reduce production operator_expr -> expr KWor expr
-- On KWend reduce production operator_expr -> expr KWor expr
-- On KWelseif reduce production operator_expr -> expr KWor expr
-- On KWelse reduce production operator_expr -> expr KWor expr
-- On KWdo reduce production operator_expr -> expr KWor expr
-- On KWdeferred reduce production operator_expr -> expr KWor expr
-- On KWclass reduce production operator_expr -> expr KWor expr
-- On KWcase reduce production operator_expr -> expr KWor expr
-- On KWand reduce production operator_expr -> expr KWor expr
-- On KWall reduce production operator_expr -> expr KWor expr
-- On DARROW reduce production operator_expr -> expr KWor expr
-- On COMMA reduce production operator_expr -> expr KWor expr
-- On COLON reduce production operator_expr -> expr KWor expr

State 194:
## Known stack suffix:
## expr KWin
## LR(1) items:
operator_expr -> expr KWin . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 195
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 195:
## Known stack suffix:
## expr KWin expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWin expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr KWin expr
-- On SEMICOL reduce production operator_expr -> expr KWin expr
-- On RPAREN reduce production operator_expr -> expr KWin expr
-- On RBRACKET reduce production operator_expr -> expr KWin expr
-- On RBRACE reduce production operator_expr -> expr KWin expr
-- On NUMBER reduce production operator_expr -> expr KWin expr
-- On NEWLINE reduce production operator_expr -> expr KWin expr
-- On LIDENTIFIER reduce production operator_expr -> expr KWin expr
-- On KWtrue reduce production operator_expr -> expr KWin expr
-- On KWthen reduce production operator_expr -> expr KWin expr
-- On KWproof reduce production operator_expr -> expr KWin expr
-- On KWor reduce production operator_expr -> expr KWin expr
-- On KWnote reduce production operator_expr -> expr KWin expr
-- On KWlocal reduce production operator_expr -> expr KWin expr
-- On KWimmutable reduce production operator_expr -> expr KWin expr
-- On KWfalse reduce production operator_expr -> expr KWin expr
-- On KWensure reduce production operator_expr -> expr KWin expr
-- On KWend reduce production operator_expr -> expr KWin expr
-- On KWelseif reduce production operator_expr -> expr KWin expr
-- On KWelse reduce production operator_expr -> expr KWin expr
-- On KWdo reduce production operator_expr -> expr KWin expr
-- On KWdeferred reduce production operator_expr -> expr KWin expr
-- On KWclass reduce production operator_expr -> expr KWin expr
-- On KWcase reduce production operator_expr -> expr KWin expr
-- On KWand reduce production operator_expr -> expr KWin expr
-- On KWall reduce production operator_expr -> expr KWin expr
-- On DARROW reduce production operator_expr -> expr KWin expr
-- On COMMA reduce production operator_expr -> expr KWin expr
-- On COLON reduce production operator_expr -> expr KWin expr

State 196:
## Known stack suffix:
## expr KWas
## LR(1) items:
operator_expr -> expr KWas . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 197
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 197:
## Known stack suffix:
## expr KWas expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWas expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr KWas expr
-- On SEMICOL reduce production operator_expr -> expr KWas expr
-- On RPAREN reduce production operator_expr -> expr KWas expr
-- On RBRACKET reduce production operator_expr -> expr KWas expr
-- On RBRACE reduce production operator_expr -> expr KWas expr
-- On NUMBER reduce production operator_expr -> expr KWas expr
-- On NEWLINE reduce production operator_expr -> expr KWas expr
-- On LIDENTIFIER reduce production operator_expr -> expr KWas expr
-- On KWtrue reduce production operator_expr -> expr KWas expr
-- On KWthen reduce production operator_expr -> expr KWas expr
-- On KWproof reduce production operator_expr -> expr KWas expr
-- On KWor reduce production operator_expr -> expr KWas expr
-- On KWnote reduce production operator_expr -> expr KWas expr
-- On KWlocal reduce production operator_expr -> expr KWas expr
-- On KWimmutable reduce production operator_expr -> expr KWas expr
-- On KWfalse reduce production operator_expr -> expr KWas expr
-- On KWensure reduce production operator_expr -> expr KWas expr
-- On KWend reduce production operator_expr -> expr KWas expr
-- On KWelseif reduce production operator_expr -> expr KWas expr
-- On KWelse reduce production operator_expr -> expr KWas expr
-- On KWdo reduce production operator_expr -> expr KWas expr
-- On KWdeferred reduce production operator_expr -> expr KWas expr
-- On KWclass reduce production operator_expr -> expr KWas expr
-- On KWcase reduce production operator_expr -> expr KWas expr
-- On KWand reduce production operator_expr -> expr KWas expr
-- On KWall reduce production operator_expr -> expr KWas expr
-- On DARROW reduce production operator_expr -> expr KWas expr
-- On COMMA reduce production operator_expr -> expr KWas expr
-- On COLON reduce production operator_expr -> expr KWas expr

State 198:
## Known stack suffix:
## expr GT
## LR(1) items:
operator_expr -> expr GT . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 199
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 199:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr GT expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr GT expr
-- On SEMICOL reduce production operator_expr -> expr GT expr
-- On RPAREN reduce production operator_expr -> expr GT expr
-- On RBRACKET reduce production operator_expr -> expr GT expr
-- On RBRACE reduce production operator_expr -> expr GT expr
-- On NUMBER reduce production operator_expr -> expr GT expr
-- On NEWLINE reduce production operator_expr -> expr GT expr
-- On LIDENTIFIER reduce production operator_expr -> expr GT expr
-- On KWtrue reduce production operator_expr -> expr GT expr
-- On KWthen reduce production operator_expr -> expr GT expr
-- On KWproof reduce production operator_expr -> expr GT expr
-- On KWor reduce production operator_expr -> expr GT expr
-- On KWnote reduce production operator_expr -> expr GT expr
-- On KWlocal reduce production operator_expr -> expr GT expr
-- On KWimmutable reduce production operator_expr -> expr GT expr
-- On KWfalse reduce production operator_expr -> expr GT expr
-- On KWensure reduce production operator_expr -> expr GT expr
-- On KWend reduce production operator_expr -> expr GT expr
-- On KWelseif reduce production operator_expr -> expr GT expr
-- On KWelse reduce production operator_expr -> expr GT expr
-- On KWdo reduce production operator_expr -> expr GT expr
-- On KWdeferred reduce production operator_expr -> expr GT expr
-- On KWclass reduce production operator_expr -> expr GT expr
-- On KWcase reduce production operator_expr -> expr GT expr
-- On KWand reduce production operator_expr -> expr GT expr
-- On KWall reduce production operator_expr -> expr GT expr
-- On DARROW reduce production operator_expr -> expr GT expr
-- On COMMA reduce production operator_expr -> expr GT expr
-- On COLON reduce production operator_expr -> expr GT expr

State 200:
## Known stack suffix:
## expr GE
## LR(1) items:
operator_expr -> expr GE . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 201
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 201:
## Known stack suffix:
## expr GE expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr GE expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr GE expr
-- On SEMICOL reduce production operator_expr -> expr GE expr
-- On RPAREN reduce production operator_expr -> expr GE expr
-- On RBRACKET reduce production operator_expr -> expr GE expr
-- On RBRACE reduce production operator_expr -> expr GE expr
-- On NUMBER reduce production operator_expr -> expr GE expr
-- On NEWLINE reduce production operator_expr -> expr GE expr
-- On LIDENTIFIER reduce production operator_expr -> expr GE expr
-- On KWtrue reduce production operator_expr -> expr GE expr
-- On KWthen reduce production operator_expr -> expr GE expr
-- On KWproof reduce production operator_expr -> expr GE expr
-- On KWor reduce production operator_expr -> expr GE expr
-- On KWnote reduce production operator_expr -> expr GE expr
-- On KWlocal reduce production operator_expr -> expr GE expr
-- On KWimmutable reduce production operator_expr -> expr GE expr
-- On KWfalse reduce production operator_expr -> expr GE expr
-- On KWensure reduce production operator_expr -> expr GE expr
-- On KWend reduce production operator_expr -> expr GE expr
-- On KWelseif reduce production operator_expr -> expr GE expr
-- On KWelse reduce production operator_expr -> expr GE expr
-- On KWdo reduce production operator_expr -> expr GE expr
-- On KWdeferred reduce production operator_expr -> expr GE expr
-- On KWclass reduce production operator_expr -> expr GE expr
-- On KWcase reduce production operator_expr -> expr GE expr
-- On KWand reduce production operator_expr -> expr GE expr
-- On KWall reduce production operator_expr -> expr GE expr
-- On DARROW reduce production operator_expr -> expr GE expr
-- On COMMA reduce production operator_expr -> expr GE expr
-- On COLON reduce production operator_expr -> expr GE expr

State 202:
## Known stack suffix:
## expr EQ
## LR(1) items:
operator_expr -> expr EQ . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 203
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 203:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr EQ expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On MINUS shift to state 161
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr EQ expr
-- On SEMICOL reduce production operator_expr -> expr EQ expr
-- On RPAREN reduce production operator_expr -> expr EQ expr
-- On RBRACKET reduce production operator_expr -> expr EQ expr
-- On RBRACE reduce production operator_expr -> expr EQ expr
-- On NUMBER reduce production operator_expr -> expr EQ expr
-- On NEWLINE reduce production operator_expr -> expr EQ expr
-- On LIDENTIFIER reduce production operator_expr -> expr EQ expr
-- On KWtrue reduce production operator_expr -> expr EQ expr
-- On KWthen reduce production operator_expr -> expr EQ expr
-- On KWproof reduce production operator_expr -> expr EQ expr
-- On KWor reduce production operator_expr -> expr EQ expr
-- On KWnote reduce production operator_expr -> expr EQ expr
-- On KWlocal reduce production operator_expr -> expr EQ expr
-- On KWimmutable reduce production operator_expr -> expr EQ expr
-- On KWfalse reduce production operator_expr -> expr EQ expr
-- On KWensure reduce production operator_expr -> expr EQ expr
-- On KWend reduce production operator_expr -> expr EQ expr
-- On KWelseif reduce production operator_expr -> expr EQ expr
-- On KWelse reduce production operator_expr -> expr EQ expr
-- On KWdo reduce production operator_expr -> expr EQ expr
-- On KWdeferred reduce production operator_expr -> expr EQ expr
-- On KWclass reduce production operator_expr -> expr EQ expr
-- On KWcase reduce production operator_expr -> expr EQ expr
-- On KWand reduce production operator_expr -> expr EQ expr
-- On KWall reduce production operator_expr -> expr EQ expr
-- On DARROW reduce production operator_expr -> expr EQ expr
-- On COMMA reduce production operator_expr -> expr EQ expr
-- On COLON reduce production operator_expr -> expr EQ expr

State 204:
## Known stack suffix:
## expr KWand
## LR(1) items:
operator_expr -> expr KWand . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 205
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 205:
## Known stack suffix:
## expr KWand expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr KWand expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr KWand expr
-- On SEMICOL reduce production operator_expr -> expr KWand expr
-- On RPAREN reduce production operator_expr -> expr KWand expr
-- On RBRACKET reduce production operator_expr -> expr KWand expr
-- On RBRACE reduce production operator_expr -> expr KWand expr
-- On NUMBER reduce production operator_expr -> expr KWand expr
-- On NEWLINE reduce production operator_expr -> expr KWand expr
-- On LIDENTIFIER reduce production operator_expr -> expr KWand expr
-- On KWtrue reduce production operator_expr -> expr KWand expr
-- On KWthen reduce production operator_expr -> expr KWand expr
-- On KWproof reduce production operator_expr -> expr KWand expr
-- On KWor reduce production operator_expr -> expr KWand expr
-- On KWnote reduce production operator_expr -> expr KWand expr
-- On KWlocal reduce production operator_expr -> expr KWand expr
-- On KWimmutable reduce production operator_expr -> expr KWand expr
-- On KWfalse reduce production operator_expr -> expr KWand expr
-- On KWensure reduce production operator_expr -> expr KWand expr
-- On KWend reduce production operator_expr -> expr KWand expr
-- On KWelseif reduce production operator_expr -> expr KWand expr
-- On KWelse reduce production operator_expr -> expr KWand expr
-- On KWdo reduce production operator_expr -> expr KWand expr
-- On KWdeferred reduce production operator_expr -> expr KWand expr
-- On KWclass reduce production operator_expr -> expr KWand expr
-- On KWcase reduce production operator_expr -> expr KWand expr
-- On KWand reduce production operator_expr -> expr KWand expr
-- On KWall reduce production operator_expr -> expr KWand expr
-- On DARROW reduce production operator_expr -> expr KWand expr
-- On COMMA reduce production operator_expr -> expr KWand expr
-- On COLON reduce production operator_expr -> expr KWand expr

State 206:
## Known stack suffix:
## expr DARROW
## LR(1) items:
operator_expr -> expr DARROW . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 207
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 207:
## Known stack suffix:
## expr DARROW expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr DARROW expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr DARROW expr
-- On SEMICOL reduce production operator_expr -> expr DARROW expr
-- On RPAREN reduce production operator_expr -> expr DARROW expr
-- On RBRACKET reduce production operator_expr -> expr DARROW expr
-- On RBRACE reduce production operator_expr -> expr DARROW expr
-- On NUMBER reduce production operator_expr -> expr DARROW expr
-- On NEWLINE reduce production operator_expr -> expr DARROW expr
-- On LIDENTIFIER reduce production operator_expr -> expr DARROW expr
-- On KWtrue reduce production operator_expr -> expr DARROW expr
-- On KWthen reduce production operator_expr -> expr DARROW expr
-- On KWproof reduce production operator_expr -> expr DARROW expr
-- On KWnote reduce production operator_expr -> expr DARROW expr
-- On KWlocal reduce production operator_expr -> expr DARROW expr
-- On KWimmutable reduce production operator_expr -> expr DARROW expr
-- On KWfalse reduce production operator_expr -> expr DARROW expr
-- On KWensure reduce production operator_expr -> expr DARROW expr
-- On KWend reduce production operator_expr -> expr DARROW expr
-- On KWelseif reduce production operator_expr -> expr DARROW expr
-- On KWelse reduce production operator_expr -> expr DARROW expr
-- On KWdo reduce production operator_expr -> expr DARROW expr
-- On KWdeferred reduce production operator_expr -> expr DARROW expr
-- On KWclass reduce production operator_expr -> expr DARROW expr
-- On KWcase reduce production operator_expr -> expr DARROW expr
-- On KWall reduce production operator_expr -> expr DARROW expr
-- On COMMA reduce production operator_expr -> expr DARROW expr
-- On COLON reduce production operator_expr -> expr DARROW expr

State 208:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr -> expr COMMA . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 209
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 209:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr COMMA expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production expr -> expr COMMA expr
-- On SEMICOL reduce production expr -> expr COMMA expr
-- On RPAREN reduce production expr -> expr COMMA expr
-- On RBRACKET reduce production expr -> expr COMMA expr
-- On RBRACE reduce production expr -> expr COMMA expr
-- On NUMBER reduce production expr -> expr COMMA expr
-- On NEWLINE reduce production expr -> expr COMMA expr
-- On LIDENTIFIER reduce production expr -> expr COMMA expr
-- On KWtrue reduce production expr -> expr COMMA expr
-- On KWthen reduce production expr -> expr COMMA expr
-- On KWproof reduce production expr -> expr COMMA expr
-- On KWnote reduce production expr -> expr COMMA expr
-- On KWlocal reduce production expr -> expr COMMA expr
-- On KWimmutable reduce production expr -> expr COMMA expr
-- On KWfalse reduce production expr -> expr COMMA expr
-- On KWensure reduce production expr -> expr COMMA expr
-- On KWend reduce production expr -> expr COMMA expr
-- On KWelseif reduce production expr -> expr COMMA expr
-- On KWelse reduce production expr -> expr COMMA expr
-- On KWdo reduce production expr -> expr COMMA expr
-- On KWdeferred reduce production expr -> expr COMMA expr
-- On KWclass reduce production expr -> expr COMMA expr
-- On KWcase reduce production expr -> expr COMMA expr
-- On KWall reduce production expr -> expr COMMA expr

State 210:
## Known stack suffix:
## expr COLON
## LR(1) items:
expr -> expr COLON . type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr COLON . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On UIDENTIFIER shift to state 20
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 211
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 216
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On type_nt shift to state 232
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On operator_expr shift to state 145
-- On list_type shift to state 31
-- On expr shift to state 233
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 219
-- On atomic_expr shift to state 187
-- On arrow_type shift to state 46
## Reductions:

State 211:
## Known stack suffix:
## LPAREN
## LR(1) items:
elem_type -> LPAREN . type_nt RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW # ]
expr -> LPAREN . expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . operator RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN . expr RPAREN ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
tuple_type -> LPAREN . type_list_min2 RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW # ]
## Transitions:
-- On USCORE shift to state 109
-- On UIDENTIFIER shift to state 20
-- On TIMES shift to state 115
-- On ROPERATOR shift to state 58
-- On PLUS shift to state 212
-- On PARENOP shift to state 60
-- On OPERATOR shift to state 61
-- On NUMBER shift to state 112
-- On NOTIN shift to state 62
-- On NEQV shift to state 63
-- On NEQ shift to state 64
-- On MINUS shift to state 214
-- On LT shift to state 66
-- On LPAREN shift to state 211
-- On LIDENTIFIER shift to state 116
-- On LE shift to state 67
-- On LBRACKET shift to state 216
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWor shift to state 68
-- On KWold shift to state 124
-- On KWnot shift to state 224
-- On KWinspect shift to state 126
-- On KWin shift to state 70
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWand shift to state 71
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On GT shift to state 72
-- On GE shift to state 73
-- On EQV shift to state 74
-- On EQ shift to state 75
-- On DIVIDE shift to state 76
-- On DCOLON shift to state 77
-- On DBAR shift to state 78
-- On DARROW shift to state 79
-- On CARET shift to state 80
-- On BRACKETOP shift to state 81
-- On BAR shift to state 82
-- On type_nt shift to state 38
-- On type_list_min2 shift to state 47
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On operator_expr shift to state 145
-- On operator shift to state 226
-- On list_type shift to state 31
-- On expr shift to state 228
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 219
-- On atomic_expr shift to state 187
-- On arrow_type shift to state 46
## Reductions:

State 212:
## Known stack suffix:
## PLUS
## LR(1) items:
operator -> PLUS . [ RPAREN ]
operator_expr -> PLUS . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 213
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN reduce production operator -> PLUS

State 213:
## Known stack suffix:
## PLUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> PLUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> PLUS expr
-- On SEMICOL reduce production operator_expr -> PLUS expr
-- On RPAREN reduce production operator_expr -> PLUS expr
-- On RBRACKET reduce production operator_expr -> PLUS expr
-- On RBRACE reduce production operator_expr -> PLUS expr
-- On PLUS reduce production operator_expr -> PLUS expr
-- On NUMBER reduce production operator_expr -> PLUS expr
-- On NOTIN reduce production operator_expr -> PLUS expr
-- On NEWLINE reduce production operator_expr -> PLUS expr
-- On NEQ reduce production operator_expr -> PLUS expr
-- On MINUS reduce production operator_expr -> PLUS expr
-- On LT reduce production operator_expr -> PLUS expr
-- On LIDENTIFIER reduce production operator_expr -> PLUS expr
-- On LE reduce production operator_expr -> PLUS expr
-- On KWtrue reduce production operator_expr -> PLUS expr
-- On KWthen reduce production operator_expr -> PLUS expr
-- On KWproof reduce production operator_expr -> PLUS expr
-- On KWor reduce production operator_expr -> PLUS expr
-- On KWnote reduce production operator_expr -> PLUS expr
-- On KWlocal reduce production operator_expr -> PLUS expr
-- On KWin reduce production operator_expr -> PLUS expr
-- On KWimmutable reduce production operator_expr -> PLUS expr
-- On KWfalse reduce production operator_expr -> PLUS expr
-- On KWensure reduce production operator_expr -> PLUS expr
-- On KWend reduce production operator_expr -> PLUS expr
-- On KWelseif reduce production operator_expr -> PLUS expr
-- On KWelse reduce production operator_expr -> PLUS expr
-- On KWdo reduce production operator_expr -> PLUS expr
-- On KWdeferred reduce production operator_expr -> PLUS expr
-- On KWclass reduce production operator_expr -> PLUS expr
-- On KWcase reduce production operator_expr -> PLUS expr
-- On KWas reduce production operator_expr -> PLUS expr
-- On KWand reduce production operator_expr -> PLUS expr
-- On KWall reduce production operator_expr -> PLUS expr
-- On GT reduce production operator_expr -> PLUS expr
-- On GE reduce production operator_expr -> PLUS expr
-- On EQ reduce production operator_expr -> PLUS expr
-- On DBAR reduce production operator_expr -> PLUS expr
-- On DARROW reduce production operator_expr -> PLUS expr
-- On COMMA reduce production operator_expr -> PLUS expr
-- On COLON reduce production operator_expr -> PLUS expr
-- On BAR reduce production operator_expr -> PLUS expr

State 214:
## Known stack suffix:
## MINUS
## LR(1) items:
operator -> MINUS . [ RPAREN ]
operator_expr -> MINUS . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 215
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN reduce production operator -> MINUS

State 215:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> MINUS expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> MINUS expr
-- On SEMICOL reduce production operator_expr -> MINUS expr
-- On RPAREN reduce production operator_expr -> MINUS expr
-- On RBRACKET reduce production operator_expr -> MINUS expr
-- On RBRACE reduce production operator_expr -> MINUS expr
-- On PLUS reduce production operator_expr -> MINUS expr
-- On NUMBER reduce production operator_expr -> MINUS expr
-- On NOTIN reduce production operator_expr -> MINUS expr
-- On NEWLINE reduce production operator_expr -> MINUS expr
-- On NEQ reduce production operator_expr -> MINUS expr
-- On MINUS reduce production operator_expr -> MINUS expr
-- On LT reduce production operator_expr -> MINUS expr
-- On LIDENTIFIER reduce production operator_expr -> MINUS expr
-- On LE reduce production operator_expr -> MINUS expr
-- On KWtrue reduce production operator_expr -> MINUS expr
-- On KWthen reduce production operator_expr -> MINUS expr
-- On KWproof reduce production operator_expr -> MINUS expr
-- On KWor reduce production operator_expr -> MINUS expr
-- On KWnote reduce production operator_expr -> MINUS expr
-- On KWlocal reduce production operator_expr -> MINUS expr
-- On KWin reduce production operator_expr -> MINUS expr
-- On KWimmutable reduce production operator_expr -> MINUS expr
-- On KWfalse reduce production operator_expr -> MINUS expr
-- On KWensure reduce production operator_expr -> MINUS expr
-- On KWend reduce production operator_expr -> MINUS expr
-- On KWelseif reduce production operator_expr -> MINUS expr
-- On KWelse reduce production operator_expr -> MINUS expr
-- On KWdo reduce production operator_expr -> MINUS expr
-- On KWdeferred reduce production operator_expr -> MINUS expr
-- On KWclass reduce production operator_expr -> MINUS expr
-- On KWcase reduce production operator_expr -> MINUS expr
-- On KWas reduce production operator_expr -> MINUS expr
-- On KWand reduce production operator_expr -> MINUS expr
-- On KWall reduce production operator_expr -> MINUS expr
-- On GT reduce production operator_expr -> MINUS expr
-- On GE reduce production operator_expr -> MINUS expr
-- On EQ reduce production operator_expr -> MINUS expr
-- On DBAR reduce production operator_expr -> MINUS expr
-- On DARROW reduce production operator_expr -> MINUS expr
-- On COMMA reduce production operator_expr -> MINUS expr
-- On COLON reduce production operator_expr -> MINUS expr
-- On BAR reduce production operator_expr -> MINUS expr

State 216:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
list_type -> LBRACKET . elem_type RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE QMARK PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ARROW # ]
## Transitions:
-- On USCORE shift to state 109
-- On UIDENTIFIER shift to state 20
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 211
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 216
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On operator_expr shift to state 145
-- On list_type shift to state 31
-- On expr shift to state 217
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On elem_type shift to state 32
-- On dotted_id_list shift to state 219
-- On atomic_expr shift to state 187
## Reductions:

State 217:
## Known stack suffix:
## LBRACKET expr
## LR(1) items:
expr -> LBRACKET expr . RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COMMA expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACKET PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACKET shift to state 218
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 218:
## Known stack suffix:
## LBRACKET expr RBRACKET
## LR(1) items:
expr -> LBRACKET expr RBRACKET . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACKET expr RBRACKET

State 219:
## Known stack suffix:
## dotted_id_list
## LR(1) items:
atomic_expr -> dotted_id_list . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
dotted_id_list -> dotted_id_list . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
path -> dotted_id_list . DOT [ UIDENTIFIER ]
## Transitions:
-- On DOT shift to state 220
## Reductions:
-- On UIDENTIFIER reduce production atomic_expr -> dotted_id_list
-- On TIMES reduce production atomic_expr -> dotted_id_list
-- On SEMICOL reduce production atomic_expr -> dotted_id_list
-- On RPAREN reduce production atomic_expr -> dotted_id_list
-- On RBRACKET reduce production atomic_expr -> dotted_id_list
-- On RBRACE reduce production atomic_expr -> dotted_id_list
-- On PLUS reduce production atomic_expr -> dotted_id_list
-- On NUMBER reduce production atomic_expr -> dotted_id_list
-- On NOTIN reduce production atomic_expr -> dotted_id_list
-- On NEWLINE reduce production atomic_expr -> dotted_id_list
-- On NEQ reduce production atomic_expr -> dotted_id_list
-- On MINUS reduce production atomic_expr -> dotted_id_list
-- On LT reduce production atomic_expr -> dotted_id_list
-- On LPAREN reduce production atomic_expr -> dotted_id_list
-- On LIDENTIFIER reduce production atomic_expr -> dotted_id_list
-- On LE reduce production atomic_expr -> dotted_id_list
-- On LBRACKET reduce production atomic_expr -> dotted_id_list
-- On KWtrue reduce production atomic_expr -> dotted_id_list
-- On KWthen reduce production atomic_expr -> dotted_id_list
-- On KWproof reduce production atomic_expr -> dotted_id_list
-- On KWor reduce production atomic_expr -> dotted_id_list
-- On KWnote reduce production atomic_expr -> dotted_id_list
-- On KWlocal reduce production atomic_expr -> dotted_id_list
-- On KWin reduce production atomic_expr -> dotted_id_list
-- On KWimmutable reduce production atomic_expr -> dotted_id_list
-- On KWfalse reduce production atomic_expr -> dotted_id_list
-- On KWensure reduce production atomic_expr -> dotted_id_list
-- On KWend reduce production atomic_expr -> dotted_id_list
-- On KWelseif reduce production atomic_expr -> dotted_id_list
-- On KWelse reduce production atomic_expr -> dotted_id_list
-- On KWdo reduce production atomic_expr -> dotted_id_list
-- On KWdeferred reduce production atomic_expr -> dotted_id_list
-- On KWclass reduce production atomic_expr -> dotted_id_list
-- On KWcase reduce production atomic_expr -> dotted_id_list
-- On KWas reduce production atomic_expr -> dotted_id_list
-- On KWand reduce production atomic_expr -> dotted_id_list
-- On KWall reduce production atomic_expr -> dotted_id_list
-- On GT reduce production atomic_expr -> dotted_id_list
-- On GE reduce production atomic_expr -> dotted_id_list
-- On EQ reduce production atomic_expr -> dotted_id_list
-- On DIVIDE reduce production atomic_expr -> dotted_id_list
-- On DCOLON reduce production atomic_expr -> dotted_id_list
-- On DBAR reduce production atomic_expr -> dotted_id_list
-- On DARROW reduce production atomic_expr -> dotted_id_list
-- On COMMA reduce production atomic_expr -> dotted_id_list
-- On COLON reduce production atomic_expr -> dotted_id_list
-- On CARET reduce production atomic_expr -> dotted_id_list
-- On BAR reduce production atomic_expr -> dotted_id_list

State 220:
## Known stack suffix:
## dotted_id_list DOT
## LR(1) items:
dotted_id_list -> dotted_id_list DOT . LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> dotted_id_list DOT . LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
path -> dotted_id_list DOT . [ UIDENTIFIER ]
## Transitions:
-- On LPAREN shift to state 180
-- On LIDENTIFIER shift to state 10
-- On LBRACE shift to state 221
## Reductions:
-- On UIDENTIFIER reduce production path -> dotted_id_list DOT

State 221:
## Known stack suffix:
## dotted_id_list DOT LBRACE
## LR(1) items:
expr -> dotted_id_list DOT LBRACE . expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 222
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 222:
## Known stack suffix:
## dotted_id_list DOT LBRACE expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> dotted_id_list DOT LBRACE expr . RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACE shift to state 223
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 223:
## Known stack suffix:
## dotted_id_list DOT LBRACE expr RBRACE
## LR(1) items:
expr -> dotted_id_list DOT LBRACE expr RBRACE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> dotted_id_list DOT LBRACE expr RBRACE

State 224:
## Known stack suffix:
## KWnot
## LR(1) items:
operator -> KWnot . [ RPAREN ]
operator_expr -> KWnot . expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 225
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On RPAREN reduce production operator -> KWnot

State 225:
## Known stack suffix:
## KWnot expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> KWnot expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> KWnot expr
-- On TIMES reduce production operator_expr -> KWnot expr
-- On SEMICOL reduce production operator_expr -> KWnot expr
-- On RPAREN reduce production operator_expr -> KWnot expr
-- On RBRACKET reduce production operator_expr -> KWnot expr
-- On RBRACE reduce production operator_expr -> KWnot expr
-- On PLUS reduce production operator_expr -> KWnot expr
-- On NUMBER reduce production operator_expr -> KWnot expr
-- On NOTIN reduce production operator_expr -> KWnot expr
-- On NEWLINE reduce production operator_expr -> KWnot expr
-- On NEQ reduce production operator_expr -> KWnot expr
-- On MINUS reduce production operator_expr -> KWnot expr
-- On LT reduce production operator_expr -> KWnot expr
-- On LIDENTIFIER reduce production operator_expr -> KWnot expr
-- On LE reduce production operator_expr -> KWnot expr
-- On KWtrue reduce production operator_expr -> KWnot expr
-- On KWthen reduce production operator_expr -> KWnot expr
-- On KWproof reduce production operator_expr -> KWnot expr
-- On KWor reduce production operator_expr -> KWnot expr
-- On KWnote reduce production operator_expr -> KWnot expr
-- On KWlocal reduce production operator_expr -> KWnot expr
-- On KWin reduce production operator_expr -> KWnot expr
-- On KWimmutable reduce production operator_expr -> KWnot expr
-- On KWfalse reduce production operator_expr -> KWnot expr
-- On KWensure reduce production operator_expr -> KWnot expr
-- On KWend reduce production operator_expr -> KWnot expr
-- On KWelseif reduce production operator_expr -> KWnot expr
-- On KWelse reduce production operator_expr -> KWnot expr
-- On KWdo reduce production operator_expr -> KWnot expr
-- On KWdeferred reduce production operator_expr -> KWnot expr
-- On KWclass reduce production operator_expr -> KWnot expr
-- On KWcase reduce production operator_expr -> KWnot expr
-- On KWas reduce production operator_expr -> KWnot expr
-- On KWand reduce production operator_expr -> KWnot expr
-- On KWall reduce production operator_expr -> KWnot expr
-- On GT reduce production operator_expr -> KWnot expr
-- On GE reduce production operator_expr -> KWnot expr
-- On EQ reduce production operator_expr -> KWnot expr
-- On DIVIDE reduce production operator_expr -> KWnot expr
-- On DCOLON reduce production operator_expr -> KWnot expr
-- On DBAR reduce production operator_expr -> KWnot expr
-- On DARROW reduce production operator_expr -> KWnot expr
-- On COMMA reduce production operator_expr -> KWnot expr
-- On COLON reduce production operator_expr -> KWnot expr
-- On CARET reduce production operator_expr -> KWnot expr
-- On BAR reduce production operator_expr -> KWnot expr

State 226:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
expr -> LPAREN operator . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On RPAREN shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
expr -> LPAREN operator RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN operator RPAREN

State 228:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> LPAREN expr . RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COMMA expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> LPAREN expr . RPAREN ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RPAREN PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RPAREN shift to state 229
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 229:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN expr RPAREN . ARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On ARROW shift to state 230
## Reductions:
-- On UIDENTIFIER reduce production expr -> LPAREN expr RPAREN
-- On TIMES reduce production expr -> LPAREN expr RPAREN
-- On SEMICOL reduce production expr -> LPAREN expr RPAREN
-- On RPAREN reduce production expr -> LPAREN expr RPAREN
-- On RBRACKET reduce production expr -> LPAREN expr RPAREN
-- On RBRACE reduce production expr -> LPAREN expr RPAREN
-- On PLUS reduce production expr -> LPAREN expr RPAREN
-- On NUMBER reduce production expr -> LPAREN expr RPAREN
-- On NOTIN reduce production expr -> LPAREN expr RPAREN
-- On NEWLINE reduce production expr -> LPAREN expr RPAREN
-- On NEQ reduce production expr -> LPAREN expr RPAREN
-- On MINUS reduce production expr -> LPAREN expr RPAREN
-- On LT reduce production expr -> LPAREN expr RPAREN
-- On LPAREN reduce production expr -> LPAREN expr RPAREN
-- On LIDENTIFIER reduce production expr -> LPAREN expr RPAREN
-- On LE reduce production expr -> LPAREN expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN expr RPAREN
-- On KWtrue reduce production expr -> LPAREN expr RPAREN
-- On KWthen reduce production expr -> LPAREN expr RPAREN
-- On KWproof reduce production expr -> LPAREN expr RPAREN
-- On KWor reduce production expr -> LPAREN expr RPAREN
-- On KWnote reduce production expr -> LPAREN expr RPAREN
-- On KWlocal reduce production expr -> LPAREN expr RPAREN
-- On KWin reduce production expr -> LPAREN expr RPAREN
-- On KWimmutable reduce production expr -> LPAREN expr RPAREN
-- On KWfalse reduce production expr -> LPAREN expr RPAREN
-- On KWensure reduce production expr -> LPAREN expr RPAREN
-- On KWend reduce production expr -> LPAREN expr RPAREN
-- On KWelseif reduce production expr -> LPAREN expr RPAREN
-- On KWelse reduce production expr -> LPAREN expr RPAREN
-- On KWdo reduce production expr -> LPAREN expr RPAREN
-- On KWdeferred reduce production expr -> LPAREN expr RPAREN
-- On KWclass reduce production expr -> LPAREN expr RPAREN
-- On KWcase reduce production expr -> LPAREN expr RPAREN
-- On KWas reduce production expr -> LPAREN expr RPAREN
-- On KWand reduce production expr -> LPAREN expr RPAREN
-- On KWall reduce production expr -> LPAREN expr RPAREN
-- On GT reduce production expr -> LPAREN expr RPAREN
-- On GE reduce production expr -> LPAREN expr RPAREN
-- On EQ reduce production expr -> LPAREN expr RPAREN
-- On DOT reduce production expr -> LPAREN expr RPAREN
-- On DIVIDE reduce production expr -> LPAREN expr RPAREN
-- On DCOLON reduce production expr -> LPAREN expr RPAREN
-- On DBAR reduce production expr -> LPAREN expr RPAREN
-- On DARROW reduce production expr -> LPAREN expr RPAREN
-- On COMMA reduce production expr -> LPAREN expr RPAREN
-- On COLON reduce production expr -> LPAREN expr RPAREN
-- On CARET reduce production expr -> LPAREN expr RPAREN
-- On BAR reduce production expr -> LPAREN expr RPAREN

State 230:
## Known stack suffix:
## LPAREN expr RPAREN ARROW
## LR(1) items:
expr -> LPAREN expr RPAREN ARROW . expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 231
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 231:
## Known stack suffix:
## LPAREN expr RPAREN ARROW expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LPAREN expr RPAREN ARROW expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On SEMICOL reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On RPAREN reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On RBRACKET reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On RBRACE reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On NUMBER reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On NEWLINE reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On LIDENTIFIER reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWtrue reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWthen reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWproof reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWnote reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWlocal reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWimmutable reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWfalse reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWensure reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWend reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWelseif reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWelse reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWdo reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWdeferred reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWclass reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWcase reduce production expr -> LPAREN expr RPAREN ARROW expr
-- On KWall reduce production expr -> LPAREN expr RPAREN ARROW expr

State 232:
## Known stack suffix:
## expr COLON type_nt
## LR(1) items:
expr -> expr COLON type_nt . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr COLON type_nt

State 233:
## Known stack suffix:
## expr COLON expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr COLON expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> expr COLON expr
-- On SEMICOL reduce production operator_expr -> expr COLON expr
-- On RPAREN reduce production operator_expr -> expr COLON expr
-- On RBRACKET reduce production operator_expr -> expr COLON expr
-- On RBRACE reduce production operator_expr -> expr COLON expr
-- On NUMBER reduce production operator_expr -> expr COLON expr
-- On NEWLINE reduce production operator_expr -> expr COLON expr
-- On LIDENTIFIER reduce production operator_expr -> expr COLON expr
-- On KWtrue reduce production operator_expr -> expr COLON expr
-- On KWthen reduce production operator_expr -> expr COLON expr
-- On KWproof reduce production operator_expr -> expr COLON expr
-- On KWnote reduce production operator_expr -> expr COLON expr
-- On KWlocal reduce production operator_expr -> expr COLON expr
-- On KWimmutable reduce production operator_expr -> expr COLON expr
-- On KWfalse reduce production operator_expr -> expr COLON expr
-- On KWensure reduce production operator_expr -> expr COLON expr
-- On KWend reduce production operator_expr -> expr COLON expr
-- On KWelseif reduce production operator_expr -> expr COLON expr
-- On KWelse reduce production operator_expr -> expr COLON expr
-- On KWdo reduce production operator_expr -> expr COLON expr
-- On KWdeferred reduce production operator_expr -> expr COLON expr
-- On KWclass reduce production operator_expr -> expr COLON expr
-- On KWcase reduce production operator_expr -> expr COLON expr
-- On KWall reduce production operator_expr -> expr COLON expr
-- On COMMA reduce production operator_expr -> expr COLON expr
-- On COLON reduce production operator_expr -> expr COLON expr

State 234:
## Known stack suffix:
## info_expr SEMICOL compound_list
## LR(1) items:
compound_list -> info_expr SEMICOL compound_list . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_list -> info_expr SEMICOL compound_list

State 235:
## Known stack suffix:
## info_expr optsemi
## LR(1) items:
compound_list -> info_expr optsemi . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_list -> info_expr optsemi

State 236:
## Known stack suffix:
## compound_list
## LR(1) items:
compound -> compound_list . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound -> compound_list

State 237:
## Known stack suffix:
## KWrequire compound
## LR(1) items:
require_block -> KWrequire compound . [ KWproof KWnote KWlocal KWensure KWend KWdo KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production require_block -> KWrequire compound

State 238:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi require_block_opt
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt . ensure_block KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWensure shift to state 239
-- On ensure_block shift to state 241
## Reductions:

State 239:
## Known stack suffix:
## KWensure
## LR(1) items:
ensure_block -> KWensure . compound [ KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 240
-- On atomic_expr shift to state 187
## Reductions:

State 240:
## Known stack suffix:
## KWensure compound
## LR(1) items:
ensure_block -> KWensure compound . [ KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ensure_block -> KWensure compound

State 241:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block . KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWend shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend
## LR(1) items:
expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> KWagent formal_arguments_info return_type_opt optsemi require_block_opt ensure_block KWend

State 243:
## Known stack suffix:
## require_block
## LR(1) items:
require_block_opt -> require_block . [ KWensure ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production require_block_opt -> require_block

State 244:
## Known stack suffix:
## return_type
## LR(1) items:
return_type_opt -> return_type . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_type_opt -> return_type

State 245:
## Known stack suffix:
## formal_arguments
## LR(1) items:
formal_arguments_info -> formal_arguments . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWrequire KWproof KWnote KWlocal KWimmutable KWfalse KWensure KWdo KWdeferred KWclass KWcase KWall EXCLAM COLON ARROW # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_arguments_info -> formal_arguments

State 246:
## Known stack suffix:
## KWall formal_arguments opt_nl expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> KWall formal_arguments opt_nl expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production expr -> KWall formal_arguments opt_nl expr
-- On SEMICOL reduce production expr -> KWall formal_arguments opt_nl expr
-- On RPAREN reduce production expr -> KWall formal_arguments opt_nl expr
-- On RBRACKET reduce production expr -> KWall formal_arguments opt_nl expr
-- On RBRACE reduce production expr -> KWall formal_arguments opt_nl expr
-- On NUMBER reduce production expr -> KWall formal_arguments opt_nl expr
-- On NEWLINE reduce production expr -> KWall formal_arguments opt_nl expr
-- On LIDENTIFIER reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWtrue reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWthen reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWproof reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWnote reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWlocal reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWimmutable reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWfalse reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWensure reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWend reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWelseif reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWelse reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWdo reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWdeferred reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWclass reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWcase reduce production expr -> KWall formal_arguments opt_nl expr
-- On KWall reduce production expr -> KWall formal_arguments opt_nl expr

State 247:
## Known stack suffix:
## expr
## LR(1) items:
exp_then_part -> expr . KWthen expr [ KWend KWelseif KWelse ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWthen shift to state 248
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 248:
## Known stack suffix:
## expr KWthen
## LR(1) items:
exp_then_part -> expr KWthen . expr [ KWend KWelseif KWelse ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 249
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 249:
## Known stack suffix:
## expr KWthen expr
## LR(1) items:
exp_then_part -> expr KWthen expr . [ KWend KWelseif KWelse ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWelseif KWelse KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On KWend reduce production exp_then_part -> expr KWthen expr
-- On KWelseif reduce production exp_then_part -> expr KWthen expr
-- On KWelse reduce production exp_then_part -> expr KWthen expr

State 250:
## Known stack suffix:
## KWif exp_then_part_list
## LR(1) items:
exp_conditional -> KWif exp_then_part_list . exp_else_part KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWelse shift to state 251
-- On exp_else_part shift to state 253
## Reductions:
-- On KWend reduce production exp_else_part ->

State 251:
## Known stack suffix:
## KWelse
## LR(1) items:
exp_else_part -> KWelse . expr [ KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 252
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 252:
## Known stack suffix:
## KWelse expr
## LR(1) items:
exp_else_part -> KWelse expr . [ KWend ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On KWend reduce production exp_else_part -> KWelse expr

State 253:
## Known stack suffix:
## KWif exp_then_part_list exp_else_part
## LR(1) items:
exp_conditional -> KWif exp_then_part_list exp_else_part . KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWend shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## KWif exp_then_part_list exp_else_part KWend
## LR(1) items:
exp_conditional -> KWif exp_then_part_list exp_else_part KWend . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp_conditional -> KWif exp_then_part_list exp_else_part KWend

State 255:
## Known stack suffix:
## exp_then_part
## LR(1) items:
exp_then_part_list -> exp_then_part . [ KWend KWelse ]
exp_then_part_list -> exp_then_part . KWelseif exp_then_part_list [ KWend KWelse ]
## Transitions:
-- On KWelseif shift to state 256
## Reductions:
-- On KWend reduce production exp_then_part_list -> exp_then_part
-- On KWelse reduce production exp_then_part_list -> exp_then_part

State 256:
## Known stack suffix:
## exp_then_part KWelseif
## LR(1) items:
exp_then_part_list -> exp_then_part KWelseif . exp_then_part_list [ KWend KWelse ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 247
-- On exp_then_part_list shift to state 257
-- On exp_then_part shift to state 255
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 257:
## Known stack suffix:
## exp_then_part KWelseif exp_then_part_list
## LR(1) items:
exp_then_part_list -> exp_then_part KWelseif exp_then_part_list . [ KWend KWelse ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp_then_part_list -> exp_then_part KWelseif exp_then_part_list

State 258:
## Known stack suffix:
## KWinspect expr
## LR(1) items:
exp_inspect -> KWinspect expr . exp_case_list KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWcase shift to state 259
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
-- On exp_case_list shift to state 263
-- On exp_case shift to state 265
## Reductions:

State 259:
## Known stack suffix:
## KWcase
## LR(1) items:
exp_case -> KWcase . expr KWthen expr [ KWend KWcase ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 260
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 260:
## Known stack suffix:
## KWcase expr
## LR(1) items:
exp_case -> KWcase expr . KWthen expr [ KWend KWcase ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWthen KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWthen shift to state 261
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 261:
## Known stack suffix:
## KWcase expr KWthen
## LR(1) items:
exp_case -> KWcase expr KWthen . expr [ KWend KWcase ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 262
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 262:
## Known stack suffix:
## KWcase expr KWthen expr
## LR(1) items:
exp_case -> KWcase expr KWthen expr . [ KWend KWcase ]
expr -> expr . COMMA expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . PLUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWend KWcase KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On KWend reduce production exp_case -> KWcase expr KWthen expr
-- On KWcase reduce production exp_case -> KWcase expr KWthen expr

State 263:
## Known stack suffix:
## KWinspect expr exp_case_list
## LR(1) items:
exp_inspect -> KWinspect expr exp_case_list . KWend [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On KWend shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## KWinspect expr exp_case_list KWend
## LR(1) items:
exp_inspect -> KWinspect expr exp_case_list KWend . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp_inspect -> KWinspect expr exp_case_list KWend

State 265:
## Known stack suffix:
## exp_case
## LR(1) items:
exp_case_list -> exp_case . [ KWend ]
exp_case_list -> exp_case . exp_case_list [ KWend ]
## Transitions:
-- On KWcase shift to state 259
-- On exp_case_list shift to state 266
-- On exp_case shift to state 265
## Reductions:
-- On KWend reduce production exp_case_list -> exp_case

State 266:
## Known stack suffix:
## exp_case exp_case_list
## LR(1) items:
exp_case_list -> exp_case exp_case_list . [ KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp_case_list -> exp_case exp_case_list

State 267:
## Known stack suffix:
## KWold expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> KWold expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> KWold expr
-- On TIMES reduce production operator_expr -> KWold expr
-- On SEMICOL reduce production operator_expr -> KWold expr
-- On RPAREN reduce production operator_expr -> KWold expr
-- On RBRACKET reduce production operator_expr -> KWold expr
-- On RBRACE reduce production operator_expr -> KWold expr
-- On PLUS reduce production operator_expr -> KWold expr
-- On NUMBER reduce production operator_expr -> KWold expr
-- On NOTIN reduce production operator_expr -> KWold expr
-- On NEWLINE reduce production operator_expr -> KWold expr
-- On NEQ reduce production operator_expr -> KWold expr
-- On MINUS reduce production operator_expr -> KWold expr
-- On LT reduce production operator_expr -> KWold expr
-- On LIDENTIFIER reduce production operator_expr -> KWold expr
-- On LE reduce production operator_expr -> KWold expr
-- On KWtrue reduce production operator_expr -> KWold expr
-- On KWthen reduce production operator_expr -> KWold expr
-- On KWproof reduce production operator_expr -> KWold expr
-- On KWor reduce production operator_expr -> KWold expr
-- On KWnote reduce production operator_expr -> KWold expr
-- On KWlocal reduce production operator_expr -> KWold expr
-- On KWin reduce production operator_expr -> KWold expr
-- On KWimmutable reduce production operator_expr -> KWold expr
-- On KWfalse reduce production operator_expr -> KWold expr
-- On KWensure reduce production operator_expr -> KWold expr
-- On KWend reduce production operator_expr -> KWold expr
-- On KWelseif reduce production operator_expr -> KWold expr
-- On KWelse reduce production operator_expr -> KWold expr
-- On KWdo reduce production operator_expr -> KWold expr
-- On KWdeferred reduce production operator_expr -> KWold expr
-- On KWclass reduce production operator_expr -> KWold expr
-- On KWcase reduce production operator_expr -> KWold expr
-- On KWas reduce production operator_expr -> KWold expr
-- On KWand reduce production operator_expr -> KWold expr
-- On KWall reduce production operator_expr -> KWold expr
-- On GT reduce production operator_expr -> KWold expr
-- On GE reduce production operator_expr -> KWold expr
-- On EQ reduce production operator_expr -> KWold expr
-- On DIVIDE reduce production operator_expr -> KWold expr
-- On DCOLON reduce production operator_expr -> KWold expr
-- On DBAR reduce production operator_expr -> KWold expr
-- On DARROW reduce production operator_expr -> KWold expr
-- On COMMA reduce production operator_expr -> KWold expr
-- On COLON reduce production operator_expr -> KWold expr
-- On CARET reduce production operator_expr -> KWold expr
-- On BAR reduce production operator_expr -> KWold expr

State 268:
## Known stack suffix:
## KWsome formal_arguments opt_nl expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> KWsome formal_arguments opt_nl expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production expr -> KWsome formal_arguments opt_nl expr
-- On SEMICOL reduce production expr -> KWsome formal_arguments opt_nl expr
-- On RPAREN reduce production expr -> KWsome formal_arguments opt_nl expr
-- On RBRACKET reduce production expr -> KWsome formal_arguments opt_nl expr
-- On RBRACE reduce production expr -> KWsome formal_arguments opt_nl expr
-- On NUMBER reduce production expr -> KWsome formal_arguments opt_nl expr
-- On NEWLINE reduce production expr -> KWsome formal_arguments opt_nl expr
-- On LIDENTIFIER reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWtrue reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWthen reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWproof reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWnote reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWlocal reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWimmutable reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWfalse reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWensure reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWend reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWelseif reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWelse reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWdo reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWdeferred reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWclass reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWcase reduce production expr -> KWsome formal_arguments opt_nl expr
-- On KWall reduce production expr -> KWsome formal_arguments opt_nl expr

State 269:
## Known stack suffix:
## LBRACE expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> LBRACE expr . RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES RBRACE PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On RBRACE shift to state 270
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:

State 270:
## Known stack suffix:
## LBRACE expr RBRACE
## LR(1) items:
expr -> LBRACE expr RBRACE . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACE expr RBRACE

State 271:
## Known stack suffix:
## LIDENTIFIER ARROW expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> LIDENTIFIER ARROW expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On UIDENTIFIER reduce production expr -> LIDENTIFIER ARROW expr
-- On SEMICOL reduce production expr -> LIDENTIFIER ARROW expr
-- On RPAREN reduce production expr -> LIDENTIFIER ARROW expr
-- On RBRACKET reduce production expr -> LIDENTIFIER ARROW expr
-- On RBRACE reduce production expr -> LIDENTIFIER ARROW expr
-- On NUMBER reduce production expr -> LIDENTIFIER ARROW expr
-- On NEWLINE reduce production expr -> LIDENTIFIER ARROW expr
-- On LIDENTIFIER reduce production expr -> LIDENTIFIER ARROW expr
-- On KWtrue reduce production expr -> LIDENTIFIER ARROW expr
-- On KWthen reduce production expr -> LIDENTIFIER ARROW expr
-- On KWproof reduce production expr -> LIDENTIFIER ARROW expr
-- On KWnote reduce production expr -> LIDENTIFIER ARROW expr
-- On KWlocal reduce production expr -> LIDENTIFIER ARROW expr
-- On KWimmutable reduce production expr -> LIDENTIFIER ARROW expr
-- On KWfalse reduce production expr -> LIDENTIFIER ARROW expr
-- On KWensure reduce production expr -> LIDENTIFIER ARROW expr
-- On KWend reduce production expr -> LIDENTIFIER ARROW expr
-- On KWelseif reduce production expr -> LIDENTIFIER ARROW expr
-- On KWelse reduce production expr -> LIDENTIFIER ARROW expr
-- On KWdo reduce production expr -> LIDENTIFIER ARROW expr
-- On KWdeferred reduce production expr -> LIDENTIFIER ARROW expr
-- On KWclass reduce production expr -> LIDENTIFIER ARROW expr
-- On KWcase reduce production expr -> LIDENTIFIER ARROW expr
-- On KWall reduce production expr -> LIDENTIFIER ARROW expr

State 272:
## Known stack suffix:
## TIMES expr
## LR(1) items:
expr -> expr . COMMA expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LPAREN expr RPAREN [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . LBRACKET expr RBRACKET [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LIDENTIFIER [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . DOT LBRACE expr RBRACE [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
expr -> expr . COLON type_nt [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . PLUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . MINUS expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . TIMES expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> TIMES expr . [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DIVIDE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . CARET expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWin expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NOTIN expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . EQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . NEQ expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . LE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GT expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . GE expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWas expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWand expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . KWor expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DCOLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . COLON expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . BAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DBAR expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
operator_expr -> expr . DARROW expr [ UIDENTIFIER TIMES SEMICOL RPAREN RBRACKET RBRACE PLUS NUMBER NOTIN NEWLINE NEQ MINUS LT LPAREN LIDENTIFIER LE LBRACKET KWtrue KWthen KWproof KWor KWnote KWlocal KWin KWimmutable KWfalse KWensure KWend KWelseif KWelse KWdo KWdeferred KWclass KWcase KWas KWand KWall GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR # ]
## Transitions:
-- On LPAREN shift to state 151
-- On LBRACKET shift to state 156
-- On DOT shift to state 163
-- On DCOLON shift to state 172
-- On CARET shift to state 174
## Reductions:
-- On UIDENTIFIER reduce production operator_expr -> TIMES expr
-- On TIMES reduce production operator_expr -> TIMES expr
-- On SEMICOL reduce production operator_expr -> TIMES expr
-- On RPAREN reduce production operator_expr -> TIMES expr
-- On RBRACKET reduce production operator_expr -> TIMES expr
-- On RBRACE reduce production operator_expr -> TIMES expr
-- On PLUS reduce production operator_expr -> TIMES expr
-- On NUMBER reduce production operator_expr -> TIMES expr
-- On NOTIN reduce production operator_expr -> TIMES expr
-- On NEWLINE reduce production operator_expr -> TIMES expr
-- On NEQ reduce production operator_expr -> TIMES expr
-- On MINUS reduce production operator_expr -> TIMES expr
-- On LT reduce production operator_expr -> TIMES expr
-- On LIDENTIFIER reduce production operator_expr -> TIMES expr
-- On LE reduce production operator_expr -> TIMES expr
-- On KWtrue reduce production operator_expr -> TIMES expr
-- On KWthen reduce production operator_expr -> TIMES expr
-- On KWproof reduce production operator_expr -> TIMES expr
-- On KWor reduce production operator_expr -> TIMES expr
-- On KWnote reduce production operator_expr -> TIMES expr
-- On KWlocal reduce production operator_expr -> TIMES expr
-- On KWin reduce production operator_expr -> TIMES expr
-- On KWimmutable reduce production operator_expr -> TIMES expr
-- On KWfalse reduce production operator_expr -> TIMES expr
-- On KWensure reduce production operator_expr -> TIMES expr
-- On KWend reduce production operator_expr -> TIMES expr
-- On KWelseif reduce production operator_expr -> TIMES expr
-- On KWelse reduce production operator_expr -> TIMES expr
-- On KWdo reduce production operator_expr -> TIMES expr
-- On KWdeferred reduce production operator_expr -> TIMES expr
-- On KWclass reduce production operator_expr -> TIMES expr
-- On KWcase reduce production operator_expr -> TIMES expr
-- On KWas reduce production operator_expr -> TIMES expr
-- On KWand reduce production operator_expr -> TIMES expr
-- On KWall reduce production operator_expr -> TIMES expr
-- On GT reduce production operator_expr -> TIMES expr
-- On GE reduce production operator_expr -> TIMES expr
-- On EQ reduce production operator_expr -> TIMES expr
-- On DIVIDE reduce production operator_expr -> TIMES expr
-- On DBAR reduce production operator_expr -> TIMES expr
-- On DARROW reduce production operator_expr -> TIMES expr
-- On COMMA reduce production operator_expr -> TIMES expr
-- On COLON reduce production operator_expr -> TIMES expr
-- On BAR reduce production operator_expr -> TIMES expr

State 273:
## Known stack suffix:
## info_expr
## LR(1) items:
ass_seq -> info_expr . [ SEMICOL NEWLINE KWproof KWnote KWensure KWend KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ass_seq -> info_expr

State 274:
## Known stack suffix:
## KWrequire ass_seq
## LR(1) items:
ass_req -> KWrequire ass_seq . [ KWproof KWnote KWensure KWdeferred ]
ass_req -> KWrequire ass_seq . separator [ KWproof KWnote KWensure KWdeferred ]
ass_seq -> ass_seq . separator info_expr [ SEMICOL NEWLINE KWproof KWnote KWensure KWdeferred ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 275
## Reductions:
-- On KWproof reduce production ass_req -> KWrequire ass_seq
-- On KWnote reduce production ass_req -> KWrequire ass_seq
-- On KWensure reduce production ass_req -> KWrequire ass_seq
-- On KWdeferred reduce production ass_req -> KWrequire ass_seq

State 275:
## Known stack suffix:
## KWrequire ass_seq separator
## LR(1) items:
ass_req -> KWrequire ass_seq separator . [ KWproof KWnote KWensure KWdeferred ]
ass_seq -> ass_seq separator . info_expr [ SEMICOL NEWLINE KWproof KWnote KWensure KWdeferred ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 276
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:
-- On KWproof reduce production ass_req -> KWrequire ass_seq separator
-- On KWnote reduce production ass_req -> KWrequire ass_seq separator
-- On KWensure reduce production ass_req -> KWrequire ass_seq separator
-- On KWdeferred reduce production ass_req -> KWrequire ass_seq separator

State 276:
## Known stack suffix:
## ass_seq separator info_expr
## LR(1) items:
ass_seq -> ass_seq separator info_expr . [ SEMICOL NEWLINE KWproof KWnote KWensure KWend KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ass_seq -> ass_seq separator info_expr

State 277:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt . ass_imp ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWproof shift to state 278
-- On KWnote shift to state 283
-- On KWdeferred shift to state 286
-- On implementation_note shift to state 287
-- On ass_imp shift to state 312
-- On ass_check shift to state 294
## Reductions:
-- On KWensure reduce production ass_imp ->

State 278:
## Known stack suffix:
## KWproof
## LR(1) items:
ass_check -> KWproof . proof_seq separator [ KWensure ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWrequire shift to state 108
-- On KWproof shift to state 278
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 279
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On proof_seq shift to state 296
-- On proof_expr_struct shift to state 298
-- On proof_expr shift to state 311
-- On proof_all_expr_inner shift to state 300
-- On operator_expr shift to state 145
-- On info_expr shift to state 301
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_req shift to state 302
-- On ass_check shift to state 308
## Reductions:

State 279:
## Known stack suffix:
## KWall
## LR(1) items:
expr -> KWall . formal_arguments opt_nl expr [ TIMES SEMICOL PLUS NOTIN NEWLINE NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
proof_all_expr_inner -> KWall . formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## KWall formal_arguments
## LR(1) items:
expr -> KWall formal_arguments . opt_nl expr [ TIMES SEMICOL PLUS NOTIN NEWLINE NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
proof_all_expr_inner -> KWall formal_arguments . opt_nl ass_req_opt ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On SEMICOL shift to state 105
-- On NEWLINE shift to state 106
-- On opt_nl shift to state 281
## Reductions:
-- On USCORE reduce production opt_nl ->
-- On TIMES reduce production opt_nl ->
-- On PLUS reduce production opt_nl ->
-- On NUMBER reduce production opt_nl ->
-- On MINUS reduce production opt_nl ->
-- On LPAREN reduce production opt_nl ->
-- On LIDENTIFIER reduce production opt_nl ->
-- On LBRACKET reduce production opt_nl ->
-- On LBRACE reduce production opt_nl ->
-- On KWtrue reduce production opt_nl ->
-- On KWsome reduce production opt_nl ->
-- On KWrequire reduce production opt_nl ->
-- On KWproof reduce production opt_nl ->
-- On KWold reduce production opt_nl ->
-- On KWnote reduce production opt_nl ->
-- On KWnot reduce production opt_nl ->
-- On KWinspect reduce production opt_nl ->
-- On KWif reduce production opt_nl ->
-- On KWfalse reduce production opt_nl ->
-- On KWensure reduce production opt_nl ->
-- On KWdeferred reduce production opt_nl ->
-- On KWall reduce production opt_nl ->
-- On KWagent reduce production opt_nl ->
-- On KWResult reduce production opt_nl ->

State 281:
## Known stack suffix:
## KWall formal_arguments opt_nl
## LR(1) items:
expr -> KWall formal_arguments opt_nl . expr [ TIMES SEMICOL PLUS NOTIN NEWLINE NEQ MINUS LT LPAREN LE LBRACKET KWor KWin KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
proof_all_expr_inner -> KWall formal_arguments opt_nl . ass_req_opt ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWrequire shift to state 108
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 246
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_req_opt shift to state 282
-- On ass_req shift to state 295
## Reductions:
-- On KWproof reduce production ass_req_opt ->
-- On KWnote reduce production ass_req_opt ->
-- On KWensure reduce production ass_req_opt ->
-- On KWdeferred reduce production ass_req_opt ->

State 282:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt . ass_imp ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWproof shift to state 278
-- On KWnote shift to state 283
-- On KWdeferred shift to state 286
-- On implementation_note shift to state 287
-- On ass_imp shift to state 288
-- On ass_check shift to state 294
## Reductions:
-- On KWensure reduce production ass_imp ->

State 283:
## Known stack suffix:
## KWnote
## LR(1) items:
implementation_note -> KWnote . LIDENTIFIER optsemi [ KWensure KWend ]
## Transitions:
-- On LIDENTIFIER shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## KWnote LIDENTIFIER
## LR(1) items:
implementation_note -> KWnote LIDENTIFIER . optsemi [ KWensure KWend ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 285
## Reductions:
-- On KWensure reduce production optsemi ->
-- On KWend reduce production optsemi ->

State 285:
## Known stack suffix:
## KWnote LIDENTIFIER optsemi
## LR(1) items:
implementation_note -> KWnote LIDENTIFIER optsemi . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production implementation_note -> KWnote LIDENTIFIER optsemi

State 286:
## Known stack suffix:
## KWdeferred
## LR(1) items:
ass_imp -> KWdeferred . [ KWensure ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ass_imp -> KWdeferred

State 287:
## Known stack suffix:
## implementation_note
## LR(1) items:
ass_imp -> implementation_note . [ KWensure ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ass_imp -> implementation_note

State 288:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt ass_imp
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 292
## Reductions:

State 289:
## Known stack suffix:
## KWensure
## LR(1) items:
ass_ens -> KWensure . ass_seq [ KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 273
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_seq shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## KWensure ass_seq
## LR(1) items:
ass_ens -> KWensure ass_seq . [ KWend ]
ass_seq -> ass_seq . separator info_expr [ SEMICOL NEWLINE KWend ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 291
## Reductions:
-- On KWend reduce production ass_ens -> KWensure ass_seq

State 291:
## Known stack suffix:
## ass_seq separator
## LR(1) items:
ass_seq -> ass_seq separator . info_expr [ SEMICOL NEWLINE KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 276
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 292:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend
## LR(1) items:
proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_all_expr_inner -> KWall formal_arguments opt_nl ass_req_opt ass_imp ass_ens KWend

State 294:
## Known stack suffix:
## ass_check
## LR(1) items:
ass_imp -> ass_check . [ KWensure ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ass_imp -> ass_check

State 295:
## Known stack suffix:
## ass_req
## LR(1) items:
ass_req_opt -> ass_req . [ KWproof KWnote KWensure KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ass_req_opt -> ass_req

State 296:
## Known stack suffix:
## KWproof proof_seq
## LR(1) items:
ass_check -> KWproof proof_seq . separator [ KWensure ]
proof_seq -> proof_seq . separator proof_expr [ SEMICOL NEWLINE ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## KWproof proof_seq separator
## LR(1) items:
ass_check -> KWproof proof_seq separator . [ KWensure ]
proof_seq -> proof_seq separator . proof_expr [ SEMICOL NEWLINE ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWrequire shift to state 108
-- On KWproof shift to state 278
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 279
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On proof_expr_struct shift to state 298
-- On proof_expr shift to state 299
-- On proof_all_expr_inner shift to state 300
-- On operator_expr shift to state 145
-- On info_expr shift to state 301
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
-- On ass_req shift to state 302
-- On ass_check shift to state 308
## Reductions:
-- On KWensure reduce production ass_check -> KWproof proof_seq separator

State 298:
## Known stack suffix:
## proof_expr_struct
## LR(1) items:
proof_expr -> proof_expr_struct . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_expr -> proof_expr_struct

State 299:
## Known stack suffix:
## proof_seq separator proof_expr
## LR(1) items:
proof_seq -> proof_seq separator proof_expr . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_seq -> proof_seq separator proof_expr

State 300:
## Known stack suffix:
## proof_all_expr_inner
## LR(1) items:
proof_expr -> proof_all_expr_inner . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_expr -> proof_all_expr_inner

State 301:
## Known stack suffix:
## info_expr
## LR(1) items:
proof_expr -> info_expr . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_expr -> info_expr

State 302:
## Known stack suffix:
## ass_req
## LR(1) items:
proof_expr_struct -> ass_req . ass_check ass_ens KWend [ SEMICOL NEWLINE ]
proof_expr_struct -> ass_req . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWproof shift to state 278
-- On KWensure shift to state 289
-- On ass_ens shift to state 303
-- On ass_check shift to state 305
## Reductions:

State 303:
## Known stack suffix:
## ass_req ass_ens
## LR(1) items:
proof_expr_struct -> ass_req ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## ass_req ass_ens KWend
## LR(1) items:
proof_expr_struct -> ass_req ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_expr_struct -> ass_req ass_ens KWend

State 305:
## Known stack suffix:
## ass_req ass_check
## LR(1) items:
proof_expr_struct -> ass_req ass_check . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## ass_req ass_check ass_ens
## LR(1) items:
proof_expr_struct -> ass_req ass_check ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## ass_req ass_check ass_ens KWend
## LR(1) items:
proof_expr_struct -> ass_req ass_check ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_expr_struct -> ass_req ass_check ass_ens KWend

State 308:
## Known stack suffix:
## ass_check
## LR(1) items:
proof_expr_struct -> ass_check . ass_ens KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## ass_check ass_ens
## LR(1) items:
proof_expr_struct -> ass_check ass_ens . KWend [ SEMICOL NEWLINE ]
## Transitions:
-- On KWend shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## ass_check ass_ens KWend
## LR(1) items:
proof_expr_struct -> ass_check ass_ens KWend . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_expr_struct -> ass_check ass_ens KWend

State 311:
## Known stack suffix:
## proof_expr
## LR(1) items:
proof_seq -> proof_expr . [ SEMICOL NEWLINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_seq -> proof_expr

State 312:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt ass_imp
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp . ass_ens KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWensure shift to state 289
-- On ass_ens shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend
## LR(1) items:
proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_all_expr -> KWall formal_arguments_opt opt_nl ass_req_opt ass_imp ass_ens KWend

State 315:
## Known stack suffix:
## formal_arguments
## LR(1) items:
formal_arguments_opt -> formal_arguments . [ SEMICOL NEWLINE KWrequire KWproof KWnote KWinherit KWensure KWend KWdeferred ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal_arguments_opt -> formal_arguments

State 316:
## Known stack suffix:
## proof_all_expr
## LR(1) items:
ass_feat -> proof_all_expr . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ass_feat -> proof_all_expr

State 317:
## Known stack suffix:
## nameopconst_info
## LR(1) items:
named_feature -> nameopconst_info . formal_arguments_info return_type_opt optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info . return_type optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info . formal_arguments_info return_type_opt ARROW info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info . return_type EQ info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LPAREN shift to state 92
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type shift to state 318
-- On formal_arguments_info shift to state 362
-- On formal_arguments shift to state 245
## Reductions:

State 318:
## Known stack suffix:
## nameopconst_info return_type
## LR(1) items:
named_feature -> nameopconst_info return_type . optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info return_type . EQ info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On EQ shift to state 319
-- On optsemi shift to state 321
## Reductions:
-- On UIDENTIFIER reduce production optsemi ->
-- On NUMBER reduce production optsemi ->
-- On LPAREN reduce production optsemi ->
-- On LIDENTIFIER reduce production optsemi ->
-- On KWtrue reduce production optsemi ->
-- On KWrequire reduce production optsemi ->
-- On KWproof reduce production optsemi ->
-- On KWnote reduce production optsemi ->
-- On KWlocal reduce production optsemi ->
-- On KWimmutable reduce production optsemi ->
-- On KWfalse reduce production optsemi ->
-- On KWensure reduce production optsemi ->
-- On KWdo reduce production optsemi ->
-- On KWdeferred reduce production optsemi ->
-- On KWclass reduce production optsemi ->
-- On KWcase reduce production optsemi ->
-- On KWall reduce production optsemi ->

State 319:
## Known stack suffix:
## nameopconst_info return_type EQ
## LR(1) items:
named_feature -> nameopconst_info return_type EQ . info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 320
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 320:
## Known stack suffix:
## nameopconst_info return_type EQ info_expr
## LR(1) items:
named_feature -> nameopconst_info return_type EQ info_expr . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_feature -> nameopconst_info return_type EQ info_expr

State 321:
## Known stack suffix:
## nameopconst_info return_type optsemi
## LR(1) items:
named_feature -> nameopconst_info return_type optsemi . feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWrequire shift to state 143
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWdeferred shift to state 328
-- On require_block shift to state 329
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 346
-- On feature_body_opt shift to state 360
-- On feature_body shift to state 361
-- On ensure_block shift to state 351
## Reductions:
-- On UIDENTIFIER reduce production feature_body_opt ->
-- On SEMICOL reduce production feature_body_opt ->
-- On NUMBER reduce production feature_body_opt ->
-- On LPAREN reduce production feature_body_opt ->
-- On LIDENTIFIER reduce production feature_body_opt ->
-- On KWtrue reduce production feature_body_opt ->
-- On KWproof reduce production local_block ->
-- On KWimmutable reduce production feature_body_opt ->
-- On KWfalse reduce production feature_body_opt ->
-- On KWdo reduce production local_block ->
-- On KWclass reduce production feature_body_opt ->
-- On KWcase reduce production feature_body_opt ->
-- On KWall reduce production feature_body_opt ->

State 322:
## Known stack suffix:
## KWlocal
## LR(1) items:
local_block -> KWlocal . local_list [ KWproof KWdo ]
## Transitions:
-- On LIDENTIFIER shift to state 323
-- On local_list shift to state 353
-- On local_declaration shift to state 354
-- On identifier_list shift to state 96
-- On entity_list shift to state 357
-- On entity_group shift to state 101
## Reductions:

State 323:
## Known stack suffix:
## LIDENTIFIER
## LR(1) items:
identifier_list -> LIDENTIFIER . [ SEMICOL KWproof KWdo COMMA COLON ASSIGN ]
identifier_list -> LIDENTIFIER . COMMA identifier_list [ SEMICOL KWproof KWdo COMMA COLON ASSIGN ]
local_declaration -> LIDENTIFIER . LPAREN entity_list RPAREN return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On LPAREN shift to state 324
-- On COMMA shift to state 94
## Reductions:
-- On SEMICOL reduce production identifier_list -> LIDENTIFIER
-- On KWproof reduce production identifier_list -> LIDENTIFIER
-- On KWdo reduce production identifier_list -> LIDENTIFIER
-- On COLON reduce production identifier_list -> LIDENTIFIER
-- On ASSIGN reduce production identifier_list -> LIDENTIFIER

State 324:
## Known stack suffix:
## LIDENTIFIER LPAREN
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN . entity_list RPAREN return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On LIDENTIFIER shift to state 93
-- On identifier_list shift to state 96
-- On entity_list shift to state 325
-- On entity_group shift to state 101
## Reductions:

State 325:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list . RPAREN return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On RPAREN shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list RPAREN
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN . return_type_opt feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type_opt shift to state 327
-- On return_type shift to state 244
## Reductions:
-- On KWrequire reduce production return_type_opt ->
-- On KWproof reduce production return_type_opt ->
-- On KWnote reduce production return_type_opt ->
-- On KWlocal reduce production return_type_opt ->
-- On KWensure reduce production return_type_opt ->
-- On KWdo reduce production return_type_opt ->
-- On KWdeferred reduce production return_type_opt ->

State 327:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list RPAREN return_type_opt
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN return_type_opt . feature_body [ SEMICOL KWproof KWdo ]
## Transitions:
-- On KWrequire shift to state 143
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWdeferred shift to state 328
-- On require_block shift to state 329
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 346
-- On feature_body shift to state 350
-- On ensure_block shift to state 351
## Reductions:
-- On KWproof reduce production local_block ->
-- On KWdo reduce production local_block ->

State 328:
## Known stack suffix:
## KWdeferred
## LR(1) items:
feature_implementation -> KWdeferred . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_implementation -> KWdeferred

State 329:
## Known stack suffix:
## require_block
## LR(1) items:
feature_body -> require_block . feature_implementation ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block . feature_implementation KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block . ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWend shift to state 330
-- On KWdeferred shift to state 328
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 340
-- On ensure_block shift to state 344
## Reductions:
-- On KWproof reduce production local_block ->
-- On KWdo reduce production local_block ->

State 330:
## Known stack suffix:
## require_block KWend
## LR(1) items:
feature_body -> require_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body -> require_block KWend

State 331:
## Known stack suffix:
## local_block
## LR(1) items:
implementation_block -> local_block . do_block [ KWensure KWend ]
implementation_block -> local_block . proof_block [ KWensure KWend ]
## Transitions:
-- On KWproof shift to state 332
-- On KWdo shift to state 334
-- On proof_block shift to state 336
-- On do_block shift to state 337
## Reductions:

State 332:
## Known stack suffix:
## KWproof
## LR(1) items:
proof_block -> KWproof . compound [ KWensure KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 333
-- On atomic_expr shift to state 187
## Reductions:

State 333:
## Known stack suffix:
## KWproof compound
## LR(1) items:
proof_block -> KWproof compound . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production proof_block -> KWproof compound

State 334:
## Known stack suffix:
## KWdo
## LR(1) items:
do_block -> KWdo . compound [ KWensure KWend ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 146
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On compound_list shift to state 236
-- On compound shift to state 335
-- On atomic_expr shift to state 187
## Reductions:

State 335:
## Known stack suffix:
## KWdo compound
## LR(1) items:
do_block -> KWdo compound . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_block -> KWdo compound

State 336:
## Known stack suffix:
## local_block proof_block
## LR(1) items:
implementation_block -> local_block proof_block . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production implementation_block -> local_block proof_block

State 337:
## Known stack suffix:
## local_block do_block
## LR(1) items:
implementation_block -> local_block do_block . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production implementation_block -> local_block do_block

State 338:
## Known stack suffix:
## implementation_note
## LR(1) items:
feature_implementation -> implementation_note . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_implementation -> implementation_note

State 339:
## Known stack suffix:
## implementation_block
## LR(1) items:
feature_implementation -> implementation_block . [ KWensure KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_implementation -> implementation_block

State 340:
## Known stack suffix:
## require_block feature_implementation
## LR(1) items:
feature_body -> require_block feature_implementation . ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> require_block feature_implementation . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWensure shift to state 239
-- On KWend shift to state 341
-- On ensure_block shift to state 342
## Reductions:

State 341:
## Known stack suffix:
## require_block feature_implementation KWend
## LR(1) items:
feature_body -> require_block feature_implementation KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body -> require_block feature_implementation KWend

State 342:
## Known stack suffix:
## require_block feature_implementation ensure_block
## LR(1) items:
feature_body -> require_block feature_implementation ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## require_block feature_implementation ensure_block KWend
## LR(1) items:
feature_body -> require_block feature_implementation ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body -> require_block feature_implementation ensure_block KWend

State 344:
## Known stack suffix:
## require_block ensure_block
## LR(1) items:
feature_body -> require_block ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## require_block ensure_block KWend
## LR(1) items:
feature_body -> require_block ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body -> require_block ensure_block KWend

State 346:
## Known stack suffix:
## feature_implementation
## LR(1) items:
feature_body -> feature_implementation . ensure_block KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
feature_body -> feature_implementation . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWensure shift to state 239
-- On KWend shift to state 347
-- On ensure_block shift to state 348
## Reductions:

State 347:
## Known stack suffix:
## feature_implementation KWend
## LR(1) items:
feature_body -> feature_implementation KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body -> feature_implementation KWend

State 348:
## Known stack suffix:
## feature_implementation ensure_block
## LR(1) items:
feature_body -> feature_implementation ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## feature_implementation ensure_block KWend
## LR(1) items:
feature_body -> feature_implementation ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body -> feature_implementation ensure_block KWend

State 350:
## Known stack suffix:
## LIDENTIFIER LPAREN entity_list RPAREN return_type_opt feature_body
## LR(1) items:
local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN return_type_opt feature_body . [ SEMICOL KWproof KWdo ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_declaration -> LIDENTIFIER LPAREN entity_list RPAREN return_type_opt feature_body

State 351:
## Known stack suffix:
## ensure_block
## LR(1) items:
feature_body -> ensure_block . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## ensure_block KWend
## LR(1) items:
feature_body -> ensure_block KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWproof KWimmutable KWfalse KWdo KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body -> ensure_block KWend

State 353:
## Known stack suffix:
## KWlocal local_list
## LR(1) items:
local_block -> KWlocal local_list . [ KWproof KWdo ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_block -> KWlocal local_list

State 354:
## Known stack suffix:
## local_declaration
## LR(1) items:
local_list -> local_declaration . [ KWproof KWdo ]
local_list -> local_declaration . SEMICOL local_list [ KWproof KWdo ]
## Transitions:
-- On SEMICOL shift to state 355
## Reductions:
-- On KWproof reduce production local_list -> local_declaration
-- On KWdo reduce production local_list -> local_declaration

State 355:
## Known stack suffix:
## local_declaration SEMICOL
## LR(1) items:
local_list -> local_declaration SEMICOL . local_list [ KWproof KWdo ]
## Transitions:
-- On LIDENTIFIER shift to state 323
-- On local_list shift to state 356
-- On local_declaration shift to state 354
-- On identifier_list shift to state 96
-- On entity_list shift to state 357
-- On entity_group shift to state 101
## Reductions:

State 356:
## Known stack suffix:
## local_declaration SEMICOL local_list
## LR(1) items:
local_list -> local_declaration SEMICOL local_list . [ KWproof KWdo ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_list -> local_declaration SEMICOL local_list

State 357:
## Known stack suffix:
## entity_list
## LR(1) items:
local_declaration -> entity_list . [ SEMICOL KWproof KWdo ]
local_declaration -> entity_list . ASSIGN expr [ SEMICOL KWproof KWdo ]
## Transitions:
-- On ASSIGN shift to state 358
## Reductions:
-- On SEMICOL reduce production local_declaration -> entity_list
-- On KWproof reduce production local_declaration -> entity_list
-- On KWdo reduce production local_declaration -> entity_list

State 358:
## Known stack suffix:
## entity_list ASSIGN
## LR(1) items:
local_declaration -> entity_list ASSIGN . expr [ SEMICOL KWproof KWdo ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On expr shift to state 359
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 359:
## Known stack suffix:
## entity_list ASSIGN expr
## LR(1) items:
expr -> expr . COMMA expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LPAREN expr RPAREN [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . LBRACKET expr RBRACKET [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LIDENTIFIER [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . DOT LBRACE expr RBRACE [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
expr -> expr . COLON type_nt [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
local_declaration -> entity_list ASSIGN expr . [ SEMICOL KWproof KWdo ]
operator_expr -> expr . PLUS expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . MINUS expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . TIMES expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DIVIDE expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . CARET expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWin expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NOTIN expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . EQ expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . NEQ expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LT expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . LE expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GT expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . GE expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWas expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWand expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . KWor expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DCOLON expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . COLON expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . BAR expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DBAR expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
operator_expr -> expr . DARROW expr [ TIMES SEMICOL PLUS NOTIN NEQ MINUS LT LPAREN LE LBRACKET KWproof KWor KWin KWdo KWas KWand GT GE EQ DOT DIVIDE DCOLON DBAR DARROW COMMA COLON CARET BAR ]
## Transitions:
-- On TIMES shift to state 149
-- On PLUS shift to state 154
-- On NOTIN shift to state 159
-- On NEQ shift to state 168
-- On MINUS shift to state 161
-- On LT shift to state 183
-- On LPAREN shift to state 151
-- On LE shift to state 190
-- On LBRACKET shift to state 156
-- On KWor shift to state 192
-- On KWin shift to state 194
-- On KWas shift to state 196
-- On KWand shift to state 204
-- On GT shift to state 198
-- On GE shift to state 200
-- On EQ shift to state 202
-- On DOT shift to state 163
-- On DIVIDE shift to state 170
-- On DCOLON shift to state 172
-- On DBAR shift to state 185
-- On DARROW shift to state 206
-- On COMMA shift to state 208
-- On COLON shift to state 210
-- On CARET shift to state 174
-- On BAR shift to state 188
## Reductions:
-- On SEMICOL reduce production local_declaration -> entity_list ASSIGN expr
-- On KWproof reduce production local_declaration -> entity_list ASSIGN expr
-- On KWdo reduce production local_declaration -> entity_list ASSIGN expr

State 360:
## Known stack suffix:
## nameopconst_info return_type optsemi feature_body_opt
## LR(1) items:
named_feature -> nameopconst_info return_type optsemi feature_body_opt . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_feature -> nameopconst_info return_type optsemi feature_body_opt

State 361:
## Known stack suffix:
## feature_body
## LR(1) items:
feature_body_opt -> feature_body . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_body_opt -> feature_body

State 362:
## Known stack suffix:
## nameopconst_info formal_arguments_info
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info . return_type_opt optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info formal_arguments_info . return_type_opt ARROW info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On EXCLAM shift to state 134
-- On COLON shift to state 137
-- On return_type_opt shift to state 363
-- On return_type shift to state 244
## Reductions:
-- On UIDENTIFIER reduce production return_type_opt ->
-- On SEMICOL reduce production return_type_opt ->
-- On NUMBER reduce production return_type_opt ->
-- On LPAREN reduce production return_type_opt ->
-- On LIDENTIFIER reduce production return_type_opt ->
-- On KWtrue reduce production return_type_opt ->
-- On KWrequire reduce production return_type_opt ->
-- On KWproof reduce production return_type_opt ->
-- On KWnote reduce production return_type_opt ->
-- On KWlocal reduce production return_type_opt ->
-- On KWimmutable reduce production return_type_opt ->
-- On KWfalse reduce production return_type_opt ->
-- On KWensure reduce production return_type_opt ->
-- On KWdo reduce production return_type_opt ->
-- On KWdeferred reduce production return_type_opt ->
-- On KWclass reduce production return_type_opt ->
-- On KWcase reduce production return_type_opt ->
-- On KWall reduce production return_type_opt ->
-- On ARROW reduce production return_type_opt ->

State 363:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt . optsemi feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
named_feature -> nameopconst_info formal_arguments_info return_type_opt . ARROW info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On ARROW shift to state 364
-- On optsemi shift to state 366
## Reductions:
-- On UIDENTIFIER reduce production optsemi ->
-- On NUMBER reduce production optsemi ->
-- On LPAREN reduce production optsemi ->
-- On LIDENTIFIER reduce production optsemi ->
-- On KWtrue reduce production optsemi ->
-- On KWrequire reduce production optsemi ->
-- On KWproof reduce production optsemi ->
-- On KWnote reduce production optsemi ->
-- On KWlocal reduce production optsemi ->
-- On KWimmutable reduce production optsemi ->
-- On KWfalse reduce production optsemi ->
-- On KWensure reduce production optsemi ->
-- On KWdo reduce production optsemi ->
-- On KWdeferred reduce production optsemi ->
-- On KWclass reduce production optsemi ->
-- On KWcase reduce production optsemi ->
-- On KWall reduce production optsemi ->

State 364:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt ARROW
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt ARROW . info_expr [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On USCORE shift to state 109
-- On TIMES shift to state 110
-- On PLUS shift to state 111
-- On NUMBER shift to state 112
-- On MINUS shift to state 113
-- On LPAREN shift to state 114
-- On LIDENTIFIER shift to state 116
-- On LBRACKET shift to state 118
-- On LBRACE shift to state 119
-- On KWtrue shift to state 120
-- On KWsome shift to state 121
-- On KWold shift to state 124
-- On KWnot shift to state 125
-- On KWinspect shift to state 126
-- On KWif shift to state 127
-- On KWfalse shift to state 128
-- On KWall shift to state 129
-- On KWagent shift to state 132
-- On KWResult shift to state 144
-- On operator_expr shift to state 145
-- On info_expr shift to state 365
-- On expr shift to state 148
-- On exp_inspect shift to state 176
-- On exp_conditional shift to state 177
-- On dotted_id_list shift to state 178
-- On atomic_expr shift to state 187
## Reductions:

State 365:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt ARROW info_expr
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt ARROW info_expr . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_feature -> nameopconst_info formal_arguments_info return_type_opt ARROW info_expr

State 366:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt optsemi
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt optsemi . feature_body_opt [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWrequire shift to state 143
-- On KWnote shift to state 283
-- On KWlocal shift to state 322
-- On KWensure shift to state 239
-- On KWdeferred shift to state 328
-- On require_block shift to state 329
-- On local_block shift to state 331
-- On implementation_note shift to state 338
-- On implementation_block shift to state 339
-- On feature_implementation shift to state 346
-- On feature_body_opt shift to state 367
-- On feature_body shift to state 361
-- On ensure_block shift to state 351
## Reductions:
-- On UIDENTIFIER reduce production feature_body_opt ->
-- On SEMICOL reduce production feature_body_opt ->
-- On NUMBER reduce production feature_body_opt ->
-- On LPAREN reduce production feature_body_opt ->
-- On LIDENTIFIER reduce production feature_body_opt ->
-- On KWtrue reduce production feature_body_opt ->
-- On KWproof reduce production local_block ->
-- On KWimmutable reduce production feature_body_opt ->
-- On KWfalse reduce production feature_body_opt ->
-- On KWdo reduce production local_block ->
-- On KWclass reduce production feature_body_opt ->
-- On KWcase reduce production feature_body_opt ->
-- On KWall reduce production feature_body_opt ->

State 367:
## Known stack suffix:
## nameopconst_info formal_arguments_info return_type_opt optsemi feature_body_opt
## LR(1) items:
named_feature -> nameopconst_info formal_arguments_info return_type_opt optsemi feature_body_opt . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_feature -> nameopconst_info formal_arguments_info return_type_opt optsemi feature_body_opt

State 368:
## Known stack suffix:
## nameopconst
## LR(1) items:
nameopconst_info -> nameopconst . [ SEMICOL NEWLINE LPAREN KWinherit KWend EXCLAM COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nameopconst_info -> nameopconst

State 369:
## Known stack suffix:
## named_feature
## LR(1) items:
decl -> named_feature . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> named_feature

State 370:
## Known stack suffix:
## header_mark
## LR(1) items:
class_declaration -> header_mark . KWclass class_name class_generics create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWclass shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## header_mark KWclass
## LR(1) items:
class_declaration -> header_mark KWclass . class_name class_generics create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On UIDENTIFIER shift to state 372
-- On LIDENTIFIER shift to state 2
-- On path shift to state 373
-- On dotted_id_list shift to state 36
-- On class_name shift to state 375
## Reductions:

State 372:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
class_name -> UIDENTIFIER . [ LBRACKET KWinherit KWend KWcreate ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_name -> UIDENTIFIER

State 373:
## Known stack suffix:
## path
## LR(1) items:
class_name -> path . UIDENTIFIER [ LBRACKET KWinherit KWend KWcreate ]
## Transitions:
-- On UIDENTIFIER shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## path UIDENTIFIER
## LR(1) items:
class_name -> path UIDENTIFIER . [ LBRACKET KWinherit KWend KWcreate ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_name -> path UIDENTIFIER

State 375:
## Known stack suffix:
## header_mark KWclass class_name
## LR(1) items:
class_declaration -> header_mark KWclass class_name . class_generics create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On LBRACKET shift to state 376
-- On class_generics shift to state 382
## Reductions:
-- On KWinherit reduce production class_generics ->
-- On KWend reduce production class_generics ->
-- On KWcreate reduce production class_generics ->

State 376:
## Known stack suffix:
## LBRACKET
## LR(1) items:
class_generics -> LBRACKET . uidentifier_list RBRACKET [ KWinherit KWend KWcreate ]
## Transitions:
-- On UIDENTIFIER shift to state 377
-- On uidentifier_list shift to state 380
## Reductions:

State 377:
## Known stack suffix:
## UIDENTIFIER
## LR(1) items:
uidentifier_list -> UIDENTIFIER . [ RBRACKET ]
uidentifier_list -> UIDENTIFIER . COMMA uidentifier_list [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 378
## Reductions:
-- On RBRACKET reduce production uidentifier_list -> UIDENTIFIER

State 378:
## Known stack suffix:
## UIDENTIFIER COMMA
## LR(1) items:
uidentifier_list -> UIDENTIFIER COMMA . uidentifier_list [ RBRACKET ]
## Transitions:
-- On UIDENTIFIER shift to state 377
-- On uidentifier_list shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## UIDENTIFIER COMMA uidentifier_list
## LR(1) items:
uidentifier_list -> UIDENTIFIER COMMA uidentifier_list . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production uidentifier_list -> UIDENTIFIER COMMA uidentifier_list

State 380:
## Known stack suffix:
## LBRACKET uidentifier_list
## LR(1) items:
class_generics -> LBRACKET uidentifier_list . RBRACKET [ KWinherit KWend KWcreate ]
## Transitions:
-- On RBRACKET shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## LBRACKET uidentifier_list RBRACKET
## LR(1) items:
class_generics -> LBRACKET uidentifier_list RBRACKET . [ KWinherit KWend KWcreate ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_generics -> LBRACKET uidentifier_list RBRACKET

State 382:
## Known stack suffix:
## header_mark KWclass class_name class_generics
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics . create_clause inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWcreate shift to state 383
-- On create_clause shift to state 391
## Reductions:
-- On KWinherit reduce production create_clause ->
-- On KWend reduce production create_clause ->

State 383:
## Known stack suffix:
## KWcreate
## LR(1) items:
create_clause -> KWcreate . constructor_list [ KWinherit KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On nameopconst_info shift to state 384
-- On nameopconst shift to state 368
-- On featopconst shift to state 386
-- On constructor_list shift to state 387
-- On constructor shift to state 388
## Reductions:

State 384:
## Known stack suffix:
## nameopconst_info
## LR(1) items:
constructor -> nameopconst_info . formal_arguments_opt [ SEMICOL NEWLINE KWinherit KWend ]
## Transitions:
-- On LPAREN shift to state 92
-- On formal_arguments_opt shift to state 385
-- On formal_arguments shift to state 315
## Reductions:
-- On SEMICOL reduce production formal_arguments_opt ->
-- On NEWLINE reduce production formal_arguments_opt ->
-- On KWinherit reduce production formal_arguments_opt ->
-- On KWend reduce production formal_arguments_opt ->

State 385:
## Known stack suffix:
## nameopconst_info formal_arguments_opt
## LR(1) items:
constructor -> nameopconst_info formal_arguments_opt . [ SEMICOL NEWLINE KWinherit KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor -> nameopconst_info formal_arguments_opt

State 386:
## Known stack suffix:
## featopconst
## LR(1) items:
nameopconst -> featopconst . [ SEMICOL NUMBER NEWLINE LPAREN LIDENTIFIER KWtrue KWinherit KWfalse KWend KWas EXCLAM COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nameopconst -> featopconst

State 387:
## Known stack suffix:
## KWcreate constructor_list
## LR(1) items:
create_clause -> KWcreate constructor_list . [ KWinherit KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production create_clause -> KWcreate constructor_list

State 388:
## Known stack suffix:
## constructor
## LR(1) items:
constructor_list -> constructor . [ KWinherit KWend ]
constructor_list -> constructor . separator constructor_list [ KWinherit KWend ]
## Transitions:
-- On SEMICOL shift to state 4
-- On NEWLINE shift to state 5
-- On separator shift to state 389
## Reductions:
-- On KWinherit reduce production constructor_list -> constructor
-- On KWend reduce production constructor_list -> constructor

State 389:
## Known stack suffix:
## constructor separator
## LR(1) items:
constructor_list -> constructor separator . constructor_list [ KWinherit KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On nameopconst_info shift to state 384
-- On nameopconst shift to state 368
-- On featopconst shift to state 386
-- On constructor_list shift to state 390
-- On constructor shift to state 388
## Reductions:

State 390:
## Known stack suffix:
## constructor separator constructor_list
## LR(1) items:
constructor_list -> constructor separator constructor_list . [ KWinherit KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_list -> constructor separator constructor_list

State 391:
## Known stack suffix:
## header_mark KWclass class_name class_generics create_clause
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics create_clause . inherit_clause KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWinherit shift to state 392
-- On inherit_clause shift to state 416
## Reductions:
-- On KWend reduce production inherit_clause ->

State 392:
## Known stack suffix:
## KWinherit
## LR(1) items:
inherit_clause -> KWinherit . parent_list [ KWend ]
## Transitions:
-- On KWghost shift to state 393
-- On parent_list shift to state 394
-- On parent shift to state 395
-- On optghost shift to state 398
## Reductions:
-- On UIDENTIFIER reduce production optghost ->
-- On LPAREN reduce production optghost ->
-- On LIDENTIFIER reduce production optghost ->
-- On LBRACKET reduce production optghost ->

State 393:
## Known stack suffix:
## KWghost
## LR(1) items:
optghost -> KWghost . [ UIDENTIFIER LPAREN LIDENTIFIER LBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optghost -> KWghost

State 394:
## Known stack suffix:
## KWinherit parent_list
## LR(1) items:
inherit_clause -> KWinherit parent_list . [ KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inherit_clause -> KWinherit parent_list

State 395:
## Known stack suffix:
## parent
## LR(1) items:
parent_list -> parent . [ KWend ]
parent_list -> parent . optsemi parent_list [ KWend ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 396
## Reductions:
-- On UIDENTIFIER reduce production optsemi ->
-- On LPAREN reduce production optsemi ->
-- On LIDENTIFIER reduce production optsemi ->
-- On LBRACKET reduce production optsemi ->
-- On KWghost reduce production optsemi ->
-- On KWend reduce production parent_list -> parent

State 396:
## Known stack suffix:
## parent optsemi
## LR(1) items:
parent_list -> parent optsemi . parent_list [ KWend ]
## Transitions:
-- On KWghost shift to state 393
-- On parent_list shift to state 397
-- On parent shift to state 395
-- On optghost shift to state 398
## Reductions:
-- On UIDENTIFIER reduce production optghost ->
-- On LPAREN reduce production optghost ->
-- On LIDENTIFIER reduce production optghost ->
-- On LBRACKET reduce production optghost ->

State 397:
## Known stack suffix:
## parent optsemi parent_list
## LR(1) items:
parent_list -> parent optsemi parent_list . [ KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parent_list -> parent optsemi parent_list

State 398:
## Known stack suffix:
## optghost
## LR(1) items:
parent -> optghost . type_nt feature_adaptation [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 399
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 399:
## Known stack suffix:
## optghost type_nt
## LR(1) items:
parent -> optghost type_nt . feature_adaptation [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On KWrename shift to state 400
-- On feature_adaptation shift to state 415
## Reductions:
-- On UIDENTIFIER reduce production feature_adaptation ->
-- On SEMICOL reduce production feature_adaptation ->
-- On LPAREN reduce production feature_adaptation ->
-- On LIDENTIFIER reduce production feature_adaptation ->
-- On LBRACKET reduce production feature_adaptation ->
-- On KWghost reduce production feature_adaptation ->
-- On KWend reduce production feature_adaptation ->

State 400:
## Known stack suffix:
## KWrename
## LR(1) items:
feature_adaptation -> KWrename . rename_list KWend [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On rename_list shift to state 401
-- On rename_item shift to state 403
-- On nameopconst shift to state 406
-- On name_sig shift to state 412
-- On featopconst shift to state 386
## Reductions:

State 401:
## Known stack suffix:
## KWrename rename_list
## LR(1) items:
feature_adaptation -> KWrename rename_list . KWend [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
-- On KWend shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## KWrename rename_list KWend
## LR(1) items:
feature_adaptation -> KWrename rename_list KWend . [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production feature_adaptation -> KWrename rename_list KWend

State 403:
## Known stack suffix:
## rename_item
## LR(1) items:
rename_list -> rename_item . [ KWend ]
rename_list -> rename_item . optsemi rename_list [ KWend ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 404
## Reductions:
-- On NUMBER reduce production optsemi ->
-- On LPAREN reduce production optsemi ->
-- On LIDENTIFIER reduce production optsemi ->
-- On KWtrue reduce production optsemi ->
-- On KWfalse reduce production optsemi ->
-- On KWend reduce production rename_list -> rename_item

State 404:
## Known stack suffix:
## rename_item optsemi
## LR(1) items:
rename_list -> rename_item optsemi . rename_list [ KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On rename_list shift to state 405
-- On rename_item shift to state 403
-- On nameopconst shift to state 406
-- On name_sig shift to state 412
-- On featopconst shift to state 386
## Reductions:

State 405:
## Known stack suffix:
## rename_item optsemi rename_list
## LR(1) items:
rename_list -> rename_item optsemi rename_list . [ KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rename_list -> rename_item optsemi rename_list

State 406:
## Known stack suffix:
## nameopconst
## LR(1) items:
name_sig -> nameopconst . [ KWas ]
name_sig -> nameopconst . LPAREN type_list RPAREN [ KWas ]
name_sig -> nameopconst . LPAREN type_list RPAREN COLON type_nt [ KWas ]
## Transitions:
-- On LPAREN shift to state 407
## Reductions:
-- On KWas reduce production name_sig -> nameopconst

State 407:
## Known stack suffix:
## nameopconst LPAREN
## LR(1) items:
name_sig -> nameopconst LPAREN . type_list RPAREN [ KWas ]
name_sig -> nameopconst LPAREN . type_list RPAREN COLON type_nt [ KWas ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 49
-- On type_list_min2 shift to state 50
-- On type_list shift to state 408
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 408:
## Known stack suffix:
## nameopconst LPAREN type_list
## LR(1) items:
name_sig -> nameopconst LPAREN type_list . RPAREN [ KWas ]
name_sig -> nameopconst LPAREN type_list . RPAREN COLON type_nt [ KWas ]
## Transitions:
-- On RPAREN shift to state 409
## Reductions:

State 409:
## Known stack suffix:
## nameopconst LPAREN type_list RPAREN
## LR(1) items:
name_sig -> nameopconst LPAREN type_list RPAREN . [ KWas ]
name_sig -> nameopconst LPAREN type_list RPAREN . COLON type_nt [ KWas ]
## Transitions:
-- On COLON shift to state 410
## Reductions:
-- On KWas reduce production name_sig -> nameopconst LPAREN type_list RPAREN

State 410:
## Known stack suffix:
## nameopconst LPAREN type_list RPAREN COLON
## LR(1) items:
name_sig -> nameopconst LPAREN type_list RPAREN COLON . type_nt [ KWas ]
## Transitions:
-- On UIDENTIFIER shift to state 20
-- On LPAREN shift to state 22
-- On LIDENTIFIER shift to state 2
-- On LBRACKET shift to state 23
-- On type_nt shift to state 411
-- On tuple_type shift to state 24
-- On star_type shift to state 25
-- On simple_type shift to state 26
-- On qmark_type shift to state 27
-- On path shift to state 28
-- On list_type shift to state 31
-- On elem_type shift to state 43
-- On dotted_id_list shift to state 36
-- On arrow_type shift to state 46
## Reductions:

State 411:
## Known stack suffix:
## nameopconst LPAREN type_list RPAREN COLON type_nt
## LR(1) items:
name_sig -> nameopconst LPAREN type_list RPAREN COLON type_nt . [ KWas ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_sig -> nameopconst LPAREN type_list RPAREN COLON type_nt

State 412:
## Known stack suffix:
## name_sig
## LR(1) items:
rename_item -> name_sig . KWas nameopconst [ SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWfalse KWend ]
## Transitions:
-- On KWas shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## name_sig KWas
## LR(1) items:
rename_item -> name_sig KWas . nameopconst [ SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWfalse KWend ]
## Transitions:
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWtrue shift to state 86
-- On KWfalse shift to state 88
-- On nameopconst shift to state 414
-- On featopconst shift to state 386
## Reductions:

State 414:
## Known stack suffix:
## name_sig KWas nameopconst
## LR(1) items:
rename_item -> name_sig KWas nameopconst . [ SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWfalse KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rename_item -> name_sig KWas nameopconst

State 415:
## Known stack suffix:
## optghost type_nt feature_adaptation
## LR(1) items:
parent -> optghost type_nt feature_adaptation . [ UIDENTIFIER SEMICOL LPAREN LIDENTIFIER LBRACKET KWghost KWend ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parent -> optghost type_nt feature_adaptation

State 416:
## Known stack suffix:
## header_mark KWclass class_name class_generics create_clause inherit_clause
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics create_clause inherit_clause . KWend [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
-- On KWend shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## header_mark KWclass class_name class_generics create_clause inherit_clause KWend
## LR(1) items:
class_declaration -> header_mark KWclass class_name class_generics create_clause inherit_clause KWend . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declaration -> header_mark KWclass class_name class_generics create_clause inherit_clause KWend

State 418:
## Known stack suffix:
## formal_generic
## LR(1) items:
decl -> formal_generic . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> formal_generic

State 419:
## Known stack suffix:
## decls optsemi decl
## LR(1) items:
decls -> decls optsemi decl . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> decls optsemi decl

State 420:
## Known stack suffix:
## class_declaration
## LR(1) items:
decl -> class_declaration . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> class_declaration

State 421:
## Known stack suffix:
## ass_feat
## LR(1) items:
decl -> ass_feat . [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> ass_feat

State 422:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept file

State 423:
## Known stack suffix:
## decls
## LR(1) items:
decls -> decls . optsemi decl [ UIDENTIFIER SEMICOL NUMBER LPAREN LIDENTIFIER KWtrue KWimmutable KWfalse KWdeferred KWclass KWcase KWall # ]
file -> decls . [ # ]
## Transitions:
-- On SEMICOL shift to state 14
-- On optsemi shift to state 17
## Reductions:
-- On UIDENTIFIER reduce production optsemi ->
-- On NUMBER reduce production optsemi ->
-- On LPAREN reduce production optsemi ->
-- On LIDENTIFIER reduce production optsemi ->
-- On KWtrue reduce production optsemi ->
-- On KWimmutable reduce production optsemi ->
-- On KWfalse reduce production optsemi ->
-- On KWdeferred reduce production optsemi ->
-- On KWclass reduce production optsemi ->
-- On KWcase reduce production optsemi ->
-- On KWall reduce production optsemi ->

State 424:
## Known stack suffix:
##
## LR(1) items:
use_block_opt' -> . use_block_opt [ # ]
## Transitions:
-- On UIDENTIFIER shift to state 18
-- On NUMBER shift to state 55
-- On LPAREN shift to state 56
-- On LIDENTIFIER shift to state 85
-- On KWuse shift to state 1
-- On KWtrue shift to state 86
-- On KWimmutable shift to state 87
-- On KWfalse shift to state 88
-- On KWdeferred shift to state 89
-- On KWcase shift to state 90
-- On KWall shift to state 91
-- On use_block_opt shift to state 425
-- On use_block shift to state 426
-- On proof_all_expr shift to state 316
-- On nameopconst_info shift to state 317
-- On nameopconst shift to state 368
-- On named_feature shift to state 369
-- On header_mark shift to state 370
-- On formal_generic shift to state 418
-- On featopconst shift to state 386
-- On decl shift to state 427
-- On class_declaration shift to state 420
-- On ass_feat shift to state 421
## Reductions:
-- On KWclass reduce production header_mark ->

State 425:
## Known stack suffix:
## use_block_opt
## LR(1) items:
use_block_opt' -> use_block_opt . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept use_block_opt

State 426:
## Known stack suffix:
## use_block
## LR(1) items:
use_block_opt -> use_block . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_block_opt -> use_block

State 427:
## Known stack suffix:
## decl
## LR(1) items:
use_block_opt -> decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_block_opt -> decl

