File "albatross.mly", line 129, characters 7-10:
Warning: the token EOF is unused.
File "albatross.mly", line 135, characters 7-19:
Warning: the token HIGHEST_PREC is unused.
File "albatross.mly", line 93, characters 7-16:
Warning: the token KWCURRENT is unused.
File "albatross.mly", line 93, characters 17-26:
Warning: the token KWCurrent is unused.
File "albatross.mly", line 94, characters 7-13:
Warning: the token KWNONE is unused.
File "albatross.mly", line 95, characters 7-18:
Warning: the token KWPrecursor is unused.
File "albatross.mly", line 95, characters 19-28:
Warning: the token KWProcess is unused.
File "albatross.mly", line 98, characters 60-68:
Warning: the token KWassert is unused.
File "albatross.mly", line 99, characters 34-41:
Warning: the token KWcheck is unused.
File "albatross.mly", line 102, characters 19-28:
Warning: the token KWfeature is unused.
File "albatross.mly", line 102, characters 34-40:
Warning: the token KWfrom is unused.
File "albatross.mly", line 104, characters 34-42:
Warning: the token KWimport is unused.
File "albatross.mly", line 105, characters 34-45:
Warning: the token KWinvariant is unused.
File "albatross.mly", line 110, characters 7-17:
Warning: the token KWredefine is unused.
File "albatross.mly", line 113, characters 7-17:
Warning: the token KWundefine is unused.
File "albatross.mly", line 114, characters 7-16:
Warning: the token KWvariant is unused.
File "albatross.mly", line 115, characters 7-14:
Warning: the token KWwhile is unused.
File "albatross.mly", line 155, characters 7-13:
Warning: the token UMINUS is unused.
%{
open Support
open Printf
open Container



(* The generated parser calls [parse_error "syntax error"] if it reaches an
   error state *)
let parse_error (_:string): unit =
  raise Parsing.Parse_error

let filename (): string =
  (Parsing.symbol_start_pos ()).Lexing.pos_fname

let symbol_info (): info =
  info_from_position (Parsing.symbol_start_pos ())

let rhs_info (i:int): info =
  info_from_position (rhs_start_pos i)

let cinfo (i:info): string =  info_string (filename ()) i


let syntax_error () = raise (Parsing.Parse_error)


let expression_from_dotted_id (l: int list): expression =
  match List.rev l with
    f::t ->
      let func e i = Expdot (e, Identifier i)
      in
      List.fold_left func (Identifier f) t
  | _    -> assert false


let set_of_expression_list (lst:expression list): expression =
  let singleton = Identifier (ST.singleton)
  in
  let singl (e:expression) = Funapp (singleton,e)
  in
  match List.rev lst with
    [] -> assert false (* cannot happen, list has at least the element [e] *)
  | hd::tl ->
      List.fold_left
        (fun res e ->
          Binexp (Plusop, res, singl e))
        (singl hd)
        tl


let entities_of_expression (info:info) (lst: expression list): entities list =
  let rec entlist lst idlst entlst =
    match lst with
      [] ->
        begin match idlst with
          [] -> entlst
        | _  -> Untyped_entities (List.rev idlst) :: entlst
        end
    | (Identifier id)::lst ->
        entlist lst (id::idlst) entlst
    | (Typedexp (Identifier id,tp))::lst ->
        let idlst = List.rev (id::idlst) in
        let entlst = (Typed_entities (idlst,tp))::entlst in
        entlist lst [] entlst
    | e::lst ->
        error_info info ("\"" ^ (string_of_expression e) ^ "\" is not an argument")
  in
  List.rev (entlist lst [] [])



let predicate_of_expression (info:info) (e:expression): expression =
  let lst = expression_list_rev e in
  match lst with
    [] -> assert false (* never empty *)
  | Expcolon(last_arg,pexp)::rest ->
      (* predicate *)
      let lst = List.rev (last_arg::rest) in
      let entlst = entities_of_expression info lst in
      Exppred (withinfo info entlst,pexp)
  | _ -> (* enumerated set *)
      set_of_expression_list lst

%}
%start file
%start use_block_opt
%token ARROW
%token ASSIGN
%token BAR
%token BRACKETOP
%token CARET
%token COLON
%token COMMA
%token DARROW
%token DBAR
%token DCOLON
%token DIVIDE
%token DOT
%token EOF
%token EQ
%token EQV
%token EXCLAM
%token GE
%token GT
%token HIGHEST_PREC
%token KWCURRENT
%token KWCurrent
%token KWNONE
%token KWPrecursor
%token KWProcess
%token KWResult
%token KWagent
%token KWall
%token KWand
%token KWas
%token KWassert
%token KWcase
%token KWcheck
%token KWclass
%token KWcreate
%token KWdeferred
%token KWdo
%token KWelse
%token KWelseif
%token KWend
%token KWensure
%token KWfalse
%token KWfeature
%token KWfrom
%token KWghost
%token KWif
%token KWimmutable
%token KWimport
%token KWin
%token KWinherit
%token KWinspect
%token KWinvariant
%token KWlocal
%token KWnot
%token KWnote
%token KWold
%token KWor
%token KWproof
%token KWredefine
%token KWrename
%token KWrequire
%token KWsome
%token KWthen
%token KWtrue
%token KWundefine
%token KWuse
%token KWvariant
%token KWwhile
%token LBRACE
%token LBRACKET
%token LE
%token <int> LIDENTIFIER
%token LOWEST_PREC
%token LPAREN
%token LT
%token MINUS
%token NEQ
%token NEQV
%token NEWLINE
%token NOTIN
%token <int> NUMBER
%token <int> OPERATOR
%token PARENOP
%token PLUS
%token QMARK
%token RBRACE
%token RBRACKET
%token <int> ROPERATOR
%token RPAREN
%token SEMICOL
%token TIMES
%token <int> UIDENTIFIER
%token UMINUS
%token USCORE
%nonassoc KWghost LOWEST_PREC
%nonassoc ASSIGN
%nonassoc KWall KWsome
%right SEMICOL
%right ARROW
%right COMMA
%left COLON
%right DARROW
%left KWand KWor
%nonassoc EQ EQV GE GT KWas KWin LE LT NEQ NEQV NOTIN
%left BAR DBAR
%left MINUS PLUS
%left DIVIDE TIMES
%right CARET DCOLON
%left OPERATOR
%right ROPERATOR
%nonassoc KWnot KWold QMARK
%left DOT
%nonassoc LBRACE LBRACKET LPAREN
%nonassoc UMINUS
%nonassoc HIGHEST_PREC KWdeferred
%type <Support.module_declaration> file
%type <Support.use_block> use_block_opt
%%

file:
  _1 = use_block _2 = optsemi _3 = decls
    {                          (_1, List.rev _3)}
| _1 = decls
    {        ([], List.rev _1 )}

decls:
  
    {    ( [] )}
| _1 = decls _2 = optsemi _3 = decl
    {                       ( _3::_1 )}

decl:
  _1 = class_declaration
    {                      ( _1 )}
| _1 = named_feature
    {                      ( _1 )}
| _1 = formal_generic
    {                      ( _1 )}
| _1 = ass_feat
    {                      ( _1 )}

use_block_opt:
  
    {    ( [] )}
| _1 = decl
    {       ( [] )}
| _1 = use_block
    {            ( _1 )}

use_block:
  _1 = KWuse _2 = module_list _3 = KWend
    {                            ( List.rev _2 )}

module_list:
  _1 = one_module
    {                ( [_1] )}
| _1 = one_module _2 = separator _3 = module_list
    {                                     ( _1 :: _3 )}

one_module:
  _1 = dotted_id_list
    {                            (
  withinfo (rhs_info 1) (List.hd _1, List.tl _1)
)}

formal_generic:
  _1 = UIDENTIFIER _2 = COLON _3 = type_nt
    {                            ( Formal_generic (withinfo (rhs_info 1) _1,
                                              withinfo (rhs_info 3) _3) )}

ass_feat:
  _1 = proof_all_expr
    {                         (
  let entlst, req, impl, ens = _1 in
  let bdy = req, Some impl, ens in
  Assertion_feature (None, entlst, bdy)
)}

ass_req:
  _1 = KWrequire _2 = ass_seq
    {                      ( List.rev _2 )}
| _1 = KWrequire _2 = ass_seq _3 = separator
    {                                ( List.rev _2 )}

ass_req_opt:
  
    {    ( [] )}
| _1 = ass_req
    {            ( _1 )}

ass_check:
  _1 = KWproof _2 = proof_seq _3 = separator
    {                                       ( List.rev _2 )}

ass_ens:
  _1 = KWensure _2 = ass_seq
    {                          ( List.rev _2 )}

ass_seq:
  _1 = info_expr
    {                                        ( [_1] )}
| _1 = ass_seq _2 = separator _3 = info_expr
    {                                        ( _3::_1 )}

proof_seq:
  _1 = proof_expr
    {               ( [_1] )}
| _1 = proof_seq _2 = separator _3 = proof_expr
    {                                   ( _3::_1 )}

proof_expr:
  _1 = info_expr
    {              ( _1 )}
| _1 = proof_expr_struct
    {                      ( _1 )}
| _1 = proof_all_expr_inner
    {                         (
  let entlst,req,impl,ens = _1 in
  let exp = Expquantified (Universal,
                           entlst,
                           Expproof(req, Some impl, ens)) in
  withinfo (rhs_info 1) exp
)}

proof_all_expr:
  _1 = KWall _2 = formal_arguments_opt _3 = opt_nl _4 = ass_req_opt _5 = ass_imp _6 = ass_ens _7 = KWend
    {                              (
  let entlst = withinfo (rhs_info 2) _2 in
  entlst, _4, _5, _6
)}

proof_all_expr_inner:
  _1 = KWall _2 = formal_arguments _3 = opt_nl _4 = ass_req_opt _5 = ass_imp _6 = ass_ens _7 = KWend
    {          (
  let entlst = withinfo (rhs_info 2) _2 in
  entlst, _4, _5, _6
)}

proof_expr_struct:
  _1 = ass_req _2 = ass_check _3 = ass_ens _4 = KWend
    {                                   (
  let is_do = false in
  let impl  = Impdefined (None,is_do,_2) in
  let exp   = Expproof (_1, Some impl, _3) in
  withinfo (rhs_info 1) exp
)}
| _1 = ass_check _2 = ass_ens _3 = KWend
    {                            (
  let is_do = false in
  let impl  = Impdefined (None,is_do,_1) in
  let exp   = Expproof ([], Some impl, _2) in
  withinfo (rhs_info 1) exp
)}
| _1 = ass_req _2 = ass_ens _3 = KWend
    {                          (
  let exp   = Expproof (_1, None, _2) in
  withinfo (rhs_info 1) exp
)}

ass_imp:
  
    {    ( Impdefined (None,false,[]) )}
| _1 = ass_check
    {                        ( Impdefined (None,false,_1) )}
| _1 = KWdeferred
    {                        ( Impdeferred )}
| _1 = implementation_note
    {                        (
  match _1 with
    Impbuiltin -> _1
  | _ ->
      error_info (rhs_info 1) "Not allowed in assertions"
)}

header_mark:
  
    {  ( No_hmark )}
| _1 = KWimmutable
    {              ( Immutable_hmark )}
| _1 = KWcase
    {              ( Case_hmark )}
| _1 = KWdeferred
    {              ( Deferred_hmark  )}

class_declaration:
  _1 = header_mark _2 = KWclass _3 = class_name _4 = class_generics _5 = create_clause _6 = inherit_clause _7 = KWend
    {        (
  Class_declaration( withinfo (rhs_info 3) _1,
                     withinfo (rhs_info 3) _3,
                     withinfo (rhs_info 4) _4,
                     _5,
                     _6)
)}

class_name:
  _1 = UIDENTIFIER
    {                ( [], _1 )}
| _1 = path _2 = UIDENTIFIER
    {                     ( _1, _2 )}

class_generics:
  
    {    ( [] )}
| _1 = LBRACKET _2 = uidentifier_list _3 = RBRACKET
    {                                       ( _2 )}

inherit_clause:
  
    {    ( [] )}
| _1 = KWinherit _2 = parent_list
    {                        ( _2 )}

parent_list:
  _1 = parent
    {           ( [_1] )}
| _1 = parent _2 = optsemi _3 = parent_list
    {                               ( _1::_3 )}

parent:
  _1 = optghost _2 = type_nt _3 = feature_adaptation
    {                                            ( _1, withinfo (rhs_info 2) _2, _3 )}

feature_adaptation:
  
    {    ( [] )}
| _1 = KWrename _2 = rename_list _3 = KWend
    {                               ( _2 )}

rename_list:
  _1 = rename_item
    {                 ( [_1] )}
| _1 = rename_item _2 = optsemi _3 = rename_list
    {                                     ( _1::_3 )}

rename_item:
  _1 = name_sig _2 = KWas _3 = nameopconst
    {                               ( _1,_3 )}

name_sig:
  _1 = nameopconst
    {                ( _1,[],None )}
| _1 = nameopconst _2 = LPAREN _3 = type_list _4 = RPAREN
    {                                        ( _1,_3,None )}
| _1 = nameopconst _2 = LPAREN _3 = type_list _4 = RPAREN _5 = COLON _6 = type_nt
    {                                                      ( _1,_3, Some _6 )}

create_clause:
  
    {    ( withinfo UNKNOWN [] )}
| _1 = KWcreate _2 = constructor_list
    {                            ( withinfo (rhs_info 1) _2 )}

constructor_list:
  _1 = constructor
    {                ( [_1] )}
| _1 = constructor _2 = separator _3 = constructor_list
    {                                           ( _1::_3 )}

constructor:
  _1 = nameopconst_info _2 = formal_arguments_opt
    {                                                   (
  _1, _2
   )}

path:
  _1 = dotted_id_list _2 = DOT
    {                         ( _1 )}

dotted_id_list:
  _1 = LIDENTIFIER %prec LOWEST_PREC
    {                                   ( [_1] )}
| _1 = dotted_id_list _2 = DOT _3 = LIDENTIFIER
    {                                   ( _3::_1 )}

type_nt:
  _1 = elem_type %prec LOWEST_PREC
    {                                    ( _1 )}
| _1 = arrow_type
    {                  ( _1 )}

elem_type:
  _1 = simple_type
    {                 ( _1 )}
| _1 = tuple_type
    {                 ( _1 )}
| _1 = qmark_type
    {                 ( _1 )}
| _1 = star_type
    {                 ( _1 )}
| _1 = list_type
    {                 ( _1 )}
| _1 = LPAREN _2 = type_nt _3 = RPAREN
    {                          ( Paren_type _2 )}

simple_type:
  _1 = UIDENTIFIER _2 = actual_generics
    {                                (
  Normal_type ([],_1,_2)
)}
| _1 = path _2 = UIDENTIFIER _3 = actual_generics
    {                                      (  (* No parentheses needed? *)
  Normal_type (_1,_2,_3)
)}

actual_generics:
   %prec LOWEST_PREC
    {                      ([])}
| _1 = LBRACKET _2 = type_list _3 = RBRACKET
    {                                ( _2 )}

arrow_type:
  _1 = elem_type _2 = ARROW _3 = type_nt
    {                                    (
  Arrow_type (_1,_3)
)}

qmark_type:
  _1 = elem_type _2 = QMARK
    {                              ( QMark_type _1 )}

star_type:
  _1 = elem_type _2 = TIMES
    {                              ( Star_type _1 )}

list_type:
  _1 = LBRACKET _2 = elem_type _3 = RBRACKET
    {                                        ( List_type _2 )}

tuple_type:
  _1 = LPAREN _2 = type_list_min2 _3 = RPAREN
    {                                           ( Tuple_type _2 )}

type_list_min2:
  _1 = type_nt _2 = COMMA _3 = type_nt
    {                        ( [_1;_3] )}
| _1 = type_nt _2 = COMMA _3 = type_list_min2
    {                               ( _1::_3 )}

type_list:
  _1 = type_nt
    {          ( [_1])}
| _1 = type_list_min2
    {                 ( _1 )}

named_feature:
  _1 = nameopconst_info _2 = formal_arguments_info _3 = return_type_opt _4 = optsemi _5 = feature_body_opt
    {                     (
  Named_feature (_1, _2, _3, false, _5, None)
)}
| _1 = nameopconst_info _2 = return_type _3 = optsemi _4 = feature_body_opt
    {                     (
  Named_feature (_1, noinfo [], Some _2, false, _4, None)
)}
| _1 = nameopconst_info _2 = formal_arguments_info _3 = return_type_opt _4 = ARROW _5 = info_expr
    {              (
  Named_feature (_1, _2, _3, true, None, Some _5)
)}
| _1 = nameopconst_info _2 = return_type _3 = EQ _4 = info_expr
    {              (
  Named_feature (_1, noinfo [], Some _2, false, None, Some _4)
)}

nameopconst_info:
  _1 = nameopconst
    {                              ( withinfo (rhs_info 1) _1 )}

nameopconst:
  _1 = LIDENTIFIER
    {                       ( FNname _1 )}
| _1 = featopconst
    {                       ( _1 )}

featopconst:
  _1 = LPAREN _2 = operator _3 = RPAREN
    {                           ( FNoperator _2)}
| _1 = KWtrue
    {                           ( FNtrue )}
| _1 = KWfalse
    {                           ( FNfalse )}
| _1 = NUMBER
    {                           ( FNnumber _1 )}

return_type:
  _1 = COLON _2 = elem_type
    {                            ( withinfo (rhs_info 2) (_2,false,false) )}
| _1 = COLON _2 = KWghost _3 = elem_type
    {                            ( withinfo (rhs_info 3) (_3,false,true)  )}
| _1 = EXCLAM _2 = COLON _3 = elem_type
    {                            ( withinfo (rhs_info 3) (_3,true,false)  )}

return_type_opt:
  
    {    ( None )}
| _1 = return_type
    {                ( Some _1 )}

feature_body_opt:
   %prec LOWEST_PREC
    {                      ( None )}
| _1 = feature_body
    {                      ( Some _1 )}

feature_body:
  _1 = require_block _2 = feature_implementation _3 = ensure_block _4 = KWend
    {    ( _1, Some _2, _3 )}
| _1 = require_block _2 = feature_implementation _3 = KWend
    {                                                ( _1, Some _2, [] )}
| _1 = feature_implementation _2 = ensure_block _3 = KWend
    {                                                ( [], Some _1, _2 )}
| _1 = require_block _2 = ensure_block _3 = KWend
    {                                                ( _1, None,    _2 )}
| _1 = require_block _2 = KWend
    {                                                ( _1, None,    [] )}
| _1 = feature_implementation _2 = KWend
    {                                                ( [], Some _1, [] )}
| _1 = ensure_block _2 = KWend
    {                                                ( [], None,    _1 )}

feature_implementation:
  _1 = KWdeferred
    {                         ( Impdeferred )}
| _1 = implementation_note
    {                         ( _1 )}
| _1 = implementation_block
    {                         ( _1 )}

implementation_block:
  _1 = local_block _2 = do_block
    {                            ( Impdefined(_1,true, _2) )}
| _1 = local_block _2 = proof_block
    {                            ( Impdefined(_1,false,_2) )}

require_block:
  _1 = KWrequire _2 = compound
    {                       ( _2 )}

require_block_opt:
  
    {    ( [] )}
| _1 = require_block
    {                  ( _1 )}

proof_block:
  _1 = KWproof _2 = compound
    {                     ( _2 )}

do_block:
  _1 = KWdo _2 = compound
    {                        ( _2 )}

local_block:
  
    {    ( None )}
| _1 = KWlocal _2 = local_list
    {                       ( Some _2 )}

local_list:
  _1 = local_declaration
    {                      ( [_1] )}
| _1 = local_declaration _2 = SEMICOL _3 = local_list
    {                                         ( _1::_3)}

local_declaration:
  _1 = entity_list
    {                ( Unassigned _1 )}
| _1 = entity_list _2 = ASSIGN _3 = expr
    {                            ( Assigned (_1,_3) )}
| _1 = LIDENTIFIER _2 = LPAREN _3 = entity_list _4 = RPAREN _5 = return_type_opt _6 = feature_body
    {                                                                       (
  Local_feature (_1,_3,_5,_6)
)}

implementation_note:
  _1 = KWnote _2 = LIDENTIFIER _3 = optsemi
    {                                                (
  let str = ST.string _2
  in
  if str = "built_in" || str = "axiom" then Impbuiltin
  else if str = "event" then Impevent
  else
    error_info (rhs_info 1) "must be one of {built_in,axiom,event}"
)}

ensure_block:
  _1 = KWensure _2 = compound
    {                      ( _2 )}

entity_list:
  _1 = entity_group
    {                 ( [_1] )}
| _1 = entity_group _2 = COMMA _3 = entity_list
    {                                   ( _1::_3 )}

entity_group:
  _1 = identifier_list
    {                    ( Untyped_entities _1 )}
| _1 = identifier_list _2 = COLON _3 = type_nt
    {                                  ( Typed_entities (_1,_3) )}

identifier_list:
  _1 = LIDENTIFIER %prec LOWEST_PREC
    {                                  ( [_1] )}
| _1 = LIDENTIFIER _2 = COMMA _3 = identifier_list
    {                                      ( _1::_3 )}

formal_arguments_info:
  _1 = formal_arguments
    {                                        ( withinfo (rhs_info 1) _1 )}

formal_arguments_opt:
  
    {    ( [] )}
| _1 = formal_arguments
    {                     ( _1 )}

formal_arguments:
  _1 = LPAREN _2 = entity_list _3 = RPAREN
    {                                            ( _2 )}

compound:
  _1 = compound_list
    {                        ( _1 )}

compound_list:
  _1 = info_expr _2 = optsemi
    {                       ( [_1] )}
| _1 = info_expr _2 = SEMICOL _3 = compound_list
    {                                    ( _1::_3 )}

info_expr:
  _1 = expr %prec LOWEST_PREC
    {                                  ( withinfo (rhs_info 1) _1 )}

expr:
  _1 = atomic_expr
    {                                  ( _1 )}
| _1 = operator_expr
    {                                  ( _1 )}
| _1 = LPAREN _2 = expr _3 = RPAREN
    {                                  ( Expparen _2 )}
| _1 = LPAREN _2 = operator _3 = RPAREN
    {                                  ( Expop _2 )}
| _1 = LBRACKET _2 = expr _3 = RBRACKET
    {                                  (
  let lst = expression_list _2 in
  let rec brexp lst =
    match lst with
      []   -> Identifier (ST.symbol "nil")
    | h::t ->
        Binexp (Caretop, h, brexp t)
  in
  brexp lst
)}
| _1 = expr _2 = COMMA _3 = expr
    {                                  ( Tupleexp (_1,_3) )}
| _1 = expr _2 = LPAREN _3 = expr _4 = RPAREN
    {                                  ( Funapp (_1,_3) )}
| _1 = expr _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                  ( Bracketapp (_1,_3) )}
| _1 = expr _2 = DOT _3 = LIDENTIFIER
    {                                  ( Expdot (_1, Identifier _3) )}
| _1 = expr _2 = DOT _3 = LBRACE _4 = expr _5 = RBRACE
    {                                  (
  Expdot(_1, predicate_of_expression (rhs_info 4) _4)
)}
| _1 = dotted_id_list _2 = DOT _3 = LPAREN _4 = expr _5 = RPAREN
    {                                            (
  Expdot (expression_from_dotted_id _1, _4) )}
| _1 = dotted_id_list _2 = DOT _3 = LBRACE _4 = expr _5 = RBRACE
    {                                            (
  Expdot(expression_from_dotted_id _1, predicate_of_expression (rhs_info 4) _4)
)}
| _1 = expr _2 = COLON _3 = type_nt
    {                              ( Typedexp (_1,_3) )}
| _1 = KWall _2 = formal_arguments _3 = opt_nl _4 = expr
    {                                        (
  Expquantified (Universal, withinfo (rhs_info 2) _2, _4) )}
| _1 = KWsome _2 = formal_arguments _3 = opt_nl _4 = expr
    {                                        (
  Expquantified (Existential, withinfo (rhs_info 2) _2, _4) )}
| _1 = LBRACE _2 = expr _3 = RBRACE
    {                                  (
  predicate_of_expression (rhs_info 2) _2
)}
| _1 = LPAREN _2 = expr _3 = RPAREN _4 = ARROW _5 = expr
    {                                  (
  let lst  = expression_list _2
  and info = rhs_info 2 in
  let entlst = entities_of_expression info lst in
  Exparrow (withinfo info entlst,_5)
)}
| _1 = KWagent _2 = formal_arguments_info _3 = return_type_opt _4 = optsemi _5 = require_block_opt _6 = ensure_block _7 = KWend
    {          (
  Expagent (_2,_3,_5,_6)
)}
| _1 = LIDENTIFIER _2 = ARROW _3 = expr
    {                           (
  let info = rhs_info 1 in
  let entlst = entities_of_expression info [Identifier _1] in
  Exparrow (withinfo info entlst, _3)
)}
| _1 = exp_conditional
    {                   ( _1 )}
| _1 = exp_inspect
    {                   ( _1 )}

atomic_expr:
  _1 = KWResult
    {                                  ( ExpResult )}
| _1 = NUMBER
    {                                  ( Expnumber _1 )}
| _1 = KWfalse
    {                                  ( Expfalse )}
| _1 = KWtrue
    {                                  ( Exptrue )}
| _1 = USCORE
    {                                  ( Expanon )}
| _1 = dotted_id_list %prec LOWEST_PREC
    {                                     (
  expression_from_dotted_id _1
)}

operator_expr:
  _1 = expr _2 = PLUS _3 = expr
    {                                  ( Binexp (Plusop,_1,_3) )}
| _1 = expr _2 = MINUS _3 = expr
    {                                  ( Binexp (Minusop,_1,_3) )}
| _1 = PLUS _2 = expr
    {                                  ( Unexp (Plusop,_2) )}
| _1 = MINUS _2 = expr
    {                                  ( Unexp (Minusop,_2) )}
| _1 = expr _2 = TIMES _3 = expr
    {                                  ( Binexp (Timesop,_1,_3) )}
| _1 = TIMES _2 = expr
    {                                  ( Unexp (Timesop,_2) )}
| _1 = expr _2 = DIVIDE _3 = expr
    {                                  ( Binexp (Divideop,_1,_3) )}
| _1 = expr _2 = CARET _3 = expr
    {                                  ( Binexp (Caretop,_1,_3) )}
| _1 = expr _2 = KWin _3 = expr
    {                                  ( Binexp (Inop,_1,_3) )}
| _1 = expr _2 = NOTIN _3 = expr
    {                                  ( Binexp (Notinop,_1,_3) )}
| _1 = expr _2 = EQ _3 = expr
    {                                  ( Binexp (Eqop,_1,_3) )}
| _1 = expr _2 = NEQ _3 = expr
    {                                  ( Binexp (NEqop,_1,_3) )}
| _1 = expr _2 = LT _3 = expr
    {                                  ( Binexp (LTop,_1,_3) )}
| _1 = expr _2 = LE _3 = expr
    {                                  ( Binexp (LEop,_1,_3) )}
| _1 = expr _2 = GT _3 = expr
    {                                  ( Binexp (GTop,_1,_3) )}
| _1 = expr _2 = GE _3 = expr
    {                                  ( Binexp (GEop,_1,_3) )}
| _1 = expr _2 = KWas _3 = expr
    {                                  ( Binexp (Asop,_1,_3) )}
| _1 = expr _2 = KWand _3 = expr
    {                                  ( Binexp (Andop,_1,_3) )}
| _1 = expr _2 = KWor _3 = expr
    {                                  ( Binexp (Orop,_1,_3)  )}
| _1 = KWnot _2 = expr
    {                                  ( Unexp (Notop,_2) )}
| _1 = KWold _2 = expr
    {                                  ( Unexp (Oldop,_2) )}
| _1 = expr _2 = DCOLON _3 = expr
    {                                  ( Binexp (DColonop,_1,_3) )}
| _1 = expr _2 = COLON _3 = expr
    {                                  ( Expcolon (_1,_3) )}
| _1 = expr _2 = BAR _3 = expr
    {                                  ( Binexp (Barop,_1,_3) )}
| _1 = expr _2 = DBAR _3 = expr
    {                                  ( Binexp (DBarop,_1,_3) )}
| _1 = expr _2 = DARROW _3 = expr
    {                                  ( Binexp (DArrowop,_1,_3) )}

operator:
  _1 = PLUS
    {              ( Plusop )}
| _1 = MINUS
    {              ( Minusop )}
| _1 = TIMES
    {              ( Timesop )}
| _1 = DIVIDE
    {              ( Divideop )}
| _1 = EQ
    {              ( Eqop )}
| _1 = EQV
    {              ( Eqvop )}
| _1 = NEQ
    {              ( NEqop )}
| _1 = NEQV
    {              ( NEqvop )}
| _1 = LT
    {              ( LTop )}
| _1 = LE
    {              ( LEop )}
| _1 = GT
    {              ( GTop )}
| _1 = GE
    {              ( GEop )}
| _1 = CARET
    {              ( Caretop )}
| _1 = KWand
    {              ( Andop )}
| _1 = KWor
    {              ( Orop )}
| _1 = KWnot
    {              ( Notop )}
| _1 = KWin
    {              ( Inop  )}
| _1 = NOTIN
    {              ( Notinop )}
| _1 = BAR
    {              ( Barop )}
| _1 = DBAR
    {              ( DBarop )}
| _1 = DARROW
    {              ( DArrowop )}
| _1 = DCOLON
    {              ( DColonop )}
| _1 = OPERATOR
    {              ( Freeop _1 )}
| _1 = ROPERATOR
    {              ( RFreeop _1 )}
| _1 = PARENOP
    {              ( Parenop )}
| _1 = BRACKETOP
    {              ( Bracketop )}

optghost:
  
    {    ( false )}
| _1 = KWghost
    {          ( true )}

optsemi:
   %prec LOWEST_PREC
    {                      (())}
| _1 = SEMICOL
    {            (())}

uidentifier_list:
  _1 = UIDENTIFIER
    {                ( [_1] )}
| _1 = UIDENTIFIER _2 = COMMA _3 = uidentifier_list
    {                                       ( _1::_3 )}

opt_nl:
  
    {    (())}
| _1 = SEMICOL
    {            (())}
| _1 = NEWLINE
    {            (())}

separator:
  _1 = SEMICOL
    {             (())}
| _1 = NEWLINE
    {             (())}

exp_conditional:
  _1 = KWif _2 = exp_then_part_list _3 = exp_else_part _4 = KWend
    {                                                ( Expif (_2,_3) )}

exp_then_part_list:
  _1 = exp_then_part
    {                  ( [_1] )}
| _1 = exp_then_part _2 = KWelseif _3 = exp_then_part_list
    {                                               ( _1::_3 )}

exp_then_part:
  _1 = expr _2 = KWthen _3 = expr
    {                     ( _1, _3 )}

exp_else_part:
  
    {    ( None )}
| _1 = KWelse _2 = expr
    {                ( Some _2 )}

exp_inspect:
  _1 = KWinspect _2 = expr _3 = exp_case_list _4 = KWend
    {                                       (
  Expinspect (_2,_3)
    )}

exp_case_list:
  _1 = exp_case
    {             ( [_1] )}
| _1 = exp_case _2 = exp_case_list
    {                           ( _1 :: _2 )}

exp_case:
  _1 = KWcase _2 = expr _3 = KWthen _4 = expr
    {                                  ( _2, _4 )}

%%
