State 0:
## Known stack suffix:
##
## LR(1) items:
declarations' -> . declarations [ # ]
## Transitions:
-- On VAR shift to state 1
-- On declarations shift to state 10
## Reductions:

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
declarations -> VAR . EQUAL expr EOF [ # ]
## Transitions:
-- On EQUAL shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## VAR EQUAL
## LR(1) items:
declarations -> VAR EQUAL . expr EOF [ # ]
## Transitions:
-- On VAR shift to state 3
-- On FAIL shift to state 4
-- On CONST shift to state 5
-- On expr shift to state 6
## Reductions:

State 3:
## Known stack suffix:
## VAR
## LR(1) items:
expr -> VAR . [ PLUS EOF ]
## Transitions:
## Reductions:
-- On PLUS EOF
--   reduce production expr -> VAR

State 4:
## Known stack suffix:
## FAIL
## LR(1) items:
expr -> FAIL . [ PLUS EOF ]
## Transitions:
## Reductions:
-- On PLUS EOF
--   reduce production expr -> FAIL

State 5:
## Known stack suffix:
## CONST
## LR(1) items:
expr -> CONST . [ PLUS EOF ]
## Transitions:
## Reductions:
-- On PLUS EOF
--   reduce production expr -> CONST

State 6:
## Known stack suffix:
## VAR EQUAL expr
## LR(1) items:
declarations -> VAR EQUAL expr . EOF [ # ]
expr -> expr . PLUS expr [ PLUS EOF ]
## Transitions:
-- On PLUS shift to state 7
-- On EOF shift to state 9
## Reductions:

State 7:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ PLUS EOF ]
## Transitions:
-- On VAR shift to state 3
-- On FAIL shift to state 4
-- On CONST shift to state 5
-- On expr shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS EOF ]
expr -> expr PLUS expr . [ PLUS EOF ]
## Transitions:
## Reductions:
-- On PLUS EOF
--   reduce production expr -> expr PLUS expr

State 9:
## Known stack suffix:
## VAR EQUAL expr EOF
## LR(1) items:
declarations -> VAR EQUAL expr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production declarations -> VAR EQUAL expr EOF

State 10:
## Known stack suffix:
## declarations
## LR(1) items:
declarations' -> declarations . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept declarations

