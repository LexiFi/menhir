State 0:
declarations' -> . declarations [ # ]
-- On VAR shift to state 1
-- On declarations shift to state 10

State 1:
declarations -> VAR . EQUAL expr EOF [ # ]
-- On EQUAL shift to state 2

State 2:
declarations -> VAR EQUAL . expr EOF [ # ]
-- On VAR shift to state 3
-- On FAIL shift to state 4
-- On CONST shift to state 5
-- On expr shift to state 6

State 3:
expr -> VAR . [ PLUS EOF ]
-- On PLUS reduce production expr -> VAR
-- On EOF reduce production expr -> VAR

State 4:
expr -> FAIL . [ PLUS EOF ]
-- On PLUS reduce production expr -> FAIL
-- On EOF reduce production expr -> FAIL

State 5:
expr -> CONST . [ PLUS EOF ]
-- On PLUS reduce production expr -> CONST
-- On EOF reduce production expr -> CONST

State 6:
declarations -> VAR EQUAL expr . EOF [ # ]
expr -> expr . PLUS expr [ PLUS EOF ]
-- On PLUS shift to state 7
-- On EOF shift to state 9

State 7:
expr -> expr PLUS . expr [ PLUS EOF ]
-- On VAR shift to state 3
-- On FAIL shift to state 4
-- On CONST shift to state 5
-- On expr shift to state 8

State 8:
expr -> expr . PLUS expr [ PLUS EOF ]
expr -> expr PLUS expr . [ PLUS EOF ]
-- On PLUS reduce production expr -> expr PLUS expr
-- On EOF reduce production expr -> expr PLUS expr

State 9:
declarations -> VAR EQUAL expr EOF . [ # ]
-- On # reduce production declarations -> VAR EQUAL expr EOF

State 10:
declarations' -> declarations . [ # ]
-- On # accept declarations

