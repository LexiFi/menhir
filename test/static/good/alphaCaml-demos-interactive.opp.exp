%{

open Syntax.Raw

%}
%start declarations
%token <int> CONST
%token EOF
%token EQUAL
%token FAIL
%token PLUS
%token <string> VAR
%left PLUS
%type <Syntax.Raw.declarations> declarations
%%

expr:
  _1 = VAR
    {    ( EVar _1 )}
| _1 = CONST
    {    ( EConst _1 )}
| _1 = expr _2 = PLUS _3 = expr
    {    ( EAdd (_1, _3) )}
| _1 = FAIL
    {    ( EFail )}

declarations:
  _1 = VAR _2 = EQUAL _3 = expr _4 = EOF
    {    ( D (_1, _3, Suspension.create (fun () -> !ParserFix.declarations())) )}

%%
