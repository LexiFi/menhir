%{

open Strings
open Mm.Raw

%}
%start toplevel
%token AND
%token AS
%token CLOSE
%token DELETE
%token DEPENDS
%token DOT
%token END
%token EOF
%token EQUAL
%token FAKE
%token IN
%token LCURLY
%token LET
%token <string> LIDENT
%token LPAREN
%token LSQUARE
%token MIXIN
%token ON
%token PLUS
%token RCURLY
%token REC
%token RPAREN
%token RSQUARE
%token VAL
%token WILDCARD
%type <Mm.Raw.expression> toplevel
%%

atomic_expression:
  _1 = LIDENT
    {    ( EVar _1 )}
| _1 = LCURLY _2 = record_fields _3 = RCURLY
    {    ( ERecord _2 )}
| _1 = atomic_expression _2 = DOT _3 = LIDENT
    {    ( ERecordSelection (_1, _3) )}
| _1 = MIXIN _2 = components _3 = END
    {    ( let _, input, output = _2 in
      EStructure (input, output) )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {    ( _2 )}

unary_expression:
  _1 = atomic_expression
    {    ( _1 )}
| _1 = CLOSE _2 = unary_expression
    {    ( EClose _2 )}
| _1 = DELETE _2 = fields _3 = IN _4 = unary_expression
    {    ( EDeletion (_4, _2) )}
| _1 = FAKE _2 = LIDENT _3 = DEPENDS _4 = ON _5 = LIDENT _6 = IN _7 = unary_expression
    {    ( EFakeDependency (_7, _2, _5) )}

summand_expression:
  _1 = unary_expression
    {    ( _1 )}
| _1 = summand_expression _2 = PLUS _3 = unary_expression
    {    ( EComposition (_1, _3) )}

expression:
  _1 = summand_expression
    {    ( _1 )}
| _1 = LET _2 = REC _3 = bindings _4 = IN _5 = expression
    {    ( ELetRec (List.rev _3, _5) )}

bindings:
  _1 = binding
    {    ( [ _1 ] )}
| _1 = bindings _2 = AND _3 = binding
    {    ( _3 :: _1 )}

binding:
  _1 = LIDENT _2 = EQUAL _3 = expression
    {    ( (_1, _3) )}

toplevel:
  _1 = expression _2 = EOF
    {    ( _1 )}

record_fields:
  
    {    ( StringMap.empty )}
| _1 = record_fields _2 = VAL _3 = LIDENT _4 = EQUAL _5 = expression
    {    ( StringMap.add _3 _5 _1 )}

components:
  
    {    ( 0, StringMap.empty, (StringMap.empty, []) )}
| _1 = components _2 = VAL _3 = lident_pun _4 = dependencies _5 = EQUAL _6 = expression
    {    ( let xname, iname = _3 in
      let i, input, (fields, anonymous) = _1 in
      let fields = StringMap.add xname (_4, iname, _6, Mm.KStructMember i) fields in
      i+1, input, (fields, anonymous) )}
| _1 = components _2 = VAL _3 = WILDCARD _4 = AS _5 = LIDENT _6 = dependencies _7 = EQUAL _8 = expression
    {    ( let i, input, (fields, anonymous) = _1 in
      let anonymous = (_6, _5, _8, Mm.KStructMember i) :: anonymous in
      i+1, input, (fields, anonymous) )}
| _1 = components _2 = VAL _3 = lident_pun
    {    ( let xname, iname = _3 in
      let i, input, output = _1 in
      let input = StringMap.add xname iname input in
      i+1, input, output )}

lident_pun:
  _1 = LIDENT _2 = AS _3 = LIDENT
    {    ( _1, _3 )}
| _1 = LIDENT
    {    ( _1, _1 )}

fields:
  
    {    ( StringSet.empty )}
| _1 = fields _2 = LIDENT
    {    ( StringSet.add _2 _1 )}

dependencies:
  
    {    ( [] )}
| _1 = LSQUARE _2 = variables _3 = RSQUARE
    {    ( _2 )}

variables:
  
    {    ( [] )}
| _1 = variables _2 = LIDENT
    {    ( _2 :: _1 )}

%%
