%{

open Strings
open Fsub.Raw

%}
%start toplevel
%token ALL
%token ARROW
%token COLON
%token COMMA
%token DOT
%token EOF
%token EQ
%token IN
%token LAMBDA
%token <string> LCID
%token LCURLY
%token LEQ
%token LET
%token LPAREN
%token LSQUARE
%token RCURLY
%token RPAREN
%token RSQUARE
%token SEMI
%token TTOP
%token <string> UCID
%token USCORE
%type <Fsub.Raw.toplevel> toplevel
%%

toplevel:
  _1 = EOF
    {      ( TopEOF )}
| _1 = Term _2 = SEMI _3 = toplevel
    {      ( TopEval (_1, _3) )}
| _1 = UCID _2 = TyBinder _3 = SEMI _4 = toplevel
    {      ( TopTypeBind (_1, _2, _4) )}
| _1 = LCID _2 = Binder _3 = SEMI _4 = toplevel
    {      ( TopTermBind (_1, _2, _4) )}

Binder:
  _1 = COLON _2 = Type
    {      ( _2 )}

Type:
  _1 = ArrowType
    {      ( _1 )}
| _1 = ALL _2 = UCID _3 = OType _4 = DOT _5 = Type
    {      ( TForall (_2, _3, _5) )}

AType:
  _1 = LPAREN _2 = Type _3 = RPAREN
    {      ( _2 )}
| _1 = UCID
    {      ( TVar _1 )}
| _1 = TTOP
    {      ( TTop )}
| _1 = LCURLY _2 = FieldTypes _3 = RCURLY
    {      ( TRecord _2 )}

TyBinder:
  
    {      ( TTop )}
| _1 = LEQ _2 = Type
    {      ( _2 )}

ArrowType:
  _1 = AType _2 = ARROW _3 = ArrowType
    {     ( TArrow (_1, _3) )}
| _1 = AType
    {     ( _1 )}

Term:
  _1 = AppTerm
    {      ( _1 )}
| _1 = LAMBDA _2 = LCID _3 = COLON _4 = Type _5 = DOT _6 = Term
    {      ( EAbs (_2, _4, _6) )}
| _1 = LET _2 = Pattern _3 = EQ _4 = Term _5 = IN _6 = Term
    {      ( ELet (_2, _4, _6) )}
| _1 = LAMBDA _2 = UCID _3 = OType _4 = DOT _5 = Term
    {      ( ETyAbs (_2, _3, _5) )}

AppTerm:
  _1 = PathTerm
    {      ( _1 )}
| _1 = AppTerm _2 = PathTerm
    {      ( EApp (_1, _2) )}
| _1 = AppTerm _2 = LSQUARE _3 = Type _4 = RSQUARE
    {      ( ETyApp (_1, _3) )}

PathTerm:
  _1 = PathTerm _2 = DOT _3 = LCID
    {      ( EProj (_1, _3) )}
| _1 = ATerm
    {      ( _1 )}

FieldTypes:
  
    {      ( StringMap.empty )}
| _1 = NEFieldTypes
    {      ( _1 )}

NEFieldTypes:
  _1 = LCID _2 = COLON _3 = Type
    {      ( StringMap.singleton _1 _3 )}
| _1 = LCID _2 = COLON _3 = Type _4 = COMMA _5 = NEFieldTypes
    {      ( StringMap.add _1 _3 _5 )}

TermSeq:
  _1 = Term
    {      ( _1 )}
| _1 = Term _2 = SEMI _3 = TermSeq
    {      ( ELet (PWildcard, _1, _3) )}

ATerm:
  _1 = LPAREN _2 = TermSeq _3 = RPAREN
    {      ( _2 )}
| _1 = LCID
    {      ( EVar _1 )}
| _1 = LCURLY _2 = Fields _3 = RCURLY
    {      ( ERecord _2 )}

Fields:
  
    {      ( StringMap.empty )}
| _1 = NEFields
    {      ( _1 )}

NEFields:
  _1 = LCID _2 = EQ _3 = Term
    {      ( StringMap.singleton _1 _3 )}
| _1 = LCID _2 = EQ _3 = Term _4 = COMMA _5 = NEFields
    {      ( StringMap.add _1 _3 _5 )}

OType:
  
    {      ( TTop)}
| _1 = LEQ _2 = Type
    {      ( _2 )}

Pattern:
  _1 = USCORE
    {      ( PWildcard )}
| _1 = LCID _2 = COLON _3 = Type
    {      ( PVar (_1, _3) )}
| _1 = LCURLY _2 = PatFields _3 = RCURLY
    {      ( PRecord _2 )}

PatFields:
  
    {      ( StringMap.empty )}
| _1 = NEPatFields
    {      ( _1 )}

NEPatFields:
  _1 = LCID _2 = EQ _3 = Pattern
    {      ( StringMap.singleton _1 _3 )}
| _1 = LCID _2 = EQ _3 = Pattern _4 = COMMA _5 = NEPatFields
    {      ( StringMap.add _1 _3 _5 )}

%%
