%{

open Syntax

%}
%{

  let error i msg =
    Error.error2 (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i) msg

  (* Used to collect inline pattern type definitions without too much
     fuss. [inline_defs] gathers the inline definitions found so far.
     [current_params] contains the type parameters currently in scope. *)

  let inline_defs =
    ref []

  let current_params =
    ref []

%}
%start phrase
%token AND
%token ATOM
%token BAR
%token BINDS
%token COLON
%token COMMA
%token CONTAINER
%token DOT
%token EOF
%token EQUAL
%token IDENTIFIER
%token INNER
%token LANGLE
%token LBRACE
%token <Lexing.position * Lexing.position * string> LID
%token LPAREN
%token MODULE
%token NEUTRAL
%token <string> OCAML
%token OF
%token OUTER
%token QUOTE
%token RANGLE
%token RBRACE
%token RPAREN
%token SEMICOLON
%token SORT
%token STAR
%token TYPE
%token <Lexing.position * Lexing.position * string> UID
%token WITH
%type <string * Syntax.declaration list> phrase
%%

typevar:
  _1 = QUOTE _2 = LID
    {    ( _2 )}

typevars:
  _1 = typevar
    {    ( [ _1 ] )}
| _1 = typevars _2 = COMMA _3 = typevar
    {    ( _3 :: _1 )}

params:
  
    {    ( [] )}
| _1 = typevar
    {    ( [ _1 ] )}
| _1 = LPAREN _2 = typevars _3 = RPAREN
    {    ( List.rev _2 )}

params_and_set_current:
  _1 = params
    {    ( let params = _1 in
      current_params := params;
      params )}

identifier:
  _1 = LID
    {    ( _1 )}
| _1 = UID _2 = DOT _3 = identifier
    {    ( let (pos1, _, id1) = _1
      and (_, pos2, id2) = _3 in
      (pos1, pos2, id1 ^ "." ^ id2) )}

container:
  
    {    ( None )}
| _1 = identifier
    {    ( Some _1 )}

expfactor:
  _1 = ATOM _2 = LID
    {    ( EAtom _2 )}
| _1 = OCAML
    {    ( EEscape _1 )}
| _1 = params _2 = LID _3 = container
    {    ( ETypRef (_3, _1, _2) )}
| _1 = LANGLE _2 = params _3 = LID _4 = RANGLE
    {    ( EAbstraction (_2, _3) )}
| _1 = LANGLE _2 = LPAREN _3 = LID _4 = BINDS _5 = sorts _6 = RPAREN _7 = patrhs _8 = RANGLE
    {    ( inline_defs := DeclPatType (!current_params, _3, _5, _7) :: !inline_defs;
      EAbstraction (!current_params, _3) )}
| _1 = ATOM _2 = error
    {    ( error 2 "\"atom\" should be followed by a sort (a lowercase identifier)" )}
| _1 = LANGLE _2 = error
    {    ( error 2 "The contents of an abstraction should be either\n\
               a (possibly parameterized) pattern type identifier or\n\
               an inline pattern type definition." )}
| _1 = INNER
    {    ( error 1 "\"inner\" does not make sense in an expression type." )}
| _1 = OUTER
    {    ( error 1 "\"outer\" does not make sense in an expression type." )}
| _1 = NEUTRAL
    {    ( error 1 "\"neutral\" does not make sense in an expression type." )}
| _1 = error
    {    ( error 1 "Invalid expression factor." )}

patfactor:
  _1 = ATOM _2 = LID
    {    ( PAtom _2 )}
| _1 = OCAML
    {    ( PEscape _1 )}
| _1 = params _2 = LID _3 = container
    {    ( PTypRef (MRef, _3, _1, _2) )}
| _1 = patmodifier _2 = params _3 = LID _4 = container
    {    ( PTypRef (_1, _4, _2, _3) )}
| _1 = ATOM _2 = error
    {    ( error 2 "\"atom\" should be followed by a sort (a lowercase identifier)" )}
| _1 = patmodifier _2 = error
    {    ( error 2 "\"inner\", \"outer\", and \"neutral\" should be followed by a\n(possibly parameterized) type identifier." )}
| _1 = LANGLE
    {    ( error 1 "An abstraction does not make sense in a pattern type." )}
| _1 = error
    {    ( error 1 "Invalid pattern factor." )}

patmodifier:
  _1 = INNER
    {    ( MInner )}
| _1 = OUTER
    {    ( MOuter )}
| _1 = NEUTRAL
    {    ( MNeutral )}

expfactors:
  _1 = expfactor
    {    ( [ (None, _1) ] )}
| _1 = expfactors _2 = STAR _3 = expfactor
    {    ( (None, _3) :: _1 )}
| _1 = expfactors _2 = error
    {    ( error 2 "Undetermined syntax error." )}

patfactors:
  _1 = patfactor
    {    ( [ (None, _1) ] )}
| _1 = patfactors _2 = STAR _3 = patfactor
    {    ( (None, _3) :: _1 )}
| _1 = patfactors _2 = error
    {    ( error 2 "Undetermined syntax error." )}

explfactor:
  _1 = LID _2 = COLON _3 = expfactor
    {    ( (Some _1, _3) )}
| _1 = error
    {    ( error 1 "\"<label> : <expression factor>\" expected." )}

explfactors:
  _1 = explfactor
    {    ( [ _1 ] )}
| _1 = explfactors _2 = SEMICOLON _3 = explfactor
    {    ( _3 :: _1 )}
| _1 = explfactors _2 = error
    {    ( error 2 "\";\" or \"}\" expected." )}

patlfactor:
  _1 = LID _2 = COLON _3 = patfactor
    {    ( (Some _1, _3) )}
| _1 = error
    {    ( error 1 "\"<label> : <pattern factor>\" expected." )}

patlfactors:
  _1 = patlfactor
    {    ( [ _1 ] )}
| _1 = patlfactors _2 = SEMICOLON _3 = patlfactor
    {    ( _3 :: _1 )}
| _1 = patlfactors _2 = error
    {    ( error 2 "\";\" or \"}\" expected." )}

expsummand:
  _1 = BAR _2 = UID
    {    ( Summand (Some _2, []) )}
| _1 = BAR _2 = UID _3 = OF _4 = expfactors
    {    ( Summand (Some _2, List.rev _4) )}
| _1 = BAR _2 = error
    {    ( error 2 "\"| <uppercase identifier> [ of <expression factors> ]\" expected." )}

patsummand:
  _1 = BAR _2 = UID
    {    ( Summand (Some _2, []) )}
| _1 = BAR _2 = UID _3 = OF _4 = patfactors
    {    ( Summand (Some _2, List.rev _4) )}
| _1 = BAR _2 = error
    {    ( error 2 "\"| <uppercase identifier> [ of <pattern factors> ]\" expected." )}

expsummands:
  _1 = expsummand
    {    ( [ _1 ] )}
| _1 = expsummands _2 = expsummand
    {    ( _2 :: _1 )}

patsummands:
  _1 = patsummand
    {    ( [ _1 ] )}
| _1 = patsummands _2 = patsummand
    {    ( _2 :: _1 )}

sorts:
  _1 = LID
    {    ( [ _1 ] )}
| _1 = sorts _2 = COMMA _3 = LID
    {    ( _3 :: _1 )}

optional_semicolon:
  
    {    ( () )}
| _1 = SEMICOLON
    {    ( () )}

exprhs:
  _1 = expsummands
    {    ( List.rev _1 )}
| _1 = expfactors
    {    ( [ Summand (None, List.rev _1) ] )}
| _1 = LBRACE _2 = explfactors _3 = optional_semicolon _4 = RBRACE
    {    ( [ Summand (None, List.rev _2) ] )}

patrhs:
  _1 = patsummands
    {    ( List.rev _1 )}
| _1 = patfactors
    {    ( [ Summand (None, List.rev _1) ] )}
| _1 = LBRACE _2 = patlfactors _3 = RBRACE
    {    ( [ Summand (None, List.rev _2) ] )}

declaration:
  _1 = TYPE _2 = params_and_set_current _3 = LID _4 = EQUAL _5 = exprhs
    {    ( DeclExpType (_2, _3, _5) )}
| _1 = TYPE _2 = params_and_set_current _3 = LID _4 = BINDS _5 = sorts _6 = EQUAL _7 = patrhs
    {    ( DeclPatType (_2, _3, _5, _7) )}
| _1 = TYPE _2 = error
    {    ( error 2 "\"type [ <parameters> ] <identifier> [ binds <sorts> ] = <type definition>\"\nexpected." )}
| _1 = SORT _2 = LID
    {    ( DeclSort _2 )}
| _1 = SORT _2 = error
    {    ( error 2 "\"sort <identifier>\" expected." )}
| _1 = CONTAINER _2 = identifier _3 = WITH _4 = identifier _5 = AND _6 = identifier
    {    ( DeclContainer (_2, _4, _6) )}
| _1 = CONTAINER _2 = error
    {    ( error 2 "\"container <identifier> with <identifier> and <identifier>\" expected.\n\
               The three identifiers are the container type and its map and fold functions." )}
| _1 = IDENTIFIER _2 = MODULE _3 = UID
    {    ( DeclIdentifier _3 )}
| _1 = IDENTIFIER _2 = error
    {    ( error 2 "\"identifier module <uppercase identifier>\" expected." )}

declarations:
  
    {    ( [] )}
| _1 = declarations _2 = declaration
    {    ( _2 :: _1 )}

prologue:
  
    {    ( "\n\n" )}
| _1 = OCAML
    {    ( "\n\n(* Prologue. *)" ^ _1 )}

phrase:
  _1 = prologue _2 = declarations _3 = EOF
    {    ( _1, List.rev (!inline_defs @ _2) )}
| _1 = error
    {    ( error 1 "\"type\", \"sort\", \"container\",\nor \"identifier module\" declaration expected." )}

%%
