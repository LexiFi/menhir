%{
open Absyn;;
open Fixity;;
open Nstbl;;

type quantifier = QForall | QExists | QNew;;

let do_quantify q tvs e =
  let do_quantifier q (tv,st) e =
    match q with
      QForall -> Forall(tv,st,e)
    | QExists -> Exists(tv,st,e)
    | QNew -> New(tv,st,e)
  in
  List.fold_right (do_quantifier q) tvs e
;;

let do_literal' s t =
  let n = String.length s in
  let rec go i =
    if i = n then t
    else Cons(CharC(String.get s i), go (i+1))
  in go 0
;;

let do_literal s = do_literal' s Nil;;


type dcg_term = Nonterm of atomic | Char of char | Seq of dcg_term * dcg_term
              | Alt of dcg_term * dcg_term | Goal of term | Literal of string
;;


let translate_dcg (hd,tl) t =
  let rec tr t x y =
    match t with
      Char c -> Eq(Var x, Cons(CharC c, Var y))
    | Literal s -> Eq (Var x, do_literal' s (Var y))
    | Seq (t1,t2) ->
	let w = Var.mkvar "W" in
	And(tr t1 x w, tr t2 w y)
    | Alt(t1,t2) ->
	Or(tr t1 x y, tr t2 x y)
    | Goal(t) ->
	And(Eq(Var x,Var y), t)
    | Nonterm (hd,tl) ->
	Atomic(hd,tl@[Var x; Var y])
  in
  let x = Var.mkvar "X" in
  let y = Var.mkvar "Y" in
  Implies(tr t x y, Atomic(hd,tl@[Var x; Var y]))


let mk_toplevel_decl rdecl =
  {pos=None; rdecl = rdecl}
;;


let mk_decl rdecl =
  {pos=Some (Pos.mk_pos (Lineno.filename()) (Lineno.lineno())); rdecl=rdecl}
;;

exception Eof;;


let rec kd_app ks k =
  match ks with
    [] -> k
  | k'::ks -> ArrowK (k',kd_app ks k)
;;

let rec ty_app ts t =
  match ts with
    [] -> t
  | t'::ts -> ArrowTy (t',ty_app ts t)

%}
%start parse
%start parse_input_line
%token ARROW
%token BACKSLASH
%token BAR
%token <char> CHAR
%token CNST
%token COLON
%token COMMA
%token CONS
%token CUT
%token DARROW
%token DCG_ARROW
%token DOT
%token EOF
%token EQ
%token EXISTS
%token FORALL
%token FUNC
%token HASH
%token HELP
%token <string> ID
%token INFIXL
%token <string> INFIXL1
%token <string> INFIXL2
%token <string> INFIXL3
%token <string> INFIXL4
%token <string> INFIXL5
%token <string> INFIXL6
%token <string> INFIXL7
%token <string> INFIXL8
%token <string> INFIXL9
%token INFIXN
%token <string> INFIXN1
%token <string> INFIXN2
%token <string> INFIXN3
%token <string> INFIXN4
%token <string> INFIXN5
%token <string> INFIXN6
%token <string> INFIXN7
%token <string> INFIXN8
%token <string> INFIXN9
%token INFIXR
%token <string> INFIXR1
%token <string> INFIXR2
%token <string> INFIXR3
%token <string> INFIXR4
%token <string> INFIXR5
%token <string> INFIXR6
%token <string> INFIXR7
%token <string> INFIXR8
%token <string> INFIXR9
%token <int> INT
%token IS
%token LARROW
%token LBRACE
%token LBRACK
%token <string> LITERAL
%token LPAREN
%token NAMESPACE
%token NAME_TYPE
%token NEW
%token NOT
%token OPEN
%token PRED
%token <Nstbl.path> QUAL_ID
%token QUESTION
%token QUIT
%token RBRACE
%token RBRACK
%token RPAREN
%token SEMI
%token SLASH
%token TILDE
%token TRACE
%token TRUE
%token TYPE
%token TYPEQ
%token UNDERSCORE
%token USE
%right DOT
%left INFIXL1
%right INFIXR1
%nonassoc INFIXN1
%right ARROW DARROW
%left LARROW
%nonassoc SLASH
%nonassoc BAR
%left INFIXL2
%right INFIXR2
%nonassoc INFIXN2
%right SEMI
%left INFIXL3
%right INFIXR3
%nonassoc INFIXN3
%right COMMA
%left INFIXL4
%right INFIXR4
%nonassoc INFIXN4
%nonassoc EQ HASH IS
%left INFIXL5
%right INFIXR5
%nonassoc INFIXN5
%left INFIXL6
%right INFIXR6
%nonassoc INFIXN6
%right CONS
%left INFIXL7
%right INFIXR7
%nonassoc INFIXN7
%left INFIXL8
%right INFIXR8
%nonassoc INFIXN8
%left INFIXL9
%right INFIXR9
%nonassoc INFIXN9
%right BACKSLASH
%type <Absyn.decl list> parse
%type <Absyn.decl list> parse_input_line
%%

parse:
  _1 = decls _2 = EOF
    {                                        ( List.rev _1 )}

parse_input_line:
  _1 = goal_decl _2 = DOT
    {                                        ( [mk_toplevel_decl _1] )}
| _1 = EOF
    {                                        ( raise End_of_file )}

goal_decl:
  _1 = goal
    {                                        ( Query(_1) )}
| _1 = directive
    {                                        ( _1 )}
| _1 = infix_decl
    {                                        ( _1 )}

decls:
  _1 = decls _2 = decl _3 = DOT
    {                                        ( _2::_1 )}
| 
    {                                        ( [] )}

decl:
  _1 = sig_decl
    {                                        ( mk_decl _1)}
| _1 = prog
    {                                        ( mk_decl (ClauseDecl(_1)))}
| _1 = QUESTION _2 = goal
    {                                        ( mk_decl(Query(_2)))}
| _1 = directive
    {                                        ( mk_decl _1)}
| _1 = infix_decl
    {                                        ( mk_decl _1)}
| _1 = NAMESPACE _2 = ID _3 = LPAREN _4 = decls _5 = RPAREN
    {                                        ( mk_decl
					     (NamespaceDecl(_2,
							    List.rev _4))
					)}

sig_decl:
  _1 = ID _2 = COLON _3 = kind
    {                                        ( KindDecl(_1,_3) )}
| _1 = ID _2 = COLON _3 = ty
    {                                        ( SymDecl(_1,_3) )}
| _1 = PRED _2 = ID _3 = ty0s
    {                                        ( PredDecl(_2,List.rev _3) )}
| _1 = CNST _2 = ID _3 = EQ _4 = ty
    {                                        ( FuncDecl(_2,[],_4) )}
| _1 = FUNC _2 = ID _3 = ty0s _4 = EQ _5 = ty
    {                                        ( FuncDecl(_2,List.rev _3, _5) )}
| _1 = TYPE _2 = ID _3 = vars _4 = EQ _5 = ty
    {                                        ( let rvs = _3 in
                                          TypeDefn(_2,List.rev rvs,_5) )}

vars:
  
    {                                        ( [] )}
| _1 = vars _2 = ID
    {                                        ( Var.mkvar' _2::_1 )}

kind:
  _1 = TYPE
    {                                        ( TypeK )}
| _1 = NAME_TYPE
    {                                        ( NameK )}
| _1 = kind _2 = ARROW _3 = kind
    {                                        ( ArrowK(_1,_3) )}

directive:
  _1 = USE _2 = LITERAL
    {                                        ( UseDirective(_2) )}
| _1 = TRACE _2 = INT
    {                                        ( TraceDirective (_2) )}
| _1 = TYPEQ _2 = preterm
    {                                        ( TypeQuery(_2) )}
| _1 = QUIT
    {                                 ( QuitDirective )}
| _1 = OPEN _2 = qual_id
    {                                 ( OpenDirective _2 )}
| _1 = HELP
    {                                 ( HelpDirective(None) )}

infix_decl:
  _1 = INFIXN _2 = ID _3 = INT
    {                                        ( add_sym _2 _3 Non;
			                  InfixDecl(Non,_2,_3) )}
| _1 = INFIXL _2 = ID _3 = INT
    {                                 ( add_sym _2 _3 Left;
			                  InfixDecl(Left,_2,_3) )}
| _1 = INFIXR _2 = ID _3 = INT
    {                                 ( add_sym _2 _3 Right;
			                  InfixDecl(Right,_2,_3) )}

prog:
  _1 = preterm
    {                                       ( _1 )}
| _1 = dcg_rule
    {                                ( _1 )}

dcg_rule:
  _1 = app_or_qid _2 = DCG_ARROW _3 = dcg_term
    {                                       ( translate_dcg _1 _3 )}
| _1 = app_or_qid _2 = DCG_ARROW _3 = dcg_term _4 = SLASH _5 = constr
    {                                       ( Constr(translate_dcg _1 _3,_5) )}

dcg_term:
  _1 = LBRACE _2 = preterm _3 = RBRACE
    {                                       ( Goal _2 )}
| _1 = dcg_term _2 = COMMA _3 = dcg_term
    {                                ( Seq (_1,_3) )}
| _1 = dcg_term _2 = SEMI _3 = dcg_term
    {                                ( Alt(_1,_3) )}
| _1 = app_or_qid
    {                                ( Nonterm(_1) )}
| _1 = CHAR
    {                                ( Char _1 )}
| _1 = LITERAL
    {                                ( Literal _1 )}

goal:
  _1 = preterm
    {                                       ( _1 )}

quantifier:
  _1 = FORALL
    {                                       ( QForall )}
| _1 = EXISTS
    {                                       ( QExists )}
| _1 = NEW
    {                                       ( QNew )}

qv:
  _1 = ID
    {                                        ( (Var.mkvar' _1,UnderscoreTy) )}
| _1 = ID _2 = COLON _3 = ty
    {                                        ( (Var.mkvar' _1,_3) )}

qlist:
  _1 = qv
    {                                        ( [_1] )}
| _1 = qlist _2 = COMMA _3 = qv
    {                                        ( _3::_1 )}

const:
  _1 = UNDERSCORE
    {                                        ( Underscore )}
| _1 = CUT
    {                                        ( Cut )}
| _1 = TRUE
    {                                        ( True )}
| _1 = LBRACK _2 = RBRACK
    {                                        ( Nil )}
| _1 = LPAREN _2 = RPAREN
    {                                        ( Unit )}
| _1 = INT
    {                                        ( IntC _1 )}
| _1 = LITERAL
    {                                        ( do_literal _1 )}
| _1 = CHAR
    {                                        ( CharC _1 )}

qual_id:
  _1 = QUAL_ID
    {                                        ( _1 )}
| _1 = ID
    {                                        ( Rel(Base(_1)) )}

preterm0:
  _1 = LPAREN _2 = preterm _3 = RPAREN
    {                                        ( _2 )}
| _1 = qual_id
    {                                        ( Atomic(_1,[]) )}
| _1 = const
    {                                        ( _1 )}
| _1 = LBRACK _2 = preterms_brack _3 = RBRACK
    {                                        ( List.fold_right
					    (fun x y ->
					      Cons(x,y))
					    (List.rev _2) Nil )}
| _1 = LBRACK _2 = preterms_brack _3 = BAR _4 = preterm_brack _5 = RBRACK
    {                                        ( List.fold_right
					    (fun x y ->
					      Cons(x,y))
					    (List.rev _2) _4 )}
| _1 = LPAREN _2 = ID _3 = TILDE _4 = ID _5 = RPAREN _6 = preterm0
    {                                        ( Transpose(Var.mkvar' _2,
						    Var.mkvar' _4,_6) )}

constr:
  _1 = ID _2 = HASH _3 = ID
    {                                        ( [(Var.mkvar' _1,Var.mkvar' _3)] )}
| _1 = constr _2 = COMMA _3 = ID _4 = HASH _5 = ID
    {                                        ( (Var.mkvar' _3,Var.mkvar' _5)::_1 )}

preterm:
  _1 = quantifier _2 = qlist _3 = DOT _4 = preterm
    {                                        ( do_quantify _1 (List.rev _2) _4 )}
| _1 = ID _2 = BACKSLASH _3 = preterm
    {                                        ( Abs (Var.mkvar' _1,_3) )}
| _1 = preterm _2 = ARROW _3 = preterm _4 = BAR _5 = preterm
    {                                        ( Guard(_1,_3,_5) )}
| _1 = preterm _2 = LARROW _3 = preterm
    {                                        ( Implies (_3,_1) )}
| _1 = preterm _2 = COMMA _3 = preterm
    {                                        ( Pair(_1,_3) )}
| _1 = preterm _2 = SEMI _3 = preterm
    {                                        ( Or(_1,_3) )}
| _1 = preterm _2 = SLASH _3 = constr
    {                                        ( Constr(_1,_3) )}
| _1 = preterm _2 = HASH _3 = preterm
    {                                        ( Fresh(_1,_3) )}
| _1 = preterm _2 = EQ _3 = preterm
    {                                        ( Eq(_1,_3) )}
| _1 = preterm _2 = IS _3 = preterm
    {                                        ( Is(_1,_3) )}
| _1 = preterm _2 = DARROW _3 = preterm
    {                                        ( Implies(_1,_3) )}
| _1 = preterm _2 = CONS _3 = preterm
    {                                        ( Cons(_1,_3) )}
| _1 = NOT _2 = preterm0
    {                                        ( Not(_2) )}
| _1 = infixl_preterm
    {                                        ( _1 )}
| _1 = infixr_preterm
    {                                        ( _1 )}
| _1 = infixn_preterm
    {                                        ( _1 )}
| _1 = app
    {                                        ( let (h,tl) = _1 in
                                          Atomic(h,List.rev tl) )}
| _1 = preterm0
    {                                        (_1)}

preterm_brack:
  _1 = ID _2 = BACKSLASH _3 = preterm_brack
    {                                        ( Abs (Var.mkvar' _1,_3))}
| _1 = preterm_brack _2 = CONS _3 = preterm_brack
    {                                        ( Cons(_1,_3) )}
| _1 = app
    {                                        ( let (h,tl) = _1 in
                                          Atomic(h,List.rev tl) )}
| _1 = preterm0
    {                                        ( _1 )}

preterms_brack:
  _1 = preterm_brack
    {                                        ( [_1] )}
| _1 = preterms_brack _2 = COMMA _3 = preterm_brack
    {                                        ( _3::_1 )}

infixl_preterm:
  _1 = preterm _2 = INFIXL1 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL2 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL3 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL4 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL5 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL6 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL7 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL8 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXL9 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}

infixr_preterm:
  _1 = preterm _2 = INFIXR1 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR2 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR3 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR4 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR5 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR6 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR7 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR8 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXR9 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}

infixn_preterm:
  _1 = preterm _2 = INFIXN1 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN2 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN3 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN4 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN5 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN6 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN7 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN8 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}
| _1 = preterm _2 = INFIXN9 _3 = preterm
    {                                        ( Atomic(Rel(Base _2),[_1;_3]) )}

app:
  _1 = qual_id _2 = preterm0
    {                                        ( (_1,[_2]) )}
| _1 = app _2 = preterm0
    {                                        ( let (h,tl) = _1 in
                                          (h,_2::tl) )}

app_or_qid:
  _1 = app
    {                                        ( let (hd,tl) = _1 in
	                                  (hd,List.rev tl) )}
| _1 = qual_id
    {                                        ( (_1,[]) )}

tyapp:
  _1 = qual_id _2 = ty0
    {                                        ( (_1,[_2]) )}
| _1 = tyapp _2 = ty0
    {                                        ( let (ds,ss) = _1 in
                                          (ds,_2::ss) )}

ty:
  _1 = ty _2 = ARROW _3 = ty
    {                                        ( ArrowTy(_1,_3) )}
| _1 = tyapp
    {                                        ( let ds,ss = _1 in
                                          DataTy(ds,List.rev ss) )}
| _1 = ty _2 = BACKSLASH _3 = ty
    {                                        ( AbsTy(_1,_3) )}
| _1 = ty0
    {                                        ( _1 )}

comma_tys:
  _1 = ty
    {                                        ( _1 )}
| _1 = ty _2 = COMMA _3 = comma_tys
    {                                        ( PairTy(_1,_3) )}

ty0:
  _1 = LPAREN _2 = comma_tys _3 = RPAREN
    {                                        ( _2 )}
| _1 = UNDERSCORE
    {                                        ( UnderscoreTy )}
| _1 = qual_id
    {                                        ( IdTy(_1) )}
| _1 = LBRACK _2 = ty _3 = RBRACK
    {                                        ( ListTy _2 )}
| _1 = LPAREN _2 = RPAREN
    {                                        ( UnitTy )}

ty0s:
  _1 = ty0s _2 = ty0
    {                                        ( _2 :: _1 )}
| 
    {                                        ( [] )}

%%
