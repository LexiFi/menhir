%{
  open Io_types ;;
  open Io_messages ;;
  open Io_parser_state ;;
  let unpos = snd
  let pos = fst
  let ct1 = fun c (cs, bs) -> (c::cs, bs)
  let ct2 = fun b (cs, bs) -> (cs, b::bs)
  let parse_error = function msg ->
    raise (Io_module_error (Io_parser_error !last_pos))

%}
%start parse_io_module
%token Lcolon
%token <Io_types.pos> Ldeclare
%token Lend
%token <Io_types.pos> Lexport
%token <Io_types.pos> Lgetvar
%token <Io_types.pos * string> Lident
%token <Io_types.pos> Limport
%token <Io_types.pos * int> Lint
%token <Io_types.pos> Llambda
%token Llpar
%token Lperiod
%token <Io_types.pos> Lprimitive
%token <Io_types.pos> Lputvar
%token Lrpar
%token Lsemi
%token <Io_types.pos * string> Lstring
%token <Io_types.pos> Lvariable
%type <Io_types.io_ast> parse_io_module
%%

parse_io_module:
  _1 = imports _2 = export _3 = decll _4 = expr _5 = Lend
    {                                               ( (_1,_2,_3,_4) )}

imports:
  _1 = Limport _2 = Lident _3 = importlist _4 = Lperiod _5 = imports
    {                                               ( last_pos := pos _2;(String.lowercase (unpos _2), _3)::_5 )}
| 
    {                                               ( [] )}

importlist:
  _1 = Lcolon _2 = idlist
    {                                               ( Some _2 )}
| 
    {                                               ( None )}

export:
  _1 = Lexport _2 = idlist _3 = Lperiod
    {                                               ( _2 )}
| 
    {                                               ( [] )}

decll:
  _1 = Ldeclare _2 = Lident _3 = Lcolon _4 = eatom _5 = Lperiod _6 = decll
    {                                                  ( last_pos := pos _2;ct1 (_1,unpos _2,_4) _6 )}
| _1 = Lprimitive _2 = Lident _3 = Lcolon _4 = Lident _5 = Lperiod _6 = decll
    {                                                  ( last_pos := pos _2;ct1 (_1,unpos _2,Eprimitive (unpos _4)) _6 )}
| _1 = Lvariable _2 = Lident _3 = Lcolon _4 = eatom _5 = Lperiod _6 = decll
    {                                                  ( last_pos := pos _2;ct2 (_1,unpos _2,_4) _6 )}
| 
    {                                                  ( ([], []) )}

expr:
  _1 = Lident _2 = paramlist
    {                                               ( Eappl (pos _1, unpos _1, _2, EFall) )}
| _1 = Lident
    {                                               ( Eid (pos _1, unpos _1) )}
| _1 = Lident _2 = Lputvar _3 = patom _4 = stmttail
    {                                               ( Eputvar (pos _1, unpos _1, _3, _4, EFall) )}
| _1 = Lident _2 = Lgetvar _3 = Lident _4 = stmttail
    {                                               ( Egetvar (pos _1, unpos _1, unpos _3, _4, EFall) )}
| _1 = stmt
    {                                               ( _1 )}

paramlist:
  _1 = patom _2 = paramlisttail
    {                                               ( _1::_2 )}
| _1 = Lsemi _2 = eatom
    {                                               ( [_2]   )}
| _1 = stmt
    {                                               ( [_1] )}

paramlisttail:
  _1 = patom _2 = paramlisttail
    {                                               ( _1::_2 )}
| _1 = Lsemi _2 = eatom
    {                                               ( [_2]   )}
| _1 = stmt
    {                                               ( [_1] )}
| 
    {                                               ( [] )}

stmt:
  _1 = Llambda _2 = idlist _3 = stmttail
    {                                               ( Elambda (_1,_2,_3,EFall) )}

stmttail:
  _1 = Lsemi _2 = eatom
    {                                               ( _2 )}
| _1 = atom
    {                                               ( _1 )}

idlist:
  _1 = Lident _2 = idlist
    {                                               ( last_pos := pos _1;(unpos _1)::_2 )}
| 
    {                                               ( [] )}

eatom:
  _1 = expr
    {                                               ( _1 )}
| _1 = atom
    {                                               ( _1 )}

patom:
  _1 = Lident
    {                                               ( last_pos := pos _1; Eid (pos _1,unpos _1) )}
| _1 = atom
    {                                               ( _1 )}

atom:
  _1 = Lint
    {                                               ( last_pos := pos _1; Eint (pos _1,unpos _1) )}
| _1 = Lstring
    {                                               ( last_pos := pos _1; Estring (pos _1,unpos _1) )}
| _1 = Llpar _2 = expr _3 = Lrpar
    {                                               ( _2 )}

%%
