State 0:
## Known stack suffix:
##
## LR(1) items:
commandline' -> . commandline [ # ]
## Transitions:
-- On WITH shift to state 1
-- On VERBOSITY shift to state 536
-- On TRY shift to state 3
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 647
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On INCLUDE shift to state 651
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On top_term_ shift to state 667
-- On top_term shift to state 690
-- On top_command_ shift to state 670
-- On top_command shift to state 694
-- On term_ shift to state 358
-- On term shift to state 674
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(top_term_) shift to state 676
-- On mark_location(top_command_) shift to state 677
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On commandline shift to state 697
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 1:
## Known stack suffix:
## WITH
## LR(1) items:
term_ -> WITH . term TRY term [ SEMISEMI EOF END ]
top_command_ -> WITH . top_operation_cases END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OPERATION shift to state 514
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BAR shift to state 527
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On top_operation_cases shift to state 532
-- On top_operation_case shift to state 528
-- On term_ shift to state 358
-- On term shift to state 511
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On separated_nonempty_list(BAR,top_operation_case) shift to state 534
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On loption(separated_nonempty_list(BAR,top_operation_case)) shift to state 535
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:
-- On END reduce production loption(separated_nonempty_list(BAR,top_operation_case)) ->

State 2:
## Known stack suffix:
## WITH
## LR(1) items:
term_ -> WITH . term TRY term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 511
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 3:
## Known stack suffix:
## TRY
## LR(1) items:
term_ -> TRY . term WITH handler_cases END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 507
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 4:
## Known stack suffix:
## REF
## LR(1) items:
prefix_term_ -> REF . prefix_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 22
-- On prefix_term shift to state 506
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(prefix_term_) shift to state 46
-- On any_name shift to state 47
## Reductions:

State 5:
## Known stack suffix:
## QUOTED_STRING
## LR(1) items:
simple_term_ -> QUOTED_STRING . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_term_ -> QUOTED_STRING

State 6:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
prefix_term_ -> PREFIXOP . prefix_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 22
-- On prefix_term shift to state 497
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(prefix_term_) shift to state 46
-- On any_name shift to state 47
## Reductions:

State 7:
## Known stack suffix:
## NATURAL
## LR(1) items:
prefix_term_ -> NATURAL . prefix_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 22
-- On prefix_term shift to state 505
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(prefix_term_) shift to state 46
-- On any_name shift to state 47
## Reductions:

State 8:
## Known stack suffix:
## NAME
## LR(1) items:
module_name -> NAME . [ PERIOD ]
tt_name -> NAME . [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production tt_name -> NAME
-- On VERBOSITY reduce production tt_name -> NAME
-- On TYPE reduce production tt_name -> NAME
-- On TRY reduce production tt_name -> NAME
-- On STAR reduce production tt_name -> NAME
-- On SEMISEMI reduce production tt_name -> NAME
-- On SEMI reduce production tt_name -> NAME
-- On RULE reduce production tt_name -> NAME
-- On RPAREN reduce production tt_name -> NAME
-- On REQUIRE reduce production tt_name -> NAME
-- On REF reduce production tt_name -> NAME
-- On RBRACK reduce production tt_name -> NAME
-- On RBRACE reduce production tt_name -> NAME
-- On QUOTED_STRING reduce production tt_name -> NAME
-- On PREFIXOP reduce production tt_name -> NAME
-- On PERIOD reduce production module_name -> NAME
-- On OPERATION reduce production tt_name -> NAME
-- On OPEN reduce production tt_name -> NAME
-- On NATURAL reduce production tt_name -> NAME
-- On NAME reduce production tt_name -> NAME
-- On MODULE reduce production tt_name -> NAME
-- On MLTYPE reduce production tt_name -> NAME
-- On LPAREN reduce production tt_name -> NAME
-- On LET reduce production tt_name -> NAME
-- On LBRACK reduce production tt_name -> NAME
-- On LBRACE reduce production tt_name -> NAME
-- On INFIXOP4 reduce production tt_name -> NAME
-- On INFIXOP3 reduce production tt_name -> NAME
-- On INFIXOP2 reduce production tt_name -> NAME
-- On INFIXOP1 reduce production tt_name -> NAME
-- On INFIXOP0 reduce production tt_name -> NAME
-- On INFIXCONS reduce production tt_name -> NAME
-- On INCLUDE reduce production tt_name -> NAME
-- On IN reduce production tt_name -> NAME
-- On EXTERNAL reduce production tt_name -> NAME
-- On EXCEPTION reduce production tt_name -> NAME
-- On EQEQ reduce production tt_name -> NAME
-- On EQ reduce production tt_name -> NAME
-- On EOF reduce production tt_name -> NAME
-- On END reduce production tt_name -> NAME
-- On COMMA reduce production tt_name -> NAME
-- On COLONQT reduce production tt_name -> NAME
-- On COLONGT reduce production tt_name -> NAME
-- On COLONEQ reduce production tt_name -> NAME
-- On COLON reduce production tt_name -> NAME
-- On BY reduce production tt_name -> NAME
-- On BAR reduce production tt_name -> NAME
-- On BANG reduce production tt_name -> NAME
-- On ARROW reduce production tt_name -> NAME
-- On AND reduce production tt_name -> NAME

State 9:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_term_ -> LPAREN . term COLONGT ml_schema RPAREN [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
simple_term_ -> LPAREN . loption(separated_nonempty_list(COMMA,term)) RPAREN [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXCONS RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . EQ RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP0 RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP1 RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP2 RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP3 RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . STAR RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP4 RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . PREFIXOP RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On STAR shift to state 10
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 496
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On INFIXOP4 shift to state 29
-- On INFIXOP3 shift to state 31
-- On INFIXOP2 shift to state 33
-- On INFIXOP1 shift to state 35
-- On INFIXOP0 shift to state 37
-- On INFIXCONS shift to state 39
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On EQ shift to state 41
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 498
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On separated_nonempty_list(COMMA,term) shift to state 502
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On loption(separated_nonempty_list(COMMA,term)) shift to state 503
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,term)) ->

State 10:
## Known stack suffix:
## LPAREN STAR
## LR(1) items:
tt_name -> LPAREN STAR . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## LPAREN STAR RPAREN
## LR(1) items:
tt_name -> LPAREN STAR RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN STAR RPAREN

State 12:
## Known stack suffix:
## RAISE
## LR(1) items:
app_term_ -> RAISE . substitution_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 495
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 13:
## Known stack suffix:
## LBRACK
## LR(1) items:
simple_term_ -> LBRACK . list_contents RBRACK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
simple_term_ -> LBRACK . RBRACK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RBRACK shift to state 14
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On list_contents shift to state 489
-- On binop_term_ shift to state 175
-- On binop_term shift to state 491
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 14:
## Known stack suffix:
## LBRACK RBRACK
## LR(1) items:
simple_term_ -> LBRACK RBRACK . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_term_ -> LBRACK RBRACK

State 15:
## Known stack suffix:
## QQMARK
## LR(1) items:
binop_term_ -> QQMARK . TYPE [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> QQMARK . COLON app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On TYPE shift to state 16
-- On COLON shift to state 17
## Reductions:

State 16:
## Known stack suffix:
## QQMARK TYPE
## LR(1) items:
binop_term_ -> QQMARK TYPE . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_term_ -> QQMARK TYPE

State 17:
## Known stack suffix:
## QQMARK COLON
## LR(1) items:
binop_term_ -> QQMARK COLON . app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 488
-- On any_name shift to state 47
## Reductions:

State 18:
## Known stack suffix:
## OCCURS
## LR(1) items:
app_term_ -> OCCURS . substitution_term substitution_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 49
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 19:
## Known stack suffix:
## BANG
## LR(1) items:
prefix_term_ -> BANG . prefix_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 22
-- On prefix_term shift to state 23
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(prefix_term_) shift to state 46
-- On any_name shift to state 47
## Reductions:

State 20:
## Known stack suffix:
## tt_name
## LR(1) items:
any_name -> tt_name . [ WITH VERBOSITY UNDERSCORE UATOM TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production any_name -> tt_name

State 21:
## Known stack suffix:
## simple_term_
## LR(1) items:
prefix_term_ -> simple_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_term_ -> simple_term_

State 22:
## Known stack suffix:
## prefix_term_
## LR(1) items:
mark_location(prefix_term_) -> prefix_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(prefix_term_) -> prefix_term_

State 23:
## Known stack suffix:
## BANG prefix_term
## LR(1) items:
prefix_term_ -> BANG prefix_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_term_ -> BANG prefix_term

State 24:
## Known stack suffix:
## module_path
## LR(1) items:
module_path -> module_path . PERIOD module_name [ PERIOD ]
simple_term_ -> module_path . PERIOD any_name [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On PERIOD shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## module_path PERIOD
## LR(1) items:
module_path -> module_path PERIOD . module_name [ PERIOD ]
simple_term_ -> module_path PERIOD . any_name [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On NAME shift to state 8
-- On LPAREN shift to state 26
-- On tt_name shift to state 20
-- On module_name shift to state 43
-- On any_name shift to state 44
## Reductions:

State 26:
## Known stack suffix:
## LPAREN
## LR(1) items:
tt_name -> LPAREN . INFIXCONS RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . EQ RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP0 RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP1 RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP2 RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP3 RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . STAR RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . INFIXOP4 RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
tt_name -> LPAREN . PREFIXOP RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On STAR shift to state 10
-- On PREFIXOP shift to state 27
-- On INFIXOP4 shift to state 29
-- On INFIXOP3 shift to state 31
-- On INFIXOP2 shift to state 33
-- On INFIXOP1 shift to state 35
-- On INFIXOP0 shift to state 37
-- On INFIXCONS shift to state 39
-- On EQ shift to state 41
## Reductions:

State 27:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
tt_name -> LPAREN PREFIXOP . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## LPAREN PREFIXOP RPAREN
## LR(1) items:
tt_name -> LPAREN PREFIXOP RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN PREFIXOP RPAREN

State 29:
## Known stack suffix:
## LPAREN INFIXOP4
## LR(1) items:
tt_name -> LPAREN INFIXOP4 . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## LPAREN INFIXOP4 RPAREN
## LR(1) items:
tt_name -> LPAREN INFIXOP4 RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN INFIXOP4 RPAREN

State 31:
## Known stack suffix:
## LPAREN INFIXOP3
## LR(1) items:
tt_name -> LPAREN INFIXOP3 . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## LPAREN INFIXOP3 RPAREN
## LR(1) items:
tt_name -> LPAREN INFIXOP3 RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN INFIXOP3 RPAREN

State 33:
## Known stack suffix:
## LPAREN INFIXOP2
## LR(1) items:
tt_name -> LPAREN INFIXOP2 . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LPAREN INFIXOP2 RPAREN
## LR(1) items:
tt_name -> LPAREN INFIXOP2 RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN INFIXOP2 RPAREN

State 35:
## Known stack suffix:
## LPAREN INFIXOP1
## LR(1) items:
tt_name -> LPAREN INFIXOP1 . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LPAREN INFIXOP1 RPAREN
## LR(1) items:
tt_name -> LPAREN INFIXOP1 RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN INFIXOP1 RPAREN

State 37:
## Known stack suffix:
## LPAREN INFIXOP0
## LR(1) items:
tt_name -> LPAREN INFIXOP0 . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## LPAREN INFIXOP0 RPAREN
## LR(1) items:
tt_name -> LPAREN INFIXOP0 RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN INFIXOP0 RPAREN

State 39:
## Known stack suffix:
## LPAREN INFIXCONS
## LR(1) items:
tt_name -> LPAREN INFIXCONS . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LPAREN INFIXCONS RPAREN
## LR(1) items:
tt_name -> LPAREN INFIXCONS RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN INFIXCONS RPAREN

State 41:
## Known stack suffix:
## LPAREN EQ
## LR(1) items:
tt_name -> LPAREN EQ . RPAREN [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## LPAREN EQ RPAREN
## LR(1) items:
tt_name -> LPAREN EQ RPAREN . [ WITH VERBOSITY UNDERSCORE TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> LPAREN EQ RPAREN

State 43:
## Known stack suffix:
## module_path PERIOD module_name
## LR(1) items:
module_path -> module_path PERIOD module_name . [ PERIOD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_path -> module_path PERIOD module_name

State 44:
## Known stack suffix:
## module_path PERIOD any_name
## LR(1) items:
simple_term_ -> module_path PERIOD any_name . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_term_ -> module_path PERIOD any_name

State 45:
## Known stack suffix:
## module_name
## LR(1) items:
module_path -> module_name . [ PERIOD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_path -> module_name

State 46:
## Known stack suffix:
## mark_location(prefix_term_)
## LR(1) items:
prefix_term -> mark_location(prefix_term_) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_term -> mark_location(prefix_term_)

State 47:
## Known stack suffix:
## any_name
## LR(1) items:
simple_term_ -> any_name . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_term_ -> any_name

State 48:
## Known stack suffix:
## substitution_term_
## LR(1) items:
mark_location(substitution_term_) -> substitution_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(substitution_term_) -> substitution_term_

State 49:
## Known stack suffix:
## OCCURS substitution_term
## LR(1) items:
app_term_ -> OCCURS substitution_term . substitution_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ REF QUOTED_STRING PREFIXOP NATURAL NAME LPAREN LBRACK LBRACE BANG ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 50
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 487
-- On substitution shift to state 133
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 50:
## Known stack suffix:
## LBRACE
## LR(1) items:
substitution -> LBRACE . separated_nonempty_list(COMMA,term) RBRACE [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 482
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On separated_nonempty_list(COMMA,term) shift to state 485
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 51:
## Known stack suffix:
## MATCH
## LR(1) items:
term_ -> MATCH . term WITH match_cases END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 470
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 52:
## Known stack suffix:
## LET
## LR(1) items:
term_ -> LET . separated_nonempty_list(AND,let_clause) IN term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
term_ -> LET . REC separated_nonempty_list(AND,recursive_clause) IN term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 53
-- On REC shift to state 428
-- On NAME shift to state 118
-- On LPAREN shift to state 443
-- On LBRACK shift to state 446
-- On separated_nonempty_list(AND,let_clause) shift to state 449
-- On ml_name shift to state 452
-- On mark_location(let_pattern_) shift to state 461
-- On let_pattern_ shift to state 462
-- On let_pattern shift to state 463
-- On let_clause shift to state 467
## Reductions:

State 53:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
let_clause -> UNDERSCORE . let_annotation EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
let_clause -> UNDERSCORE . COLON app_term EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On COLONGT shift to state 54
-- On COLON shift to state 129
-- On let_annotation shift to state 425
## Reductions:
-- On EQ reduce production let_annotation ->

State 54:
## Known stack suffix:
## COLONGT
## LR(1) items:
let_annotation -> COLONGT . ml_schema [ EQ ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLFORALL shift to state 116
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 125
-- On ml_schema_ shift to state 126
-- On ml_schema shift to state 127
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(ml_schema_) shift to state 128
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 55:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_mlty_ -> UNDERSCORE . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> UNDERSCORE

State 56:
## Known stack suffix:
## REF
## LR(1) items:
app_mlty_ -> REF . simple_mlty [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 91
-- On simple_mlty shift to state 115
-- On module_path shift to state 94
-- On module_name shift to state 45
-- On ml_name shift to state 97
-- On mark_location(simple_mlty_) shift to state 98
## Reductions:

State 57:
## Known stack suffix:
## NAME
## LR(1) items:
ml_name -> NAME . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
module_name -> NAME . [ PERIOD ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> NAME
-- On WHEN reduce production ml_name -> NAME
-- On VERBOSITY reduce production ml_name -> NAME
-- On UNDERSCORE reduce production ml_name -> NAME
-- On UATOM reduce production ml_name -> NAME
-- On TYPE reduce production ml_name -> NAME
-- On STAR reduce production ml_name -> NAME
-- On SEMISEMI reduce production ml_name -> NAME
-- On SEMI reduce production ml_name -> NAME
-- On RULE reduce production ml_name -> NAME
-- On RPAREN reduce production ml_name -> NAME
-- On REQUIRE reduce production ml_name -> NAME
-- On RBRACK reduce production ml_name -> NAME
-- On RBRACE reduce production ml_name -> NAME
-- On QUOTED_STRING reduce production ml_name -> NAME
-- On QQMARK reduce production ml_name -> NAME
-- On PREFIXOP reduce production ml_name -> NAME
-- On PERIOD reduce production module_name -> NAME
-- On OPERATION reduce production ml_name -> NAME
-- On OPEN reduce production ml_name -> NAME
-- On NAME reduce production ml_name -> NAME
-- On MODULE reduce production ml_name -> NAME
-- On MLUNIT reduce production ml_name -> NAME
-- On MLTYPE reduce production ml_name -> NAME
-- On MLSTRING reduce production ml_name -> NAME
-- On MLJUDGEMENT reduce production ml_name -> NAME
-- On MLDERIVATION reduce production ml_name -> NAME
-- On MLBOUNDARY reduce production ml_name -> NAME
-- On LPAREN reduce production ml_name -> NAME
-- On LET reduce production ml_name -> NAME
-- On LBRACK reduce production ml_name -> NAME
-- On INFIXOP4 reduce production ml_name -> NAME
-- On INFIXOP3 reduce production ml_name -> NAME
-- On INFIXOP2 reduce production ml_name -> NAME
-- On INFIXOP1 reduce production ml_name -> NAME
-- On INFIXOP0 reduce production ml_name -> NAME
-- On INFIXCONS reduce production ml_name -> NAME
-- On INCLUDE reduce production ml_name -> NAME
-- On EXTERNAL reduce production ml_name -> NAME
-- On EXCEPTION reduce production ml_name -> NAME
-- On EQEQ reduce production ml_name -> NAME
-- On EQ reduce production ml_name -> NAME
-- On EOF reduce production ml_name -> NAME
-- On END reduce production ml_name -> NAME
-- On DARROW reduce production ml_name -> NAME
-- On COMMA reduce production ml_name -> NAME
-- On COLONGT reduce production ml_name -> NAME
-- On COLON reduce production ml_name -> NAME
-- On BY reduce production ml_name -> NAME
-- On BAR reduce production ml_name -> NAME
-- On AS reduce production ml_name -> NAME
-- On ARROW reduce production ml_name -> NAME
-- On AND reduce production ml_name -> NAME

State 58:
## Known stack suffix:
## MLUNIT
## LR(1) items:
simple_mlty_ -> MLUNIT . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> MLUNIT

State 59:
## Known stack suffix:
## MLSTRING
## LR(1) items:
simple_mlty_ -> MLSTRING . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> MLSTRING

State 60:
## Known stack suffix:
## MLJUDGEMENT
## LR(1) items:
simple_mlty_ -> MLJUDGEMENT . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> MLJUDGEMENT

State 61:
## Known stack suffix:
## MLDERIVATION
## LR(1) items:
simple_mlty_ -> MLDERIVATION . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> MLDERIVATION

State 62:
## Known stack suffix:
## MLBOUNDARY
## LR(1) items:
simple_mlty_ -> MLBOUNDARY . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> MLBOUNDARY

State 63:
## Known stack suffix:
## LPAREN
## LR(1) items:
ml_name -> LPAREN . INFIXCONS RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . EQ RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . STAR RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
ml_name -> LPAREN . PREFIXOP RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
simple_mlty_ -> LPAREN . mlty_ RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On STAR shift to state 64
-- On REF shift to state 56
-- On PREFIXOP shift to state 66
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On INFIXOP4 shift to state 68
-- On INFIXOP3 shift to state 70
-- On INFIXOP2 shift to state 72
-- On INFIXOP1 shift to state 74
-- On INFIXOP0 shift to state 76
-- On INFIXCONS shift to state 78
-- On EQ shift to state 80
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 113
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 64:
## Known stack suffix:
## LPAREN STAR
## LR(1) items:
ml_name -> LPAREN STAR . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## LPAREN STAR RPAREN
## LR(1) items:
ml_name -> LPAREN STAR RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN STAR RPAREN

State 66:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
ml_name -> LPAREN PREFIXOP . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## LPAREN PREFIXOP RPAREN
## LR(1) items:
ml_name -> LPAREN PREFIXOP RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN PREFIXOP RPAREN

State 68:
## Known stack suffix:
## LPAREN INFIXOP4
## LR(1) items:
ml_name -> LPAREN INFIXOP4 . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## LPAREN INFIXOP4 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP4 RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN INFIXOP4 RPAREN

State 70:
## Known stack suffix:
## LPAREN INFIXOP3
## LR(1) items:
ml_name -> LPAREN INFIXOP3 . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## LPAREN INFIXOP3 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP3 RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN INFIXOP3 RPAREN

State 72:
## Known stack suffix:
## LPAREN INFIXOP2
## LR(1) items:
ml_name -> LPAREN INFIXOP2 . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## LPAREN INFIXOP2 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP2 RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN INFIXOP2 RPAREN

State 74:
## Known stack suffix:
## LPAREN INFIXOP1
## LR(1) items:
ml_name -> LPAREN INFIXOP1 . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## LPAREN INFIXOP1 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP1 RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN INFIXOP1 RPAREN

State 76:
## Known stack suffix:
## LPAREN INFIXOP0
## LR(1) items:
ml_name -> LPAREN INFIXOP0 . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## LPAREN INFIXOP0 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP0 RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN INFIXOP0 RPAREN

State 78:
## Known stack suffix:
## LPAREN INFIXCONS
## LR(1) items:
ml_name -> LPAREN INFIXCONS . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## LPAREN INFIXCONS RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXCONS RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN INFIXCONS RPAREN

State 80:
## Known stack suffix:
## LPAREN EQ
## LR(1) items:
ml_name -> LPAREN EQ . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On RPAREN shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## LPAREN EQ RPAREN
## LR(1) items:
ml_name -> LPAREN EQ RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> LPAREN EQ RPAREN

State 82:
## Known stack suffix:
## simple_mlty_
## LR(1) items:
app_mlty_ -> simple_mlty_ . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_mlty_ -> simple_mlty_

State 83:
## Known stack suffix:
## separated_nonempty_list(STAR,app_mlty)
## LR(1) items:
prod_mlty_ -> separated_nonempty_list(STAR,app_mlty) . [ WITH WHEN VERBOSITY SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prod_mlty_ -> separated_nonempty_list(STAR,app_mlty)

State 84:
## Known stack suffix:
## prod_mlty_
## LR(1) items:
mark_location(prod_mlty_) -> prod_mlty_ . [ DARROW ARROW ]
mlty_ -> prod_mlty_ . [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
## Reductions:
-- On WITH reduce production mlty_ -> prod_mlty_
-- On VERBOSITY reduce production mlty_ -> prod_mlty_
-- On SEMISEMI reduce production mlty_ -> prod_mlty_
-- On RULE reduce production mlty_ -> prod_mlty_
-- On RPAREN reduce production mlty_ -> prod_mlty_
-- On REQUIRE reduce production mlty_ -> prod_mlty_
-- On OPERATION reduce production mlty_ -> prod_mlty_
-- On OPEN reduce production mlty_ -> prod_mlty_
-- On MODULE reduce production mlty_ -> prod_mlty_
-- On MLTYPE reduce production mlty_ -> prod_mlty_
-- On LET reduce production mlty_ -> prod_mlty_
-- On INCLUDE reduce production mlty_ -> prod_mlty_
-- On EXTERNAL reduce production mlty_ -> prod_mlty_
-- On EXCEPTION reduce production mlty_ -> prod_mlty_
-- On EQ reduce production mlty_ -> prod_mlty_
-- On EOF reduce production mlty_ -> prod_mlty_
-- On END reduce production mlty_ -> prod_mlty_
-- On DARROW reduce production mark_location(prod_mlty_) -> prod_mlty_
-- On BAR reduce production mlty_ -> prod_mlty_
-- On ARROW reduce production mark_location(prod_mlty_) -> prod_mlty_
-- On AND reduce production mlty_ -> prod_mlty_

State 85:
## Known stack suffix:
## prod_mlty
## LR(1) items:
mlty_ -> prod_mlty . ARROW mlty [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
mlty_ -> prod_mlty . DARROW mlty [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
-- On DARROW shift to state 86
-- On ARROW shift to state 111
## Reductions:

State 86:
## Known stack suffix:
## prod_mlty DARROW
## LR(1) items:
mlty_ -> prod_mlty DARROW . mlty [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 101
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 87:
## Known stack suffix:
## module_path
## LR(1) items:
app_mlty_ -> module_path . PERIOD ml_name nonempty_list(simple_mlty) [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
module_path -> module_path . PERIOD module_name [ PERIOD ]
simple_mlty_ -> module_path . PERIOD ml_name [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On PERIOD shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## module_path PERIOD
## LR(1) items:
app_mlty_ -> module_path PERIOD . ml_name nonempty_list(simple_mlty) [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
module_path -> module_path PERIOD . module_name [ PERIOD ]
simple_mlty_ -> module_path PERIOD . ml_name [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On NAME shift to state 57
-- On LPAREN shift to state 89
-- On module_name shift to state 43
-- On ml_name shift to state 90
## Reductions:

State 89:
## Known stack suffix:
## LPAREN
## LR(1) items:
ml_name -> LPAREN . INFIXCONS RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . EQ RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . STAR RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
ml_name -> LPAREN . PREFIXOP RPAREN [ WITH WHEN VERBOSITY UNDERSCORE UATOM TYPE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQEQ EQ EOF END DARROW COMMA COLONGT COLON BY BAR AS ARROW AND ]
## Transitions:
-- On STAR shift to state 64
-- On PREFIXOP shift to state 66
-- On INFIXOP4 shift to state 68
-- On INFIXOP3 shift to state 70
-- On INFIXOP2 shift to state 72
-- On INFIXOP1 shift to state 74
-- On INFIXOP0 shift to state 76
-- On INFIXCONS shift to state 78
-- On EQ shift to state 80
## Reductions:

State 90:
## Known stack suffix:
## module_path PERIOD ml_name
## LR(1) items:
app_mlty_ -> module_path PERIOD ml_name . nonempty_list(simple_mlty) [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
simple_mlty_ -> module_path PERIOD ml_name . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 91
-- On simple_mlty shift to state 92
-- On nonempty_list(simple_mlty) shift to state 99
-- On module_path shift to state 94
-- On module_name shift to state 45
-- On ml_name shift to state 97
-- On mark_location(simple_mlty_) shift to state 98
## Reductions:
-- On WITH reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On WHEN reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On VERBOSITY reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On STAR reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On SEMISEMI reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On SEMI reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On RULE reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On RPAREN reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On REQUIRE reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On RBRACK reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On RBRACE reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On OPERATION reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On OPEN reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On MODULE reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On MLTYPE reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On LET reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On INCLUDE reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On EXTERNAL reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On EXCEPTION reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On EQ reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On EOF reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On END reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On DARROW reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On COMMA reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On BAR reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On ARROW reduce production simple_mlty_ -> module_path PERIOD ml_name
-- On AND reduce production simple_mlty_ -> module_path PERIOD ml_name

State 91:
## Known stack suffix:
## simple_mlty_
## LR(1) items:
mark_location(simple_mlty_) -> simple_mlty_ . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(simple_mlty_) -> simple_mlty_

State 92:
## Known stack suffix:
## simple_mlty
## LR(1) items:
nonempty_list(simple_mlty) -> simple_mlty . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
nonempty_list(simple_mlty) -> simple_mlty . nonempty_list(simple_mlty) [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 91
-- On simple_mlty shift to state 92
-- On nonempty_list(simple_mlty) shift to state 93
-- On module_path shift to state 94
-- On module_name shift to state 45
-- On ml_name shift to state 97
-- On mark_location(simple_mlty_) shift to state 98
## Reductions:
-- On WITH reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On WHEN reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On VERBOSITY reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On STAR reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On SEMISEMI reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On SEMI reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On RULE reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On RPAREN reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On REQUIRE reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On RBRACK reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On RBRACE reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On OPERATION reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On OPEN reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On MODULE reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On MLTYPE reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On LET reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On INCLUDE reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On EXTERNAL reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On EXCEPTION reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On EQ reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On EOF reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On END reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On DARROW reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On COMMA reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On BAR reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On ARROW reduce production nonempty_list(simple_mlty) -> simple_mlty
-- On AND reduce production nonempty_list(simple_mlty) -> simple_mlty

State 93:
## Known stack suffix:
## simple_mlty nonempty_list(simple_mlty)
## LR(1) items:
nonempty_list(simple_mlty) -> simple_mlty nonempty_list(simple_mlty) . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(simple_mlty) -> simple_mlty nonempty_list(simple_mlty)

State 94:
## Known stack suffix:
## module_path
## LR(1) items:
module_path -> module_path . PERIOD module_name [ PERIOD ]
simple_mlty_ -> module_path . PERIOD ml_name [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On PERIOD shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## module_path PERIOD
## LR(1) items:
module_path -> module_path PERIOD . module_name [ PERIOD ]
simple_mlty_ -> module_path PERIOD . ml_name [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On NAME shift to state 57
-- On LPAREN shift to state 89
-- On module_name shift to state 43
-- On ml_name shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## module_path PERIOD ml_name
## LR(1) items:
simple_mlty_ -> module_path PERIOD ml_name . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> module_path PERIOD ml_name

State 97:
## Known stack suffix:
## ml_name
## LR(1) items:
simple_mlty_ -> ml_name . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> ml_name

State 98:
## Known stack suffix:
## mark_location(simple_mlty_)
## LR(1) items:
simple_mlty -> mark_location(simple_mlty_) . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty -> mark_location(simple_mlty_)

State 99:
## Known stack suffix:
## module_path PERIOD ml_name nonempty_list(simple_mlty)
## LR(1) items:
app_mlty_ -> module_path PERIOD ml_name nonempty_list(simple_mlty) . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_mlty_ -> module_path PERIOD ml_name nonempty_list(simple_mlty)

State 100:
## Known stack suffix:
## mlty_
## LR(1) items:
mark_location(mlty_) -> mlty_ . [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(mlty_) -> mlty_

State 101:
## Known stack suffix:
## prod_mlty DARROW mlty
## LR(1) items:
mlty_ -> prod_mlty DARROW mlty . [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_ -> prod_mlty DARROW mlty

State 102:
## Known stack suffix:
## ml_name
## LR(1) items:
app_mlty_ -> ml_name . nonempty_list(simple_mlty) [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
simple_mlty_ -> ml_name . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 91
-- On simple_mlty shift to state 92
-- On nonempty_list(simple_mlty) shift to state 103
-- On module_path shift to state 94
-- On module_name shift to state 45
-- On ml_name shift to state 97
-- On mark_location(simple_mlty_) shift to state 98
## Reductions:
-- On WITH reduce production simple_mlty_ -> ml_name
-- On WHEN reduce production simple_mlty_ -> ml_name
-- On VERBOSITY reduce production simple_mlty_ -> ml_name
-- On STAR reduce production simple_mlty_ -> ml_name
-- On SEMISEMI reduce production simple_mlty_ -> ml_name
-- On SEMI reduce production simple_mlty_ -> ml_name
-- On RULE reduce production simple_mlty_ -> ml_name
-- On RPAREN reduce production simple_mlty_ -> ml_name
-- On REQUIRE reduce production simple_mlty_ -> ml_name
-- On RBRACK reduce production simple_mlty_ -> ml_name
-- On RBRACE reduce production simple_mlty_ -> ml_name
-- On OPERATION reduce production simple_mlty_ -> ml_name
-- On OPEN reduce production simple_mlty_ -> ml_name
-- On MODULE reduce production simple_mlty_ -> ml_name
-- On MLTYPE reduce production simple_mlty_ -> ml_name
-- On LET reduce production simple_mlty_ -> ml_name
-- On INCLUDE reduce production simple_mlty_ -> ml_name
-- On EXTERNAL reduce production simple_mlty_ -> ml_name
-- On EXCEPTION reduce production simple_mlty_ -> ml_name
-- On EQ reduce production simple_mlty_ -> ml_name
-- On EOF reduce production simple_mlty_ -> ml_name
-- On END reduce production simple_mlty_ -> ml_name
-- On DARROW reduce production simple_mlty_ -> ml_name
-- On COMMA reduce production simple_mlty_ -> ml_name
-- On BAR reduce production simple_mlty_ -> ml_name
-- On ARROW reduce production simple_mlty_ -> ml_name
-- On AND reduce production simple_mlty_ -> ml_name

State 103:
## Known stack suffix:
## ml_name nonempty_list(simple_mlty)
## LR(1) items:
app_mlty_ -> ml_name nonempty_list(simple_mlty) . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_mlty_ -> ml_name nonempty_list(simple_mlty)

State 104:
## Known stack suffix:
## mark_location(prod_mlty_)
## LR(1) items:
prod_mlty -> mark_location(prod_mlty_) . [ WITH WHEN VERBOSITY SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prod_mlty -> mark_location(prod_mlty_)

State 105:
## Known stack suffix:
## mark_location(mlty_)
## LR(1) items:
mlty -> mark_location(mlty_) . [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty -> mark_location(mlty_)

State 106:
## Known stack suffix:
## mark_location(app_mlty_)
## LR(1) items:
app_mlty -> mark_location(app_mlty_) . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_mlty -> mark_location(app_mlty_)

State 107:
## Known stack suffix:
## app_mlty_
## LR(1) items:
mark_location(app_mlty_) -> app_mlty_ . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(app_mlty_) -> app_mlty_

State 108:
## Known stack suffix:
## app_mlty
## LR(1) items:
separated_nonempty_list(STAR,app_mlty) -> app_mlty . [ WITH WHEN VERBOSITY SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
separated_nonempty_list(STAR,app_mlty) -> app_mlty . STAR separated_nonempty_list(STAR,app_mlty) [ WITH WHEN VERBOSITY SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 109
## Reductions:
-- On WITH reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On WHEN reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On VERBOSITY reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On SEMISEMI reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On SEMI reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On RULE reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On RPAREN reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On REQUIRE reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On RBRACK reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On RBRACE reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On OPERATION reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On OPEN reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On MODULE reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On MLTYPE reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On LET reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On INCLUDE reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On EXTERNAL reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On EXCEPTION reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On EQ reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On EOF reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On END reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On DARROW reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On COMMA reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On BAR reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On ARROW reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty
-- On AND reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty

State 109:
## Known stack suffix:
## app_mlty STAR
## LR(1) items:
separated_nonempty_list(STAR,app_mlty) -> app_mlty STAR . separated_nonempty_list(STAR,app_mlty) [ WITH WHEN VERBOSITY SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 110
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On ml_name shift to state 102
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 110:
## Known stack suffix:
## app_mlty STAR separated_nonempty_list(STAR,app_mlty)
## LR(1) items:
separated_nonempty_list(STAR,app_mlty) -> app_mlty STAR separated_nonempty_list(STAR,app_mlty) . [ WITH WHEN VERBOSITY SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(STAR,app_mlty) -> app_mlty STAR separated_nonempty_list(STAR,app_mlty)

State 111:
## Known stack suffix:
## prod_mlty ARROW
## LR(1) items:
mlty_ -> prod_mlty ARROW . mlty [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 112
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 112:
## Known stack suffix:
## prod_mlty ARROW mlty
## LR(1) items:
mlty_ -> prod_mlty ARROW mlty . [ WITH VERBOSITY SEMISEMI RULE RPAREN REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_ -> prod_mlty ARROW mlty

State 113:
## Known stack suffix:
## LPAREN mlty_
## LR(1) items:
simple_mlty_ -> LPAREN mlty_ . RPAREN [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
-- On RPAREN shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## LPAREN mlty_ RPAREN
## LR(1) items:
simple_mlty_ -> LPAREN mlty_ RPAREN . [ WITH WHEN VERBOSITY UNDERSCORE STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_mlty_ -> LPAREN mlty_ RPAREN

State 115:
## Known stack suffix:
## REF simple_mlty
## LR(1) items:
app_mlty_ -> REF simple_mlty . [ WITH WHEN VERBOSITY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END DARROW COMMA BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_mlty_ -> REF simple_mlty

State 116:
## Known stack suffix:
## MLFORALL
## LR(1) items:
ml_schema_ -> MLFORALL . nonempty_list(opt_name(ml_name)) COMMA mlty [ RPAREN EQ ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On opt_name(ml_name) shift to state 119
-- On nonempty_list(opt_name(ml_name)) shift to state 122
-- On ml_name shift to state 121
## Reductions:

State 117:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
opt_name(ml_name) -> UNDERSCORE . [ WITH VERBOSITY UNDERSCORE SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLTYPE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_name(ml_name) -> UNDERSCORE

State 118:
## Known stack suffix:
## NAME
## LR(1) items:
ml_name -> NAME . [ WITH VERBOSITY UNDERSCORE SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLTYPE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_name -> NAME

State 119:
## Known stack suffix:
## opt_name(ml_name)
## LR(1) items:
nonempty_list(opt_name(ml_name)) -> opt_name(ml_name) . [ COMMA ]
nonempty_list(opt_name(ml_name)) -> opt_name(ml_name) . nonempty_list(opt_name(ml_name)) [ COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On opt_name(ml_name) shift to state 119
-- On nonempty_list(opt_name(ml_name)) shift to state 120
-- On ml_name shift to state 121
## Reductions:
-- On COMMA reduce production nonempty_list(opt_name(ml_name)) -> opt_name(ml_name)

State 120:
## Known stack suffix:
## opt_name(ml_name) nonempty_list(opt_name(ml_name))
## LR(1) items:
nonempty_list(opt_name(ml_name)) -> opt_name(ml_name) nonempty_list(opt_name(ml_name)) . [ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(opt_name(ml_name)) -> opt_name(ml_name) nonempty_list(opt_name(ml_name))

State 121:
## Known stack suffix:
## ml_name
## LR(1) items:
opt_name(ml_name) -> ml_name . [ WITH VERBOSITY UNDERSCORE SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLTYPE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQ EOF END COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_name(ml_name) -> ml_name

State 122:
## Known stack suffix:
## MLFORALL nonempty_list(opt_name(ml_name))
## LR(1) items:
ml_schema_ -> MLFORALL nonempty_list(opt_name(ml_name)) . COMMA mlty [ RPAREN EQ ]
## Transitions:
-- On COMMA shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## MLFORALL nonempty_list(opt_name(ml_name)) COMMA
## LR(1) items:
ml_schema_ -> MLFORALL nonempty_list(opt_name(ml_name)) COMMA . mlty [ RPAREN EQ ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 124
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 124:
## Known stack suffix:
## MLFORALL nonempty_list(opt_name(ml_name)) COMMA mlty
## LR(1) items:
ml_schema_ -> MLFORALL nonempty_list(opt_name(ml_name)) COMMA mlty . [ RPAREN EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_schema_ -> MLFORALL nonempty_list(opt_name(ml_name)) COMMA mlty

State 125:
## Known stack suffix:
## mlty
## LR(1) items:
ml_schema_ -> mlty . [ RPAREN EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_schema_ -> mlty

State 126:
## Known stack suffix:
## ml_schema_
## LR(1) items:
mark_location(ml_schema_) -> ml_schema_ . [ RPAREN EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(ml_schema_) -> ml_schema_

State 127:
## Known stack suffix:
## COLONGT ml_schema
## LR(1) items:
let_annotation -> COLONGT ml_schema . [ EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_annotation -> COLONGT ml_schema

State 128:
## Known stack suffix:
## mark_location(ml_schema_)
## LR(1) items:
ml_schema -> mark_location(ml_schema_) . [ RPAREN EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_schema -> mark_location(ml_schema_)

State 129:
## Known stack suffix:
## UNDERSCORE COLON
## LR(1) items:
let_clause -> UNDERSCORE COLON . app_term EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 154
-- On any_name shift to state 47
## Reductions:

State 130:
## Known stack suffix:
## CONVERT
## LR(1) items:
app_term_ -> CONVERT . substitution_term substitution_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 131
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 131:
## Known stack suffix:
## CONVERT substitution_term
## LR(1) items:
app_term_ -> CONVERT substitution_term . substitution_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ REF QUOTED_STRING PREFIXOP NATURAL NAME LPAREN LBRACK LBRACE BANG ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 50
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 132
-- On substitution shift to state 133
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 132:
## Known stack suffix:
## CONVERT substitution_term substitution_term
## LR(1) items:
app_term_ -> CONVERT substitution_term substitution_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On LBRACE shift to state 50
-- On substitution shift to state 133
## Reductions:
-- On WITH reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On VERBOSITY reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On TRY reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On STAR reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On SEMISEMI reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On SEMI reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On RULE reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On RPAREN reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On REQUIRE reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On RBRACK reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On RBRACE reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On OPERATION reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On OPEN reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On MODULE reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On MLTYPE reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On LET reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On INFIXOP4 reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On INFIXOP3 reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On INFIXOP2 reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On INFIXOP1 reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On INFIXOP0 reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On INFIXCONS reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On INCLUDE reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On IN reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On EXTERNAL reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On EXCEPTION reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On EQEQ reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On EQ reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On EOF reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On END reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On COMMA reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On COLONQT reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On COLONGT reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On COLONEQ reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On COLON reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On BY reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On BAR reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On ARROW reduce production app_term_ -> CONVERT substitution_term substitution_term
-- On AND reduce production app_term_ -> CONVERT substitution_term substitution_term

State 133:
## Known stack suffix:
## substitution_term substitution
## LR(1) items:
substitution_term_ -> substitution_term substitution . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production substitution_term_ -> substitution_term substitution

State 134:
## Known stack suffix:
## prefix_term_
## LR(1) items:
substitution_term_ -> prefix_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production substitution_term_ -> prefix_term_

State 135:
## Known stack suffix:
## mark_location(substitution_term_)
## LR(1) items:
substitution_term -> mark_location(substitution_term_) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production substitution_term -> mark_location(substitution_term_)

State 136:
## Known stack suffix:
## CONTEXT
## LR(1) items:
app_term_ -> CONTEXT . substitution_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 137
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 137:
## Known stack suffix:
## CONTEXT substitution_term
## LR(1) items:
app_term_ -> CONTEXT substitution_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On LBRACE shift to state 50
-- On substitution shift to state 133
## Reductions:
-- On WITH reduce production app_term_ -> CONTEXT substitution_term
-- On VERBOSITY reduce production app_term_ -> CONTEXT substitution_term
-- On TRY reduce production app_term_ -> CONTEXT substitution_term
-- On STAR reduce production app_term_ -> CONTEXT substitution_term
-- On SEMISEMI reduce production app_term_ -> CONTEXT substitution_term
-- On SEMI reduce production app_term_ -> CONTEXT substitution_term
-- On RULE reduce production app_term_ -> CONTEXT substitution_term
-- On RPAREN reduce production app_term_ -> CONTEXT substitution_term
-- On REQUIRE reduce production app_term_ -> CONTEXT substitution_term
-- On RBRACK reduce production app_term_ -> CONTEXT substitution_term
-- On RBRACE reduce production app_term_ -> CONTEXT substitution_term
-- On OPERATION reduce production app_term_ -> CONTEXT substitution_term
-- On OPEN reduce production app_term_ -> CONTEXT substitution_term
-- On MODULE reduce production app_term_ -> CONTEXT substitution_term
-- On MLTYPE reduce production app_term_ -> CONTEXT substitution_term
-- On LET reduce production app_term_ -> CONTEXT substitution_term
-- On INFIXOP4 reduce production app_term_ -> CONTEXT substitution_term
-- On INFIXOP3 reduce production app_term_ -> CONTEXT substitution_term
-- On INFIXOP2 reduce production app_term_ -> CONTEXT substitution_term
-- On INFIXOP1 reduce production app_term_ -> CONTEXT substitution_term
-- On INFIXOP0 reduce production app_term_ -> CONTEXT substitution_term
-- On INFIXCONS reduce production app_term_ -> CONTEXT substitution_term
-- On INCLUDE reduce production app_term_ -> CONTEXT substitution_term
-- On IN reduce production app_term_ -> CONTEXT substitution_term
-- On EXTERNAL reduce production app_term_ -> CONTEXT substitution_term
-- On EXCEPTION reduce production app_term_ -> CONTEXT substitution_term
-- On EQEQ reduce production app_term_ -> CONTEXT substitution_term
-- On EQ reduce production app_term_ -> CONTEXT substitution_term
-- On EOF reduce production app_term_ -> CONTEXT substitution_term
-- On END reduce production app_term_ -> CONTEXT substitution_term
-- On COMMA reduce production app_term_ -> CONTEXT substitution_term
-- On COLONQT reduce production app_term_ -> CONTEXT substitution_term
-- On COLONGT reduce production app_term_ -> CONTEXT substitution_term
-- On COLONEQ reduce production app_term_ -> CONTEXT substitution_term
-- On COLON reduce production app_term_ -> CONTEXT substitution_term
-- On BY reduce production app_term_ -> CONTEXT substitution_term
-- On BAR reduce production app_term_ -> CONTEXT substitution_term
-- On ARROW reduce production app_term_ -> CONTEXT substitution_term
-- On AND reduce production app_term_ -> CONTEXT substitution_term

State 138:
## Known stack suffix:
## CONGRUENCE
## LR(1) items:
app_term_ -> CONGRUENCE . substitution_term substitution_term list(substitution_term) [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 139
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 139:
## Known stack suffix:
## CONGRUENCE substitution_term
## LR(1) items:
app_term_ -> CONGRUENCE substitution_term . substitution_term list(substitution_term) [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ REF QUOTED_STRING PREFIXOP NATURAL NAME LPAREN LBRACK LBRACE BANG ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 50
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 140
-- On substitution shift to state 133
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 140:
## Known stack suffix:
## CONGRUENCE substitution_term substitution_term
## LR(1) items:
app_term_ -> CONGRUENCE substitution_term substitution_term . list(substitution_term) [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 50
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 141
-- On substitution shift to state 133
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On list(substitution_term) shift to state 143
-- On any_name shift to state 47
## Reductions:
-- On WITH reduce production list(substitution_term) ->
-- On VERBOSITY reduce production list(substitution_term) ->
-- On TRY reduce production list(substitution_term) ->
-- On STAR reduce production list(substitution_term) ->
-- On SEMISEMI reduce production list(substitution_term) ->
-- On SEMI reduce production list(substitution_term) ->
-- On RULE reduce production list(substitution_term) ->
-- On RPAREN reduce production list(substitution_term) ->
-- On REQUIRE reduce production list(substitution_term) ->
-- On RBRACK reduce production list(substitution_term) ->
-- On RBRACE reduce production list(substitution_term) ->
-- On OPERATION reduce production list(substitution_term) ->
-- On OPEN reduce production list(substitution_term) ->
-- On MODULE reduce production list(substitution_term) ->
-- On MLTYPE reduce production list(substitution_term) ->
-- On LET reduce production list(substitution_term) ->
-- On INFIXOP4 reduce production list(substitution_term) ->
-- On INFIXOP3 reduce production list(substitution_term) ->
-- On INFIXOP2 reduce production list(substitution_term) ->
-- On INFIXOP1 reduce production list(substitution_term) ->
-- On INFIXOP0 reduce production list(substitution_term) ->
-- On INFIXCONS reduce production list(substitution_term) ->
-- On INCLUDE reduce production list(substitution_term) ->
-- On IN reduce production list(substitution_term) ->
-- On EXTERNAL reduce production list(substitution_term) ->
-- On EXCEPTION reduce production list(substitution_term) ->
-- On EQEQ reduce production list(substitution_term) ->
-- On EQ reduce production list(substitution_term) ->
-- On EOF reduce production list(substitution_term) ->
-- On END reduce production list(substitution_term) ->
-- On COMMA reduce production list(substitution_term) ->
-- On COLONQT reduce production list(substitution_term) ->
-- On COLONGT reduce production list(substitution_term) ->
-- On COLONEQ reduce production list(substitution_term) ->
-- On COLON reduce production list(substitution_term) ->
-- On BY reduce production list(substitution_term) ->
-- On BAR reduce production list(substitution_term) ->
-- On ARROW reduce production list(substitution_term) ->
-- On AND reduce production list(substitution_term) ->

State 141:
## Known stack suffix:
## substitution_term
## LR(1) items:
list(substitution_term) -> substitution_term . list(substitution_term) [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 50
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 141
-- On substitution shift to state 133
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On list(substitution_term) shift to state 142
-- On any_name shift to state 47
## Reductions:
-- On WITH reduce production list(substitution_term) ->
-- On VERBOSITY reduce production list(substitution_term) ->
-- On TRY reduce production list(substitution_term) ->
-- On STAR reduce production list(substitution_term) ->
-- On SEMISEMI reduce production list(substitution_term) ->
-- On SEMI reduce production list(substitution_term) ->
-- On RULE reduce production list(substitution_term) ->
-- On RPAREN reduce production list(substitution_term) ->
-- On REQUIRE reduce production list(substitution_term) ->
-- On RBRACK reduce production list(substitution_term) ->
-- On RBRACE reduce production list(substitution_term) ->
-- On OPERATION reduce production list(substitution_term) ->
-- On OPEN reduce production list(substitution_term) ->
-- On MODULE reduce production list(substitution_term) ->
-- On MLTYPE reduce production list(substitution_term) ->
-- On LET reduce production list(substitution_term) ->
-- On INFIXOP4 reduce production list(substitution_term) ->
-- On INFIXOP3 reduce production list(substitution_term) ->
-- On INFIXOP2 reduce production list(substitution_term) ->
-- On INFIXOP1 reduce production list(substitution_term) ->
-- On INFIXOP0 reduce production list(substitution_term) ->
-- On INFIXCONS reduce production list(substitution_term) ->
-- On INCLUDE reduce production list(substitution_term) ->
-- On IN reduce production list(substitution_term) ->
-- On EXTERNAL reduce production list(substitution_term) ->
-- On EXCEPTION reduce production list(substitution_term) ->
-- On EQEQ reduce production list(substitution_term) ->
-- On EQ reduce production list(substitution_term) ->
-- On EOF reduce production list(substitution_term) ->
-- On END reduce production list(substitution_term) ->
-- On COMMA reduce production list(substitution_term) ->
-- On COLONQT reduce production list(substitution_term) ->
-- On COLONGT reduce production list(substitution_term) ->
-- On COLONEQ reduce production list(substitution_term) ->
-- On COLON reduce production list(substitution_term) ->
-- On BY reduce production list(substitution_term) ->
-- On BAR reduce production list(substitution_term) ->
-- On ARROW reduce production list(substitution_term) ->
-- On AND reduce production list(substitution_term) ->

State 142:
## Known stack suffix:
## substitution_term list(substitution_term)
## LR(1) items:
list(substitution_term) -> substitution_term list(substitution_term) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(substitution_term) -> substitution_term list(substitution_term)

State 143:
## Known stack suffix:
## CONGRUENCE substitution_term substitution_term list(substitution_term)
## LR(1) items:
app_term_ -> CONGRUENCE substitution_term substitution_term list(substitution_term) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_term_ -> CONGRUENCE substitution_term substitution_term list(substitution_term)

State 144:
## Known stack suffix:
## ABSTRACT
## LR(1) items:
app_term_ -> ABSTRACT . prefix_term prefix_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 22
-- On prefix_term shift to state 145
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(prefix_term_) shift to state 46
-- On any_name shift to state 47
## Reductions:

State 145:
## Known stack suffix:
## ABSTRACT prefix_term
## LR(1) items:
app_term_ -> ABSTRACT prefix_term . prefix_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 22
-- On prefix_term shift to state 146
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(prefix_term_) shift to state 46
-- On any_name shift to state 47
## Reductions:

State 146:
## Known stack suffix:
## ABSTRACT prefix_term prefix_term
## LR(1) items:
app_term_ -> ABSTRACT prefix_term prefix_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_term_ -> ABSTRACT prefix_term prefix_term

State 147:
## Known stack suffix:
## substitution_term_
## LR(1) items:
app_term_ -> substitution_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
mark_location(substitution_term_) -> substitution_term_ . [ REF QUOTED_STRING PREFIXOP NATURAL NAME LPAREN LBRACK LBRACE BANG ]
## Transitions:
## Reductions:
-- On WITH reduce production app_term_ -> substitution_term_
-- On VERBOSITY reduce production app_term_ -> substitution_term_
-- On TRY reduce production app_term_ -> substitution_term_
-- On STAR reduce production app_term_ -> substitution_term_
-- On SEMISEMI reduce production app_term_ -> substitution_term_
-- On SEMI reduce production app_term_ -> substitution_term_
-- On RULE reduce production app_term_ -> substitution_term_
-- On RPAREN reduce production app_term_ -> substitution_term_
-- On REQUIRE reduce production app_term_ -> substitution_term_
-- On REF reduce production mark_location(substitution_term_) -> substitution_term_
-- On RBRACK reduce production app_term_ -> substitution_term_
-- On RBRACE reduce production app_term_ -> substitution_term_
-- On QUOTED_STRING reduce production mark_location(substitution_term_) -> substitution_term_
-- On PREFIXOP reduce production mark_location(substitution_term_) -> substitution_term_
-- On OPERATION reduce production app_term_ -> substitution_term_
-- On OPEN reduce production app_term_ -> substitution_term_
-- On NATURAL reduce production mark_location(substitution_term_) -> substitution_term_
-- On NAME reduce production mark_location(substitution_term_) -> substitution_term_
-- On MODULE reduce production app_term_ -> substitution_term_
-- On MLTYPE reduce production app_term_ -> substitution_term_
-- On LPAREN reduce production mark_location(substitution_term_) -> substitution_term_
-- On LET reduce production app_term_ -> substitution_term_
-- On LBRACK reduce production mark_location(substitution_term_) -> substitution_term_
-- On LBRACE reduce production mark_location(substitution_term_) -> substitution_term_
-- On INFIXOP4 reduce production app_term_ -> substitution_term_
-- On INFIXOP3 reduce production app_term_ -> substitution_term_
-- On INFIXOP2 reduce production app_term_ -> substitution_term_
-- On INFIXOP1 reduce production app_term_ -> substitution_term_
-- On INFIXOP0 reduce production app_term_ -> substitution_term_
-- On INFIXCONS reduce production app_term_ -> substitution_term_
-- On INCLUDE reduce production app_term_ -> substitution_term_
-- On IN reduce production app_term_ -> substitution_term_
-- On EXTERNAL reduce production app_term_ -> substitution_term_
-- On EXCEPTION reduce production app_term_ -> substitution_term_
-- On EQEQ reduce production app_term_ -> substitution_term_
-- On EQ reduce production app_term_ -> substitution_term_
-- On EOF reduce production app_term_ -> substitution_term_
-- On END reduce production app_term_ -> substitution_term_
-- On COMMA reduce production app_term_ -> substitution_term_
-- On COLONQT reduce production app_term_ -> substitution_term_
-- On COLONGT reduce production app_term_ -> substitution_term_
-- On COLONEQ reduce production app_term_ -> substitution_term_
-- On COLON reduce production app_term_ -> substitution_term_
-- On BY reduce production app_term_ -> substitution_term_
-- On BAR reduce production app_term_ -> substitution_term_
-- On BANG reduce production mark_location(substitution_term_) -> substitution_term_
-- On ARROW reduce production app_term_ -> substitution_term_
-- On AND reduce production app_term_ -> substitution_term_

State 148:
## Known stack suffix:
## substitution_term
## LR(1) items:
app_term_ -> substitution_term . nonempty_list(substitution_term) [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 50
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 149
-- On substitution shift to state 133
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(substitution_term) shift to state 151
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:

State 149:
## Known stack suffix:
## substitution_term
## LR(1) items:
nonempty_list(substitution_term) -> substitution_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
nonempty_list(substitution_term) -> substitution_term . nonempty_list(substitution_term) [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 50
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 48
-- On substitution_term shift to state 149
-- On substitution shift to state 133
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(substitution_term) shift to state 150
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On any_name shift to state 47
## Reductions:
-- On WITH reduce production nonempty_list(substitution_term) -> substitution_term
-- On VERBOSITY reduce production nonempty_list(substitution_term) -> substitution_term
-- On TRY reduce production nonempty_list(substitution_term) -> substitution_term
-- On STAR reduce production nonempty_list(substitution_term) -> substitution_term
-- On SEMISEMI reduce production nonempty_list(substitution_term) -> substitution_term
-- On SEMI reduce production nonempty_list(substitution_term) -> substitution_term
-- On RULE reduce production nonempty_list(substitution_term) -> substitution_term
-- On RPAREN reduce production nonempty_list(substitution_term) -> substitution_term
-- On REQUIRE reduce production nonempty_list(substitution_term) -> substitution_term
-- On RBRACK reduce production nonempty_list(substitution_term) -> substitution_term
-- On RBRACE reduce production nonempty_list(substitution_term) -> substitution_term
-- On OPERATION reduce production nonempty_list(substitution_term) -> substitution_term
-- On OPEN reduce production nonempty_list(substitution_term) -> substitution_term
-- On MODULE reduce production nonempty_list(substitution_term) -> substitution_term
-- On MLTYPE reduce production nonempty_list(substitution_term) -> substitution_term
-- On LET reduce production nonempty_list(substitution_term) -> substitution_term
-- On INFIXOP4 reduce production nonempty_list(substitution_term) -> substitution_term
-- On INFIXOP3 reduce production nonempty_list(substitution_term) -> substitution_term
-- On INFIXOP2 reduce production nonempty_list(substitution_term) -> substitution_term
-- On INFIXOP1 reduce production nonempty_list(substitution_term) -> substitution_term
-- On INFIXOP0 reduce production nonempty_list(substitution_term) -> substitution_term
-- On INFIXCONS reduce production nonempty_list(substitution_term) -> substitution_term
-- On INCLUDE reduce production nonempty_list(substitution_term) -> substitution_term
-- On IN reduce production nonempty_list(substitution_term) -> substitution_term
-- On EXTERNAL reduce production nonempty_list(substitution_term) -> substitution_term
-- On EXCEPTION reduce production nonempty_list(substitution_term) -> substitution_term
-- On EQEQ reduce production nonempty_list(substitution_term) -> substitution_term
-- On EQ reduce production nonempty_list(substitution_term) -> substitution_term
-- On EOF reduce production nonempty_list(substitution_term) -> substitution_term
-- On END reduce production nonempty_list(substitution_term) -> substitution_term
-- On COMMA reduce production nonempty_list(substitution_term) -> substitution_term
-- On COLONQT reduce production nonempty_list(substitution_term) -> substitution_term
-- On COLONGT reduce production nonempty_list(substitution_term) -> substitution_term
-- On COLONEQ reduce production nonempty_list(substitution_term) -> substitution_term
-- On COLON reduce production nonempty_list(substitution_term) -> substitution_term
-- On BY reduce production nonempty_list(substitution_term) -> substitution_term
-- On BAR reduce production nonempty_list(substitution_term) -> substitution_term
-- On ARROW reduce production nonempty_list(substitution_term) -> substitution_term
-- On AND reduce production nonempty_list(substitution_term) -> substitution_term

State 150:
## Known stack suffix:
## substitution_term nonempty_list(substitution_term)
## LR(1) items:
nonempty_list(substitution_term) -> substitution_term nonempty_list(substitution_term) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(substitution_term) -> substitution_term nonempty_list(substitution_term)

State 151:
## Known stack suffix:
## substitution_term nonempty_list(substitution_term)
## LR(1) items:
app_term_ -> substitution_term nonempty_list(substitution_term) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_term_ -> substitution_term nonempty_list(substitution_term)

State 152:
## Known stack suffix:
## mark_location(app_term_)
## LR(1) items:
app_term -> mark_location(app_term_) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_term -> mark_location(app_term_)

State 153:
## Known stack suffix:
## app_term_
## LR(1) items:
mark_location(app_term_) -> app_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONGT COLON BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(app_term_) -> app_term_

State 154:
## Known stack suffix:
## UNDERSCORE COLON app_term
## LR(1) items:
let_clause -> UNDERSCORE COLON app_term . EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On EQ shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## UNDERSCORE COLON app_term EQ
## LR(1) items:
let_clause -> UNDERSCORE COLON app_term EQ . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 424
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 156:
## Known stack suffix:
## LBRACE
## LR(1) items:
maybe_typed_binder -> LBRACE . nonempty_list(anon_name(tt_name)) RBRACE [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
maybe_typed_binder -> LBRACE . nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 157
-- On NAME shift to state 158
-- On LPAREN shift to state 26
-- On tt_name shift to state 159
-- On opt_name(tt_name) shift to state 160
-- On nonempty_list(anon_name(tt_name)) shift to state 161
-- On anon_name(tt_name) shift to state 207
## Reductions:

State 157:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
opt_name(tt_name) -> UNDERSCORE . [ UNDERSCORE TYPE RPAREN RBRACE NAME LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_name(tt_name) -> UNDERSCORE

State 158:
## Known stack suffix:
## NAME
## LR(1) items:
tt_name -> NAME . [ UNDERSCORE TYPE RPAREN RBRACE NAME LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_name -> NAME

State 159:
## Known stack suffix:
## tt_name
## LR(1) items:
opt_name(tt_name) -> tt_name . [ UNDERSCORE RPAREN RBRACE NAME LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_name(tt_name) -> tt_name

State 160:
## Known stack suffix:
## opt_name(tt_name)
## LR(1) items:
anon_name(tt_name) -> opt_name(tt_name) . [ UNDERSCORE RBRACE NAME LPAREN COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production anon_name(tt_name) -> opt_name(tt_name)

State 161:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name))
## LR(1) items:
maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) . RBRACE [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) . COLON ty_term RBRACE [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 162
-- On COLON shift to state 163
## Reductions:

State 162:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name)) RBRACE
## LR(1) items:
maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) RBRACE . [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) RBRACE

State 163:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name)) COLON
## LR(1) items:
maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON . ty_term RBRACE [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 164
-- On ty_term shift to state 165
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(ty_term_) shift to state 170
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 173
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 164:
## Known stack suffix:
## ty_term_
## LR(1) items:
mark_location(ty_term_) -> ty_term_ . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(ty_term_) -> ty_term_

State 165:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term
## LR(1) items:
maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term . RBRACE [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE
## LR(1) items:
maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE . [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production maybe_typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE

State 167:
## Known stack suffix:
## nonempty_list(maybe_typed_binder)
## LR(1) items:
abstraction -> nonempty_list(maybe_typed_binder) . [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production abstraction -> nonempty_list(maybe_typed_binder)

State 168:
## Known stack suffix:
## maybe_typed_binder
## LR(1) items:
nonempty_list(maybe_typed_binder) -> maybe_typed_binder . [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
nonempty_list(maybe_typed_binder) -> maybe_typed_binder . nonempty_list(maybe_typed_binder) [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On LBRACE shift to state 156
-- On nonempty_list(maybe_typed_binder) shift to state 169
-- On maybe_typed_binder shift to state 168
## Reductions:
-- On REF reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On RAISE reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On QUOTED_STRING reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On QQMARK reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On PREFIXOP reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On OCCURS reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On NATURAL reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On NAME reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On LPAREN reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On LBRACK reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On CONVERT reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On CONTEXT reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On CONGRUENCE reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On BANG reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder
-- On ABSTRACT reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder

State 169:
## Known stack suffix:
## maybe_typed_binder nonempty_list(maybe_typed_binder)
## LR(1) items:
nonempty_list(maybe_typed_binder) -> maybe_typed_binder nonempty_list(maybe_typed_binder) . [ REF RAISE QUOTED_STRING QQMARK PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(maybe_typed_binder) -> maybe_typed_binder nonempty_list(maybe_typed_binder)

State 170:
## Known stack suffix:
## mark_location(ty_term_)
## LR(1) items:
ty_term -> mark_location(ty_term_) . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty_term -> mark_location(ty_term_)

State 171:
## Known stack suffix:
## mark_location(binop_term_)
## LR(1) items:
binop_term -> mark_location(binop_term_) . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_term -> mark_location(binop_term_)

State 172:
## Known stack suffix:
## binop_term_
## LR(1) items:
mark_location(binop_term_) -> binop_term_ . [ STAR SEMI INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
ty_term_ -> binop_term_ . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ty_term_ -> binop_term_
-- On VERBOSITY reduce production ty_term_ -> binop_term_
-- On TRY reduce production ty_term_ -> binop_term_
-- On STAR reduce production mark_location(binop_term_) -> binop_term_
-- On SEMISEMI reduce production ty_term_ -> binop_term_
-- On SEMI reduce production mark_location(binop_term_) -> binop_term_
-- On RULE reduce production ty_term_ -> binop_term_
-- On RPAREN reduce production ty_term_ -> binop_term_
-- On REQUIRE reduce production ty_term_ -> binop_term_
-- On RBRACE reduce production ty_term_ -> binop_term_
-- On OPERATION reduce production ty_term_ -> binop_term_
-- On OPEN reduce production ty_term_ -> binop_term_
-- On MODULE reduce production ty_term_ -> binop_term_
-- On MLTYPE reduce production ty_term_ -> binop_term_
-- On LET reduce production ty_term_ -> binop_term_
-- On INFIXOP4 reduce production mark_location(binop_term_) -> binop_term_
-- On INFIXOP3 reduce production mark_location(binop_term_) -> binop_term_
-- On INFIXOP2 reduce production mark_location(binop_term_) -> binop_term_
-- On INFIXOP1 reduce production mark_location(binop_term_) -> binop_term_
-- On INFIXOP0 reduce production mark_location(binop_term_) -> binop_term_
-- On INFIXCONS reduce production mark_location(binop_term_) -> binop_term_
-- On INCLUDE reduce production ty_term_ -> binop_term_
-- On IN reduce production ty_term_ -> binop_term_
-- On EXTERNAL reduce production ty_term_ -> binop_term_
-- On EXCEPTION reduce production ty_term_ -> binop_term_
-- On EQ reduce production mark_location(binop_term_) -> binop_term_
-- On EOF reduce production ty_term_ -> binop_term_
-- On END reduce production ty_term_ -> binop_term_
-- On COMMA reduce production ty_term_ -> binop_term_
-- On COLONGT reduce production ty_term_ -> binop_term_
-- On BY reduce production ty_term_ -> binop_term_
-- On BAR reduce production ty_term_ -> binop_term_
-- On AND reduce production ty_term_ -> binop_term_

State 173:
## Known stack suffix:
## binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXOP0 shift to state 201
-- On INFIXCONS shift to state 199
-- On EQ shift to state 203
## Reductions:

State 174:
## Known stack suffix:
## binop_term STAR
## LR(1) items:
binop_term_ -> binop_term STAR . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 176
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 175:
## Known stack suffix:
## binop_term_
## LR(1) items:
mark_location(binop_term_) -> binop_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(binop_term_) -> binop_term_

State 176:
## Known stack suffix:
## binop_term STAR binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term STAR binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On INFIXOP4 shift to state 177
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term STAR binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term STAR binop_term
-- On TRY reduce production binop_term_ -> binop_term STAR binop_term
-- On STAR reduce production binop_term_ -> binop_term STAR binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term STAR binop_term
-- On SEMI reduce production binop_term_ -> binop_term STAR binop_term
-- On RULE reduce production binop_term_ -> binop_term STAR binop_term
-- On RPAREN reduce production binop_term_ -> binop_term STAR binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term STAR binop_term
-- On RBRACK reduce production binop_term_ -> binop_term STAR binop_term
-- On RBRACE reduce production binop_term_ -> binop_term STAR binop_term
-- On OPERATION reduce production binop_term_ -> binop_term STAR binop_term
-- On OPEN reduce production binop_term_ -> binop_term STAR binop_term
-- On MODULE reduce production binop_term_ -> binop_term STAR binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term STAR binop_term
-- On LET reduce production binop_term_ -> binop_term STAR binop_term
-- On INFIXOP3 reduce production binop_term_ -> binop_term STAR binop_term
-- On INFIXOP2 reduce production binop_term_ -> binop_term STAR binop_term
-- On INFIXOP1 reduce production binop_term_ -> binop_term STAR binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term STAR binop_term
-- On INFIXCONS reduce production binop_term_ -> binop_term STAR binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term STAR binop_term
-- On IN reduce production binop_term_ -> binop_term STAR binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term STAR binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term STAR binop_term
-- On EQ reduce production binop_term_ -> binop_term STAR binop_term
-- On EOF reduce production binop_term_ -> binop_term STAR binop_term
-- On END reduce production binop_term_ -> binop_term STAR binop_term
-- On COMMA reduce production binop_term_ -> binop_term STAR binop_term
-- On COLONGT reduce production binop_term_ -> binop_term STAR binop_term
-- On BY reduce production binop_term_ -> binop_term STAR binop_term
-- On BAR reduce production binop_term_ -> binop_term STAR binop_term
-- On ARROW reduce production binop_term_ -> binop_term STAR binop_term
-- On AND reduce production binop_term_ -> binop_term STAR binop_term

State 177:
## Known stack suffix:
## binop_term INFIXOP4
## LR(1) items:
binop_term_ -> binop_term INFIXOP4 . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 178
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 178:
## Known stack suffix:
## binop_term INFIXOP4 binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term INFIXOP4 binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On INFIXOP4 shift to state 177
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On TRY reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On STAR reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On SEMI reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On RULE reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On RPAREN reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On RBRACK reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On RBRACE reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On OPERATION reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On OPEN reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On MODULE reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On LET reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On INFIXOP3 reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On INFIXOP2 reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On INFIXOP1 reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On INFIXCONS reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On IN reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On EQ reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On EOF reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On END reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On COMMA reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On COLONGT reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On BY reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On BAR reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On ARROW reduce production binop_term_ -> binop_term INFIXOP4 binop_term
-- On AND reduce production binop_term_ -> binop_term INFIXOP4 binop_term

State 179:
## Known stack suffix:
## app_term_
## LR(1) items:
binop_term_ -> app_term_ . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
mark_location(app_term_) -> app_term_ . [ EQEQ COLONQT COLONEQ COLON ]
## Transitions:
## Reductions:
-- On WITH reduce production binop_term_ -> app_term_
-- On VERBOSITY reduce production binop_term_ -> app_term_
-- On TRY reduce production binop_term_ -> app_term_
-- On STAR reduce production binop_term_ -> app_term_
-- On SEMISEMI reduce production binop_term_ -> app_term_
-- On SEMI reduce production binop_term_ -> app_term_
-- On RULE reduce production binop_term_ -> app_term_
-- On RPAREN reduce production binop_term_ -> app_term_
-- On REQUIRE reduce production binop_term_ -> app_term_
-- On RBRACK reduce production binop_term_ -> app_term_
-- On RBRACE reduce production binop_term_ -> app_term_
-- On OPERATION reduce production binop_term_ -> app_term_
-- On OPEN reduce production binop_term_ -> app_term_
-- On MODULE reduce production binop_term_ -> app_term_
-- On MLTYPE reduce production binop_term_ -> app_term_
-- On LET reduce production binop_term_ -> app_term_
-- On INFIXOP4 reduce production binop_term_ -> app_term_
-- On INFIXOP3 reduce production binop_term_ -> app_term_
-- On INFIXOP2 reduce production binop_term_ -> app_term_
-- On INFIXOP1 reduce production binop_term_ -> app_term_
-- On INFIXOP0 reduce production binop_term_ -> app_term_
-- On INFIXCONS reduce production binop_term_ -> app_term_
-- On INCLUDE reduce production binop_term_ -> app_term_
-- On IN reduce production binop_term_ -> app_term_
-- On EXTERNAL reduce production binop_term_ -> app_term_
-- On EXCEPTION reduce production binop_term_ -> app_term_
-- On EQEQ reduce production mark_location(app_term_) -> app_term_
-- On EQ reduce production binop_term_ -> app_term_
-- On EOF reduce production binop_term_ -> app_term_
-- On END reduce production binop_term_ -> app_term_
-- On COMMA reduce production binop_term_ -> app_term_
-- On COLONQT reduce production mark_location(app_term_) -> app_term_
-- On COLONGT reduce production binop_term_ -> app_term_
-- On COLONEQ reduce production mark_location(app_term_) -> app_term_
-- On COLON reduce production mark_location(app_term_) -> app_term_
-- On BY reduce production binop_term_ -> app_term_
-- On BAR reduce production binop_term_ -> app_term_
-- On ARROW reduce production binop_term_ -> app_term_
-- On AND reduce production binop_term_ -> app_term_

State 180:
## Known stack suffix:
## app_term
## LR(1) items:
binop_term_ -> app_term . COLONEQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term . EQEQ app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term . EQEQ app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On EQEQ shift to state 181
-- On COLONEQ shift to state 191
## Reductions:

State 181:
## Known stack suffix:
## app_term EQEQ
## LR(1) items:
binop_term_ -> app_term EQEQ . app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ . app_term COLON app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ . app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ . app_term COLON app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 182
-- On any_name shift to state 47
## Reductions:

State 182:
## Known stack suffix:
## app_term EQEQ app_term
## LR(1) items:
binop_term_ -> app_term EQEQ app_term . BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ app_term . COLON app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ app_term . BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ app_term . COLON app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On COLON shift to state 183
-- On BY shift to state 188
## Reductions:

State 183:
## Known stack suffix:
## app_term EQEQ app_term COLON
## LR(1) items:
binop_term_ -> app_term EQEQ app_term COLON . app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ app_term COLON . app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 184
-- On any_name shift to state 47
## Reductions:

State 184:
## Known stack suffix:
## app_term EQEQ app_term COLON app_term
## LR(1) items:
binop_term_ -> app_term EQEQ app_term COLON app_term . BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ app_term COLON app_term . BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On BY shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## app_term EQEQ app_term COLON app_term BY
## LR(1) items:
binop_term_ -> app_term EQEQ app_term COLON app_term BY . app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ app_term COLON app_term BY . QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 186
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 187
-- On any_name shift to state 47
## Reductions:

State 186:
## Known stack suffix:
## app_term EQEQ app_term COLON app_term BY QQMARK
## LR(1) items:
binop_term_ -> app_term EQEQ app_term COLON app_term BY QQMARK . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_term_ -> app_term EQEQ app_term COLON app_term BY QQMARK

State 187:
## Known stack suffix:
## app_term EQEQ app_term COLON app_term BY app_term
## LR(1) items:
binop_term_ -> app_term EQEQ app_term COLON app_term BY app_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_term_ -> app_term EQEQ app_term COLON app_term BY app_term

State 188:
## Known stack suffix:
## app_term EQEQ app_term BY
## LR(1) items:
binop_term_ -> app_term EQEQ app_term BY . app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> app_term EQEQ app_term BY . QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 189
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 190
-- On any_name shift to state 47
## Reductions:

State 189:
## Known stack suffix:
## app_term EQEQ app_term BY QQMARK
## LR(1) items:
binop_term_ -> app_term EQEQ app_term BY QQMARK . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_term_ -> app_term EQEQ app_term BY QQMARK

State 190:
## Known stack suffix:
## app_term EQEQ app_term BY app_term
## LR(1) items:
binop_term_ -> app_term EQEQ app_term BY app_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_term_ -> app_term EQEQ app_term BY app_term

State 191:
## Known stack suffix:
## app_term COLONEQ
## LR(1) items:
binop_term_ -> app_term COLONEQ . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 192
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 192:
## Known stack suffix:
## app_term COLONEQ binop_term
## LR(1) items:
binop_term_ -> app_term COLONEQ binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXOP0 shift to state 201
-- On INFIXCONS shift to state 199
-- On EQ shift to state 203
## Reductions:
-- On WITH reduce production binop_term_ -> app_term COLONEQ binop_term
-- On VERBOSITY reduce production binop_term_ -> app_term COLONEQ binop_term
-- On TRY reduce production binop_term_ -> app_term COLONEQ binop_term
-- On SEMISEMI reduce production binop_term_ -> app_term COLONEQ binop_term
-- On SEMI reduce production binop_term_ -> app_term COLONEQ binop_term
-- On RULE reduce production binop_term_ -> app_term COLONEQ binop_term
-- On RPAREN reduce production binop_term_ -> app_term COLONEQ binop_term
-- On REQUIRE reduce production binop_term_ -> app_term COLONEQ binop_term
-- On RBRACK reduce production binop_term_ -> app_term COLONEQ binop_term
-- On RBRACE reduce production binop_term_ -> app_term COLONEQ binop_term
-- On OPERATION reduce production binop_term_ -> app_term COLONEQ binop_term
-- On OPEN reduce production binop_term_ -> app_term COLONEQ binop_term
-- On MODULE reduce production binop_term_ -> app_term COLONEQ binop_term
-- On MLTYPE reduce production binop_term_ -> app_term COLONEQ binop_term
-- On LET reduce production binop_term_ -> app_term COLONEQ binop_term
-- On INCLUDE reduce production binop_term_ -> app_term COLONEQ binop_term
-- On IN reduce production binop_term_ -> app_term COLONEQ binop_term
-- On EXTERNAL reduce production binop_term_ -> app_term COLONEQ binop_term
-- On EXCEPTION reduce production binop_term_ -> app_term COLONEQ binop_term
-- On EOF reduce production binop_term_ -> app_term COLONEQ binop_term
-- On END reduce production binop_term_ -> app_term COLONEQ binop_term
-- On COMMA reduce production binop_term_ -> app_term COLONEQ binop_term
-- On COLONGT reduce production binop_term_ -> app_term COLONEQ binop_term
-- On BY reduce production binop_term_ -> app_term COLONEQ binop_term
-- On BAR reduce production binop_term_ -> app_term COLONEQ binop_term
-- On ARROW reduce production binop_term_ -> app_term COLONEQ binop_term
-- On AND reduce production binop_term_ -> app_term COLONEQ binop_term

State 193:
## Known stack suffix:
## binop_term INFIXOP3
## LR(1) items:
binop_term_ -> binop_term INFIXOP3 . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 194
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 194:
## Known stack suffix:
## binop_term INFIXOP3 binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term INFIXOP3 binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On INFIXOP4 shift to state 177
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On TRY reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On STAR reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On SEMI reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On RULE reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On RPAREN reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On RBRACK reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On RBRACE reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On OPERATION reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On OPEN reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On MODULE reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On LET reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On INFIXOP3 reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On INFIXOP2 reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On INFIXOP1 reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On INFIXCONS reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On IN reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On EQ reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On EOF reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On END reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On COMMA reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On COLONGT reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On BY reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On BAR reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On ARROW reduce production binop_term_ -> binop_term INFIXOP3 binop_term
-- On AND reduce production binop_term_ -> binop_term INFIXOP3 binop_term

State 195:
## Known stack suffix:
## binop_term INFIXOP2
## LR(1) items:
binop_term_ -> binop_term INFIXOP2 . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 196
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 196:
## Known stack suffix:
## binop_term INFIXOP2 binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term INFIXOP2 binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On TRY reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On SEMI reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On RULE reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On RPAREN reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On RBRACK reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On RBRACE reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On OPERATION reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On OPEN reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On MODULE reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On LET reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On INFIXOP2 reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On INFIXOP1 reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On INFIXCONS reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On IN reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On EQ reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On EOF reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On END reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On COMMA reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On COLONGT reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On BY reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On BAR reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On ARROW reduce production binop_term_ -> binop_term INFIXOP2 binop_term
-- On AND reduce production binop_term_ -> binop_term INFIXOP2 binop_term

State 197:
## Known stack suffix:
## binop_term INFIXOP1
## LR(1) items:
binop_term_ -> binop_term INFIXOP1 . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 198
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 198:
## Known stack suffix:
## binop_term INFIXOP1 binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term INFIXOP1 binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXCONS shift to state 199
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On TRY reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On SEMI reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On RULE reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On RPAREN reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On RBRACK reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On RBRACE reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On OPERATION reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On OPEN reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On MODULE reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On LET reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On IN reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On EQ reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On EOF reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On END reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On COMMA reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On COLONGT reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On BY reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On BAR reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On ARROW reduce production binop_term_ -> binop_term INFIXOP1 binop_term
-- On AND reduce production binop_term_ -> binop_term INFIXOP1 binop_term

State 199:
## Known stack suffix:
## binop_term INFIXCONS
## LR(1) items:
binop_term_ -> binop_term INFIXCONS . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 200
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 200:
## Known stack suffix:
## binop_term INFIXCONS binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term INFIXCONS binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXCONS shift to state 199
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On TRY reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On SEMI reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On RULE reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On RPAREN reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On RBRACK reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On RBRACE reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On OPERATION reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On OPEN reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On MODULE reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On LET reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On INFIXOP1 reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On IN reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On EQ reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On EOF reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On END reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On COMMA reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On COLONGT reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On BY reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On BAR reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On ARROW reduce production binop_term_ -> binop_term INFIXCONS binop_term
-- On AND reduce production binop_term_ -> binop_term INFIXCONS binop_term

State 201:
## Known stack suffix:
## binop_term INFIXOP0
## LR(1) items:
binop_term_ -> binop_term INFIXOP0 . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 202
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 202:
## Known stack suffix:
## binop_term INFIXOP0 binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term INFIXOP0 binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXCONS shift to state 199
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On TRY reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On SEMI reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On RULE reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On RPAREN reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On RBRACK reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On RBRACE reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On OPERATION reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On OPEN reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On MODULE reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On LET reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On IN reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On EQ reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On EOF reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On END reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On COMMA reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On COLONGT reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On BY reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On BAR reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On ARROW reduce production binop_term_ -> binop_term INFIXOP0 binop_term
-- On AND reduce production binop_term_ -> binop_term INFIXOP0 binop_term

State 203:
## Known stack suffix:
## binop_term EQ
## LR(1) items:
binop_term_ -> binop_term EQ . binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 204
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 204:
## Known stack suffix:
## binop_term EQ binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term EQ binop_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXCONS shift to state 199
## Reductions:
-- On WITH reduce production binop_term_ -> binop_term EQ binop_term
-- On VERBOSITY reduce production binop_term_ -> binop_term EQ binop_term
-- On TRY reduce production binop_term_ -> binop_term EQ binop_term
-- On SEMISEMI reduce production binop_term_ -> binop_term EQ binop_term
-- On SEMI reduce production binop_term_ -> binop_term EQ binop_term
-- On RULE reduce production binop_term_ -> binop_term EQ binop_term
-- On RPAREN reduce production binop_term_ -> binop_term EQ binop_term
-- On REQUIRE reduce production binop_term_ -> binop_term EQ binop_term
-- On RBRACK reduce production binop_term_ -> binop_term EQ binop_term
-- On RBRACE reduce production binop_term_ -> binop_term EQ binop_term
-- On OPERATION reduce production binop_term_ -> binop_term EQ binop_term
-- On OPEN reduce production binop_term_ -> binop_term EQ binop_term
-- On MODULE reduce production binop_term_ -> binop_term EQ binop_term
-- On MLTYPE reduce production binop_term_ -> binop_term EQ binop_term
-- On LET reduce production binop_term_ -> binop_term EQ binop_term
-- On INFIXOP0 reduce production binop_term_ -> binop_term EQ binop_term
-- On INCLUDE reduce production binop_term_ -> binop_term EQ binop_term
-- On IN reduce production binop_term_ -> binop_term EQ binop_term
-- On EXTERNAL reduce production binop_term_ -> binop_term EQ binop_term
-- On EXCEPTION reduce production binop_term_ -> binop_term EQ binop_term
-- On EQ reduce production binop_term_ -> binop_term EQ binop_term
-- On EOF reduce production binop_term_ -> binop_term EQ binop_term
-- On END reduce production binop_term_ -> binop_term EQ binop_term
-- On COMMA reduce production binop_term_ -> binop_term EQ binop_term
-- On COLONGT reduce production binop_term_ -> binop_term EQ binop_term
-- On BY reduce production binop_term_ -> binop_term EQ binop_term
-- On BAR reduce production binop_term_ -> binop_term EQ binop_term
-- On ARROW reduce production binop_term_ -> binop_term EQ binop_term
-- On AND reduce production binop_term_ -> binop_term EQ binop_term

State 205:
## Known stack suffix:
## abstraction
## LR(1) items:
ty_term_ -> abstraction . binop_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 206
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 206:
## Known stack suffix:
## abstraction binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
ty_term_ -> abstraction binop_term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXOP0 shift to state 201
-- On INFIXCONS shift to state 199
-- On EQ shift to state 203
## Reductions:
-- On WITH reduce production ty_term_ -> abstraction binop_term
-- On VERBOSITY reduce production ty_term_ -> abstraction binop_term
-- On TRY reduce production ty_term_ -> abstraction binop_term
-- On SEMISEMI reduce production ty_term_ -> abstraction binop_term
-- On RULE reduce production ty_term_ -> abstraction binop_term
-- On RPAREN reduce production ty_term_ -> abstraction binop_term
-- On REQUIRE reduce production ty_term_ -> abstraction binop_term
-- On RBRACE reduce production ty_term_ -> abstraction binop_term
-- On OPERATION reduce production ty_term_ -> abstraction binop_term
-- On OPEN reduce production ty_term_ -> abstraction binop_term
-- On MODULE reduce production ty_term_ -> abstraction binop_term
-- On MLTYPE reduce production ty_term_ -> abstraction binop_term
-- On LET reduce production ty_term_ -> abstraction binop_term
-- On INCLUDE reduce production ty_term_ -> abstraction binop_term
-- On IN reduce production ty_term_ -> abstraction binop_term
-- On EXTERNAL reduce production ty_term_ -> abstraction binop_term
-- On EXCEPTION reduce production ty_term_ -> abstraction binop_term
-- On EOF reduce production ty_term_ -> abstraction binop_term
-- On END reduce production ty_term_ -> abstraction binop_term
-- On COMMA reduce production ty_term_ -> abstraction binop_term
-- On COLONGT reduce production ty_term_ -> abstraction binop_term
-- On BY reduce production ty_term_ -> abstraction binop_term
-- On BAR reduce production ty_term_ -> abstraction binop_term
-- On AND reduce production ty_term_ -> abstraction binop_term

State 207:
## Known stack suffix:
## anon_name(tt_name)
## LR(1) items:
nonempty_list(anon_name(tt_name)) -> anon_name(tt_name) . [ RBRACE COLON ]
nonempty_list(anon_name(tt_name)) -> anon_name(tt_name) . nonempty_list(anon_name(tt_name)) [ RBRACE COLON ]
## Transitions:
-- On UNDERSCORE shift to state 157
-- On NAME shift to state 158
-- On LPAREN shift to state 26
-- On tt_name shift to state 159
-- On opt_name(tt_name) shift to state 160
-- On nonempty_list(anon_name(tt_name)) shift to state 208
-- On anon_name(tt_name) shift to state 207
## Reductions:
-- On RBRACE reduce production nonempty_list(anon_name(tt_name)) -> anon_name(tt_name)
-- On COLON reduce production nonempty_list(anon_name(tt_name)) -> anon_name(tt_name)

State 208:
## Known stack suffix:
## anon_name(tt_name) nonempty_list(anon_name(tt_name))
## LR(1) items:
nonempty_list(anon_name(tt_name)) -> anon_name(tt_name) nonempty_list(anon_name(tt_name)) . [ RBRACE COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(anon_name(tt_name)) -> anon_name(tt_name) nonempty_list(anon_name(tt_name))

State 209:
## Known stack suffix:
## HANDLER
## LR(1) items:
term_ -> HANDLER . handler_cases END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On VAL shift to state 210
-- On RAISE shift to state 396
-- On NAME shift to state 398
-- On BAR shift to state 399
-- On separated_nonempty_list(BAR,handler_case) shift to state 420
-- On op_name shift to state 401
-- On module_path shift to state 410
-- On module_name shift to state 45
-- On loption(separated_nonempty_list(BAR,handler_case)) shift to state 421
-- On handler_cases shift to state 422
-- On handler_case shift to state 417
## Reductions:
-- On END reduce production loption(separated_nonempty_list(BAR,handler_case)) ->

State 210:
## Known stack suffix:
## VAL
## LR(1) items:
handler_case -> VAL . match_case [ END BAR ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 325
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On match_case shift to state 395
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 211:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern_ -> UNDERSCORE . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_ -> UNDERSCORE

State 212:
## Known stack suffix:
## UATOM
## LR(1) items:
prefix_pattern_ -> UATOM . prefix_pattern [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 324
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
## Reductions:

State 213:
## Known stack suffix:
## QUOTED_STRING
## LR(1) items:
simple_pattern_ -> QUOTED_STRING . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_ -> QUOTED_STRING

State 214:
## Known stack suffix:
## QQMARK
## LR(1) items:
simple_pattern_ -> QQMARK . TYPE [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On TYPE shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## QQMARK TYPE
## LR(1) items:
simple_pattern_ -> QQMARK TYPE . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_ -> QQMARK TYPE

State 216:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
prefix_pattern_ -> PREFIXOP . prefix_pattern [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 315
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
## Reductions:

State 217:
## Known stack suffix:
## LPAREN
## LR(1) items:
ml_name -> LPAREN . INFIXCONS RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . EQ RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . STAR RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . PREFIXOP RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
simple_pattern_ -> LPAREN . loption(separated_nonempty_list(COMMA,pattern)) RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On STAR shift to state 64
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 323
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On INFIXOP4 shift to state 68
-- On INFIXOP3 shift to state 70
-- On INFIXOP2 shift to state 72
-- On INFIXOP1 shift to state 74
-- On INFIXOP0 shift to state 76
-- On INFIXCONS shift to state 78
-- On EQ shift to state 80
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(COMMA,pattern) shift to state 316
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 317
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On loption(separated_nonempty_list(COMMA,pattern)) shift to state 320
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,pattern)) ->

State 218:
## Known stack suffix:
## QQMARK
## LR(1) items:
pattern_ -> QQMARK . COLON binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
simple_pattern_ -> QQMARK . TYPE [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On TYPE shift to state 215
-- On COLON shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## QQMARK COLON
## LR(1) items:
pattern_ -> QQMARK COLON . binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 322
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 220:
## Known stack suffix:
## NAME
## LR(1) items:
ml_name -> NAME . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
module_name -> NAME . [ PERIOD ]
tt_name -> NAME . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> NAME
-- On UNDERSCORE reduce production tt_name -> NAME
-- On UATOM reduce production tt_name -> NAME
-- On TYPE reduce production ml_name -> NAME
-- On STAR reduce production ml_name -> NAME
-- On SEMI reduce production ml_name -> NAME
-- On RPAREN reduce production ml_name -> NAME
-- On RBRACK reduce production ml_name -> NAME
-- On RBRACE reduce production ml_name -> NAME
-- On QUOTED_STRING reduce production tt_name -> NAME
-- On QQMARK reduce production tt_name -> NAME
-- On PREFIXOP reduce production tt_name -> NAME
-- On PERIOD reduce production module_name -> NAME
-- On NAME reduce production tt_name -> NAME
-- On LPAREN reduce production tt_name -> NAME
-- On LBRACK reduce production tt_name -> NAME
-- On INFIXOP4 reduce production ml_name -> NAME
-- On INFIXOP3 reduce production ml_name -> NAME
-- On INFIXOP2 reduce production ml_name -> NAME
-- On INFIXOP1 reduce production ml_name -> NAME
-- On INFIXOP0 reduce production ml_name -> NAME
-- On INFIXCONS reduce production ml_name -> NAME
-- On EQEQ reduce production ml_name -> NAME
-- On EQ reduce production ml_name -> NAME
-- On COMMA reduce production ml_name -> NAME
-- On COLONGT reduce production ml_name -> NAME
-- On COLON reduce production ml_name -> NAME
-- On BY reduce production ml_name -> NAME
-- On AS reduce production ml_name -> NAME
-- On ARROW reduce production ml_name -> NAME

State 221:
## Known stack suffix:
## LPAREN
## LR(1) items:
ml_name -> LPAREN . INFIXCONS RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . EQ RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . STAR RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . PREFIXOP RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
simple_pattern_ -> LPAREN . loption(separated_nonempty_list(COMMA,pattern)) RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN . INFIXCONS RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . EQ RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP0 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP1 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP2 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP3 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . STAR RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP4 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . PREFIXOP RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On STAR shift to state 222
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 224
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On INFIXOP4 shift to state 242
-- On INFIXOP3 shift to state 244
-- On INFIXOP2 shift to state 246
-- On INFIXOP1 shift to state 248
-- On INFIXOP0 shift to state 250
-- On INFIXCONS shift to state 252
-- On EQ shift to state 254
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(COMMA,pattern) shift to state 316
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 317
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On loption(separated_nonempty_list(COMMA,pattern)) shift to state 320
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,pattern)) ->

State 222:
## Known stack suffix:
## LPAREN STAR
## LR(1) items:
ml_name -> LPAREN STAR . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN STAR . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## LPAREN STAR RPAREN
## LR(1) items:
ml_name -> LPAREN STAR RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN STAR RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN STAR RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN STAR RPAREN
-- On UATOM reduce production tt_name -> LPAREN STAR RPAREN
-- On TYPE reduce production ml_name -> LPAREN STAR RPAREN
-- On STAR reduce production ml_name -> LPAREN STAR RPAREN
-- On SEMI reduce production ml_name -> LPAREN STAR RPAREN
-- On RPAREN reduce production ml_name -> LPAREN STAR RPAREN
-- On RBRACK reduce production ml_name -> LPAREN STAR RPAREN
-- On RBRACE reduce production ml_name -> LPAREN STAR RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN STAR RPAREN
-- On QQMARK reduce production tt_name -> LPAREN STAR RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN STAR RPAREN
-- On NAME reduce production tt_name -> LPAREN STAR RPAREN
-- On LPAREN reduce production tt_name -> LPAREN STAR RPAREN
-- On LBRACK reduce production tt_name -> LPAREN STAR RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN STAR RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN STAR RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN STAR RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN STAR RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN STAR RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN STAR RPAREN
-- On EQEQ reduce production ml_name -> LPAREN STAR RPAREN
-- On EQ reduce production ml_name -> LPAREN STAR RPAREN
-- On COMMA reduce production ml_name -> LPAREN STAR RPAREN
-- On COLONGT reduce production ml_name -> LPAREN STAR RPAREN
-- On COLON reduce production ml_name -> LPAREN STAR RPAREN
-- On BY reduce production ml_name -> LPAREN STAR RPAREN
-- On AS reduce production ml_name -> LPAREN STAR RPAREN
-- On ARROW reduce production ml_name -> LPAREN STAR RPAREN

State 224:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
ml_name -> LPAREN PREFIXOP . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
prefix_pattern_ -> PREFIXOP . prefix_pattern [ TYPE STAR RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ]
tt_name -> LPAREN PREFIXOP . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On RPAREN shift to state 225
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 315
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
## Reductions:

State 225:
## Known stack suffix:
## LPAREN PREFIXOP RPAREN
## LR(1) items:
ml_name -> LPAREN PREFIXOP RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN PREFIXOP RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On UATOM reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On TYPE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On STAR reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On SEMI reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On RPAREN reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On RBRACK reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On RBRACE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On QQMARK reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On NAME reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On LPAREN reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On LBRACK reduce production tt_name -> LPAREN PREFIXOP RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On EQEQ reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On EQ reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On COMMA reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On COLONGT reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On COLON reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On BY reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On AS reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On ARROW reduce production ml_name -> LPAREN PREFIXOP RPAREN

State 226:
## Known stack suffix:
## LBRACK
## LR(1) items:
simple_pattern_ -> LBRACK . loption(separated_nonempty_list(SEMI,pattern)) RBRACK [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(SEMI,pattern) shift to state 309
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 310
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On loption(separated_nonempty_list(SEMI,pattern)) shift to state 313
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:
-- On RBRACK reduce production loption(separated_nonempty_list(SEMI,pattern)) ->

State 227:
## Known stack suffix:
## LBRACE
## LR(1) items:
tt_maybe_typed_binder -> LBRACE . nonempty_list(opt_name(tt_name)) RBRACE [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
tt_maybe_typed_binder -> LBRACE . nonempty_list(opt_name(tt_name)) COLON pattern RBRACE [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 157
-- On NAME shift to state 158
-- On LPAREN shift to state 26
-- On tt_name shift to state 159
-- On opt_name(tt_name) shift to state 228
-- On nonempty_list(opt_name(tt_name)) shift to state 230
## Reductions:

State 228:
## Known stack suffix:
## opt_name(tt_name)
## LR(1) items:
nonempty_list(opt_name(tt_name)) -> opt_name(tt_name) . [ RBRACE COLON ]
nonempty_list(opt_name(tt_name)) -> opt_name(tt_name) . nonempty_list(opt_name(tt_name)) [ RBRACE COLON ]
## Transitions:
-- On UNDERSCORE shift to state 157
-- On NAME shift to state 158
-- On LPAREN shift to state 26
-- On tt_name shift to state 159
-- On opt_name(tt_name) shift to state 228
-- On nonempty_list(opt_name(tt_name)) shift to state 229
## Reductions:
-- On RBRACE reduce production nonempty_list(opt_name(tt_name)) -> opt_name(tt_name)
-- On COLON reduce production nonempty_list(opt_name(tt_name)) -> opt_name(tt_name)

State 229:
## Known stack suffix:
## opt_name(tt_name) nonempty_list(opt_name(tt_name))
## LR(1) items:
nonempty_list(opt_name(tt_name)) -> opt_name(tt_name) nonempty_list(opt_name(tt_name)) . [ RBRACE COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(opt_name(tt_name)) -> opt_name(tt_name) nonempty_list(opt_name(tt_name))

State 230:
## Known stack suffix:
## LBRACE nonempty_list(opt_name(tt_name))
## LR(1) items:
tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) . RBRACE [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) . COLON pattern RBRACE [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
## Transitions:
-- On RBRACE shift to state 231
-- On COLON shift to state 232
## Reductions:

State 231:
## Known stack suffix:
## LBRACE nonempty_list(opt_name(tt_name)) RBRACE
## LR(1) items:
tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) RBRACE . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) RBRACE

State 232:
## Known stack suffix:
## LBRACE nonempty_list(opt_name(tt_name)) COLON
## LR(1) items:
tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) COLON . pattern RBRACE [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 307
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 233:
## Known stack suffix:
## tt_maybe_typed_binder
## LR(1) items:
pattern_ -> tt_maybe_typed_binder . pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 237
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 234:
## Known stack suffix:
## simple_pattern_
## LR(1) items:
prefix_pattern_ -> simple_pattern_ . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_pattern_ -> simple_pattern_

State 235:
## Known stack suffix:
## prefix_pattern_
## LR(1) items:
app_pattern_ -> prefix_pattern_ . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_pattern_ -> prefix_pattern_

State 236:
## Known stack suffix:
## pattern_
## LR(1) items:
mark_location(pattern_) -> pattern_ . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(pattern_) -> pattern_

State 237:
## Known stack suffix:
## tt_maybe_typed_binder pattern
## LR(1) items:
pattern_ -> tt_maybe_typed_binder pattern . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern_ -> tt_maybe_typed_binder pattern

State 238:
## Known stack suffix:
## module_path
## LR(1) items:
app_pattern_ -> module_path . PERIOD any_name nonempty_list(prefix_pattern) [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
module_path -> module_path . PERIOD module_name [ PERIOD ]
simple_pattern_ -> module_path . PERIOD ml_name [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On PERIOD shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## module_path PERIOD
## LR(1) items:
app_pattern_ -> module_path PERIOD . any_name nonempty_list(prefix_pattern) [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
module_path -> module_path PERIOD . module_name [ PERIOD ]
simple_pattern_ -> module_path PERIOD . ml_name [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On NAME shift to state 220
-- On LPAREN shift to state 240
-- On tt_name shift to state 20
-- On module_name shift to state 43
-- On ml_name shift to state 256
-- On any_name shift to state 257
## Reductions:

State 240:
## Known stack suffix:
## LPAREN
## LR(1) items:
ml_name -> LPAREN . INFIXCONS RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . EQ RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . STAR RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
ml_name -> LPAREN . PREFIXOP RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN . INFIXCONS RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . EQ RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP0 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP1 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP2 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP3 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . STAR RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . INFIXOP4 RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
tt_name -> LPAREN . PREFIXOP RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On STAR shift to state 222
-- On PREFIXOP shift to state 241
-- On INFIXOP4 shift to state 242
-- On INFIXOP3 shift to state 244
-- On INFIXOP2 shift to state 246
-- On INFIXOP1 shift to state 248
-- On INFIXOP0 shift to state 250
-- On INFIXCONS shift to state 252
-- On EQ shift to state 254
## Reductions:

State 241:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
ml_name -> LPAREN PREFIXOP . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN PREFIXOP . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 225
## Reductions:

State 242:
## Known stack suffix:
## LPAREN INFIXOP4
## LR(1) items:
ml_name -> LPAREN INFIXOP4 . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP4 . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## LPAREN INFIXOP4 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP4 RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP4 RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On UATOM reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On TYPE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On SEMI reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On RPAREN reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On RBRACK reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On RBRACE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On QQMARK reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On NAME reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On LPAREN reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On LBRACK reduce production tt_name -> LPAREN INFIXOP4 RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On EQEQ reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On EQ reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On COMMA reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On COLONGT reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On COLON reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On BY reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On AS reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP4 RPAREN

State 244:
## Known stack suffix:
## LPAREN INFIXOP3
## LR(1) items:
ml_name -> LPAREN INFIXOP3 . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP3 . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## LPAREN INFIXOP3 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP3 RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP3 RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On UATOM reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On TYPE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On SEMI reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On RPAREN reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On RBRACK reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On RBRACE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On QQMARK reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On NAME reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On LPAREN reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On LBRACK reduce production tt_name -> LPAREN INFIXOP3 RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On EQEQ reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On EQ reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On COMMA reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On COLONGT reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On COLON reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On BY reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On AS reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP3 RPAREN

State 246:
## Known stack suffix:
## LPAREN INFIXOP2
## LR(1) items:
ml_name -> LPAREN INFIXOP2 . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP2 . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## LPAREN INFIXOP2 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP2 RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP2 RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On UATOM reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On TYPE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On SEMI reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On RPAREN reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On RBRACK reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On RBRACE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On QQMARK reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On NAME reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On LPAREN reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On LBRACK reduce production tt_name -> LPAREN INFIXOP2 RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On EQEQ reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On EQ reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On COMMA reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On COLONGT reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On COLON reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On BY reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On AS reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP2 RPAREN

State 248:
## Known stack suffix:
## LPAREN INFIXOP1
## LR(1) items:
ml_name -> LPAREN INFIXOP1 . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP1 . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## LPAREN INFIXOP1 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP1 RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP1 RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On UATOM reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On TYPE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On SEMI reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On RPAREN reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On RBRACK reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On RBRACE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On QQMARK reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On NAME reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On LPAREN reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On LBRACK reduce production tt_name -> LPAREN INFIXOP1 RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On EQEQ reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On EQ reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On COMMA reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On COLONGT reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On COLON reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On BY reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On AS reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP1 RPAREN

State 250:
## Known stack suffix:
## LPAREN INFIXOP0
## LR(1) items:
ml_name -> LPAREN INFIXOP0 . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP0 . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## LPAREN INFIXOP0 RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXOP0 RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXOP0 RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On UATOM reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On TYPE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On SEMI reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On RPAREN reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On RBRACK reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On RBRACE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On QQMARK reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On NAME reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On LPAREN reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On LBRACK reduce production tt_name -> LPAREN INFIXOP0 RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On EQEQ reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On EQ reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On COMMA reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On COLONGT reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On COLON reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On BY reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On AS reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP0 RPAREN

State 252:
## Known stack suffix:
## LPAREN INFIXCONS
## LR(1) items:
ml_name -> LPAREN INFIXCONS . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXCONS . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## LPAREN INFIXCONS RPAREN
## LR(1) items:
ml_name -> LPAREN INFIXCONS RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN INFIXCONS RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On UATOM reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On TYPE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On SEMI reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On RPAREN reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On RBRACK reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On RBRACE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On QQMARK reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On NAME reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On LPAREN reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On LBRACK reduce production tt_name -> LPAREN INFIXCONS RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On EQEQ reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On EQ reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On COMMA reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On COLONGT reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On COLON reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On BY reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On AS reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXCONS RPAREN

State 254:
## Known stack suffix:
## LPAREN EQ
## LR(1) items:
ml_name -> LPAREN EQ . RPAREN [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN EQ . RPAREN [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
-- On RPAREN shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## LPAREN EQ RPAREN
## LR(1) items:
ml_name -> LPAREN EQ RPAREN . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
tt_name -> LPAREN EQ RPAREN . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK ]
## Transitions:
## Reductions:
-- On WHEN reduce production ml_name -> LPAREN EQ RPAREN
-- On UNDERSCORE reduce production tt_name -> LPAREN EQ RPAREN
-- On UATOM reduce production tt_name -> LPAREN EQ RPAREN
-- On TYPE reduce production ml_name -> LPAREN EQ RPAREN
-- On STAR reduce production ml_name -> LPAREN EQ RPAREN
-- On SEMI reduce production ml_name -> LPAREN EQ RPAREN
-- On RPAREN reduce production ml_name -> LPAREN EQ RPAREN
-- On RBRACK reduce production ml_name -> LPAREN EQ RPAREN
-- On RBRACE reduce production ml_name -> LPAREN EQ RPAREN
-- On QUOTED_STRING reduce production tt_name -> LPAREN EQ RPAREN
-- On QQMARK reduce production tt_name -> LPAREN EQ RPAREN
-- On PREFIXOP reduce production tt_name -> LPAREN EQ RPAREN
-- On NAME reduce production tt_name -> LPAREN EQ RPAREN
-- On LPAREN reduce production tt_name -> LPAREN EQ RPAREN
-- On LBRACK reduce production tt_name -> LPAREN EQ RPAREN
-- On INFIXOP4 reduce production ml_name -> LPAREN EQ RPAREN
-- On INFIXOP3 reduce production ml_name -> LPAREN EQ RPAREN
-- On INFIXOP2 reduce production ml_name -> LPAREN EQ RPAREN
-- On INFIXOP1 reduce production ml_name -> LPAREN EQ RPAREN
-- On INFIXOP0 reduce production ml_name -> LPAREN EQ RPAREN
-- On INFIXCONS reduce production ml_name -> LPAREN EQ RPAREN
-- On EQEQ reduce production ml_name -> LPAREN EQ RPAREN
-- On EQ reduce production ml_name -> LPAREN EQ RPAREN
-- On COMMA reduce production ml_name -> LPAREN EQ RPAREN
-- On COLONGT reduce production ml_name -> LPAREN EQ RPAREN
-- On COLON reduce production ml_name -> LPAREN EQ RPAREN
-- On BY reduce production ml_name -> LPAREN EQ RPAREN
-- On AS reduce production ml_name -> LPAREN EQ RPAREN
-- On ARROW reduce production ml_name -> LPAREN EQ RPAREN

State 256:
## Known stack suffix:
## module_path PERIOD ml_name
## LR(1) items:
simple_pattern_ -> module_path PERIOD ml_name . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_ -> module_path PERIOD ml_name

State 257:
## Known stack suffix:
## module_path PERIOD any_name
## LR(1) items:
app_pattern_ -> module_path PERIOD any_name . nonempty_list(prefix_pattern) [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 259
-- On nonempty_list(prefix_pattern) shift to state 265
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
## Reductions:

State 258:
## Known stack suffix:
## prefix_pattern_
## LR(1) items:
mark_location(prefix_pattern_) -> prefix_pattern_ . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(prefix_pattern_) -> prefix_pattern_

State 259:
## Known stack suffix:
## prefix_pattern
## LR(1) items:
nonempty_list(prefix_pattern) -> prefix_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
nonempty_list(prefix_pattern) -> prefix_pattern . nonempty_list(prefix_pattern) [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 259
-- On nonempty_list(prefix_pattern) shift to state 260
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
## Reductions:
-- On WHEN reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On TYPE reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On STAR reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On SEMI reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On RPAREN reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On RBRACK reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On RBRACE reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On INFIXOP4 reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On INFIXOP3 reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On INFIXOP2 reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On INFIXOP1 reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On INFIXOP0 reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On INFIXCONS reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On EQEQ reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On EQ reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On COMMA reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On COLONGT reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On COLON reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On BY reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On AS reduce production nonempty_list(prefix_pattern) -> prefix_pattern
-- On ARROW reduce production nonempty_list(prefix_pattern) -> prefix_pattern

State 260:
## Known stack suffix:
## prefix_pattern nonempty_list(prefix_pattern)
## LR(1) items:
nonempty_list(prefix_pattern) -> prefix_pattern nonempty_list(prefix_pattern) . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(prefix_pattern) -> prefix_pattern nonempty_list(prefix_pattern)

State 261:
## Known stack suffix:
## module_path
## LR(1) items:
module_path -> module_path . PERIOD module_name [ PERIOD ]
simple_pattern_ -> module_path . PERIOD ml_name [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On PERIOD shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## module_path PERIOD
## LR(1) items:
module_path -> module_path PERIOD . module_name [ PERIOD ]
simple_pattern_ -> module_path PERIOD . ml_name [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On NAME shift to state 57
-- On LPAREN shift to state 89
-- On module_name shift to state 43
-- On ml_name shift to state 256
## Reductions:

State 263:
## Known stack suffix:
## ml_name
## LR(1) items:
simple_pattern_ -> ml_name . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_ -> ml_name

State 264:
## Known stack suffix:
## mark_location(prefix_pattern_)
## LR(1) items:
prefix_pattern -> mark_location(prefix_pattern_) . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_pattern -> mark_location(prefix_pattern_)

State 265:
## Known stack suffix:
## module_path PERIOD any_name nonempty_list(prefix_pattern)
## LR(1) items:
app_pattern_ -> module_path PERIOD any_name nonempty_list(prefix_pattern) . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_pattern_ -> module_path PERIOD any_name nonempty_list(prefix_pattern)

State 266:
## Known stack suffix:
## mark_location(pattern_)
## LR(1) items:
pattern -> mark_location(pattern_) . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> mark_location(pattern_)

State 267:
## Known stack suffix:
## mark_location(binop_pattern_)
## LR(1) items:
binop_pattern -> mark_location(binop_pattern_) . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_pattern -> mark_location(binop_pattern_)

State 268:
## Known stack suffix:
## binop_pattern_
## LR(1) items:
mark_location(binop_pattern_) -> binop_pattern_ . [ TYPE STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COLONGT COLON BY AS ]
pattern_ -> binop_pattern_ . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Reductions:
-- On WHEN reduce production pattern_ -> binop_pattern_
-- On TYPE reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On STAR reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On SEMI reduce production pattern_ -> binop_pattern_
-- On RPAREN reduce production pattern_ -> binop_pattern_
-- On RBRACK reduce production pattern_ -> binop_pattern_
-- On RBRACE reduce production pattern_ -> binop_pattern_
-- On INFIXOP4 reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On INFIXOP3 reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On INFIXOP2 reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On INFIXOP1 reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On INFIXOP0 reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On INFIXCONS reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On EQEQ reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On EQ reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On COMMA reduce production pattern_ -> binop_pattern_
-- On COLONGT reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On COLON reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On BY reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On AS reduce production mark_location(binop_pattern_) -> binop_pattern_
-- On ARROW reduce production pattern_ -> binop_pattern_

State 269:
## Known stack suffix:
## binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ARROW ]
pattern_ -> binop_pattern . AS binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . TYPE [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . COLON binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . COLONGT prod_mlty [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern COLON pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern COLON binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On TYPE shift to state 270
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXOP0 shift to state 287
-- On INFIXCONS shift to state 285
-- On EQEQ shift to state 289
-- On EQ shift to state 291
-- On COLONGT shift to state 296
-- On COLON shift to state 299
-- On AS shift to state 303
## Reductions:

State 270:
## Known stack suffix:
## binop_pattern TYPE
## LR(1) items:
pattern_ -> binop_pattern TYPE . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern_ -> binop_pattern TYPE

State 271:
## Known stack suffix:
## binop_pattern STAR
## LR(1) items:
binop_pattern_ -> binop_pattern STAR . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 273
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 272:
## Known stack suffix:
## binop_pattern_
## LR(1) items:
mark_location(binop_pattern_) -> binop_pattern_ . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(binop_pattern_) -> binop_pattern_

State 273:
## Known stack suffix:
## binop_pattern STAR binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern STAR binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On INFIXOP4 shift to state 274
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On STAR reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On INFIXOP3 reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On INFIXOP2 reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On INFIXOP1 reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On INFIXCONS reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern STAR binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern STAR binop_pattern

State 274:
## Known stack suffix:
## binop_pattern INFIXOP4
## LR(1) items:
binop_pattern_ -> binop_pattern INFIXOP4 . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 275
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 275:
## Known stack suffix:
## binop_pattern INFIXOP4 binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On INFIXOP4 shift to state 274
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On STAR reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On INFIXOP3 reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On INFIXOP2 reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On INFIXOP1 reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On INFIXCONS reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern INFIXOP4 binop_pattern

State 276:
## Known stack suffix:
## app_pattern_
## LR(1) items:
binop_pattern_ -> app_pattern_ . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_pattern_ -> app_pattern_

State 277:
## Known stack suffix:
## any_name
## LR(1) items:
app_pattern_ -> any_name . nonempty_list(prefix_pattern) [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 259
-- On nonempty_list(prefix_pattern) shift to state 278
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
## Reductions:

State 278:
## Known stack suffix:
## any_name nonempty_list(prefix_pattern)
## LR(1) items:
app_pattern_ -> any_name nonempty_list(prefix_pattern) . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_pattern_ -> any_name nonempty_list(prefix_pattern)

State 279:
## Known stack suffix:
## binop_pattern INFIXOP3
## LR(1) items:
binop_pattern_ -> binop_pattern INFIXOP3 . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 280
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 280:
## Known stack suffix:
## binop_pattern INFIXOP3 binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On INFIXOP4 shift to state 274
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On STAR reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On INFIXOP3 reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On INFIXOP2 reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On INFIXOP1 reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On INFIXCONS reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern INFIXOP3 binop_pattern

State 281:
## Known stack suffix:
## binop_pattern INFIXOP2
## LR(1) items:
binop_pattern_ -> binop_pattern INFIXOP2 . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 282
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 282:
## Known stack suffix:
## binop_pattern INFIXOP2 binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On INFIXOP2 reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On INFIXOP1 reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On INFIXCONS reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern INFIXOP2 binop_pattern

State 283:
## Known stack suffix:
## binop_pattern INFIXOP1
## LR(1) items:
binop_pattern_ -> binop_pattern INFIXOP1 . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 284
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 284:
## Known stack suffix:
## binop_pattern INFIXOP1 binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXCONS shift to state 285
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern INFIXOP1 binop_pattern

State 285:
## Known stack suffix:
## binop_pattern INFIXCONS
## LR(1) items:
binop_pattern_ -> binop_pattern INFIXCONS . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 286
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 286:
## Known stack suffix:
## binop_pattern INFIXCONS binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern INFIXCONS binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXCONS shift to state 285
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On INFIXOP1 reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern INFIXCONS binop_pattern

State 287:
## Known stack suffix:
## binop_pattern INFIXOP0
## LR(1) items:
binop_pattern_ -> binop_pattern INFIXOP0 . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 288
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 288:
## Known stack suffix:
## binop_pattern INFIXOP0 binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXCONS shift to state 285
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern INFIXOP0 binop_pattern

State 289:
## Known stack suffix:
## binop_pattern EQEQ
## LR(1) items:
pattern_ -> binop_pattern EQEQ . binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ . binop_pattern COLON pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ . binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ . binop_pattern COLON binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 290
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 290:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA COLON BY ARROW ]
pattern_ -> binop_pattern EQEQ binop_pattern . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ binop_pattern . COLON pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ binop_pattern . BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ binop_pattern . COLON binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXOP0 shift to state 287
-- On INFIXCONS shift to state 285
-- On EQ shift to state 291
-- On COLON shift to state 293
-- On BY shift to state 305
## Reductions:
-- On WHEN reduce production pattern_ -> binop_pattern EQEQ binop_pattern
-- On SEMI reduce production pattern_ -> binop_pattern EQEQ binop_pattern
-- On RPAREN reduce production pattern_ -> binop_pattern EQEQ binop_pattern
-- On RBRACK reduce production pattern_ -> binop_pattern EQEQ binop_pattern
-- On RBRACE reduce production pattern_ -> binop_pattern EQEQ binop_pattern
-- On COMMA reduce production pattern_ -> binop_pattern EQEQ binop_pattern
-- On ARROW reduce production pattern_ -> binop_pattern EQEQ binop_pattern

State 291:
## Known stack suffix:
## binop_pattern EQ
## LR(1) items:
binop_pattern_ -> binop_pattern EQ . binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 292
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 292:
## Known stack suffix:
## binop_pattern EQ binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern EQ binop_pattern . [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXCONS shift to state 285
## Reductions:
-- On WHEN reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On TYPE reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On SEMI reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On RPAREN reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On RBRACK reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On RBRACE reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On INFIXOP0 reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On EQEQ reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On EQ reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On COMMA reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On COLONGT reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On COLON reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On BY reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On AS reduce production binop_pattern_ -> binop_pattern EQ binop_pattern
-- On ARROW reduce production binop_pattern_ -> binop_pattern EQ binop_pattern

State 293:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern COLON
## LR(1) items:
pattern_ -> binop_pattern EQEQ binop_pattern COLON . pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ binop_pattern COLON . binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 294
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 295
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 294:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern COLON pattern
## LR(1) items:
pattern_ -> binop_pattern EQEQ binop_pattern COLON pattern . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern_ -> binop_pattern EQEQ binop_pattern COLON pattern

State 295:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern COLON binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN TYPE STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
pattern_ -> binop_pattern . AS binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . TYPE [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . COLON binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . COLONGT prod_mlty [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern COLON pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern . EQEQ binop_pattern COLON binop_pattern BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
pattern_ -> binop_pattern EQEQ binop_pattern COLON binop_pattern . BY QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On TYPE shift to state 270
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXOP0 shift to state 287
-- On INFIXCONS shift to state 285
-- On EQEQ shift to state 289
-- On EQ shift to state 291
-- On COLONGT shift to state 296
-- On COLON shift to state 299
-- On BY shift to state 301
-- On AS shift to state 303
## Reductions:

State 296:
## Known stack suffix:
## binop_pattern COLONGT
## LR(1) items:
pattern_ -> binop_pattern COLONGT . prod_mlty [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 297
-- On prod_mlty shift to state 298
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 297:
## Known stack suffix:
## prod_mlty_
## LR(1) items:
mark_location(prod_mlty_) -> prod_mlty_ . [ WITH WHEN VERBOSITY SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(prod_mlty_) -> prod_mlty_

State 298:
## Known stack suffix:
## binop_pattern COLONGT prod_mlty
## LR(1) items:
pattern_ -> binop_pattern COLONGT prod_mlty . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern_ -> binop_pattern COLONGT prod_mlty

State 299:
## Known stack suffix:
## binop_pattern COLON
## LR(1) items:
pattern_ -> binop_pattern COLON . binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 300
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 300:
## Known stack suffix:
## binop_pattern COLON binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
pattern_ -> binop_pattern COLON binop_pattern . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXOP0 shift to state 287
-- On INFIXCONS shift to state 285
-- On EQ shift to state 291
## Reductions:
-- On WHEN reduce production pattern_ -> binop_pattern COLON binop_pattern
-- On SEMI reduce production pattern_ -> binop_pattern COLON binop_pattern
-- On RPAREN reduce production pattern_ -> binop_pattern COLON binop_pattern
-- On RBRACK reduce production pattern_ -> binop_pattern COLON binop_pattern
-- On RBRACE reduce production pattern_ -> binop_pattern COLON binop_pattern
-- On COMMA reduce production pattern_ -> binop_pattern COLON binop_pattern
-- On ARROW reduce production pattern_ -> binop_pattern COLON binop_pattern

State 301:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern COLON binop_pattern BY
## LR(1) items:
pattern_ -> binop_pattern EQEQ binop_pattern COLON binop_pattern BY . QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On QQMARK shift to state 302
## Reductions:

State 302:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern COLON binop_pattern BY QQMARK
## LR(1) items:
pattern_ -> binop_pattern EQEQ binop_pattern COLON binop_pattern BY QQMARK . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern_ -> binop_pattern EQEQ binop_pattern COLON binop_pattern BY QQMARK

State 303:
## Known stack suffix:
## binop_pattern AS
## LR(1) items:
pattern_ -> binop_pattern AS . binop_pattern [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On tt_name shift to state 20
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 272
-- On binop_pattern shift to state 304
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 304:
## Known stack suffix:
## binop_pattern AS binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
pattern_ -> binop_pattern AS binop_pattern . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXOP0 shift to state 287
-- On INFIXCONS shift to state 285
-- On EQ shift to state 291
## Reductions:
-- On WHEN reduce production pattern_ -> binop_pattern AS binop_pattern
-- On SEMI reduce production pattern_ -> binop_pattern AS binop_pattern
-- On RPAREN reduce production pattern_ -> binop_pattern AS binop_pattern
-- On RBRACK reduce production pattern_ -> binop_pattern AS binop_pattern
-- On RBRACE reduce production pattern_ -> binop_pattern AS binop_pattern
-- On COMMA reduce production pattern_ -> binop_pattern AS binop_pattern
-- On ARROW reduce production pattern_ -> binop_pattern AS binop_pattern

State 305:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern BY
## LR(1) items:
pattern_ -> binop_pattern EQEQ binop_pattern BY . QQMARK [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On QQMARK shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## binop_pattern EQEQ binop_pattern BY QQMARK
## LR(1) items:
pattern_ -> binop_pattern EQEQ binop_pattern BY QQMARK . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern_ -> binop_pattern EQEQ binop_pattern BY QQMARK

State 307:
## Known stack suffix:
## LBRACE nonempty_list(opt_name(tt_name)) COLON pattern
## LR(1) items:
tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) COLON pattern . RBRACE [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
## Transitions:
-- On RBRACE shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## LBRACE nonempty_list(opt_name(tt_name)) COLON pattern RBRACE
## LR(1) items:
tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) COLON pattern RBRACE . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tt_maybe_typed_binder -> LBRACE nonempty_list(opt_name(tt_name)) COLON pattern RBRACE

State 309:
## Known stack suffix:
## separated_nonempty_list(SEMI,pattern)
## LR(1) items:
loption(separated_nonempty_list(SEMI,pattern)) -> separated_nonempty_list(SEMI,pattern) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(SEMI,pattern)) -> separated_nonempty_list(SEMI,pattern)

State 310:
## Known stack suffix:
## pattern
## LR(1) items:
separated_nonempty_list(SEMI,pattern) -> pattern . [ RBRACK ]
separated_nonempty_list(SEMI,pattern) -> pattern . SEMI separated_nonempty_list(SEMI,pattern) [ RBRACK ]
## Transitions:
-- On SEMI shift to state 311
## Reductions:
-- On RBRACK reduce production separated_nonempty_list(SEMI,pattern) -> pattern

State 311:
## Known stack suffix:
## pattern SEMI
## LR(1) items:
separated_nonempty_list(SEMI,pattern) -> pattern SEMI . separated_nonempty_list(SEMI,pattern) [ RBRACK ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(SEMI,pattern) shift to state 312
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 310
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 312:
## Known stack suffix:
## pattern SEMI separated_nonempty_list(SEMI,pattern)
## LR(1) items:
separated_nonempty_list(SEMI,pattern) -> pattern SEMI separated_nonempty_list(SEMI,pattern) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMI,pattern) -> pattern SEMI separated_nonempty_list(SEMI,pattern)

State 313:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMI,pattern))
## LR(1) items:
simple_pattern_ -> LBRACK loption(separated_nonempty_list(SEMI,pattern)) . RBRACK [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On RBRACK shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMI,pattern)) RBRACK
## LR(1) items:
simple_pattern_ -> LBRACK loption(separated_nonempty_list(SEMI,pattern)) RBRACK . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_ -> LBRACK loption(separated_nonempty_list(SEMI,pattern)) RBRACK

State 315:
## Known stack suffix:
## PREFIXOP prefix_pattern
## LR(1) items:
prefix_pattern_ -> PREFIXOP prefix_pattern . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_pattern_ -> PREFIXOP prefix_pattern

State 316:
## Known stack suffix:
## separated_nonempty_list(COMMA,pattern)
## LR(1) items:
loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,pattern)) -> separated_nonempty_list(COMMA,pattern)

State 317:
## Known stack suffix:
## pattern
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN ]
separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 318
## Reductions:
-- On RPAREN reduce production separated_nonempty_list(COMMA,pattern) -> pattern

State 318:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(COMMA,pattern) shift to state 319
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 317
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 319:
## Known stack suffix:
## pattern COMMA separated_nonempty_list(COMMA,pattern)
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern COMMA separated_nonempty_list(COMMA,pattern) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,pattern) -> pattern COMMA separated_nonempty_list(COMMA,pattern)

State 320:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,pattern))
## LR(1) items:
simple_pattern_ -> LPAREN loption(separated_nonempty_list(COMMA,pattern)) . RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
-- On RPAREN shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,pattern)) RPAREN
## LR(1) items:
simple_pattern_ -> LPAREN loption(separated_nonempty_list(COMMA,pattern)) RPAREN . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_ -> LPAREN loption(separated_nonempty_list(COMMA,pattern)) RPAREN

State 322:
## Known stack suffix:
## QQMARK COLON binop_pattern
## LR(1) items:
binop_pattern_ -> binop_pattern . INFIXCONS binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . EQ binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP0 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP1 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP2 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP3 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . STAR binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
binop_pattern_ -> binop_pattern . INFIXOP4 binop_pattern [ WHEN STAR SEMI RPAREN RBRACK RBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ COMMA ARROW ]
pattern_ -> QQMARK COLON binop_pattern . [ WHEN SEMI RPAREN RBRACK RBRACE COMMA ARROW ]
## Transitions:
-- On STAR shift to state 271
-- On INFIXOP4 shift to state 274
-- On INFIXOP3 shift to state 279
-- On INFIXOP2 shift to state 281
-- On INFIXOP1 shift to state 283
-- On INFIXOP0 shift to state 287
-- On INFIXCONS shift to state 285
-- On EQ shift to state 291
## Reductions:
-- On WHEN reduce production pattern_ -> QQMARK COLON binop_pattern
-- On SEMI reduce production pattern_ -> QQMARK COLON binop_pattern
-- On RPAREN reduce production pattern_ -> QQMARK COLON binop_pattern
-- On RBRACK reduce production pattern_ -> QQMARK COLON binop_pattern
-- On RBRACE reduce production pattern_ -> QQMARK COLON binop_pattern
-- On COMMA reduce production pattern_ -> QQMARK COLON binop_pattern
-- On ARROW reduce production pattern_ -> QQMARK COLON binop_pattern

State 323:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
ml_name -> LPAREN PREFIXOP . RPAREN [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
prefix_pattern_ -> PREFIXOP . prefix_pattern [ TYPE STAR RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON AS ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On RPAREN shift to state 67
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 315
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
## Reductions:

State 324:
## Known stack suffix:
## UATOM prefix_pattern
## LR(1) items:
prefix_pattern_ -> UATOM prefix_pattern . [ WHEN UNDERSCORE UATOM TYPE STAR SEMI RPAREN RBRACK RBRACE QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONGT COLON BY AS ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_pattern_ -> UATOM prefix_pattern

State 325:
## Known stack suffix:
## pattern
## LR(1) items:
match_case -> pattern . when_guard ARROW term [ END BAR ]
## Transitions:
-- On WHEN shift to state 326
-- On when_guard shift to state 328
## Reductions:
-- On ARROW reduce production when_guard ->

State 326:
## Known stack suffix:
## WHEN
## LR(1) items:
when_guard -> WHEN . binop_term [ ARROW ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 175
-- On binop_term shift to state 327
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:

State 327:
## Known stack suffix:
## WHEN binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
binop_term_ -> binop_term . EQ binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
binop_term_ -> binop_term . STAR binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ STAR INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ARROW ]
when_guard -> WHEN binop_term . [ ARROW ]
## Transitions:
-- On STAR shift to state 174
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXOP0 shift to state 201
-- On INFIXCONS shift to state 199
-- On EQ shift to state 203
## Reductions:
-- On ARROW reduce production when_guard -> WHEN binop_term

State 328:
## Known stack suffix:
## pattern when_guard
## LR(1) items:
match_case -> pattern when_guard . ARROW term [ END BAR ]
## Transitions:
-- On ARROW shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## pattern when_guard ARROW
## LR(1) items:
match_case -> pattern when_guard ARROW . term [ END BAR ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 394
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 330:
## Known stack suffix:
## FUN
## LR(1) items:
term_ -> FUN . nonempty_list(ml_arg) ARROW term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 331
-- On nonempty_list(ml_arg) shift to state 336
-- On ml_name shift to state 391
-- On ml_arg shift to state 392
## Reductions:

State 331:
## Known stack suffix:
## LPAREN
## LR(1) items:
ml_arg -> LPAREN . ml_name COLONGT mlty RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . INFIXCONS RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . EQ RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . STAR RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
ml_name -> LPAREN . PREFIXOP RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
## Transitions:
-- On STAR shift to state 64
-- On PREFIXOP shift to state 66
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On INFIXOP4 shift to state 68
-- On INFIXOP3 shift to state 70
-- On INFIXOP2 shift to state 72
-- On INFIXOP1 shift to state 74
-- On INFIXOP0 shift to state 76
-- On INFIXCONS shift to state 78
-- On EQ shift to state 80
-- On ml_name shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## LPAREN ml_name
## LR(1) items:
ml_arg -> LPAREN ml_name . COLONGT mlty RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
## Transitions:
-- On COLONGT shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## LPAREN ml_name COLONGT
## LR(1) items:
ml_arg -> LPAREN ml_name COLONGT . mlty RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 334
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 334:
## Known stack suffix:
## LPAREN ml_name COLONGT mlty
## LR(1) items:
ml_arg -> LPAREN ml_name COLONGT mlty . RPAREN [ NAME LPAREN EQ COLONGT ARROW ]
## Transitions:
-- On RPAREN shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## LPAREN ml_name COLONGT mlty RPAREN
## LR(1) items:
ml_arg -> LPAREN ml_name COLONGT mlty RPAREN . [ NAME LPAREN EQ COLONGT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_arg -> LPAREN ml_name COLONGT mlty RPAREN

State 336:
## Known stack suffix:
## FUN nonempty_list(ml_arg)
## LR(1) items:
term_ -> FUN nonempty_list(ml_arg) . ARROW term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On ARROW shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## FUN nonempty_list(ml_arg) ARROW
## LR(1) items:
term_ -> FUN nonempty_list(ml_arg) ARROW . term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 390
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 338:
## Known stack suffix:
## FRESH
## LR(1) items:
term_ -> FRESH . opt_name(ml_name) COLON ty_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On opt_name(ml_name) shift to state 339
-- On ml_name shift to state 121
## Reductions:

State 339:
## Known stack suffix:
## FRESH opt_name(ml_name)
## LR(1) items:
term_ -> FRESH opt_name(ml_name) . COLON ty_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On COLON shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## FRESH opt_name(ml_name) COLON
## LR(1) items:
term_ -> FRESH opt_name(ml_name) COLON . ty_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 164
-- On ty_term shift to state 341
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(ty_term_) shift to state 170
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 173
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 341:
## Known stack suffix:
## FRESH opt_name(ml_name) COLON ty_term
## LR(1) items:
term_ -> FRESH opt_name(ml_name) COLON ty_term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> FRESH opt_name(ml_name) COLON ty_term

State 342:
## Known stack suffix:
## DERIVE
## LR(1) items:
term_ -> DERIVE . nonempty_list(premise) ARROW term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On LPAREN shift to state 343
-- On premise_ shift to state 383
-- On premise shift to state 384
-- On nonempty_list(premise) shift to state 387
-- On mark_location(premise_) shift to state 386
## Reductions:

State 343:
## Known stack suffix:
## LPAREN
## LR(1) items:
premise_ -> LPAREN . local_context opt_name(tt_name) TYPE RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN . local_context opt_name(tt_name) COLON term RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN . local_context app_term EQEQ ty_term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN . local_context app_term EQEQ app_term COLON term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On LBRACE shift to state 344
-- On typed_binder shift to state 349
-- On local_context shift to state 351
-- On list(typed_binder) shift to state 382
## Reductions:
-- On UNDERSCORE reduce production list(typed_binder) ->
-- On REF reduce production list(typed_binder) ->
-- On RAISE reduce production list(typed_binder) ->
-- On QUOTED_STRING reduce production list(typed_binder) ->
-- On PREFIXOP reduce production list(typed_binder) ->
-- On OCCURS reduce production list(typed_binder) ->
-- On NATURAL reduce production list(typed_binder) ->
-- On NAME reduce production list(typed_binder) ->
-- On LPAREN reduce production list(typed_binder) ->
-- On LBRACK reduce production list(typed_binder) ->
-- On CONVERT reduce production list(typed_binder) ->
-- On CONTEXT reduce production list(typed_binder) ->
-- On CONGRUENCE reduce production list(typed_binder) ->
-- On BANG reduce production list(typed_binder) ->
-- On ABSTRACT reduce production list(typed_binder) ->

State 344:
## Known stack suffix:
## LBRACE
## LR(1) items:
typed_binder -> LBRACE . nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On UNDERSCORE shift to state 157
-- On NAME shift to state 158
-- On LPAREN shift to state 26
-- On tt_name shift to state 159
-- On opt_name(tt_name) shift to state 160
-- On nonempty_list(anon_name(tt_name)) shift to state 345
-- On anon_name(tt_name) shift to state 207
## Reductions:

State 345:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name))
## LR(1) items:
typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) . COLON ty_term RBRACE [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On COLON shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name)) COLON
## LR(1) items:
typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON . ty_term RBRACE [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 164
-- On ty_term shift to state 347
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(ty_term_) shift to state 170
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 173
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 347:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term
## LR(1) items:
typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term . RBRACE [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On RBRACE shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE
## LR(1) items:
typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE . [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK LBRACE CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_binder -> LBRACE nonempty_list(anon_name(tt_name)) COLON ty_term RBRACE

State 349:
## Known stack suffix:
## typed_binder
## LR(1) items:
list(typed_binder) -> typed_binder . list(typed_binder) [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
-- On LBRACE shift to state 344
-- On typed_binder shift to state 349
-- On list(typed_binder) shift to state 350
## Reductions:
-- On UNDERSCORE reduce production list(typed_binder) ->
-- On REF reduce production list(typed_binder) ->
-- On RAISE reduce production list(typed_binder) ->
-- On QUOTED_STRING reduce production list(typed_binder) ->
-- On PREFIXOP reduce production list(typed_binder) ->
-- On OCCURS reduce production list(typed_binder) ->
-- On NATURAL reduce production list(typed_binder) ->
-- On NAME reduce production list(typed_binder) ->
-- On LPAREN reduce production list(typed_binder) ->
-- On LBRACK reduce production list(typed_binder) ->
-- On CONVERT reduce production list(typed_binder) ->
-- On CONTEXT reduce production list(typed_binder) ->
-- On CONGRUENCE reduce production list(typed_binder) ->
-- On BANG reduce production list(typed_binder) ->
-- On ABSTRACT reduce production list(typed_binder) ->

State 350:
## Known stack suffix:
## typed_binder list(typed_binder)
## LR(1) items:
list(typed_binder) -> typed_binder list(typed_binder) . [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(typed_binder) -> typed_binder list(typed_binder)

State 351:
## Known stack suffix:
## LPAREN local_context
## LR(1) items:
premise_ -> LPAREN local_context . opt_name(tt_name) TYPE RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN local_context . opt_name(tt_name) COLON term RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN local_context . app_term EQEQ ty_term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN local_context . app_term EQEQ app_term COLON term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 157
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 352
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On opt_name(tt_name) shift to state 353
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 370
-- On any_name shift to state 47
## Reductions:

State 352:
## Known stack suffix:
## tt_name
## LR(1) items:
any_name -> tt_name . [ REF QUOTED_STRING PREFIXOP NATURAL NAME LPAREN LBRACK LBRACE EQEQ BANG ]
opt_name(tt_name) -> tt_name . [ TYPE COLON ]
## Transitions:
## Reductions:
-- On TYPE reduce production opt_name(tt_name) -> tt_name
-- On REF reduce production any_name -> tt_name
-- On QUOTED_STRING reduce production any_name -> tt_name
-- On PREFIXOP reduce production any_name -> tt_name
-- On NATURAL reduce production any_name -> tt_name
-- On NAME reduce production any_name -> tt_name
-- On LPAREN reduce production any_name -> tt_name
-- On LBRACK reduce production any_name -> tt_name
-- On LBRACE reduce production any_name -> tt_name
-- On EQEQ reduce production any_name -> tt_name
-- On COLON reduce production opt_name(tt_name) -> tt_name
-- On BANG reduce production any_name -> tt_name

State 353:
## Known stack suffix:
## LPAREN local_context opt_name(tt_name)
## LR(1) items:
premise_ -> LPAREN local_context opt_name(tt_name) . TYPE RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN local_context opt_name(tt_name) . COLON term RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On TYPE shift to state 354
-- On COLON shift to state 356
## Reductions:

State 354:
## Known stack suffix:
## LPAREN local_context opt_name(tt_name) TYPE
## LR(1) items:
premise_ -> LPAREN local_context opt_name(tt_name) TYPE . RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## LPAREN local_context opt_name(tt_name) TYPE RPAREN
## LR(1) items:
premise_ -> LPAREN local_context opt_name(tt_name) TYPE RPAREN . [ TYPE LPAREN COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production premise_ -> LPAREN local_context opt_name(tt_name) TYPE RPAREN

State 356:
## Known stack suffix:
## LPAREN local_context opt_name(tt_name) COLON
## LR(1) items:
premise_ -> LPAREN local_context opt_name(tt_name) COLON . term RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 359
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 357:
## Known stack suffix:
## ty_term_
## LR(1) items:
term_ -> ty_term_ . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> ty_term_

State 358:
## Known stack suffix:
## term_
## LR(1) items:
mark_location(term_) -> term_ . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(term_) -> term_

State 359:
## Known stack suffix:
## LPAREN local_context opt_name(tt_name) COLON term
## LR(1) items:
premise_ -> LPAREN local_context opt_name(tt_name) COLON term . RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## LPAREN local_context opt_name(tt_name) COLON term RPAREN
## LR(1) items:
premise_ -> LPAREN local_context opt_name(tt_name) COLON term RPAREN . [ TYPE LPAREN COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production premise_ -> LPAREN local_context opt_name(tt_name) COLON term RPAREN

State 361:
## Known stack suffix:
## mark_location(term_)
## LR(1) items:
term -> mark_location(term_) . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> mark_location(term_)

State 362:
## Known stack suffix:
## binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . EQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . STAR binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
term_ -> binop_term . SEMI term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On STAR shift to state 174
-- On SEMI shift to state 363
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXOP0 shift to state 201
-- On INFIXCONS shift to state 199
-- On EQ shift to state 203
## Reductions:

State 363:
## Known stack suffix:
## binop_term SEMI
## LR(1) items:
term_ -> binop_term SEMI . term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 364
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 364:
## Known stack suffix:
## binop_term SEMI term
## LR(1) items:
term_ -> binop_term SEMI term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> binop_term SEMI term

State 365:
## Known stack suffix:
## app_term
## LR(1) items:
binop_term_ -> app_term . COLONEQ binop_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> app_term . EQEQ app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY app_term [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> app_term . EQEQ app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY QQMARK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR AND ]
term_ -> app_term . COLONQT ty_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
term_ -> app_term . COLON ty_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On EQEQ shift to state 181
-- On COLONQT shift to state 366
-- On COLONEQ shift to state 191
-- On COLON shift to state 368
## Reductions:

State 366:
## Known stack suffix:
## app_term COLONQT
## LR(1) items:
term_ -> app_term COLONQT . ty_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 164
-- On ty_term shift to state 367
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(ty_term_) shift to state 170
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 173
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 367:
## Known stack suffix:
## app_term COLONQT ty_term
## LR(1) items:
term_ -> app_term COLONQT ty_term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> app_term COLONQT ty_term

State 368:
## Known stack suffix:
## app_term COLON
## LR(1) items:
term_ -> app_term COLON . ty_term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 164
-- On ty_term shift to state 369
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(ty_term_) shift to state 170
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 173
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 369:
## Known stack suffix:
## app_term COLON ty_term
## LR(1) items:
term_ -> app_term COLON ty_term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> app_term COLON ty_term

State 370:
## Known stack suffix:
## LPAREN local_context app_term
## LR(1) items:
premise_ -> LPAREN local_context app_term . EQEQ ty_term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN local_context app_term . EQEQ app_term COLON term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On EQEQ shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## LPAREN local_context app_term EQEQ
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ . ty_term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
premise_ -> LPAREN local_context app_term EQEQ . app_term COLON term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 164
-- On ty_term shift to state 372
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(ty_term_) shift to state 170
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 173
-- On app_term_ shift to state 179
-- On app_term shift to state 377
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 372:
## Known stack suffix:
## LPAREN local_context app_term EQEQ ty_term
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ ty_term . equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On BY shift to state 373
-- On equality_premise_name shift to state 375
## Reductions:
-- On RPAREN reduce production equality_premise_name ->

State 373:
## Known stack suffix:
## BY
## LR(1) items:
equality_premise_name -> BY . opt_name(tt_name) [ RPAREN ]
## Transitions:
-- On UNDERSCORE shift to state 157
-- On NAME shift to state 158
-- On LPAREN shift to state 26
-- On tt_name shift to state 159
-- On opt_name(tt_name) shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## BY opt_name(tt_name)
## LR(1) items:
equality_premise_name -> BY opt_name(tt_name) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equality_premise_name -> BY opt_name(tt_name)

State 375:
## Known stack suffix:
## LPAREN local_context app_term EQEQ ty_term equality_premise_name
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ ty_term equality_premise_name . RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## LPAREN local_context app_term EQEQ ty_term equality_premise_name RPAREN
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ ty_term equality_premise_name RPAREN . [ TYPE LPAREN COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production premise_ -> LPAREN local_context app_term EQEQ ty_term equality_premise_name RPAREN

State 377:
## Known stack suffix:
## LPAREN local_context app_term EQEQ app_term
## LR(1) items:
binop_term_ -> app_term . COLONEQ binop_term [ STAR RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ BY ]
binop_term_ -> app_term . EQEQ app_term BY app_term [ STAR RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ BY ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY app_term [ STAR RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ BY ]
binop_term_ -> app_term . EQEQ app_term BY QQMARK [ STAR RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ BY ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY QQMARK [ STAR RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ BY ]
premise_ -> LPAREN local_context app_term EQEQ app_term . COLON term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On EQEQ shift to state 181
-- On COLONEQ shift to state 191
-- On COLON shift to state 378
## Reductions:

State 378:
## Known stack suffix:
## LPAREN local_context app_term EQEQ app_term COLON
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ app_term COLON . term equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 379
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 379:
## Known stack suffix:
## LPAREN local_context app_term EQEQ app_term COLON term
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ app_term COLON term . equality_premise_name RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On BY shift to state 373
-- On equality_premise_name shift to state 380
## Reductions:
-- On RPAREN reduce production equality_premise_name ->

State 380:
## Known stack suffix:
## LPAREN local_context app_term EQEQ app_term COLON term equality_premise_name
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ app_term COLON term equality_premise_name . RPAREN [ TYPE LPAREN COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## LPAREN local_context app_term EQEQ app_term COLON term equality_premise_name RPAREN
## LR(1) items:
premise_ -> LPAREN local_context app_term EQEQ app_term COLON term equality_premise_name RPAREN . [ TYPE LPAREN COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production premise_ -> LPAREN local_context app_term EQEQ app_term COLON term equality_premise_name RPAREN

State 382:
## Known stack suffix:
## list(typed_binder)
## LR(1) items:
local_context -> list(typed_binder) . [ UNDERSCORE REF RAISE QUOTED_STRING PREFIXOP OCCURS NATURAL NAME LPAREN LBRACK CONVERT CONTEXT CONGRUENCE BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_context -> list(typed_binder)

State 383:
## Known stack suffix:
## premise_
## LR(1) items:
mark_location(premise_) -> premise_ . [ TYPE LPAREN COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(premise_) -> premise_

State 384:
## Known stack suffix:
## premise
## LR(1) items:
nonempty_list(premise) -> premise . [ ARROW ]
nonempty_list(premise) -> premise . nonempty_list(premise) [ ARROW ]
## Transitions:
-- On LPAREN shift to state 343
-- On premise_ shift to state 383
-- On premise shift to state 384
-- On nonempty_list(premise) shift to state 385
-- On mark_location(premise_) shift to state 386
## Reductions:
-- On ARROW reduce production nonempty_list(premise) -> premise

State 385:
## Known stack suffix:
## premise nonempty_list(premise)
## LR(1) items:
nonempty_list(premise) -> premise nonempty_list(premise) . [ ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(premise) -> premise nonempty_list(premise)

State 386:
## Known stack suffix:
## mark_location(premise_)
## LR(1) items:
premise -> mark_location(premise_) . [ TYPE LPAREN COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production premise -> mark_location(premise_)

State 387:
## Known stack suffix:
## DERIVE nonempty_list(premise)
## LR(1) items:
term_ -> DERIVE nonempty_list(premise) . ARROW term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On ARROW shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## DERIVE nonempty_list(premise) ARROW
## LR(1) items:
term_ -> DERIVE nonempty_list(premise) ARROW . term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 389
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 389:
## Known stack suffix:
## DERIVE nonempty_list(premise) ARROW term
## LR(1) items:
term_ -> DERIVE nonempty_list(premise) ARROW term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> DERIVE nonempty_list(premise) ARROW term

State 390:
## Known stack suffix:
## FUN nonempty_list(ml_arg) ARROW term
## LR(1) items:
term_ -> FUN nonempty_list(ml_arg) ARROW term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> FUN nonempty_list(ml_arg) ARROW term

State 391:
## Known stack suffix:
## ml_name
## LR(1) items:
ml_arg -> ml_name . [ NAME LPAREN EQ COLONGT ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_arg -> ml_name

State 392:
## Known stack suffix:
## ml_arg
## LR(1) items:
nonempty_list(ml_arg) -> ml_arg . [ ARROW ]
nonempty_list(ml_arg) -> ml_arg . nonempty_list(ml_arg) [ ARROW ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 331
-- On nonempty_list(ml_arg) shift to state 393
-- On ml_name shift to state 391
-- On ml_arg shift to state 392
## Reductions:
-- On ARROW reduce production nonempty_list(ml_arg) -> ml_arg

State 393:
## Known stack suffix:
## ml_arg nonempty_list(ml_arg)
## LR(1) items:
nonempty_list(ml_arg) -> ml_arg nonempty_list(ml_arg) . [ ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(ml_arg) -> ml_arg nonempty_list(ml_arg)

State 394:
## Known stack suffix:
## pattern when_guard ARROW term
## LR(1) items:
match_case -> pattern when_guard ARROW term . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_case -> pattern when_guard ARROW term

State 395:
## Known stack suffix:
## VAL match_case
## LR(1) items:
handler_case -> VAL match_case . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_case -> VAL match_case

State 396:
## Known stack suffix:
## RAISE
## LR(1) items:
handler_case -> RAISE . match_case [ END BAR ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 325
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On match_case shift to state 397
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 397:
## Known stack suffix:
## RAISE match_case
## LR(1) items:
handler_case -> RAISE match_case . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_case -> RAISE match_case

State 398:
## Known stack suffix:
## NAME
## LR(1) items:
module_name -> NAME . [ PERIOD ]
op_name -> NAME . [ UNDERSCORE UATOM QUOTED_STRING QQMARK PREFIXOP NAME LPAREN LBRACK COLON ARROW ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production op_name -> NAME
-- On UATOM reduce production op_name -> NAME
-- On QUOTED_STRING reduce production op_name -> NAME
-- On QQMARK reduce production op_name -> NAME
-- On PREFIXOP reduce production op_name -> NAME
-- On PERIOD reduce production module_name -> NAME
-- On NAME reduce production op_name -> NAME
-- On LPAREN reduce production op_name -> NAME
-- On LBRACK reduce production op_name -> NAME
-- On COLON reduce production op_name -> NAME
-- On ARROW reduce production op_name -> NAME

State 399:
## Known stack suffix:
## BAR
## LR(1) items:
handler_cases -> BAR . separated_nonempty_list(BAR,handler_case) [ END ]
## Transitions:
-- On VAL shift to state 210
-- On RAISE shift to state 396
-- On NAME shift to state 398
-- On separated_nonempty_list(BAR,handler_case) shift to state 400
-- On op_name shift to state 401
-- On module_path shift to state 410
-- On module_name shift to state 45
-- On handler_case shift to state 417
## Reductions:

State 400:
## Known stack suffix:
## BAR separated_nonempty_list(BAR,handler_case)
## LR(1) items:
handler_cases -> BAR separated_nonempty_list(BAR,handler_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_cases -> BAR separated_nonempty_list(BAR,handler_case)

State 401:
## Known stack suffix:
## op_name
## LR(1) items:
handler_case -> op_name . list(prefix_pattern) handler_checking ARROW term [ END BAR ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 402
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
-- On list(prefix_pattern) shift to state 404
## Reductions:
-- On COLON reduce production list(prefix_pattern) ->
-- On ARROW reduce production list(prefix_pattern) ->

State 402:
## Known stack suffix:
## prefix_pattern
## LR(1) items:
list(prefix_pattern) -> prefix_pattern . list(prefix_pattern) [ COLON ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 402
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
-- On list(prefix_pattern) shift to state 403
## Reductions:
-- On COLON reduce production list(prefix_pattern) ->
-- On ARROW reduce production list(prefix_pattern) ->

State 403:
## Known stack suffix:
## prefix_pattern list(prefix_pattern)
## LR(1) items:
list(prefix_pattern) -> prefix_pattern list(prefix_pattern) . [ COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(prefix_pattern) -> prefix_pattern list(prefix_pattern)

State 404:
## Known stack suffix:
## op_name list(prefix_pattern)
## LR(1) items:
handler_case -> op_name list(prefix_pattern) . handler_checking ARROW term [ END BAR ]
## Transitions:
-- On COLON shift to state 405
-- On handler_checking shift to state 407
## Reductions:
-- On ARROW reduce production handler_checking ->

State 405:
## Known stack suffix:
## COLON
## LR(1) items:
handler_checking -> COLON . pattern [ ARROW ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 406
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 406:
## Known stack suffix:
## COLON pattern
## LR(1) items:
handler_checking -> COLON pattern . [ ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_checking -> COLON pattern

State 407:
## Known stack suffix:
## op_name list(prefix_pattern) handler_checking
## LR(1) items:
handler_case -> op_name list(prefix_pattern) handler_checking . ARROW term [ END BAR ]
## Transitions:
-- On ARROW shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## op_name list(prefix_pattern) handler_checking ARROW
## LR(1) items:
handler_case -> op_name list(prefix_pattern) handler_checking ARROW . term [ END BAR ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 409
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 409:
## Known stack suffix:
## op_name list(prefix_pattern) handler_checking ARROW term
## LR(1) items:
handler_case -> op_name list(prefix_pattern) handler_checking ARROW term . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_case -> op_name list(prefix_pattern) handler_checking ARROW term

State 410:
## Known stack suffix:
## module_path
## LR(1) items:
handler_case -> module_path . PERIOD op_name list(prefix_pattern) handler_checking ARROW term [ END BAR ]
module_path -> module_path . PERIOD module_name [ PERIOD ]
## Transitions:
-- On PERIOD shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## module_path PERIOD
## LR(1) items:
handler_case -> module_path PERIOD . op_name list(prefix_pattern) handler_checking ARROW term [ END BAR ]
module_path -> module_path PERIOD . module_name [ PERIOD ]
## Transitions:
-- On NAME shift to state 398
-- On op_name shift to state 412
-- On module_name shift to state 43
## Reductions:

State 412:
## Known stack suffix:
## module_path PERIOD op_name
## LR(1) items:
handler_case -> module_path PERIOD op_name . list(prefix_pattern) handler_checking ARROW term [ END BAR ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 402
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
-- On list(prefix_pattern) shift to state 413
## Reductions:
-- On COLON reduce production list(prefix_pattern) ->
-- On ARROW reduce production list(prefix_pattern) ->

State 413:
## Known stack suffix:
## module_path PERIOD op_name list(prefix_pattern)
## LR(1) items:
handler_case -> module_path PERIOD op_name list(prefix_pattern) . handler_checking ARROW term [ END BAR ]
## Transitions:
-- On COLON shift to state 405
-- On handler_checking shift to state 414
## Reductions:
-- On ARROW reduce production handler_checking ->

State 414:
## Known stack suffix:
## module_path PERIOD op_name list(prefix_pattern) handler_checking
## LR(1) items:
handler_case -> module_path PERIOD op_name list(prefix_pattern) handler_checking . ARROW term [ END BAR ]
## Transitions:
-- On ARROW shift to state 415
## Reductions:

State 415:
## Known stack suffix:
## module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW
## LR(1) items:
handler_case -> module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW . term [ END BAR ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 416
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 416:
## Known stack suffix:
## module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW term
## LR(1) items:
handler_case -> module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW term . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_case -> module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW term

State 417:
## Known stack suffix:
## handler_case
## LR(1) items:
separated_nonempty_list(BAR,handler_case) -> handler_case . [ END ]
separated_nonempty_list(BAR,handler_case) -> handler_case . BAR separated_nonempty_list(BAR,handler_case) [ END ]
## Transitions:
-- On BAR shift to state 418
## Reductions:
-- On END reduce production separated_nonempty_list(BAR,handler_case) -> handler_case

State 418:
## Known stack suffix:
## handler_case BAR
## LR(1) items:
separated_nonempty_list(BAR,handler_case) -> handler_case BAR . separated_nonempty_list(BAR,handler_case) [ END ]
## Transitions:
-- On VAL shift to state 210
-- On RAISE shift to state 396
-- On NAME shift to state 398
-- On separated_nonempty_list(BAR,handler_case) shift to state 419
-- On op_name shift to state 401
-- On module_path shift to state 410
-- On module_name shift to state 45
-- On handler_case shift to state 417
## Reductions:

State 419:
## Known stack suffix:
## handler_case BAR separated_nonempty_list(BAR,handler_case)
## LR(1) items:
separated_nonempty_list(BAR,handler_case) -> handler_case BAR separated_nonempty_list(BAR,handler_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(BAR,handler_case) -> handler_case BAR separated_nonempty_list(BAR,handler_case)

State 420:
## Known stack suffix:
## separated_nonempty_list(BAR,handler_case)
## LR(1) items:
loption(separated_nonempty_list(BAR,handler_case)) -> separated_nonempty_list(BAR,handler_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(BAR,handler_case)) -> separated_nonempty_list(BAR,handler_case)

State 421:
## Known stack suffix:
## loption(separated_nonempty_list(BAR,handler_case))
## LR(1) items:
handler_cases -> loption(separated_nonempty_list(BAR,handler_case)) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_cases -> loption(separated_nonempty_list(BAR,handler_case))

State 422:
## Known stack suffix:
## HANDLER handler_cases
## LR(1) items:
term_ -> HANDLER handler_cases . END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On END shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## HANDLER handler_cases END
## LR(1) items:
term_ -> HANDLER handler_cases END . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> HANDLER handler_cases END

State 424:
## Known stack suffix:
## UNDERSCORE COLON app_term EQ term
## LR(1) items:
let_clause -> UNDERSCORE COLON app_term EQ term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_clause -> UNDERSCORE COLON app_term EQ term

State 425:
## Known stack suffix:
## UNDERSCORE let_annotation
## LR(1) items:
let_clause -> UNDERSCORE let_annotation . EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On EQ shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## UNDERSCORE let_annotation EQ
## LR(1) items:
let_clause -> UNDERSCORE let_annotation EQ . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 427
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 427:
## Known stack suffix:
## UNDERSCORE let_annotation EQ term
## LR(1) items:
let_clause -> UNDERSCORE let_annotation EQ term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_clause -> UNDERSCORE let_annotation EQ term

State 428:
## Known stack suffix:
## LET REC
## LR(1) items:
term_ -> LET REC . separated_nonempty_list(AND,recursive_clause) IN term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On separated_nonempty_list(AND,recursive_clause) shift to state 429
-- On recursive_clause shift to state 432
-- On ml_name shift to state 435
## Reductions:

State 429:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause)
## LR(1) items:
term_ -> LET REC separated_nonempty_list(AND,recursive_clause) . IN term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On IN shift to state 430
## Reductions:

State 430:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause) IN
## LR(1) items:
term_ -> LET REC separated_nonempty_list(AND,recursive_clause) IN . term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 431
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 431:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause) IN term
## LR(1) items:
term_ -> LET REC separated_nonempty_list(AND,recursive_clause) IN term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> LET REC separated_nonempty_list(AND,recursive_clause) IN term

State 432:
## Known stack suffix:
## recursive_clause
## LR(1) items:
separated_nonempty_list(AND,recursive_clause) -> recursive_clause . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
separated_nonempty_list(AND,recursive_clause) -> recursive_clause . AND separated_nonempty_list(AND,recursive_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On AND shift to state 433
## Reductions:
-- On WITH reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On VERBOSITY reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On SEMISEMI reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On RULE reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On REQUIRE reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On OPERATION reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On OPEN reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On MODULE reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On MLTYPE reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On LET reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On INCLUDE reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On IN reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On EXTERNAL reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On EXCEPTION reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On EOF reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause
-- On END reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause

State 433:
## Known stack suffix:
## recursive_clause AND
## LR(1) items:
separated_nonempty_list(AND,recursive_clause) -> recursive_clause AND . separated_nonempty_list(AND,recursive_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On separated_nonempty_list(AND,recursive_clause) shift to state 434
-- On recursive_clause shift to state 432
-- On ml_name shift to state 435
## Reductions:

State 434:
## Known stack suffix:
## recursive_clause AND separated_nonempty_list(AND,recursive_clause)
## LR(1) items:
separated_nonempty_list(AND,recursive_clause) -> recursive_clause AND separated_nonempty_list(AND,recursive_clause) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause AND separated_nonempty_list(AND,recursive_clause)

State 435:
## Known stack suffix:
## ml_name
## LR(1) items:
recursive_clause -> ml_name . ml_arg list(ml_arg) let_annotation EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 331
-- On ml_name shift to state 391
-- On ml_arg shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## ml_name ml_arg
## LR(1) items:
recursive_clause -> ml_name ml_arg . list(ml_arg) let_annotation EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 331
-- On ml_name shift to state 391
-- On ml_arg shift to state 437
-- On list(ml_arg) shift to state 439
## Reductions:
-- On EQ reduce production list(ml_arg) ->
-- On COLONGT reduce production list(ml_arg) ->

State 437:
## Known stack suffix:
## ml_arg
## LR(1) items:
list(ml_arg) -> ml_arg . list(ml_arg) [ EQ COLONGT ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 331
-- On ml_name shift to state 391
-- On ml_arg shift to state 437
-- On list(ml_arg) shift to state 438
## Reductions:
-- On EQ reduce production list(ml_arg) ->
-- On COLONGT reduce production list(ml_arg) ->

State 438:
## Known stack suffix:
## ml_arg list(ml_arg)
## LR(1) items:
list(ml_arg) -> ml_arg list(ml_arg) . [ EQ COLONGT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(ml_arg) -> ml_arg list(ml_arg)

State 439:
## Known stack suffix:
## ml_name ml_arg list(ml_arg)
## LR(1) items:
recursive_clause -> ml_name ml_arg list(ml_arg) . let_annotation EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On COLONGT shift to state 54
-- On let_annotation shift to state 440
## Reductions:
-- On EQ reduce production let_annotation ->

State 440:
## Known stack suffix:
## ml_name ml_arg list(ml_arg) let_annotation
## LR(1) items:
recursive_clause -> ml_name ml_arg list(ml_arg) let_annotation . EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On EQ shift to state 441
## Reductions:

State 441:
## Known stack suffix:
## ml_name ml_arg list(ml_arg) let_annotation EQ
## LR(1) items:
recursive_clause -> ml_name ml_arg list(ml_arg) let_annotation EQ . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 442
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 442:
## Known stack suffix:
## ml_name ml_arg list(ml_arg) let_annotation EQ term
## LR(1) items:
recursive_clause -> ml_name ml_arg list(ml_arg) let_annotation EQ term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production recursive_clause -> ml_name ml_arg list(ml_arg) let_annotation EQ term

State 443:
## Known stack suffix:
## LPAREN
## LR(1) items:
let_pattern_ -> LPAREN . loption(separated_nonempty_list(COMMA,pattern)) RPAREN [ EQ COLONGT ]
ml_name -> LPAREN . INFIXCONS RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . EQ RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . STAR RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ NAME LPAREN EQ COLONGT COLON ]
ml_name -> LPAREN . PREFIXOP RPAREN [ NAME LPAREN EQ COLONGT COLON ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On STAR shift to state 64
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 323
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On INFIXOP4 shift to state 68
-- On INFIXOP3 shift to state 70
-- On INFIXOP2 shift to state 72
-- On INFIXOP1 shift to state 74
-- On INFIXOP0 shift to state 76
-- On INFIXCONS shift to state 78
-- On EQ shift to state 80
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(COMMA,pattern) shift to state 316
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 317
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On loption(separated_nonempty_list(COMMA,pattern)) shift to state 444
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,pattern)) ->

State 444:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,pattern))
## LR(1) items:
let_pattern_ -> LPAREN loption(separated_nonempty_list(COMMA,pattern)) . RPAREN [ EQ COLONGT ]
## Transitions:
-- On RPAREN shift to state 445
## Reductions:

State 445:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,pattern)) RPAREN
## LR(1) items:
let_pattern_ -> LPAREN loption(separated_nonempty_list(COMMA,pattern)) RPAREN . [ EQ COLONGT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_pattern_ -> LPAREN loption(separated_nonempty_list(COMMA,pattern)) RPAREN

State 446:
## Known stack suffix:
## LBRACK
## LR(1) items:
let_pattern_ -> LBRACK . loption(separated_nonempty_list(SEMI,pattern)) RBRACK [ EQ COLONGT ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(SEMI,pattern) shift to state 309
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 310
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On loption(separated_nonempty_list(SEMI,pattern)) shift to state 447
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:
-- On RBRACK reduce production loption(separated_nonempty_list(SEMI,pattern)) ->

State 447:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMI,pattern))
## LR(1) items:
let_pattern_ -> LBRACK loption(separated_nonempty_list(SEMI,pattern)) . RBRACK [ EQ COLONGT ]
## Transitions:
-- On RBRACK shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## LBRACK loption(separated_nonempty_list(SEMI,pattern)) RBRACK
## LR(1) items:
let_pattern_ -> LBRACK loption(separated_nonempty_list(SEMI,pattern)) RBRACK . [ EQ COLONGT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_pattern_ -> LBRACK loption(separated_nonempty_list(SEMI,pattern)) RBRACK

State 449:
## Known stack suffix:
## LET separated_nonempty_list(AND,let_clause)
## LR(1) items:
term_ -> LET separated_nonempty_list(AND,let_clause) . IN term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On IN shift to state 450
## Reductions:

State 450:
## Known stack suffix:
## LET separated_nonempty_list(AND,let_clause) IN
## LR(1) items:
term_ -> LET separated_nonempty_list(AND,let_clause) IN . term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 451
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 451:
## Known stack suffix:
## LET separated_nonempty_list(AND,let_clause) IN term
## LR(1) items:
term_ -> LET separated_nonempty_list(AND,let_clause) IN term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> LET separated_nonempty_list(AND,let_clause) IN term

State 452:
## Known stack suffix:
## ml_name
## LR(1) items:
let_clause -> ml_name . list(ml_arg) let_annotation EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
let_clause -> ml_name . COLON app_term EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 331
-- On COLON shift to state 453
-- On ml_name shift to state 391
-- On ml_arg shift to state 437
-- On list(ml_arg) shift to state 457
## Reductions:
-- On EQ reduce production list(ml_arg) ->
-- On COLONGT reduce production list(ml_arg) ->

State 453:
## Known stack suffix:
## ml_name COLON
## LR(1) items:
let_clause -> ml_name COLON . app_term EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(app_term_) shift to state 152
-- On app_term_ shift to state 153
-- On app_term shift to state 454
-- On any_name shift to state 47
## Reductions:

State 454:
## Known stack suffix:
## ml_name COLON app_term
## LR(1) items:
let_clause -> ml_name COLON app_term . EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On EQ shift to state 455
## Reductions:

State 455:
## Known stack suffix:
## ml_name COLON app_term EQ
## LR(1) items:
let_clause -> ml_name COLON app_term EQ . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 456
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 456:
## Known stack suffix:
## ml_name COLON app_term EQ term
## LR(1) items:
let_clause -> ml_name COLON app_term EQ term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_clause -> ml_name COLON app_term EQ term

State 457:
## Known stack suffix:
## ml_name list(ml_arg)
## LR(1) items:
let_clause -> ml_name list(ml_arg) . let_annotation EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On COLONGT shift to state 54
-- On let_annotation shift to state 458
## Reductions:
-- On EQ reduce production let_annotation ->

State 458:
## Known stack suffix:
## ml_name list(ml_arg) let_annotation
## LR(1) items:
let_clause -> ml_name list(ml_arg) let_annotation . EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On EQ shift to state 459
## Reductions:

State 459:
## Known stack suffix:
## ml_name list(ml_arg) let_annotation EQ
## LR(1) items:
let_clause -> ml_name list(ml_arg) let_annotation EQ . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 460
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 460:
## Known stack suffix:
## ml_name list(ml_arg) let_annotation EQ term
## LR(1) items:
let_clause -> ml_name list(ml_arg) let_annotation EQ term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_clause -> ml_name list(ml_arg) let_annotation EQ term

State 461:
## Known stack suffix:
## mark_location(let_pattern_)
## LR(1) items:
let_pattern -> mark_location(let_pattern_) . [ EQ COLONGT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_pattern -> mark_location(let_pattern_)

State 462:
## Known stack suffix:
## let_pattern_
## LR(1) items:
mark_location(let_pattern_) -> let_pattern_ . [ EQ COLONGT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(let_pattern_) -> let_pattern_

State 463:
## Known stack suffix:
## let_pattern
## LR(1) items:
let_clause -> let_pattern . let_annotation EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On COLONGT shift to state 54
-- On let_annotation shift to state 464
## Reductions:
-- On EQ reduce production let_annotation ->

State 464:
## Known stack suffix:
## let_pattern let_annotation
## LR(1) items:
let_clause -> let_pattern let_annotation . EQ term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On EQ shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## let_pattern let_annotation EQ
## LR(1) items:
let_clause -> let_pattern let_annotation EQ . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 466
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 466:
## Known stack suffix:
## let_pattern let_annotation EQ term
## LR(1) items:
let_clause -> let_pattern let_annotation EQ term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_clause -> let_pattern let_annotation EQ term

State 467:
## Known stack suffix:
## let_clause
## LR(1) items:
separated_nonempty_list(AND,let_clause) -> let_clause . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
separated_nonempty_list(AND,let_clause) -> let_clause . AND separated_nonempty_list(AND,let_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On AND shift to state 468
## Reductions:
-- On WITH reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On VERBOSITY reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On SEMISEMI reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On RULE reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On REQUIRE reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On OPERATION reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On OPEN reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On MODULE reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On MLTYPE reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On LET reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On INCLUDE reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On IN reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On EXTERNAL reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On EXCEPTION reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On EOF reduce production separated_nonempty_list(AND,let_clause) -> let_clause
-- On END reduce production separated_nonempty_list(AND,let_clause) -> let_clause

State 468:
## Known stack suffix:
## let_clause AND
## LR(1) items:
separated_nonempty_list(AND,let_clause) -> let_clause AND . separated_nonempty_list(AND,let_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 53
-- On NAME shift to state 118
-- On LPAREN shift to state 443
-- On LBRACK shift to state 446
-- On separated_nonempty_list(AND,let_clause) shift to state 469
-- On ml_name shift to state 452
-- On mark_location(let_pattern_) shift to state 461
-- On let_pattern_ shift to state 462
-- On let_pattern shift to state 463
-- On let_clause shift to state 467
## Reductions:

State 469:
## Known stack suffix:
## let_clause AND separated_nonempty_list(AND,let_clause)
## LR(1) items:
separated_nonempty_list(AND,let_clause) -> let_clause AND separated_nonempty_list(AND,let_clause) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(AND,let_clause) -> let_clause AND separated_nonempty_list(AND,let_clause)

State 470:
## Known stack suffix:
## MATCH term
## LR(1) items:
term_ -> MATCH term . WITH match_cases END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## MATCH term WITH
## LR(1) items:
term_ -> MATCH term WITH . match_cases END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On BAR shift to state 472
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(BAR,match_case) shift to state 477
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 325
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On match_cases shift to state 478
-- On match_case shift to state 474
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On loption(separated_nonempty_list(BAR,match_case)) shift to state 480
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:
-- On END reduce production loption(separated_nonempty_list(BAR,match_case)) ->

State 472:
## Known stack suffix:
## BAR
## LR(1) items:
match_cases -> BAR . separated_nonempty_list(BAR,match_case) [ END ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(BAR,match_case) shift to state 473
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 325
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On match_case shift to state 474
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 473:
## Known stack suffix:
## BAR separated_nonempty_list(BAR,match_case)
## LR(1) items:
match_cases -> BAR separated_nonempty_list(BAR,match_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> BAR separated_nonempty_list(BAR,match_case)

State 474:
## Known stack suffix:
## match_case
## LR(1) items:
separated_nonempty_list(BAR,match_case) -> match_case . [ END ]
separated_nonempty_list(BAR,match_case) -> match_case . BAR separated_nonempty_list(BAR,match_case) [ END ]
## Transitions:
-- On BAR shift to state 475
## Reductions:
-- On END reduce production separated_nonempty_list(BAR,match_case) -> match_case

State 475:
## Known stack suffix:
## match_case BAR
## LR(1) items:
separated_nonempty_list(BAR,match_case) -> match_case BAR . separated_nonempty_list(BAR,match_case) [ END ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 218
-- On PREFIXOP shift to state 216
-- On NAME shift to state 220
-- On LPAREN shift to state 221
-- On LBRACK shift to state 226
-- On LBRACE shift to state 227
-- On tt_name shift to state 20
-- On tt_maybe_typed_binder shift to state 233
-- On simple_pattern_ shift to state 234
-- On separated_nonempty_list(BAR,match_case) shift to state 476
-- On prefix_pattern_ shift to state 235
-- On pattern_ shift to state 236
-- On pattern shift to state 325
-- On module_path shift to state 238
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On match_case shift to state 474
-- On mark_location(pattern_) shift to state 266
-- On mark_location(binop_pattern_) shift to state 267
-- On binop_pattern_ shift to state 268
-- On binop_pattern shift to state 269
-- On app_pattern_ shift to state 276
-- On any_name shift to state 277
## Reductions:

State 476:
## Known stack suffix:
## match_case BAR separated_nonempty_list(BAR,match_case)
## LR(1) items:
separated_nonempty_list(BAR,match_case) -> match_case BAR separated_nonempty_list(BAR,match_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(BAR,match_case) -> match_case BAR separated_nonempty_list(BAR,match_case)

State 477:
## Known stack suffix:
## separated_nonempty_list(BAR,match_case)
## LR(1) items:
loption(separated_nonempty_list(BAR,match_case)) -> separated_nonempty_list(BAR,match_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(BAR,match_case)) -> separated_nonempty_list(BAR,match_case)

State 478:
## Known stack suffix:
## MATCH term WITH match_cases
## LR(1) items:
term_ -> MATCH term WITH match_cases . END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On END shift to state 479
## Reductions:

State 479:
## Known stack suffix:
## MATCH term WITH match_cases END
## LR(1) items:
term_ -> MATCH term WITH match_cases END . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> MATCH term WITH match_cases END

State 480:
## Known stack suffix:
## loption(separated_nonempty_list(BAR,match_case))
## LR(1) items:
match_cases -> loption(separated_nonempty_list(BAR,match_case)) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> loption(separated_nonempty_list(BAR,match_case))

State 481:
## Known stack suffix:
## app_term_
## LR(1) items:
binop_term_ -> app_term_ . [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
mark_location(app_term_) -> app_term_ . [ EQEQ COLONQT COLONEQ COLON BY ]
## Transitions:
## Reductions:
-- On WITH reduce production binop_term_ -> app_term_
-- On VERBOSITY reduce production binop_term_ -> app_term_
-- On STAR reduce production binop_term_ -> app_term_
-- On SEMISEMI reduce production binop_term_ -> app_term_
-- On SEMI reduce production binop_term_ -> app_term_
-- On RULE reduce production binop_term_ -> app_term_
-- On REQUIRE reduce production binop_term_ -> app_term_
-- On OPERATION reduce production binop_term_ -> app_term_
-- On OPEN reduce production binop_term_ -> app_term_
-- On MODULE reduce production binop_term_ -> app_term_
-- On MLTYPE reduce production binop_term_ -> app_term_
-- On LET reduce production binop_term_ -> app_term_
-- On INFIXOP4 reduce production binop_term_ -> app_term_
-- On INFIXOP3 reduce production binop_term_ -> app_term_
-- On INFIXOP2 reduce production binop_term_ -> app_term_
-- On INFIXOP1 reduce production binop_term_ -> app_term_
-- On INFIXOP0 reduce production binop_term_ -> app_term_
-- On INFIXCONS reduce production binop_term_ -> app_term_
-- On INCLUDE reduce production binop_term_ -> app_term_
-- On EXTERNAL reduce production binop_term_ -> app_term_
-- On EXCEPTION reduce production binop_term_ -> app_term_
-- On EQEQ reduce production mark_location(app_term_) -> app_term_
-- On EQ reduce production binop_term_ -> app_term_
-- On EOF reduce production binop_term_ -> app_term_
-- On END reduce production binop_term_ -> app_term_
-- On COLONQT reduce production mark_location(app_term_) -> app_term_
-- On COLONEQ reduce production mark_location(app_term_) -> app_term_
-- On COLON reduce production mark_location(app_term_) -> app_term_
-- On BY reduce production mark_location(app_term_) -> app_term_

State 482:
## Known stack suffix:
## term
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term . [ RPAREN RBRACE ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RPAREN RBRACE ]
## Transitions:
-- On COMMA shift to state 483
## Reductions:
-- On RPAREN reduce production separated_nonempty_list(COMMA,term) -> term
-- On RBRACE reduce production separated_nonempty_list(COMMA,term) -> term

State 483:
## Known stack suffix:
## term COMMA
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RPAREN RBRACE ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 482
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On separated_nonempty_list(COMMA,term) shift to state 484
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 484:
## Known stack suffix:
## term COMMA separated_nonempty_list(COMMA,term)
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RPAREN RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)

State 485:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,term)
## LR(1) items:
substitution -> LBRACE separated_nonempty_list(COMMA,term) . RBRACE [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RBRACE shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,term) RBRACE
## LR(1) items:
substitution -> LBRACE separated_nonempty_list(COMMA,term) RBRACE . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production substitution -> LBRACE separated_nonempty_list(COMMA,term) RBRACE

State 487:
## Known stack suffix:
## OCCURS substitution_term substitution_term
## LR(1) items:
app_term_ -> OCCURS substitution_term substitution_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On LBRACE shift to state 50
-- On substitution shift to state 133
## Reductions:
-- On WITH reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On VERBOSITY reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On TRY reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On STAR reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On SEMISEMI reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On SEMI reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On RULE reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On RPAREN reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On REQUIRE reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On RBRACK reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On RBRACE reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On OPERATION reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On OPEN reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On MODULE reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On MLTYPE reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On LET reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On INFIXOP4 reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On INFIXOP3 reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On INFIXOP2 reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On INFIXOP1 reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On INFIXOP0 reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On INFIXCONS reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On INCLUDE reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On IN reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On EXTERNAL reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On EXCEPTION reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On EQEQ reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On EQ reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On EOF reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On END reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On COMMA reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On COLONQT reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On COLONGT reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On COLONEQ reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On COLON reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On BY reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On BAR reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On ARROW reduce production app_term_ -> OCCURS substitution_term substitution_term
-- On AND reduce production app_term_ -> OCCURS substitution_term substitution_term

State 488:
## Known stack suffix:
## QQMARK COLON app_term
## LR(1) items:
binop_term_ -> QQMARK COLON app_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQ EOF END COMMA COLONGT BY BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_term_ -> QQMARK COLON app_term

State 489:
## Known stack suffix:
## LBRACK list_contents
## LR(1) items:
simple_term_ -> LBRACK list_contents . RBRACK [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RBRACK shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## LBRACK list_contents RBRACK
## LR(1) items:
simple_term_ -> LBRACK list_contents RBRACK . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_term_ -> LBRACK list_contents RBRACK

State 491:
## Known stack suffix:
## binop_term
## LR(1) items:
binop_term_ -> binop_term . INFIXCONS binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
binop_term_ -> binop_term . EQ binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
binop_term_ -> binop_term . INFIXOP0 binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
binop_term_ -> binop_term . INFIXOP1 binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
binop_term_ -> binop_term . INFIXOP2 binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
binop_term_ -> binop_term . INFIXOP3 binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
binop_term_ -> binop_term . STAR binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
binop_term_ -> binop_term . INFIXOP4 binop_term [ STAR SEMI RBRACK INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQ ]
list_contents -> binop_term . option(SEMI) [ RBRACK ]
list_contents -> binop_term . SEMI list_contents [ RBRACK ]
## Transitions:
-- On STAR shift to state 174
-- On SEMI shift to state 492
-- On INFIXOP4 shift to state 177
-- On INFIXOP3 shift to state 193
-- On INFIXOP2 shift to state 195
-- On INFIXOP1 shift to state 197
-- On INFIXOP0 shift to state 201
-- On INFIXCONS shift to state 199
-- On EQ shift to state 203
-- On option(SEMI) shift to state 494
## Reductions:
-- On RBRACK reduce production option(SEMI) ->

State 492:
## Known stack suffix:
## binop_term SEMI
## LR(1) items:
list_contents -> binop_term SEMI . list_contents [ RBRACK ]
option(SEMI) -> SEMI . [ RBRACK ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On list_contents shift to state 493
-- On binop_term_ shift to state 175
-- On binop_term shift to state 491
-- On app_term_ shift to state 179
-- On app_term shift to state 180
-- On any_name shift to state 47
## Reductions:
-- On RBRACK reduce production option(SEMI) -> SEMI

State 493:
## Known stack suffix:
## binop_term SEMI list_contents
## LR(1) items:
list_contents -> binop_term SEMI list_contents . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_contents -> binop_term SEMI list_contents

State 494:
## Known stack suffix:
## binop_term option(SEMI)
## LR(1) items:
list_contents -> binop_term option(SEMI) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_contents -> binop_term option(SEMI)

State 495:
## Known stack suffix:
## RAISE substitution_term
## LR(1) items:
app_term_ -> RAISE substitution_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
substitution_term_ -> substitution_term . substitution [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE RBRACK RBRACE OPERATION OPEN MODULE MLTYPE LET LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR ARROW AND ]
## Transitions:
-- On LBRACE shift to state 50
-- On substitution shift to state 133
## Reductions:
-- On WITH reduce production app_term_ -> RAISE substitution_term
-- On VERBOSITY reduce production app_term_ -> RAISE substitution_term
-- On TRY reduce production app_term_ -> RAISE substitution_term
-- On STAR reduce production app_term_ -> RAISE substitution_term
-- On SEMISEMI reduce production app_term_ -> RAISE substitution_term
-- On SEMI reduce production app_term_ -> RAISE substitution_term
-- On RULE reduce production app_term_ -> RAISE substitution_term
-- On RPAREN reduce production app_term_ -> RAISE substitution_term
-- On REQUIRE reduce production app_term_ -> RAISE substitution_term
-- On RBRACK reduce production app_term_ -> RAISE substitution_term
-- On RBRACE reduce production app_term_ -> RAISE substitution_term
-- On OPERATION reduce production app_term_ -> RAISE substitution_term
-- On OPEN reduce production app_term_ -> RAISE substitution_term
-- On MODULE reduce production app_term_ -> RAISE substitution_term
-- On MLTYPE reduce production app_term_ -> RAISE substitution_term
-- On LET reduce production app_term_ -> RAISE substitution_term
-- On INFIXOP4 reduce production app_term_ -> RAISE substitution_term
-- On INFIXOP3 reduce production app_term_ -> RAISE substitution_term
-- On INFIXOP2 reduce production app_term_ -> RAISE substitution_term
-- On INFIXOP1 reduce production app_term_ -> RAISE substitution_term
-- On INFIXOP0 reduce production app_term_ -> RAISE substitution_term
-- On INFIXCONS reduce production app_term_ -> RAISE substitution_term
-- On INCLUDE reduce production app_term_ -> RAISE substitution_term
-- On IN reduce production app_term_ -> RAISE substitution_term
-- On EXTERNAL reduce production app_term_ -> RAISE substitution_term
-- On EXCEPTION reduce production app_term_ -> RAISE substitution_term
-- On EQEQ reduce production app_term_ -> RAISE substitution_term
-- On EQ reduce production app_term_ -> RAISE substitution_term
-- On EOF reduce production app_term_ -> RAISE substitution_term
-- On END reduce production app_term_ -> RAISE substitution_term
-- On COMMA reduce production app_term_ -> RAISE substitution_term
-- On COLONQT reduce production app_term_ -> RAISE substitution_term
-- On COLONGT reduce production app_term_ -> RAISE substitution_term
-- On COLONEQ reduce production app_term_ -> RAISE substitution_term
-- On COLON reduce production app_term_ -> RAISE substitution_term
-- On BY reduce production app_term_ -> RAISE substitution_term
-- On BAR reduce production app_term_ -> RAISE substitution_term
-- On ARROW reduce production app_term_ -> RAISE substitution_term
-- On AND reduce production app_term_ -> RAISE substitution_term

State 496:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
prefix_term_ -> PREFIXOP . prefix_term [ STAR SEMI RPAREN REF QUOTED_STRING PREFIXOP NATURAL NAME LPAREN LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS EQEQ EQ COMMA COLONQT COLONGT COLONEQ COLON BANG ]
tt_name -> LPAREN PREFIXOP . RPAREN [ WITH VERBOSITY TYPE TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 28
-- On REF shift to state 4
-- On QUOTED_STRING shift to state 5
-- On PREFIXOP shift to state 6
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On BANG shift to state 19
-- On tt_name shift to state 20
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 22
-- On prefix_term shift to state 497
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On mark_location(prefix_term_) shift to state 46
-- On any_name shift to state 47
## Reductions:

State 497:
## Known stack suffix:
## PREFIXOP prefix_term
## LR(1) items:
prefix_term_ -> PREFIXOP prefix_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_term_ -> PREFIXOP prefix_term

State 498:
## Known stack suffix:
## LPAREN term
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term . [ RPAREN ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RPAREN ]
simple_term_ -> LPAREN term . COLONGT ml_schema RPAREN [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On COMMA shift to state 483
-- On COLONGT shift to state 499
## Reductions:
-- On RPAREN reduce production separated_nonempty_list(COMMA,term) -> term

State 499:
## Known stack suffix:
## LPAREN term COLONGT
## LR(1) items:
simple_term_ -> LPAREN term COLONGT . ml_schema RPAREN [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLFORALL shift to state 116
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 125
-- On ml_schema_ shift to state 126
-- On ml_schema shift to state 500
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(ml_schema_) shift to state 128
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 500:
## Known stack suffix:
## LPAREN term COLONGT ml_schema
## LR(1) items:
simple_term_ -> LPAREN term COLONGT ml_schema . RPAREN [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 501
## Reductions:

State 501:
## Known stack suffix:
## LPAREN term COLONGT ml_schema RPAREN
## LR(1) items:
simple_term_ -> LPAREN term COLONGT ml_schema RPAREN . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_term_ -> LPAREN term COLONGT ml_schema RPAREN

State 502:
## Known stack suffix:
## separated_nonempty_list(COMMA,term)
## LR(1) items:
loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term)

State 503:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,term))
## LR(1) items:
simple_term_ -> LPAREN loption(separated_nonempty_list(COMMA,term)) . RPAREN [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
-- On RPAREN shift to state 504
## Reductions:

State 504:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,term)) RPAREN
## LR(1) items:
simple_term_ -> LPAREN loption(separated_nonempty_list(COMMA,term)) RPAREN . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_term_ -> LPAREN loption(separated_nonempty_list(COMMA,term)) RPAREN

State 505:
## Known stack suffix:
## NATURAL prefix_term
## LR(1) items:
prefix_term_ -> NATURAL prefix_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_term_ -> NATURAL prefix_term

State 506:
## Known stack suffix:
## REF prefix_term
## LR(1) items:
prefix_term_ -> REF prefix_term . [ WITH VERBOSITY TRY STAR SEMISEMI SEMI RULE RPAREN REQUIRE REF RBRACK RBRACE QUOTED_STRING PREFIXOP OPERATION OPEN NATURAL NAME MODULE MLTYPE LPAREN LET LBRACK LBRACE INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE IN EXTERNAL EXCEPTION EQEQ EQ EOF END COMMA COLONQT COLONGT COLONEQ COLON BY BAR BANG ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefix_term_ -> REF prefix_term

State 507:
## Known stack suffix:
## TRY term
## LR(1) items:
term_ -> TRY term . WITH handler_cases END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## TRY term WITH
## LR(1) items:
term_ -> TRY term WITH . handler_cases END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On VAL shift to state 210
-- On RAISE shift to state 396
-- On NAME shift to state 398
-- On BAR shift to state 399
-- On separated_nonempty_list(BAR,handler_case) shift to state 420
-- On op_name shift to state 401
-- On module_path shift to state 410
-- On module_name shift to state 45
-- On loption(separated_nonempty_list(BAR,handler_case)) shift to state 421
-- On handler_cases shift to state 509
-- On handler_case shift to state 417
## Reductions:
-- On END reduce production loption(separated_nonempty_list(BAR,handler_case)) ->

State 509:
## Known stack suffix:
## TRY term WITH handler_cases
## LR(1) items:
term_ -> TRY term WITH handler_cases . END [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On END shift to state 510
## Reductions:

State 510:
## Known stack suffix:
## TRY term WITH handler_cases END
## LR(1) items:
term_ -> TRY term WITH handler_cases END . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> TRY term WITH handler_cases END

State 511:
## Known stack suffix:
## WITH term
## LR(1) items:
term_ -> WITH term . TRY term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On TRY shift to state 512
## Reductions:

State 512:
## Known stack suffix:
## WITH term TRY
## LR(1) items:
term_ -> WITH term TRY . term [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 513
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 513:
## Known stack suffix:
## WITH term TRY term
## LR(1) items:
term_ -> WITH term TRY term . [ WITH VERBOSITY TRY SEMISEMI RULE RPAREN REQUIRE RBRACE OPERATION OPEN MODULE MLTYPE LET INCLUDE IN EXTERNAL EXCEPTION EOF END COMMA COLONGT BY BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_ -> WITH term TRY term

State 514:
## Known stack suffix:
## OPERATION
## LR(1) items:
top_operation_case -> OPERATION . op_name list(prefix_pattern) handler_checking ARROW term [ END BAR ]
top_operation_case -> OPERATION . module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW term [ END BAR ]
## Transitions:
-- On NAME shift to state 398
-- On op_name shift to state 515
-- On module_path shift to state 520
-- On module_name shift to state 45
## Reductions:

State 515:
## Known stack suffix:
## OPERATION op_name
## LR(1) items:
top_operation_case -> OPERATION op_name . list(prefix_pattern) handler_checking ARROW term [ END BAR ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 402
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
-- On list(prefix_pattern) shift to state 516
## Reductions:
-- On COLON reduce production list(prefix_pattern) ->
-- On ARROW reduce production list(prefix_pattern) ->

State 516:
## Known stack suffix:
## OPERATION op_name list(prefix_pattern)
## LR(1) items:
top_operation_case -> OPERATION op_name list(prefix_pattern) . handler_checking ARROW term [ END BAR ]
## Transitions:
-- On COLON shift to state 405
-- On handler_checking shift to state 517
## Reductions:
-- On ARROW reduce production handler_checking ->

State 517:
## Known stack suffix:
## OPERATION op_name list(prefix_pattern) handler_checking
## LR(1) items:
top_operation_case -> OPERATION op_name list(prefix_pattern) handler_checking . ARROW term [ END BAR ]
## Transitions:
-- On ARROW shift to state 518
## Reductions:

State 518:
## Known stack suffix:
## OPERATION op_name list(prefix_pattern) handler_checking ARROW
## LR(1) items:
top_operation_case -> OPERATION op_name list(prefix_pattern) handler_checking ARROW . term [ END BAR ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 519
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 519:
## Known stack suffix:
## OPERATION op_name list(prefix_pattern) handler_checking ARROW term
## LR(1) items:
top_operation_case -> OPERATION op_name list(prefix_pattern) handler_checking ARROW term . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_operation_case -> OPERATION op_name list(prefix_pattern) handler_checking ARROW term

State 520:
## Known stack suffix:
## OPERATION module_path
## LR(1) items:
module_path -> module_path . PERIOD module_name [ PERIOD ]
top_operation_case -> OPERATION module_path . PERIOD op_name list(prefix_pattern) handler_checking ARROW term [ END BAR ]
## Transitions:
-- On PERIOD shift to state 521
## Reductions:

State 521:
## Known stack suffix:
## OPERATION module_path PERIOD
## LR(1) items:
module_path -> module_path PERIOD . module_name [ PERIOD ]
top_operation_case -> OPERATION module_path PERIOD . op_name list(prefix_pattern) handler_checking ARROW term [ END BAR ]
## Transitions:
-- On NAME shift to state 398
-- On op_name shift to state 522
-- On module_name shift to state 43
## Reductions:

State 522:
## Known stack suffix:
## OPERATION module_path PERIOD op_name
## LR(1) items:
top_operation_case -> OPERATION module_path PERIOD op_name . list(prefix_pattern) handler_checking ARROW term [ END BAR ]
## Transitions:
-- On UNDERSCORE shift to state 211
-- On UATOM shift to state 212
-- On QUOTED_STRING shift to state 213
-- On QQMARK shift to state 214
-- On PREFIXOP shift to state 216
-- On NAME shift to state 57
-- On LPAREN shift to state 217
-- On LBRACK shift to state 226
-- On simple_pattern_ shift to state 234
-- On prefix_pattern_ shift to state 258
-- On prefix_pattern shift to state 402
-- On module_path shift to state 261
-- On module_name shift to state 45
-- On ml_name shift to state 263
-- On mark_location(prefix_pattern_) shift to state 264
-- On list(prefix_pattern) shift to state 523
## Reductions:
-- On COLON reduce production list(prefix_pattern) ->
-- On ARROW reduce production list(prefix_pattern) ->

State 523:
## Known stack suffix:
## OPERATION module_path PERIOD op_name list(prefix_pattern)
## LR(1) items:
top_operation_case -> OPERATION module_path PERIOD op_name list(prefix_pattern) . handler_checking ARROW term [ END BAR ]
## Transitions:
-- On COLON shift to state 405
-- On handler_checking shift to state 524
## Reductions:
-- On ARROW reduce production handler_checking ->

State 524:
## Known stack suffix:
## OPERATION module_path PERIOD op_name list(prefix_pattern) handler_checking
## LR(1) items:
top_operation_case -> OPERATION module_path PERIOD op_name list(prefix_pattern) handler_checking . ARROW term [ END BAR ]
## Transitions:
-- On ARROW shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## OPERATION module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW
## LR(1) items:
top_operation_case -> OPERATION module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW . term [ END BAR ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 526
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 179
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 526:
## Known stack suffix:
## OPERATION module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW term
## LR(1) items:
top_operation_case -> OPERATION module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW term . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_operation_case -> OPERATION module_path PERIOD op_name list(prefix_pattern) handler_checking ARROW term

State 527:
## Known stack suffix:
## BAR
## LR(1) items:
top_operation_cases -> BAR . separated_nonempty_list(BAR,top_operation_case) [ END ]
## Transitions:
-- On OPERATION shift to state 514
-- On top_operation_case shift to state 528
-- On separated_nonempty_list(BAR,top_operation_case) shift to state 531
## Reductions:

State 528:
## Known stack suffix:
## top_operation_case
## LR(1) items:
separated_nonempty_list(BAR,top_operation_case) -> top_operation_case . [ END ]
separated_nonempty_list(BAR,top_operation_case) -> top_operation_case . BAR separated_nonempty_list(BAR,top_operation_case) [ END ]
## Transitions:
-- On BAR shift to state 529
## Reductions:
-- On END reduce production separated_nonempty_list(BAR,top_operation_case) -> top_operation_case

State 529:
## Known stack suffix:
## top_operation_case BAR
## LR(1) items:
separated_nonempty_list(BAR,top_operation_case) -> top_operation_case BAR . separated_nonempty_list(BAR,top_operation_case) [ END ]
## Transitions:
-- On OPERATION shift to state 514
-- On top_operation_case shift to state 528
-- On separated_nonempty_list(BAR,top_operation_case) shift to state 530
## Reductions:

State 530:
## Known stack suffix:
## top_operation_case BAR separated_nonempty_list(BAR,top_operation_case)
## LR(1) items:
separated_nonempty_list(BAR,top_operation_case) -> top_operation_case BAR separated_nonempty_list(BAR,top_operation_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(BAR,top_operation_case) -> top_operation_case BAR separated_nonempty_list(BAR,top_operation_case)

State 531:
## Known stack suffix:
## BAR separated_nonempty_list(BAR,top_operation_case)
## LR(1) items:
top_operation_cases -> BAR separated_nonempty_list(BAR,top_operation_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_operation_cases -> BAR separated_nonempty_list(BAR,top_operation_case)

State 532:
## Known stack suffix:
## WITH top_operation_cases
## LR(1) items:
top_command_ -> WITH top_operation_cases . END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On END shift to state 533
## Reductions:

State 533:
## Known stack suffix:
## WITH top_operation_cases END
## LR(1) items:
top_command_ -> WITH top_operation_cases END . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> WITH top_operation_cases END

State 534:
## Known stack suffix:
## separated_nonempty_list(BAR,top_operation_case)
## LR(1) items:
loption(separated_nonempty_list(BAR,top_operation_case)) -> separated_nonempty_list(BAR,top_operation_case) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(BAR,top_operation_case)) -> separated_nonempty_list(BAR,top_operation_case)

State 535:
## Known stack suffix:
## loption(separated_nonempty_list(BAR,top_operation_case))
## LR(1) items:
top_operation_cases -> loption(separated_nonempty_list(BAR,top_operation_case)) . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_operation_cases -> loption(separated_nonempty_list(BAR,top_operation_case))

State 536:
## Known stack suffix:
## VERBOSITY
## LR(1) items:
top_command_ -> VERBOSITY . NUMERAL [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NUMERAL shift to state 537
## Reductions:

State 537:
## Known stack suffix:
## VERBOSITY NUMERAL
## LR(1) items:
top_command_ -> VERBOSITY NUMERAL . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> VERBOSITY NUMERAL

State 538:
## Known stack suffix:
## RULE
## LR(1) items:
top_command_ -> RULE . rule_ [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 158
-- On LPAREN shift to state 26
-- On tt_name shift to state 539
-- On rule_ shift to state 553
## Reductions:

State 539:
## Known stack suffix:
## tt_name
## LR(1) items:
rule_ -> tt_name . list(premise) TYPE [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name . list(premise) COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name . list(premise) COLON app_term EQEQ ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name . list(premise) COLON app_term EQEQ app_term COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On LPAREN shift to state 343
-- On premise_ shift to state 383
-- On premise shift to state 540
-- On mark_location(premise_) shift to state 386
-- On list(premise) shift to state 542
## Reductions:
-- On TYPE reduce production list(premise) ->
-- On COLON reduce production list(premise) ->

State 540:
## Known stack suffix:
## premise
## LR(1) items:
list(premise) -> premise . list(premise) [ TYPE COLON ]
## Transitions:
-- On LPAREN shift to state 343
-- On premise_ shift to state 383
-- On premise shift to state 540
-- On mark_location(premise_) shift to state 386
-- On list(premise) shift to state 541
## Reductions:
-- On TYPE reduce production list(premise) ->
-- On COLON reduce production list(premise) ->

State 541:
## Known stack suffix:
## premise list(premise)
## LR(1) items:
list(premise) -> premise list(premise) . [ TYPE COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(premise) -> premise list(premise)

State 542:
## Known stack suffix:
## tt_name list(premise)
## LR(1) items:
rule_ -> tt_name list(premise) . TYPE [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name list(premise) . COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name list(premise) . COLON app_term EQEQ ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name list(premise) . COLON app_term EQEQ app_term COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On TYPE shift to state 543
-- On COLON shift to state 544
## Reductions:

State 543:
## Known stack suffix:
## tt_name list(premise) TYPE
## LR(1) items:
rule_ -> tt_name list(premise) TYPE . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_ -> tt_name list(premise) TYPE

State 544:
## Known stack suffix:
## tt_name list(premise) COLON
## LR(1) items:
rule_ -> tt_name list(premise) COLON . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name list(premise) COLON . app_term EQEQ ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name list(premise) COLON . app_term EQEQ app_term COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 545
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 546
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 545:
## Known stack suffix:
## tt_name list(premise) COLON term
## LR(1) items:
rule_ -> tt_name list(premise) COLON term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_ -> tt_name list(premise) COLON term

State 546:
## Known stack suffix:
## tt_name list(premise) COLON app_term
## LR(1) items:
binop_term_ -> app_term . COLONEQ binop_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
rule_ -> tt_name list(premise) COLON app_term . EQEQ ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name list(premise) COLON app_term . EQEQ app_term COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
term_ -> app_term . COLONQT ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
term_ -> app_term . COLON ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On EQEQ shift to state 547
-- On COLONQT shift to state 366
-- On COLONEQ shift to state 191
-- On COLON shift to state 368
## Reductions:

State 547:
## Known stack suffix:
## tt_name list(premise) COLON app_term EQEQ
## LR(1) items:
binop_term_ -> app_term EQEQ . app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ . app_term COLON app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ . app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ . app_term COLON app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
rule_ -> tt_name list(premise) COLON app_term EQEQ . ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
rule_ -> tt_name list(premise) COLON app_term EQEQ . app_term COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On LPAREN shift to state 9
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 164
-- On ty_term shift to state 548
-- On tt_name shift to state 20
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(ty_term_) shift to state 170
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 173
-- On app_term_ shift to state 481
-- On app_term shift to state 549
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 548:
## Known stack suffix:
## tt_name list(premise) COLON app_term EQEQ ty_term
## LR(1) items:
rule_ -> tt_name list(premise) COLON app_term EQEQ ty_term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_ -> tt_name list(premise) COLON app_term EQEQ ty_term

State 549:
## Known stack suffix:
## tt_name list(premise) COLON app_term EQEQ app_term
## LR(1) items:
binop_term_ -> app_term . COLONEQ binop_term [ WITH VERBOSITY STAR SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ app_term . BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ app_term . COLON app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ app_term . BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ app_term . COLON app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
rule_ -> tt_name list(premise) COLON app_term EQEQ app_term . COLON term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On EQEQ shift to state 181
-- On COLONEQ shift to state 191
-- On COLON shift to state 550
-- On BY shift to state 188
## Reductions:

State 550:
## Known stack suffix:
## tt_name list(premise) COLON app_term EQEQ app_term COLON
## LR(1) items:
binop_term_ -> app_term EQEQ app_term COLON . app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ app_term COLON . app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
rule_ -> tt_name list(premise) COLON app_term EQEQ app_term COLON . term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On WITH shift to state 2
-- On TRY shift to state 3
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 52
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On term_ shift to state 358
-- On term shift to state 551
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On maybe_typed_binder shift to state 168
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 552
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:

State 551:
## Known stack suffix:
## tt_name list(premise) COLON app_term EQEQ app_term COLON term
## LR(1) items:
rule_ -> tt_name list(premise) COLON app_term EQEQ app_term COLON term . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_ -> tt_name list(premise) COLON app_term EQEQ app_term COLON term

State 552:
## Known stack suffix:
## app_term EQEQ app_term COLON app_term
## LR(1) items:
binop_term_ -> app_term . COLONEQ binop_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ app_term COLON app_term . BY app_term [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term . EQEQ app_term COLON app_term BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
binop_term_ -> app_term EQEQ app_term COLON app_term . BY QQMARK [ WITH VERBOSITY STAR SEMISEMI SEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INFIXCONS INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
term_ -> app_term . COLONQT ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
term_ -> app_term . COLON ty_term [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On EQEQ shift to state 181
-- On COLONQT shift to state 366
-- On COLONEQ shift to state 191
-- On COLON shift to state 368
-- On BY shift to state 185
## Reductions:

State 553:
## Known stack suffix:
## RULE rule_
## LR(1) items:
top_command_ -> RULE rule_ . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> RULE rule_

State 554:
## Known stack suffix:
## REQUIRE
## LR(1) items:
top_command_ -> REQUIRE . separated_nonempty_list(COMMA,module_name) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 555
-- On separated_nonempty_list(COMMA,module_name) shift to state 556
-- On module_name shift to state 557
## Reductions:

State 555:
## Known stack suffix:
## NAME
## LR(1) items:
module_name -> NAME . [ WITH VERBOSITY SEMISEMI RULE REQUIRE PERIOD OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_name -> NAME

State 556:
## Known stack suffix:
## REQUIRE separated_nonempty_list(COMMA,module_name)
## LR(1) items:
top_command_ -> REQUIRE separated_nonempty_list(COMMA,module_name) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> REQUIRE separated_nonempty_list(COMMA,module_name)

State 557:
## Known stack suffix:
## module_name
## LR(1) items:
separated_nonempty_list(COMMA,module_name) -> module_name . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
separated_nonempty_list(COMMA,module_name) -> module_name . COMMA separated_nonempty_list(COMMA,module_name) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On COMMA shift to state 558
## Reductions:
-- On WITH reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On VERBOSITY reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On SEMISEMI reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On RULE reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On REQUIRE reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On OPERATION reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On OPEN reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On MODULE reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On MLTYPE reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On LET reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On INCLUDE reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On EXTERNAL reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On EXCEPTION reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On EOF reduce production separated_nonempty_list(COMMA,module_name) -> module_name
-- On END reduce production separated_nonempty_list(COMMA,module_name) -> module_name

State 558:
## Known stack suffix:
## module_name COMMA
## LR(1) items:
separated_nonempty_list(COMMA,module_name) -> module_name COMMA . separated_nonempty_list(COMMA,module_name) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 555
-- On separated_nonempty_list(COMMA,module_name) shift to state 559
-- On module_name shift to state 557
## Reductions:

State 559:
## Known stack suffix:
## module_name COMMA separated_nonempty_list(COMMA,module_name)
## LR(1) items:
separated_nonempty_list(COMMA,module_name) -> module_name COMMA separated_nonempty_list(COMMA,module_name) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,module_name) -> module_name COMMA separated_nonempty_list(COMMA,module_name)

State 560:
## Known stack suffix:
## OPERATION
## LR(1) items:
top_command_ -> OPERATION . op_name COLON op_mlsig [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 561
-- On op_name shift to state 562
## Reductions:

State 561:
## Known stack suffix:
## NAME
## LR(1) items:
op_name -> NAME . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op_name -> NAME

State 562:
## Known stack suffix:
## OPERATION op_name
## LR(1) items:
top_command_ -> OPERATION op_name . COLON op_mlsig [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On COLON shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## OPERATION op_name COLON
## LR(1) items:
top_command_ -> OPERATION op_name COLON . op_mlsig [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On separated_nonempty_list(ARROW,prod_mlty) shift to state 564
-- On prod_mlty_ shift to state 297
-- On prod_mlty shift to state 565
-- On op_mlsig shift to state 568
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 564:
## Known stack suffix:
## separated_nonempty_list(ARROW,prod_mlty)
## LR(1) items:
op_mlsig -> separated_nonempty_list(ARROW,prod_mlty) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op_mlsig -> separated_nonempty_list(ARROW,prod_mlty)

State 565:
## Known stack suffix:
## prod_mlty
## LR(1) items:
separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty . ARROW separated_nonempty_list(ARROW,prod_mlty) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On ARROW shift to state 566
## Reductions:
-- On WITH reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On VERBOSITY reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On SEMISEMI reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On RULE reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On REQUIRE reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On OPERATION reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On OPEN reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On MODULE reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On MLTYPE reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On LET reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On INCLUDE reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On EXTERNAL reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On EXCEPTION reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On EOF reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty
-- On END reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty

State 566:
## Known stack suffix:
## prod_mlty ARROW
## LR(1) items:
separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty ARROW . separated_nonempty_list(ARROW,prod_mlty) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On separated_nonempty_list(ARROW,prod_mlty) shift to state 567
-- On prod_mlty_ shift to state 297
-- On prod_mlty shift to state 565
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 567:
## Known stack suffix:
## prod_mlty ARROW separated_nonempty_list(ARROW,prod_mlty)
## LR(1) items:
separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty ARROW separated_nonempty_list(ARROW,prod_mlty) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(ARROW,prod_mlty) -> prod_mlty ARROW separated_nonempty_list(ARROW,prod_mlty)

State 568:
## Known stack suffix:
## OPERATION op_name COLON op_mlsig
## LR(1) items:
top_command_ -> OPERATION op_name COLON op_mlsig . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> OPERATION op_name COLON op_mlsig

State 569:
## Known stack suffix:
## OPEN
## LR(1) items:
top_command_ -> OPEN . module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> OPEN . module_path PERIOD module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 555
-- On module_path shift to state 570
-- On module_name shift to state 573
## Reductions:

State 570:
## Known stack suffix:
## OPEN module_path
## LR(1) items:
module_path -> module_path . PERIOD module_name [ PERIOD ]
top_command_ -> OPEN module_path . PERIOD module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On PERIOD shift to state 571
## Reductions:

State 571:
## Known stack suffix:
## OPEN module_path PERIOD
## LR(1) items:
module_path -> module_path PERIOD . module_name [ PERIOD ]
top_command_ -> OPEN module_path PERIOD . module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 555
-- On module_name shift to state 572
## Reductions:

State 572:
## Known stack suffix:
## OPEN module_path PERIOD module_name
## LR(1) items:
module_path -> module_path PERIOD module_name . [ PERIOD ]
top_command_ -> OPEN module_path PERIOD module_name . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Reductions:
-- On WITH reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On VERBOSITY reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On SEMISEMI reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On RULE reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On REQUIRE reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On PERIOD reduce production module_path -> module_path PERIOD module_name
-- On OPERATION reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On OPEN reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On MODULE reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On MLTYPE reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On LET reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On INCLUDE reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On EXTERNAL reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On EXCEPTION reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On EOF reduce production top_command_ -> OPEN module_path PERIOD module_name
-- On END reduce production top_command_ -> OPEN module_path PERIOD module_name

State 573:
## Known stack suffix:
## OPEN module_name
## LR(1) items:
module_path -> module_name . [ PERIOD ]
top_command_ -> OPEN module_name . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Reductions:
-- On WITH reduce production top_command_ -> OPEN module_name
-- On VERBOSITY reduce production top_command_ -> OPEN module_name
-- On SEMISEMI reduce production top_command_ -> OPEN module_name
-- On RULE reduce production top_command_ -> OPEN module_name
-- On REQUIRE reduce production top_command_ -> OPEN module_name
-- On PERIOD reduce production module_path -> module_name
-- On OPERATION reduce production top_command_ -> OPEN module_name
-- On OPEN reduce production top_command_ -> OPEN module_name
-- On MODULE reduce production top_command_ -> OPEN module_name
-- On MLTYPE reduce production top_command_ -> OPEN module_name
-- On LET reduce production top_command_ -> OPEN module_name
-- On INCLUDE reduce production top_command_ -> OPEN module_name
-- On EXTERNAL reduce production top_command_ -> OPEN module_name
-- On EXCEPTION reduce production top_command_ -> OPEN module_name
-- On EOF reduce production top_command_ -> OPEN module_name
-- On END reduce production top_command_ -> OPEN module_name

State 574:
## Known stack suffix:
## MODULE
## LR(1) items:
top_command_ -> MODULE . module_name EQ STRUCT ml_module END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 555
-- On module_name shift to state 575
## Reductions:

State 575:
## Known stack suffix:
## MODULE module_name
## LR(1) items:
top_command_ -> MODULE module_name . EQ STRUCT ml_module END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On EQ shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## MODULE module_name EQ
## LR(1) items:
top_command_ -> MODULE module_name EQ . STRUCT ml_module END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On STRUCT shift to state 577
## Reductions:

State 577:
## Known stack suffix:
## MODULE module_name EQ STRUCT
## LR(1) items:
top_command_ -> MODULE module_name EQ STRUCT . ml_module END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On WITH shift to state 1
-- On VERBOSITY shift to state 536
-- On TRY shift to state 3
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 647
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On INCLUDE shift to state 651
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On top_term_ shift to state 667
-- On top_term shift to state 668
-- On top_command_ shift to state 670
-- On top_command shift to state 671
-- On term_ shift to state 358
-- On term shift to state 674
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On ml_module shift to state 688
-- On maybe_typed_binder shift to state 168
-- On mark_location(top_term_) shift to state 676
-- On mark_location(top_command_) shift to state 677
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:
-- On END reduce production ml_module ->

State 578:
## Known stack suffix:
## MLTYPE
## LR(1) items:
top_command_ -> MLTYPE . ml_name list(opt_name(ml_name)) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> MLTYPE . mlty_defs [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> MLTYPE . REC mlty_defs [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On REC shift to state 579
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On separated_nonempty_list(AND,mlty_def) shift to state 580
-- On mlty_defs shift to state 644
-- On mlty_def shift to state 582
-- On ml_name shift to state 645
## Reductions:

State 579:
## Known stack suffix:
## MLTYPE REC
## LR(1) items:
top_command_ -> MLTYPE REC . mlty_defs [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On separated_nonempty_list(AND,mlty_def) shift to state 580
-- On mlty_defs shift to state 581
-- On mlty_def shift to state 582
-- On ml_name shift to state 585
## Reductions:

State 580:
## Known stack suffix:
## separated_nonempty_list(AND,mlty_def)
## LR(1) items:
mlty_defs -> separated_nonempty_list(AND,mlty_def) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_defs -> separated_nonempty_list(AND,mlty_def)

State 581:
## Known stack suffix:
## MLTYPE REC mlty_defs
## LR(1) items:
top_command_ -> MLTYPE REC mlty_defs . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> MLTYPE REC mlty_defs

State 582:
## Known stack suffix:
## mlty_def
## LR(1) items:
separated_nonempty_list(AND,mlty_def) -> mlty_def . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
separated_nonempty_list(AND,mlty_def) -> mlty_def . AND separated_nonempty_list(AND,mlty_def) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On AND shift to state 583
## Reductions:
-- On WITH reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On VERBOSITY reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On SEMISEMI reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On RULE reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On REQUIRE reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On OPERATION reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On OPEN reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On MODULE reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On MLTYPE reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On LET reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On INCLUDE reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On EXTERNAL reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On EXCEPTION reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On EOF reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def
-- On END reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def

State 583:
## Known stack suffix:
## mlty_def AND
## LR(1) items:
separated_nonempty_list(AND,mlty_def) -> mlty_def AND . separated_nonempty_list(AND,mlty_def) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On separated_nonempty_list(AND,mlty_def) shift to state 584
-- On mlty_def shift to state 582
-- On ml_name shift to state 585
## Reductions:

State 584:
## Known stack suffix:
## mlty_def AND separated_nonempty_list(AND,mlty_def)
## LR(1) items:
separated_nonempty_list(AND,mlty_def) -> mlty_def AND separated_nonempty_list(AND,mlty_def) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(AND,mlty_def) -> mlty_def AND separated_nonempty_list(AND,mlty_def)

State 585:
## Known stack suffix:
## ml_name
## LR(1) items:
mlty_def -> ml_name . list(opt_name(ml_name)) EQ mlty_def_body [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On opt_name(ml_name) shift to state 586
-- On ml_name shift to state 121
-- On list(opt_name(ml_name)) shift to state 588
## Reductions:
-- On EQ reduce production list(opt_name(ml_name)) ->

State 586:
## Known stack suffix:
## opt_name(ml_name)
## LR(1) items:
list(opt_name(ml_name)) -> opt_name(ml_name) . list(opt_name(ml_name)) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On opt_name(ml_name) shift to state 586
-- On ml_name shift to state 121
-- On list(opt_name(ml_name)) shift to state 587
## Reductions:
-- On WITH reduce production list(opt_name(ml_name)) ->
-- On VERBOSITY reduce production list(opt_name(ml_name)) ->
-- On SEMISEMI reduce production list(opt_name(ml_name)) ->
-- On RULE reduce production list(opt_name(ml_name)) ->
-- On REQUIRE reduce production list(opt_name(ml_name)) ->
-- On OPERATION reduce production list(opt_name(ml_name)) ->
-- On OPEN reduce production list(opt_name(ml_name)) ->
-- On MODULE reduce production list(opt_name(ml_name)) ->
-- On MLTYPE reduce production list(opt_name(ml_name)) ->
-- On LET reduce production list(opt_name(ml_name)) ->
-- On INCLUDE reduce production list(opt_name(ml_name)) ->
-- On EXTERNAL reduce production list(opt_name(ml_name)) ->
-- On EXCEPTION reduce production list(opt_name(ml_name)) ->
-- On EQ reduce production list(opt_name(ml_name)) ->
-- On EOF reduce production list(opt_name(ml_name)) ->
-- On END reduce production list(opt_name(ml_name)) ->

State 587:
## Known stack suffix:
## opt_name(ml_name) list(opt_name(ml_name))
## LR(1) items:
list(opt_name(ml_name)) -> opt_name(ml_name) list(opt_name(ml_name)) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EQ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(opt_name(ml_name)) -> opt_name(ml_name) list(opt_name(ml_name))

State 588:
## Known stack suffix:
## ml_name list(opt_name(ml_name))
## LR(1) items:
mlty_def -> ml_name list(opt_name(ml_name)) . EQ mlty_def_body [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On EQ shift to state 589
## Reductions:

State 589:
## Known stack suffix:
## ml_name list(opt_name(ml_name)) EQ
## LR(1) items:
mlty_def -> ml_name list(opt_name(ml_name)) EQ . mlty_def_body [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 590
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 591
-- On BAR shift to state 610
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_def_body shift to state 639
-- On mlty_constructor shift to state 640
-- On mlty_ shift to state 100
-- On mlty shift to state 643
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(app_mlty_) shift to state 106
-- On constr_name shift to state 635
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 590:
## Known stack suffix:
## NAME
## LR(1) items:
constr_name -> NAME . [ OF BAR ]
ml_name -> NAME . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
module_name -> NAME . [ PERIOD ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> NAME
-- On VERBOSITY reduce production ml_name -> NAME
-- On UNDERSCORE reduce production ml_name -> NAME
-- On STAR reduce production ml_name -> NAME
-- On SEMISEMI reduce production ml_name -> NAME
-- On RULE reduce production ml_name -> NAME
-- On REQUIRE reduce production ml_name -> NAME
-- On PERIOD reduce production module_name -> NAME
-- On OPERATION reduce production ml_name -> NAME
-- On OPEN reduce production ml_name -> NAME
-- On OF reduce production constr_name -> NAME
-- On NAME reduce production ml_name -> NAME
-- On MODULE reduce production ml_name -> NAME
-- On MLUNIT reduce production ml_name -> NAME
-- On MLTYPE reduce production ml_name -> NAME
-- On MLSTRING reduce production ml_name -> NAME
-- On MLJUDGEMENT reduce production ml_name -> NAME
-- On MLDERIVATION reduce production ml_name -> NAME
-- On MLBOUNDARY reduce production ml_name -> NAME
-- On LPAREN reduce production ml_name -> NAME
-- On LET reduce production ml_name -> NAME
-- On INCLUDE reduce production ml_name -> NAME
-- On EXTERNAL reduce production ml_name -> NAME
-- On EXCEPTION reduce production ml_name -> NAME
-- On EOF reduce production ml_name -> NAME
-- On END reduce production ml_name -> NAME
-- On DARROW reduce production ml_name -> NAME
-- On BAR reduce production constr_name -> NAME
-- On ARROW reduce production ml_name -> NAME
-- On AND reduce production ml_name -> NAME

State 591:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_name -> LPAREN . INFIXCONS RPAREN [ OF BAR ]
constr_name -> LPAREN . EQ RPAREN [ OF BAR ]
constr_name -> LPAREN . INFIXOP0 RPAREN [ OF BAR ]
constr_name -> LPAREN . INFIXOP1 RPAREN [ OF BAR ]
constr_name -> LPAREN . INFIXOP2 RPAREN [ OF BAR ]
constr_name -> LPAREN . INFIXOP3 RPAREN [ OF BAR ]
constr_name -> LPAREN . STAR RPAREN [ OF BAR ]
constr_name -> LPAREN . INFIXOP4 RPAREN [ OF BAR ]
constr_name -> LPAREN . PREFIXOP RPAREN [ OF BAR ]
ml_name -> LPAREN . INFIXCONS RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . EQ RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . INFIXOP0 RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . INFIXOP1 RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . INFIXOP2 RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . INFIXOP3 RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . STAR RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . INFIXOP4 RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
ml_name -> LPAREN . PREFIXOP RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
simple_mlty_ -> LPAREN . mlty_ RPAREN [ WITH VERBOSITY STAR SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On STAR shift to state 592
-- On REF shift to state 56
-- On PREFIXOP shift to state 594
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On INFIXOP4 shift to state 596
-- On INFIXOP3 shift to state 598
-- On INFIXOP2 shift to state 600
-- On INFIXOP1 shift to state 602
-- On INFIXOP0 shift to state 604
-- On INFIXCONS shift to state 606
-- On EQ shift to state 608
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 113
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 592:
## Known stack suffix:
## LPAREN STAR
## LR(1) items:
constr_name -> LPAREN STAR . RPAREN [ OF BAR ]
ml_name -> LPAREN STAR . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 593
## Reductions:

State 593:
## Known stack suffix:
## LPAREN STAR RPAREN
## LR(1) items:
constr_name -> LPAREN STAR RPAREN . [ OF BAR ]
ml_name -> LPAREN STAR RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN STAR RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN STAR RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN STAR RPAREN
-- On STAR reduce production ml_name -> LPAREN STAR RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN STAR RPAREN
-- On RULE reduce production ml_name -> LPAREN STAR RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN STAR RPAREN
-- On OPERATION reduce production ml_name -> LPAREN STAR RPAREN
-- On OPEN reduce production ml_name -> LPAREN STAR RPAREN
-- On OF reduce production constr_name -> LPAREN STAR RPAREN
-- On NAME reduce production ml_name -> LPAREN STAR RPAREN
-- On MODULE reduce production ml_name -> LPAREN STAR RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN STAR RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN STAR RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN STAR RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN STAR RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN STAR RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN STAR RPAREN
-- On LPAREN reduce production ml_name -> LPAREN STAR RPAREN
-- On LET reduce production ml_name -> LPAREN STAR RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN STAR RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN STAR RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN STAR RPAREN
-- On EOF reduce production ml_name -> LPAREN STAR RPAREN
-- On END reduce production ml_name -> LPAREN STAR RPAREN
-- On DARROW reduce production ml_name -> LPAREN STAR RPAREN
-- On BAR reduce production constr_name -> LPAREN STAR RPAREN
-- On ARROW reduce production ml_name -> LPAREN STAR RPAREN
-- On AND reduce production ml_name -> LPAREN STAR RPAREN

State 594:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
constr_name -> LPAREN PREFIXOP . RPAREN [ OF BAR ]
ml_name -> LPAREN PREFIXOP . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## LPAREN PREFIXOP RPAREN
## LR(1) items:
constr_name -> LPAREN PREFIXOP RPAREN . [ OF BAR ]
ml_name -> LPAREN PREFIXOP RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On STAR reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On RULE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On OPERATION reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On OPEN reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On OF reduce production constr_name -> LPAREN PREFIXOP RPAREN
-- On NAME reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On MODULE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On LPAREN reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On LET reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On EOF reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On END reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On DARROW reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On BAR reduce production constr_name -> LPAREN PREFIXOP RPAREN
-- On ARROW reduce production ml_name -> LPAREN PREFIXOP RPAREN
-- On AND reduce production ml_name -> LPAREN PREFIXOP RPAREN

State 596:
## Known stack suffix:
## LPAREN INFIXOP4
## LR(1) items:
constr_name -> LPAREN INFIXOP4 . RPAREN [ OF BAR ]
ml_name -> LPAREN INFIXOP4 . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 597
## Reductions:

State 597:
## Known stack suffix:
## LPAREN INFIXOP4 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP4 RPAREN . [ OF BAR ]
ml_name -> LPAREN INFIXOP4 RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On RULE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On OPERATION reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On OPEN reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On OF reduce production constr_name -> LPAREN INFIXOP4 RPAREN
-- On NAME reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On MODULE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On LPAREN reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On LET reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On EOF reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On END reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On DARROW reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On BAR reduce production constr_name -> LPAREN INFIXOP4 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP4 RPAREN
-- On AND reduce production ml_name -> LPAREN INFIXOP4 RPAREN

State 598:
## Known stack suffix:
## LPAREN INFIXOP3
## LR(1) items:
constr_name -> LPAREN INFIXOP3 . RPAREN [ OF BAR ]
ml_name -> LPAREN INFIXOP3 . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 599
## Reductions:

State 599:
## Known stack suffix:
## LPAREN INFIXOP3 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP3 RPAREN . [ OF BAR ]
ml_name -> LPAREN INFIXOP3 RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On RULE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On OPERATION reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On OPEN reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On OF reduce production constr_name -> LPAREN INFIXOP3 RPAREN
-- On NAME reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On MODULE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On LPAREN reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On LET reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On EOF reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On END reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On DARROW reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On BAR reduce production constr_name -> LPAREN INFIXOP3 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP3 RPAREN
-- On AND reduce production ml_name -> LPAREN INFIXOP3 RPAREN

State 600:
## Known stack suffix:
## LPAREN INFIXOP2
## LR(1) items:
constr_name -> LPAREN INFIXOP2 . RPAREN [ OF BAR ]
ml_name -> LPAREN INFIXOP2 . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 601
## Reductions:

State 601:
## Known stack suffix:
## LPAREN INFIXOP2 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP2 RPAREN . [ OF BAR ]
ml_name -> LPAREN INFIXOP2 RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On RULE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On OPERATION reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On OPEN reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On OF reduce production constr_name -> LPAREN INFIXOP2 RPAREN
-- On NAME reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On MODULE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On LPAREN reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On LET reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On EOF reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On END reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On DARROW reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On BAR reduce production constr_name -> LPAREN INFIXOP2 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP2 RPAREN
-- On AND reduce production ml_name -> LPAREN INFIXOP2 RPAREN

State 602:
## Known stack suffix:
## LPAREN INFIXOP1
## LR(1) items:
constr_name -> LPAREN INFIXOP1 . RPAREN [ OF BAR ]
ml_name -> LPAREN INFIXOP1 . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 603
## Reductions:

State 603:
## Known stack suffix:
## LPAREN INFIXOP1 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP1 RPAREN . [ OF BAR ]
ml_name -> LPAREN INFIXOP1 RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On RULE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On OPERATION reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On OPEN reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On OF reduce production constr_name -> LPAREN INFIXOP1 RPAREN
-- On NAME reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On MODULE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On LPAREN reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On LET reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On EOF reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On END reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On DARROW reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On BAR reduce production constr_name -> LPAREN INFIXOP1 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP1 RPAREN
-- On AND reduce production ml_name -> LPAREN INFIXOP1 RPAREN

State 604:
## Known stack suffix:
## LPAREN INFIXOP0
## LR(1) items:
constr_name -> LPAREN INFIXOP0 . RPAREN [ OF BAR ]
ml_name -> LPAREN INFIXOP0 . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 605
## Reductions:

State 605:
## Known stack suffix:
## LPAREN INFIXOP0 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP0 RPAREN . [ OF BAR ]
ml_name -> LPAREN INFIXOP0 RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On RULE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On OPERATION reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On OPEN reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On OF reduce production constr_name -> LPAREN INFIXOP0 RPAREN
-- On NAME reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On MODULE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On LPAREN reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On LET reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On EOF reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On END reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On DARROW reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On BAR reduce production constr_name -> LPAREN INFIXOP0 RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXOP0 RPAREN
-- On AND reduce production ml_name -> LPAREN INFIXOP0 RPAREN

State 606:
## Known stack suffix:
## LPAREN INFIXCONS
## LR(1) items:
constr_name -> LPAREN INFIXCONS . RPAREN [ OF BAR ]
ml_name -> LPAREN INFIXCONS . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 607
## Reductions:

State 607:
## Known stack suffix:
## LPAREN INFIXCONS RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXCONS RPAREN . [ OF BAR ]
ml_name -> LPAREN INFIXCONS RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On STAR reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On RULE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On OPERATION reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On OPEN reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On OF reduce production constr_name -> LPAREN INFIXCONS RPAREN
-- On NAME reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On MODULE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On LPAREN reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On LET reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On EOF reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On END reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On DARROW reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On BAR reduce production constr_name -> LPAREN INFIXCONS RPAREN
-- On ARROW reduce production ml_name -> LPAREN INFIXCONS RPAREN
-- On AND reduce production ml_name -> LPAREN INFIXCONS RPAREN

State 608:
## Known stack suffix:
## LPAREN EQ
## LR(1) items:
constr_name -> LPAREN EQ . RPAREN [ OF BAR ]
ml_name -> LPAREN EQ . RPAREN [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
-- On RPAREN shift to state 609
## Reductions:

State 609:
## Known stack suffix:
## LPAREN EQ RPAREN
## LR(1) items:
constr_name -> LPAREN EQ RPAREN . [ OF BAR ]
ml_name -> LPAREN EQ RPAREN . [ WITH VERBOSITY UNDERSCORE STAR SEMISEMI RULE REQUIRE OPERATION OPEN NAME MODULE MLUNIT MLTYPE MLSTRING MLJUDGEMENT MLDERIVATION MLBOUNDARY LPAREN LET INCLUDE EXTERNAL EXCEPTION EOF END DARROW ARROW AND ]
## Transitions:
## Reductions:
-- On WITH reduce production ml_name -> LPAREN EQ RPAREN
-- On VERBOSITY reduce production ml_name -> LPAREN EQ RPAREN
-- On UNDERSCORE reduce production ml_name -> LPAREN EQ RPAREN
-- On STAR reduce production ml_name -> LPAREN EQ RPAREN
-- On SEMISEMI reduce production ml_name -> LPAREN EQ RPAREN
-- On RULE reduce production ml_name -> LPAREN EQ RPAREN
-- On REQUIRE reduce production ml_name -> LPAREN EQ RPAREN
-- On OPERATION reduce production ml_name -> LPAREN EQ RPAREN
-- On OPEN reduce production ml_name -> LPAREN EQ RPAREN
-- On OF reduce production constr_name -> LPAREN EQ RPAREN
-- On NAME reduce production ml_name -> LPAREN EQ RPAREN
-- On MODULE reduce production ml_name -> LPAREN EQ RPAREN
-- On MLUNIT reduce production ml_name -> LPAREN EQ RPAREN
-- On MLTYPE reduce production ml_name -> LPAREN EQ RPAREN
-- On MLSTRING reduce production ml_name -> LPAREN EQ RPAREN
-- On MLJUDGEMENT reduce production ml_name -> LPAREN EQ RPAREN
-- On MLDERIVATION reduce production ml_name -> LPAREN EQ RPAREN
-- On MLBOUNDARY reduce production ml_name -> LPAREN EQ RPAREN
-- On LPAREN reduce production ml_name -> LPAREN EQ RPAREN
-- On LET reduce production ml_name -> LPAREN EQ RPAREN
-- On INCLUDE reduce production ml_name -> LPAREN EQ RPAREN
-- On EXTERNAL reduce production ml_name -> LPAREN EQ RPAREN
-- On EXCEPTION reduce production ml_name -> LPAREN EQ RPAREN
-- On EOF reduce production ml_name -> LPAREN EQ RPAREN
-- On END reduce production ml_name -> LPAREN EQ RPAREN
-- On DARROW reduce production ml_name -> LPAREN EQ RPAREN
-- On BAR reduce production constr_name -> LPAREN EQ RPAREN
-- On ARROW reduce production ml_name -> LPAREN EQ RPAREN
-- On AND reduce production ml_name -> LPAREN EQ RPAREN

State 610:
## Known stack suffix:
## BAR
## LR(1) items:
mlty_def_body -> BAR . loption(separated_nonempty_list(BAR,mlty_constructor)) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On NAME shift to state 611
-- On LPAREN shift to state 612
-- On separated_nonempty_list(BAR,mlty_constructor) shift to state 631
-- On mlty_constructor shift to state 632
-- On loption(separated_nonempty_list(BAR,mlty_constructor)) shift to state 638
-- On constr_name shift to state 635
## Reductions:
-- On WITH reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On VERBOSITY reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On SEMISEMI reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On RULE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On REQUIRE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On OPERATION reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On OPEN reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On MODULE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On MLTYPE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On LET reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On INCLUDE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On EXTERNAL reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On EXCEPTION reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On EOF reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On END reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On AND reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->

State 611:
## Known stack suffix:
## NAME
## LR(1) items:
constr_name -> NAME . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> NAME

State 612:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_name -> LPAREN . INFIXCONS RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . EQ RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . INFIXOP0 RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . INFIXOP1 RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . INFIXOP2 RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . INFIXOP3 RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . STAR RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . INFIXOP4 RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
constr_name -> LPAREN . PREFIXOP RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On STAR shift to state 613
-- On PREFIXOP shift to state 615
-- On INFIXOP4 shift to state 617
-- On INFIXOP3 shift to state 619
-- On INFIXOP2 shift to state 621
-- On INFIXOP1 shift to state 623
-- On INFIXOP0 shift to state 625
-- On INFIXCONS shift to state 627
-- On EQ shift to state 629
## Reductions:

State 613:
## Known stack suffix:
## LPAREN STAR
## LR(1) items:
constr_name -> LPAREN STAR . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 614
## Reductions:

State 614:
## Known stack suffix:
## LPAREN STAR RPAREN
## LR(1) items:
constr_name -> LPAREN STAR RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN STAR RPAREN

State 615:
## Known stack suffix:
## LPAREN PREFIXOP
## LR(1) items:
constr_name -> LPAREN PREFIXOP . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 616
## Reductions:

State 616:
## Known stack suffix:
## LPAREN PREFIXOP RPAREN
## LR(1) items:
constr_name -> LPAREN PREFIXOP RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN PREFIXOP RPAREN

State 617:
## Known stack suffix:
## LPAREN INFIXOP4
## LR(1) items:
constr_name -> LPAREN INFIXOP4 . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 618
## Reductions:

State 618:
## Known stack suffix:
## LPAREN INFIXOP4 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP4 RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN INFIXOP4 RPAREN

State 619:
## Known stack suffix:
## LPAREN INFIXOP3
## LR(1) items:
constr_name -> LPAREN INFIXOP3 . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 620
## Reductions:

State 620:
## Known stack suffix:
## LPAREN INFIXOP3 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP3 RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN INFIXOP3 RPAREN

State 621:
## Known stack suffix:
## LPAREN INFIXOP2
## LR(1) items:
constr_name -> LPAREN INFIXOP2 . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 622
## Reductions:

State 622:
## Known stack suffix:
## LPAREN INFIXOP2 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP2 RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN INFIXOP2 RPAREN

State 623:
## Known stack suffix:
## LPAREN INFIXOP1
## LR(1) items:
constr_name -> LPAREN INFIXOP1 . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 624
## Reductions:

State 624:
## Known stack suffix:
## LPAREN INFIXOP1 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP1 RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN INFIXOP1 RPAREN

State 625:
## Known stack suffix:
## LPAREN INFIXOP0
## LR(1) items:
constr_name -> LPAREN INFIXOP0 . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 626
## Reductions:

State 626:
## Known stack suffix:
## LPAREN INFIXOP0 RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXOP0 RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN INFIXOP0 RPAREN

State 627:
## Known stack suffix:
## LPAREN INFIXCONS
## LR(1) items:
constr_name -> LPAREN INFIXCONS . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## LPAREN INFIXCONS RPAREN
## LR(1) items:
constr_name -> LPAREN INFIXCONS RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN INFIXCONS RPAREN

State 629:
## Known stack suffix:
## LPAREN EQ
## LR(1) items:
constr_name -> LPAREN EQ . RPAREN [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On RPAREN shift to state 630
## Reductions:

State 630:
## Known stack suffix:
## LPAREN EQ RPAREN
## LR(1) items:
constr_name -> LPAREN EQ RPAREN . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_name -> LPAREN EQ RPAREN

State 631:
## Known stack suffix:
## separated_nonempty_list(BAR,mlty_constructor)
## LR(1) items:
loption(separated_nonempty_list(BAR,mlty_constructor)) -> separated_nonempty_list(BAR,mlty_constructor) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) -> separated_nonempty_list(BAR,mlty_constructor)

State 632:
## Known stack suffix:
## mlty_constructor
## LR(1) items:
separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor . BAR separated_nonempty_list(BAR,mlty_constructor) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On BAR shift to state 633
## Reductions:
-- On WITH reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On VERBOSITY reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On SEMISEMI reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On RULE reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On REQUIRE reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On OPERATION reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On OPEN reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On MODULE reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On MLTYPE reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On LET reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On INCLUDE reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On EXTERNAL reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On EXCEPTION reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On EOF reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On END reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor
-- On AND reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor

State 633:
## Known stack suffix:
## mlty_constructor BAR
## LR(1) items:
separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor BAR . separated_nonempty_list(BAR,mlty_constructor) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On NAME shift to state 611
-- On LPAREN shift to state 612
-- On separated_nonempty_list(BAR,mlty_constructor) shift to state 634
-- On mlty_constructor shift to state 632
-- On constr_name shift to state 635
## Reductions:

State 634:
## Known stack suffix:
## mlty_constructor BAR separated_nonempty_list(BAR,mlty_constructor)
## LR(1) items:
separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor BAR separated_nonempty_list(BAR,mlty_constructor) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(BAR,mlty_constructor) -> mlty_constructor BAR separated_nonempty_list(BAR,mlty_constructor)

State 635:
## Known stack suffix:
## constr_name
## LR(1) items:
mlty_constructor -> constr_name . OF mlty [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
mlty_constructor -> constr_name . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On OF shift to state 636
## Reductions:
-- On WITH reduce production mlty_constructor -> constr_name
-- On VERBOSITY reduce production mlty_constructor -> constr_name
-- On SEMISEMI reduce production mlty_constructor -> constr_name
-- On RULE reduce production mlty_constructor -> constr_name
-- On REQUIRE reduce production mlty_constructor -> constr_name
-- On OPERATION reduce production mlty_constructor -> constr_name
-- On OPEN reduce production mlty_constructor -> constr_name
-- On MODULE reduce production mlty_constructor -> constr_name
-- On MLTYPE reduce production mlty_constructor -> constr_name
-- On LET reduce production mlty_constructor -> constr_name
-- On INCLUDE reduce production mlty_constructor -> constr_name
-- On EXTERNAL reduce production mlty_constructor -> constr_name
-- On EXCEPTION reduce production mlty_constructor -> constr_name
-- On EOF reduce production mlty_constructor -> constr_name
-- On END reduce production mlty_constructor -> constr_name
-- On BAR reduce production mlty_constructor -> constr_name
-- On AND reduce production mlty_constructor -> constr_name

State 636:
## Known stack suffix:
## constr_name OF
## LR(1) items:
mlty_constructor -> constr_name OF . mlty [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 637
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 637:
## Known stack suffix:
## constr_name OF mlty
## LR(1) items:
mlty_constructor -> constr_name OF mlty . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_constructor -> constr_name OF mlty

State 638:
## Known stack suffix:
## BAR loption(separated_nonempty_list(BAR,mlty_constructor))
## LR(1) items:
mlty_def_body -> BAR loption(separated_nonempty_list(BAR,mlty_constructor)) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_def_body -> BAR loption(separated_nonempty_list(BAR,mlty_constructor))

State 639:
## Known stack suffix:
## ml_name list(opt_name(ml_name)) EQ mlty_def_body
## LR(1) items:
mlty_def -> ml_name list(opt_name(ml_name)) EQ mlty_def_body . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_def -> ml_name list(opt_name(ml_name)) EQ mlty_def_body

State 640:
## Known stack suffix:
## mlty_constructor
## LR(1) items:
mlty_def_body -> mlty_constructor . BAR loption(separated_nonempty_list(BAR,mlty_constructor)) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On BAR shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## mlty_constructor BAR
## LR(1) items:
mlty_def_body -> mlty_constructor BAR . loption(separated_nonempty_list(BAR,mlty_constructor)) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
-- On NAME shift to state 611
-- On LPAREN shift to state 612
-- On separated_nonempty_list(BAR,mlty_constructor) shift to state 631
-- On mlty_constructor shift to state 632
-- On loption(separated_nonempty_list(BAR,mlty_constructor)) shift to state 642
-- On constr_name shift to state 635
## Reductions:
-- On WITH reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On VERBOSITY reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On SEMISEMI reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On RULE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On REQUIRE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On OPERATION reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On OPEN reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On MODULE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On MLTYPE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On LET reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On INCLUDE reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On EXTERNAL reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On EXCEPTION reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On EOF reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On END reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->
-- On AND reduce production loption(separated_nonempty_list(BAR,mlty_constructor)) ->

State 642:
## Known stack suffix:
## mlty_constructor BAR loption(separated_nonempty_list(BAR,mlty_constructor))
## LR(1) items:
mlty_def_body -> mlty_constructor BAR loption(separated_nonempty_list(BAR,mlty_constructor)) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_def_body -> mlty_constructor BAR loption(separated_nonempty_list(BAR,mlty_constructor))

State 643:
## Known stack suffix:
## mlty
## LR(1) items:
mlty_def_body -> mlty . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mlty_def_body -> mlty

State 644:
## Known stack suffix:
## MLTYPE mlty_defs
## LR(1) items:
top_command_ -> MLTYPE mlty_defs . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> MLTYPE mlty_defs

State 645:
## Known stack suffix:
## MLTYPE ml_name
## LR(1) items:
mlty_def -> ml_name . list(opt_name(ml_name)) EQ mlty_def_body [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
top_command_ -> MLTYPE ml_name . list(opt_name(ml_name)) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 117
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On opt_name(ml_name) shift to state 586
-- On ml_name shift to state 121
-- On list(opt_name(ml_name)) shift to state 646
## Reductions:
-- On WITH reduce production list(opt_name(ml_name)) ->
-- On VERBOSITY reduce production list(opt_name(ml_name)) ->
-- On SEMISEMI reduce production list(opt_name(ml_name)) ->
-- On RULE reduce production list(opt_name(ml_name)) ->
-- On REQUIRE reduce production list(opt_name(ml_name)) ->
-- On OPERATION reduce production list(opt_name(ml_name)) ->
-- On OPEN reduce production list(opt_name(ml_name)) ->
-- On MODULE reduce production list(opt_name(ml_name)) ->
-- On MLTYPE reduce production list(opt_name(ml_name)) ->
-- On LET reduce production list(opt_name(ml_name)) ->
-- On INCLUDE reduce production list(opt_name(ml_name)) ->
-- On EXTERNAL reduce production list(opt_name(ml_name)) ->
-- On EXCEPTION reduce production list(opt_name(ml_name)) ->
-- On EQ reduce production list(opt_name(ml_name)) ->
-- On EOF reduce production list(opt_name(ml_name)) ->
-- On END reduce production list(opt_name(ml_name)) ->

State 646:
## Known stack suffix:
## MLTYPE ml_name list(opt_name(ml_name))
## LR(1) items:
mlty_def -> ml_name list(opt_name(ml_name)) . EQ mlty_def_body [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END AND ]
top_command_ -> MLTYPE ml_name list(opt_name(ml_name)) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On EQ shift to state 589
## Reductions:
-- On WITH reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On VERBOSITY reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On SEMISEMI reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On RULE reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On REQUIRE reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On OPERATION reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On OPEN reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On MODULE reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On MLTYPE reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On LET reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On INCLUDE reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On EXTERNAL reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On EXCEPTION reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On EOF reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))
-- On END reduce production top_command_ -> MLTYPE ml_name list(opt_name(ml_name))

State 647:
## Known stack suffix:
## LET
## LR(1) items:
term_ -> LET . separated_nonempty_list(AND,let_clause) IN term [ SEMISEMI EOF END ]
term_ -> LET . REC separated_nonempty_list(AND,recursive_clause) IN term [ SEMISEMI EOF END ]
top_command_ -> LET . separated_nonempty_list(AND,let_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> LET . REC separated_nonempty_list(AND,recursive_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 53
-- On REC shift to state 648
-- On NAME shift to state 118
-- On LPAREN shift to state 443
-- On LBRACK shift to state 446
-- On separated_nonempty_list(AND,let_clause) shift to state 650
-- On ml_name shift to state 452
-- On mark_location(let_pattern_) shift to state 461
-- On let_pattern_ shift to state 462
-- On let_pattern shift to state 463
-- On let_clause shift to state 467
## Reductions:

State 648:
## Known stack suffix:
## LET REC
## LR(1) items:
term_ -> LET REC . separated_nonempty_list(AND,recursive_clause) IN term [ SEMISEMI EOF END ]
top_command_ -> LET REC . separated_nonempty_list(AND,recursive_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On separated_nonempty_list(AND,recursive_clause) shift to state 649
-- On recursive_clause shift to state 432
-- On ml_name shift to state 435
## Reductions:

State 649:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause)
## LR(1) items:
term_ -> LET REC separated_nonempty_list(AND,recursive_clause) . IN term [ SEMISEMI EOF END ]
top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On IN shift to state 430
## Reductions:
-- On WITH reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On VERBOSITY reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On SEMISEMI reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On RULE reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On REQUIRE reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On OPERATION reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On OPEN reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On MODULE reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On MLTYPE reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On LET reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On INCLUDE reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On EXTERNAL reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On EXCEPTION reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On EOF reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)
-- On END reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)

State 650:
## Known stack suffix:
## LET separated_nonempty_list(AND,let_clause)
## LR(1) items:
term_ -> LET separated_nonempty_list(AND,let_clause) . IN term [ SEMISEMI EOF END ]
top_command_ -> LET separated_nonempty_list(AND,let_clause) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On IN shift to state 450
## Reductions:
-- On WITH reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On VERBOSITY reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On SEMISEMI reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On RULE reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On REQUIRE reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On OPERATION reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On OPEN reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On MODULE reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On MLTYPE reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On LET reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On INCLUDE reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On EXTERNAL reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On EXCEPTION reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On EOF reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)
-- On END reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)

State 651:
## Known stack suffix:
## INCLUDE
## LR(1) items:
top_command_ -> INCLUDE . module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> INCLUDE . module_path PERIOD module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 555
-- On module_path shift to state 652
-- On module_name shift to state 655
## Reductions:

State 652:
## Known stack suffix:
## INCLUDE module_path
## LR(1) items:
module_path -> module_path . PERIOD module_name [ PERIOD ]
top_command_ -> INCLUDE module_path . PERIOD module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On PERIOD shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## INCLUDE module_path PERIOD
## LR(1) items:
module_path -> module_path PERIOD . module_name [ PERIOD ]
top_command_ -> INCLUDE module_path PERIOD . module_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 555
-- On module_name shift to state 654
## Reductions:

State 654:
## Known stack suffix:
## INCLUDE module_path PERIOD module_name
## LR(1) items:
module_path -> module_path PERIOD module_name . [ PERIOD ]
top_command_ -> INCLUDE module_path PERIOD module_name . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Reductions:
-- On WITH reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On VERBOSITY reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On SEMISEMI reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On RULE reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On REQUIRE reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On PERIOD reduce production module_path -> module_path PERIOD module_name
-- On OPERATION reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On OPEN reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On MODULE reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On MLTYPE reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On LET reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On INCLUDE reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On EXTERNAL reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On EXCEPTION reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On EOF reduce production top_command_ -> INCLUDE module_path PERIOD module_name
-- On END reduce production top_command_ -> INCLUDE module_path PERIOD module_name

State 655:
## Known stack suffix:
## INCLUDE module_name
## LR(1) items:
module_path -> module_name . [ PERIOD ]
top_command_ -> INCLUDE module_name . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Reductions:
-- On WITH reduce production top_command_ -> INCLUDE module_name
-- On VERBOSITY reduce production top_command_ -> INCLUDE module_name
-- On SEMISEMI reduce production top_command_ -> INCLUDE module_name
-- On RULE reduce production top_command_ -> INCLUDE module_name
-- On REQUIRE reduce production top_command_ -> INCLUDE module_name
-- On PERIOD reduce production module_path -> module_name
-- On OPERATION reduce production top_command_ -> INCLUDE module_name
-- On OPEN reduce production top_command_ -> INCLUDE module_name
-- On MODULE reduce production top_command_ -> INCLUDE module_name
-- On MLTYPE reduce production top_command_ -> INCLUDE module_name
-- On LET reduce production top_command_ -> INCLUDE module_name
-- On INCLUDE reduce production top_command_ -> INCLUDE module_name
-- On EXTERNAL reduce production top_command_ -> INCLUDE module_name
-- On EXCEPTION reduce production top_command_ -> INCLUDE module_name
-- On EOF reduce production top_command_ -> INCLUDE module_name
-- On END reduce production top_command_ -> INCLUDE module_name

State 656:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
top_command_ -> EXTERNAL . ml_name COLON ml_schema EQ QUOTED_STRING [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On ml_name shift to state 657
## Reductions:

State 657:
## Known stack suffix:
## EXTERNAL ml_name
## LR(1) items:
top_command_ -> EXTERNAL ml_name . COLON ml_schema EQ QUOTED_STRING [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On COLON shift to state 658
## Reductions:

State 658:
## Known stack suffix:
## EXTERNAL ml_name COLON
## LR(1) items:
top_command_ -> EXTERNAL ml_name COLON . ml_schema EQ QUOTED_STRING [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLFORALL shift to state 116
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 125
-- On ml_schema_ shift to state 126
-- On ml_schema shift to state 659
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(ml_schema_) shift to state 128
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 659:
## Known stack suffix:
## EXTERNAL ml_name COLON ml_schema
## LR(1) items:
top_command_ -> EXTERNAL ml_name COLON ml_schema . EQ QUOTED_STRING [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On EQ shift to state 660
## Reductions:

State 660:
## Known stack suffix:
## EXTERNAL ml_name COLON ml_schema EQ
## LR(1) items:
top_command_ -> EXTERNAL ml_name COLON ml_schema EQ . QUOTED_STRING [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On QUOTED_STRING shift to state 661
## Reductions:

State 661:
## Known stack suffix:
## EXTERNAL ml_name COLON ml_schema EQ QUOTED_STRING
## LR(1) items:
top_command_ -> EXTERNAL ml_name COLON ml_schema EQ QUOTED_STRING . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> EXTERNAL ml_name COLON ml_schema EQ QUOTED_STRING

State 662:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
top_command_ -> EXCEPTION . exc_name [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> EXCEPTION . exc_name OF mlty [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 663
-- On exc_name shift to state 664
## Reductions:

State 663:
## Known stack suffix:
## NAME
## LR(1) items:
exc_name -> NAME . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN OF MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exc_name -> NAME

State 664:
## Known stack suffix:
## EXCEPTION exc_name
## LR(1) items:
top_command_ -> EXCEPTION exc_name . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> EXCEPTION exc_name . OF mlty [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On OF shift to state 665
## Reductions:
-- On WITH reduce production top_command_ -> EXCEPTION exc_name
-- On VERBOSITY reduce production top_command_ -> EXCEPTION exc_name
-- On SEMISEMI reduce production top_command_ -> EXCEPTION exc_name
-- On RULE reduce production top_command_ -> EXCEPTION exc_name
-- On REQUIRE reduce production top_command_ -> EXCEPTION exc_name
-- On OPERATION reduce production top_command_ -> EXCEPTION exc_name
-- On OPEN reduce production top_command_ -> EXCEPTION exc_name
-- On MODULE reduce production top_command_ -> EXCEPTION exc_name
-- On MLTYPE reduce production top_command_ -> EXCEPTION exc_name
-- On LET reduce production top_command_ -> EXCEPTION exc_name
-- On INCLUDE reduce production top_command_ -> EXCEPTION exc_name
-- On EXTERNAL reduce production top_command_ -> EXCEPTION exc_name
-- On EXCEPTION reduce production top_command_ -> EXCEPTION exc_name
-- On EOF reduce production top_command_ -> EXCEPTION exc_name
-- On END reduce production top_command_ -> EXCEPTION exc_name

State 665:
## Known stack suffix:
## EXCEPTION exc_name OF
## LR(1) items:
top_command_ -> EXCEPTION exc_name OF . mlty [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 55
-- On REF shift to state 56
-- On NAME shift to state 57
-- On MLUNIT shift to state 58
-- On MLSTRING shift to state 59
-- On MLJUDGEMENT shift to state 60
-- On MLDERIVATION shift to state 61
-- On MLBOUNDARY shift to state 62
-- On LPAREN shift to state 63
-- On simple_mlty_ shift to state 82
-- On separated_nonempty_list(STAR,app_mlty) shift to state 83
-- On prod_mlty_ shift to state 84
-- On prod_mlty shift to state 85
-- On module_path shift to state 87
-- On module_name shift to state 45
-- On mlty_ shift to state 100
-- On mlty shift to state 666
-- On ml_name shift to state 102
-- On mark_location(prod_mlty_) shift to state 104
-- On mark_location(mlty_) shift to state 105
-- On mark_location(app_mlty_) shift to state 106
-- On app_mlty_ shift to state 107
-- On app_mlty shift to state 108
## Reductions:

State 666:
## Known stack suffix:
## EXCEPTION exc_name OF mlty
## LR(1) items:
top_command_ -> EXCEPTION exc_name OF mlty . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> EXCEPTION exc_name OF mlty

State 667:
## Known stack suffix:
## top_term_
## LR(1) items:
mark_location(top_term_) -> top_term_ . [ SEMISEMI EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(top_term_) -> top_term_

State 668:
## Known stack suffix:
## top_term
## LR(1) items:
ml_module -> top_term . [ EOF END ]
ml_module -> top_term . SEMISEMI ml_module [ EOF END ]
## Transitions:
-- On SEMISEMI shift to state 669
## Reductions:
-- On EOF reduce production ml_module -> top_term
-- On END reduce production ml_module -> top_term

State 669:
## Known stack suffix:
## top_term SEMISEMI
## LR(1) items:
ml_module -> top_term SEMISEMI . ml_module [ EOF END ]
## Transitions:
-- On WITH shift to state 1
-- On VERBOSITY shift to state 536
-- On TRY shift to state 3
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 647
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On INCLUDE shift to state 651
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On top_term_ shift to state 667
-- On top_term shift to state 668
-- On top_command_ shift to state 670
-- On top_command shift to state 671
-- On term_ shift to state 358
-- On term shift to state 674
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On ml_module shift to state 687
-- On maybe_typed_binder shift to state 168
-- On mark_location(top_term_) shift to state 676
-- On mark_location(top_command_) shift to state 677
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:
-- On EOF reduce production ml_module ->
-- On END reduce production ml_module ->

State 670:
## Known stack suffix:
## top_command_
## LR(1) items:
mark_location(top_command_) -> top_command_ . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mark_location(top_command_) -> top_command_

State 671:
## Known stack suffix:
## top_command
## LR(1) items:
ml_module -> top_command . SEMISEMI ml_module [ EOF END ]
ml_module -> top_command . ml_module_top [ EOF END ]
## Transitions:
-- On WITH shift to state 672
-- On VERBOSITY shift to state 536
-- On SEMISEMI shift to state 673
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On LET shift to state 678
-- On INCLUDE shift to state 651
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On top_command_ shift to state 670
-- On top_command shift to state 682
-- On ml_module_top shift to state 686
-- On mark_location(top_command_) shift to state 677
## Reductions:
-- On EOF reduce production ml_module_top ->
-- On END reduce production ml_module_top ->

State 672:
## Known stack suffix:
## WITH
## LR(1) items:
top_command_ -> WITH . top_operation_cases END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On OPERATION shift to state 514
-- On BAR shift to state 527
-- On top_operation_cases shift to state 532
-- On top_operation_case shift to state 528
-- On separated_nonempty_list(BAR,top_operation_case) shift to state 534
-- On loption(separated_nonempty_list(BAR,top_operation_case)) shift to state 535
## Reductions:
-- On END reduce production loption(separated_nonempty_list(BAR,top_operation_case)) ->

State 673:
## Known stack suffix:
## top_command SEMISEMI
## LR(1) items:
ml_module -> top_command SEMISEMI . ml_module [ EOF END ]
## Transitions:
-- On WITH shift to state 1
-- On VERBOSITY shift to state 536
-- On TRY shift to state 3
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 647
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On INCLUDE shift to state 651
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On top_term_ shift to state 667
-- On top_term shift to state 668
-- On top_command_ shift to state 670
-- On top_command shift to state 671
-- On term_ shift to state 358
-- On term shift to state 674
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On ml_module shift to state 675
-- On maybe_typed_binder shift to state 168
-- On mark_location(top_term_) shift to state 676
-- On mark_location(top_command_) shift to state 677
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:
-- On EOF reduce production ml_module ->
-- On END reduce production ml_module ->

State 674:
## Known stack suffix:
## term
## LR(1) items:
top_term_ -> term . [ SEMISEMI EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_term_ -> term

State 675:
## Known stack suffix:
## top_command SEMISEMI ml_module
## LR(1) items:
ml_module -> top_command SEMISEMI ml_module . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_module -> top_command SEMISEMI ml_module

State 676:
## Known stack suffix:
## mark_location(top_term_)
## LR(1) items:
top_term -> mark_location(top_term_) . [ SEMISEMI EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_term -> mark_location(top_term_)

State 677:
## Known stack suffix:
## mark_location(top_command_)
## LR(1) items:
top_command -> mark_location(top_command_) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command -> mark_location(top_command_)

State 678:
## Known stack suffix:
## LET
## LR(1) items:
top_command_ -> LET . separated_nonempty_list(AND,let_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
top_command_ -> LET . REC separated_nonempty_list(AND,recursive_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On UNDERSCORE shift to state 53
-- On REC shift to state 679
-- On NAME shift to state 118
-- On LPAREN shift to state 443
-- On LBRACK shift to state 446
-- On separated_nonempty_list(AND,let_clause) shift to state 681
-- On ml_name shift to state 452
-- On mark_location(let_pattern_) shift to state 461
-- On let_pattern_ shift to state 462
-- On let_pattern shift to state 463
-- On let_clause shift to state 467
## Reductions:

State 679:
## Known stack suffix:
## LET REC
## LR(1) items:
top_command_ -> LET REC . separated_nonempty_list(AND,recursive_clause) [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On NAME shift to state 118
-- On LPAREN shift to state 89
-- On separated_nonempty_list(AND,recursive_clause) shift to state 680
-- On recursive_clause shift to state 432
-- On ml_name shift to state 435
## Reductions:

State 680:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause)
## LR(1) items:
top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> LET REC separated_nonempty_list(AND,recursive_clause)

State 681:
## Known stack suffix:
## LET separated_nonempty_list(AND,let_clause)
## LR(1) items:
top_command_ -> LET separated_nonempty_list(AND,let_clause) . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> LET separated_nonempty_list(AND,let_clause)

State 682:
## Known stack suffix:
## top_command
## LR(1) items:
ml_module_top -> top_command . SEMISEMI ml_module [ EOF END ]
ml_module_top -> top_command . ml_module_top [ EOF END ]
## Transitions:
-- On WITH shift to state 672
-- On VERBOSITY shift to state 536
-- On SEMISEMI shift to state 683
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On LET shift to state 678
-- On INCLUDE shift to state 651
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On top_command_ shift to state 670
-- On top_command shift to state 682
-- On ml_module_top shift to state 685
-- On mark_location(top_command_) shift to state 677
## Reductions:
-- On EOF reduce production ml_module_top ->
-- On END reduce production ml_module_top ->

State 683:
## Known stack suffix:
## top_command SEMISEMI
## LR(1) items:
ml_module_top -> top_command SEMISEMI . ml_module [ EOF END ]
## Transitions:
-- On WITH shift to state 1
-- On VERBOSITY shift to state 536
-- On TRY shift to state 3
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 647
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On INCLUDE shift to state 651
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On top_term_ shift to state 667
-- On top_term shift to state 668
-- On top_command_ shift to state 670
-- On top_command shift to state 671
-- On term_ shift to state 358
-- On term shift to state 674
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On ml_module shift to state 684
-- On maybe_typed_binder shift to state 168
-- On mark_location(top_term_) shift to state 676
-- On mark_location(top_command_) shift to state 677
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:
-- On EOF reduce production ml_module ->
-- On END reduce production ml_module ->

State 684:
## Known stack suffix:
## top_command SEMISEMI ml_module
## LR(1) items:
ml_module_top -> top_command SEMISEMI ml_module . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_module_top -> top_command SEMISEMI ml_module

State 685:
## Known stack suffix:
## top_command ml_module_top
## LR(1) items:
ml_module_top -> top_command ml_module_top . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_module_top -> top_command ml_module_top

State 686:
## Known stack suffix:
## top_command ml_module_top
## LR(1) items:
ml_module -> top_command ml_module_top . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_module -> top_command ml_module_top

State 687:
## Known stack suffix:
## top_term SEMISEMI ml_module
## LR(1) items:
ml_module -> top_term SEMISEMI ml_module . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ml_module -> top_term SEMISEMI ml_module

State 688:
## Known stack suffix:
## MODULE module_name EQ STRUCT ml_module
## LR(1) items:
top_command_ -> MODULE module_name EQ STRUCT ml_module . END [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
-- On END shift to state 689
## Reductions:

State 689:
## Known stack suffix:
## MODULE module_name EQ STRUCT ml_module END
## LR(1) items:
top_command_ -> MODULE module_name EQ STRUCT ml_module END . [ WITH VERBOSITY SEMISEMI RULE REQUIRE OPERATION OPEN MODULE MLTYPE LET INCLUDE EXTERNAL EXCEPTION EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_command_ -> MODULE module_name EQ STRUCT ml_module END

State 690:
## Known stack suffix:
## top_term
## LR(1) items:
commandline -> top_term . option(SEMISEMI) EOF [ # ]
## Transitions:
-- On SEMISEMI shift to state 691
-- On option(SEMISEMI) shift to state 692
## Reductions:
-- On EOF reduce production option(SEMISEMI) ->

State 691:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
option(SEMISEMI) -> SEMISEMI . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(SEMISEMI) -> SEMISEMI

State 692:
## Known stack suffix:
## top_term option(SEMISEMI)
## LR(1) items:
commandline -> top_term option(SEMISEMI) . EOF [ # ]
## Transitions:
-- On EOF shift to state 693
## Reductions:

State 693:
## Known stack suffix:
## top_term option(SEMISEMI) EOF
## LR(1) items:
commandline -> top_term option(SEMISEMI) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production commandline -> top_term option(SEMISEMI) EOF

State 694:
## Known stack suffix:
## top_command
## LR(1) items:
commandline -> top_command . option(SEMISEMI) EOF [ # ]
## Transitions:
-- On SEMISEMI shift to state 691
-- On option(SEMISEMI) shift to state 695
## Reductions:
-- On EOF reduce production option(SEMISEMI) ->

State 695:
## Known stack suffix:
## top_command option(SEMISEMI)
## LR(1) items:
commandline -> top_command option(SEMISEMI) . EOF [ # ]
## Transitions:
-- On EOF shift to state 696
## Reductions:

State 696:
## Known stack suffix:
## top_command option(SEMISEMI) EOF
## LR(1) items:
commandline -> top_command option(SEMISEMI) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production commandline -> top_command option(SEMISEMI) EOF

State 697:
## Known stack suffix:
## commandline
## LR(1) items:
commandline' -> commandline . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept commandline

State 698:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On WITH shift to state 1
-- On VERBOSITY shift to state 536
-- On TRY shift to state 3
-- On RULE shift to state 538
-- On REQUIRE shift to state 554
-- On REF shift to state 4
-- On RAISE shift to state 12
-- On QUOTED_STRING shift to state 5
-- On QQMARK shift to state 15
-- On PREFIXOP shift to state 6
-- On OPERATION shift to state 560
-- On OPEN shift to state 569
-- On OCCURS shift to state 18
-- On NATURAL shift to state 7
-- On NAME shift to state 8
-- On MODULE shift to state 574
-- On MLTYPE shift to state 578
-- On MATCH shift to state 51
-- On LPAREN shift to state 9
-- On LET shift to state 647
-- On LBRACK shift to state 13
-- On LBRACE shift to state 156
-- On INCLUDE shift to state 651
-- On HANDLER shift to state 209
-- On FUN shift to state 330
-- On FRESH shift to state 338
-- On EXTERNAL shift to state 656
-- On EXCEPTION shift to state 662
-- On DERIVE shift to state 342
-- On CONVERT shift to state 130
-- On CONTEXT shift to state 136
-- On CONGRUENCE shift to state 138
-- On BANG shift to state 19
-- On ABSTRACT shift to state 144
-- On ty_term_ shift to state 357
-- On tt_name shift to state 20
-- On top_term_ shift to state 667
-- On top_term shift to state 668
-- On top_command_ shift to state 670
-- On top_command shift to state 671
-- On term_ shift to state 358
-- On term shift to state 674
-- On substitution_term_ shift to state 147
-- On substitution_term shift to state 148
-- On simple_term_ shift to state 21
-- On prefix_term_ shift to state 134
-- On nonempty_list(maybe_typed_binder) shift to state 167
-- On module_path shift to state 24
-- On module_name shift to state 45
-- On ml_module shift to state 699
-- On maybe_typed_binder shift to state 168
-- On mark_location(top_term_) shift to state 676
-- On mark_location(top_command_) shift to state 677
-- On mark_location(term_) shift to state 361
-- On mark_location(substitution_term_) shift to state 135
-- On mark_location(binop_term_) shift to state 171
-- On mark_location(app_term_) shift to state 152
-- On file shift to state 701
-- On binop_term_ shift to state 172
-- On binop_term shift to state 362
-- On app_term_ shift to state 481
-- On app_term shift to state 365
-- On any_name shift to state 47
-- On abstraction shift to state 205
## Reductions:
-- On EOF reduce production ml_module ->

State 699:
## Known stack suffix:
## ml_module
## LR(1) items:
file -> ml_module . EOF [ # ]
## Transitions:
-- On EOF shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## ml_module EOF
## LR(1) items:
file -> ml_module EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> ml_module EOF

State 701:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept file

