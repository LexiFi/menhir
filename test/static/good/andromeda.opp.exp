%start commandline
%start file
%token ABSTRACT
%token AND
%token ARROW
%token AS
%token BANG
%token BAR
%token BY
%token COLON
%token COLONEQ
%token COLONGT
%token COLONQT
%token COMMA
%token CONGRUENCE
%token CONTEXT
%token CONVERT
%token DARROW
%token DERIVE
%token END
%token EOF
%token <Name.t * Location.t> EQ
%token EQEQ
%token EXCEPTION
%token EXTERNAL
%token FRESH
%token FUN
%token HANDLER
%token IN
%token INCLUDE
%token <Name.t * Location.t> INFIXCONS
%token <Name.t * Location.t> INFIXOP0
%token <Name.t * Location.t> INFIXOP1
%token <Name.t * Location.t> INFIXOP2
%token <Name.t * Location.t> INFIXOP3
%token <Name.t * Location.t> INFIXOP4
%token LBRACE
%token LBRACK
%token LET
%token LPAREN
%token MATCH
%token MLBOUNDARY
%token MLDERIVATION
%token MLFORALL
%token MLJUDGEMENT
%token MLSTRING
%token MLTYPE
%token MLUNIT
%token MODULE
%token <Name.t> NAME
%token NATURAL
%token <int> NUMERAL
%token OCCURS
%token OF
%token OPEN
%token OPERATION
%token PERIOD
%token <Name.t * Location.t> PREFIXOP
%token <Name.t * Location.t> QQMARK
%token <string> QUOTED_STRING
%token RAISE
%token RBRACE
%token RBRACK
%token REC
%token REF
%token REQUIRE
%token RPAREN
%token RULE
%token SEMI
%token SEMISEMI
%token <Name.t * Location.t> STAR
%token STRUCT
%token TRY
%token TYPE
%token UATOM
%token UNDERSCORE
%token VAL
%token VERBOSITY
%token WHEN
%token WITH
%nonassoc COLONEQ
%left EQ INFIXOP0
%right INFIXOP1
%right INFIXCONS
%left INFIXOP2
%left INFIXOP3 STAR
%right INFIXOP4
%type <Sugared.toplevel> commandline
%type <Sugared.toplevel list> file
%%

option_SEMI_:
  
    {    ( None )} [@name none_SEMI]
| x = SEMI
    {    ( Some x )} [@name some_SEMI]

option_SEMISEMI_:
  
    {    ( None )} [@name none_SEMISEMI]
| x = SEMISEMI
    {    ( Some x )} [@name some_SEMISEMI]

loption_separated_nonempty_list_BAR_handler_case__:
  
    {    ( [] )} [@name none_separated_nonempty_list_BAR_handler_case_]
| x = separated_nonempty_list_BAR_handler_case_
    {    ( x )} [@name some_separated_nonempty_list_BAR_handler_case_]

loption_separated_nonempty_list_BAR_match_case__:
  
    {    ( [] )} [@name none_separated_nonempty_list_BAR_match_case_]
| x = separated_nonempty_list_BAR_match_case_
    {    ( x )} [@name some_separated_nonempty_list_BAR_match_case_]

loption_separated_nonempty_list_BAR_mlty_constructor__:
  
    {    ( [] )} [@name none_separated_nonempty_list_BAR_mlty_constructor_]
| x = separated_nonempty_list_BAR_mlty_constructor_
    {    ( x )} [@name some_separated_nonempty_list_BAR_mlty_constructor_]

loption_separated_nonempty_list_BAR_top_operation_case__:
  
    {    ( [] )} [@name none_separated_nonempty_list_BAR_top_operation_case_]
| x = separated_nonempty_list_BAR_top_operation_case_
    {    ( x )} [@name some_separated_nonempty_list_BAR_top_operation_case_]

loption_separated_nonempty_list_COMMA_pattern__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_pattern_]
| x = separated_nonempty_list_COMMA_pattern_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_pattern_]

loption_separated_nonempty_list_COMMA_term__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_term_]
| x = separated_nonempty_list_COMMA_term_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_term_]

loption_separated_nonempty_list_SEMI_pattern__:
  
    {    ( [] )} [@name none_separated_nonempty_list_SEMI_pattern_]
| x = separated_nonempty_list_SEMI_pattern_
    {    ( x )} [@name some_separated_nonempty_list_SEMI_pattern_]

list_ml_arg_:
  
    {    ( [] )} [@name nil_ml_arg]
| x = ml_arg xs = list_ml_arg_
    {    ( x :: xs )} [@name cons_ml_arg]

list_opt_name_ml_name__:
  
    {    ( [] )} [@name nil_opt_name_ml_name_]
| x = opt_name_ml_name_ xs = list_opt_name_ml_name__
    {    ( x :: xs )} [@name cons_opt_name_ml_name_]

list_prefix_pattern_:
  
    {    ( [] )} [@name nil_prefix_pattern]
| x = prefix_pattern xs = list_prefix_pattern_
    {    ( x :: xs )} [@name cons_prefix_pattern]

list_premise_:
  
    {    ( [] )} [@name nil_premise]
| x = premise xs = list_premise_
    {    ( x :: xs )} [@name cons_premise]

list_substitution_term_:
  
    {    ( [] )} [@name nil_substitution_term]
| x = substitution_term xs = list_substitution_term_
    {    ( x :: xs )} [@name cons_substitution_term]

list_typed_binder_:
  
    {    ( [] )} [@name nil_typed_binder]
| x = typed_binder xs = list_typed_binder_
    {    ( x :: xs )} [@name cons_typed_binder]

nonempty_list_anon_name_tt_name__:
  x = anon_name_tt_name_
    {    ( [ x ] )} [@name one_anon_name_tt_name_]
| x = anon_name_tt_name_ xs = nonempty_list_anon_name_tt_name__
    {    ( x :: xs )} [@name more_anon_name_tt_name_]

nonempty_list_maybe_typed_binder_:
  x = maybe_typed_binder
    {    ( [ x ] )} [@name one_maybe_typed_binder]
| x = maybe_typed_binder xs = nonempty_list_maybe_typed_binder_
    {    ( x :: xs )} [@name more_maybe_typed_binder]

nonempty_list_ml_arg_:
  x = ml_arg
    {    ( [ x ] )} [@name one_ml_arg]
| x = ml_arg xs = nonempty_list_ml_arg_
    {    ( x :: xs )} [@name more_ml_arg]

nonempty_list_opt_name_ml_name__:
  x = opt_name_ml_name_
    {    ( [ x ] )} [@name one_opt_name_ml_name_]
| x = opt_name_ml_name_ xs = nonempty_list_opt_name_ml_name__
    {    ( x :: xs )} [@name more_opt_name_ml_name_]

nonempty_list_opt_name_tt_name__:
  x = opt_name_tt_name_
    {    ( [ x ] )} [@name one_opt_name_tt_name_]
| x = opt_name_tt_name_ xs = nonempty_list_opt_name_tt_name__
    {    ( x :: xs )} [@name more_opt_name_tt_name_]

nonempty_list_prefix_pattern_:
  x = prefix_pattern
    {    ( [ x ] )} [@name one_prefix_pattern]
| x = prefix_pattern xs = nonempty_list_prefix_pattern_
    {    ( x :: xs )} [@name more_prefix_pattern]

nonempty_list_premise_:
  x = premise
    {    ( [ x ] )} [@name one_premise]
| x = premise xs = nonempty_list_premise_
    {    ( x :: xs )} [@name more_premise]

nonempty_list_simple_mlty_:
  x = simple_mlty
    {    ( [ x ] )} [@name one_simple_mlty]
| x = simple_mlty xs = nonempty_list_simple_mlty_
    {    ( x :: xs )} [@name more_simple_mlty]

nonempty_list_substitution_term_:
  x = substitution_term
    {    ( [ x ] )} [@name one_substitution_term]
| x = substitution_term xs = nonempty_list_substitution_term_
    {    ( x :: xs )} [@name more_substitution_term]

separated_nonempty_list_AND_let_clause_:
  x = let_clause
    {    ( [ x ] )} [@name one_AND_let_clause]
| x = let_clause _2 = AND xs = separated_nonempty_list_AND_let_clause_
    {    ( x :: xs )} [@name more_AND_let_clause]

separated_nonempty_list_AND_mlty_def_:
  x = mlty_def
    {    ( [ x ] )} [@name one_AND_mlty_def]
| x = mlty_def _2 = AND xs = separated_nonempty_list_AND_mlty_def_
    {    ( x :: xs )} [@name more_AND_mlty_def]

separated_nonempty_list_AND_recursive_clause_:
  x = recursive_clause
    {    ( [ x ] )} [@name one_AND_recursive_clause]
| x = recursive_clause _2 = AND xs = separated_nonempty_list_AND_recursive_clause_
    {    ( x :: xs )} [@name more_AND_recursive_clause]

separated_nonempty_list_ARROW_prod_mlty_:
  x = prod_mlty
    {    ( [ x ] )} [@name one_ARROW_prod_mlty]
| x = prod_mlty _2 = ARROW xs = separated_nonempty_list_ARROW_prod_mlty_
    {    ( x :: xs )} [@name more_ARROW_prod_mlty]

separated_nonempty_list_BAR_handler_case_:
  x = handler_case
    {    ( [ x ] )} [@name one_BAR_handler_case]
| x = handler_case _2 = BAR xs = separated_nonempty_list_BAR_handler_case_
    {    ( x :: xs )} [@name more_BAR_handler_case]

separated_nonempty_list_BAR_match_case_:
  x = match_case
    {    ( [ x ] )} [@name one_BAR_match_case]
| x = match_case _2 = BAR xs = separated_nonempty_list_BAR_match_case_
    {    ( x :: xs )} [@name more_BAR_match_case]

separated_nonempty_list_BAR_mlty_constructor_:
  x = mlty_constructor
    {    ( [ x ] )} [@name one_BAR_mlty_constructor]
| x = mlty_constructor _2 = BAR xs = separated_nonempty_list_BAR_mlty_constructor_
    {    ( x :: xs )} [@name more_BAR_mlty_constructor]

separated_nonempty_list_BAR_top_operation_case_:
  x = top_operation_case
    {    ( [ x ] )} [@name one_BAR_top_operation_case]
| x = top_operation_case _2 = BAR xs = separated_nonempty_list_BAR_top_operation_case_
    {    ( x :: xs )} [@name more_BAR_top_operation_case]

separated_nonempty_list_COMMA_module_name_:
  x = module_name
    {    ( [ x ] )} [@name one_COMMA_module_name]
| x = module_name _2 = COMMA xs = separated_nonempty_list_COMMA_module_name_
    {    ( x :: xs )} [@name more_COMMA_module_name]

separated_nonempty_list_COMMA_pattern_:
  x = pattern
    {    ( [ x ] )} [@name one_COMMA_pattern]
| x = pattern _2 = COMMA xs = separated_nonempty_list_COMMA_pattern_
    {    ( x :: xs )} [@name more_COMMA_pattern]

separated_nonempty_list_COMMA_term_:
  x = term
    {    ( [ x ] )} [@name one_COMMA_term]
| x = term _2 = COMMA xs = separated_nonempty_list_COMMA_term_
    {    ( x :: xs )} [@name more_COMMA_term]

separated_nonempty_list_SEMI_pattern_:
  x = pattern
    {    ( [ x ] )} [@name one_SEMI_pattern]
| x = pattern _2 = SEMI xs = separated_nonempty_list_SEMI_pattern_
    {    ( x :: xs )} [@name more_SEMI_pattern]

separated_nonempty_list_STAR_app_mlty_:
  x = app_mlty
    {    ( [ x ] )} [@name one_STAR_app_mlty]
| x = app_mlty _2 = STAR xs = separated_nonempty_list_STAR_app_mlty_
    {    ( x :: xs )} [@name more_STAR_app_mlty]

file:
  ds = ml_module _2 = EOF
    {    ( ds )}

ml_module:
  
    {    ( [] )}
| c = top_term
    {    ( [c] )}
| c = top_term _2 = SEMISEMI cs = ml_module
    {    ( c :: cs )}
| c = top_command _2 = SEMISEMI cs = ml_module
    {    ( c :: cs )}
| c = top_command cs = ml_module_top
    {    ( c :: cs )}

ml_module_top:
  
    {    ( [] )}
| c = top_command _2 = SEMISEMI cs = ml_module
    {    ( c :: cs )}
| c = top_command cs = ml_module_top
    {    ( c :: cs )}

commandline:
  _1 = top_command _2 = option_SEMISEMI_ _3 = EOF
    {    ( _1 )}
| _1 = top_term _2 = option_SEMISEMI_ _3 = EOF
    {    ( _1 )}

top_term:
  _1 = mark_location_top_term__
    {                                   ( _1 )}

top_term_:
  t = term
    {    ( Sugared.TopComputation t )}

top_command:
  _1 = mark_location_top_command__
    {                                         ( _1 )}

top_command_:
  _1 = REQUIRE mdls = separated_nonempty_list_COMMA_module_name_
    {    ( Sugared.Require mdls )}
| _1 = INCLUDE x = module_name
    {let mdl =     ( Name.PName x ) in
    ( Sugared.Include mdl )}
| _1 = INCLUDE pth = module_path _2 = PERIOD x = module_name
    {let mdl =     ( Name.PModule (pth, x) ) in
    ( Sugared.Include mdl )}
| _1 = OPEN x = module_name
    {let mdl =     ( Name.PName x ) in
    ( Sugared.Open mdl )}
| _1 = OPEN pth = module_path _2 = PERIOD x = module_name
    {let mdl =     ( Name.PModule (pth, x) ) in
    ( Sugared.Open mdl )}
| _1 = MODULE mdl = module_name _3 = EQ _4 = STRUCT cmds = ml_module _6 = END
    {    ( Sugared.TopModule (mdl, cmds) )}
| _1 = LET lst = separated_nonempty_list_AND_let_clause_
    {    ( Sugared.TopLet lst )}
| _1 = LET _2 = REC lst = separated_nonempty_list_AND_recursive_clause_
    {    ( Sugared.TopLetRec lst )}
| _1 = WITH lst = top_operation_cases _3 = END
    {    ( Sugared.TopWith lst )}
| _1 = MLTYPE t = ml_name xs = list_opt_name_ml_name__
    {    ( Sugared.DefMLTypeAbstract (t, xs) )}
| _1 = MLTYPE lst = mlty_defs
    {    ( Sugared.DefMLType lst )}
| _1 = MLTYPE _2 = REC lst = mlty_defs
    {    ( Sugared.DefMLTypeRec lst )}
| _1 = OPERATION op = op_name _3 = COLON opsig = op_mlsig
    {    ( Sugared.DeclOperation (op, opsig) )}
| _1 = EXCEPTION exc = exc_name
    {    ( Sugared.DeclException (exc, None) )}
| _1 = EXCEPTION exc = exc_name _3 = OF t = mlty
    {    ( Sugared.DeclException (exc, Some t) )}
| _1 = VERBOSITY n = NUMERAL
    {    ( Sugared.Verbosity n )}
| _1 = EXTERNAL n = ml_name _3 = COLON sch = ml_schema _5 = EQ s = QUOTED_STRING
    {    ( Sugared.DeclExternal (n, sch, s) )}
| _1 = RULE r = rule_
    {    ( r )}

rule_:
  c = tt_name ps = list_premise_ _3 = TYPE
    {    ( Sugared.RuleIsType (c, ps) )}
| c = tt_name ps = list_premise_ _3 = COLON ty = term
    {    ( Sugared.RuleIsTerm (c, ps, ty) )}
| c = tt_name ps = list_premise_ _3 = COLON l = app_term _5 = EQEQ r = ty_term
    {    ( Sugared.RuleEqType (c, ps, (l, r)) )}
| c = tt_name ps = list_premise_ _3 = COLON l = app_term _5 = EQEQ r = app_term _7 = COLON ty = term
    {    ( Sugared.RuleEqTerm (c, ps, (l, r, ty)) )}

premise:
  _1 = mark_location_premise__
    {                                 ( _1 )}

premise_:
  _1 = LPAREN lctx = local_context mv = opt_name_tt_name_ _4 = TYPE _5 = RPAREN
    {    ( Sugared.PremiseIsType (mv, lctx) )}
| _1 = LPAREN lctx = local_context mv = opt_name_tt_name_ _4 = COLON ty = term _6 = RPAREN
    {    ( Sugared.PremiseIsTerm (mv, lctx, ty) )}
| _1 = LPAREN lctx = local_context l = app_term _4 = EQEQ r = ty_term mv = equality_premise_name _7 = RPAREN
    {    ( Sugared.PremiseEqType (mv, lctx, (l, r)) )}
| _1 = LPAREN lctx = local_context l = app_term _4 = EQEQ r = app_term _6 = COLON ty = term mv = equality_premise_name _9 = RPAREN
    {    ( Sugared.PremiseEqTerm (mv, lctx, (l, r, ty)) )}

equality_premise_name:
  
    {    ( None )}
| _1 = BY x = opt_name_tt_name_
    {    ( x )}

local_context:
  lst = list_typed_binder_
    {    ( List.concat lst )}

term:
  _1 = mark_location_term__
    {                           ( _1 )}

term_:
  e = ty_term_
    {    ( e )}
| _1 = LET a = separated_nonempty_list_AND_let_clause_ _3 = IN c = term
    {    ( Sugared.Let (a, c) )}
| _1 = LET _2 = REC lst = separated_nonempty_list_AND_recursive_clause_ _4 = IN c = term
    {    ( Sugared.LetRec (lst, c) )}
| _1 = MATCH e = term _3 = WITH lst = match_cases _5 = END
    {    ( Sugared.Match (e, lst) )}
| _1 = TRY c = term _3 = WITH hcs = handler_cases _5 = END
    {    ( Sugared.Try (c, hcs) )}
| _1 = FUN xs = nonempty_list_ml_arg_ _3 = ARROW e = term
    {    ( Sugared.Function (xs, e) )}
| _1 = DERIVE ps = nonempty_list_premise_ _3 = ARROW e = term
    {    ( Sugared.Derive (ps, e) )}
| _1 = WITH h = term _3 = TRY c = term
    {    ( Sugared.With (h, c) )}
| _1 = HANDLER hcs = handler_cases _3 = END
    {    ( Sugared.Handler (hcs) )}
| _1 = FRESH x = opt_name_ml_name_ _3 = COLON t = ty_term
    {    ( Sugared.Fresh (x, t) )}
| e = app_term _2 = COLONQT bdry = ty_term
    {    ( Sugared.BoundaryAscribe (e, bdry) )}
| e = app_term _2 = COLON ty = ty_term
    {    ( Sugared.TypeAscribe (e, ty) )}
| e1 = binop_term _2 = SEMI e2 = term
    {    ( Sugared.Sequence (e1, e2) )}

ty_term:
  _1 = mark_location_ty_term__
    {                                 ( _1 )}

ty_term_:
  e = binop_term_
    {    ( e )}
| a = abstraction e = binop_term
    {    ( Sugared.Abstract (a, e) )}

binop_term:
  _1 = mark_location_binop_term__
    {                                       ( _1 )}

binop_term_:
  e = app_term_
    {    ( e )}
| e1 = app_term _2 = COLONEQ e2 = binop_term
    {    ( Sugared.Update (e1, e2) )}
| _1 = QQMARK _2 = TYPE
    {    ( Sugared.MLBoundaryIsType )}
| _1 = QQMARK _2 = COLON t = app_term
    {    ( Sugared.MLBoundaryIsTerm t )}
| l = app_term _2 = EQEQ r = app_term _4 = BY p = app_term
    {    ( Sugared.EqTypeAscribe (l, r, p) )}
| l = app_term _2 = EQEQ r = app_term _4 = COLON ty = app_term _6 = BY p = app_term
    {    ( Sugared.EqTermAscribe (l, r, ty, p) )}
| l = app_term _2 = EQEQ r = app_term _4 = BY _5 = QQMARK
    {    ( Sugared.MLBoundaryEqType (l, r) )}
| l = app_term _2 = EQEQ r = app_term _4 = COLON ty = app_term _6 = BY _7 = QQMARK
    {    ( Sugared.MLBoundaryEqTerm (l, r, ty) )}
| e1 = binop_term op = INFIXCONS e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}
| e1 = binop_term op = EQ e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}
| e1 = binop_term op = INFIXOP0 e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}
| e1 = binop_term op = INFIXOP1 e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}
| e1 = binop_term op = INFIXOP2 e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}
| e1 = binop_term op = INFIXOP3 e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}
| e1 = binop_term op = STAR e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}
| e1 = binop_term op = INFIXOP4 e2 = binop_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e1; e2])
    )}

app_term:
  _1 = mark_location_app_term__
    {                                   ( _1 )}

app_term_:
  e = substitution_term_
    {    ( e )}
| _1 = RAISE c = substitution_term
    {    ( Sugared.Raise c )}
| _1 = CONGRUENCE e1 = substitution_term e2 = substitution_term es = list_substitution_term_
    {    ( Sugared.Congruence (e1, e2, es) )}
| _1 = CONTEXT c = substitution_term
    {    ( Sugared.Context c )}
| _1 = CONVERT c1 = substitution_term c2 = substitution_term
    {    ( Sugared.Convert (c1, c2) )}
| _1 = ABSTRACT c1 = prefix_term c2 = prefix_term
    {    ( Sugared.AbstractAtom (c1, c2) )}
| _1 = OCCURS c1 = substitution_term c2 = substitution_term
    {    ( Sugared.Occurs (c1, c2) )}
| e = substitution_term es = nonempty_list_substitution_term_
    {    ( Sugared.Spine (e, es) )}

substitution_term:
  _1 = mark_location_substitution_term__
    {                                                     ( _1 )}

substitution_term_:
  e = prefix_term_
    {    ( e )}
| e = substitution_term s = substitution
    {    ( Sugared.Substitute (e, s) )}

prefix_term:
  _1 = mark_location_prefix_term__
    {                                         ( _1 )}

prefix_term_:
  e = simple_term_
    {    ( e )}
| _1 = REF e = prefix_term
    {    ( Sugared.Ref e )}
| _1 = BANG e = prefix_term
    {    ( Sugared.Lookup e )}
| op = PREFIXOP e2 = prefix_term
    {let oploc =     ( op ) in
    ( let (op, at) = oploc in
      let op = Location.mark ~at (Sugared.Name (Name.PName op)) in
      Sugared.Spine (op, [e2])
    )}
| _1 = NATURAL t = prefix_term
    {    ( Sugared.Natural t )}

simple_term_:
  x = any_name
    {let x =     ( Name.PName x ) in
    ( Sugared.Name x )}
| pth = module_path _2 = PERIOD x = any_name
    {let x =     ( Name.PModule (pth, x) ) in
    ( Sugared.Name x )}
| s = QUOTED_STRING
    {    ( Sugared.String s )}
| _1 = LBRACK lst = list_contents _3 = RBRACK
    {    ( Sugared.List lst )}
| _1 = LBRACK _2 = RBRACK
    {    ( Sugared.List [] )}
| _1 = LPAREN c = term _3 = COLONGT t = ml_schema _5 = RPAREN
    {    ( Sugared.MLAscribe (c, t) )}
| _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_term__ _3 = RPAREN
    {let lst =     ( xs ) in
    ( match lst with
      | [{Location.it=e;_}] -> e
      | _ -> Sugared.Tuple lst )}

list_contents:
  t = binop_term _2 = option_SEMI_
    {    ( [t] )}
| t = binop_term _2 = SEMI lst = list_contents
    {    ( t::lst )}

ml_name:
  _1 = NAME
    {    ( _1 )}
| _1 = LPAREN op = INFIXCONS _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = EQ _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP0 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP1 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP2 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP3 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = STAR _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP4 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = PREFIXOP _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}

op_name:
  _1 = NAME
    {    ( _1 )}

exc_name:
  _1 = NAME
    {    ( _1 )}

module_name:
  _1 = NAME
    {    ( _1 )}

tt_name:
  _1 = NAME
    {    ( _1 )}
| _1 = LPAREN op = INFIXCONS _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = EQ _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP0 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP1 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP2 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP3 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = STAR _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP4 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = PREFIXOP _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}

any_name:
  _1 = tt_name
    {    ( _1 )}

constr_name:
  _1 = NAME
    {    ( _1 )}
| _1 = LPAREN op = INFIXCONS _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = EQ _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP0 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP1 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP2 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP3 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = STAR _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = INFIXOP4 _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}
| _1 = LPAREN op = PREFIXOP _3 = RPAREN
    {let op =     ( op ) in
    ( fst op )}

module_path:
  mdl = module_name
    {    ( Name.PName mdl )}
| pth = module_path _2 = PERIOD mdl = module_name
    {    ( Name.PModule (pth, mdl) )}

opt_name_ml_name_:
  x = ml_name
    {    ( Some x )}
| _1 = UNDERSCORE
    {    ( None )}

opt_name_tt_name_:
  x = tt_name
    {    ( Some x )}
| _1 = UNDERSCORE
    {    ( None )}

anon_name_tt_name_:
  x = opt_name_tt_name_
    {    ( match x with Some x -> x | None -> Name.anonymous () )}

recursive_clause:
  f = ml_name y = ml_arg ys = list_ml_arg_ u = let_annotation _5 = EQ c = term
    {    ( (f, y, ys, u, c) )}

let_clause:
  x = ml_name ys = list_ml_arg_ u = let_annotation _4 = EQ c = term
    {    ( Sugared.Let_clause_ML (Some (x, ys), u, c) )}
| _1 = UNDERSCORE u = let_annotation _3 = EQ c = term
    {    ( Sugared.Let_clause_ML (None, u, c) )}
| x = ml_name _2 = COLON t = app_term _4 = EQ c = term
    {    ( Sugared.Let_clause_tt (Some x, t, c) )}
| _1 = UNDERSCORE _2 = COLON t = app_term _4 = EQ c = term
    {    ( Sugared.Let_clause_tt (None, t, c) )}
| pt = let_pattern u = let_annotation _3 = EQ c = term
    {    ( Sugared.Let_clause_patt (pt, u, c) )}

ml_arg:
  x = ml_name
    {    ( (x, Sugared.Arg_annot_none) )}
| _1 = LPAREN x = ml_name _3 = COLONGT t = mlty _5 = RPAREN
    {    ( (x, Sugared.Arg_annot_ty t) )}

let_annotation:
  
    {    ( Sugared.Let_annot_none )}
| _1 = COLONGT sch = ml_schema
    {    ( Sugared.Let_annot_schema sch )}

maybe_typed_binder:
  _1 = LBRACE xs = nonempty_list_anon_name_tt_name__ _3 = RBRACE
    {    ( List.map (fun x -> (x, None)) xs )}
| _1 = LBRACE xs = nonempty_list_anon_name_tt_name__ _3 = COLON t = ty_term _5 = RBRACE
    {    ( List.map (fun x -> (x, Some t)) xs )}

typed_binder:
  _1 = LBRACE xs = nonempty_list_anon_name_tt_name__ _3 = COLON t = ty_term _5 = RBRACE
    {    ( List.map (fun x -> (x, t)) xs )}

abstraction:
  lst = nonempty_list_maybe_typed_binder_
    {    ( List.concat lst )}

substitution:
  _1 = LBRACE subst = separated_nonempty_list_COMMA_term_ _3 = RBRACE
    {    ( subst )}

handler_cases:
  _1 = BAR lst = separated_nonempty_list_BAR_handler_case_
    {    ( lst )}
| xs = loption_separated_nonempty_list_BAR_handler_case__
    {let lst =     ( xs ) in
    ( lst )}

handler_case:
  _1 = VAL c = match_case
    {    ( Sugared.CaseVal c )}
| _1 = RAISE c = match_case
    {    ( Sugared.CaseExc c )}
| x = op_name ps = list_prefix_pattern_ pt = handler_checking _4 = ARROW t = term
    {let op =     ( Name.PName x ) in
    ( Sugared.CaseOp (op, (ps, pt, t)) )}
| pth = module_path _2 = PERIOD x = op_name ps = list_prefix_pattern_ pt = handler_checking _4 = ARROW t = term
    {let op =     ( Name.PModule (pth, x) ) in
    ( Sugared.CaseOp (op, (ps, pt, t)) )}

top_operation_case:
  _1 = OPERATION x = op_name ps = list_prefix_pattern_ pt = handler_checking _5 = ARROW t = term
    {let op =     ( Name.PName x ) in
    ( (op, (ps, pt, t)) )}
| _1 = OPERATION pth = module_path _2 = PERIOD x = op_name ps = list_prefix_pattern_ pt = handler_checking _5 = ARROW t = term
    {let op =     ( Name.PModule (pth, x) ) in
    ( (op, (ps, pt, t)) )}

top_operation_cases:
  _1 = BAR lst = separated_nonempty_list_BAR_top_operation_case_
    {    ( lst )}
| xs = loption_separated_nonempty_list_BAR_top_operation_case__
    {let lst =     ( xs ) in
    ( lst )}

handler_checking:
  
    {    ( None )}
| _1 = COLON pt = pattern
    {    ( Some pt )}

match_cases:
  _1 = BAR lst = separated_nonempty_list_BAR_match_case_
    {    ( lst )}
| xs = loption_separated_nonempty_list_BAR_match_case__
    {let lst =     ( xs ) in
    ( lst )}

match_case:
  p = pattern g = when_guard _3 = ARROW c = term
    {    ( (p, g, c) )}

when_guard:
  
    {    ( None )}
| _1 = WHEN c = binop_term
    {    ( Some c )}

pattern:
  _1 = mark_location_pattern__
    {                                 ( _1 )}

pattern_:
  p = binop_pattern_
    {    ( p )}
| p1 = binop_pattern _2 = AS p2 = binop_pattern
    {    ( Sugared.Patt_As (p1, p2) )}
| p = binop_pattern _2 = TYPE
    {    ( Sugared.Patt_IsType p )}
| p1 = binop_pattern _2 = COLON p2 = binop_pattern
    {    ( Sugared.Patt_IsTerm (p1, p2) )}
| p = binop_pattern _2 = COLONGT t = prod_mlty
    {    ( Sugared.Patt_MLAscribe (p, t) )}
| p1 = binop_pattern _2 = EQEQ p2 = binop_pattern
    {    ( Sugared.Patt_EqType (p1, p2) )}
| p1 = binop_pattern _2 = EQEQ p2 = binop_pattern _4 = COLON p3 = pattern
    {    ( Sugared.Patt_EqTerm (p1, p2, p3) )}
| _1 = QQMARK _2 = COLON p = binop_pattern
    {    ( Sugared.Patt_BoundaryIsTerm p )}
| p1 = binop_pattern _2 = EQEQ p2 = binop_pattern _4 = BY _5 = QQMARK
    {    ( Sugared.Patt_BoundaryEqType (p1, p2) )}
| p1 = binop_pattern _2 = EQEQ p2 = binop_pattern _4 = COLON p3 = binop_pattern _6 = BY _7 = QQMARK
    {    ( Sugared.Patt_BoundaryEqTerm (p1, p2, p3) )}
| abstr = tt_maybe_typed_binder p = pattern
    {    ( Sugared.Patt_Abstraction (abstr, p) )}

binop_pattern:
  _1 = mark_location_binop_pattern__
    {                                             ( _1 )}

binop_pattern_:
  e = app_pattern_
    {    ( e )}
| e1 = binop_pattern op = INFIXCONS e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}
| e1 = binop_pattern op = EQ e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}
| e1 = binop_pattern op = INFIXOP0 e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}
| e1 = binop_pattern op = INFIXOP1 e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}
| e1 = binop_pattern op = INFIXOP2 e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}
| e1 = binop_pattern op = INFIXOP3 e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}
| e1 = binop_pattern op = STAR e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}
| e1 = binop_pattern op = INFIXOP4 e2 = binop_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e1; e2])
    )}

app_pattern_:
  e = prefix_pattern_
    {    ( e )}
| x = any_name ps = nonempty_list_prefix_pattern_
    {let t =     ( Name.PName x ) in
    ( Sugared.Patt_Constructor (t, ps) )}
| pth = module_path _2 = PERIOD x = any_name ps = nonempty_list_prefix_pattern_
    {let t =     ( Name.PModule (pth, x) ) in
    ( Sugared.Patt_Constructor (t, ps) )}

prefix_pattern:
  _1 = mark_location_prefix_pattern__
    {                                               ( _1 )}

prefix_pattern_:
  e = simple_pattern_
    {    ( e )}
| _1 = UATOM p = prefix_pattern
    {    ( Sugared.Patt_GenAtom p )}
| op = PREFIXOP e = prefix_pattern
    {let oploc =     ( op ) in
    ( let (op, _) = oploc in
      Sugared.Patt_Constructor (Name.PName op, [e])
    )}

simple_pattern_:
  _1 = UNDERSCORE
    {    ( Sugared.Patt_Anonymous )}
| _1 = QQMARK _2 = TYPE
    {    ( Sugared.Patt_BoundaryIsType )}
| x = ml_name
    {let x =     ( Name.PName x ) in
    ( Sugared.Patt_Path x )}
| pth = module_path _2 = PERIOD x = ml_name
    {let x =     ( Name.PModule (pth, x) ) in
    ( Sugared.Patt_Path x )}
| _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_pattern__ _3 = RPAREN
    {let ps =     ( xs ) in
    ( match ps with
      | [{Location.it=p;_}] -> p
      | _ -> Sugared.Patt_Tuple ps
    )}
| _1 = LBRACK xs = loption_separated_nonempty_list_SEMI_pattern__ _3 = RBRACK
    {let ps =     ( xs ) in
    ( Sugared.Patt_List ps )}
| s = QUOTED_STRING
    {    ( Sugared.Patt_String s )}

let_pattern:
  _1 = mark_location_let_pattern__
    {                                         ( _1 )}

let_pattern_:
  _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_pattern__ _3 = RPAREN
    {let ps =     ( xs ) in
    ( match ps with
      | [{Location.it=p;_}] -> p
      | _ -> Sugared.Patt_Tuple ps
    )}
| _1 = LBRACK xs = loption_separated_nonempty_list_SEMI_pattern__ _3 = RBRACK
    {let ps =     ( xs ) in
    ( Sugared.Patt_List ps )}

tt_maybe_typed_binder:
  _1 = LBRACE xs = nonempty_list_opt_name_tt_name__ _3 = RBRACE
    {    ( List.map (fun x -> (x, None)) xs )}
| _1 = LBRACE xs = nonempty_list_opt_name_tt_name__ _3 = COLON t = pattern _5 = RBRACE
    {    ( List.map (fun x -> (x, Some t)) xs )}

op_mlsig:
  lst = separated_nonempty_list_ARROW_prod_mlty_
    {    ( match List.rev lst with
      | t :: ts -> (List.rev ts, t)
      | [] -> assert false
     )}

ml_schema:
  _1 = mark_location_ml_schema__
    {                                      ( _1 )}

ml_schema_:
  _1 = MLFORALL params = nonempty_list_opt_name_ml_name__ _3 = COMMA t = mlty
    {    ( Sugared.ML_Forall (params, t) )}
| t = mlty
    {    ( Sugared.ML_Forall ([], t) )}

mlty:
  _1 = mark_location_mlty__
    {                           ( _1 )}

mlty_:
  _1 = prod_mlty_
    {    ( _1 )}
| t1 = prod_mlty _2 = ARROW t2 = mlty
    {    ( Sugared.ML_Arrow (t1, t2) )}
| t1 = prod_mlty _2 = DARROW t2 = mlty
    {    ( Sugared.ML_Handler (t1, t2) )}

prod_mlty:
  _1 = mark_location_prod_mlty__
    {                                     ( _1 )}

prod_mlty_:
  ts = separated_nonempty_list_STAR_app_mlty_
    {    ( match ts with
      | [] -> assert false
      | [{Location.it=t;_}] -> t
      | _::_::_ -> Sugared.ML_Prod ts
    )}

app_mlty:
  _1 = mark_location_app_mlty__
    {                                   ( _1 )}

app_mlty_:
  _1 = simple_mlty_
    {    ( _1 )}
| _1 = REF t = simple_mlty
    {    ( Sugared.ML_Ref t )}
| x = ml_name args = nonempty_list_simple_mlty_
    {let c =     ( Name.PName x ) in
    ( Sugared.ML_TyApply (c, args) )}
| pth = module_path _2 = PERIOD x = ml_name args = nonempty_list_simple_mlty_
    {let c =     ( Name.PModule (pth, x) ) in
    ( Sugared.ML_TyApply (c, args) )}

simple_mlty:
  _1 = mark_location_simple_mlty__
    {                                         ( _1 )}

simple_mlty_:
  _1 = LPAREN t = mlty_ _3 = RPAREN
    {    ( t )}
| x = ml_name
    {let c =     ( Name.PName x ) in
    ( Sugared.ML_TyApply (c, []) )}
| pth = module_path _2 = PERIOD x = ml_name
    {let c =     ( Name.PModule (pth, x) ) in
    ( Sugared.ML_TyApply (c, []) )}
| _1 = MLJUDGEMENT
    {    ( Sugared.ML_Judgement )}
| _1 = MLBOUNDARY
    {    ( Sugared.ML_Boundary )}
| _1 = MLDERIVATION
    {    ( Sugared.ML_Derivation )}
| _1 = MLUNIT
    {    ( Sugared.ML_Prod [] )}
| _1 = MLSTRING
    {    ( Sugared.ML_String )}
| _1 = UNDERSCORE
    {    ( Sugared.ML_Anonymous )}

mlty_defs:
  lst = separated_nonempty_list_AND_mlty_def_
    {    ( lst )}

mlty_def:
  a = ml_name xs = list_opt_name_ml_name__ _3 = EQ body = mlty_def_body
    {    ( (a, (xs, body)) )}

mlty_def_body:
  t = mlty
    {    ( Sugared.ML_Alias t )}
| c = mlty_constructor _2 = BAR xs = loption_separated_nonempty_list_BAR_mlty_constructor__
    {let lst =     ( xs ) in
    ( Sugared.ML_Sum (c :: lst) )}
| _1 = BAR xs = loption_separated_nonempty_list_BAR_mlty_constructor__
    {let lst =     ( xs ) in
    ( Sugared.ML_Sum lst )}

mlty_constructor:
  c = constr_name _2 = OF t = mlty
    {    ( (c, [t]) )}
| c = constr_name
    {    ( (c, []) )}

mark_location_app_mlty__:
  x = app_mlty_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_app_term__:
  x = app_term_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_binop_pattern__:
  x = binop_pattern_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_binop_term__:
  x = binop_term_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_let_pattern__:
  x = let_pattern_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_ml_schema__:
  x = ml_schema_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_mlty__:
  x = mlty_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_pattern__:
  x = pattern_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_prefix_pattern__:
  x = prefix_pattern_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_prefix_term__:
  x = prefix_term_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_premise__:
  x = premise_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_prod_mlty__:
  x = prod_mlty_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_simple_mlty__:
  x = simple_mlty_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_substitution_term__:
  x = substitution_term_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_term__:
  x = term_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_top_command__:
  x = top_command_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_top_term__:
  x = top_term_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

mark_location_ty_term__:
  x = ty_term_
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
  ( Location.mark ~at:(Location.make _startpos _endpos) x )}

%%


