State 0:
## Known stack suffix:
##
## LR(1) items:
phrase' -> . phrase [ # ]
## Transitions:
-- On C shift to state 1
-- On A shift to state 3
-- On phrase shift to state 5
-- On foo shift to state 6
-- On bar shift to state 11
## Reductions:

State 1:
## Known stack suffix:
## C
## LR(1) items:
bar -> C . D [ EOF C A ]
## Transitions:
-- On D shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## C D
## LR(1) items:
bar -> C D . [ EOF C A ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bar -> C D

State 3:
## Known stack suffix:
## A
## LR(1) items:
foo -> A . B [ EOF C A ]
## Transitions:
-- On B shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## A B
## LR(1) items:
foo -> A B . [ EOF C A ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production foo -> A B

State 5:
## Known stack suffix:
## phrase
## LR(1) items:
phrase' -> phrase . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept phrase

State 6:
## Known stack suffix:
## foo
## LR(1) items:
phrase -> foo . foo EOF [ # ]
phrase -> foo . bar EOF [ # ]
## Transitions:
-- On C shift to state 1
-- On A shift to state 3
-- On foo shift to state 7
-- On bar shift to state 9
## Reductions:

State 7:
## Known stack suffix:
## foo foo
## LR(1) items:
phrase -> foo foo . EOF [ # ]
## Transitions:
-- On EOF shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## foo foo EOF
## LR(1) items:
phrase -> foo foo EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> foo foo EOF

State 9:
## Known stack suffix:
## foo bar
## LR(1) items:
phrase -> foo bar . EOF [ # ]
## Transitions:
-- On EOF shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## foo bar EOF
## LR(1) items:
phrase -> foo bar EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> foo bar EOF

State 11:
## Known stack suffix:
## bar
## LR(1) items:
phrase -> bar . foo EOF [ # ]
phrase -> bar . bar EOF [ # ]
## Transitions:
-- On C shift to state 1
-- On A shift to state 3
-- On foo shift to state 12
-- On bar shift to state 14
## Reductions:

State 12:
## Known stack suffix:
## bar foo
## LR(1) items:
phrase -> bar foo . EOF [ # ]
## Transitions:
-- On EOF shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## bar foo EOF
## LR(1) items:
phrase -> bar foo EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> bar foo EOF

State 14:
## Known stack suffix:
## bar bar
## LR(1) items:
phrase -> bar bar . EOF [ # ]
## Transitions:
-- On EOF shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## bar bar EOF
## LR(1) items:
phrase -> bar bar EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production phrase -> bar bar EOF

