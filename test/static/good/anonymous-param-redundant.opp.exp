%{ type ('a, 'b) either = Left of 'a | Right of 'b %}
%start other
%start phrase
%token <int> A
%token <int> B
%token <int> C
%token <int> D
%token <int> EOF
%type <unit> other
%type <(int, int) either> phrase
%%

midrule___anonymous_1_:
  _1 = C
    {let x =               () in
    ( x )}
| _1 = D
    {let x =                      () in
    ( x )}

list___anonymous_0_A_B__:
  
    {    ( [] )}
| x = A xs = list___anonymous_0_A_B__
    {let x =           ( Left  x ) in
    ( x :: xs )}
| y = B xs = list___anonymous_0_A_B__
    {let x =           ( Right y ) in
    ( x :: xs )}

phrase:
  _1 = C _2 = list___anonymous_0_A_B__ _1_inlined1 = D _2_inlined1 = list___anonymous_0_A_B__ _3 = EOF
    {let ys =
  let _1 = _1_inlined1 in
      ( _1 )
in
let xs =     ( _1 ) in
    ( xs @ ys )}

other:
  _1 = seplist_A_ _2 = EOF
    {                 ()}

seplist_A_:
  _1 = A
    {    ()}
| _1 = A _2 = midrule___anonymous_1_ _3 = seplist_A_
    {                                    ()}

%%
