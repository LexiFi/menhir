State 0:
## Known stack suffix:
##
## LR(1) items:
generator' -> . generator [ # ]
## Transitions:
-- On TK_VERTEX shift to state 1
-- On TK_RAYMOD shift to state 30
-- On TK_RAY shift to state 33
-- On TK_LINEMOD shift to state 36
-- On TK_LINE shift to state 39
-- On generator shift to state 42
## Reductions:

State 1:
## Known stack suffix:
## TK_VERTEX
## LR(1) items:
generator -> TK_VERTEX . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 18
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 2:
## Known stack suffix:
## TK_VAR
## LR(1) items:
id -> TK_VAR . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id -> TK_VAR

State 3:
## Known stack suffix:
## TK_SUB
## LR(1) items:
coeff -> TK_SUB . coeff0 [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_MUL TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
term -> TK_SUB . id [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On scalar0 shift to state 14
-- On id shift to state 15
-- On coeff0 shift to state 16
## Reductions:

State 4:
## Known stack suffix:
## TK_MPQF
## LR(1) items:
scalar0 -> TK_MPQF . [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_SEMICOLON TK_RPAR TK_RBRACKET TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scalar0 -> TK_MPQF

State 5:
## Known stack suffix:
## TK_LBRACKET
## LR(1) items:
coeff0 -> TK_LBRACKET . scalar TK_SEMICOLON scalar TK_RBRACKET [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 6
-- On TK_MPQF shift to state 4
-- On TK_FLOAT shift to state 7
-- On scalar0 shift to state 9
-- On scalar shift to state 10
## Reductions:

State 6:
## Known stack suffix:
## TK_SUB
## LR(1) items:
scalar -> TK_SUB . scalar0 [ TK_SEMICOLON TK_RBRACKET ]
## Transitions:
-- On TK_MPQF shift to state 4
-- On TK_FLOAT shift to state 7
-- On scalar0 shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## TK_FLOAT
## LR(1) items:
scalar0 -> TK_FLOAT . [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_SEMICOLON TK_RPAR TK_RBRACKET TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scalar0 -> TK_FLOAT

State 8:
## Known stack suffix:
## TK_SUB scalar0
## LR(1) items:
scalar -> TK_SUB scalar0 . [ TK_SEMICOLON TK_RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scalar -> TK_SUB scalar0

State 9:
## Known stack suffix:
## scalar0
## LR(1) items:
scalar -> scalar0 . [ TK_SEMICOLON TK_RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scalar -> scalar0

State 10:
## Known stack suffix:
## TK_LBRACKET scalar
## LR(1) items:
coeff0 -> TK_LBRACKET scalar . TK_SEMICOLON scalar TK_RBRACKET [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_SEMICOLON shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## TK_LBRACKET scalar TK_SEMICOLON
## LR(1) items:
coeff0 -> TK_LBRACKET scalar TK_SEMICOLON . scalar TK_RBRACKET [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 6
-- On TK_MPQF shift to state 4
-- On TK_FLOAT shift to state 7
-- On scalar0 shift to state 9
-- On scalar shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## TK_LBRACKET scalar TK_SEMICOLON scalar
## LR(1) items:
coeff0 -> TK_LBRACKET scalar TK_SEMICOLON scalar . TK_RBRACKET [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_RBRACKET shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## TK_LBRACKET scalar TK_SEMICOLON scalar TK_RBRACKET
## LR(1) items:
coeff0 -> TK_LBRACKET scalar TK_SEMICOLON scalar TK_RBRACKET . [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coeff0 -> TK_LBRACKET scalar TK_SEMICOLON scalar TK_RBRACKET

State 14:
## Known stack suffix:
## scalar0
## LR(1) items:
coeff0 -> scalar0 . [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coeff0 -> scalar0

State 15:
## Known stack suffix:
## TK_SUB id
## LR(1) items:
term -> TK_SUB id . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> TK_SUB id

State 16:
## Known stack suffix:
## TK_SUB coeff0
## LR(1) items:
coeff -> TK_SUB coeff0 . [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_MUL TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coeff -> TK_SUB coeff0

State 17:
## Known stack suffix:
## term
## LR(1) items:
linexpr0 -> term . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production linexpr0 -> term

State 18:
## Known stack suffix:
## TK_VERTEX linexpr0
## LR(1) items:
generator -> TK_VERTEX linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 27
-- On TK_ADD shift to state 28
## Reductions:

State 19:
## Known stack suffix:
## linexpr0 TK_SUB
## LR(1) items:
linexpr0 -> linexpr0 TK_SUB . term [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 20
-- On scalar0 shift to state 14
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 20:
## Known stack suffix:
## linexpr0 TK_SUB term
## LR(1) items:
linexpr0 -> linexpr0 TK_SUB term . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production linexpr0 -> linexpr0 TK_SUB term

State 21:
## Known stack suffix:
## id
## LR(1) items:
term -> id . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> id

State 22:
## Known stack suffix:
## coeff0
## LR(1) items:
coeff -> coeff0 . [ TK_VAR TK_SUPEG TK_SUP TK_SUB TK_MUL TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coeff -> coeff0

State 23:
## Known stack suffix:
## coeff
## LR(1) items:
term -> coeff . id [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
term -> coeff . TK_MUL id [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
term -> coeff . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_MUL shift to state 24
-- On id shift to state 26
## Reductions:
-- On TK_SUPEG reduce production term -> coeff
-- On TK_SUP reduce production term -> coeff
-- On TK_SUB reduce production term -> coeff
-- On TK_MOD reduce production term -> coeff
-- On TK_INFEG reduce production term -> coeff
-- On TK_INF reduce production term -> coeff
-- On TK_EOF reduce production term -> coeff
-- On TK_EG reduce production term -> coeff
-- On TK_DISEG reduce production term -> coeff
-- On TK_ADD reduce production term -> coeff

State 24:
## Known stack suffix:
## coeff TK_MUL
## LR(1) items:
term -> coeff TK_MUL . id [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On id shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## coeff TK_MUL id
## LR(1) items:
term -> coeff TK_MUL id . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> coeff TK_MUL id

State 26:
## Known stack suffix:
## coeff id
## LR(1) items:
term -> coeff id . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> coeff id

State 27:
## Known stack suffix:
## TK_VERTEX linexpr0 TK_EOF
## LR(1) items:
generator -> TK_VERTEX linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production generator -> TK_VERTEX linexpr0 TK_EOF

State 28:
## Known stack suffix:
## linexpr0 TK_ADD
## LR(1) items:
linexpr0 -> linexpr0 TK_ADD . term [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 29
-- On scalar0 shift to state 14
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 29:
## Known stack suffix:
## linexpr0 TK_ADD term
## LR(1) items:
linexpr0 -> linexpr0 TK_ADD term . [ TK_SUPEG TK_SUP TK_SUB TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production linexpr0 -> linexpr0 TK_ADD term

State 30:
## Known stack suffix:
## TK_RAYMOD
## LR(1) items:
generator -> TK_RAYMOD . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 31
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 31:
## Known stack suffix:
## TK_RAYMOD linexpr0
## LR(1) items:
generator -> TK_RAYMOD linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 32
-- On TK_ADD shift to state 28
## Reductions:

State 32:
## Known stack suffix:
## TK_RAYMOD linexpr0 TK_EOF
## LR(1) items:
generator -> TK_RAYMOD linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production generator -> TK_RAYMOD linexpr0 TK_EOF

State 33:
## Known stack suffix:
## TK_RAY
## LR(1) items:
generator -> TK_RAY . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 34
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 34:
## Known stack suffix:
## TK_RAY linexpr0
## LR(1) items:
generator -> TK_RAY linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 35
-- On TK_ADD shift to state 28
## Reductions:

State 35:
## Known stack suffix:
## TK_RAY linexpr0 TK_EOF
## LR(1) items:
generator -> TK_RAY linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production generator -> TK_RAY linexpr0 TK_EOF

State 36:
## Known stack suffix:
## TK_LINEMOD
## LR(1) items:
generator -> TK_LINEMOD . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 37
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 37:
## Known stack suffix:
## TK_LINEMOD linexpr0
## LR(1) items:
generator -> TK_LINEMOD linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 38
-- On TK_ADD shift to state 28
## Reductions:

State 38:
## Known stack suffix:
## TK_LINEMOD linexpr0 TK_EOF
## LR(1) items:
generator -> TK_LINEMOD linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production generator -> TK_LINEMOD linexpr0 TK_EOF

State 39:
## Known stack suffix:
## TK_LINE
## LR(1) items:
generator -> TK_LINE . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 40
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 40:
## Known stack suffix:
## TK_LINE linexpr0
## LR(1) items:
generator -> TK_LINE linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 41
-- On TK_ADD shift to state 28
## Reductions:

State 41:
## Known stack suffix:
## TK_LINE linexpr0 TK_EOF
## LR(1) items:
generator -> TK_LINE linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production generator -> TK_LINE linexpr0 TK_EOF

State 42:
## Known stack suffix:
## generator
## LR(1) items:
generator' -> generator . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept generator

State 43:
## Known stack suffix:
##
## LR(1) items:
lincons' -> . lincons [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 44
-- On lincons shift to state 66
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 44:
## Known stack suffix:
## linexpr0
## LR(1) items:
lincons -> linexpr0 . TK_EG linexpr0 TK_EOF [ # ]
lincons -> linexpr0 . TK_EG linexpr0 TK_MOD scalar0 TK_EOF [ # ]
lincons -> linexpr0 . TK_DISEG linexpr0 TK_EOF [ # ]
lincons -> linexpr0 . TK_SUP linexpr0 TK_EOF [ # ]
lincons -> linexpr0 . TK_SUPEG linexpr0 TK_EOF [ # ]
lincons -> linexpr0 . TK_INFEG linexpr0 TK_EOF [ # ]
lincons -> linexpr0 . TK_INF linexpr0 TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUPEG TK_SUP TK_SUB TK_INFEG TK_INF TK_EG TK_DISEG TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUPEG TK_SUP TK_SUB TK_INFEG TK_INF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_SUPEG shift to state 45
-- On TK_SUP shift to state 48
-- On TK_SUB shift to state 19
-- On TK_INFEG shift to state 51
-- On TK_INF shift to state 54
-- On TK_EG shift to state 57
-- On TK_DISEG shift to state 63
-- On TK_ADD shift to state 28
## Reductions:

State 45:
## Known stack suffix:
## linexpr0 TK_SUPEG
## LR(1) items:
lincons -> linexpr0 TK_SUPEG . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 46
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 46:
## Known stack suffix:
## linexpr0 TK_SUPEG linexpr0
## LR(1) items:
lincons -> linexpr0 TK_SUPEG linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 47
-- On TK_ADD shift to state 28
## Reductions:

State 47:
## Known stack suffix:
## linexpr0 TK_SUPEG linexpr0 TK_EOF
## LR(1) items:
lincons -> linexpr0 TK_SUPEG linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lincons -> linexpr0 TK_SUPEG linexpr0 TK_EOF

State 48:
## Known stack suffix:
## linexpr0 TK_SUP
## LR(1) items:
lincons -> linexpr0 TK_SUP . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 49
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 49:
## Known stack suffix:
## linexpr0 TK_SUP linexpr0
## LR(1) items:
lincons -> linexpr0 TK_SUP linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 50
-- On TK_ADD shift to state 28
## Reductions:

State 50:
## Known stack suffix:
## linexpr0 TK_SUP linexpr0 TK_EOF
## LR(1) items:
lincons -> linexpr0 TK_SUP linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lincons -> linexpr0 TK_SUP linexpr0 TK_EOF

State 51:
## Known stack suffix:
## linexpr0 TK_INFEG
## LR(1) items:
lincons -> linexpr0 TK_INFEG . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 52
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 52:
## Known stack suffix:
## linexpr0 TK_INFEG linexpr0
## LR(1) items:
lincons -> linexpr0 TK_INFEG linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 53
-- On TK_ADD shift to state 28
## Reductions:

State 53:
## Known stack suffix:
## linexpr0 TK_INFEG linexpr0 TK_EOF
## LR(1) items:
lincons -> linexpr0 TK_INFEG linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lincons -> linexpr0 TK_INFEG linexpr0 TK_EOF

State 54:
## Known stack suffix:
## linexpr0 TK_INF
## LR(1) items:
lincons -> linexpr0 TK_INF . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 55
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 55:
## Known stack suffix:
## linexpr0 TK_INF linexpr0
## LR(1) items:
lincons -> linexpr0 TK_INF linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 56
-- On TK_ADD shift to state 28
## Reductions:

State 56:
## Known stack suffix:
## linexpr0 TK_INF linexpr0 TK_EOF
## LR(1) items:
lincons -> linexpr0 TK_INF linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lincons -> linexpr0 TK_INF linexpr0 TK_EOF

State 57:
## Known stack suffix:
## linexpr0 TK_EG
## LR(1) items:
lincons -> linexpr0 TK_EG . linexpr0 TK_EOF [ # ]
lincons -> linexpr0 TK_EG . linexpr0 TK_MOD scalar0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 58
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 58:
## Known stack suffix:
## linexpr0 TK_EG linexpr0
## LR(1) items:
lincons -> linexpr0 TK_EG linexpr0 . TK_EOF [ # ]
lincons -> linexpr0 TK_EG linexpr0 . TK_MOD scalar0 TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_MOD TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_MOD TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_MOD shift to state 59
-- On TK_EOF shift to state 62
-- On TK_ADD shift to state 28
## Reductions:

State 59:
## Known stack suffix:
## linexpr0 TK_EG linexpr0 TK_MOD
## LR(1) items:
lincons -> linexpr0 TK_EG linexpr0 TK_MOD . scalar0 TK_EOF [ # ]
## Transitions:
-- On TK_MPQF shift to state 4
-- On TK_FLOAT shift to state 7
-- On scalar0 shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## linexpr0 TK_EG linexpr0 TK_MOD scalar0
## LR(1) items:
lincons -> linexpr0 TK_EG linexpr0 TK_MOD scalar0 . TK_EOF [ # ]
## Transitions:
-- On TK_EOF shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## linexpr0 TK_EG linexpr0 TK_MOD scalar0 TK_EOF
## LR(1) items:
lincons -> linexpr0 TK_EG linexpr0 TK_MOD scalar0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lincons -> linexpr0 TK_EG linexpr0 TK_MOD scalar0 TK_EOF

State 62:
## Known stack suffix:
## linexpr0 TK_EG linexpr0 TK_EOF
## LR(1) items:
lincons -> linexpr0 TK_EG linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lincons -> linexpr0 TK_EG linexpr0 TK_EOF

State 63:
## Known stack suffix:
## linexpr0 TK_DISEG
## LR(1) items:
lincons -> linexpr0 TK_DISEG . linexpr0 TK_EOF [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 64
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 64:
## Known stack suffix:
## linexpr0 TK_DISEG linexpr0
## LR(1) items:
lincons -> linexpr0 TK_DISEG linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 65
-- On TK_ADD shift to state 28
## Reductions:

State 65:
## Known stack suffix:
## linexpr0 TK_DISEG linexpr0 TK_EOF
## LR(1) items:
lincons -> linexpr0 TK_DISEG linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production lincons -> linexpr0 TK_DISEG linexpr0 TK_EOF

State 66:
## Known stack suffix:
## lincons
## LR(1) items:
lincons' -> lincons . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept lincons

State 67:
## Known stack suffix:
##
## LR(1) items:
linexpr' -> . linexpr [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 3
-- On TK_MPQF shift to state 4
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On term shift to state 17
-- On scalar0 shift to state 14
-- On linexpr0 shift to state 68
-- On linexpr shift to state 70
-- On id shift to state 21
-- On coeff0 shift to state 22
-- On coeff shift to state 23
## Reductions:

State 68:
## Known stack suffix:
## linexpr0
## LR(1) items:
linexpr -> linexpr0 . TK_EOF [ # ]
linexpr0 -> linexpr0 . TK_ADD term [ TK_SUB TK_EOF TK_ADD ]
linexpr0 -> linexpr0 . TK_SUB term [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 19
-- On TK_EOF shift to state 69
-- On TK_ADD shift to state 28
## Reductions:

State 69:
## Known stack suffix:
## linexpr0 TK_EOF
## LR(1) items:
linexpr -> linexpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production linexpr -> linexpr0 TK_EOF

State 70:
## Known stack suffix:
## linexpr
## LR(1) items:
linexpr' -> linexpr . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept linexpr

State 71:
## Known stack suffix:
##
## LR(1) items:
tcons' -> . tcons [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 99
-- On tcons0 shift to state 114
-- On tcons shift to state 116
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 72:
## Known stack suffix:
## TK_SUB
## LR(1) items:
texpr0_3 -> TK_SUB . texpr0_3 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 98
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 73:
## Known stack suffix:
## TK_SQRT
## LR(1) items:
texpr0_4 -> TK_SQRT . texpr0_4 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 97
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 74:
## Known stack suffix:
## TK_LPAR
## LR(1) items:
texpr0_4 -> TK_LPAR . texpr0 TK_RPAR [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 91
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 75:
## Known stack suffix:
## TK_CAST
## LR(1) items:
texpr0_4 -> TK_CAST . texpr0_4 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 76
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 76:
## Known stack suffix:
## TK_CAST texpr0_4
## LR(1) items:
texpr0_4 -> TK_CAST texpr0_4 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_4 -> TK_CAST texpr0_4

State 77:
## Known stack suffix:
## id
## LR(1) items:
texpr0_4 -> id . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_4 -> id

State 78:
## Known stack suffix:
## coeff0
## LR(1) items:
texpr0_4 -> coeff0 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_4 -> coeff0

State 79:
## Known stack suffix:
## texpr0_4
## LR(1) items:
texpr0_3 -> texpr0_4 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_3 -> texpr0_4

State 80:
## Known stack suffix:
## texpr0_3
## LR(1) items:
texpr0_2 -> texpr0_3 . TK_POW texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
texpr0_2 -> texpr0_3 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_POW shift to state 81
## Reductions:
-- On TK_SUPEG reduce production texpr0_2 -> texpr0_3
-- On TK_SUP reduce production texpr0_2 -> texpr0_3
-- On TK_SUB reduce production texpr0_2 -> texpr0_3
-- On TK_RPAR reduce production texpr0_2 -> texpr0_3
-- On TK_MUL reduce production texpr0_2 -> texpr0_3
-- On TK_MODULO reduce production texpr0_2 -> texpr0_3
-- On TK_MOD reduce production texpr0_2 -> texpr0_3
-- On TK_INFEG reduce production texpr0_2 -> texpr0_3
-- On TK_INF reduce production texpr0_2 -> texpr0_3
-- On TK_EOF reduce production texpr0_2 -> texpr0_3
-- On TK_EG reduce production texpr0_2 -> texpr0_3
-- On TK_DIV reduce production texpr0_2 -> texpr0_3
-- On TK_DISEG reduce production texpr0_2 -> texpr0_3
-- On TK_ADD reduce production texpr0_2 -> texpr0_3

State 81:
## Known stack suffix:
## texpr0_3 TK_POW
## LR(1) items:
texpr0_2 -> texpr0_3 TK_POW . texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 82
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 82:
## Known stack suffix:
## texpr0_3 TK_POW texpr0_2
## LR(1) items:
texpr0_2 -> texpr0_3 TK_POW texpr0_2 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_2 -> texpr0_3 TK_POW texpr0_2

State 83:
## Known stack suffix:
## texpr0_2
## LR(1) items:
texpr0_1 -> texpr0_2 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_1 -> texpr0_2

State 84:
## Known stack suffix:
## texpr0_1
## LR(1) items:
texpr0 -> texpr0_1 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_MUL texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_DIV texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_MODULO texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_MUL shift to state 85
-- On TK_MODULO shift to state 87
-- On TK_DIV shift to state 89
## Reductions:
-- On TK_SUPEG reduce production texpr0 -> texpr0_1
-- On TK_SUP reduce production texpr0 -> texpr0_1
-- On TK_SUB reduce production texpr0 -> texpr0_1
-- On TK_RPAR reduce production texpr0 -> texpr0_1
-- On TK_MOD reduce production texpr0 -> texpr0_1
-- On TK_INFEG reduce production texpr0 -> texpr0_1
-- On TK_INF reduce production texpr0 -> texpr0_1
-- On TK_EOF reduce production texpr0 -> texpr0_1
-- On TK_EG reduce production texpr0 -> texpr0_1
-- On TK_DISEG reduce production texpr0 -> texpr0_1
-- On TK_ADD reduce production texpr0 -> texpr0_1

State 85:
## Known stack suffix:
## texpr0_1 TK_MUL
## LR(1) items:
texpr0_1 -> texpr0_1 TK_MUL . texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 86
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 86:
## Known stack suffix:
## texpr0_1 TK_MUL texpr0_2
## LR(1) items:
texpr0_1 -> texpr0_1 TK_MUL texpr0_2 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_1 -> texpr0_1 TK_MUL texpr0_2

State 87:
## Known stack suffix:
## texpr0_1 TK_MODULO
## LR(1) items:
texpr0_1 -> texpr0_1 TK_MODULO . texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 88
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 88:
## Known stack suffix:
## texpr0_1 TK_MODULO texpr0_2
## LR(1) items:
texpr0_1 -> texpr0_1 TK_MODULO texpr0_2 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_1 -> texpr0_1 TK_MODULO texpr0_2

State 89:
## Known stack suffix:
## texpr0_1 TK_DIV
## LR(1) items:
texpr0_1 -> texpr0_1 TK_DIV . texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 90
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 90:
## Known stack suffix:
## texpr0_1 TK_DIV texpr0_2
## LR(1) items:
texpr0_1 -> texpr0_1 TK_DIV texpr0_2 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_1 -> texpr0_1 TK_DIV texpr0_2

State 91:
## Known stack suffix:
## TK_LPAR texpr0
## LR(1) items:
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_RPAR TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_RPAR TK_ADD ]
texpr0_4 -> TK_LPAR texpr0 . TK_RPAR [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_RPAR shift to state 94
-- On TK_ADD shift to state 95
## Reductions:

State 92:
## Known stack suffix:
## texpr0 TK_SUB
## LR(1) items:
texpr0 -> texpr0 TK_SUB . texpr0_1 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 93
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 93:
## Known stack suffix:
## texpr0 TK_SUB texpr0_1
## LR(1) items:
texpr0 -> texpr0 TK_SUB texpr0_1 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_MUL texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_DIV texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_MODULO texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_MUL shift to state 85
-- On TK_MODULO shift to state 87
-- On TK_DIV shift to state 89
## Reductions:
-- On TK_SUPEG reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_SUP reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_SUB reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_RPAR reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_MOD reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_INFEG reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_INF reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_EOF reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_EG reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_DISEG reduce production texpr0 -> texpr0 TK_SUB texpr0_1
-- On TK_ADD reduce production texpr0 -> texpr0 TK_SUB texpr0_1

State 94:
## Known stack suffix:
## TK_LPAR texpr0 TK_RPAR
## LR(1) items:
texpr0_4 -> TK_LPAR texpr0 TK_RPAR . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_4 -> TK_LPAR texpr0 TK_RPAR

State 95:
## Known stack suffix:
## texpr0 TK_ADD
## LR(1) items:
texpr0 -> texpr0 TK_ADD . texpr0_1 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 96
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 96:
## Known stack suffix:
## texpr0 TK_ADD texpr0_1
## LR(1) items:
texpr0 -> texpr0 TK_ADD texpr0_1 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_MUL texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_DIV texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
texpr0_1 -> texpr0_1 . TK_MODULO texpr0_2 [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
-- On TK_MUL shift to state 85
-- On TK_MODULO shift to state 87
-- On TK_DIV shift to state 89
## Reductions:
-- On TK_SUPEG reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_SUP reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_SUB reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_RPAR reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_MOD reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_INFEG reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_INF reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_EOF reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_EG reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_DISEG reduce production texpr0 -> texpr0 TK_ADD texpr0_1
-- On TK_ADD reduce production texpr0 -> texpr0 TK_ADD texpr0_1

State 97:
## Known stack suffix:
## TK_SQRT texpr0_4
## LR(1) items:
texpr0_4 -> TK_SQRT texpr0_4 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_4 -> TK_SQRT texpr0_4

State 98:
## Known stack suffix:
## TK_SUB texpr0_3
## LR(1) items:
texpr0_3 -> TK_SUB texpr0_3 . [ TK_SUPEG TK_SUP TK_SUB TK_RPAR TK_POW TK_MUL TK_MODULO TK_MOD TK_INFEG TK_INF TK_EOF TK_EG TK_DIV TK_DISEG TK_ADD ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production texpr0_3 -> TK_SUB texpr0_3

State 99:
## Known stack suffix:
## texpr0
## LR(1) items:
tcons0 -> texpr0 . TK_EG texpr0 [ TK_EOF ]
tcons0 -> texpr0 . TK_EG texpr0 TK_MOD scalar0 [ TK_EOF ]
tcons0 -> texpr0 . TK_DISEG texpr0 [ TK_EOF ]
tcons0 -> texpr0 . TK_SUP texpr0 [ TK_EOF ]
tcons0 -> texpr0 . TK_SUPEG texpr0 [ TK_EOF ]
tcons0 -> texpr0 . TK_INFEG texpr0 [ TK_EOF ]
tcons0 -> texpr0 . TK_INF texpr0 [ TK_EOF ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUPEG TK_SUP TK_SUB TK_INFEG TK_INF TK_EG TK_DISEG TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUPEG TK_SUP TK_SUB TK_INFEG TK_INF TK_EG TK_DISEG TK_ADD ]
## Transitions:
-- On TK_SUPEG shift to state 100
-- On TK_SUP shift to state 102
-- On TK_SUB shift to state 92
-- On TK_INFEG shift to state 104
-- On TK_INF shift to state 106
-- On TK_EG shift to state 108
-- On TK_DISEG shift to state 112
-- On TK_ADD shift to state 95
## Reductions:

State 100:
## Known stack suffix:
## texpr0 TK_SUPEG
## LR(1) items:
tcons0 -> texpr0 TK_SUPEG . texpr0 [ TK_EOF ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 101
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 101:
## Known stack suffix:
## texpr0 TK_SUPEG texpr0
## LR(1) items:
tcons0 -> texpr0 TK_SUPEG texpr0 . [ TK_EOF ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_ADD shift to state 95
## Reductions:
-- On TK_EOF reduce production tcons0 -> texpr0 TK_SUPEG texpr0

State 102:
## Known stack suffix:
## texpr0 TK_SUP
## LR(1) items:
tcons0 -> texpr0 TK_SUP . texpr0 [ TK_EOF ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 103
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 103:
## Known stack suffix:
## texpr0 TK_SUP texpr0
## LR(1) items:
tcons0 -> texpr0 TK_SUP texpr0 . [ TK_EOF ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_ADD shift to state 95
## Reductions:
-- On TK_EOF reduce production tcons0 -> texpr0 TK_SUP texpr0

State 104:
## Known stack suffix:
## texpr0 TK_INFEG
## LR(1) items:
tcons0 -> texpr0 TK_INFEG . texpr0 [ TK_EOF ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 105
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 105:
## Known stack suffix:
## texpr0 TK_INFEG texpr0
## LR(1) items:
tcons0 -> texpr0 TK_INFEG texpr0 . [ TK_EOF ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_ADD shift to state 95
## Reductions:
-- On TK_EOF reduce production tcons0 -> texpr0 TK_INFEG texpr0

State 106:
## Known stack suffix:
## texpr0 TK_INF
## LR(1) items:
tcons0 -> texpr0 TK_INF . texpr0 [ TK_EOF ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 107
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 107:
## Known stack suffix:
## texpr0 TK_INF texpr0
## LR(1) items:
tcons0 -> texpr0 TK_INF texpr0 . [ TK_EOF ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_ADD shift to state 95
## Reductions:
-- On TK_EOF reduce production tcons0 -> texpr0 TK_INF texpr0

State 108:
## Known stack suffix:
## texpr0 TK_EG
## LR(1) items:
tcons0 -> texpr0 TK_EG . texpr0 [ TK_EOF ]
tcons0 -> texpr0 TK_EG . texpr0 TK_MOD scalar0 [ TK_EOF ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 109
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 109:
## Known stack suffix:
## texpr0 TK_EG texpr0
## LR(1) items:
tcons0 -> texpr0 TK_EG texpr0 . [ TK_EOF ]
tcons0 -> texpr0 TK_EG texpr0 . TK_MOD scalar0 [ TK_EOF ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_MOD TK_EOF TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_MOD TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_MOD shift to state 110
-- On TK_ADD shift to state 95
## Reductions:
-- On TK_EOF reduce production tcons0 -> texpr0 TK_EG texpr0

State 110:
## Known stack suffix:
## texpr0 TK_EG texpr0 TK_MOD
## LR(1) items:
tcons0 -> texpr0 TK_EG texpr0 TK_MOD . scalar0 [ TK_EOF ]
## Transitions:
-- On TK_MPQF shift to state 4
-- On TK_FLOAT shift to state 7
-- On scalar0 shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## texpr0 TK_EG texpr0 TK_MOD scalar0
## LR(1) items:
tcons0 -> texpr0 TK_EG texpr0 TK_MOD scalar0 . [ TK_EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tcons0 -> texpr0 TK_EG texpr0 TK_MOD scalar0

State 112:
## Known stack suffix:
## texpr0 TK_DISEG
## LR(1) items:
tcons0 -> texpr0 TK_DISEG . texpr0 [ TK_EOF ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 113
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 113:
## Known stack suffix:
## texpr0 TK_DISEG texpr0
## LR(1) items:
tcons0 -> texpr0 TK_DISEG texpr0 . [ TK_EOF ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_ADD shift to state 95
## Reductions:
-- On TK_EOF reduce production tcons0 -> texpr0 TK_DISEG texpr0

State 114:
## Known stack suffix:
## tcons0
## LR(1) items:
tcons -> tcons0 . TK_EOF [ # ]
## Transitions:
-- On TK_EOF shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## tcons0 TK_EOF
## LR(1) items:
tcons -> tcons0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production tcons -> tcons0 TK_EOF

State 116:
## Known stack suffix:
## tcons
## LR(1) items:
tcons' -> tcons . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept tcons

State 117:
## Known stack suffix:
##
## LR(1) items:
texpr' -> . texpr [ # ]
## Transitions:
-- On TK_VAR shift to state 2
-- On TK_SUB shift to state 72
-- On TK_SQRT shift to state 73
-- On TK_MPQF shift to state 4
-- On TK_LPAR shift to state 74
-- On TK_LBRACKET shift to state 5
-- On TK_FLOAT shift to state 7
-- On TK_CAST shift to state 75
-- On texpr0_4 shift to state 79
-- On texpr0_3 shift to state 80
-- On texpr0_2 shift to state 83
-- On texpr0_1 shift to state 84
-- On texpr0 shift to state 118
-- On texpr shift to state 120
-- On scalar0 shift to state 14
-- On id shift to state 77
-- On coeff0 shift to state 78
## Reductions:

State 118:
## Known stack suffix:
## texpr0
## LR(1) items:
texpr -> texpr0 . TK_EOF [ # ]
texpr0 -> texpr0 . TK_ADD texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
texpr0 -> texpr0 . TK_SUB texpr0_1 [ TK_SUB TK_EOF TK_ADD ]
## Transitions:
-- On TK_SUB shift to state 92
-- On TK_EOF shift to state 119
-- On TK_ADD shift to state 95
## Reductions:

State 119:
## Known stack suffix:
## texpr0 TK_EOF
## LR(1) items:
texpr -> texpr0 TK_EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production texpr -> texpr0 TK_EOF

State 120:
## Known stack suffix:
## texpr
## LR(1) items:
texpr' -> texpr . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept texpr

