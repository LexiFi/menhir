%{
(* This file is part of the APRON Library, released under LGPL license
   with an exception allowing the redistribution of statically linked
   executables.

  Please read the COPYING file packaged in the distribution  *)

let rec neg acc = function
  | [] -> acc
  | (var,coeff)::l ->
      let nacc =
      if Coeff.is_zero coeff then
	acc
      else
	(var,(Coeff.neg coeff))::acc
      in
      neg nacc l

%}
%start generator
%start lincons
%start linexpr
%start tcons
%start texpr
%token <(Texpr1.typ * Texpr1.round)> TK_ADD
%token <(Texpr1.typ * Texpr1.round)> TK_CAST
%token TK_DISEG
%token <(Texpr1.typ * Texpr1.round)> TK_DIV
%token TK_EG
%token TK_EOF
%token <float> TK_FLOAT
%token TK_INF
%token TK_INFEG
%token TK_LBRACKET
%token TK_LINE
%token TK_LINEMOD
%token TK_LPAR
%token TK_MOD
%token <(Texpr1.typ * Texpr1.round)> TK_MODULO
%token <Mpqf.t> TK_MPQF
%token <(Texpr1.typ * Texpr1.round)> TK_MUL
%token <(Texpr1.typ * Texpr1.round)> TK_POW
%token TK_RAY
%token TK_RAYMOD
%token TK_RBRACKET
%token TK_RPAR
%token TK_SEMICOLON
%token <(Texpr1.typ * Texpr1.round)> TK_SQRT
%token <(Texpr1.typ * Texpr1.round)> TK_SUB
%token TK_SUP
%token TK_SUPEG
%token <string> TK_VAR
%token TK_VERTEX
%type <Generator0.typ * (string*Coeff.t) list> generator
%type <Lincons0.typ * (string*Coeff.t) list> lincons
%type <(string*Coeff.t) list> linexpr
%type <Tcons0.typ * Texpr1.expr> tcons
%type <Texpr1.expr> texpr
%%

lincons:
  _1 = linexpr0 _2 = TK_EG _3 = linexpr0 _4 = TK_EOF
    {                                 ( (Lincons0.EQ, neg _1 _3) )}
| _1 = linexpr0 _2 = TK_EG _3 = linexpr0 _4 = TK_MOD _5 = scalar0 _6 = TK_EOF
    {                                                ( (Lincons0.EQMOD(_5), neg _1 _3) )}
| _1 = linexpr0 _2 = TK_DISEG _3 = linexpr0 _4 = TK_EOF
    {                                    ( failwith "!= not yet supported" )}
| _1 = linexpr0 _2 = TK_SUP _3 = linexpr0 _4 = TK_EOF
    {                                  ( (Lincons0.SUP, neg _1 _3) )}
| _1 = linexpr0 _2 = TK_SUPEG _3 = linexpr0 _4 = TK_EOF
    {                                    ( (Lincons0.SUPEQ, neg _1 _3) )}
| _1 = linexpr0 _2 = TK_INFEG _3 = linexpr0 _4 = TK_EOF
    {                                    ( (Lincons0.SUPEQ, neg _3 _1) )}
| _1 = linexpr0 _2 = TK_INF _3 = linexpr0 _4 = TK_EOF
    {                                  ( (Lincons0.SUP, neg _3 _1) )}

generator:
  _1 = TK_VERTEX _2 = linexpr0 _3 = TK_EOF
    {                            ( (Generator0.VERTEX,_2) )}
| _1 = TK_RAY _2 = linexpr0 _3 = TK_EOF
    {                         ( (Generator0.RAY,_2) )}
| _1 = TK_LINE _2 = linexpr0 _3 = TK_EOF
    {                          ( (Generator0.LINE,_2) )}
| _1 = TK_RAYMOD _2 = linexpr0 _3 = TK_EOF
    {                            ( (Generator0.RAYMOD,_2) )}
| _1 = TK_LINEMOD _2 = linexpr0 _3 = TK_EOF
    {                             ( (Generator0.LINEMOD,_2) )}

linexpr:
  _1 = linexpr0 _2 = TK_EOF
    {                  ( _1 )}

linexpr0:
  _1 = linexpr0 _2 = TK_ADD _3 = term
    {    ( _3::_1 )}
| _1 = linexpr0 _2 = TK_SUB _3 = term
    {( let (var,coeff) = _3 in (var,Coeff.neg coeff)::_1 )}
| _1 = term
    {       ( [_1] )}

term:
  _1 = coeff _2 = id
    {           ( (_2,_1) )}
| _1 = coeff _2 = TK_MUL _3 = id
    {                  ( (_3,_1) )}
| _1 = coeff
    {        ( ("",_1) )}
| _1 = id
    {     ( (_1, Coeff.s_of_int 1) )}
| _1 = TK_SUB _2 = id
    {            ( (_2, Coeff.s_of_int (-1)) )}

tcons:
  _1 = tcons0 _2 = TK_EOF
    {                ( _1 )}

tcons0:
  _1 = texpr0 _2 = TK_EG _3 = texpr0
    {                      ( (Tcons0.EQ, (Texpr1.Binop (Texpr1.Sub,_1,_3,Texpr1.Real,Texpr1.Rnd))) )}
| _1 = texpr0 _2 = TK_EG _3 = texpr0 _4 = TK_MOD _5 = scalar0
    {                                     ( (Tcons0.EQMOD(_5), (Texpr1.Binop (Texpr1.Sub,_1,_3,Texpr1.Real,Texpr1.Rnd))) )}
| _1 = texpr0 _2 = TK_DISEG _3 = texpr0
    {                         ( failwith "!= not yet supported" )}
| _1 = texpr0 _2 = TK_SUP _3 = texpr0
    {                       ( (Tcons0.SUP, (Texpr1.Binop (Texpr1.Sub,_1,_3,Texpr1.Real,Texpr1.Rnd))) )}
| _1 = texpr0 _2 = TK_SUPEG _3 = texpr0
    {                         ( (Tcons0.SUPEQ, (Texpr1.Binop (Texpr1.Sub,_1,_3,Texpr1.Real,Texpr1.Rnd))) )}
| _1 = texpr0 _2 = TK_INFEG _3 = texpr0
    {                         ( (Tcons0.SUPEQ, (Texpr1.Binop (Texpr1.Sub,_3,_1,Texpr1.Real,Texpr1.Rnd))) )}
| _1 = texpr0 _2 = TK_INF _3 = texpr0
    {                       ( (Tcons0.SUP, (Texpr1.Binop (Texpr1.Sub,_3,_1,Texpr1.Real,Texpr1.Rnd))) )}

texpr:
  _1 = texpr0 _2 = TK_EOF
    {                ( _1 )}

texpr0:
  _1 = texpr0 _2 = TK_ADD _3 = texpr0_1
    {    ( let (t,r) = _2 in Texpr1.Binop(Texpr1.Add,_1,_3,t,r) )}
| _1 = texpr0 _2 = TK_SUB _3 = texpr0_1
    {    ( let (t,r) = _2 in Texpr1.Binop(Texpr1.Sub,_1,_3,t,r) )}
| _1 = texpr0_1
    {    ( _1 )}

texpr0_1:
  _1 = texpr0_1 _2 = TK_MUL _3 = texpr0_2
    {    ( let (t,r) = _2 in Texpr1.Binop(Texpr1.Mul,_1,_3,t,r) )}
| _1 = texpr0_1 _2 = TK_DIV _3 = texpr0_2
    {    ( let (t,r) = _2 in Texpr1.Binop(Texpr1.Div,_1,_3,t,r) )}
| _1 = texpr0_1 _2 = TK_MODULO _3 = texpr0_2
    {    ( let (t,r) = _2 in Texpr1.Binop(Texpr1.Mod,_1,_3,t,r) )}
| _1 = texpr0_2
    {    ( _1 )}

texpr0_2:
  _1 = texpr0_3 _2 = TK_POW _3 = texpr0_2
    {    ( let (t,r) = _2 in Texpr1.Binop(Texpr1.Pow,_1,_3,t,r) )}
| _1 = texpr0_3
    {    ( _1 )}

texpr0_3:
  _1 = TK_SUB _2 = texpr0_3
    {    ( let (t,r) = _1 in Texpr1.Unop(Texpr1.Neg,_2,t,r) )}
| _1 = texpr0_4
    {    ( _1 )}

texpr0_4:
  _1 = TK_CAST _2 = texpr0_4
    {    ( let (t,r) = _1 in Texpr1.Unop(Texpr1.Cast,_2,t,r) )}
| _1 = TK_SQRT _2 = texpr0_4
    {    ( let (t,r) = _1 in Texpr1.Unop(Texpr1.Sqrt,_2,t,r) )}
| _1 = TK_LPAR _2 = texpr0 _3 = TK_RPAR
    {    ( _2 )}
| _1 = coeff0
    {    ( Texpr1.Cst(_1) )}
| _1 = id
    {    ( Texpr1.Var(Var.of_string _1) )}

id:
  _1 = TK_VAR
    {         ( _1 )}

scalar0:
  _1 = TK_MPQF
    {          ( Scalar.Mpqf(_1) )}
| _1 = TK_FLOAT
    {           ( Scalar.Float(_1) )}

scalar:
  _1 = scalar0
    {          ( _1 )}
| _1 = TK_SUB _2 = scalar0
    {                 ( Scalar.neg _2 )}

coeff0:
  _1 = scalar0
    {    ( Coeff.Scalar _1 )}
| _1 = TK_LBRACKET _2 = scalar _3 = TK_SEMICOLON _4 = scalar _5 = TK_RBRACKET
    {    ( Coeff.Interval(Interval.of_infsup _2 _4) )}

coeff:
  _1 = coeff0
    {         ( _1 )}
| _1 = TK_SUB _2 = coeff0
    {                ( Coeff.neg _2 )}

%%
