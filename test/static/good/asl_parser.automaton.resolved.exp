State 0:
## Known stack suffix:
##
## LR(1) items:
declarations_start' -> . declarations_start [ # ]
## Transitions:
-- On EOL shift to state 1
-- On leadingblank shift to state 2
-- On declarations_start shift to state 712
-- On declarations shift to state 713
## Reductions:
-- On UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
--   reduce production leadingblank ->

State 1:
## Known stack suffix:
## EOL
## LR(1) items:
leadingblank -> EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production leadingblank -> EOL

State 2:
## Known stack suffix:
## leadingblank
## LR(1) items:
declarations -> leadingblank . list(declaration) [ EOF ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_OPERATOR_TWO shift to state 202
-- On UNDERSCORE_UNDERSCORE_OPERATOR_ONE shift to state 208
-- On UNDERSCORE_UNDERSCORE_NEWMAP shift to state 214
-- On UNDERSCORE_UNDERSCORE_NEWEVENT shift to state 438
-- On UNDERSCORE_UNDERSCORE_MAP shift to state 445
-- On UNDERSCORE_UNDERSCORE_INSTRUCTION shift to state 460
-- On UNDERSCORE_UNDERSCORE_FUNCTION shift to state 511
-- On UNDERSCORE_UNDERSCORE_EVENT shift to state 516
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 519
-- On UNDERSCORE_UNDERSCORE_CONFIG shift to state 577
-- On UNDERSCORE_UNDERSCORE_BUILTIN shift to state 584
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On TYPE shift to state 601
-- On RECORD shift to state 619
-- On QUALIFIER shift to state 11
-- On LPAREN shift to state 163
-- On ID shift to state 13
-- On ENUMERATION shift to state 631
-- On CONSTANT shift to state 639
-- On BITS shift to state 26
-- On ARRAY shift to state 646
-- On variable_declaration shift to state 654
-- On typeident shift to state 32
-- On type_declaration shift to state 655
-- On ty shift to state 656
-- On tident shift to state 38
-- On setter_declaration shift to state 673
-- On qualident shift to state 674
-- On procedure_declaration shift to state 704
-- On list(declaration) shift to state 705
-- On internal_definition shift to state 706
-- On instruction_definition shift to state 707
-- On ident shift to state 48
-- On getter_declaration shift to state 708
-- On function_declaration shift to state 709
-- On declaration shift to state 710
## Reductions:
-- On EOF
--   reduce production list(declaration) ->

State 3:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_REGISTER
## LR(1) items:
ty -> UNDERSCORE_UNDERSCORE_REGISTER . INTLIT LBRACE regfields RBRACE [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On INTLIT shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_REGISTER INTLIT
## LR(1) items:
ty -> UNDERSCORE_UNDERSCORE_REGISTER INTLIT . LBRACE regfields RBRACE [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On LBRACE shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_REGISTER INTLIT LBRACE
## LR(1) items:
ty -> UNDERSCORE_UNDERSCORE_REGISTER INTLIT LBRACE . regfields RBRACE [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On slice shift to state 106
-- On sexpr shift to state 108
-- On separated_nonempty_list(COMMA,slice) shift to state 192
-- On scexpr shift to state 111
-- On regfields shift to state 194
-- On regfield shift to state 196
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On list(regfield) shift to state 199
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:
-- On RBRACE
--   reduce production list(regfield) ->

State 6:
## Known stack suffix:
## TYPEOF
## LR(1) items:
ty -> TYPEOF . LPAREN expr RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## TYPEOF LPAREN
## LR(1) items:
ty -> TYPEOF LPAREN . expr RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 190
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 8:
## Known stack suffix:
## TYPEID
## LR(1) items:
typeident -> TYPEID . [ UNKNOWN SEMICOLON RPAREN RBRACK QUALIFIER LPAREN LBRACE IS IMPLEMENTATION_UNDERSCORE_DEFINED ID EQ COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeident -> TYPEID

State 9:
## Known stack suffix:
## STRINGLIT
## LR(1) items:
literal_expression -> STRINGLIT . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_expression -> STRINGLIT

State 10:
## Known stack suffix:
## REALLIT
## LR(1) items:
literal_expression -> REALLIT . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_expression -> REALLIT

State 11:
## Known stack suffix:
## QUALIFIER
## LR(1) items:
qualident -> QUALIFIER . DOT ident [ TO STAR SLASH SEMICOLON RPAREN REM RBRACE QUOT PLUS_PLUS PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IFF GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
tident -> QUALIFIER . DOT typeident [ UNKNOWN RPAREN RBRACK QUALIFIER LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA ]
## Transitions:
-- On DOT shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## QUALIFIER DOT
## LR(1) items:
qualident -> QUALIFIER DOT . ident [ TO STAR SLASH SEMICOLON RPAREN REM RBRACE QUOT PLUS_PLUS PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IFF GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
tident -> QUALIFIER DOT . typeident [ UNKNOWN RPAREN RBRACK QUALIFIER LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA ]
## Transitions:
-- On TYPEID shift to state 8
-- On ID shift to state 13
-- On typeident shift to state 14
-- On ident shift to state 15
## Reductions:

State 13:
## Known stack suffix:
## ID
## LR(1) items:
ident -> ID . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STRINGLIT STAR SLASH SEMICOLON SEE RPAREN RETURN REM REALLIT RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF NOT MOD MINUS MASKLIT LT_LT LT_EQ LT LPAREN LBRACK LBRACE IS INTLIT IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID HEXLIT GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITSLIT BITS BAR_BAR BANG_EQ BANG ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> ID

State 14:
## Known stack suffix:
## QUALIFIER DOT typeident
## LR(1) items:
tident -> QUALIFIER DOT typeident . [ UNKNOWN SEMICOLON RPAREN RBRACK QUALIFIER LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tident -> QUALIFIER DOT typeident

State 15:
## Known stack suffix:
## QUALIFIER DOT ident
## LR(1) items:
qualident -> QUALIFIER DOT ident . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualident -> QUALIFIER DOT ident

State 16:
## Known stack suffix:
## NOT
## LR(1) items:
unop -> NOT . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unop -> NOT

State 17:
## Known stack suffix:
## MINUS
## LR(1) items:
unop -> MINUS . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unop -> MINUS

State 18:
## Known stack suffix:
## MASKLIT
## LR(1) items:
literal_expression -> MASKLIT . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_expression -> MASKLIT

State 19:
## Known stack suffix:
## LPAREN
## LR(1) items:
aexpr -> LPAREN . expr RPAREN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
aexpr -> LPAREN . separated_nonempty2_list(COMMA,expr) RPAREN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
ty -> LPAREN . loption(separated_nonempty_list(COMMA,ty)) RPAREN [ UNKNOWN RPAREN IMPLEMENTATION_UNDERSCORE_DEFINED COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 182
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,ty) shift to state 167
-- On separated_nonempty2_list(COMMA,expr) shift to state 183
-- On qualident shift to state 42
-- On loption(separated_nonempty_list(COMMA,ty)) shift to state 168
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 185
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,ty)) ->

State 20:
## Known stack suffix:
## INTLIT
## LR(1) items:
literal_expression -> INTLIT . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_expression -> INTLIT

State 21:
## Known stack suffix:
## IF
## LR(1) items:
conditional_expression -> IF . cexpr THEN expr list(e_elsif) ELSE expr [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On cexpr shift to state 176
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 22:
## Known stack suffix:
## QUALIFIER
## LR(1) items:
qualident -> QUALIFIER . DOT ident [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
tident -> QUALIFIER . DOT typeident [ UNKNOWN LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ]
## Transitions:
-- On DOT shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## QUALIFIER DOT
## LR(1) items:
qualident -> QUALIFIER DOT . ident [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
tident -> QUALIFIER DOT . typeident [ UNKNOWN LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ]
## Transitions:
-- On TYPEID shift to state 8
-- On ID shift to state 13
-- On typeident shift to state 14
-- On ident shift to state 15
## Reductions:

State 24:
## Known stack suffix:
## HEXLIT
## LR(1) items:
literal_expression -> HEXLIT . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_expression -> HEXLIT

State 25:
## Known stack suffix:
## BITSLIT
## LR(1) items:
literal_expression -> BITSLIT . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal_expression -> BITSLIT

State 26:
## Known stack suffix:
## BITS
## LR(1) items:
ty -> BITS . LPAREN expr RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## BITS LPAREN
## LR(1) items:
ty -> BITS LPAREN . expr RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 174
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 28:
## Known stack suffix:
## BANG
## LR(1) items:
unop -> BANG . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unop -> BANG

State 29:
## Known stack suffix:
## ARRAY
## LR(1) items:
ty -> ARRAY . LBRACK ixtype RBRACK OF ty [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On LBRACK shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## ARRAY LBRACK
## LR(1) items:
ty -> ARRAY LBRACK . ixtype RBRACK OF ty [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 157
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ixtype shift to state 158
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 171
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 31:
## Known stack suffix:
## unop
## LR(1) items:
bexpr -> unop . fexpr [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 156
-- On aexpr shift to state 93
## Reductions:

State 32:
## Known stack suffix:
## typeident
## LR(1) items:
tident -> typeident . [ UNKNOWN SEMICOLON RPAREN RBRACK QUALIFIER LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tident -> typeident

State 33:
## Known stack suffix:
## ty
## LR(1) items:
aexpr -> ty . UNKNOWN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
aexpr -> ty . IMPLEMENTATION_UNDERSCORE_DEFINED opt_stringLit [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On UNKNOWN shift to state 34
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 35
## Reductions:

State 34:
## Known stack suffix:
## ty UNKNOWN
## LR(1) items:
aexpr -> ty UNKNOWN . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexpr -> ty UNKNOWN

State 35:
## Known stack suffix:
## ty IMPLEMENTATION_UNDERSCORE_DEFINED
## LR(1) items:
aexpr -> ty IMPLEMENTATION_UNDERSCORE_DEFINED . opt_stringLit [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On STRINGLIT shift to state 36
-- On opt_stringLit shift to state 37
## Reductions:
-- On TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
--   reduce production opt_stringLit ->

State 36:
## Known stack suffix:
## STRINGLIT
## LR(1) items:
opt_stringLit -> STRINGLIT . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_stringLit -> STRINGLIT

State 37:
## Known stack suffix:
## ty IMPLEMENTATION_UNDERSCORE_DEFINED opt_stringLit
## LR(1) items:
aexpr -> ty IMPLEMENTATION_UNDERSCORE_DEFINED opt_stringLit . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexpr -> ty IMPLEMENTATION_UNDERSCORE_DEFINED opt_stringLit

State 38:
## Known stack suffix:
## tident
## LR(1) items:
ty -> tident . [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
ty -> tident . LPAREN separated_nonempty_list(COMMA,expr) RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 39
## Reductions:
-- On UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND
--   reduce production ty -> tident

State 39:
## Known stack suffix:
## tident LPAREN
## LR(1) items:
ty -> tident LPAREN . separated_nonempty_list(COMMA,expr) RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,expr) shift to state 40
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 153
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 40:
## Known stack suffix:
## tident LPAREN separated_nonempty_list(COMMA,expr)
## LR(1) items:
ty -> tident LPAREN separated_nonempty_list(COMMA,expr) . RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## tident LPAREN separated_nonempty_list(COMMA,expr) RPAREN
## LR(1) items:
ty -> tident LPAREN separated_nonempty_list(COMMA,expr) RPAREN . [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> tident LPAREN separated_nonempty_list(COMMA,expr) RPAREN

State 42:
## Known stack suffix:
## qualident
## LR(1) items:
aexpr -> qualident . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
aexpr -> qualident . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 43
## Reductions:
-- On TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
--   reduce production aexpr -> qualident

State 43:
## Known stack suffix:
## qualident LPAREN
## LR(1) items:
aexpr -> qualident LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,expr) shift to state 44
-- On qualident shift to state 42
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 45
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 153
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 44:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 45:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
aexpr -> qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN
## LR(1) items:
aexpr -> qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexpr -> qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN

State 47:
## Known stack suffix:
## literal_expression
## LR(1) items:
aexpr -> literal_expression . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexpr -> literal_expression

State 48:
## Known stack suffix:
## ident
## LR(1) items:
qualident -> ident . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualident -> ident

State 49:
## Known stack suffix:
## fexpr
## LR(1) items:
bexpr -> fexpr . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . DOT ident [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . IN pattern [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On LBRACK shift to state 50
-- On IN shift to state 118
-- On DOT shift to state 145
## Reductions:
-- On TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
--   reduce production bexpr -> fexpr

State 50:
## Known stack suffix:
## fexpr LBRACK
## LR(1) items:
fexpr -> fexpr LBRACK . loption(separated_nonempty_list(COMMA,slice)) RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On slice shift to state 106
-- On sexpr shift to state 108
-- On separated_nonempty_list(COMMA,slice) shift to state 115
-- On scexpr shift to state 111
-- On qualident shift to state 42
-- On loption(separated_nonempty_list(COMMA,slice)) shift to state 116
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:
-- On RBRACK
--   reduce production loption(separated_nonempty_list(COMMA,slice)) ->

State 51:
## Known stack suffix:
## IF
## LR(1) items:
sexpr -> IF . cexpr THEN expr list(e_elsif) ELSE scexpr [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On cexpr shift to state 52
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 52:
## Known stack suffix:
## IF cexpr
## LR(1) items:
sexpr -> IF cexpr . THEN expr list(e_elsif) ELSE scexpr [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On THEN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## IF cexpr THEN
## LR(1) items:
sexpr -> IF cexpr THEN . expr list(e_elsif) ELSE scexpr [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 54
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 54:
## Known stack suffix:
## IF cexpr THEN expr
## LR(1) items:
sexpr -> IF cexpr THEN expr . list(e_elsif) ELSE scexpr [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On ELSIF shift to state 55
-- On list(e_elsif) shift to state 95
-- On e_elsif shift to state 104
## Reductions:
-- On ELSE
--   reduce production list(e_elsif) ->

State 55:
## Known stack suffix:
## ELSIF
## LR(1) items:
e_elsif -> ELSIF . expr THEN expr [ ELSIF ELSE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 56
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 56:
## Known stack suffix:
## ELSIF expr
## LR(1) items:
e_elsif -> ELSIF expr . THEN expr [ ELSIF ELSE ]
## Transitions:
-- On THEN shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## ELSIF expr THEN
## LR(1) items:
e_elsif -> ELSIF expr THEN . expr [ ELSIF ELSE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 58
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 58:
## Known stack suffix:
## ELSIF expr THEN expr
## LR(1) items:
e_elsif -> ELSIF expr THEN expr . [ ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production e_elsif -> ELSIF expr THEN expr

State 59:
## Known stack suffix:
## conditional_expression
## LR(1) items:
expr -> conditional_expression . [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> conditional_expression

State 60:
## Known stack suffix:
## cexpr
## LR(1) items:
conditional_expression -> cexpr . [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> cexpr

State 61:
## Known stack suffix:
## bexpr
## LR(1) items:
cexpr -> bexpr . list(factor) [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On STAR shift to state 62
-- On SLASH shift to state 63
-- On REM shift to state 64
-- On QUOT shift to state 65
-- On PLUS_PLUS shift to state 66
-- On PLUS shift to state 67
-- On OR shift to state 68
-- On MOD shift to state 69
-- On MINUS shift to state 70
-- On LT_LT shift to state 71
-- On LT_EQ shift to state 72
-- On LT shift to state 73
-- On IMPLIES shift to state 74
-- On IFF shift to state 75
-- On GT_GT shift to state 76
-- On GT_EQ shift to state 77
-- On GT shift to state 78
-- On EQ_EQ shift to state 79
-- On EOR shift to state 80
-- On DIV shift to state 81
-- On COLON shift to state 82
-- On CARET shift to state 83
-- On BAR_BAR shift to state 84
-- On BANG_EQ shift to state 85
-- On AND shift to state 86
-- On AMPERSAND_AMPERSAND shift to state 87
-- On list(factor) shift to state 88
-- On factor shift to state 89
-- On binop_or_concat shift to state 91
-- On binop shift to state 94
## Reductions:
-- On TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA
--   reduce production list(factor) ->

State 62:
## Known stack suffix:
## STAR
## LR(1) items:
binop -> STAR . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> STAR

State 63:
## Known stack suffix:
## SLASH
## LR(1) items:
binop -> SLASH . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> SLASH

State 64:
## Known stack suffix:
## REM
## LR(1) items:
binop -> REM . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> REM

State 65:
## Known stack suffix:
## QUOT
## LR(1) items:
binop -> QUOT . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> QUOT

State 66:
## Known stack suffix:
## PLUS_PLUS
## LR(1) items:
binop -> PLUS_PLUS . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> PLUS_PLUS

State 67:
## Known stack suffix:
## PLUS
## LR(1) items:
binop -> PLUS . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> PLUS

State 68:
## Known stack suffix:
## OR
## LR(1) items:
binop -> OR . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> OR

State 69:
## Known stack suffix:
## MOD
## LR(1) items:
binop -> MOD . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> MOD

State 70:
## Known stack suffix:
## MINUS
## LR(1) items:
binop -> MINUS . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> MINUS

State 71:
## Known stack suffix:
## LT_LT
## LR(1) items:
binop -> LT_LT . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> LT_LT

State 72:
## Known stack suffix:
## LT_EQ
## LR(1) items:
binop -> LT_EQ . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> LT_EQ

State 73:
## Known stack suffix:
## LT
## LR(1) items:
binop -> LT . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> LT

State 74:
## Known stack suffix:
## IMPLIES
## LR(1) items:
binop -> IMPLIES . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> IMPLIES

State 75:
## Known stack suffix:
## IFF
## LR(1) items:
binop -> IFF . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> IFF

State 76:
## Known stack suffix:
## GT_GT
## LR(1) items:
binop -> GT_GT . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> GT_GT

State 77:
## Known stack suffix:
## GT_EQ
## LR(1) items:
binop -> GT_EQ . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> GT_EQ

State 78:
## Known stack suffix:
## GT
## LR(1) items:
binop -> GT . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> GT

State 79:
## Known stack suffix:
## EQ_EQ
## LR(1) items:
binop -> EQ_EQ . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> EQ_EQ

State 80:
## Known stack suffix:
## EOR
## LR(1) items:
binop -> EOR . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> EOR

State 81:
## Known stack suffix:
## DIV
## LR(1) items:
binop -> DIV . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> DIV

State 82:
## Known stack suffix:
## COLON
## LR(1) items:
binop_or_concat -> COLON . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_or_concat -> COLON

State 83:
## Known stack suffix:
## CARET
## LR(1) items:
binop -> CARET . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> CARET

State 84:
## Known stack suffix:
## BAR_BAR
## LR(1) items:
binop -> BAR_BAR . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> BAR_BAR

State 85:
## Known stack suffix:
## BANG_EQ
## LR(1) items:
binop -> BANG_EQ . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> BANG_EQ

State 86:
## Known stack suffix:
## AND
## LR(1) items:
binop -> AND . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> AND

State 87:
## Known stack suffix:
## AMPERSAND_AMPERSAND
## LR(1) items:
binop -> AMPERSAND_AMPERSAND . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> AMPERSAND_AMPERSAND

State 88:
## Known stack suffix:
## bexpr list(factor)
## LR(1) items:
cexpr -> bexpr list(factor) . [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> bexpr list(factor)

State 89:
## Known stack suffix:
## factor
## LR(1) items:
list(factor) -> factor . list(factor) [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On STAR shift to state 62
-- On SLASH shift to state 63
-- On REM shift to state 64
-- On QUOT shift to state 65
-- On PLUS_PLUS shift to state 66
-- On PLUS shift to state 67
-- On OR shift to state 68
-- On MOD shift to state 69
-- On MINUS shift to state 70
-- On LT_LT shift to state 71
-- On LT_EQ shift to state 72
-- On LT shift to state 73
-- On IMPLIES shift to state 74
-- On IFF shift to state 75
-- On GT_GT shift to state 76
-- On GT_EQ shift to state 77
-- On GT shift to state 78
-- On EQ_EQ shift to state 79
-- On EOR shift to state 80
-- On DIV shift to state 81
-- On COLON shift to state 82
-- On CARET shift to state 83
-- On BAR_BAR shift to state 84
-- On BANG_EQ shift to state 85
-- On AND shift to state 86
-- On AMPERSAND_AMPERSAND shift to state 87
-- On list(factor) shift to state 90
-- On factor shift to state 89
-- On binop_or_concat shift to state 91
-- On binop shift to state 94
## Reductions:
-- On TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA
--   reduce production list(factor) ->

State 90:
## Known stack suffix:
## factor list(factor)
## LR(1) items:
list(factor) -> factor list(factor) . [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(factor) -> factor list(factor)

State 91:
## Known stack suffix:
## binop_or_concat
## LR(1) items:
factor -> binop_or_concat . bexpr [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 92
-- On aexpr shift to state 93
## Reductions:

State 92:
## Known stack suffix:
## binop_or_concat bexpr
## LR(1) items:
factor -> binop_or_concat bexpr . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production factor -> binop_or_concat bexpr

State 93:
## Known stack suffix:
## aexpr
## LR(1) items:
fexpr -> aexpr . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fexpr -> aexpr

State 94:
## Known stack suffix:
## binop
## LR(1) items:
binop_or_concat -> binop . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_or_concat -> binop

State 95:
## Known stack suffix:
## IF cexpr THEN expr list(e_elsif)
## LR(1) items:
sexpr -> IF cexpr THEN expr list(e_elsif) . ELSE scexpr [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On ELSE shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## IF cexpr THEN expr list(e_elsif) ELSE
## LR(1) items:
sexpr -> IF cexpr THEN expr list(e_elsif) ELSE . scexpr [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On scexpr shift to state 97
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:

State 97:
## Known stack suffix:
## IF cexpr THEN expr list(e_elsif) ELSE scexpr
## LR(1) items:
sexpr -> IF cexpr THEN expr list(e_elsif) ELSE scexpr . [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sexpr -> IF cexpr THEN expr list(e_elsif) ELSE scexpr

State 98:
## Known stack suffix:
## bexpr
## LR(1) items:
scexpr -> bexpr . list(sfactor) [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On STAR shift to state 62
-- On SLASH shift to state 63
-- On REM shift to state 64
-- On QUOT shift to state 65
-- On PLUS_PLUS shift to state 66
-- On PLUS shift to state 67
-- On OR shift to state 68
-- On MOD shift to state 69
-- On MINUS shift to state 70
-- On LT_LT shift to state 71
-- On LT_EQ shift to state 72
-- On LT shift to state 73
-- On IMPLIES shift to state 74
-- On IFF shift to state 75
-- On GT_GT shift to state 76
-- On GT_EQ shift to state 77
-- On GT shift to state 78
-- On EQ_EQ shift to state 79
-- On EOR shift to state 80
-- On DIV shift to state 81
-- On CARET shift to state 83
-- On BAR_BAR shift to state 84
-- On BANG_EQ shift to state 85
-- On AND shift to state 86
-- On AMPERSAND_AMPERSAND shift to state 87
-- On sfactor shift to state 99
-- On list(sfactor) shift to state 103
-- On binop shift to state 101
## Reductions:
-- On RBRACK PLUS_COLON ID COMMA COLON
--   reduce production list(sfactor) ->

State 99:
## Known stack suffix:
## sfactor
## LR(1) items:
list(sfactor) -> sfactor . list(sfactor) [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
-- On STAR shift to state 62
-- On SLASH shift to state 63
-- On REM shift to state 64
-- On QUOT shift to state 65
-- On PLUS_PLUS shift to state 66
-- On PLUS shift to state 67
-- On OR shift to state 68
-- On MOD shift to state 69
-- On MINUS shift to state 70
-- On LT_LT shift to state 71
-- On LT_EQ shift to state 72
-- On LT shift to state 73
-- On IMPLIES shift to state 74
-- On IFF shift to state 75
-- On GT_GT shift to state 76
-- On GT_EQ shift to state 77
-- On GT shift to state 78
-- On EQ_EQ shift to state 79
-- On EOR shift to state 80
-- On DIV shift to state 81
-- On CARET shift to state 83
-- On BAR_BAR shift to state 84
-- On BANG_EQ shift to state 85
-- On AND shift to state 86
-- On AMPERSAND_AMPERSAND shift to state 87
-- On sfactor shift to state 99
-- On list(sfactor) shift to state 100
-- On binop shift to state 101
## Reductions:
-- On RBRACK PLUS_COLON ID COMMA COLON
--   reduce production list(sfactor) ->

State 100:
## Known stack suffix:
## sfactor list(sfactor)
## LR(1) items:
list(sfactor) -> sfactor list(sfactor) . [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(sfactor) -> sfactor list(sfactor)

State 101:
## Known stack suffix:
## binop
## LR(1) items:
sfactor -> binop . bexpr [ STAR SLASH REM RBRACK QUOT PLUS_PLUS PLUS_COLON PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_EQ EOR DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 102
-- On aexpr shift to state 93
## Reductions:

State 102:
## Known stack suffix:
## binop bexpr
## LR(1) items:
sfactor -> binop bexpr . [ STAR SLASH REM RBRACK QUOT PLUS_PLUS PLUS_COLON PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_EQ EOR DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sfactor -> binop bexpr

State 103:
## Known stack suffix:
## bexpr list(sfactor)
## LR(1) items:
scexpr -> bexpr list(sfactor) . [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scexpr -> bexpr list(sfactor)

State 104:
## Known stack suffix:
## e_elsif
## LR(1) items:
list(e_elsif) -> e_elsif . list(e_elsif) [ ELSE ]
## Transitions:
-- On ELSIF shift to state 55
-- On list(e_elsif) shift to state 105
-- On e_elsif shift to state 104
## Reductions:
-- On ELSE
--   reduce production list(e_elsif) ->

State 105:
## Known stack suffix:
## e_elsif list(e_elsif)
## LR(1) items:
list(e_elsif) -> e_elsif list(e_elsif) . [ ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(e_elsif) -> e_elsif list(e_elsif)

State 106:
## Known stack suffix:
## slice
## LR(1) items:
separated_nonempty_list(COMMA,slice) -> slice . [ RBRACK ID ]
separated_nonempty_list(COMMA,slice) -> slice . COMMA separated_nonempty_list(COMMA,slice) [ RBRACK ID ]
## Transitions:
-- On COMMA shift to state 107
## Reductions:
-- On RBRACK ID
--   reduce production separated_nonempty_list(COMMA,slice) -> slice

State 107:
## Known stack suffix:
## slice COMMA
## LR(1) items:
separated_nonempty_list(COMMA,slice) -> slice COMMA . separated_nonempty_list(COMMA,slice) [ RBRACK ID ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On slice shift to state 106
-- On sexpr shift to state 108
-- On separated_nonempty_list(COMMA,slice) shift to state 114
-- On scexpr shift to state 111
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:

State 108:
## Known stack suffix:
## sexpr
## LR(1) items:
slice -> sexpr . [ RBRACK ID COMMA ]
slice -> sexpr . COLON sexpr [ RBRACK ID COMMA ]
slice -> sexpr . PLUS_COLON sexpr [ RBRACK ID COMMA ]
## Transitions:
-- On PLUS_COLON shift to state 109
-- On COLON shift to state 112
## Reductions:
-- On RBRACK ID COMMA
--   reduce production slice -> sexpr

State 109:
## Known stack suffix:
## sexpr PLUS_COLON
## LR(1) items:
slice -> sexpr PLUS_COLON . sexpr [ RBRACK ID COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On sexpr shift to state 110
-- On scexpr shift to state 111
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:

State 110:
## Known stack suffix:
## sexpr PLUS_COLON sexpr
## LR(1) items:
slice -> sexpr PLUS_COLON sexpr . [ RBRACK ID COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production slice -> sexpr PLUS_COLON sexpr

State 111:
## Known stack suffix:
## scexpr
## LR(1) items:
sexpr -> scexpr . [ RBRACK PLUS_COLON ID COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sexpr -> scexpr

State 112:
## Known stack suffix:
## sexpr COLON
## LR(1) items:
slice -> sexpr COLON . sexpr [ RBRACK ID COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On sexpr shift to state 113
-- On scexpr shift to state 111
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:

State 113:
## Known stack suffix:
## sexpr COLON sexpr
## LR(1) items:
slice -> sexpr COLON sexpr . [ RBRACK ID COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production slice -> sexpr COLON sexpr

State 114:
## Known stack suffix:
## slice COMMA separated_nonempty_list(COMMA,slice)
## LR(1) items:
separated_nonempty_list(COMMA,slice) -> slice COMMA separated_nonempty_list(COMMA,slice) . [ RBRACK ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,slice) -> slice COMMA separated_nonempty_list(COMMA,slice)

State 115:
## Known stack suffix:
## separated_nonempty_list(COMMA,slice)
## LR(1) items:
loption(separated_nonempty_list(COMMA,slice)) -> separated_nonempty_list(COMMA,slice) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,slice)) -> separated_nonempty_list(COMMA,slice)

State 116:
## Known stack suffix:
## fexpr LBRACK loption(separated_nonempty_list(COMMA,slice))
## LR(1) items:
fexpr -> fexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) . RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On RBRACK shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## fexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK
## LR(1) items:
fexpr -> fexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fexpr -> fexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK

State 118:
## Known stack suffix:
## fexpr IN
## LR(1) items:
fexpr -> fexpr IN . pattern [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 121
-- On MASKLIT shift to state 122
-- On LPAREN shift to state 123
-- On LBRACE shift to state 124
-- On INTLIT shift to state 134
-- On ID shift to state 13
-- On HEXLIT shift to state 135
-- On BITSLIT shift to state 136
-- On qualident shift to state 139
-- On pattern shift to state 144
-- On ident shift to state 48
## Reductions:

State 119:
## Known stack suffix:
## QUALIFIER
## LR(1) items:
qualident -> QUALIFIER . DOT ident [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On DOT shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## QUALIFIER DOT
## LR(1) items:
qualident -> QUALIFIER DOT . ident [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 15
## Reductions:

State 121:
## Known stack suffix:
## MINUS
## LR(1) items:
pattern -> MINUS . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> MINUS

State 122:
## Known stack suffix:
## MASKLIT
## LR(1) items:
pattern -> MASKLIT . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> MASKLIT

State 123:
## Known stack suffix:
## LPAREN
## LR(1) items:
pattern -> LPAREN . separated_nonempty2_list(COMMA,pattern) RPAREN [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 121
-- On MASKLIT shift to state 122
-- On LPAREN shift to state 123
-- On LBRACE shift to state 124
-- On INTLIT shift to state 134
-- On ID shift to state 13
-- On HEXLIT shift to state 135
-- On BITSLIT shift to state 136
-- On separated_nonempty2_list(COMMA,pattern) shift to state 137
-- On qualident shift to state 139
-- On pattern shift to state 140
-- On ident shift to state 48
## Reductions:

State 124:
## Known stack suffix:
## LBRACE
## LR(1) items:
pattern -> LBRACE . loption(separated_nonempty_list(COMMA,apattern)) RBRACE [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,apattern) shift to state 125
-- On qualident shift to state 42
-- On loption(separated_nonempty_list(COMMA,apattern)) shift to state 126
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 128
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On apattern shift to state 131
-- On aexpr shift to state 93
## Reductions:
-- On RBRACE
--   reduce production loption(separated_nonempty_list(COMMA,apattern)) ->

State 125:
## Known stack suffix:
## separated_nonempty_list(COMMA,apattern)
## LR(1) items:
loption(separated_nonempty_list(COMMA,apattern)) -> separated_nonempty_list(COMMA,apattern) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,apattern)) -> separated_nonempty_list(COMMA,apattern)

State 126:
## Known stack suffix:
## LBRACE loption(separated_nonempty_list(COMMA,apattern))
## LR(1) items:
pattern -> LBRACE loption(separated_nonempty_list(COMMA,apattern)) . RBRACE [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On RBRACE shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## LBRACE loption(separated_nonempty_list(COMMA,apattern)) RBRACE
## LR(1) items:
pattern -> LBRACE loption(separated_nonempty_list(COMMA,apattern)) RBRACE . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> LBRACE loption(separated_nonempty_list(COMMA,apattern)) RBRACE

State 128:
## Known stack suffix:
## expr
## LR(1) items:
apattern -> expr . DOT_DOT expr [ RBRACE COMMA ]
apattern -> expr . [ RBRACE COMMA ]
## Transitions:
-- On DOT_DOT shift to state 129
## Reductions:
-- On RBRACE COMMA
--   reduce production apattern -> expr

State 129:
## Known stack suffix:
## expr DOT_DOT
## LR(1) items:
apattern -> expr DOT_DOT . expr [ RBRACE COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 130
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 130:
## Known stack suffix:
## expr DOT_DOT expr
## LR(1) items:
apattern -> expr DOT_DOT expr . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apattern -> expr DOT_DOT expr

State 131:
## Known stack suffix:
## apattern
## LR(1) items:
separated_nonempty_list(COMMA,apattern) -> apattern . [ RBRACE ]
separated_nonempty_list(COMMA,apattern) -> apattern . COMMA separated_nonempty_list(COMMA,apattern) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 132
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,apattern) -> apattern

State 132:
## Known stack suffix:
## apattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,apattern) -> apattern COMMA . separated_nonempty_list(COMMA,apattern) [ RBRACE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,apattern) shift to state 133
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 128
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On apattern shift to state 131
-- On aexpr shift to state 93
## Reductions:

State 133:
## Known stack suffix:
## apattern COMMA separated_nonempty_list(COMMA,apattern)
## LR(1) items:
separated_nonempty_list(COMMA,apattern) -> apattern COMMA separated_nonempty_list(COMMA,apattern) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,apattern) -> apattern COMMA separated_nonempty_list(COMMA,apattern)

State 134:
## Known stack suffix:
## INTLIT
## LR(1) items:
pattern -> INTLIT . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> INTLIT

State 135:
## Known stack suffix:
## HEXLIT
## LR(1) items:
pattern -> HEXLIT . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> HEXLIT

State 136:
## Known stack suffix:
## BITSLIT
## LR(1) items:
pattern -> BITSLIT . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> BITSLIT

State 137:
## Known stack suffix:
## LPAREN separated_nonempty2_list(COMMA,pattern)
## LR(1) items:
pattern -> LPAREN separated_nonempty2_list(COMMA,pattern) . RPAREN [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LPAREN separated_nonempty2_list(COMMA,pattern) RPAREN
## LR(1) items:
pattern -> LPAREN separated_nonempty2_list(COMMA,pattern) RPAREN . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> LPAREN separated_nonempty2_list(COMMA,pattern) RPAREN

State 139:
## Known stack suffix:
## qualident
## LR(1) items:
pattern -> qualident . [ WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> qualident

State 140:
## Known stack suffix:
## pattern
## LR(1) items:
separated_nonempty2_list(COMMA,pattern) -> pattern . COMMA pattern [ RPAREN ]
separated_nonempty2_list(COMMA,pattern) -> pattern . COMMA separated_nonempty2_list(COMMA,pattern) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
separated_nonempty2_list(COMMA,pattern) -> pattern COMMA . pattern [ RPAREN ]
separated_nonempty2_list(COMMA,pattern) -> pattern COMMA . separated_nonempty2_list(COMMA,pattern) [ RPAREN ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 121
-- On MASKLIT shift to state 122
-- On LPAREN shift to state 123
-- On LBRACE shift to state 124
-- On INTLIT shift to state 134
-- On ID shift to state 13
-- On HEXLIT shift to state 135
-- On BITSLIT shift to state 136
-- On separated_nonempty2_list(COMMA,pattern) shift to state 142
-- On qualident shift to state 139
-- On pattern shift to state 143
-- On ident shift to state 48
## Reductions:

State 142:
## Known stack suffix:
## pattern COMMA separated_nonempty2_list(COMMA,pattern)
## LR(1) items:
separated_nonempty2_list(COMMA,pattern) -> pattern COMMA separated_nonempty2_list(COMMA,pattern) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty2_list(COMMA,pattern) -> pattern COMMA separated_nonempty2_list(COMMA,pattern)

State 143:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
separated_nonempty2_list(COMMA,pattern) -> pattern . COMMA pattern [ RPAREN ]
separated_nonempty2_list(COMMA,pattern) -> pattern COMMA pattern . [ RPAREN ]
separated_nonempty2_list(COMMA,pattern) -> pattern . COMMA separated_nonempty2_list(COMMA,pattern) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 141
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty2_list(COMMA,pattern) -> pattern COMMA pattern

State 144:
## Known stack suffix:
## fexpr IN pattern
## LR(1) items:
fexpr -> fexpr IN pattern . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fexpr -> fexpr IN pattern

State 145:
## Known stack suffix:
## fexpr DOT
## LR(1) items:
fexpr -> fexpr DOT . ident [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr DOT . LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On LBRACK shift to state 146
-- On ID shift to state 13
-- On ident shift to state 152
## Reductions:

State 146:
## Known stack suffix:
## fexpr DOT LBRACK
## LR(1) items:
fexpr -> fexpr DOT LBRACK . separated_nonempty_list(COMMA,ident) RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,ident) shift to state 147
-- On ident shift to state 149
## Reductions:

State 147:
## Known stack suffix:
## fexpr DOT LBRACK separated_nonempty_list(COMMA,ident)
## LR(1) items:
fexpr -> fexpr DOT LBRACK separated_nonempty_list(COMMA,ident) . RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On RBRACK shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## fexpr DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK
## LR(1) items:
fexpr -> fexpr DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fexpr -> fexpr DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK

State 149:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident . [ SEMICOLON RBRACK RBRACE ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ SEMICOLON RBRACK RBRACE ]
## Transitions:
-- On COMMA shift to state 150
## Reductions:
-- On SEMICOLON RBRACK RBRACE
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 150:
## Known stack suffix:
## ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ SEMICOLON RBRACK RBRACE ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,ident) shift to state 151
-- On ident shift to state 149
## Reductions:

State 151:
## Known stack suffix:
## ident COMMA separated_nonempty_list(COMMA,ident)
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ SEMICOLON RBRACK RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident)

State 152:
## Known stack suffix:
## fexpr DOT ident
## LR(1) items:
fexpr -> fexpr DOT ident . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fexpr -> fexpr DOT ident

State 153:
## Known stack suffix:
## expr
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 154
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 154:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,expr) shift to state 155
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 153
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 155:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 156:
## Known stack suffix:
## unop fexpr
## LR(1) items:
bexpr -> unop fexpr . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . DOT ident [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
fexpr -> fexpr . IN pattern [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On LBRACK shift to state 50
-- On IN shift to state 118
-- On DOT shift to state 145
## Reductions:
-- On TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
--   reduce production bexpr -> unop fexpr

State 157:
## Known stack suffix:
## tident
## LR(1) items:
ixtype -> tident . [ RBRACK ]
ty -> tident . [ UNKNOWN IMPLEMENTATION_UNDERSCORE_DEFINED ]
ty -> tident . LPAREN separated_nonempty_list(COMMA,expr) RPAREN [ UNKNOWN IMPLEMENTATION_UNDERSCORE_DEFINED ]
## Transitions:
-- On LPAREN shift to state 39
## Reductions:
-- On RBRACK
--   reduce production ixtype -> tident
-- On UNKNOWN IMPLEMENTATION_UNDERSCORE_DEFINED
--   reduce production ty -> tident

State 158:
## Known stack suffix:
## ARRAY LBRACK ixtype
## LR(1) items:
ty -> ARRAY LBRACK ixtype . RBRACK OF ty [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On RBRACK shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## ARRAY LBRACK ixtype RBRACK
## LR(1) items:
ty -> ARRAY LBRACK ixtype RBRACK . OF ty [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On OF shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## ARRAY LBRACK ixtype RBRACK OF
## LR(1) items:
ty -> ARRAY LBRACK ixtype RBRACK OF . ty [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 170
-- On tident shift to state 38
## Reductions:

State 161:
## Known stack suffix:
## QUALIFIER
## LR(1) items:
tident -> QUALIFIER . DOT typeident [ UNKNOWN SEMICOLON RPAREN QUALIFIER LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On DOT shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## QUALIFIER DOT
## LR(1) items:
tident -> QUALIFIER DOT . typeident [ UNKNOWN SEMICOLON RPAREN QUALIFIER LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On TYPEID shift to state 8
-- On typeident shift to state 14
## Reductions:

State 163:
## Known stack suffix:
## LPAREN
## LR(1) items:
ty -> LPAREN . loption(separated_nonempty_list(COMMA,ty)) RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 164
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,ty) shift to state 167
-- On loption(separated_nonempty_list(COMMA,ty)) shift to state 168
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,ty)) ->

State 164:
## Known stack suffix:
## ty
## LR(1) items:
separated_nonempty_list(COMMA,ty) -> ty . [ RPAREN ]
separated_nonempty_list(COMMA,ty) -> ty . COMMA separated_nonempty_list(COMMA,ty) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 165
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,ty) -> ty

State 165:
## Known stack suffix:
## ty COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ty) -> ty COMMA . separated_nonempty_list(COMMA,ty) [ RPAREN ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 164
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,ty) shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## ty COMMA separated_nonempty_list(COMMA,ty)
## LR(1) items:
separated_nonempty_list(COMMA,ty) -> ty COMMA separated_nonempty_list(COMMA,ty) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,ty) -> ty COMMA separated_nonempty_list(COMMA,ty)

State 167:
## Known stack suffix:
## separated_nonempty_list(COMMA,ty)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ty)) -> separated_nonempty_list(COMMA,ty) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,ty)) -> separated_nonempty_list(COMMA,ty)

State 168:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,ty))
## LR(1) items:
ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) . RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) RPAREN
## LR(1) items:
ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) RPAREN . [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) RPAREN

State 170:
## Known stack suffix:
## ARRAY LBRACK ixtype RBRACK OF ty
## LR(1) items:
ty -> ARRAY LBRACK ixtype RBRACK OF ty . [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> ARRAY LBRACK ixtype RBRACK OF ty

State 171:
## Known stack suffix:
## expr
## LR(1) items:
ixtype -> expr . DOT_DOT expr [ RBRACK ]
## Transitions:
-- On DOT_DOT shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## expr DOT_DOT
## LR(1) items:
ixtype -> expr DOT_DOT . expr [ RBRACK ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 173
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 173:
## Known stack suffix:
## expr DOT_DOT expr
## LR(1) items:
ixtype -> expr DOT_DOT expr . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ixtype -> expr DOT_DOT expr

State 174:
## Known stack suffix:
## BITS LPAREN expr
## LR(1) items:
ty -> BITS LPAREN expr . RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## BITS LPAREN expr RPAREN
## LR(1) items:
ty -> BITS LPAREN expr RPAREN . [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> BITS LPAREN expr RPAREN

State 176:
## Known stack suffix:
## IF cexpr
## LR(1) items:
conditional_expression -> IF cexpr . THEN expr list(e_elsif) ELSE expr [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On THEN shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## IF cexpr THEN
## LR(1) items:
conditional_expression -> IF cexpr THEN . expr list(e_elsif) ELSE expr [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 178
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 178:
## Known stack suffix:
## IF cexpr THEN expr
## LR(1) items:
conditional_expression -> IF cexpr THEN expr . list(e_elsif) ELSE expr [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On ELSIF shift to state 55
-- On list(e_elsif) shift to state 179
-- On e_elsif shift to state 104
## Reductions:
-- On ELSE
--   reduce production list(e_elsif) ->

State 179:
## Known stack suffix:
## IF cexpr THEN expr list(e_elsif)
## LR(1) items:
conditional_expression -> IF cexpr THEN expr list(e_elsif) . ELSE expr [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On ELSE shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## IF cexpr THEN expr list(e_elsif) ELSE
## LR(1) items:
conditional_expression -> IF cexpr THEN expr list(e_elsif) ELSE . expr [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 181
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 181:
## Known stack suffix:
## IF cexpr THEN expr list(e_elsif) ELSE expr
## LR(1) items:
conditional_expression -> IF cexpr THEN expr list(e_elsif) ELSE expr . [ TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> IF cexpr THEN expr list(e_elsif) ELSE expr

State 182:
## Known stack suffix:
## ty
## LR(1) items:
aexpr -> ty . UNKNOWN [ STAR SLASH RPAREN REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DOT DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
aexpr -> ty . IMPLEMENTATION_UNDERSCORE_DEFINED opt_stringLit [ STAR SLASH RPAREN REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DOT DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
separated_nonempty_list(COMMA,ty) -> ty . [ RPAREN ]
separated_nonempty_list(COMMA,ty) -> ty . COMMA separated_nonempty_list(COMMA,ty) [ RPAREN ]
## Transitions:
-- On UNKNOWN shift to state 34
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 35
-- On COMMA shift to state 165
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,ty) -> ty

State 183:
## Known stack suffix:
## LPAREN separated_nonempty2_list(COMMA,expr)
## LR(1) items:
aexpr -> LPAREN separated_nonempty2_list(COMMA,expr) . RPAREN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## LPAREN separated_nonempty2_list(COMMA,expr) RPAREN
## LR(1) items:
aexpr -> LPAREN separated_nonempty2_list(COMMA,expr) RPAREN . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexpr -> LPAREN separated_nonempty2_list(COMMA,expr) RPAREN

State 185:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
aexpr -> LPAREN expr . RPAREN [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
separated_nonempty2_list(COMMA,expr) -> expr . COMMA expr [ RPAREN ]
separated_nonempty2_list(COMMA,expr) -> expr . COMMA separated_nonempty2_list(COMMA,expr) [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 186
-- On COMMA shift to state 187
## Reductions:

State 186:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
aexpr -> LPAREN expr RPAREN . [ TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexpr -> LPAREN expr RPAREN

State 187:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty2_list(COMMA,expr) -> expr COMMA . expr [ RPAREN ]
separated_nonempty2_list(COMMA,expr) -> expr COMMA . separated_nonempty2_list(COMMA,expr) [ RPAREN ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On separated_nonempty2_list(COMMA,expr) shift to state 188
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 189
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 188:
## Known stack suffix:
## expr COMMA separated_nonempty2_list(COMMA,expr)
## LR(1) items:
separated_nonempty2_list(COMMA,expr) -> expr COMMA separated_nonempty2_list(COMMA,expr) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty2_list(COMMA,expr) -> expr COMMA separated_nonempty2_list(COMMA,expr)

State 189:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
separated_nonempty2_list(COMMA,expr) -> expr . COMMA expr [ RPAREN ]
separated_nonempty2_list(COMMA,expr) -> expr COMMA expr . [ RPAREN ]
separated_nonempty2_list(COMMA,expr) -> expr . COMMA separated_nonempty2_list(COMMA,expr) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 187
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty2_list(COMMA,expr) -> expr COMMA expr

State 190:
## Known stack suffix:
## TYPEOF LPAREN expr
## LR(1) items:
ty -> TYPEOF LPAREN expr . RPAREN [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## TYPEOF LPAREN expr RPAREN
## LR(1) items:
ty -> TYPEOF LPAREN expr RPAREN . [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> TYPEOF LPAREN expr RPAREN

State 192:
## Known stack suffix:
## separated_nonempty_list(COMMA,slice)
## LR(1) items:
regfield -> separated_nonempty_list(COMMA,slice) . ident [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT RBRACE QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT COMMA BITSLIT BITS BANG ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## separated_nonempty_list(COMMA,slice) ident
## LR(1) items:
regfield -> separated_nonempty_list(COMMA,slice) ident . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT RBRACE QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT COMMA BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regfield -> separated_nonempty_list(COMMA,slice) ident

State 194:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_REGISTER INTLIT LBRACE regfields
## LR(1) items:
ty -> UNDERSCORE_UNDERSCORE_REGISTER INTLIT LBRACE regfields . RBRACE [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
-- On RBRACE shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_REGISTER INTLIT LBRACE regfields RBRACE
## LR(1) items:
ty -> UNDERSCORE_UNDERSCORE_REGISTER INTLIT LBRACE regfields RBRACE . [ UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> UNDERSCORE_UNDERSCORE_REGISTER INTLIT LBRACE regfields RBRACE

State 196:
## Known stack suffix:
## regfield
## LR(1) items:
list(regfield) -> regfield . list(regfield) [ RBRACE ]
regfields -> regfield . COMMA regfields [ RBRACE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On COMMA shift to state 197
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On slice shift to state 106
-- On sexpr shift to state 108
-- On separated_nonempty_list(COMMA,slice) shift to state 192
-- On scexpr shift to state 111
-- On regfield shift to state 200
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On list(regfield) shift to state 201
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:
-- On RBRACE
--   reduce production list(regfield) ->

State 197:
## Known stack suffix:
## regfield COMMA
## LR(1) items:
regfields -> regfield COMMA . regfields [ RBRACE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On slice shift to state 106
-- On sexpr shift to state 108
-- On separated_nonempty_list(COMMA,slice) shift to state 192
-- On scexpr shift to state 111
-- On regfields shift to state 198
-- On regfield shift to state 196
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On list(regfield) shift to state 199
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:
-- On RBRACE
--   reduce production list(regfield) ->

State 198:
## Known stack suffix:
## regfield COMMA regfields
## LR(1) items:
regfields -> regfield COMMA regfields . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regfields -> regfield COMMA regfields

State 199:
## Known stack suffix:
## list(regfield)
## LR(1) items:
regfields -> list(regfield) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regfields -> list(regfield)

State 200:
## Known stack suffix:
## regfield
## LR(1) items:
list(regfield) -> regfield . list(regfield) [ RBRACE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On slice shift to state 106
-- On sexpr shift to state 108
-- On separated_nonempty_list(COMMA,slice) shift to state 192
-- On scexpr shift to state 111
-- On regfield shift to state 200
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On list(regfield) shift to state 201
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:
-- On RBRACE
--   reduce production list(regfield) ->

State 201:
## Known stack suffix:
## regfield list(regfield)
## LR(1) items:
list(regfield) -> regfield list(regfield) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(regfield) -> regfield list(regfield)

State 202:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_TWO
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_TWO . binop_or_concat EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On STAR shift to state 62
-- On SLASH shift to state 63
-- On REM shift to state 64
-- On QUOT shift to state 65
-- On PLUS_PLUS shift to state 66
-- On PLUS shift to state 67
-- On OR shift to state 68
-- On MOD shift to state 69
-- On MINUS shift to state 70
-- On LT_LT shift to state 71
-- On LT_EQ shift to state 72
-- On LT shift to state 73
-- On IMPLIES shift to state 74
-- On IFF shift to state 75
-- On GT_GT shift to state 76
-- On GT_EQ shift to state 77
-- On GT shift to state 78
-- On EQ_EQ shift to state 79
-- On EOR shift to state 80
-- On DIV shift to state 81
-- On COLON shift to state 82
-- On CARET shift to state 83
-- On BAR_BAR shift to state 84
-- On BANG_EQ shift to state 85
-- On AND shift to state 86
-- On AMPERSAND_AMPERSAND shift to state 87
-- On binop_or_concat shift to state 203
-- On binop shift to state 94
## Reductions:

State 203:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat . EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EQ shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ . separated_nonempty_list(COMMA,ident) SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,ident) shift to state 205
-- On ident shift to state 149
## Reductions:

State 205:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ separated_nonempty_list(COMMA,ident)
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ separated_nonempty_list(COMMA,ident) . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ separated_nonempty_list(COMMA,ident) SEMICOLON
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ separated_nonempty_list(COMMA,ident) SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_TWO binop_or_concat EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL

State 208:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_ONE
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_ONE . unop EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On BANG shift to state 28
-- On unop shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop . EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EQ shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ . separated_nonempty_list(COMMA,ident) SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,ident) shift to state 211
-- On ident shift to state 149
## Reductions:

State 211:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ separated_nonempty_list(COMMA,ident)
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ separated_nonempty_list(COMMA,ident) . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ separated_nonempty_list(COMMA,ident) SEMICOLON
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ separated_nonempty_list(COMMA,ident) SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_definition -> UNDERSCORE_UNDERSCORE_OPERATOR_ONE unop EQ separated_nonempty_list(COMMA,ident) SEMICOLON EOL

State 214:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWMAP
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP . ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 215
-- On tident shift to state 38
## Reductions:

State 215:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWMAP ty
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP ty . qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 216
-- On ident shift to state 48
## Reductions:

State 216:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWMAP ty qualident
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP ty qualident . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LPAREN shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 218
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,formal) shift to state 220
-- On loption(separated_nonempty_list(COMMA,formal)) shift to state 221
-- On formal shift to state 435
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,formal)) ->

State 218:
## Known stack suffix:
## ty
## LR(1) items:
formal -> ty . ident [ RPAREN RBRACK COMMA ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## ty ident
## LR(1) items:
formal -> ty ident . [ RPAREN RBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal -> ty ident

State 220:
## Known stack suffix:
## separated_nonempty_list(COMMA,formal)
## LR(1) items:
loption(separated_nonempty_list(COMMA,formal)) -> separated_nonempty_list(COMMA,formal) . [ RPAREN RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,formal)) -> separated_nonempty_list(COMMA,formal)

State 221:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal))
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) . RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RPAREN shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 223
-- On opt_indented_block shift to state 434
-- On indented_block shift to state 257
## Reductions:

State 223:
## Known stack suffix:
## EOL
## LR(1) items:
indented_block -> EOL . INDENT nonempty_list(stmts) DEDENT [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
opt_indented_block -> EOL . [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On INDENT shift to state 224
## Reductions:
-- On WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
--   reduce production opt_indented_block -> EOL

State 224:
## Known stack suffix:
## EOL INDENT
## LR(1) items:
indented_block -> EOL INDENT . nonempty_list(stmts) DEDENT [ WHILE WHEN UNTIL UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CATCH CASE BITS ASSERT ARRAY ]
## Transitions:
-- On WHILE shift to state 225
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On TRY shift to state 248
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On REPEAT shift to state 364
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On IF shift to state 370
-- On ID shift to state 13
-- On FOR shift to state 394
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On CASE shift to state 403
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On stmts shift to state 425
-- On simple_stmts shift to state 426
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On repetitive_stmt shift to state 427
-- On qualident shift to state 337
-- On nonempty_list(stmts) shift to state 432
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On conditional_stmt shift to state 429
-- On compound_stmt shift to state 430
-- On catch_stmt shift to state 431
-- On assignment_stmt shift to state 347
## Reductions:

State 225:
## Known stack suffix:
## WHILE
## LR(1) items:
repetitive_stmt -> WHILE . expr DO indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 226
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 226:
## Known stack suffix:
## WHILE expr
## LR(1) items:
repetitive_stmt -> WHILE expr . DO indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On DO shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
repetitive_stmt -> WHILE expr DO . indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 228
-- On indented_block shift to state 229
## Reductions:

State 228:
## Known stack suffix:
## EOL
## LR(1) items:
indented_block -> EOL . INDENT nonempty_list(stmts) DEDENT [ WHILE UNTIL UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CATCH CASE BITS ASSERT ARRAY ]
## Transitions:
-- On INDENT shift to state 224
## Reductions:

State 229:
## Known stack suffix:
## WHILE expr DO indented_block
## LR(1) items:
repetitive_stmt -> WHILE expr DO indented_block . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production repetitive_stmt -> WHILE expr DO indented_block

State 230:
## Known stack suffix:
## UNPREDICTABLE
## LR(1) items:
simple_stmt -> UNPREDICTABLE . LPAREN RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
simple_stmt -> UNPREDICTABLE . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 231
-- On LPAREN shift to state 232
## Reductions:

State 231:
## Known stack suffix:
## UNPREDICTABLE SEMICOLON
## LR(1) items:
simple_stmt -> UNPREDICTABLE SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> UNPREDICTABLE SEMICOLON

State 232:
## Known stack suffix:
## UNPREDICTABLE LPAREN
## LR(1) items:
simple_stmt -> UNPREDICTABLE LPAREN . RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On RPAREN shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## UNPREDICTABLE LPAREN RPAREN
## LR(1) items:
simple_stmt -> UNPREDICTABLE LPAREN RPAREN . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## UNPREDICTABLE LPAREN RPAREN SEMICOLON
## LR(1) items:
simple_stmt -> UNPREDICTABLE LPAREN RPAREN SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> UNPREDICTABLE LPAREN RPAREN SEMICOLON

State 235:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN . LPAREN RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On LPAREN shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN LPAREN
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN LPAREN . RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On RPAREN shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN LPAREN RPAREN
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN LPAREN RPAREN . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN LPAREN RPAREN SEMICOLON
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN LPAREN RPAREN SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN LPAREN RPAREN SEMICOLON

State 239:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_DECODE . ident expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_DECODE ident . expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 241
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 241:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident expr
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_DECODE ident expr . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident expr SEMICOLON
## LR(1) items:
simple_stmt -> UNDERSCORE_UNDERSCORE_DECODE ident expr SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> UNDERSCORE_UNDERSCORE_DECODE ident expr SEMICOLON

State 243:
## Known stack suffix:
## UNDEFINED
## LR(1) items:
simple_stmt -> UNDEFINED . LPAREN RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
simple_stmt -> UNDEFINED . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 244
-- On LPAREN shift to state 245
## Reductions:

State 244:
## Known stack suffix:
## UNDEFINED SEMICOLON
## LR(1) items:
simple_stmt -> UNDEFINED SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> UNDEFINED SEMICOLON

State 245:
## Known stack suffix:
## UNDEFINED LPAREN
## LR(1) items:
simple_stmt -> UNDEFINED LPAREN . RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On RPAREN shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## UNDEFINED LPAREN RPAREN
## LR(1) items:
simple_stmt -> UNDEFINED LPAREN RPAREN . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## UNDEFINED LPAREN RPAREN SEMICOLON
## LR(1) items:
simple_stmt -> UNDEFINED LPAREN RPAREN SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> UNDEFINED LPAREN RPAREN SEMICOLON

State 248:
## Known stack suffix:
## TRY
## LR(1) items:
catch_stmt -> TRY . indented_block CATCH ident EOL INDENT list(catcher) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 228
-- On indented_block shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## TRY indented_block
## LR(1) items:
catch_stmt -> TRY indented_block . CATCH ident EOL INDENT list(catcher) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On CATCH shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## TRY indented_block CATCH
## LR(1) items:
catch_stmt -> TRY indented_block CATCH . ident EOL INDENT list(catcher) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## TRY indented_block CATCH ident
## LR(1) items:
catch_stmt -> TRY indented_block CATCH ident . EOL INDENT list(catcher) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## TRY indented_block CATCH ident EOL
## LR(1) items:
catch_stmt -> TRY indented_block CATCH ident EOL . INDENT list(catcher) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On INDENT shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## TRY indented_block CATCH ident EOL INDENT
## LR(1) items:
catch_stmt -> TRY indented_block CATCH ident EOL INDENT . list(catcher) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On WHEN shift to state 254
-- On list(catcher) shift to state 258
-- On catcher shift to state 362
## Reductions:
-- On OTHERWISE DEDENT
--   reduce production list(catcher) ->

State 254:
## Known stack suffix:
## WHEN
## LR(1) items:
catcher -> WHEN . expr opt_indented_block [ WHEN OTHERWISE DEDENT ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 255
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 255:
## Known stack suffix:
## WHEN expr
## LR(1) items:
catcher -> WHEN expr . opt_indented_block [ WHEN OTHERWISE DEDENT ]
## Transitions:
-- On EOL shift to state 223
-- On opt_indented_block shift to state 256
-- On indented_block shift to state 257
## Reductions:

State 256:
## Known stack suffix:
## WHEN expr opt_indented_block
## LR(1) items:
catcher -> WHEN expr opt_indented_block . [ WHEN OTHERWISE DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catcher -> WHEN expr opt_indented_block

State 257:
## Known stack suffix:
## indented_block
## LR(1) items:
opt_indented_block -> indented_block . [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_indented_block -> indented_block

State 258:
## Known stack suffix:
## TRY indented_block CATCH ident EOL INDENT list(catcher)
## LR(1) items:
catch_stmt -> TRY indented_block CATCH ident EOL INDENT list(catcher) . opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On OTHERWISE shift to state 259
-- On opt_otherwise shift to state 360
## Reductions:
-- On DEDENT
--   reduce production opt_otherwise ->

State 259:
## Known stack suffix:
## OTHERWISE
## LR(1) items:
opt_otherwise -> OTHERWISE . possibly_empty_block [ DEDENT ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On EOL shift to state 307
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmts shift to state 326
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On possibly_empty_block shift to state 358
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On indented_block shift to state 359
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 260:
## Known stack suffix:
## THROW
## LR(1) items:
simple_stmt -> THROW . ident SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## THROW ident
## LR(1) items:
simple_stmt -> THROW ident . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## THROW ident SEMICOLON
## LR(1) items:
simple_stmt -> THROW ident SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> THROW ident SEMICOLON

State 263:
## Known stack suffix:
## SEE
## LR(1) items:
simple_stmt -> SEE . LPAREN expr RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
simple_stmt -> SEE . STRINGLIT SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
simple_stmt -> SEE . ident SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On STRINGLIT shift to state 264
-- On LPAREN shift to state 266
-- On ID shift to state 13
-- On ident shift to state 270
## Reductions:

State 264:
## Known stack suffix:
## SEE STRINGLIT
## LR(1) items:
simple_stmt -> SEE STRINGLIT . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## SEE STRINGLIT SEMICOLON
## LR(1) items:
simple_stmt -> SEE STRINGLIT SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> SEE STRINGLIT SEMICOLON

State 266:
## Known stack suffix:
## SEE LPAREN
## LR(1) items:
simple_stmt -> SEE LPAREN . expr RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 267
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 267:
## Known stack suffix:
## SEE LPAREN expr
## LR(1) items:
simple_stmt -> SEE LPAREN expr . RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On RPAREN shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## SEE LPAREN expr RPAREN
## LR(1) items:
simple_stmt -> SEE LPAREN expr RPAREN . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## SEE LPAREN expr RPAREN SEMICOLON
## LR(1) items:
simple_stmt -> SEE LPAREN expr RPAREN SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> SEE LPAREN expr RPAREN SEMICOLON

State 270:
## Known stack suffix:
## SEE ident
## LR(1) items:
simple_stmt -> SEE ident . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## SEE ident SEMICOLON
## LR(1) items:
simple_stmt -> SEE ident SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> SEE ident SEMICOLON

State 272:
## Known stack suffix:
## RETURN
## LR(1) items:
simple_stmt -> RETURN . expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
simple_stmt -> RETURN . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On SEMICOLON shift to state 273
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 274
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 273:
## Known stack suffix:
## RETURN SEMICOLON
## LR(1) items:
simple_stmt -> RETURN SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> RETURN SEMICOLON

State 274:
## Known stack suffix:
## RETURN expr
## LR(1) items:
simple_stmt -> RETURN expr . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## RETURN expr SEMICOLON
## LR(1) items:
simple_stmt -> RETURN expr SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> RETURN expr SEMICOLON

State 276:
## Known stack suffix:
## MINUS
## LR(1) items:
lexpr -> MINUS . [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> MINUS

State 277:
## Known stack suffix:
## LPAREN
## LR(1) items:
lexpr -> LPAREN . separated_nonempty2_list(COMMA,lexpr) RPAREN [ RPAREN LBRACK EQ DOT COMMA ]
lexpr -> LPAREN . lexpr RPAREN [ RPAREN LBRACK EQ DOT COMMA ]
ty -> LPAREN . loption(separated_nonempty_list(COMMA,ty)) RPAREN [ RPAREN ID COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On ID shift to state 13
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 164
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,ty) shift to state 167
-- On separated_nonempty2_list(COMMA,lexpr) shift to state 280
-- On qualident shift to state 282
-- On loption(separated_nonempty_list(COMMA,ty)) shift to state 168
-- On lexpr shift to state 283
-- On ident shift to state 48
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,ty)) ->

State 278:
## Known stack suffix:
## LBRACK
## LR(1) items:
lexpr -> LBRACK . separated_nonempty2_list(COMMA,lexpr) RBRACK [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 276
-- On LPAREN shift to state 279
-- On LBRACK shift to state 278
-- On ID shift to state 13
-- On separated_nonempty2_list(COMMA,lexpr) shift to state 296
-- On qualident shift to state 282
-- On lexpr shift to state 298
-- On ident shift to state 48
## Reductions:

State 279:
## Known stack suffix:
## LPAREN
## LR(1) items:
lexpr -> LPAREN . separated_nonempty2_list(COMMA,lexpr) RPAREN [ RPAREN RBRACK LBRACK DOT COMMA ]
lexpr -> LPAREN . lexpr RPAREN [ RPAREN RBRACK LBRACK DOT COMMA ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 276
-- On LPAREN shift to state 279
-- On LBRACK shift to state 278
-- On ID shift to state 13
-- On separated_nonempty2_list(COMMA,lexpr) shift to state 280
-- On qualident shift to state 282
-- On lexpr shift to state 283
-- On ident shift to state 48
## Reductions:

State 280:
## Known stack suffix:
## LPAREN separated_nonempty2_list(COMMA,lexpr)
## LR(1) items:
lexpr -> LPAREN separated_nonempty2_list(COMMA,lexpr) . RPAREN [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On RPAREN shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## LPAREN separated_nonempty2_list(COMMA,lexpr) RPAREN
## LR(1) items:
lexpr -> LPAREN separated_nonempty2_list(COMMA,lexpr) RPAREN . [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> LPAREN separated_nonempty2_list(COMMA,lexpr) RPAREN

State 282:
## Known stack suffix:
## qualident
## LR(1) items:
lexpr -> qualident . [ RPAREN RBRACK LBRACK DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> qualident

State 283:
## Known stack suffix:
## LPAREN lexpr
## LR(1) items:
lexpr -> lexpr . DOT ident [ RPAREN LBRACK DOT COMMA ]
lexpr -> lexpr . DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ RPAREN LBRACK DOT COMMA ]
lexpr -> lexpr . LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK [ RPAREN LBRACK DOT COMMA ]
lexpr -> LPAREN lexpr . RPAREN [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr . COMMA lexpr [ RPAREN ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr . COMMA separated_nonempty2_list(COMMA,lexpr) [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 284
-- On LBRACK shift to state 285
-- On DOT shift to state 288
-- On COMMA shift to state 293
## Reductions:

State 284:
## Known stack suffix:
## LPAREN lexpr RPAREN
## LR(1) items:
lexpr -> LPAREN lexpr RPAREN . [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> LPAREN lexpr RPAREN

State 285:
## Known stack suffix:
## lexpr LBRACK
## LR(1) items:
lexpr -> lexpr LBRACK . loption(separated_nonempty_list(COMMA,slice)) RBRACK [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 51
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On slice shift to state 106
-- On sexpr shift to state 108
-- On separated_nonempty_list(COMMA,slice) shift to state 115
-- On scexpr shift to state 111
-- On qualident shift to state 42
-- On loption(separated_nonempty_list(COMMA,slice)) shift to state 286
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On bexpr shift to state 98
-- On aexpr shift to state 93
## Reductions:
-- On RBRACK
--   reduce production loption(separated_nonempty_list(COMMA,slice)) ->

State 286:
## Known stack suffix:
## lexpr LBRACK loption(separated_nonempty_list(COMMA,slice))
## LR(1) items:
lexpr -> lexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) . RBRACK [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On RBRACK shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## lexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK
## LR(1) items:
lexpr -> lexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK . [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> lexpr LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK

State 288:
## Known stack suffix:
## lexpr DOT
## LR(1) items:
lexpr -> lexpr DOT . ident [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
lexpr -> lexpr DOT . LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On LBRACK shift to state 289
-- On ID shift to state 13
-- On ident shift to state 292
## Reductions:

State 289:
## Known stack suffix:
## lexpr DOT LBRACK
## LR(1) items:
lexpr -> lexpr DOT LBRACK . separated_nonempty_list(COMMA,ident) RBRACK [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,ident) shift to state 290
-- On ident shift to state 149
## Reductions:

State 290:
## Known stack suffix:
## lexpr DOT LBRACK separated_nonempty_list(COMMA,ident)
## LR(1) items:
lexpr -> lexpr DOT LBRACK separated_nonempty_list(COMMA,ident) . RBRACK [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On RBRACK shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## lexpr DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK
## LR(1) items:
lexpr -> lexpr DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK . [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> lexpr DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK

State 292:
## Known stack suffix:
## lexpr DOT ident
## LR(1) items:
lexpr -> lexpr DOT ident . [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> lexpr DOT ident

State 293:
## Known stack suffix:
## lexpr COMMA
## LR(1) items:
separated_nonempty2_list(COMMA,lexpr) -> lexpr COMMA . lexpr [ RPAREN RBRACK ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr COMMA . separated_nonempty2_list(COMMA,lexpr) [ RPAREN RBRACK ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 276
-- On LPAREN shift to state 279
-- On LBRACK shift to state 278
-- On ID shift to state 13
-- On separated_nonempty2_list(COMMA,lexpr) shift to state 294
-- On qualident shift to state 282
-- On lexpr shift to state 295
-- On ident shift to state 48
## Reductions:

State 294:
## Known stack suffix:
## lexpr COMMA separated_nonempty2_list(COMMA,lexpr)
## LR(1) items:
separated_nonempty2_list(COMMA,lexpr) -> lexpr COMMA separated_nonempty2_list(COMMA,lexpr) . [ RPAREN RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty2_list(COMMA,lexpr) -> lexpr COMMA separated_nonempty2_list(COMMA,lexpr)

State 295:
## Known stack suffix:
## lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . DOT ident [ RPAREN RBRACK LBRACK DOT COMMA ]
lexpr -> lexpr . DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ RPAREN RBRACK LBRACK DOT COMMA ]
lexpr -> lexpr . LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK [ RPAREN RBRACK LBRACK DOT COMMA ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr . COMMA lexpr [ RPAREN RBRACK ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr COMMA lexpr . [ RPAREN RBRACK ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr . COMMA separated_nonempty2_list(COMMA,lexpr) [ RPAREN RBRACK ]
## Transitions:
-- On LBRACK shift to state 285
-- On DOT shift to state 288
-- On COMMA shift to state 293
## Reductions:
-- On RPAREN RBRACK
--   reduce production separated_nonempty2_list(COMMA,lexpr) -> lexpr COMMA lexpr

State 296:
## Known stack suffix:
## LBRACK separated_nonempty2_list(COMMA,lexpr)
## LR(1) items:
lexpr -> LBRACK separated_nonempty2_list(COMMA,lexpr) . RBRACK [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
-- On RBRACK shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## LBRACK separated_nonempty2_list(COMMA,lexpr) RBRACK
## LR(1) items:
lexpr -> LBRACK separated_nonempty2_list(COMMA,lexpr) RBRACK . [ RPAREN RBRACK LBRACK EQ DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lexpr -> LBRACK separated_nonempty2_list(COMMA,lexpr) RBRACK

State 298:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . DOT ident [ LBRACK DOT COMMA ]
lexpr -> lexpr . DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ LBRACK DOT COMMA ]
lexpr -> lexpr . LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK [ LBRACK DOT COMMA ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr . COMMA lexpr [ RBRACK ]
separated_nonempty2_list(COMMA,lexpr) -> lexpr . COMMA separated_nonempty2_list(COMMA,lexpr) [ RBRACK ]
## Transitions:
-- On LBRACK shift to state 285
-- On DOT shift to state 288
-- On COMMA shift to state 293
## Reductions:

State 299:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED . LPAREN ident RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED . STRINGLIT SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On STRINGLIT shift to state 300
-- On SEMICOLON shift to state 302
-- On LPAREN shift to state 303
## Reductions:

State 300:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED STRINGLIT
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED STRINGLIT . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED STRINGLIT SEMICOLON
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED STRINGLIT SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED STRINGLIT SEMICOLON

State 302:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED SEMICOLON
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED SEMICOLON

State 303:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN . ident RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN ident
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN ident . RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On RPAREN shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN ident RPAREN
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN ident RPAREN . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN ident RPAREN SEMICOLON
## LR(1) items:
simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN ident RPAREN SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> IMPLEMENTATION_UNDERSCORE_DEFINED LPAREN ident RPAREN SEMICOLON

State 307:
## Known stack suffix:
## EOL
## LR(1) items:
indented_block -> EOL . INDENT nonempty_list(stmts) DEDENT [ WHEN UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER OTHERWISE LPAREN ID EOF ENUMERATION DEDENT CONSTANT BITS ARRAY ]
possibly_empty_block -> EOL . [ WHEN UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER OTHERWISE LPAREN ID EOF ENUMERATION DEDENT CONSTANT BITS ARRAY ]
## Transitions:
-- On INDENT shift to state 224
## Reductions:
-- On WHEN UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER OTHERWISE LPAREN ID EOF ENUMERATION DEDENT CONSTANT BITS ARRAY
--   reduce production possibly_empty_block -> EOL

State 308:
## Known stack suffix:
## CONSTRAINED_UNDERSCORE_UNPREDICTABLE
## LR(1) items:
simple_stmt -> CONSTRAINED_UNDERSCORE_UNPREDICTABLE . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## CONSTRAINED_UNDERSCORE_UNPREDICTABLE SEMICOLON
## LR(1) items:
simple_stmt -> CONSTRAINED_UNDERSCORE_UNPREDICTABLE SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> CONSTRAINED_UNDERSCORE_UNPREDICTABLE SEMICOLON

State 310:
## Known stack suffix:
## CONSTANT
## LR(1) items:
assignment_stmt -> CONSTANT . ty ident EQ expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 311
-- On tident shift to state 38
## Reductions:

State 311:
## Known stack suffix:
## CONSTANT ty
## LR(1) items:
assignment_stmt -> CONSTANT ty . ident EQ expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## CONSTANT ty ident
## LR(1) items:
assignment_stmt -> CONSTANT ty ident . EQ expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On EQ shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## CONSTANT ty ident EQ
## LR(1) items:
assignment_stmt -> CONSTANT ty ident EQ . expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 314
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 314:
## Known stack suffix:
## CONSTANT ty ident EQ expr
## LR(1) items:
assignment_stmt -> CONSTANT ty ident EQ expr . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## CONSTANT ty ident EQ expr SEMICOLON
## LR(1) items:
assignment_stmt -> CONSTANT ty ident EQ expr SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_stmt -> CONSTANT ty ident EQ expr SEMICOLON

State 316:
## Known stack suffix:
## ASSERT
## LR(1) items:
simple_stmt -> ASSERT . expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 317
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 317:
## Known stack suffix:
## ASSERT expr
## LR(1) items:
simple_stmt -> ASSERT expr . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## ASSERT expr SEMICOLON
## LR(1) items:
simple_stmt -> ASSERT expr SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> ASSERT expr SEMICOLON

State 319:
## Known stack suffix:
## ty
## LR(1) items:
assignment_stmt -> ty . separated_nonempty_list(COMMA,ident) SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
assignment_stmt -> ty . ident EQ expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,ident) shift to state 320
-- On ident shift to state 322
## Reductions:

State 320:
## Known stack suffix:
## ty separated_nonempty_list(COMMA,ident)
## LR(1) items:
assignment_stmt -> ty separated_nonempty_list(COMMA,ident) . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## ty separated_nonempty_list(COMMA,ident) SEMICOLON
## LR(1) items:
assignment_stmt -> ty separated_nonempty_list(COMMA,ident) SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_stmt -> ty separated_nonempty_list(COMMA,ident) SEMICOLON

State 322:
## Known stack suffix:
## ty ident
## LR(1) items:
assignment_stmt -> ty ident . EQ expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
separated_nonempty_list(COMMA,ident) -> ident . [ SEMICOLON ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ SEMICOLON ]
## Transitions:
-- On EQ shift to state 323
-- On COMMA shift to state 150
## Reductions:
-- On SEMICOLON
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 323:
## Known stack suffix:
## ty ident EQ
## LR(1) items:
assignment_stmt -> ty ident EQ . expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 324
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 324:
## Known stack suffix:
## ty ident EQ expr
## LR(1) items:
assignment_stmt -> ty ident EQ expr . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## ty ident EQ expr SEMICOLON
## LR(1) items:
assignment_stmt -> ty ident EQ expr SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_stmt -> ty ident EQ expr SEMICOLON

State 326:
## Known stack suffix:
## simple_stmts
## LR(1) items:
possibly_empty_block -> simple_stmts . [ WHEN UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER OTHERWISE LPAREN ID EOF ENUMERATION DEDENT CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production possibly_empty_block -> simple_stmts

State 327:
## Known stack suffix:
## simple_stmt_list
## LR(1) items:
simple_stmts -> simple_stmt_list . simple_if_stmt [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_stmts -> simple_stmt_list . EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On IF shift to state 328
-- On EOL shift to state 356
-- On simple_if_stmt shift to state 357
## Reductions:

State 328:
## Known stack suffix:
## IF
## LR(1) items:
simple_if_stmt -> IF . expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_if_stmt -> IF . expr THEN simple_stmt_list list(simple_elsif) EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 329
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 329:
## Known stack suffix:
## IF expr
## LR(1) items:
simple_if_stmt -> IF expr . THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_if_stmt -> IF expr . THEN simple_stmt_list list(simple_elsif) EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On THEN shift to state 330
## Reductions:

State 330:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
simple_if_stmt -> IF expr THEN . simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_if_stmt -> IF expr THEN . simple_stmt_list list(simple_elsif) EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmt_list shift to state 331
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 331:
## Known stack suffix:
## IF expr THEN simple_stmt_list
## LR(1) items:
simple_if_stmt -> IF expr THEN simple_stmt_list . list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_if_stmt -> IF expr THEN simple_stmt_list . list(simple_elsif) EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ELSIF shift to state 332
-- On simple_elsif shift to state 349
-- On list(simple_elsif) shift to state 351
## Reductions:
-- On EOL ELSE
--   reduce production list(simple_elsif) ->

State 332:
## Known stack suffix:
## ELSIF
## LR(1) items:
simple_elsif -> ELSIF . expr THEN simple_stmt_list [ EOL ELSIF ELSE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 333
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 333:
## Known stack suffix:
## ELSIF expr
## LR(1) items:
simple_elsif -> ELSIF expr . THEN simple_stmt_list [ EOL ELSIF ELSE ]
## Transitions:
-- On THEN shift to state 334
## Reductions:

State 334:
## Known stack suffix:
## ELSIF expr THEN
## LR(1) items:
simple_elsif -> ELSIF expr THEN . simple_stmt_list [ EOL ELSIF ELSE ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmt_list shift to state 335
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 335:
## Known stack suffix:
## ELSIF expr THEN simple_stmt_list
## LR(1) items:
simple_elsif -> ELSIF expr THEN simple_stmt_list . [ EOL ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_elsif -> ELSIF expr THEN simple_stmt_list

State 336:
## Known stack suffix:
## simple_stmt
## LR(1) items:
nonempty_list(simple_stmt) -> simple_stmt . [ IF EOL ELSIF ELSE ]
nonempty_list(simple_stmt) -> simple_stmt . nonempty_list(simple_stmt) [ IF EOL ELSIF ELSE ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On nonempty_list(simple_stmt) shift to state 342
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:
-- On IF EOL ELSIF ELSE
--   reduce production nonempty_list(simple_stmt) -> simple_stmt

State 337:
## Known stack suffix:
## qualident
## LR(1) items:
lexpr -> qualident . [ LBRACK EQ DOT ]
simple_stmt -> qualident . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On LPAREN shift to state 338
## Reductions:
-- On LBRACK EQ DOT
--   reduce production lexpr -> qualident

State 338:
## Known stack suffix:
## qualident LPAREN
## LR(1) items:
simple_stmt -> qualident LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,expr) shift to state 44
-- On qualident shift to state 42
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 339
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 153
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 339:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
simple_stmt -> qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On RPAREN shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN
## LR(1) items:
simple_stmt -> qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN SEMICOLON
## LR(1) items:
simple_stmt -> qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> qualident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN SEMICOLON

State 342:
## Known stack suffix:
## simple_stmt nonempty_list(simple_stmt)
## LR(1) items:
nonempty_list(simple_stmt) -> simple_stmt nonempty_list(simple_stmt) . [ IF EOL ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(simple_stmt) -> simple_stmt nonempty_list(simple_stmt)

State 343:
## Known stack suffix:
## lexpr
## LR(1) items:
assignment_stmt -> lexpr . EQ expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
lexpr -> lexpr . DOT ident [ LBRACK EQ DOT ]
lexpr -> lexpr . DOT LBRACK separated_nonempty_list(COMMA,ident) RBRACK [ LBRACK EQ DOT ]
lexpr -> lexpr . LBRACK loption(separated_nonempty_list(COMMA,slice)) RBRACK [ LBRACK EQ DOT ]
## Transitions:
-- On LBRACK shift to state 285
-- On EQ shift to state 344
-- On DOT shift to state 288
## Reductions:

State 344:
## Known stack suffix:
## lexpr EQ
## LR(1) items:
assignment_stmt -> lexpr EQ . expr SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 345
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 345:
## Known stack suffix:
## lexpr EQ expr
## LR(1) items:
assignment_stmt -> lexpr EQ expr . SEMICOLON [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## lexpr EQ expr SEMICOLON
## LR(1) items:
assignment_stmt -> lexpr EQ expr SEMICOLON . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_stmt -> lexpr EQ expr SEMICOLON

State 347:
## Known stack suffix:
## assignment_stmt
## LR(1) items:
simple_stmt -> assignment_stmt . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt -> assignment_stmt

State 348:
## Known stack suffix:
## nonempty_list(simple_stmt)
## LR(1) items:
simple_stmt_list -> nonempty_list(simple_stmt) . [ IF EOL ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmt_list -> nonempty_list(simple_stmt)

State 349:
## Known stack suffix:
## simple_elsif
## LR(1) items:
list(simple_elsif) -> simple_elsif . list(simple_elsif) [ EOL ELSE ]
## Transitions:
-- On ELSIF shift to state 332
-- On simple_elsif shift to state 349
-- On list(simple_elsif) shift to state 350
## Reductions:
-- On EOL ELSE
--   reduce production list(simple_elsif) ->

State 350:
## Known stack suffix:
## simple_elsif list(simple_elsif)
## LR(1) items:
list(simple_elsif) -> simple_elsif list(simple_elsif) . [ EOL ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(simple_elsif) -> simple_elsif list(simple_elsif)

State 351:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif)
## LR(1) items:
simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) . ELSE simple_stmt_list EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) . EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 352
-- On ELSE shift to state 353
## Reductions:

State 352:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif) EOL
## LR(1) items:
simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) EOL . [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) EOL

State 353:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif) ELSE
## LR(1) items:
simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE . simple_stmt_list EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmt_list shift to state 354
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 354:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list
## LR(1) items:
simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list . EOL [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL
## LR(1) items:
simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL . [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_if_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL

State 356:
## Known stack suffix:
## simple_stmt_list EOL
## LR(1) items:
simple_stmts -> simple_stmt_list EOL . [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmts -> simple_stmt_list EOL

State 357:
## Known stack suffix:
## simple_stmt_list simple_if_stmt
## LR(1) items:
simple_stmts -> simple_stmt_list simple_if_stmt . [ WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_stmts -> simple_stmt_list simple_if_stmt

State 358:
## Known stack suffix:
## OTHERWISE possibly_empty_block
## LR(1) items:
opt_otherwise -> OTHERWISE possibly_empty_block . [ DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_otherwise -> OTHERWISE possibly_empty_block

State 359:
## Known stack suffix:
## indented_block
## LR(1) items:
possibly_empty_block -> indented_block . [ WHEN UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER OTHERWISE LPAREN ID EOF ENUMERATION DEDENT CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production possibly_empty_block -> indented_block

State 360:
## Known stack suffix:
## TRY indented_block CATCH ident EOL INDENT list(catcher) opt_otherwise
## LR(1) items:
catch_stmt -> TRY indented_block CATCH ident EOL INDENT list(catcher) opt_otherwise . DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On DEDENT shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## TRY indented_block CATCH ident EOL INDENT list(catcher) opt_otherwise DEDENT
## LR(1) items:
catch_stmt -> TRY indented_block CATCH ident EOL INDENT list(catcher) opt_otherwise DEDENT . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch_stmt -> TRY indented_block CATCH ident EOL INDENT list(catcher) opt_otherwise DEDENT

State 362:
## Known stack suffix:
## catcher
## LR(1) items:
list(catcher) -> catcher . list(catcher) [ OTHERWISE DEDENT ]
## Transitions:
-- On WHEN shift to state 254
-- On list(catcher) shift to state 363
-- On catcher shift to state 362
## Reductions:
-- On OTHERWISE DEDENT
--   reduce production list(catcher) ->

State 363:
## Known stack suffix:
## catcher list(catcher)
## LR(1) items:
list(catcher) -> catcher list(catcher) . [ OTHERWISE DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(catcher) -> catcher list(catcher)

State 364:
## Known stack suffix:
## REPEAT
## LR(1) items:
repetitive_stmt -> REPEAT . indented_block UNTIL expr SEMICOLON EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 228
-- On indented_block shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## REPEAT indented_block
## LR(1) items:
repetitive_stmt -> REPEAT indented_block . UNTIL expr SEMICOLON EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNTIL shift to state 366
## Reductions:

State 366:
## Known stack suffix:
## REPEAT indented_block UNTIL
## LR(1) items:
repetitive_stmt -> REPEAT indented_block UNTIL . expr SEMICOLON EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 367
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 367:
## Known stack suffix:
## REPEAT indented_block UNTIL expr
## LR(1) items:
repetitive_stmt -> REPEAT indented_block UNTIL expr . SEMICOLON EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 368
## Reductions:

State 368:
## Known stack suffix:
## REPEAT indented_block UNTIL expr SEMICOLON
## LR(1) items:
repetitive_stmt -> REPEAT indented_block UNTIL expr SEMICOLON . EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## REPEAT indented_block UNTIL expr SEMICOLON EOL
## LR(1) items:
repetitive_stmt -> REPEAT indented_block UNTIL expr SEMICOLON EOL . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production repetitive_stmt -> REPEAT indented_block UNTIL expr SEMICOLON EOL

State 370:
## Known stack suffix:
## IF
## LR(1) items:
conditional_stmt -> IF . expr THEN opt_indented_block list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
conditional_stmt -> IF . expr THEN simple_stmts list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
conditional_stmt -> IF . expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 371
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 371:
## Known stack suffix:
## IF expr
## LR(1) items:
conditional_stmt -> IF expr . THEN opt_indented_block list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
conditional_stmt -> IF expr . THEN simple_stmts list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
conditional_stmt -> IF expr . THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On THEN shift to state 372
## Reductions:

State 372:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
conditional_stmt -> IF expr THEN . opt_indented_block list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
conditional_stmt -> IF expr THEN . simple_stmts list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
conditional_stmt -> IF expr THEN . simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On EOL shift to state 223
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmts shift to state 373
-- On simple_stmt_list shift to state 386
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On opt_indented_block shift to state 391
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On indented_block shift to state 257
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 373:
## Known stack suffix:
## IF expr THEN simple_stmts
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmts . list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ELSIF shift to state 374
-- On s_elsif shift to state 379
-- On list(s_elsif) shift to state 381
## Reductions:
-- On WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
--   reduce production list(s_elsif) ->

State 374:
## Known stack suffix:
## ELSIF
## LR(1) items:
s_elsif -> ELSIF . expr THEN opt_indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
s_elsif -> ELSIF . expr THEN simple_stmts [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 375
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 375:
## Known stack suffix:
## ELSIF expr
## LR(1) items:
s_elsif -> ELSIF expr . THEN opt_indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
s_elsif -> ELSIF expr . THEN simple_stmts [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On THEN shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## ELSIF expr THEN
## LR(1) items:
s_elsif -> ELSIF expr THEN . opt_indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
s_elsif -> ELSIF expr THEN . simple_stmts [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On EOL shift to state 223
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmts shift to state 377
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On opt_indented_block shift to state 378
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On indented_block shift to state 257
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 377:
## Known stack suffix:
## ELSIF expr THEN simple_stmts
## LR(1) items:
s_elsif -> ELSIF expr THEN simple_stmts . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production s_elsif -> ELSIF expr THEN simple_stmts

State 378:
## Known stack suffix:
## ELSIF expr THEN opt_indented_block
## LR(1) items:
s_elsif -> ELSIF expr THEN opt_indented_block . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production s_elsif -> ELSIF expr THEN opt_indented_block

State 379:
## Known stack suffix:
## s_elsif
## LR(1) items:
list(s_elsif) -> s_elsif . list(s_elsif) [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ELSIF shift to state 374
-- On s_elsif shift to state 379
-- On list(s_elsif) shift to state 380
## Reductions:
-- On WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
--   reduce production list(s_elsif) ->

State 380:
## Known stack suffix:
## s_elsif list(s_elsif)
## LR(1) items:
list(s_elsif) -> s_elsif list(s_elsif) . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(s_elsif) -> s_elsif list(s_elsif)

State 381:
## Known stack suffix:
## IF expr THEN simple_stmts list(s_elsif)
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmts list(s_elsif) . optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ELSE shift to state 382
-- On optional_else shift to state 385
## Reductions:
-- On WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
--   reduce production optional_else ->

State 382:
## Known stack suffix:
## ELSE
## LR(1) items:
optional_else -> ELSE . opt_indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
optional_else -> ELSE . simple_stmts [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On EOL shift to state 223
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmts shift to state 383
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On opt_indented_block shift to state 384
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On indented_block shift to state 257
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 383:
## Known stack suffix:
## ELSE simple_stmts
## LR(1) items:
optional_else -> ELSE simple_stmts . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_else -> ELSE simple_stmts

State 384:
## Known stack suffix:
## ELSE opt_indented_block
## LR(1) items:
optional_else -> ELSE opt_indented_block . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_else -> ELSE opt_indented_block

State 385:
## Known stack suffix:
## IF expr THEN simple_stmts list(s_elsif) optional_else
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmts list(s_elsif) optional_else . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_stmt -> IF expr THEN simple_stmts list(s_elsif) optional_else

State 386:
## Known stack suffix:
## IF expr THEN simple_stmt_list
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmt_list . list(simple_elsif) ELSE simple_stmt_list EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_stmts -> simple_stmt_list . simple_if_stmt [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
simple_stmts -> simple_stmt_list . EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On IF shift to state 328
-- On EOL shift to state 356
-- On ELSIF shift to state 332
-- On simple_if_stmt shift to state 357
-- On simple_elsif shift to state 349
-- On list(simple_elsif) shift to state 387
## Reductions:
-- On ELSE
--   reduce production list(simple_elsif) ->

State 387:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif)
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) . ELSE simple_stmt_list EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ELSE shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif) ELSE
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE . simple_stmt_list EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmt_list shift to state 389
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 389:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list . EOL [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 390
## Reductions:

State 390:
## Known stack suffix:
## IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL
## LR(1) items:
conditional_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_stmt -> IF expr THEN simple_stmt_list list(simple_elsif) ELSE simple_stmt_list EOL

State 391:
## Known stack suffix:
## IF expr THEN opt_indented_block
## LR(1) items:
conditional_stmt -> IF expr THEN opt_indented_block . list(s_elsif) optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ELSIF shift to state 374
-- On s_elsif shift to state 379
-- On list(s_elsif) shift to state 392
## Reductions:
-- On WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
--   reduce production list(s_elsif) ->

State 392:
## Known stack suffix:
## IF expr THEN opt_indented_block list(s_elsif)
## LR(1) items:
conditional_stmt -> IF expr THEN opt_indented_block list(s_elsif) . optional_else [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ELSE shift to state 382
-- On optional_else shift to state 393
## Reductions:
-- On WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
--   reduce production optional_else ->

State 393:
## Known stack suffix:
## IF expr THEN opt_indented_block list(s_elsif) optional_else
## LR(1) items:
conditional_stmt -> IF expr THEN opt_indented_block list(s_elsif) optional_else . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_stmt -> IF expr THEN opt_indented_block list(s_elsif) optional_else

State 394:
## Known stack suffix:
## FOR
## LR(1) items:
repetitive_stmt -> FOR . ident EQ expr direction expr indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## FOR ident
## LR(1) items:
repetitive_stmt -> FOR ident . EQ expr direction expr indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EQ shift to state 396
## Reductions:

State 396:
## Known stack suffix:
## FOR ident EQ
## LR(1) items:
repetitive_stmt -> FOR ident EQ . expr direction expr indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 397
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 397:
## Known stack suffix:
## FOR ident EQ expr
## LR(1) items:
repetitive_stmt -> FOR ident EQ expr . direction expr indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On TO shift to state 398
-- On DOWNTO shift to state 399
-- On direction shift to state 400
## Reductions:

State 398:
## Known stack suffix:
## TO
## LR(1) items:
direction -> TO . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direction -> TO

State 399:
## Known stack suffix:
## DOWNTO
## LR(1) items:
direction -> DOWNTO . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direction -> DOWNTO

State 400:
## Known stack suffix:
## FOR ident EQ expr direction
## LR(1) items:
repetitive_stmt -> FOR ident EQ expr direction . expr indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 401
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 401:
## Known stack suffix:
## FOR ident EQ expr direction expr
## LR(1) items:
repetitive_stmt -> FOR ident EQ expr direction expr . indented_block [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 228
-- On indented_block shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## FOR ident EQ expr direction expr indented_block
## LR(1) items:
repetitive_stmt -> FOR ident EQ expr direction expr indented_block . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production repetitive_stmt -> FOR ident EQ expr direction expr indented_block

State 403:
## Known stack suffix:
## CASE
## LR(1) items:
conditional_stmt -> CASE . expr OF EOL INDENT nonempty_list(alt) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 404
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 404:
## Known stack suffix:
## CASE expr
## LR(1) items:
conditional_stmt -> CASE expr . OF EOL INDENT nonempty_list(alt) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On OF shift to state 405
## Reductions:

State 405:
## Known stack suffix:
## CASE expr OF
## LR(1) items:
conditional_stmt -> CASE expr OF . EOL INDENT nonempty_list(alt) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On EOL shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## CASE expr OF EOL
## LR(1) items:
conditional_stmt -> CASE expr OF EOL . INDENT nonempty_list(alt) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On INDENT shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## CASE expr OF EOL INDENT
## LR(1) items:
conditional_stmt -> CASE expr OF EOL INDENT . nonempty_list(alt) opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On WHEN shift to state 408
-- On nonempty_list(alt) shift to state 420
-- On alt shift to state 423
## Reductions:

State 408:
## Known stack suffix:
## WHEN
## LR(1) items:
alt -> WHEN . separated_nonempty_list(COMMA,pattern) opt_altcond possibly_empty_block [ WHEN OTHERWISE DEDENT ]
alt -> WHEN . separated_nonempty_list(COMMA,pattern) opt_altcond simple_if_stmt [ WHEN OTHERWISE DEDENT ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 121
-- On MASKLIT shift to state 122
-- On LPAREN shift to state 123
-- On LBRACE shift to state 124
-- On INTLIT shift to state 134
-- On ID shift to state 13
-- On HEXLIT shift to state 135
-- On BITSLIT shift to state 136
-- On separated_nonempty_list(COMMA,pattern) shift to state 409
-- On qualident shift to state 139
-- On pattern shift to state 417
-- On ident shift to state 48
## Reductions:

State 409:
## Known stack suffix:
## WHEN separated_nonempty_list(COMMA,pattern)
## LR(1) items:
alt -> WHEN separated_nonempty_list(COMMA,pattern) . opt_altcond possibly_empty_block [ WHEN OTHERWISE DEDENT ]
alt -> WHEN separated_nonempty_list(COMMA,pattern) . opt_altcond simple_if_stmt [ WHEN OTHERWISE DEDENT ]
## Transitions:
-- On EQ_GT shift to state 410
-- On AMPERSAND_AMPERSAND shift to state 411
-- On opt_altcond shift to state 414
## Reductions:
-- On UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
--   reduce production opt_altcond ->

State 410:
## Known stack suffix:
## EQ_GT
## LR(1) items:
opt_altcond -> EQ_GT . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_altcond -> EQ_GT

State 411:
## Known stack suffix:
## AMPERSAND_AMPERSAND
## LR(1) items:
opt_altcond -> AMPERSAND_AMPERSAND . expr EQ_GT [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 412
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 412:
## Known stack suffix:
## AMPERSAND_AMPERSAND expr
## LR(1) items:
opt_altcond -> AMPERSAND_AMPERSAND expr . EQ_GT [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
-- On EQ_GT shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## AMPERSAND_AMPERSAND expr EQ_GT
## LR(1) items:
opt_altcond -> AMPERSAND_AMPERSAND expr EQ_GT . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_altcond -> AMPERSAND_AMPERSAND expr EQ_GT

State 414:
## Known stack suffix:
## WHEN separated_nonempty_list(COMMA,pattern) opt_altcond
## LR(1) items:
alt -> WHEN separated_nonempty_list(COMMA,pattern) opt_altcond . possibly_empty_block [ WHEN OTHERWISE DEDENT ]
alt -> WHEN separated_nonempty_list(COMMA,pattern) opt_altcond . simple_if_stmt [ WHEN OTHERWISE DEDENT ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On IF shift to state 328
-- On ID shift to state 13
-- On EOL shift to state 307
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmts shift to state 326
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On simple_if_stmt shift to state 415
-- On qualident shift to state 337
-- On possibly_empty_block shift to state 416
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On indented_block shift to state 359
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 415:
## Known stack suffix:
## WHEN separated_nonempty_list(COMMA,pattern) opt_altcond simple_if_stmt
## LR(1) items:
alt -> WHEN separated_nonempty_list(COMMA,pattern) opt_altcond simple_if_stmt . [ WHEN OTHERWISE DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alt -> WHEN separated_nonempty_list(COMMA,pattern) opt_altcond simple_if_stmt

State 416:
## Known stack suffix:
## WHEN separated_nonempty_list(COMMA,pattern) opt_altcond possibly_empty_block
## LR(1) items:
alt -> WHEN separated_nonempty_list(COMMA,pattern) opt_altcond possibly_empty_block . [ WHEN OTHERWISE DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alt -> WHEN separated_nonempty_list(COMMA,pattern) opt_altcond possibly_empty_block

State 417:
## Known stack suffix:
## pattern
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EQ_GT EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY AMPERSAND_AMPERSAND ]
separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EQ_GT EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY AMPERSAND_AMPERSAND ]
## Transitions:
-- On COMMA shift to state 418
## Reductions:
-- On UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EQ_GT EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY AMPERSAND_AMPERSAND
--   reduce production separated_nonempty_list(COMMA,pattern) -> pattern

State 418:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EQ_GT EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY AMPERSAND_AMPERSAND ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 121
-- On MASKLIT shift to state 122
-- On LPAREN shift to state 123
-- On LBRACE shift to state 124
-- On INTLIT shift to state 134
-- On ID shift to state 13
-- On HEXLIT shift to state 135
-- On BITSLIT shift to state 136
-- On separated_nonempty_list(COMMA,pattern) shift to state 419
-- On qualident shift to state 139
-- On pattern shift to state 417
-- On ident shift to state 48
## Reductions:

State 419:
## Known stack suffix:
## pattern COMMA separated_nonempty_list(COMMA,pattern)
## LR(1) items:
separated_nonempty_list(COMMA,pattern) -> pattern COMMA separated_nonempty_list(COMMA,pattern) . [ UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EQ_GT EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY AMPERSAND_AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,pattern) -> pattern COMMA separated_nonempty_list(COMMA,pattern)

State 420:
## Known stack suffix:
## CASE expr OF EOL INDENT nonempty_list(alt)
## LR(1) items:
conditional_stmt -> CASE expr OF EOL INDENT nonempty_list(alt) . opt_otherwise DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On OTHERWISE shift to state 259
-- On opt_otherwise shift to state 421
## Reductions:
-- On DEDENT
--   reduce production opt_otherwise ->

State 421:
## Known stack suffix:
## CASE expr OF EOL INDENT nonempty_list(alt) opt_otherwise
## LR(1) items:
conditional_stmt -> CASE expr OF EOL INDENT nonempty_list(alt) opt_otherwise . DEDENT [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
-- On DEDENT shift to state 422
## Reductions:

State 422:
## Known stack suffix:
## CASE expr OF EOL INDENT nonempty_list(alt) opt_otherwise DEDENT
## LR(1) items:
conditional_stmt -> CASE expr OF EOL INDENT nonempty_list(alt) opt_otherwise DEDENT . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_stmt -> CASE expr OF EOL INDENT nonempty_list(alt) opt_otherwise DEDENT

State 423:
## Known stack suffix:
## alt
## LR(1) items:
nonempty_list(alt) -> alt . [ OTHERWISE DEDENT ]
nonempty_list(alt) -> alt . nonempty_list(alt) [ OTHERWISE DEDENT ]
## Transitions:
-- On WHEN shift to state 408
-- On nonempty_list(alt) shift to state 424
-- On alt shift to state 423
## Reductions:
-- On OTHERWISE DEDENT
--   reduce production nonempty_list(alt) -> alt

State 424:
## Known stack suffix:
## alt nonempty_list(alt)
## LR(1) items:
nonempty_list(alt) -> alt nonempty_list(alt) . [ OTHERWISE DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(alt) -> alt nonempty_list(alt)

State 425:
## Known stack suffix:
## stmts
## LR(1) items:
nonempty_list(stmts) -> stmts . [ DEDENT ]
nonempty_list(stmts) -> stmts . nonempty_list(stmts) [ DEDENT ]
## Transitions:
-- On WHILE shift to state 225
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On TRY shift to state 248
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On REPEAT shift to state 364
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On IF shift to state 370
-- On ID shift to state 13
-- On FOR shift to state 394
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On CASE shift to state 403
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On stmts shift to state 425
-- On simple_stmts shift to state 426
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On repetitive_stmt shift to state 427
-- On qualident shift to state 337
-- On nonempty_list(stmts) shift to state 428
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On conditional_stmt shift to state 429
-- On compound_stmt shift to state 430
-- On catch_stmt shift to state 431
-- On assignment_stmt shift to state 347
## Reductions:
-- On DEDENT
--   reduce production nonempty_list(stmts) -> stmts

State 426:
## Known stack suffix:
## simple_stmts
## LR(1) items:
stmts -> simple_stmts . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmts -> simple_stmts

State 427:
## Known stack suffix:
## repetitive_stmt
## LR(1) items:
compound_stmt -> repetitive_stmt . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_stmt -> repetitive_stmt

State 428:
## Known stack suffix:
## stmts nonempty_list(stmts)
## LR(1) items:
nonempty_list(stmts) -> stmts nonempty_list(stmts) . [ DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(stmts) -> stmts nonempty_list(stmts)

State 429:
## Known stack suffix:
## conditional_stmt
## LR(1) items:
compound_stmt -> conditional_stmt . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_stmt -> conditional_stmt

State 430:
## Known stack suffix:
## compound_stmt
## LR(1) items:
stmts -> compound_stmt . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmts -> compound_stmt

State 431:
## Known stack suffix:
## catch_stmt
## LR(1) items:
compound_stmt -> catch_stmt . [ WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_stmt -> catch_stmt

State 432:
## Known stack suffix:
## EOL INDENT nonempty_list(stmts)
## LR(1) items:
indented_block -> EOL INDENT nonempty_list(stmts) . DEDENT [ WHILE WHEN UNTIL UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CATCH CASE BITS ASSERT ARRAY ]
## Transitions:
-- On DEDENT shift to state 433
## Reductions:

State 433:
## Known stack suffix:
## EOL INDENT nonempty_list(stmts) DEDENT
## LR(1) items:
indented_block -> EOL INDENT nonempty_list(stmts) DEDENT . [ WHILE WHEN UNTIL UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CATCH CASE BITS ASSERT ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production indented_block -> EOL INDENT nonempty_list(stmts) DEDENT

State 434:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_definition -> UNDERSCORE_UNDERSCORE_NEWMAP ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block

State 435:
## Known stack suffix:
## formal
## LR(1) items:
separated_nonempty_list(COMMA,formal) -> formal . [ RPAREN RBRACK ]
separated_nonempty_list(COMMA,formal) -> formal . COMMA separated_nonempty_list(COMMA,formal) [ RPAREN RBRACK ]
## Transitions:
-- On COMMA shift to state 436
## Reductions:
-- On RPAREN RBRACK
--   reduce production separated_nonempty_list(COMMA,formal) -> formal

State 436:
## Known stack suffix:
## formal COMMA
## LR(1) items:
separated_nonempty_list(COMMA,formal) -> formal COMMA . separated_nonempty_list(COMMA,formal) [ RPAREN RBRACK ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 218
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,formal) shift to state 437
-- On formal shift to state 435
## Reductions:

State 437:
## Known stack suffix:
## formal COMMA separated_nonempty_list(COMMA,formal)
## LR(1) items:
separated_nonempty_list(COMMA,formal) -> formal COMMA separated_nonempty_list(COMMA,formal) . [ RPAREN RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,formal) -> formal COMMA separated_nonempty_list(COMMA,formal)

State 438:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWEVENT
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT . qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 439
-- On ident shift to state 48
## Reductions:

State 439:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWEVENT qualident
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT qualident . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LPAREN shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 218
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,formal) shift to state 220
-- On loption(separated_nonempty_list(COMMA,formal)) shift to state 441
-- On formal shift to state 435
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,formal)) ->

State 441:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal))
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) . RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RPAREN shift to state 442
## Reductions:

State 442:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_definition -> UNDERSCORE_UNDERSCORE_NEWEVENT qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL

State 445:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_MAP
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_MAP . qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond THEN possibly_empty_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 446
-- On ident shift to state 48
## Reductions:

State 446:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_MAP qualident
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_MAP qualident . loption(separated_nonempty_list(COMMA,mapfield)) optmapcond THEN possibly_empty_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,mapfield) shift to state 447
-- On mapfield shift to state 448
-- On loption(separated_nonempty_list(COMMA,mapfield)) shift to state 454
-- On ident shift to state 451
## Reductions:
-- On WHEN THEN
--   reduce production loption(separated_nonempty_list(COMMA,mapfield)) ->

State 447:
## Known stack suffix:
## separated_nonempty_list(COMMA,mapfield)
## LR(1) items:
loption(separated_nonempty_list(COMMA,mapfield)) -> separated_nonempty_list(COMMA,mapfield) . [ WHEN THEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,mapfield)) -> separated_nonempty_list(COMMA,mapfield)

State 448:
## Known stack suffix:
## mapfield
## LR(1) items:
separated_nonempty_list(COMMA,mapfield) -> mapfield . [ WHEN THEN ]
separated_nonempty_list(COMMA,mapfield) -> mapfield . COMMA separated_nonempty_list(COMMA,mapfield) [ WHEN THEN ]
## Transitions:
-- On COMMA shift to state 449
## Reductions:
-- On WHEN THEN
--   reduce production separated_nonempty_list(COMMA,mapfield) -> mapfield

State 449:
## Known stack suffix:
## mapfield COMMA
## LR(1) items:
separated_nonempty_list(COMMA,mapfield) -> mapfield COMMA . separated_nonempty_list(COMMA,mapfield) [ WHEN THEN ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,mapfield) shift to state 450
-- On mapfield shift to state 448
-- On ident shift to state 451
## Reductions:

State 450:
## Known stack suffix:
## mapfield COMMA separated_nonempty_list(COMMA,mapfield)
## LR(1) items:
separated_nonempty_list(COMMA,mapfield) -> mapfield COMMA separated_nonempty_list(COMMA,mapfield) . [ WHEN THEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,mapfield) -> mapfield COMMA separated_nonempty_list(COMMA,mapfield)

State 451:
## Known stack suffix:
## ident
## LR(1) items:
mapfield -> ident . EQ pattern [ WHEN THEN COMMA ]
## Transitions:
-- On EQ shift to state 452
## Reductions:

State 452:
## Known stack suffix:
## ident EQ
## LR(1) items:
mapfield -> ident EQ . pattern [ WHEN THEN COMMA ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On MINUS shift to state 121
-- On MASKLIT shift to state 122
-- On LPAREN shift to state 123
-- On LBRACE shift to state 124
-- On INTLIT shift to state 134
-- On ID shift to state 13
-- On HEXLIT shift to state 135
-- On BITSLIT shift to state 136
-- On qualident shift to state 139
-- On pattern shift to state 453
-- On ident shift to state 48
## Reductions:

State 453:
## Known stack suffix:
## ident EQ pattern
## LR(1) items:
mapfield -> ident EQ pattern . [ WHEN THEN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mapfield -> ident EQ pattern

State 454:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield))
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) . optmapcond THEN possibly_empty_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On WHEN shift to state 455
-- On optmapcond shift to state 457
## Reductions:
-- On THEN
--   reduce production optmapcond ->

State 455:
## Known stack suffix:
## WHEN
## LR(1) items:
optmapcond -> WHEN . expr [ THEN ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 22
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 456
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 456:
## Known stack suffix:
## WHEN expr
## LR(1) items:
optmapcond -> WHEN expr . [ THEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optmapcond -> WHEN expr

State 457:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond . THEN possibly_empty_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On THEN shift to state 458
## Reductions:

State 458:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond THEN
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond THEN . possibly_empty_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On EOL shift to state 307
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmts shift to state 326
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On possibly_empty_block shift to state 459
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On indented_block shift to state 359
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 459:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond THEN possibly_empty_block
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond THEN possibly_empty_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_definition -> UNDERSCORE_UNDERSCORE_MAP qualident loption(separated_nonempty_list(COMMA,mapfield)) optmapcond THEN possibly_empty_block

State 460:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION . ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 461
## Reductions:

State 461:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident . EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL . INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On INDENT shift to state 463
## Reductions:

State 463:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT . nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_ENCODING shift to state 464
-- On nonempty_list(encoding) shift to state 500
-- On encoding shift to state 509
## Reductions:

State 464:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING . ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident . EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On EOL shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL . INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On INDENT shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT . UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET . ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 469
## Reductions:

State 469:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident . EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On EOL shift to state 470
## Reductions:

State 470:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL . list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_FIELD shift to state 471
-- On list(instr_field) shift to state 478
-- On instr_field shift to state 498
## Reductions:
-- On UNDERSCORE_UNDERSCORE_OPCODE
--   reduce production list(instr_field) ->

State 471:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FIELD
## LR(1) items:
instr_field -> UNDERSCORE_UNDERSCORE_FIELD . ident offset PLUS_COLON offset EOL [ UNDERSCORE_UNDERSCORE_OPCODE UNDERSCORE_UNDERSCORE_FIELD CASE ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 472
## Reductions:

State 472:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FIELD ident
## LR(1) items:
instr_field -> UNDERSCORE_UNDERSCORE_FIELD ident . offset PLUS_COLON offset EOL [ UNDERSCORE_UNDERSCORE_OPCODE UNDERSCORE_UNDERSCORE_FIELD CASE ]
## Transitions:
-- On INTLIT shift to state 473
-- On offset shift to state 474
## Reductions:

State 473:
## Known stack suffix:
## INTLIT
## LR(1) items:
offset -> INTLIT . [ RPAREN PLUS_COLON EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production offset -> INTLIT

State 474:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FIELD ident offset
## LR(1) items:
instr_field -> UNDERSCORE_UNDERSCORE_FIELD ident offset . PLUS_COLON offset EOL [ UNDERSCORE_UNDERSCORE_OPCODE UNDERSCORE_UNDERSCORE_FIELD CASE ]
## Transitions:
-- On PLUS_COLON shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FIELD ident offset PLUS_COLON
## LR(1) items:
instr_field -> UNDERSCORE_UNDERSCORE_FIELD ident offset PLUS_COLON . offset EOL [ UNDERSCORE_UNDERSCORE_OPCODE UNDERSCORE_UNDERSCORE_FIELD CASE ]
## Transitions:
-- On INTLIT shift to state 473
-- On offset shift to state 476
## Reductions:

State 476:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FIELD ident offset PLUS_COLON offset
## LR(1) items:
instr_field -> UNDERSCORE_UNDERSCORE_FIELD ident offset PLUS_COLON offset . EOL [ UNDERSCORE_UNDERSCORE_OPCODE UNDERSCORE_UNDERSCORE_FIELD CASE ]
## Transitions:
-- On EOL shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FIELD ident offset PLUS_COLON offset EOL
## LR(1) items:
instr_field -> UNDERSCORE_UNDERSCORE_FIELD ident offset PLUS_COLON offset EOL . [ UNDERSCORE_UNDERSCORE_OPCODE UNDERSCORE_UNDERSCORE_FIELD CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr_field -> UNDERSCORE_UNDERSCORE_FIELD ident offset PLUS_COLON offset EOL

State 478:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field)
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) . UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_OPCODE shift to state 479
## Reductions:

State 479:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE . opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On MASKLIT shift to state 480
-- On BITSLIT shift to state 481
-- On opcode_value shift to state 482
## Reductions:

State 480:
## Known stack suffix:
## MASKLIT
## LR(1) items:
opcode_value -> MASKLIT . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opcode_value -> MASKLIT

State 481:
## Known stack suffix:
## BITSLIT
## LR(1) items:
opcode_value -> BITSLIT . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opcode_value -> BITSLIT

State 482:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value . EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On EOL shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL . UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_GUARD shift to state 484
## Reductions:

State 484:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD . expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 485
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 485:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr . EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On EOL shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL . list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS shift to state 487
-- On list(instr_unpred) shift to state 492
-- On instr_unpred shift to state 496
## Reductions:
-- On UNDERSCORE_UNDERSCORE_DECODE
--   reduce production list(instr_unpred) ->

State 487:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS
## LR(1) items:
instr_unpred -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS . INTLIT EQ_EQ BITSLIT EOL [ UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS UNDERSCORE_UNDERSCORE_DECODE ]
## Transitions:
-- On INTLIT shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT
## LR(1) items:
instr_unpred -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT . EQ_EQ BITSLIT EOL [ UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS UNDERSCORE_UNDERSCORE_DECODE ]
## Transitions:
-- On EQ_EQ shift to state 489
## Reductions:

State 489:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ
## LR(1) items:
instr_unpred -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ . BITSLIT EOL [ UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS UNDERSCORE_UNDERSCORE_DECODE ]
## Transitions:
-- On BITSLIT shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ BITSLIT
## LR(1) items:
instr_unpred -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ BITSLIT . EOL [ UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS UNDERSCORE_UNDERSCORE_DECODE ]
## Transitions:
-- On EOL shift to state 491
## Reductions:

State 491:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ BITSLIT EOL
## LR(1) items:
instr_unpred -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ BITSLIT EOL . [ UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS UNDERSCORE_UNDERSCORE_DECODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr_unpred -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ BITSLIT EOL

State 492:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred)
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) . UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE . opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On EOL shift to state 223
-- On opt_indented_block shift to state 494
-- On indented_block shift to state 257
## Reductions:

State 494:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block . DEDENT [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
-- On DEDENT shift to state 495
## Reductions:

State 495:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT
## LR(1) items:
encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT . [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production encoding -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ident EOL list(instr_field) UNDERSCORE_UNDERSCORE_OPCODE opcode_value EOL UNDERSCORE_UNDERSCORE_GUARD expr EOL list(instr_unpred) UNDERSCORE_UNDERSCORE_DECODE opt_indented_block DEDENT

State 496:
## Known stack suffix:
## instr_unpred
## LR(1) items:
list(instr_unpred) -> instr_unpred . list(instr_unpred) [ UNDERSCORE_UNDERSCORE_DECODE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS shift to state 487
-- On list(instr_unpred) shift to state 497
-- On instr_unpred shift to state 496
## Reductions:
-- On UNDERSCORE_UNDERSCORE_DECODE
--   reduce production list(instr_unpred) ->

State 497:
## Known stack suffix:
## instr_unpred list(instr_unpred)
## LR(1) items:
list(instr_unpred) -> instr_unpred list(instr_unpred) . [ UNDERSCORE_UNDERSCORE_DECODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(instr_unpred) -> instr_unpred list(instr_unpred)

State 498:
## Known stack suffix:
## instr_field
## LR(1) items:
list(instr_field) -> instr_field . list(instr_field) [ UNDERSCORE_UNDERSCORE_OPCODE CASE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_FIELD shift to state 471
-- On list(instr_field) shift to state 499
-- On instr_field shift to state 498
## Reductions:
-- On UNDERSCORE_UNDERSCORE_OPCODE CASE
--   reduce production list(instr_field) ->

State 499:
## Known stack suffix:
## instr_field list(instr_field)
## LR(1) items:
list(instr_field) -> instr_field list(instr_field) . [ UNDERSCORE_UNDERSCORE_OPCODE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(instr_field) -> instr_field list(instr_field)

State 500:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding)
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) . opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_POSTDECODE shift to state 501
-- On opt_postdecode shift to state 503
## Reductions:
-- On UNDERSCORE_UNDERSCORE_EXECUTE
--   reduce production opt_postdecode ->

State 501:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_POSTDECODE
## LR(1) items:
opt_postdecode -> UNDERSCORE_UNDERSCORE_POSTDECODE . indented_block [ UNDERSCORE_UNDERSCORE_EXECUTE ]
## Transitions:
-- On EOL shift to state 228
-- On indented_block shift to state 502
## Reductions:

State 502:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_POSTDECODE indented_block
## LR(1) items:
opt_postdecode -> UNDERSCORE_UNDERSCORE_POSTDECODE indented_block . [ UNDERSCORE_UNDERSCORE_EXECUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_postdecode -> UNDERSCORE_UNDERSCORE_POSTDECODE indented_block

State 503:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode . UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_EXECUTE shift to state 504
## Reductions:

State 504:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE . opt_conditional opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_CONDITIONAL shift to state 505
-- On opt_conditional shift to state 506
## Reductions:
-- On EOL
--   reduce production opt_conditional ->

State 505:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONDITIONAL
## LR(1) items:
opt_conditional -> UNDERSCORE_UNDERSCORE_CONDITIONAL . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_conditional -> UNDERSCORE_UNDERSCORE_CONDITIONAL

State 506:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional . opt_indented_block DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 223
-- On opt_indented_block shift to state 507
-- On indented_block shift to state 257
## Reductions:

State 507:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block . DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On DEDENT shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction_definition -> UNDERSCORE_UNDERSCORE_INSTRUCTION ident EOL INDENT nonempty_list(encoding) opt_postdecode UNDERSCORE_UNDERSCORE_EXECUTE opt_conditional opt_indented_block DEDENT

State 509:
## Known stack suffix:
## encoding
## LR(1) items:
nonempty_list(encoding) -> encoding . [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE ]
nonempty_list(encoding) -> encoding . nonempty_list(encoding) [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_ENCODING shift to state 464
-- On nonempty_list(encoding) shift to state 510
-- On encoding shift to state 509
## Reductions:
-- On UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE
--   reduce production nonempty_list(encoding) -> encoding

State 510:
## Known stack suffix:
## encoding nonempty_list(encoding)
## LR(1) items:
nonempty_list(encoding) -> encoding nonempty_list(encoding) . [ UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(encoding) -> encoding nonempty_list(encoding)

State 511:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FUNCTION
## LR(1) items:
getter_declaration -> UNDERSCORE_UNDERSCORE_FUNCTION . ty qualident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 512
-- On tident shift to state 38
## Reductions:

State 512:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FUNCTION ty
## LR(1) items:
getter_declaration -> UNDERSCORE_UNDERSCORE_FUNCTION ty . qualident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 513
-- On ident shift to state 48
## Reductions:

State 513:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FUNCTION ty qualident
## LR(1) items:
getter_declaration -> UNDERSCORE_UNDERSCORE_FUNCTION ty qualident . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 514
## Reductions:

State 514:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FUNCTION ty qualident SEMICOLON
## LR(1) items:
getter_declaration -> UNDERSCORE_UNDERSCORE_FUNCTION ty qualident SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 515
## Reductions:

State 515:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_FUNCTION ty qualident SEMICOLON EOL
## LR(1) items:
getter_declaration -> UNDERSCORE_UNDERSCORE_FUNCTION ty qualident SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production getter_declaration -> UNDERSCORE_UNDERSCORE_FUNCTION ty qualident SEMICOLON EOL

State 516:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_EVENT
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_EVENT . qualident possibly_empty_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 517
-- On ident shift to state 48
## Reductions:

State 517:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_EVENT qualident
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_EVENT qualident . possibly_empty_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On ID shift to state 13
-- On EOL shift to state 307
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On simple_stmts shift to state 326
-- On simple_stmt_list shift to state 327
-- On simple_stmt shift to state 336
-- On qualident shift to state 337
-- On possibly_empty_block shift to state 518
-- On nonempty_list(simple_stmt) shift to state 348
-- On lexpr shift to state 343
-- On indented_block shift to state 359
-- On ident shift to state 48
-- On assignment_stmt shift to state 347
## Reductions:

State 518:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_EVENT qualident possibly_empty_block
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_EVENT qualident possibly_empty_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_definition -> UNDERSCORE_UNDERSCORE_EVENT qualident possibly_empty_block

State 519:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_DECODE . ident EOL INDENT decode_case DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_DECODE ident . EOL INDENT decode_case DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 521
## Reductions:

State 521:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident EOL
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_DECODE ident EOL . INDENT decode_case DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On INDENT shift to state 522
## Reductions:

State 522:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident EOL INDENT
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_DECODE ident EOL INDENT . decode_case DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On CASE shift to state 523
-- On decode_case shift to state 575
## Reductions:

State 523:
## Known stack suffix:
## CASE
## LR(1) items:
decode_case -> CASE . LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT nonempty_list(decode_alt) DEDENT [ DEDENT ]
## Transitions:
-- On LPAREN shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## CASE LPAREN
## LR(1) items:
decode_case -> CASE LPAREN . loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT nonempty_list(decode_alt) DEDENT [ DEDENT ]
## Transitions:
-- On INTLIT shift to state 473
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,decode_slice) shift to state 525
-- On separated_nonempty2_list(COLON,ident) shift to state 526
-- On offset shift to state 527
-- On loption(separated_nonempty_list(COMMA,decode_slice)) shift to state 530
-- On ident shift to state 568
-- On decode_slice shift to state 572
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,decode_slice)) ->

State 525:
## Known stack suffix:
## separated_nonempty_list(COMMA,decode_slice)
## LR(1) items:
loption(separated_nonempty_list(COMMA,decode_slice)) -> separated_nonempty_list(COMMA,decode_slice) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,decode_slice)) -> separated_nonempty_list(COMMA,decode_slice)

State 526:
## Known stack suffix:
## separated_nonempty2_list(COLON,ident)
## LR(1) items:
decode_slice -> separated_nonempty2_list(COLON,ident) . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_slice -> separated_nonempty2_list(COLON,ident)

State 527:
## Known stack suffix:
## offset
## LR(1) items:
decode_slice -> offset . PLUS_COLON offset [ RPAREN COMMA ]
## Transitions:
-- On PLUS_COLON shift to state 528
## Reductions:

State 528:
## Known stack suffix:
## offset PLUS_COLON
## LR(1) items:
decode_slice -> offset PLUS_COLON . offset [ RPAREN COMMA ]
## Transitions:
-- On INTLIT shift to state 473
-- On offset shift to state 529
## Reductions:

State 529:
## Known stack suffix:
## offset PLUS_COLON offset
## LR(1) items:
decode_slice -> offset PLUS_COLON offset . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_slice -> offset PLUS_COLON offset

State 530:
## Known stack suffix:
## CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice))
## LR(1) items:
decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) . RPAREN OF EOL INDENT nonempty_list(decode_alt) DEDENT [ DEDENT ]
## Transitions:
-- On RPAREN shift to state 531
## Reductions:

State 531:
## Known stack suffix:
## CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN
## LR(1) items:
decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN . OF EOL INDENT nonempty_list(decode_alt) DEDENT [ DEDENT ]
## Transitions:
-- On OF shift to state 532
## Reductions:

State 532:
## Known stack suffix:
## CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF
## LR(1) items:
decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF . EOL INDENT nonempty_list(decode_alt) DEDENT [ DEDENT ]
## Transitions:
-- On EOL shift to state 533
## Reductions:

State 533:
## Known stack suffix:
## CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL
## LR(1) items:
decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL . INDENT nonempty_list(decode_alt) DEDENT [ DEDENT ]
## Transitions:
-- On INDENT shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT
## LR(1) items:
decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT . nonempty_list(decode_alt) DEDENT [ DEDENT ]
## Transitions:
-- On WHEN shift to state 535
-- On nonempty_list(decode_alt) shift to state 564
-- On decode_alt shift to state 566
## Reductions:

State 535:
## Known stack suffix:
## WHEN
## LR(1) items:
decode_alt -> WHEN . LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN EQ_GT decode_body [ WHEN DEDENT ]
## Transitions:
-- On LPAREN shift to state 536
## Reductions:

State 536:
## Known stack suffix:
## WHEN LPAREN
## LR(1) items:
decode_alt -> WHEN LPAREN . loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN EQ_GT decode_body [ WHEN DEDENT ]
## Transitions:
-- On MASKLIT shift to state 537
-- On ID shift to state 13
-- On BITSLIT shift to state 538
-- On BANG shift to state 539
-- On separated_nonempty_list(COMMA,decode_pattern) shift to state 542
-- On loption(separated_nonempty_list(COMMA,decode_pattern)) shift to state 543
-- On ident shift to state 540
-- On decode_pattern shift to state 561
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,decode_pattern)) ->

State 537:
## Known stack suffix:
## MASKLIT
## LR(1) items:
decode_pattern -> MASKLIT . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_pattern -> MASKLIT

State 538:
## Known stack suffix:
## BITSLIT
## LR(1) items:
decode_pattern -> BITSLIT . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_pattern -> BITSLIT

State 539:
## Known stack suffix:
## BANG
## LR(1) items:
decode_pattern -> BANG . decode_pattern [ RPAREN COMMA ]
## Transitions:
-- On MASKLIT shift to state 537
-- On ID shift to state 13
-- On BITSLIT shift to state 538
-- On BANG shift to state 539
-- On ident shift to state 540
-- On decode_pattern shift to state 541
## Reductions:

State 540:
## Known stack suffix:
## ident
## LR(1) items:
decode_pattern -> ident . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_pattern -> ident

State 541:
## Known stack suffix:
## BANG decode_pattern
## LR(1) items:
decode_pattern -> BANG decode_pattern . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_pattern -> BANG decode_pattern

State 542:
## Known stack suffix:
## separated_nonempty_list(COMMA,decode_pattern)
## LR(1) items:
loption(separated_nonempty_list(COMMA,decode_pattern)) -> separated_nonempty_list(COMMA,decode_pattern) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,decode_pattern)) -> separated_nonempty_list(COMMA,decode_pattern)

State 543:
## Known stack suffix:
## WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern))
## LR(1) items:
decode_alt -> WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) . RPAREN EQ_GT decode_body [ WHEN DEDENT ]
## Transitions:
-- On RPAREN shift to state 544
## Reductions:

State 544:
## Known stack suffix:
## WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN
## LR(1) items:
decode_alt -> WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN . EQ_GT decode_body [ WHEN DEDENT ]
## Transitions:
-- On EQ_GT shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN EQ_GT
## LR(1) items:
decode_alt -> WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN EQ_GT . decode_body [ WHEN DEDENT ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_UNPREDICTABLE shift to state 546
-- On UNDERSCORE_UNDERSCORE_UNALLOCATED shift to state 548
-- On UNDERSCORE_UNDERSCORE_NOP shift to state 550
-- On UNDERSCORE_UNDERSCORE_ENCODING shift to state 552
-- On EOL shift to state 555
-- On decode_body shift to state 560
## Reductions:

State 546:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNPREDICTABLE
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE . EOL [ WHEN DEDENT ]
## Transitions:
-- On EOL shift to state 547
## Reductions:

State 547:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL . [ WHEN DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_body -> UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL

State 548:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNALLOCATED
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_UNALLOCATED . EOL [ WHEN DEDENT ]
## Transitions:
-- On EOL shift to state 549
## Reductions:

State 549:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_UNALLOCATED EOL
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_UNALLOCATED EOL . [ WHEN DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_body -> UNDERSCORE_UNDERSCORE_UNALLOCATED EOL

State 550:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NOP
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_NOP . EOL [ WHEN DEDENT ]
## Transitions:
-- On EOL shift to state 551
## Reductions:

State 551:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_NOP EOL
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_NOP EOL . [ WHEN DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_body -> UNDERSCORE_UNDERSCORE_NOP EOL

State 552:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_ENCODING . ident EOL [ WHEN DEDENT ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 553
## Reductions:

State 553:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_ENCODING ident . EOL [ WHEN DEDENT ]
## Transitions:
-- On EOL shift to state 554
## Reductions:

State 554:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_ENCODING ident EOL
## LR(1) items:
decode_body -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL . [ WHEN DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_body -> UNDERSCORE_UNDERSCORE_ENCODING ident EOL

State 555:
## Known stack suffix:
## EOL
## LR(1) items:
decode_body -> EOL . INDENT list(instr_field) decode_case DEDENT [ WHEN DEDENT ]
## Transitions:
-- On INDENT shift to state 556
## Reductions:

State 556:
## Known stack suffix:
## EOL INDENT
## LR(1) items:
decode_body -> EOL INDENT . list(instr_field) decode_case DEDENT [ WHEN DEDENT ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_FIELD shift to state 471
-- On list(instr_field) shift to state 557
-- On instr_field shift to state 498
## Reductions:
-- On CASE
--   reduce production list(instr_field) ->

State 557:
## Known stack suffix:
## EOL INDENT list(instr_field)
## LR(1) items:
decode_body -> EOL INDENT list(instr_field) . decode_case DEDENT [ WHEN DEDENT ]
## Transitions:
-- On CASE shift to state 523
-- On decode_case shift to state 558
## Reductions:

State 558:
## Known stack suffix:
## EOL INDENT list(instr_field) decode_case
## LR(1) items:
decode_body -> EOL INDENT list(instr_field) decode_case . DEDENT [ WHEN DEDENT ]
## Transitions:
-- On DEDENT shift to state 559
## Reductions:

State 559:
## Known stack suffix:
## EOL INDENT list(instr_field) decode_case DEDENT
## LR(1) items:
decode_body -> EOL INDENT list(instr_field) decode_case DEDENT . [ WHEN DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_body -> EOL INDENT list(instr_field) decode_case DEDENT

State 560:
## Known stack suffix:
## WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN EQ_GT decode_body
## LR(1) items:
decode_alt -> WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN EQ_GT decode_body . [ WHEN DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_alt -> WHEN LPAREN loption(separated_nonempty_list(COMMA,decode_pattern)) RPAREN EQ_GT decode_body

State 561:
## Known stack suffix:
## decode_pattern
## LR(1) items:
separated_nonempty_list(COMMA,decode_pattern) -> decode_pattern . [ RPAREN ]
separated_nonempty_list(COMMA,decode_pattern) -> decode_pattern . COMMA separated_nonempty_list(COMMA,decode_pattern) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 562
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,decode_pattern) -> decode_pattern

State 562:
## Known stack suffix:
## decode_pattern COMMA
## LR(1) items:
separated_nonempty_list(COMMA,decode_pattern) -> decode_pattern COMMA . separated_nonempty_list(COMMA,decode_pattern) [ RPAREN ]
## Transitions:
-- On MASKLIT shift to state 537
-- On ID shift to state 13
-- On BITSLIT shift to state 538
-- On BANG shift to state 539
-- On separated_nonempty_list(COMMA,decode_pattern) shift to state 563
-- On ident shift to state 540
-- On decode_pattern shift to state 561
## Reductions:

State 563:
## Known stack suffix:
## decode_pattern COMMA separated_nonempty_list(COMMA,decode_pattern)
## LR(1) items:
separated_nonempty_list(COMMA,decode_pattern) -> decode_pattern COMMA separated_nonempty_list(COMMA,decode_pattern) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,decode_pattern) -> decode_pattern COMMA separated_nonempty_list(COMMA,decode_pattern)

State 564:
## Known stack suffix:
## CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT nonempty_list(decode_alt)
## LR(1) items:
decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT nonempty_list(decode_alt) . DEDENT [ DEDENT ]
## Transitions:
-- On DEDENT shift to state 565
## Reductions:

State 565:
## Known stack suffix:
## CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT nonempty_list(decode_alt) DEDENT
## LR(1) items:
decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT nonempty_list(decode_alt) DEDENT . [ DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decode_case -> CASE LPAREN loption(separated_nonempty_list(COMMA,decode_slice)) RPAREN OF EOL INDENT nonempty_list(decode_alt) DEDENT

State 566:
## Known stack suffix:
## decode_alt
## LR(1) items:
nonempty_list(decode_alt) -> decode_alt . [ DEDENT ]
nonempty_list(decode_alt) -> decode_alt . nonempty_list(decode_alt) [ DEDENT ]
## Transitions:
-- On WHEN shift to state 535
-- On nonempty_list(decode_alt) shift to state 567
-- On decode_alt shift to state 566
## Reductions:
-- On DEDENT
--   reduce production nonempty_list(decode_alt) -> decode_alt

State 567:
## Known stack suffix:
## decode_alt nonempty_list(decode_alt)
## LR(1) items:
nonempty_list(decode_alt) -> decode_alt nonempty_list(decode_alt) . [ DEDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(decode_alt) -> decode_alt nonempty_list(decode_alt)

State 568:
## Known stack suffix:
## ident
## LR(1) items:
decode_slice -> ident . [ RPAREN COMMA ]
separated_nonempty2_list(COLON,ident) -> ident . COLON ident [ RPAREN COMMA ]
separated_nonempty2_list(COLON,ident) -> ident . COLON separated_nonempty2_list(COLON,ident) [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 569
## Reductions:
-- On RPAREN COMMA
--   reduce production decode_slice -> ident

State 569:
## Known stack suffix:
## ident COLON
## LR(1) items:
separated_nonempty2_list(COLON,ident) -> ident COLON . ident [ RPAREN COMMA ]
separated_nonempty2_list(COLON,ident) -> ident COLON . separated_nonempty2_list(COLON,ident) [ RPAREN COMMA ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty2_list(COLON,ident) shift to state 570
-- On ident shift to state 571
## Reductions:

State 570:
## Known stack suffix:
## ident COLON separated_nonempty2_list(COLON,ident)
## LR(1) items:
separated_nonempty2_list(COLON,ident) -> ident COLON separated_nonempty2_list(COLON,ident) . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty2_list(COLON,ident) -> ident COLON separated_nonempty2_list(COLON,ident)

State 571:
## Known stack suffix:
## ident COLON ident
## LR(1) items:
separated_nonempty2_list(COLON,ident) -> ident . COLON ident [ RPAREN COMMA ]
separated_nonempty2_list(COLON,ident) -> ident COLON ident . [ RPAREN COMMA ]
separated_nonempty2_list(COLON,ident) -> ident . COLON separated_nonempty2_list(COLON,ident) [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 569
## Reductions:
-- On RPAREN COMMA
--   reduce production separated_nonempty2_list(COLON,ident) -> ident COLON ident

State 572:
## Known stack suffix:
## decode_slice
## LR(1) items:
separated_nonempty_list(COMMA,decode_slice) -> decode_slice . [ RPAREN ]
separated_nonempty_list(COMMA,decode_slice) -> decode_slice . COMMA separated_nonempty_list(COMMA,decode_slice) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 573
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,decode_slice) -> decode_slice

State 573:
## Known stack suffix:
## decode_slice COMMA
## LR(1) items:
separated_nonempty_list(COMMA,decode_slice) -> decode_slice COMMA . separated_nonempty_list(COMMA,decode_slice) [ RPAREN ]
## Transitions:
-- On INTLIT shift to state 473
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,decode_slice) shift to state 574
-- On separated_nonempty2_list(COLON,ident) shift to state 526
-- On offset shift to state 527
-- On ident shift to state 568
-- On decode_slice shift to state 572
## Reductions:

State 574:
## Known stack suffix:
## decode_slice COMMA separated_nonempty_list(COMMA,decode_slice)
## LR(1) items:
separated_nonempty_list(COMMA,decode_slice) -> decode_slice COMMA separated_nonempty_list(COMMA,decode_slice) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,decode_slice) -> decode_slice COMMA separated_nonempty_list(COMMA,decode_slice)

State 575:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident EOL INDENT decode_case
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_DECODE ident EOL INDENT decode_case . DEDENT [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On DEDENT shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_DECODE ident EOL INDENT decode_case DEDENT
## LR(1) items:
instruction_definition -> UNDERSCORE_UNDERSCORE_DECODE ident EOL INDENT decode_case DEDENT . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instruction_definition -> UNDERSCORE_UNDERSCORE_DECODE ident EOL INDENT decode_case DEDENT

State 577:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONFIG
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG . ty qualident EQ expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 578
-- On tident shift to state 38
## Reductions:

State 578:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONFIG ty
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG ty . qualident EQ expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 579
-- On ident shift to state 48
## Reductions:

State 579:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONFIG ty qualident
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG ty qualident . EQ expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EQ shift to state 580
## Reductions:

State 580:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ . expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 581
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 581:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ expr
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ expr . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 582
## Reductions:

State 582:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ expr SEMICOLON
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ expr SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ expr SEMICOLON EOL
## LR(1) items:
internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ expr SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production internal_definition -> UNDERSCORE_UNDERSCORE_CONFIG ty qualident EQ expr SEMICOLON EOL

State 584:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN . ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
type_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN . TYPE tidentdecl SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On TYPE shift to state 585
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 594
-- On tident shift to state 38
## Reductions:

State 585:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN TYPE
## LR(1) items:
type_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN TYPE . tidentdecl SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 586
-- On ID shift to state 13
-- On typeident shift to state 589
-- On tidentdecl shift to state 590
-- On ident shift to state 593
## Reductions:

State 586:
## Known stack suffix:
## QUALIFIER
## LR(1) items:
tidentdecl -> QUALIFIER . DOT ident [ SEMICOLON LBRACE IS EQ ]
## Transitions:
-- On DOT shift to state 587
## Reductions:

State 587:
## Known stack suffix:
## QUALIFIER DOT
## LR(1) items:
tidentdecl -> QUALIFIER DOT . ident [ SEMICOLON LBRACE IS EQ ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 588
## Reductions:

State 588:
## Known stack suffix:
## QUALIFIER DOT ident
## LR(1) items:
tidentdecl -> QUALIFIER DOT ident . [ SEMICOLON LBRACE IS EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tidentdecl -> QUALIFIER DOT ident

State 589:
## Known stack suffix:
## typeident
## LR(1) items:
tidentdecl -> typeident . [ SEMICOLON LBRACE IS EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tidentdecl -> typeident

State 590:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN TYPE tidentdecl
## LR(1) items:
type_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN TYPE tidentdecl . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 591
## Reductions:

State 591:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN TYPE tidentdecl SEMICOLON
## LR(1) items:
type_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN TYPE tidentdecl SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 592
## Reductions:

State 592:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN TYPE tidentdecl SEMICOLON EOL
## LR(1) items:
type_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN TYPE tidentdecl SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN TYPE tidentdecl SEMICOLON EOL

State 593:
## Known stack suffix:
## ident
## LR(1) items:
tidentdecl -> ident . [ SEMICOLON LBRACE IS EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tidentdecl -> ident

State 594:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN ty
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty . qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 595
-- On ident shift to state 48
## Reductions:

State 595:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN ty qualident
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty qualident . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LPAREN shift to state 596
## Reductions:

State 596:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 218
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,formal) shift to state 220
-- On loption(separated_nonempty_list(COMMA,formal)) shift to state 597
-- On formal shift to state 435
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,formal)) ->

State 597:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal))
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) . RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RPAREN shift to state 598
## Reductions:

State 598:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 599
## Reductions:

State 599:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL
## LR(1) items:
function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> UNDERSCORE_UNDERSCORE_BUILTIN ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL

State 601:
## Known stack suffix:
## TYPE
## LR(1) items:
type_declaration -> TYPE . tidentdecl SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
type_declaration -> TYPE . tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
type_declaration -> TYPE . tidentdecl EQ ty SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 586
-- On ID shift to state 13
-- On typeident shift to state 589
-- On tidentdecl shift to state 602
-- On ident shift to state 593
## Reductions:

State 602:
## Known stack suffix:
## TYPE tidentdecl
## LR(1) items:
type_declaration -> TYPE tidentdecl . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
type_declaration -> TYPE tidentdecl . IS LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
type_declaration -> TYPE tidentdecl . EQ ty SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 603
-- On IS shift to state 605
-- On EQ shift to state 615
## Reductions:

State 603:
## Known stack suffix:
## TYPE tidentdecl SEMICOLON
## LR(1) items:
type_declaration -> TYPE tidentdecl SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## TYPE tidentdecl SEMICOLON EOL
## LR(1) items:
type_declaration -> TYPE tidentdecl SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> TYPE tidentdecl SEMICOLON EOL

State 605:
## Known stack suffix:
## TYPE tidentdecl IS
## LR(1) items:
type_declaration -> TYPE tidentdecl IS . LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LPAREN shift to state 606
## Reductions:

State 606:
## Known stack suffix:
## TYPE tidentdecl IS LPAREN
## LR(1) items:
type_declaration -> TYPE tidentdecl IS LPAREN . separated_nonempty_list(COMMA,field_ns) RPAREN EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 607
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,field_ns) shift to state 609
-- On field_ns shift to state 612
## Reductions:

State 607:
## Known stack suffix:
## ty
## LR(1) items:
field_ns -> ty . ident [ RPAREN COMMA ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 608
## Reductions:

State 608:
## Known stack suffix:
## ty ident
## LR(1) items:
field_ns -> ty ident . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_ns -> ty ident

State 609:
## Known stack suffix:
## TYPE tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns)
## LR(1) items:
type_declaration -> TYPE tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns) . RPAREN EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RPAREN shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## TYPE tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN
## LR(1) items:
type_declaration -> TYPE tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 611
## Reductions:

State 611:
## Known stack suffix:
## TYPE tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN EOL
## LR(1) items:
type_declaration -> TYPE tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> TYPE tidentdecl IS LPAREN separated_nonempty_list(COMMA,field_ns) RPAREN EOL

State 612:
## Known stack suffix:
## field_ns
## LR(1) items:
separated_nonempty_list(COMMA,field_ns) -> field_ns . [ RPAREN ]
separated_nonempty_list(COMMA,field_ns) -> field_ns . COMMA separated_nonempty_list(COMMA,field_ns) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 613
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,field_ns) -> field_ns

State 613:
## Known stack suffix:
## field_ns COMMA
## LR(1) items:
separated_nonempty_list(COMMA,field_ns) -> field_ns COMMA . separated_nonempty_list(COMMA,field_ns) [ RPAREN ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 607
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,field_ns) shift to state 614
-- On field_ns shift to state 612
## Reductions:

State 614:
## Known stack suffix:
## field_ns COMMA separated_nonempty_list(COMMA,field_ns)
## LR(1) items:
separated_nonempty_list(COMMA,field_ns) -> field_ns COMMA separated_nonempty_list(COMMA,field_ns) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,field_ns) -> field_ns COMMA separated_nonempty_list(COMMA,field_ns)

State 615:
## Known stack suffix:
## TYPE tidentdecl EQ
## LR(1) items:
type_declaration -> TYPE tidentdecl EQ . ty SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 616
-- On tident shift to state 38
## Reductions:

State 616:
## Known stack suffix:
## TYPE tidentdecl EQ ty
## LR(1) items:
type_declaration -> TYPE tidentdecl EQ ty . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 617
## Reductions:

State 617:
## Known stack suffix:
## TYPE tidentdecl EQ ty SEMICOLON
## LR(1) items:
type_declaration -> TYPE tidentdecl EQ ty SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 618
## Reductions:

State 618:
## Known stack suffix:
## TYPE tidentdecl EQ ty SEMICOLON EOL
## LR(1) items:
type_declaration -> TYPE tidentdecl EQ ty SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> TYPE tidentdecl EQ ty SEMICOLON EOL

State 619:
## Known stack suffix:
## RECORD
## LR(1) items:
type_declaration -> RECORD . tidentdecl LBRACE nonempty_list(field) RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 586
-- On ID shift to state 13
-- On typeident shift to state 589
-- On tidentdecl shift to state 620
-- On ident shift to state 593
## Reductions:

State 620:
## Known stack suffix:
## RECORD tidentdecl
## LR(1) items:
type_declaration -> RECORD tidentdecl . LBRACE nonempty_list(field) RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LBRACE shift to state 621
## Reductions:

State 621:
## Known stack suffix:
## RECORD tidentdecl LBRACE
## LR(1) items:
type_declaration -> RECORD tidentdecl LBRACE . nonempty_list(field) RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 622
-- On tident shift to state 38
-- On nonempty_list(field) shift to state 625
-- On field shift to state 629
## Reductions:

State 622:
## Known stack suffix:
## ty
## LR(1) items:
field -> ty . ident SEMICOLON [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID RBRACE QUALIFIER LPAREN BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## ty ident
## LR(1) items:
field -> ty ident . SEMICOLON [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID RBRACE QUALIFIER LPAREN BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 624
## Reductions:

State 624:
## Known stack suffix:
## ty ident SEMICOLON
## LR(1) items:
field -> ty ident SEMICOLON . [ UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID RBRACE QUALIFIER LPAREN BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field -> ty ident SEMICOLON

State 625:
## Known stack suffix:
## RECORD tidentdecl LBRACE nonempty_list(field)
## LR(1) items:
type_declaration -> RECORD tidentdecl LBRACE nonempty_list(field) . RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RBRACE shift to state 626
## Reductions:

State 626:
## Known stack suffix:
## RECORD tidentdecl LBRACE nonempty_list(field) RBRACE
## LR(1) items:
type_declaration -> RECORD tidentdecl LBRACE nonempty_list(field) RBRACE . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## RECORD tidentdecl LBRACE nonempty_list(field) RBRACE SEMICOLON
## LR(1) items:
type_declaration -> RECORD tidentdecl LBRACE nonempty_list(field) RBRACE SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## RECORD tidentdecl LBRACE nonempty_list(field) RBRACE SEMICOLON EOL
## LR(1) items:
type_declaration -> RECORD tidentdecl LBRACE nonempty_list(field) RBRACE SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> RECORD tidentdecl LBRACE nonempty_list(field) RBRACE SEMICOLON EOL

State 629:
## Known stack suffix:
## field
## LR(1) items:
nonempty_list(field) -> field . [ RBRACE ]
nonempty_list(field) -> field . nonempty_list(field) [ RBRACE ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 622
-- On tident shift to state 38
-- On nonempty_list(field) shift to state 630
-- On field shift to state 629
## Reductions:
-- On RBRACE
--   reduce production nonempty_list(field) -> field

State 630:
## Known stack suffix:
## field nonempty_list(field)
## LR(1) items:
nonempty_list(field) -> field nonempty_list(field) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(field) -> field nonempty_list(field)

State 631:
## Known stack suffix:
## ENUMERATION
## LR(1) items:
type_declaration -> ENUMERATION . tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 586
-- On ID shift to state 13
-- On typeident shift to state 589
-- On tidentdecl shift to state 632
-- On ident shift to state 593
## Reductions:

State 632:
## Known stack suffix:
## ENUMERATION tidentdecl
## LR(1) items:
type_declaration -> ENUMERATION tidentdecl . LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LBRACE shift to state 633
## Reductions:

State 633:
## Known stack suffix:
## ENUMERATION tidentdecl LBRACE
## LR(1) items:
type_declaration -> ENUMERATION tidentdecl LBRACE . loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On separated_nonempty_list(COMMA,ident) shift to state 634
-- On loption(separated_nonempty_list(COMMA,ident)) shift to state 635
-- On ident shift to state 149
## Reductions:
-- On RBRACE
--   reduce production loption(separated_nonempty_list(COMMA,ident)) ->

State 634:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident) . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,ident)) -> separated_nonempty_list(COMMA,ident)

State 635:
## Known stack suffix:
## ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident))
## LR(1) items:
type_declaration -> ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) . RBRACE SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RBRACE shift to state 636
## Reductions:

State 636:
## Known stack suffix:
## ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE
## LR(1) items:
type_declaration -> ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 637
## Reductions:

State 637:
## Known stack suffix:
## ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON
## LR(1) items:
type_declaration -> ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 638
## Reductions:

State 638:
## Known stack suffix:
## ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON EOL
## LR(1) items:
type_declaration -> ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> ENUMERATION tidentdecl LBRACE loption(separated_nonempty_list(COMMA,ident)) RBRACE SEMICOLON EOL

State 639:
## Known stack suffix:
## CONSTANT
## LR(1) items:
variable_declaration -> CONSTANT . ty qualident EQ expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 640
-- On tident shift to state 38
## Reductions:

State 640:
## Known stack suffix:
## CONSTANT ty
## LR(1) items:
variable_declaration -> CONSTANT ty . qualident EQ expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 641
-- On ident shift to state 48
## Reductions:

State 641:
## Known stack suffix:
## CONSTANT ty qualident
## LR(1) items:
variable_declaration -> CONSTANT ty qualident . EQ expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EQ shift to state 642
## Reductions:

State 642:
## Known stack suffix:
## CONSTANT ty qualident EQ
## LR(1) items:
variable_declaration -> CONSTANT ty qualident EQ . expr SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 643
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 643:
## Known stack suffix:
## CONSTANT ty qualident EQ expr
## LR(1) items:
variable_declaration -> CONSTANT ty qualident EQ expr . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 644
## Reductions:

State 644:
## Known stack suffix:
## CONSTANT ty qualident EQ expr SEMICOLON
## LR(1) items:
variable_declaration -> CONSTANT ty qualident EQ expr SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 645
## Reductions:

State 645:
## Known stack suffix:
## CONSTANT ty qualident EQ expr SEMICOLON EOL
## LR(1) items:
variable_declaration -> CONSTANT ty qualident EQ expr SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> CONSTANT ty qualident EQ expr SEMICOLON EOL

State 646:
## Known stack suffix:
## ARRAY
## LR(1) items:
ty -> ARRAY . LBRACK ixtype RBRACK OF ty [ QUALIFIER ID ]
variable_declaration -> ARRAY . ty qualident LBRACK ixtype RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On LBRACK shift to state 30
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 647
-- On tident shift to state 38
## Reductions:

State 647:
## Known stack suffix:
## ARRAY ty
## LR(1) items:
variable_declaration -> ARRAY ty . qualident LBRACK ixtype RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 648
-- On ident shift to state 48
## Reductions:

State 648:
## Known stack suffix:
## ARRAY ty qualident
## LR(1) items:
variable_declaration -> ARRAY ty qualident . LBRACK ixtype RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LBRACK shift to state 649
## Reductions:

State 649:
## Known stack suffix:
## ARRAY ty qualident LBRACK
## LR(1) items:
variable_declaration -> ARRAY ty qualident LBRACK . ixtype RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 157
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ixtype shift to state 650
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 171
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 650:
## Known stack suffix:
## ARRAY ty qualident LBRACK ixtype
## LR(1) items:
variable_declaration -> ARRAY ty qualident LBRACK ixtype . RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RBRACK shift to state 651
## Reductions:

State 651:
## Known stack suffix:
## ARRAY ty qualident LBRACK ixtype RBRACK
## LR(1) items:
variable_declaration -> ARRAY ty qualident LBRACK ixtype RBRACK . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 652
## Reductions:

State 652:
## Known stack suffix:
## ARRAY ty qualident LBRACK ixtype RBRACK SEMICOLON
## LR(1) items:
variable_declaration -> ARRAY ty qualident LBRACK ixtype RBRACK SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## ARRAY ty qualident LBRACK ixtype RBRACK SEMICOLON EOL
## LR(1) items:
variable_declaration -> ARRAY ty qualident LBRACK ixtype RBRACK SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> ARRAY ty qualident LBRACK ixtype RBRACK SEMICOLON EOL

State 654:
## Known stack suffix:
## variable_declaration
## LR(1) items:
declaration -> variable_declaration . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> variable_declaration

State 655:
## Known stack suffix:
## type_declaration
## LR(1) items:
declaration -> type_declaration . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> type_declaration

State 656:
## Known stack suffix:
## ty
## LR(1) items:
function_declaration -> ty . qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
function_declaration -> ty . qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty . qualident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty . qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty . qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
variable_declaration -> ty . qualident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On QUALIFIER shift to state 119
-- On ID shift to state 13
-- On qualident shift to state 657
-- On ident shift to state 48
## Reductions:

State 657:
## Known stack suffix:
## ty qualident
## LR(1) items:
function_declaration -> ty qualident . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
function_declaration -> ty qualident . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty qualident . opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty qualident . LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty qualident . LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
variable_declaration -> ty qualident . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 658
-- On LPAREN shift to state 660
-- On LBRACK shift to state 666
-- On EOL shift to state 223
-- On opt_indented_block shift to state 672
-- On indented_block shift to state 257
## Reductions:

State 658:
## Known stack suffix:
## ty qualident SEMICOLON
## LR(1) items:
variable_declaration -> ty qualident SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## ty qualident SEMICOLON EOL
## LR(1) items:
variable_declaration -> ty qualident SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> ty qualident SEMICOLON EOL

State 660:
## Known stack suffix:
## ty qualident LPAREN
## LR(1) items:
function_declaration -> ty qualident LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
function_declaration -> ty qualident LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 218
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,formal) shift to state 220
-- On loption(separated_nonempty_list(COMMA,formal)) shift to state 661
-- On formal shift to state 435
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,formal)) ->

State 661:
## Known stack suffix:
## ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal))
## LR(1) items:
function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) . RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) . RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RPAREN shift to state 662
## Reductions:

State 662:
## Known stack suffix:
## ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
## LR(1) items:
function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 663
-- On EOL shift to state 223
-- On opt_indented_block shift to state 665
-- On indented_block shift to state 257
## Reductions:

State 663:
## Known stack suffix:
## ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON
## LR(1) items:
function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 664
## Reductions:

State 664:
## Known stack suffix:
## ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL
## LR(1) items:
function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL

State 665:
## Known stack suffix:
## ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block
## LR(1) items:
function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> ty qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block

State 666:
## Known stack suffix:
## ty qualident LBRACK
## LR(1) items:
getter_declaration -> ty qualident LBRACK . loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty qualident LBRACK . loption(separated_nonempty_list(COMMA,formal)) RBRACK opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 218
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,formal) shift to state 220
-- On loption(separated_nonempty_list(COMMA,formal)) shift to state 667
-- On formal shift to state 435
## Reductions:
-- On RBRACK
--   reduce production loption(separated_nonempty_list(COMMA,formal)) ->

State 667:
## Known stack suffix:
## ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal))
## LR(1) items:
getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) . RBRACK SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) . RBRACK opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RBRACK shift to state 668
## Reductions:

State 668:
## Known stack suffix:
## ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK
## LR(1) items:
getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK . opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 669
-- On EOL shift to state 223
-- On opt_indented_block shift to state 671
-- On indented_block shift to state 257
## Reductions:

State 669:
## Known stack suffix:
## ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON
## LR(1) items:
getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 670
## Reductions:

State 670:
## Known stack suffix:
## ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON EOL
## LR(1) items:
getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK SEMICOLON EOL

State 671:
## Known stack suffix:
## ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK opt_indented_block
## LR(1) items:
getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK opt_indented_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production getter_declaration -> ty qualident LBRACK loption(separated_nonempty_list(COMMA,formal)) RBRACK opt_indented_block

State 672:
## Known stack suffix:
## ty qualident opt_indented_block
## LR(1) items:
getter_declaration -> ty qualident opt_indented_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production getter_declaration -> ty qualident opt_indented_block

State 673:
## Known stack suffix:
## setter_declaration
## LR(1) items:
declaration -> setter_declaration . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> setter_declaration

State 674:
## Known stack suffix:
## qualident
## LR(1) items:
procedure_declaration -> qualident . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
procedure_declaration -> qualident . LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident . EQ ty ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident . EQ ty ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident . LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident . LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On LPAREN shift to state 675
-- On LBRACK shift to state 681
-- On EQ shift to state 698
## Reductions:

State 675:
## Known stack suffix:
## qualident LPAREN
## LR(1) items:
procedure_declaration -> qualident LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
procedure_declaration -> qualident LPAREN . loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 218
-- On tident shift to state 38
-- On separated_nonempty_list(COMMA,formal) shift to state 220
-- On loption(separated_nonempty_list(COMMA,formal)) shift to state 676
-- On formal shift to state 435
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,formal)) ->

State 676:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,formal))
## LR(1) items:
procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) . RPAREN SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) . RPAREN opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RPAREN shift to state 677
## Reductions:

State 677:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN
## LR(1) items:
procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN . opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 678
-- On EOL shift to state 223
-- On opt_indented_block shift to state 680
-- On indented_block shift to state 257
## Reductions:

State 678:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON
## LR(1) items:
procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 679
## Reductions:

State 679:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL
## LR(1) items:
procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN SEMICOLON EOL

State 680:
## Known stack suffix:
## qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block
## LR(1) items:
procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production procedure_declaration -> qualident LPAREN loption(separated_nonempty_list(COMMA,formal)) RPAREN opt_indented_block

State 681:
## Known stack suffix:
## qualident LBRACK
## LR(1) items:
setter_declaration -> qualident LBRACK . loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident LBRACK . loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 682
-- On tident shift to state 38
-- On sformal shift to state 686
-- On separated_nonempty_list(COMMA,sformal) shift to state 689
-- On loption(separated_nonempty_list(COMMA,sformal)) shift to state 690
## Reductions:
-- On RBRACK
--   reduce production loption(separated_nonempty_list(COMMA,sformal)) ->

State 682:
## Known stack suffix:
## ty
## LR(1) items:
sformal -> ty . ident [ RBRACK COMMA ]
sformal -> ty . AMPERSAND ident [ RBRACK COMMA ]
## Transitions:
-- On ID shift to state 13
-- On AMPERSAND shift to state 683
-- On ident shift to state 685
## Reductions:

State 683:
## Known stack suffix:
## ty AMPERSAND
## LR(1) items:
sformal -> ty AMPERSAND . ident [ RBRACK COMMA ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 684
## Reductions:

State 684:
## Known stack suffix:
## ty AMPERSAND ident
## LR(1) items:
sformal -> ty AMPERSAND ident . [ RBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sformal -> ty AMPERSAND ident

State 685:
## Known stack suffix:
## ty ident
## LR(1) items:
sformal -> ty ident . [ RBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sformal -> ty ident

State 686:
## Known stack suffix:
## sformal
## LR(1) items:
separated_nonempty_list(COMMA,sformal) -> sformal . [ RBRACK ]
separated_nonempty_list(COMMA,sformal) -> sformal . COMMA separated_nonempty_list(COMMA,sformal) [ RBRACK ]
## Transitions:
-- On COMMA shift to state 687
## Reductions:
-- On RBRACK
--   reduce production separated_nonempty_list(COMMA,sformal) -> sformal

State 687:
## Known stack suffix:
## sformal COMMA
## LR(1) items:
separated_nonempty_list(COMMA,sformal) -> sformal COMMA . separated_nonempty_list(COMMA,sformal) [ RBRACK ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 682
-- On tident shift to state 38
-- On sformal shift to state 686
-- On separated_nonempty_list(COMMA,sformal) shift to state 688
## Reductions:

State 688:
## Known stack suffix:
## sformal COMMA separated_nonempty_list(COMMA,sformal)
## LR(1) items:
separated_nonempty_list(COMMA,sformal) -> sformal COMMA separated_nonempty_list(COMMA,sformal) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,sformal) -> sformal COMMA separated_nonempty_list(COMMA,sformal)

State 689:
## Known stack suffix:
## separated_nonempty_list(COMMA,sformal)
## LR(1) items:
loption(separated_nonempty_list(COMMA,sformal)) -> separated_nonempty_list(COMMA,sformal) . [ RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,sformal)) -> separated_nonempty_list(COMMA,sformal)

State 690:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal))
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) . RBRACK EQ ty ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) . RBRACK EQ ty ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On RBRACK shift to state 691
## Reductions:

State 691:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK . EQ ty ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK . EQ ty ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EQ shift to state 692
## Reductions:

State 692:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ . ty ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ . ty ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 693
-- On tident shift to state 38
## Reductions:

State 693:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty . ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty . ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident . opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 695
-- On EOL shift to state 223
-- On opt_indented_block shift to state 697
-- On indented_block shift to state 257
## Reductions:

State 695:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident SEMICOLON
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 696
## Reductions:

State 696:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident SEMICOLON EOL
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident SEMICOLON EOL

State 697:
## Known stack suffix:
## qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident opt_indented_block
## LR(1) items:
setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident opt_indented_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production setter_declaration -> qualident LBRACK loption(separated_nonempty_list(COMMA,sformal)) RBRACK EQ ty ident opt_indented_block

State 698:
## Known stack suffix:
## qualident EQ
## LR(1) items:
setter_declaration -> qualident EQ . ty ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident EQ . ty ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On QUALIFIER shift to state 161
-- On LPAREN shift to state 163
-- On BITS shift to state 26
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 699
-- On tident shift to state 38
## Reductions:

State 699:
## Known stack suffix:
## qualident EQ ty
## LR(1) items:
setter_declaration -> qualident EQ ty . ident SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident EQ ty . ident opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On ID shift to state 13
-- On ident shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## qualident EQ ty ident
## LR(1) items:
setter_declaration -> qualident EQ ty ident . SEMICOLON EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
setter_declaration -> qualident EQ ty ident . opt_indented_block [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On SEMICOLON shift to state 701
-- On EOL shift to state 223
-- On opt_indented_block shift to state 703
-- On indented_block shift to state 257
## Reductions:

State 701:
## Known stack suffix:
## qualident EQ ty ident SEMICOLON
## LR(1) items:
setter_declaration -> qualident EQ ty ident SEMICOLON . EOL [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
-- On EOL shift to state 702
## Reductions:

State 702:
## Known stack suffix:
## qualident EQ ty ident SEMICOLON EOL
## LR(1) items:
setter_declaration -> qualident EQ ty ident SEMICOLON EOL . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production setter_declaration -> qualident EQ ty ident SEMICOLON EOL

State 703:
## Known stack suffix:
## qualident EQ ty ident opt_indented_block
## LR(1) items:
setter_declaration -> qualident EQ ty ident opt_indented_block . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production setter_declaration -> qualident EQ ty ident opt_indented_block

State 704:
## Known stack suffix:
## procedure_declaration
## LR(1) items:
declaration -> procedure_declaration . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> procedure_declaration

State 705:
## Known stack suffix:
## leadingblank list(declaration)
## LR(1) items:
declarations -> leadingblank list(declaration) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> leadingblank list(declaration)

State 706:
## Known stack suffix:
## internal_definition
## LR(1) items:
declaration -> internal_definition . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> internal_definition

State 707:
## Known stack suffix:
## instruction_definition
## LR(1) items:
declaration -> instruction_definition . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> instruction_definition

State 708:
## Known stack suffix:
## getter_declaration
## LR(1) items:
declaration -> getter_declaration . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> getter_declaration

State 709:
## Known stack suffix:
## function_declaration
## LR(1) items:
declaration -> function_declaration . [ UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> function_declaration

State 710:
## Known stack suffix:
## declaration
## LR(1) items:
list(declaration) -> declaration . list(declaration) [ EOF ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_OPERATOR_TWO shift to state 202
-- On UNDERSCORE_UNDERSCORE_OPERATOR_ONE shift to state 208
-- On UNDERSCORE_UNDERSCORE_NEWMAP shift to state 214
-- On UNDERSCORE_UNDERSCORE_NEWEVENT shift to state 438
-- On UNDERSCORE_UNDERSCORE_MAP shift to state 445
-- On UNDERSCORE_UNDERSCORE_INSTRUCTION shift to state 460
-- On UNDERSCORE_UNDERSCORE_FUNCTION shift to state 511
-- On UNDERSCORE_UNDERSCORE_EVENT shift to state 516
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 519
-- On UNDERSCORE_UNDERSCORE_CONFIG shift to state 577
-- On UNDERSCORE_UNDERSCORE_BUILTIN shift to state 584
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On TYPE shift to state 601
-- On RECORD shift to state 619
-- On QUALIFIER shift to state 11
-- On LPAREN shift to state 163
-- On ID shift to state 13
-- On ENUMERATION shift to state 631
-- On CONSTANT shift to state 639
-- On BITS shift to state 26
-- On ARRAY shift to state 646
-- On variable_declaration shift to state 654
-- On typeident shift to state 32
-- On type_declaration shift to state 655
-- On ty shift to state 656
-- On tident shift to state 38
-- On setter_declaration shift to state 673
-- On qualident shift to state 674
-- On procedure_declaration shift to state 704
-- On list(declaration) shift to state 711
-- On internal_definition shift to state 706
-- On instruction_definition shift to state 707
-- On ident shift to state 48
-- On getter_declaration shift to state 708
-- On function_declaration shift to state 709
-- On declaration shift to state 710
## Reductions:
-- On EOF
--   reduce production list(declaration) ->

State 711:
## Known stack suffix:
## declaration list(declaration)
## LR(1) items:
list(declaration) -> declaration list(declaration) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(declaration) -> declaration list(declaration)

State 712:
## Known stack suffix:
## declarations_start
## LR(1) items:
declarations_start' -> declarations_start . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept declarations_start

State 713:
## Known stack suffix:
## declarations
## LR(1) items:
declarations_start -> declarations . EOF [ # ]
## Transitions:
-- On EOF shift to state 714
## Reductions:

State 714:
## Known stack suffix:
## declarations EOF
## LR(1) items:
declarations_start -> declarations EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production declarations_start -> declarations EOF

State 715:
## Known stack suffix:
##
## LR(1) items:
expr_command_start' -> . expr_command_start [ # ]
## Transitions:
-- On EOL shift to state 716
-- On expr_command_start shift to state 718
-- On expr_command shift to state 719
## Reductions:

State 716:
## Known stack suffix:
## EOL
## LR(1) items:
expr_command -> EOL . expr [ EOF ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 717
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 717:
## Known stack suffix:
## EOL expr
## LR(1) items:
expr_command -> EOL expr . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_command -> EOL expr

State 718:
## Known stack suffix:
## expr_command_start
## LR(1) items:
expr_command_start' -> expr_command_start . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept expr_command_start

State 719:
## Known stack suffix:
## expr_command
## LR(1) items:
expr_command_start -> expr_command . EOF [ # ]
## Transitions:
-- On EOF shift to state 720
## Reductions:

State 720:
## Known stack suffix:
## expr_command EOF
## LR(1) items:
expr_command_start -> expr_command EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production expr_command_start -> expr_command EOF

State 721:
## Known stack suffix:
##
## LR(1) items:
impdef_command_start' -> . impdef_command_start [ # ]
## Transitions:
-- On EOL shift to state 722
-- On impdef_command_start shift to state 726
-- On impdef_command shift to state 727
## Reductions:

State 722:
## Known stack suffix:
## EOL
## LR(1) items:
impdef_command -> EOL . STRINGLIT EQ expr [ EOF ]
## Transitions:
-- On STRINGLIT shift to state 723
## Reductions:

State 723:
## Known stack suffix:
## EOL STRINGLIT
## LR(1) items:
impdef_command -> EOL STRINGLIT . EQ expr [ EOF ]
## Transitions:
-- On EQ shift to state 724
## Reductions:

State 724:
## Known stack suffix:
## EOL STRINGLIT EQ
## LR(1) items:
impdef_command -> EOL STRINGLIT EQ . expr [ EOF ]
## Transitions:
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On STRINGLIT shift to state 9
-- On REALLIT shift to state 10
-- On QUALIFIER shift to state 11
-- On NOT shift to state 16
-- On MINUS shift to state 17
-- On MASKLIT shift to state 18
-- On LPAREN shift to state 19
-- On INTLIT shift to state 20
-- On IF shift to state 21
-- On ID shift to state 13
-- On HEXLIT shift to state 24
-- On BITSLIT shift to state 25
-- On BITS shift to state 26
-- On BANG shift to state 28
-- On ARRAY shift to state 29
-- On unop shift to state 31
-- On typeident shift to state 32
-- On ty shift to state 33
-- On tident shift to state 38
-- On qualident shift to state 42
-- On literal_expression shift to state 47
-- On ident shift to state 48
-- On fexpr shift to state 49
-- On expr shift to state 725
-- On conditional_expression shift to state 59
-- On cexpr shift to state 60
-- On bexpr shift to state 61
-- On aexpr shift to state 93
## Reductions:

State 725:
## Known stack suffix:
## EOL STRINGLIT EQ expr
## LR(1) items:
impdef_command -> EOL STRINGLIT EQ expr . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production impdef_command -> EOL STRINGLIT EQ expr

State 726:
## Known stack suffix:
## impdef_command_start
## LR(1) items:
impdef_command_start' -> impdef_command_start . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept impdef_command_start

State 727:
## Known stack suffix:
## impdef_command
## LR(1) items:
impdef_command_start -> impdef_command . EOF [ # ]
## Transitions:
-- On EOF shift to state 728
## Reductions:

State 728:
## Known stack suffix:
## impdef_command EOF
## LR(1) items:
impdef_command_start -> impdef_command EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production impdef_command_start -> impdef_command EOF

State 729:
## Known stack suffix:
##
## LR(1) items:
stmt_command_start' -> . stmt_command_start [ # ]
## Transitions:
-- On EOL shift to state 730
-- On stmt_command_start shift to state 734
-- On stmt_command shift to state 735
## Reductions:

State 730:
## Known stack suffix:
## EOL
## LR(1) items:
stmt_command -> EOL . stmt [ EOF ]
## Transitions:
-- On WHILE shift to state 225
-- On UNPREDICTABLE shift to state 230
-- On UNDERSCORE_UNDERSCORE_REGISTER shift to state 3
-- On UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN shift to state 235
-- On UNDERSCORE_UNDERSCORE_DECODE shift to state 239
-- On UNDEFINED shift to state 243
-- On TYPEOF shift to state 6
-- On TYPEID shift to state 8
-- On TRY shift to state 248
-- On THROW shift to state 260
-- On SEE shift to state 263
-- On RETURN shift to state 272
-- On REPEAT shift to state 364
-- On QUALIFIER shift to state 11
-- On MINUS shift to state 276
-- On LPAREN shift to state 277
-- On LBRACK shift to state 278
-- On IMPLEMENTATION_UNDERSCORE_DEFINED shift to state 299
-- On IF shift to state 370
-- On ID shift to state 13
-- On FOR shift to state 394
-- On CONSTRAINED_UNDERSCORE_UNPREDICTABLE shift to state 308
-- On CONSTANT shift to state 310
-- On CASE shift to state 403
-- On BITS shift to state 26
-- On ASSERT shift to state 316
-- On ARRAY shift to state 29
-- On typeident shift to state 32
-- On ty shift to state 319
-- On tident shift to state 38
-- On stmt shift to state 731
-- On simple_stmt shift to state 732
-- On repetitive_stmt shift to state 427
-- On qualident shift to state 337
-- On lexpr shift to state 343
-- On ident shift to state 48
-- On conditional_stmt shift to state 429
-- On compound_stmt shift to state 733
-- On catch_stmt shift to state 431
-- On assignment_stmt shift to state 347
## Reductions:

State 731:
## Known stack suffix:
## EOL stmt
## LR(1) items:
stmt_command -> EOL stmt . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt_command -> EOL stmt

State 732:
## Known stack suffix:
## simple_stmt
## LR(1) items:
stmt -> simple_stmt . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> simple_stmt

State 733:
## Known stack suffix:
## compound_stmt
## LR(1) items:
stmt -> compound_stmt . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> compound_stmt

State 734:
## Known stack suffix:
## stmt_command_start
## LR(1) items:
stmt_command_start' -> stmt_command_start . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept stmt_command_start

State 735:
## Known stack suffix:
## stmt_command
## LR(1) items:
stmt_command_start -> stmt_command . EOF [ # ]
## Transitions:
-- On EOF shift to state 736
## Reductions:

State 736:
## Known stack suffix:
## stmt_command EOF
## LR(1) items:
stmt_command_start -> stmt_command EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production stmt_command_start -> stmt_command EOF

