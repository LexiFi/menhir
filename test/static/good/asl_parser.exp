File "asl_parser.mly", line 748, characters 0-11:
Warning: symbol dummy_binop is unreachable from any of the start symbol(s).
File "asl_parser.mly", line 786, characters 0-10:
Warning: symbol expr_spice is unreachable from any of the start symbol(s).
File "asl_parser.mly", line 152, characters 0-1:
Warning: symbol l is unreachable from any of the start symbol(s).
File "asl_parser.mly", line 522, characters 0-11:
Warning: symbol lexpr_spice is unreachable from any of the start symbol(s).
File "asl_parser.mly", line 488, characters 0-14:
Warning: symbol nonempty_block is unreachable from any of the start symbol(s).
File "asl_parser.mly", line 366, characters 0-8:
Warning: symbol operator is unreachable from any of the start symbol(s).
File "asl_parser.mly", line 570, characters 0-10:
Warning: symbol stmt_spice is unreachable from any of the start symbol(s).
File "asl_parser.mly", line 682, characters 0-5:
Warning: symbol zexpr is unreachable from any of the start symbol(s).
Grammar has 129 nonterminal symbols, among which 4 start symbols.
Grammar has 120 terminal symbols.
Grammar has 334 productions.
nullable(variable_declaration) = false
nullable(unop) = false
nullable(typeident) = false
nullable(type_declaration) = false
nullable(ty) = false
nullable(tidentdecl) = false
nullable(tident) = false
nullable(stmts) = false
nullable(stmt_command_start) = false
nullable(stmt_command) = false
nullable(stmt) = false
nullable(slice) = false
nullable(simple_stmts) = false
nullable(simple_stmt_list) = false
nullable(simple_stmt) = false
nullable(simple_if_stmt) = false
nullable(simple_elsif) = false
nullable(sformal) = false
nullable(sfactor) = false
nullable(sexpr) = false
nullable(setter_declaration) = false
nullable(separated_nonempty_list(COMMA,ty)) = false
nullable(separated_nonempty_list(COMMA,slice)) = false
nullable(separated_nonempty_list(COMMA,sformal)) = false
nullable(separated_nonempty_list(COMMA,pattern)) = false
nullable(separated_nonempty_list(COMMA,mapfield)) = false
nullable(separated_nonempty_list(COMMA,ident)) = false
nullable(separated_nonempty_list(COMMA,formal)) = false
nullable(separated_nonempty_list(COMMA,field_ns)) = false
nullable(separated_nonempty_list(COMMA,expr)) = false
nullable(separated_nonempty_list(COMMA,decode_slice)) = false
nullable(separated_nonempty_list(COMMA,decode_pattern)) = false
nullable(separated_nonempty_list(COMMA,apattern)) = false
nullable(separated_nonempty2_list(COMMA,pattern)) = false
nullable(separated_nonempty2_list(COMMA,lexpr)) = false
nullable(separated_nonempty2_list(COMMA,expr)) = false
nullable(separated_nonempty2_list(COLON,ident)) = false
nullable(scexpr) = false
nullable(s_elsif) = false
nullable(repetitive_stmt) = false
nullable(regfields) = true
nullable(regfield) = false
nullable(qualident) = false
nullable(procedure_declaration) = false
nullable(possibly_empty_block) = false
nullable(pattern) = false
nullable(optmapcond) = true
nullable(optional_else) = true
nullable(opt_stringLit) = true
nullable(opt_postdecode) = true
nullable(opt_otherwise) = true
nullable(opt_indented_block) = false
nullable(opt_conditional) = true
nullable(opt_altcond) = true
nullable(opcode_value) = false
nullable(offset) = false
nullable(nonempty_list(stmts)) = false
nullable(nonempty_list(simple_stmt)) = false
nullable(nonempty_list(field)) = false
nullable(nonempty_list(encoding)) = false
nullable(nonempty_list(decode_alt)) = false
nullable(nonempty_list(alt)) = false
nullable(mapfield) = false
nullable(loption(separated_nonempty_list(COMMA,ty))) = true
nullable(loption(separated_nonempty_list(COMMA,slice))) = true
nullable(loption(separated_nonempty_list(COMMA,sformal))) = true
nullable(loption(separated_nonempty_list(COMMA,mapfield))) = true
nullable(loption(separated_nonempty_list(COMMA,ident))) = true
nullable(loption(separated_nonempty_list(COMMA,formal))) = true
nullable(loption(separated_nonempty_list(COMMA,expr))) = true
nullable(loption(separated_nonempty_list(COMMA,decode_slice))) = true
nullable(loption(separated_nonempty_list(COMMA,decode_pattern))) = true
nullable(loption(separated_nonempty_list(COMMA,apattern))) = true
nullable(literal_expression) = false
nullable(list(simple_elsif)) = true
nullable(list(sfactor)) = true
nullable(list(s_elsif)) = true
nullable(list(regfield)) = true
nullable(list(instr_unpred)) = true
nullable(list(instr_field)) = true
nullable(list(factor)) = true
nullable(list(e_elsif)) = true
nullable(list(declaration)) = true
nullable(list(catcher)) = true
nullable(lexpr) = false
nullable(leadingblank) = true
nullable(ixtype) = false
nullable(internal_definition) = false
nullable(instruction_definition) = false
nullable(instr_unpred) = false
nullable(instr_field) = false
nullable(indented_block) = false
nullable(impdef_command_start) = false
nullable(impdef_command) = false
nullable(ident) = false
nullable(getter_declaration) = false
nullable(function_declaration) = false
nullable(formal) = false
nullable(field_ns) = false
nullable(field) = false
nullable(fexpr) = false
nullable(factor) = false
nullable(expr_command_start) = false
nullable(expr_command) = false
nullable(expr) = false
nullable(encoding) = false
nullable(e_elsif) = false
nullable(direction) = false
nullable(decode_slice) = false
nullable(decode_pattern) = false
nullable(decode_case) = false
nullable(decode_body) = false
nullable(decode_alt) = false
nullable(declarations_start) = false
nullable(declarations) = true
nullable(declaration) = false
nullable(conditional_stmt) = false
nullable(conditional_expression) = false
nullable(compound_stmt) = false
nullable(cexpr) = false
nullable(catcher) = false
nullable(catch_stmt) = false
nullable(binop_or_concat) = false
nullable(binop) = false
nullable(bexpr) = false
nullable(assignment_stmt) = false
nullable(apattern) = false
nullable(alt) = false
nullable(aexpr) = false
first(variable_declaration) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN CONSTANT BITS ARRAY
first(unop) = NOT MINUS BANG
first(typeident) = TYPEID
first(type_declaration) = UNDERSCORE_UNDERSCORE_BUILTIN TYPE RECORD ENUMERATION
first(ty) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(tidentdecl) = TYPEID QUALIFIER ID
first(tident) = TYPEID QUALIFIER
first(stmts) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
first(stmt_command_start) = EOL
first(stmt_command) = EOL
first(stmt) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
first(slice) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(simple_stmts) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED ID CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
first(simple_stmt_list) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED ID CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
first(simple_stmt) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED ID CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
first(simple_if_stmt) = IF
first(simple_elsif) = ELSIF
first(sformal) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(sfactor) = STAR SLASH REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DIV CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
first(sexpr) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(setter_declaration) = QUALIFIER ID
first(separated_nonempty_list(COMMA,ty)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(separated_nonempty_list(COMMA,slice)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(separated_nonempty_list(COMMA,sformal)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(separated_nonempty_list(COMMA,pattern)) = QUALIFIER MINUS MASKLIT LPAREN LBRACE INTLIT ID HEXLIT BITSLIT
first(separated_nonempty_list(COMMA,mapfield)) = ID
first(separated_nonempty_list(COMMA,ident)) = ID
first(separated_nonempty_list(COMMA,formal)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(separated_nonempty_list(COMMA,field_ns)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(separated_nonempty_list(COMMA,expr)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(separated_nonempty_list(COMMA,decode_slice)) = INTLIT ID
first(separated_nonempty_list(COMMA,decode_pattern)) = MASKLIT ID BITSLIT BANG
first(separated_nonempty_list(COMMA,apattern)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(separated_nonempty2_list(COMMA,pattern)) = QUALIFIER MINUS MASKLIT LPAREN LBRACE INTLIT ID HEXLIT BITSLIT
first(separated_nonempty2_list(COMMA,lexpr)) = QUALIFIER MINUS LPAREN LBRACK ID
first(separated_nonempty2_list(COMMA,expr)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(separated_nonempty2_list(COLON,ident)) = ID
first(scexpr) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT BITSLIT BITS BANG ARRAY
first(s_elsif) = ELSIF
first(repetitive_stmt) = WHILE REPEAT FOR
first(regfields) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(regfield) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(qualident) = QUALIFIER ID
first(procedure_declaration) = QUALIFIER ID
first(possibly_empty_block) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED ID EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
first(pattern) = QUALIFIER MINUS MASKLIT LPAREN LBRACE INTLIT ID HEXLIT BITSLIT
first(optmapcond) = WHEN
first(optional_else) = ELSE
first(opt_stringLit) = STRINGLIT
first(opt_postdecode) = UNDERSCORE_UNDERSCORE_POSTDECODE
first(opt_otherwise) = OTHERWISE
first(opt_indented_block) = EOL
first(opt_conditional) = UNDERSCORE_UNDERSCORE_CONDITIONAL
first(opt_altcond) = EQ_GT AMPERSAND_AMPERSAND
first(opcode_value) = MASKLIT BITSLIT
first(offset) = INTLIT
first(nonempty_list(stmts)) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
first(nonempty_list(simple_stmt)) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED ID CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
first(nonempty_list(field)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(nonempty_list(encoding)) = UNDERSCORE_UNDERSCORE_ENCODING
first(nonempty_list(decode_alt)) = WHEN
first(nonempty_list(alt)) = WHEN
first(mapfield) = ID
first(loption(separated_nonempty_list(COMMA,ty))) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(loption(separated_nonempty_list(COMMA,slice))) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(loption(separated_nonempty_list(COMMA,sformal))) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(loption(separated_nonempty_list(COMMA,mapfield))) = ID
first(loption(separated_nonempty_list(COMMA,ident))) = ID
first(loption(separated_nonempty_list(COMMA,formal))) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(loption(separated_nonempty_list(COMMA,expr))) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(loption(separated_nonempty_list(COMMA,decode_slice))) = INTLIT ID
first(loption(separated_nonempty_list(COMMA,decode_pattern))) = MASKLIT ID BITSLIT BANG
first(loption(separated_nonempty_list(COMMA,apattern))) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(literal_expression) = STRINGLIT REALLIT MASKLIT INTLIT HEXLIT BITSLIT
first(list(simple_elsif)) = ELSIF
first(list(sfactor)) = STAR SLASH REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DIV CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
first(list(s_elsif)) = ELSIF
first(list(regfield)) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(list(instr_unpred)) = UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS
first(list(instr_field)) = UNDERSCORE_UNDERSCORE_FIELD
first(list(factor)) = STAR SLASH REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DIV COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
first(list(e_elsif)) = ELSIF
first(list(declaration)) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID ENUMERATION CONSTANT BITS ARRAY
first(list(catcher)) = WHEN
first(lexpr) = QUALIFIER MINUS LPAREN LBRACK ID
first(leadingblank) = EOL
first(ixtype) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(internal_definition) = UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_CONFIG
first(instruction_definition) = UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_DECODE
first(instr_unpred) = UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS
first(instr_field) = UNDERSCORE_UNDERSCORE_FIELD
first(indented_block) = EOL
first(impdef_command_start) = EOL
first(impdef_command) = EOL
first(ident) = ID
first(getter_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_FUNCTION TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(function_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(formal) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(field_ns) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(field) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER LPAREN BITS ARRAY
first(fexpr) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER MASKLIT LPAREN INTLIT ID HEXLIT BITSLIT BITS ARRAY
first(factor) = STAR SLASH REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DIV COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
first(expr_command_start) = EOL
first(expr_command) = EOL
first(expr) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(encoding) = UNDERSCORE_UNDERSCORE_ENCODING
first(e_elsif) = ELSIF
first(direction) = TO DOWNTO
first(decode_slice) = INTLIT ID
first(decode_pattern) = MASKLIT ID BITSLIT BANG
first(decode_case) = CASE
first(decode_body) = UNDERSCORE_UNDERSCORE_UNPREDICTABLE UNDERSCORE_UNDERSCORE_UNALLOCATED UNDERSCORE_UNDERSCORE_NOP UNDERSCORE_UNDERSCORE_ENCODING EOL
first(decode_alt) = WHEN
first(declarations_start) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOL EOF ENUMERATION CONSTANT BITS ARRAY
first(declarations) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOL ENUMERATION CONSTANT BITS ARRAY
first(declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID ENUMERATION CONSTANT BITS ARRAY
first(conditional_stmt) = IF CASE
first(conditional_expression) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(compound_stmt) = WHILE TRY REPEAT IF FOR CASE
first(cexpr) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT BITSLIT BITS BANG ARRAY
first(catcher) = WHEN
first(catch_stmt) = TRY
first(binop_or_concat) = STAR SLASH REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DIV COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
first(binop) = STAR SLASH REM QUOT PLUS_PLUS PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_EQ EOR DIV CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
first(bexpr) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT BITSLIT BITS BANG ARRAY
first(assignment_stmt) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID QUALIFIER MINUS LPAREN LBRACK ID CONSTANT BITS ARRAY
first(apattern) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
first(alt) = WHEN
first(aexpr) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER MASKLIT LPAREN INTLIT ID HEXLIT BITSLIT BITS ARRAY
minimal(variable_declaration) = (* 4 *) TYPEID ID SEMICOLON EOL
minimal(unop) = (* 1 *) MINUS
minimal(typeident) = (* 1 *) TYPEID
minimal(type_declaration) = (* 4 *) TYPE TYPEID SEMICOLON EOL
minimal(ty) = (* 1 *) TYPEID
minimal(tidentdecl) = (* 1 *) TYPEID
minimal(tident) = (* 1 *) TYPEID
minimal(stmts) = (* 3 *) RETURN SEMICOLON EOL
minimal(stmt_command_start) = (* 4 *) EOL RETURN SEMICOLON EOF
minimal(stmt_command) = (* 3 *) EOL RETURN SEMICOLON
minimal(stmt) = (* 2 *) RETURN SEMICOLON
minimal(slice) = (* 1 *) INTLIT
minimal(simple_stmts) = (* 3 *) RETURN SEMICOLON EOL
minimal(simple_stmt_list) = (* 2 *) RETURN SEMICOLON
minimal(simple_stmt) = (* 2 *) RETURN SEMICOLON
minimal(simple_if_stmt) = (* 6 *) IF INTLIT THEN RETURN SEMICOLON EOL
minimal(simple_elsif) = (* 5 *) ELSIF INTLIT THEN RETURN SEMICOLON
minimal(sformal) = (* 2 *) TYPEID ID
minimal(sfactor) = (* 2 *) EQ_EQ INTLIT
minimal(sexpr) = (* 1 *) INTLIT
minimal(setter_declaration) = (* 5 *) ID EQ TYPEID ID EOL
minimal(separated_nonempty_list(COMMA,ty)) = (* 1 *) TYPEID
minimal(separated_nonempty_list(COMMA,slice)) = (* 1 *) INTLIT
minimal(separated_nonempty_list(COMMA,sformal)) = (* 2 *) TYPEID ID
minimal(separated_nonempty_list(COMMA,pattern)) = (* 1 *) INTLIT
minimal(separated_nonempty_list(COMMA,mapfield)) = (* 3 *) ID EQ INTLIT
minimal(separated_nonempty_list(COMMA,ident)) = (* 1 *) ID
minimal(separated_nonempty_list(COMMA,formal)) = (* 2 *) TYPEID ID
minimal(separated_nonempty_list(COMMA,field_ns)) = (* 2 *) TYPEID ID
minimal(separated_nonempty_list(COMMA,expr)) = (* 1 *) INTLIT
minimal(separated_nonempty_list(COMMA,decode_slice)) = (* 1 *) ID
minimal(separated_nonempty_list(COMMA,decode_pattern)) = (* 1 *) BITSLIT
minimal(separated_nonempty_list(COMMA,apattern)) = (* 1 *) INTLIT
minimal(separated_nonempty2_list(COMMA,pattern)) = (* 3 *) INTLIT COMMA INTLIT
minimal(separated_nonempty2_list(COMMA,lexpr)) = (* 3 *) MINUS COMMA MINUS
minimal(separated_nonempty2_list(COMMA,expr)) = (* 3 *) INTLIT COMMA INTLIT
minimal(separated_nonempty2_list(COLON,ident)) = (* 3 *) ID COLON ID
minimal(scexpr) = (* 1 *) INTLIT
minimal(s_elsif) = (* 4 *) ELSIF INTLIT THEN EOL
minimal(repetitive_stmt) = (* 9 *) WHILE INTLIT DO EOL INDENT RETURN SEMICOLON EOL DEDENT
minimal(regfields) = (* 0 *)
minimal(regfield) = (* 2 *) INTLIT ID
minimal(qualident) = (* 1 *) ID
minimal(procedure_declaration) = (* 4 *) ID LPAREN RPAREN EOL
minimal(possibly_empty_block) = (* 1 *) EOL
minimal(pattern) = (* 1 *) INTLIT
minimal(optmapcond) = (* 0 *)
minimal(optional_else) = (* 0 *)
minimal(opt_stringLit) = (* 0 *)
minimal(opt_postdecode) = (* 0 *)
minimal(opt_otherwise) = (* 0 *)
minimal(opt_indented_block) = (* 1 *) EOL
minimal(opt_conditional) = (* 0 *)
minimal(opt_altcond) = (* 0 *)
minimal(opcode_value) = (* 1 *) BITSLIT
minimal(offset) = (* 1 *) INTLIT
minimal(nonempty_list(stmts)) = (* 3 *) RETURN SEMICOLON EOL
minimal(nonempty_list(simple_stmt)) = (* 2 *) RETURN SEMICOLON
minimal(nonempty_list(field)) = (* 3 *) TYPEID ID SEMICOLON
minimal(nonempty_list(encoding)) = (* 16 *) UNDERSCORE_UNDERSCORE_ENCODING ID EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ID EOL UNDERSCORE_UNDERSCORE_OPCODE BITSLIT EOL UNDERSCORE_UNDERSCORE_GUARD INTLIT EOL UNDERSCORE_UNDERSCORE_DECODE EOL DEDENT
minimal(nonempty_list(decode_alt)) = (* 6 *) WHEN LPAREN RPAREN EQ_GT UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL
minimal(nonempty_list(alt)) = (* 3 *) WHEN INTLIT EOL
minimal(mapfield) = (* 3 *) ID EQ INTLIT
minimal(loption(separated_nonempty_list(COMMA,ty))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,slice))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,sformal))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,mapfield))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,ident))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,formal))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,expr))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,decode_slice))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,decode_pattern))) = (* 0 *)
minimal(loption(separated_nonempty_list(COMMA,apattern))) = (* 0 *)
minimal(literal_expression) = (* 1 *) INTLIT
minimal(list(simple_elsif)) = (* 0 *)
minimal(list(sfactor)) = (* 0 *)
minimal(list(s_elsif)) = (* 0 *)
minimal(list(regfield)) = (* 0 *)
minimal(list(instr_unpred)) = (* 0 *)
minimal(list(instr_field)) = (* 0 *)
minimal(list(factor)) = (* 0 *)
minimal(list(e_elsif)) = (* 0 *)
minimal(list(declaration)) = (* 0 *)
minimal(list(catcher)) = (* 0 *)
minimal(lexpr) = (* 1 *) MINUS
minimal(leadingblank) = (* 0 *)
minimal(ixtype) = (* 1 *) TYPEID
minimal(internal_definition) = (* 3 *) UNDERSCORE_UNDERSCORE_EVENT ID EOL
minimal(instruction_definition) = (* 18 *) UNDERSCORE_UNDERSCORE_DECODE ID EOL INDENT CASE LPAREN RPAREN OF EOL INDENT WHEN LPAREN RPAREN EQ_GT UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL DEDENT DEDENT
minimal(instr_unpred) = (* 5 *) UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS INTLIT EQ_EQ BITSLIT EOL
minimal(instr_field) = (* 6 *) UNDERSCORE_UNDERSCORE_FIELD ID INTLIT PLUS_COLON INTLIT EOL
minimal(indented_block) = (* 6 *) EOL INDENT RETURN SEMICOLON EOL DEDENT
minimal(impdef_command_start) = (* 5 *) EOL STRINGLIT EQ INTLIT EOF
minimal(impdef_command) = (* 4 *) EOL STRINGLIT EQ INTLIT
minimal(ident) = (* 1 *) ID
minimal(getter_declaration) = (* 3 *) TYPEID ID EOL
minimal(function_declaration) = (* 5 *) TYPEID ID LPAREN RPAREN EOL
minimal(formal) = (* 2 *) TYPEID ID
minimal(field_ns) = (* 2 *) TYPEID ID
minimal(field) = (* 3 *) TYPEID ID SEMICOLON
minimal(fexpr) = (* 1 *) INTLIT
minimal(factor) = (* 2 *) EQ_EQ INTLIT
minimal(expr_command_start) = (* 3 *) EOL INTLIT EOF
minimal(expr_command) = (* 2 *) EOL INTLIT
minimal(expr) = (* 1 *) INTLIT
minimal(encoding) = (* 16 *) UNDERSCORE_UNDERSCORE_ENCODING ID EOL INDENT UNDERSCORE_UNDERSCORE_INSTRUCTION_UNDERSCORE_SET ID EOL UNDERSCORE_UNDERSCORE_OPCODE BITSLIT EOL UNDERSCORE_UNDERSCORE_GUARD INTLIT EOL UNDERSCORE_UNDERSCORE_DECODE EOL DEDENT
minimal(e_elsif) = (* 4 *) ELSIF INTLIT THEN INTLIT
minimal(direction) = (* 1 *) TO
minimal(decode_slice) = (* 1 *) ID
minimal(decode_pattern) = (* 1 *) BITSLIT
minimal(decode_case) = (* 13 *) CASE LPAREN RPAREN OF EOL INDENT WHEN LPAREN RPAREN EQ_GT UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL DEDENT
minimal(decode_body) = (* 2 *) UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL
minimal(decode_alt) = (* 6 *) WHEN LPAREN RPAREN EQ_GT UNDERSCORE_UNDERSCORE_UNPREDICTABLE EOL
minimal(declarations_start) = (* 1 *) EOF
minimal(declarations) = (* 0 *)
minimal(declaration) = (* 3 *) TYPEID ID EOL
minimal(conditional_stmt) = (* 4 *) IF INTLIT THEN EOL
minimal(conditional_expression) = (* 1 *) INTLIT
minimal(compound_stmt) = (* 4 *) IF INTLIT THEN EOL
minimal(cexpr) = (* 1 *) INTLIT
minimal(catcher) = (* 3 *) WHEN INTLIT EOL
minimal(catch_stmt) = (* 12 *) TRY EOL INDENT RETURN SEMICOLON EOL DEDENT CATCH ID EOL INDENT DEDENT
minimal(binop_or_concat) = (* 1 *) EQ_EQ
minimal(binop) = (* 1 *) EQ_EQ
minimal(bexpr) = (* 1 *) INTLIT
minimal(assignment_stmt) = (* 3 *) TYPEID ID SEMICOLON
minimal(apattern) = (* 1 *) INTLIT
minimal(alt) = (* 3 *) WHEN INTLIT EOL
minimal(aexpr) = (* 1 *) INTLIT
maximal(variable_declaration) = infinity
maximal(unop) = 1
maximal(typeident) = 1
maximal(type_declaration) = infinity
maximal(ty) = infinity
maximal(tidentdecl) = 3
maximal(tident) = 3
maximal(stmts) = infinity
maximal(stmt_command_start) = infinity
maximal(stmt_command) = infinity
maximal(stmt) = infinity
maximal(slice) = infinity
maximal(simple_stmts) = infinity
maximal(simple_stmt_list) = infinity
maximal(simple_stmt) = infinity
maximal(simple_if_stmt) = infinity
maximal(simple_elsif) = infinity
maximal(sformal) = infinity
maximal(sfactor) = infinity
maximal(sexpr) = infinity
maximal(setter_declaration) = infinity
maximal(separated_nonempty_list(COMMA,ty)) = infinity
maximal(separated_nonempty_list(COMMA,slice)) = infinity
maximal(separated_nonempty_list(COMMA,sformal)) = infinity
maximal(separated_nonempty_list(COMMA,pattern)) = infinity
maximal(separated_nonempty_list(COMMA,mapfield)) = infinity
maximal(separated_nonempty_list(COMMA,ident)) = infinity
maximal(separated_nonempty_list(COMMA,formal)) = infinity
maximal(separated_nonempty_list(COMMA,field_ns)) = infinity
maximal(separated_nonempty_list(COMMA,expr)) = infinity
maximal(separated_nonempty_list(COMMA,decode_slice)) = infinity
maximal(separated_nonempty_list(COMMA,decode_pattern)) = infinity
maximal(separated_nonempty_list(COMMA,apattern)) = infinity
maximal(separated_nonempty2_list(COMMA,pattern)) = infinity
maximal(separated_nonempty2_list(COMMA,lexpr)) = infinity
maximal(separated_nonempty2_list(COMMA,expr)) = infinity
maximal(separated_nonempty2_list(COLON,ident)) = infinity
maximal(scexpr) = infinity
maximal(s_elsif) = infinity
maximal(repetitive_stmt) = infinity
maximal(regfields) = infinity
maximal(regfield) = infinity
maximal(qualident) = 3
maximal(procedure_declaration) = infinity
maximal(possibly_empty_block) = infinity
maximal(pattern) = infinity
maximal(optmapcond) = infinity
maximal(optional_else) = infinity
maximal(opt_stringLit) = 1
maximal(opt_postdecode) = infinity
maximal(opt_otherwise) = infinity
maximal(opt_indented_block) = infinity
maximal(opt_conditional) = 1
maximal(opt_altcond) = infinity
maximal(opcode_value) = 1
maximal(offset) = 1
maximal(nonempty_list(stmts)) = infinity
maximal(nonempty_list(simple_stmt)) = infinity
maximal(nonempty_list(field)) = infinity
maximal(nonempty_list(encoding)) = infinity
maximal(nonempty_list(decode_alt)) = infinity
maximal(nonempty_list(alt)) = infinity
maximal(mapfield) = infinity
maximal(loption(separated_nonempty_list(COMMA,ty))) = infinity
maximal(loption(separated_nonempty_list(COMMA,slice))) = infinity
maximal(loption(separated_nonempty_list(COMMA,sformal))) = infinity
maximal(loption(separated_nonempty_list(COMMA,mapfield))) = infinity
maximal(loption(separated_nonempty_list(COMMA,ident))) = infinity
maximal(loption(separated_nonempty_list(COMMA,formal))) = infinity
maximal(loption(separated_nonempty_list(COMMA,expr))) = infinity
maximal(loption(separated_nonempty_list(COMMA,decode_slice))) = infinity
maximal(loption(separated_nonempty_list(COMMA,decode_pattern))) = infinity
maximal(loption(separated_nonempty_list(COMMA,apattern))) = infinity
maximal(literal_expression) = 1
maximal(list(simple_elsif)) = infinity
maximal(list(sfactor)) = infinity
maximal(list(s_elsif)) = infinity
maximal(list(regfield)) = infinity
maximal(list(instr_unpred)) = infinity
maximal(list(instr_field)) = infinity
maximal(list(factor)) = infinity
maximal(list(e_elsif)) = infinity
maximal(list(declaration)) = infinity
maximal(list(catcher)) = infinity
maximal(lexpr) = infinity
maximal(leadingblank) = 1
maximal(ixtype) = infinity
maximal(internal_definition) = infinity
maximal(instruction_definition) = infinity
maximal(instr_unpred) = 5
maximal(instr_field) = 6
maximal(indented_block) = infinity
maximal(impdef_command_start) = infinity
maximal(impdef_command) = infinity
maximal(ident) = 1
maximal(getter_declaration) = infinity
maximal(function_declaration) = infinity
maximal(formal) = infinity
maximal(field_ns) = infinity
maximal(field) = infinity
maximal(fexpr) = infinity
maximal(factor) = infinity
maximal(expr_command_start) = infinity
maximal(expr_command) = infinity
maximal(expr) = infinity
maximal(encoding) = infinity
maximal(e_elsif) = infinity
maximal(direction) = 1
maximal(decode_slice) = infinity
maximal(decode_pattern) = infinity
maximal(decode_case) = infinity
maximal(decode_body) = infinity
maximal(decode_alt) = infinity
maximal(declarations_start) = infinity
maximal(declarations) = infinity
maximal(declaration) = infinity
maximal(conditional_stmt) = infinity
maximal(conditional_expression) = infinity
maximal(compound_stmt) = infinity
maximal(cexpr) = infinity
maximal(catcher) = infinity
maximal(catch_stmt) = infinity
maximal(binop_or_concat) = 1
maximal(binop) = 1
maximal(bexpr) = infinity
maximal(assignment_stmt) = infinity
maximal(apattern) = infinity
maximal(alt) = infinity
maximal(aexpr) = infinity
follow(variable_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(unop) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS ARRAY
follow(typeident) = UNKNOWN SEMICOLON RPAREN RBRACK QUALIFIER LPAREN LBRACE IS IMPLEMENTATION_UNDERSCORE_DEFINED ID EQ COMMA AMPERSAND
follow(type_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(ty) = UNKNOWN SEMICOLON RPAREN QUALIFIER IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND
follow(tidentdecl) = SEMICOLON LBRACE IS EQ
follow(tident) = UNKNOWN SEMICOLON RPAREN RBRACK QUALIFIER LPAREN IMPLEMENTATION_UNDERSCORE_DEFINED ID COMMA AMPERSAND
follow(stmts) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(stmt_command_start) = #
follow(stmt_command) = EOF
follow(stmt) = EOF
follow(slice) = RBRACK ID COMMA
follow(simple_stmts) = WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(simple_stmt_list) = IF EOL ELSIF ELSE
follow(simple_stmt) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
follow(simple_if_stmt) = WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(simple_elsif) = EOL ELSIF ELSE
follow(sformal) = RBRACK COMMA
follow(sfactor) = STAR SLASH REM RBRACK QUOT PLUS_PLUS PLUS_COLON PLUS OR MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_EQ EOR DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
follow(sexpr) = RBRACK PLUS_COLON ID COMMA COLON
follow(setter_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(separated_nonempty_list(COMMA,ty)) = RPAREN
follow(separated_nonempty_list(COMMA,slice)) = RBRACK ID
follow(separated_nonempty_list(COMMA,sformal)) = RBRACK
follow(separated_nonempty_list(COMMA,pattern)) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EQ_GT EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY AMPERSAND_AMPERSAND
follow(separated_nonempty_list(COMMA,mapfield)) = WHEN THEN
follow(separated_nonempty_list(COMMA,ident)) = SEMICOLON RBRACK RBRACE
follow(separated_nonempty_list(COMMA,formal)) = RPAREN RBRACK
follow(separated_nonempty_list(COMMA,field_ns)) = RPAREN
follow(separated_nonempty_list(COMMA,expr)) = RPAREN
follow(separated_nonempty_list(COMMA,decode_slice)) = RPAREN
follow(separated_nonempty_list(COMMA,decode_pattern)) = RPAREN
follow(separated_nonempty_list(COMMA,apattern)) = RBRACE
follow(separated_nonempty2_list(COMMA,pattern)) = RPAREN
follow(separated_nonempty2_list(COMMA,lexpr)) = RPAREN RBRACK
follow(separated_nonempty2_list(COMMA,expr)) = RPAREN
follow(separated_nonempty2_list(COLON,ident)) = RPAREN COMMA
follow(scexpr) = RBRACK PLUS_COLON ID COMMA COLON
follow(s_elsif) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(repetitive_stmt) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(regfields) = RBRACE
follow(regfield) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT RBRACE QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT COMMA BITSLIT BITS BANG ARRAY
follow(qualident) = WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND
follow(procedure_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(possibly_empty_block) = WHEN UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER OTHERWISE LPAREN ID EOF ENUMERATION DEDENT CONSTANT BITS ARRAY
follow(pattern) = WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STAR SLASH SEMICOLON SEE RPAREN RETURN REM RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LPAREN LBRACK IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITS BAR_BAR BANG_EQ ASSERT ARRAY AND AMPERSAND_AMPERSAND
follow(optmapcond) = THEN
follow(optional_else) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(opt_stringLit) = TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
follow(opt_postdecode) = UNDERSCORE_UNDERSCORE_EXECUTE
follow(opt_otherwise) = DEDENT
follow(opt_indented_block) = WHILE WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(opt_conditional) = EOL
follow(opt_altcond) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
follow(opcode_value) = EOL
follow(offset) = RPAREN PLUS_COLON EOL COMMA
follow(nonempty_list(stmts)) = DEDENT
follow(nonempty_list(simple_stmt)) = IF EOL ELSIF ELSE
follow(nonempty_list(field)) = RBRACE
follow(nonempty_list(encoding)) = UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE
follow(nonempty_list(decode_alt)) = DEDENT
follow(nonempty_list(alt)) = OTHERWISE DEDENT
follow(mapfield) = WHEN THEN COMMA
follow(loption(separated_nonempty_list(COMMA,ty))) = RPAREN
follow(loption(separated_nonempty_list(COMMA,slice))) = RBRACK
follow(loption(separated_nonempty_list(COMMA,sformal))) = RBRACK
follow(loption(separated_nonempty_list(COMMA,mapfield))) = WHEN THEN
follow(loption(separated_nonempty_list(COMMA,ident))) = RBRACE
follow(loption(separated_nonempty_list(COMMA,formal))) = RPAREN RBRACK
follow(loption(separated_nonempty_list(COMMA,expr))) = RPAREN
follow(loption(separated_nonempty_list(COMMA,decode_slice))) = RPAREN
follow(loption(separated_nonempty_list(COMMA,decode_pattern))) = RPAREN
follow(loption(separated_nonempty_list(COMMA,apattern))) = RBRACE
follow(literal_expression) = TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
follow(list(simple_elsif)) = EOL ELSE
follow(list(sfactor)) = RBRACK PLUS_COLON ID COMMA COLON
follow(list(s_elsif)) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(list(regfield)) = RBRACE
follow(list(instr_unpred)) = UNDERSCORE_UNDERSCORE_DECODE
follow(list(instr_field)) = UNDERSCORE_UNDERSCORE_OPCODE CASE
follow(list(factor)) = TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA
follow(list(e_elsif)) = ELSE
follow(list(declaration)) = EOF
follow(list(catcher)) = OTHERWISE DEDENT
follow(lexpr) = RPAREN RBRACK LBRACK EQ DOT COMMA
follow(leadingblank) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(ixtype) = RBRACK
follow(internal_definition) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(instruction_definition) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(instr_unpred) = UNDERSCORE_UNDERSCORE_UNPREDICTABLE_UNDERSCORE_UNLESS UNDERSCORE_UNDERSCORE_DECODE
follow(instr_field) = UNDERSCORE_UNDERSCORE_OPCODE UNDERSCORE_UNDERSCORE_FIELD CASE
follow(indented_block) = WHILE WHEN UNTIL UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN UNDEFINED TYPEOF TYPEID TYPE TRY THROW SEE RETURN REPEAT RECORD QUALIFIER OTHERWISE MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF ENUMERATION ELSIF ELSE DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CATCH CASE BITS ASSERT ARRAY
follow(impdef_command_start) = #
follow(impdef_command) = EOF
follow(ident) = WHEN UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TO THROW THEN STRINGLIT STAR SLASH SEMICOLON SEE RPAREN RETURN REM REALLIT RBRACK RBRACE QUOT QUALIFIER PLUS_PLUS PLUS_COLON PLUS OR OF NOT MOD MINUS MASKLIT LT_LT LT_EQ LT LPAREN LBRACK LBRACE IS INTLIT IN IMPLIES IMPLEMENTATION_UNDERSCORE_DEFINED IFF IF ID HEXLIT GT_GT GT_EQ GT EQ_GT EQ_EQ EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT COMMA COLON CARET BITSLIT BITS BAR_BAR BANG_EQ BANG ASSERT ARRAY AND AMPERSAND_AMPERSAND
follow(getter_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(function_declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(formal) = RPAREN RBRACK COMMA
follow(field_ns) = RPAREN COMMA
follow(field) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID RBRACE QUALIFIER LPAREN BITS ARRAY
follow(fexpr) = TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
follow(factor) = TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
follow(expr_command_start) = #
follow(expr_command) = EOF
follow(expr) = TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA
follow(encoding) = UNDERSCORE_UNDERSCORE_POSTDECODE UNDERSCORE_UNDERSCORE_EXECUTE UNDERSCORE_UNDERSCORE_ENCODING
follow(e_elsif) = ELSIF ELSE
follow(direction) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT IF ID HEXLIT BITSLIT BITS BANG ARRAY
follow(decode_slice) = RPAREN COMMA
follow(decode_pattern) = RPAREN COMMA
follow(decode_case) = DEDENT
follow(decode_body) = WHEN DEDENT
follow(decode_alt) = WHEN DEDENT
follow(declarations_start) = #
follow(declarations) = EOF
follow(declaration) = UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_OPERATOR_TWO UNDERSCORE_UNDERSCORE_OPERATOR_ONE UNDERSCORE_UNDERSCORE_NEWMAP UNDERSCORE_UNDERSCORE_NEWEVENT UNDERSCORE_UNDERSCORE_MAP UNDERSCORE_UNDERSCORE_INSTRUCTION UNDERSCORE_UNDERSCORE_FUNCTION UNDERSCORE_UNDERSCORE_EVENT UNDERSCORE_UNDERSCORE_DECODE UNDERSCORE_UNDERSCORE_CONFIG UNDERSCORE_UNDERSCORE_BUILTIN TYPEOF TYPEID TYPE RECORD QUALIFIER LPAREN ID EOF ENUMERATION CONSTANT BITS ARRAY
follow(conditional_stmt) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(conditional_expression) = TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA
follow(compound_stmt) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(cexpr) = TO THEN SEMICOLON RPAREN RBRACK RBRACE OF EQ_GT EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO COMMA
follow(catcher) = WHEN OTHERWISE DEDENT
follow(catch_stmt) = WHILE UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID TRY THROW SEE RETURN REPEAT QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID FOR EOF DEDENT CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT CASE BITS ASSERT ARRAY
follow(binop_or_concat) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY
follow(binop) = UNDERSCORE_UNDERSCORE_REGISTER TYPEOF TYPEID STRINGLIT REALLIT QUALIFIER NOT MINUS MASKLIT LPAREN INTLIT ID HEXLIT EQ BITSLIT BITS BANG ARRAY
follow(bexpr) = TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
follow(assignment_stmt) = UNPREDICTABLE UNDERSCORE_UNDERSCORE_REGISTER UNDERSCORE_UNDERSCORE_EXCEPTIONTAKEN UNDERSCORE_UNDERSCORE_DECODE UNDEFINED TYPEOF TYPEID THROW SEE RETURN QUALIFIER MINUS LPAREN LBRACK IMPLEMENTATION_UNDERSCORE_DEFINED IF ID EOL EOF ELSIF ELSE CONSTRAINED_UNDERSCORE_UNPREDICTABLE CONSTANT BITS ASSERT ARRAY
follow(apattern) = RBRACE COMMA
follow(alt) = WHEN OTHERWISE DEDENT
follow(aexpr) = TO THEN STAR SLASH SEMICOLON RPAREN REM RBRACK RBRACE QUOT PLUS_PLUS PLUS_COLON PLUS OR OF MOD MINUS LT_LT LT_EQ LT LBRACK IN IMPLIES IFF ID GT_GT GT_EQ GT EQ_GT EQ_EQ EOR EOL EOF ELSIF ELSE DOWNTO DOT_DOT DOT DO DIV COMMA COLON CARET BAR_BAR BANG_EQ AND AMPERSAND_AMPERSAND
Built an LR(0) automaton with 735 states.
The grammar is not SLR(1) -- 1 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 737 states.
278 out of 737 states have a default reduction.
The action table is 89177 entries; 2864 non-zero; 2340 compressed.
The action table occupies roughly 4776 bytes.
The goto table is 98021 entries; 1366 non-zero; 2795 compressed.
The goto table occupies roughly 5688 bytes.
The error table occupies roughly 11184 bytes.
The default_reduction table occupies roughly 1512 bytes.
The lhs table occupies roughly 376 bytes.
The trace table occupies roughly 8 bytes.
