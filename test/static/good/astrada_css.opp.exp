%{

(* Workaround for this dune bug: https://github.com/ocaml/dune/issues/2450 *)
module Css = struct end

open Types

%}
%start declaration_list
%start stylesheet
%token <string> AT_RULE
%token <string> AT_RULE_WITHOUT_BODY
%token COLON
%token <string> DELIM
%token <string * string> DIMENSION
%token DOT
%token EOF
%token <string * string * Types.dimension> FLOAT_DIMENSION
%token <string> FUNCTION
%token <string> HASH
%token <string> IDENT
%token IMPORTANT
%token LEFT_BRACE
%token LEFT_BRACKET
%token LEFT_PAREN
%token <string> NESTED_AT_RULE
%token <string> NUMBER
%token <string> OPERATOR
%token PERCENTAGE
%token RIGHT_BRACE
%token RIGHT_BRACKET
%token RIGHT_PAREN
%token SEMI_COLON
%token <string> STRING
%token <string> UNICODE_RANGE
%token <string> URI
%token WHITESPACE
%type <Types.Declaration_list.t> declaration_list
%type <Types.Stylesheet.t> stylesheet
%%

option_WHITESPACE_:
  
    {    ( None )}
| x = WHITESPACE
    {    ( Some x )}

boption_IMPORTANT_:
  
    {    ( false )}
| _1 = IMPORTANT
    {    ( true )}

list_component_value_with_loc_:
  
    {    ( [] )}
| x = component_value_with_loc xs = list_component_value_with_loc_
    {    ( x :: xs )}

list_component_value_with_loc_in_prelude_:
  
    {    ( [] )}
| x = component_value_with_loc_in_prelude xs = list_component_value_with_loc_in_prelude_
    {    ( x :: xs )}

list_rule_:
  
    {    ( [] )}
| x = rule xs = list_rule_
    {    ( x :: xs )}

stylesheet:
  s = stylesheet_without_eof _2 = EOF
    {                                  ( s )}

stylesheet_without_eof:
  rs = list_rule_
    {let _endpos = _endpos_rs_ in
let _startpos = _startpos_rs_ in
                  ( (rs, Lex_buffer.make_loc_and_fix _startpos _endpos) )}

declaration_list:
  ds = declarations_with_loc _2 = EOF
    {                                  ( ds )}

rule:
  r = at_rule
    {                ( Rule.At_rule r )}
| r = style_rule
    {                   ( Rule.Style_rule r )}

at_rule:
  name = AT_RULE_WITHOUT_BODY xs = prelude_with_loc _3 = SEMI_COLON
    {let _endpos = _endpos__3_ in
let _startpos = _startpos_name_ in
                                                                   (
      { At_rule.name = (name, Lex_buffer.make_loc_and_fix _startpos_name_ _endpos_name_);
        prelude = xs;
        block = Brace_block.Empty;
        loc = Lex_buffer.make_loc_and_fix _startpos _endpos;
      }
    )}
| name = NESTED_AT_RULE xs = prelude_with_loc _3 = LEFT_BRACE s = stylesheet_without_eof _5 = RIGHT_BRACE
    {let _endpos = _endpos__5_ in
let _startpos = _startpos_name_ in
                                                                                                      (
      { At_rule.name = (name, Lex_buffer.make_loc_and_fix _startpos_name_ _endpos_name_);
        prelude = xs;
        block = Brace_block.Stylesheet s;
        loc = Lex_buffer.make_loc_and_fix _startpos _endpos;
      }
    )}
| name = AT_RULE xs = prelude_with_loc _3 = LEFT_BRACE ds = declarations_with_loc _5 = RIGHT_BRACE
    {let _endpos = _endpos__5_ in
let _startpos = _startpos_name_ in
                                                                                               (
      { At_rule.name = (name, Lex_buffer.make_loc_and_fix _startpos_name_ _endpos_name_);
        prelude = xs;
        block = Brace_block.Declaration_list ds;
        loc = Lex_buffer.make_loc_and_fix _startpos _endpos;
      }
    )}

style_rule:
  xs = prelude_with_loc _2 = LEFT_BRACE _3 = RIGHT_BRACE
    {let _endpos = _endpos__3_ in
let _startpos = _startpos_xs_ in
                                                   (
      { Style_rule.prelude = xs;
        block = [], Location.none;
        loc = Lex_buffer.make_loc_and_fix _startpos _endpos;
      }
    )}
| xs = prelude_with_loc _2 = LEFT_BRACE ds = declarations_with_loc _4 = RIGHT_BRACE
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_xs_ in
                                                                               (
      { Style_rule.prelude = xs;
        block = ds;
        loc = Lex_buffer.make_loc_and_fix _startpos _endpos;
      }
    )}

prelude_with_loc:
  xs = prelude
    {let _endpos = _endpos_xs_ in
let _startpos = _startpos_xs_ in
               ( (xs, Lex_buffer.make_loc_and_fix _startpos _endpos) )}

prelude:
  xs = list_component_value_with_loc_in_prelude_
    {                                                 ( xs )}

declarations_with_loc:
  ds = declarations
    {let _endpos = _endpos_ds_ in
let _startpos = _startpos_ds_ in
                      ( (ds, Lex_buffer.make_loc_and_fix ~loc_ghost:true _startpos _endpos) )}

declarations:
  ds = declarations_without_ending_semi_colon
    {                                                ( List.rev ds )}
| ds = declarations_without_ending_semi_colon _2 = SEMI_COLON
    {                                                            ( List.rev ds )}

declarations_without_ending_semi_colon:
  d = declaration_or_at_rule
    {                               ( [d] )}
| ds = declarations_without_ending_semi_colon _2 = SEMI_COLON d = declaration_or_at_rule
    {                                                                                        ( d :: ds )}

declaration_or_at_rule:
  d = declaration
    {                    ( Declaration_list.Declaration d )}
| r = at_rule
    {                ( Declaration_list.At_rule r )}

declaration:
  n = IDENT _2 = option_WHITESPACE_ _3 = COLON v = list_component_value_with_loc_ i = boption_IMPORTANT_
    {let _endpos = _endpos_i_ in
let _startpos = _startpos_n_ in
                                                                                                   (
    { Declaration.name = (n, Lex_buffer.make_loc_and_fix _startpos_n_ _endpos_n_);
      value = (v, Lex_buffer.make_loc_and_fix _startpos_v_ _endpos_v_);
      important = (i, Lex_buffer.make_loc_and_fix _startpos_i_ _endpos_i_);
      loc = Lex_buffer.make_loc_and_fix _startpos _endpos;
    }
  )}

paren_block:
  _1 = LEFT_PAREN xs = list_component_value_with_loc_ _3 = RIGHT_PAREN
    {                                                               ( xs )}

bracket_block:
  _1 = LEFT_BRACKET xs = list_component_value_with_loc_ _3 = RIGHT_BRACKET
    {                                                                   ( xs )}

component_value_with_loc:
  c = component_value
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
                        ( (c, Lex_buffer.make_loc_and_fix _startpos _endpos) )}

component_value:
  b = paren_block
    {                    ( Component_value.Paren_block b )}
| b = bracket_block
    {                      ( Component_value.Bracket_block b )}
| n = NUMBER _2 = PERCENTAGE
    {                           ( Component_value.Percentage n )}
| i = IDENT
    {              ( Component_value.Ident i )}
| s = STRING
    {               ( Component_value.String s )}
| u = URI
    {            ( Component_value.Uri u )}
| o = OPERATOR
    {                 ( Component_value.Operator o )}
| d = DELIM
    {              ( Component_value.Delim d )}
| _1 = option_WHITESPACE_ _2 = COLON
    {                              ( Component_value.Delim ":" )}
| _1 = option_WHITESPACE_ _2 = DOT
    {                            ( Component_value.Delim "." )}
| f = FUNCTION xs = list_component_value_with_loc_ _3 = RIGHT_PAREN
    {                                                                   (
      Component_value.Function ((f, Lex_buffer.make_loc_and_fix _startpos_f_ _endpos_f_),
                                (xs, Lex_buffer.make_loc_and_fix _startpos_xs_ _endpos_xs_))
    )}
| _1 = option_WHITESPACE_ h = HASH
    {                                 ( Component_value.Hash h )}
| n = NUMBER
    {               ( Component_value.Number n )}
| r = UNICODE_RANGE
    {                      ( Component_value.Unicode_range r )}
| d = FLOAT_DIMENSION
    {                        ( Component_value.Float_dimension d )}
| d = DIMENSION
    {                  ( Component_value.Dimension d )}

component_value_with_loc_in_prelude:
  c = component_value_in_prelude
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
                                   ( (c, Lex_buffer.make_loc_and_fix _startpos _endpos) )}

component_value_in_prelude:
  b = paren_block
    {                    ( Component_value.Paren_block b )}
| b = bracket_block
    {                      ( Component_value.Bracket_block b )}
| n = NUMBER _2 = PERCENTAGE
    {                           ( Component_value.Percentage n )}
| i = IDENT
    {              ( Component_value.Ident i )}
| s = STRING
    {               ( Component_value.String s )}
| u = URI
    {            ( Component_value.Uri u )}
| o = OPERATOR
    {                 ( Component_value.Operator o )}
| d = DELIM
    {              ( Component_value.Delim d )}
| _1 = WHITESPACE
    {               ( Component_value.Delim "*" )}
| _1 = COLON
    {          ( Component_value.Delim ":" )}
| _1 = DOT
    {        ( Component_value.Delim "." )}
| f = FUNCTION xs = list_component_value_with_loc_ _3 = RIGHT_PAREN
    {                                                                   (
      Component_value.Function ((f, Lex_buffer.make_loc_and_fix _startpos_f_ _endpos_f_),
                                (xs, Lex_buffer.make_loc_and_fix _startpos_xs_ _endpos_xs_))
    )}
| h = HASH
    {             ( Component_value.Hash h )}
| n = NUMBER
    {               ( Component_value.Number n )}
| r = UNICODE_RANGE
    {                      ( Component_value.Unicode_range r )}
| d = FLOAT_DIMENSION
    {                        ( Component_value.Float_dimension d )}
| d = DIMENSION
    {                  ( Component_value.Dimension d )}

%%


