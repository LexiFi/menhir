%{
  open Printf
  open Atd_ast

  let syntax_error s pos1 pos2 =
    let msg = sprintf "%s:\n%s" (string_of_loc (pos1, pos2)) s in
    error msg
%}
%start full_module
%token BAR
%token CL_BRACK
%token CL_CURL
%token CL_PAREN
%token COLON
%token COMMA
%token EOF
%token EQ
%token GT
%token INHERIT
%token < string > LIDENT
%token LT
%token OF
%token OP_BRACK
%token OP_CURL
%token OP_PAREN
%token QUESTION
%token SEMICOLON
%token STAR
%token < string > STRING
%token < string > TIDENT
%token TILDE
%token TYPE
%token < string > UIDENT
%type < Atd_ast.full_module > full_module
%%

full_module:
  x = annot y = module_body
    {                             ( (((_startpos_x_, _endpos_x_), x), y) )}

module_body:
  _1 = module_item _2 = module_body
    {                            ( _1 :: _2 )}
| _1 = EOF
    {                            ( [] )}
| _e = error
    {               ( syntax_error "Syntax error" _startpos__e_ _endpos__e_ )}

annot:
  x = asection l = annot
    {                         ( x :: l )}
| 
    {                         ( ([] : annot) )}

asection:
  _1 = LT x = LIDENT l = afield_list _4 = GT
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
                                    ( (x, ((_startpos, _endpos), l)) )}
| _1 = LT _2 = LIDENT _3 = afield_list _e = error
    {                                    ( syntax_error
                                        "Expecting '>'"
                                        _startpos__e_ _endpos__e_ )}
| _1 = LT _e = error
    {                                    ( syntax_error
                                        "Expecting lowercase identifier"
                                        _startpos__e_ _endpos__e_ )}

afield_list:
  x = afield l = afield_list
    {                              ( x :: l )}
| 
    {                              ( [] )}

afield:
  _1 = LIDENT _2 = EQ _3 = STRING
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
                    ( (_1, ((_startpos, _endpos), Some _3)) )}
| _1 = LIDENT
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
                    ( (_1, ((_startpos, _endpos), None)) )}

module_item:
  _1 = TYPE p = type_param s = LIDENT a = annot _5 = EQ t = type_expr
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
                               ( `Type ((_startpos, _endpos), (s, p, a), t) )}
| _1 = TYPE _2 = type_param _3 = LIDENT _4 = annot _5 = EQ _e = error
    {    ( syntax_error "Expecting type expression" _startpos__e_ _endpos__e_ )}
| _1 = TYPE _2 = type_param _3 = LIDENT _4 = annot _e = error
    {    ( syntax_error "Expecting '='" _startpos__e_ _endpos__e_ )}
| _1 = TYPE _e = error
    {    ( syntax_error "Expecting type name" _startpos__e_ _endpos__e_ )}

type_param:
  _1 = TIDENT
    {                                    ( [ _1 ] )}
| _1 = OP_PAREN _2 = type_var_list _3 = CL_PAREN
    {                                    ( _2 )}
| 
    {                                    ( [] )}
| _1 = OP_PAREN _2 = type_var_list _e = error
    {    ( syntax_error "Expecting ')'" _startpos__e_ _endpos__e_ )}

type_var_list:
  _1 = TIDENT _2 = COMMA _3 = type_var_list
    {                               ( _1 :: _3 )}
| _1 = TIDENT
    {                               ( [ _1 ] )}

type_expr:
  _1 = OP_BRACK l = variant_list _3 = CL_BRACK a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos__1_ in
     ( `Sum ((_startpos, _endpos), l, a) )}
| _1 = OP_BRACK _2 = CL_BRACK a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos__1_ in
     ( `Sum ((_startpos, _endpos), [], a) )}
| _1 = OP_CURL l = field_list _3 = CL_CURL a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos__1_ in
     ( `Record ((_startpos, _endpos), l, a) )}
| _1 = OP_CURL _2 = CL_CURL a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos__1_ in
     ( `Record ((_startpos, _endpos), [], a) )}
| _1 = OP_PAREN x = annot_expr _3 = CL_PAREN a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos__1_ in
     ( `Tuple ((_startpos, _endpos), [x], a) )}
| _1 = OP_PAREN l = cartesian_product _3 = CL_PAREN a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos__1_ in
     ( `Tuple ((_startpos, _endpos), l, a) )}
| x = type_inst a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos_x_ in
     ( let pos1 = _startpos in
       let pos2 = _endpos in
       let loc = (pos1, pos2) in
       let loc2, name, args = x in
       match name, args with
           "list", [x] -> `List (loc, x, a)
         | "option", [x] -> `Option (loc, x, a)
         | "nullable", [x] -> `Nullable (loc, x, a)
         | "shared", [x] ->
             let a =
               if Atd_annot.has_field ["share"] "id" a then
                 (* may cause ID clashes if not used properly *)
                 a
               else
                 Atd_annot.set_field loc
                   "share" "id" (Some (Atd_annot.create_id ())) a
             in
             `Shared (loc, x, a)
         | "wrap", [x] -> `Wrap (loc, x, a)

         | ("list"|"option"|"nullable"|"shared"|"wrap"), _ ->
             syntax_error (sprintf "%s expects one argument" name) pos1 pos2

         | _ -> (`Name (loc, x, a) : type_expr) )}
| x = TIDENT
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
     ( `Tvar ((_startpos, _endpos), x) )}
| _1 = OP_BRACK _2 = variant_list _e = error
    {     ( syntax_error "Expecting ']'" _startpos__e_ _endpos__e_ )}
| _1 = OP_CURL _2 = field_list _e = error
    {     ( syntax_error "Expecting '}'" _startpos__e_ _endpos__e_ )}
| _1 = OP_PAREN _2 = cartesian_product _e = error
    {     ( syntax_error "Expecting ')'" _startpos__e_ _endpos__e_ )}

cartesian_product:
  x = annot_expr _2 = STAR l = cartesian_product
    {                                              ( x :: l )}
| x = annot_expr _2 = STAR y = annot_expr
    {                                              ( [ x; y ] )}
| 
    {                                              ( [] )}

annot_expr:
  a = annot _2 = COLON x = type_expr
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_a_ in
                                   ( ((_startpos, _endpos), x, a) )}
| x = type_expr
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
                                   ( ((_startpos, _endpos), x, []) )}

type_inst:
  l = type_args s = LIDENT
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_l_ in
                            ( ((_startpos, _endpos), s, l) )}

type_args:
  _1 = type_expr
    {                                    ( [ _1 ] )}
| _1 = OP_PAREN _2 = type_arg_list _3 = CL_PAREN
    {                                    ( _2 )}
| 
    {                                    ( [] )}
| _1 = OP_PAREN _2 = type_arg_list _e = error
    {     ( syntax_error "Expecting ')'" _startpos__e_ _endpos__e_ )}

type_arg_list:
  _1 = type_expr _2 = COMMA _3 = type_arg_list
    {                                 ( _1 :: _3 )}
| _1 = type_expr _2 = COMMA _3 = type_expr
    {                                 ( [ _1; _3 ] )}

variant_list:
  _1 = BAR _2 = variant_list0
    {                    ( _2 )}
| _1 = variant_list0
    {                    ( _1 )}

variant_list0:
  _1 = variant _2 = BAR _3 = variant_list0
    {                             ( _1 :: _3 )}
| _1 = variant
    {                             ( ([ _1 ] : variant list) )}

variant:
  x = UIDENT a = annot _3 = OF t = type_expr
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_x_ in
     ( `Variant ((_startpos, _endpos), (x, a), Some t) )}
| x = UIDENT a = annot
    {let _endpos = _endpos_a_ in
let _startpos = _startpos_x_ in
     ( `Variant ((_startpos, _endpos), (x, a), None) )}
| _1 = INHERIT t = type_expr
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
     ( `Inherit ((_startpos, _endpos), t) )}
| _1 = UIDENT _2 = annot _3 = OF _e = error
    {     ( syntax_error "Expecting type expression after 'of'"
         _startpos__e_ _endpos__e_ )}

field_list:
  x = field _2 = SEMICOLON l = field_list
    {                                       ( x :: l )}
| x = field _2 = SEMICOLON
    {                                       ( [ x ] )}
| x = field
    {                                       ( [ x ] )}

field:
  fn = field_name a = annot _3 = COLON t = type_expr
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_fn_ in
    ( let k, fk = fn in
      `Field ((_startpos, _endpos), (k, fk, a), t) )}
| _1 = INHERIT t = type_expr
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    ( `Inherit ((_startpos, _endpos), t) )}
| _1 = field_name _2 = annot _3 = COLON _e = error
    {    ( syntax_error "Expecting type expression after ':'"
        _startpos__e_ _endpos__e_ )}
| _1 = field_name _2 = annot _e = error
    {    ( syntax_error "Expecting ':'" _startpos__e_ _endpos__e_ )}

field_name:
  k = LIDENT
    {                         ( (k, `Required) )}
| _1 = QUESTION k = LIDENT
    {                         ( (k, `Optional) )}
| _1 = TILDE k = LIDENT
    {                         ( (k, `With_default) )}

%%
