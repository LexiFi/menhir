File "attapl-deptypes.mly", line 47, characters 28-38:
Warning: the token APOSTROPHE is unused.
File "attapl-deptypes.mly", line 49, characters 28-33:
Warning: the token BARGT is unused.
File "attapl-deptypes.mly", line 50, characters 28-37:
Warning: the token BARRCURLY is unused.
File "attapl-deptypes.mly", line 51, characters 28-38:
Warning: the token BARRSQUARE is unused.
File "attapl-deptypes.mly", line 53, characters 28-38:
Warning: the token COLONCOLON is unused.
File "attapl-deptypes.mly", line 54, characters 28-35:
Warning: the token COLONEQ is unused.
File "attapl-deptypes.mly", line 55, characters 28-37:
Warning: the token COLONHASH is unused.
File "attapl-deptypes.mly", line 57, characters 28-34:
Warning: the token DARROW is unused.
File "attapl-deptypes.mly", line 59, characters 28-35:
Warning: the token DDARROW is unused.
File "attapl-deptypes.mly", line 48, characters 28-34:
Warning: the token DQUOTE is unused.
File "attapl-deptypes.mly", line 63, characters 28-32:
Warning: the token EQEQ is unused.
File "attapl-deptypes.mly", line 64, characters 28-30:
Warning: the token GT is unused.
File "attapl-deptypes.mly", line 65, characters 28-32:
Warning: the token HASH is unused.
File "attapl-deptypes.mly", line 66, characters 28-34:
Warning: the token LCURLY is unused.
File "attapl-deptypes.mly", line 67, characters 28-37:
Warning: the token LCURLYBAR is unused.
File "attapl-deptypes.mly", line 68, characters 28-37:
Warning: the token LEFTARROW is unused.
File "attapl-deptypes.mly", line 71, characters 28-35:
Warning: the token LSQUARE is unused.
File "attapl-deptypes.mly", line 72, characters 28-38:
Warning: the token LSQUAREBAR is unused.
File "attapl-deptypes.mly", line 73, characters 28-30:
Warning: the token LT is unused.
File "attapl-deptypes.mly", line 70, characters 28-34:
Warning: the token Normal is unused.
File "attapl-deptypes.mly", line 74, characters 28-34:
Warning: the token RCURLY is unused.
File "attapl-deptypes.mly", line 76, characters 28-35:
Warning: the token RSQUARE is unused.
File "attapl-deptypes.mly", line 78, characters 28-33:
Warning: the token SLASH is unused.
File "attapl-deptypes.mly", line 80, characters 28-36:
Warning: the token TRIANGLE is unused.
File "attapl-deptypes.mly", line 30, characters 28-32:
Warning: the token TYPE is unused.
File "attapl-deptypes.mly", line 82, characters 28-32:
Warning: the token VBAR is unused.
%{
open Support.Error
open Support.Pervasive
open Syntax
let rec addbinders tyT l = match l with
   [] -> tyT
 | (tyX,k)::rest -> tyT
%}
%start toplevel
%token <Support.Error.info> ALL
%token <Support.Error.info> APOSTROPHE
%token <Support.Error.info> ARROW
%token <Support.Error.info> BARGT
%token <Support.Error.info> BARRCURLY
%token <Support.Error.info> BARRSQUARE
%token <Support.Error.info> COLON
%token <Support.Error.info> COLONCOLON
%token <Support.Error.info> COLONEQ
%token <Support.Error.info> COLONHASH
%token <Support.Error.info> COMMA
%token <Support.Error.info> DARROW
%token <Support.Error.info> DDARROW
%token <Support.Error.info> DOT
%token <Support.Error.info> DQUOTE
%token <Support.Error.info> EOF
%token <Support.Error.info> EQ
%token <Support.Error.info> EQEQ
%token <Support.Error.info> GT
%token <Support.Error.info> HASH
%token <Support.Error.info> IMPORT
%token <Support.Error.info> LAMBDA
%token <string Support.Error.withinfo> LCID
%token <Support.Error.info> LCURLY
%token <Support.Error.info> LCURLYBAR
%token <Support.Error.info> LEFTARROW
%token <Support.Error.info> LPAREN
%token <Support.Error.info> LSQUARE
%token <Support.Error.info> LSQUAREBAR
%token <Support.Error.info> LT
%token <Support.Error.info> NORMAL
%token <Support.Error.info> Normal
%token <Support.Error.info> ONE
%token <Support.Error.info> PI
%token <Support.Error.info> PRF
%token <Support.Error.info> PROP
%token <Support.Error.info> RCURLY
%token <Support.Error.info> RPAREN
%token <Support.Error.info> RSQUARE
%token <Support.Error.info> SEMI
%token <Support.Error.info> SIGMA
%token <Support.Error.info> SLASH
%token <Support.Error.info> STAR
%token <string Support.Error.withinfo> STRINGV
%token <Support.Error.info> TRIANGLE
%token <Support.Error.info> TWO
%token <Support.Error.info> TYPE
%token <string Support.Error.withinfo> UCID
%token <Support.Error.info> USCORE
%token <Support.Error.info> VBAR
%right COMMA
%type < Syntax.context -> (Syntax.command list * Syntax.context) > toplevel
%%

toplevel:
  _1 = EOF
    {      ( fun ctx -> [],ctx )}
| _1 = Command _2 = SEMI _3 = toplevel
    {      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )}

Command:
  _1 = IMPORT _2 = STRINGV
    {                   ( fun ctx -> (Import(_2.v)),ctx )}
| _1 = Term
    {      ( fun ctx -> (let t = _1 ctx in Whred(tmInfo t,t)),ctx )}
| _1 = LPAREN _2 = NORMAL _3 = Term _4 = RPAREN
    {      ( fun ctx -> (let t = _3 ctx in Eval(tmInfo t,t)),ctx )}
| _1 = UCID _2 = TyBinder
    {      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )}
| _1 = LCID _2 = Binder
    {      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )}

Binder:
  _1 = COLON _2 = Type
    {      ( fun ctx -> VarBind (_2 ctx))}
| _1 = EQ _2 = Term
    {      ( fun ctx -> TmAbbBind(_2 ctx, None) )}
| _1 = EQ _2 = Term _3 = COLON _4 = Type
    {      (fun ctx -> TmAbbBind(_2 ctx, Some(_4 ctx)) )}

Kind:
  _1 = PI _2 = LCID _3 = COLON _4 = Type _5 = DOT _6 = Kind
    {                                  (fun ctx -> let ctx1 = addname ctx _2.v in
          KnPi(_2.v,_4 ctx,_6 ctx1))}
| _1 = ArrowKind
    {              (_1)}

ArrowKind:
  _1 = AppType _2 = ARROW _3 = ArrowKind
    {                            ( fun ctx -> KnPi("_",_1 ctx, _3 ctx) )}
| _1 = AKind
    {        (_1 )}

AKind:
  _1 = STAR
    {         ( fun ctx -> KnStar )}
| _1 = LPAREN _2 = Kind _3 = RPAREN
    {                        ( _2 )}

Type:
  _1 = AppType
    {            ( _1 )}
| _1 = AppType _2 = ARROW _3 = Type
    {                             ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TyPi("_",_1 ctx,_3 ctx1) )}
| _1 = PI _2 = LCID _3 = COLON _4 = Type _5 = DOT _6 = Type
    {      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TyPi(_2.v,_4 ctx,_6 ctx1) )}
| _1 = SIGMA _2 = LCID _3 = COLON _4 = Type _5 = DOT _6 = Type
    {      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TySigma(_2.v,_4 ctx,_6 ctx1) )}

AppType:
  _1 = AppType _2 = ATerm
    {                  ( fun ctx -> TyApp(_1 ctx,_2 ctx) )}
| _1 = AType
    {          ( _1 )}

AType:
  _1 = LPAREN _2 = Type _3 = RPAREN
    {           ( _2 )}
| _1 = PROP
    {         (fun ctx -> TyProp)}
| _1 = PRF _2 = LPAREN _3 = Term _4 = RPAREN
    {                           (fun ctx -> TyPrf(_3 ctx))}
| _1 = UCID
    {      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else
            TyId(_1.v) )}

Term:
  _1 = AppTerm
    {      ( _1 )}
| _1 = LAMBDA _2 = LCID _3 = COLON _4 = Type _5 = DOT _6 = Term
    {      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )}
| _1 = ALL _2 = LCID _3 = COLON _4 = Type _5 = DOT _6 = Term
    {      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAll(_1, _2.v, _4 ctx, _6 ctx1) )}
| _1 = LAMBDA _2 = USCORE _3 = COLON _4 = Type _5 = DOT _6 = Term
    {      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )}

PathTerm:
  _1 = PathTerm _2 = DOT _3 = TWO
    {      ( fun ctx ->
          TmProj2(_2, _1 ctx) )}
| _1 = PathTerm _2 = DOT _3 = ONE
    {      ( fun ctx ->
          TmProj1(_2, _1 ctx) )}
| _1 = ATerm
    {          ( _1 )}

AppTerm:
  _1 = PathTerm
    {             (_1)}
| _1 = AppTerm _2 = ATerm
    {      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )}

ATerm:
  _1 = LPAREN _2 = Term _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = Term _3 = COMMA _4 = TermList _5 = COLON _6 = Type _7 = RPAREN
    {                                                 ( fun ctx ->
          TmList(_1,_2 ctx :: _4 ctx ,_6 ctx))}
| _1 = LCID
    {      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )}

TermList:
  _1 = Term
    {        ( fun ctx -> [_1 ctx] )}
| _1 = Term _2 = COMMA _3 = TermList
    {                       ( fun ctx -> _1 ctx :: _3 ctx)}

TyBinder:
  _1 = COLON _2 = Kind
    {      ( fun ctx -> TyVarBind(_2 ctx) )}
| _1 = EQ _2 = Type
    {      ( fun ctx -> TyAbbBind(_2 ctx, None) )}

%%
