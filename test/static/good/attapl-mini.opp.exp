File "attapl-mini.mly", line 41, characters 7-11:
Warning: the token BANG is unused.
File "attapl-mini.mly", line 45, characters 7-11:
Warning: the token DATA is unused.
File "attapl-mini.mly", line 54, characters 7-10:
Warning: the token END is unused.
File "attapl-mini.mly", line 30, characters 7-13:
Warning: the token LANGLE is unused.
File "attapl-mini.mly", line 28, characters 7-15:
Warning: the token LBRACKET is unused.
File "attapl-mini.mly", line 52, characters 7-12:
Warning: the token MATCH is unused.
File "attapl-mini.mly", line 46, characters 7-14:
Warning: the token MUTABLE is unused.
File "attapl-mini.mly", line 31, characters 7-13:
Warning: the token RANGLE is unused.
File "attapl-mini.mly", line 29, characters 7-15:
Warning: the token RBRACKET is unused.
File "attapl-mini.mly", line 44, characters 7-12:
Warning: the token SLASH is unused.
File "attapl-mini.mly", line 32, characters 7-11:
Warning: the token TYPE is unused.
File "attapl-mini.mly", line 53, characters 7-11:
Warning: the token WITH is unused.
File "attapl-mini.mly", line 245, characters 0-7:
Warning: symbol opt_bar is unreachable from any of the start symbol(s).
File "attapl-mini.mly", line 202, characters 0-13:
Warning: symbol record_fields is unreachable from any of the start symbol(s).
File "attapl-mini.mly", line 78, characters 0-6:
Warning: symbol scheme is unreachable from any of the start symbol(s).
%{

open Sig
open MiniPrimitives

let app e1 e2 =
  EApp (e1, e2)

let infix id e1 e2 =
  app (app (EVar id) e1) e2

let seq e1 e2 =
  EBinding (BindValue [[], PTuple [], e1], e2)

%}
%start program
%token AND
%token ARROW
%token AS
%token BACKSLASH
%token BANG
%token BAR
%token COLON
%token COMMA
%token DATA
%token DOT
%token END
%token EOF
%token EQUAL
%token EXISTS
%token FORALL
%token IN
%token <string> INFIXOP0
%token <string> INFIXOP1
%token <string> INFIXOP2
%token <string> INFIXOP3
%token <string> INFIXOP4
%token <int> INTEGER
%token LANGLE
%token LBRACE
%token LBRACKET
%token LEFTARROW
%token LET
%token <string> LID
%token LPAREN
%token MATCH
%token MUTABLE
%token RANGLE
%token RBRACE
%token RBRACKET
%token REC
%token RPAREN
%token SEMI
%token SLASH
%token STAR
%token TYPE
%token <string> UID
%token UNIT
%token WILD
%token WITH
%left EQUAL INFIXOP0
%right INFIXOP1
%left INFIXOP2
%left INFIXOP3
%right INFIXOP4
%type <MiniPrimitives.t Sig.binding list> program
%%

program:
  _1 = bindings _2 = EOF
    {                                                                ( List.rev _1 )}

forall:
  
    {                                                                ( [] )}
| _1 = FORALL _2 = quantifiers _3 = DOT
    {                                                                ( _2 )}

quantifiers:
  _1 = quantifier
    {                                                                ( [ _1 ] )}
| _1 = quantifiers _2 = quantifier
    {                                                                ( _2 :: _1 )}

quantifier:
  _1 = LID
    {                                                                ( _1 )}

typ:
  _1 = type2
    {                                                                ( _1 )}

type2:
  _1 = type1 _2 = ARROW _3 = type2
    {                                                                ( TypArrow (_1, _3) )}
| _1 = type1
    {                                                                ( _1 )}

type1:
  _1 = type0 _2 = STAR _3 = type1
    {                                                                ( match _3 with
                                                                  | TypTuple typs -> TypTuple (_1 :: typs)
								  | _ -> TypTuple [ _1; _3 ] )}
| _1 = type0
    {                                                                ( _1 )}

type0:
  _1 = LID
    {                                                                ( TypVar _1 )}
| _1 = UNIT
    {                                                                ( TypTuple [] )}
| _1 = LPAREN _2 = typ _3 = RPAREN
    {                                                                ( _2 )}
| _1 = LPAREN _2 = typ _3 = COMMA _4 = types _5 = RPAREN
    {                                                                ( TypTuple (_2 :: _4) )}

types:
  _1 = typ
    {                                                                ( [ _1 ] )}
| _1 = typ _2 = COMMA _3 = types
    {                                                                ( _1 :: _3 )}

expression:
  _1 = expression400
    {                                                                ( _1 )}

expression400:
  _1 = BACKSLASH _2 = pattern _3 = DOT _4 = expression400
    {                                                                ( ELambda (_2, _4) )}
| _1 = binding _2 = IN _3 = expression400
    {                                                                ( EBinding (_1, _3) )}
| _1 = EXISTS _2 = quantifiers _3 = DOT _4 = expression400
    {                                                                ( EExists (_2, _4) )}
| _1 = expression300 _2 = SEMI _3 = expression400
    {                                                                ( seq _1 _3 )}
| _1 = expression300
    {                                                                ( _1 )}

expression300:
  _1 = expression0 _2 = DOT _3 = LID _4 = LEFTARROW _5 = expression100
    {                                                                ( ERecordUpdate (_1, _3, _5) )}
| _1 = expression200
    {                                                                ( _1 )}

expression200:
  _1 = expression200 _2 = INFIXOP0 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP1 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP2 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP3 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP4 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = EQUAL _3 = expression200
    {                                                                ( infix "=" _1 _3 )}
| _1 = expression100
    {                                                                ( _1 )}

expression100:
  _1 = expression100 _2 = expression0
    {                                                                ( EApp (_1, _2) )}
| _1 = expression0
    {                                                                ( _1 )}

expression0:
  _1 = LID
    {                                                                ( EVar _1 )}
| _1 = INTEGER
    {                                                                ( EPrimApp (PIntegerConstant _1, []) )}
| _1 = expression0 _2 = DOT _3 = LID
    {                                                                ( ERecordAccess (_1, _3) )}
| _1 = LBRACE _2 = bindings _3 = RBRACE
    {                                                                ( ERecordExtend (List.rev _2, ERecordEmpty) )}
| _1 = LPAREN _2 = RPAREN
    {                                                                ( ETuple [] )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                                                ( _2 )}
| _1 = LPAREN _2 = expression _3 = COLON _4 = typ _5 = RPAREN
    {                                                                ( ETypeConstraint (_2, _4) )}
| _1 = LPAREN _2 = expression _3 = COMMA _4 = expressions _5 = RPAREN
    {                                                                ( ETuple (_2 :: _4) )}

expressions:
  _1 = expression
    {                                                                ( [ _1 ] )}
| _1 = expression _2 = COMMA _3 = expressions
    {                                                                ( _1 :: _3 )}

bindings:
  
    {                                                                ( [] )}
| _1 = bindings _2 = binding
    {                                                                ( _2 :: _1 )}

binding:
  _1 = LET _2 = value_definitions
    {                                                                ( BindValue _2 )}
| _1 = LET _2 = REC _3 = value_definitions
    {                                                                ( BindRecValue _3 )}

value_definitions:
  _1 = value_definition
    {                                                                ( [ _1 ] )}
| _1 = value_definitions _2 = AND _3 = value_definition
    {                                                                ( _3 :: _1 )}

value_definition:
  _1 = forall _2 = pattern0 _3 = equal_expression
    {                                                                ( (_1, _2, _3) )}

equal_expression:
  _1 = EQUAL _2 = expression
    {                                                                ( _2 )}
| _1 = COLON _2 = typ _3 = EQUAL _4 = expression
    {                                                                ( ETypeConstraint (_4, _2) )}
| _1 = pattern0 _2 = equal_expression
    {                                                                ( ELambda (_1, _2) )}

pattern:
  _1 = pattern3
    {                                                                ( _1 )}

pattern3:
  _1 = pattern2
    {                                                                ( _1 )}
| _1 = pattern3 _2 = COLON _3 = typ
    {                                                                ( PTypeConstraint (_1, _3) )}

pattern2:
  _1 = pattern1
    {                                                                ( _1 )}
| _1 = LID _2 = AS _3 = pattern2
    {                                                                ( PAlias (_1, _3) )}

pattern1:
  _1 = pattern0
    {                                                                ( _1 )}
| _1 = UID _2 = pattern0s
    {                                                                ( PData (_1, List.rev _2) )}

pattern0:
  _1 = LID
    {                                                                ( PVar _1 )}
| _1 = WILD
    {                                                                ( PWildcard )}
| _1 = INTEGER
    {                                                                ( assert false (* TEMPORARY *) )}
| _1 = LPAREN _2 = RPAREN
    {                                                                ( PTuple [] )}
| _1 = LPAREN _2 = pattern _3 = RPAREN
    {                                                                ( _2 )}
| _1 = LPAREN _2 = pattern _3 = COMMA _4 = patterns _5 = RPAREN
    {                                                                ( PTuple (_2 :: _4) )}

patterns:
  _1 = pattern
    {                                                                ( [ _1 ] )}
| _1 = pattern _2 = COMMA _3 = patterns
    {                                                                ( _1 :: _3 )}

pattern0s:
  
    {                                                                ( [] )}
| _1 = pattern0s _2 = pattern0
    {                                                                ( _2 :: _1 )}

%%
