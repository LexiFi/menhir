State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On A shift to state 1
-- On main shift to state 3
-- On liste(A) shift to state 4
## Reductions:
-- On C reduce production liste(A) ->
-- On B reduce production liste(A) ->
-- On # reduce production liste(A) ->
** End-of-stream conflict on C B A
**   There is a tension between
**   (1) reducing production liste(A) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
## Known stack suffix:
## A
## LR(1) items:
liste(A) -> A . liste(A) [ C B # ]
## Transitions:
-- On A shift to state 1
-- On liste(A) shift to state 2
## Reductions:
-- On C reduce production liste(A) ->
-- On B reduce production liste(A) ->
-- On # reduce production liste(A) ->
** End-of-stream conflict on C B A
**   There is a tension between
**   (1) reducing production liste(A) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 2:
## Known stack suffix:
## A liste(A)
## LR(1) items:
liste(A) -> A liste(A) . [ C B # ]
## Transitions:
## Reductions:
-- On C reduce production liste(A) -> A liste(A)
-- On B reduce production liste(A) -> A liste(A)
-- On # reduce production liste(A) -> A liste(A)
** End-of-stream conflict on C B
**   There is a tension between
**   (1) reducing production liste(A) -> A liste(A)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 3:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

State 4:
## Known stack suffix:
## liste(A)
## LR(1) items:
main -> liste(A) . liste(B) liste(C) [ # ]
## Transitions:
-- On B shift to state 5
-- On liste(B) shift to state 7
## Reductions:
-- On C reduce production liste(B) ->
-- On # reduce production liste(B) ->
** End-of-stream conflict on C B
**   There is a tension between
**   (1) reducing production liste(B) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 5:
## Known stack suffix:
## B
## LR(1) items:
liste(B) -> B . liste(B) [ C # ]
## Transitions:
-- On B shift to state 5
-- On liste(B) shift to state 6
## Reductions:
-- On C reduce production liste(B) ->
-- On # reduce production liste(B) ->
** End-of-stream conflict on C B
**   There is a tension between
**   (1) reducing production liste(B) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 6:
## Known stack suffix:
## B liste(B)
## LR(1) items:
liste(B) -> B liste(B) . [ C # ]
## Transitions:
## Reductions:
-- On C reduce production liste(B) -> B liste(B)
-- On # reduce production liste(B) -> B liste(B)
** End-of-stream conflict on C
**   There is a tension between
**   (1) reducing production liste(B) -> B liste(B)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 7:
## Known stack suffix:
## liste(A) liste(B)
## LR(1) items:
main -> liste(A) liste(B) . liste(C) [ # ]
## Transitions:
-- On C shift to state 8
-- On liste(C) shift to state 10
## Reductions:
-- On # reduce production liste(C) ->
** End-of-stream conflict on C
**   There is a tension between
**   (1) reducing production liste(C) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
## Known stack suffix:
## C
## LR(1) items:
liste(C) -> C . liste(C) [ # ]
## Transitions:
-- On C shift to state 8
-- On liste(C) shift to state 9
## Reductions:
-- On # reduce production liste(C) ->
** End-of-stream conflict on C
**   There is a tension between
**   (1) reducing production liste(C) ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
## Known stack suffix:
## C liste(C)
## LR(1) items:
liste(C) -> C liste(C) . [ # ]
## Transitions:
## Reductions:
-- On # reduce production liste(C) -> C liste(C)

State 10:
## Known stack suffix:
## liste(A) liste(B) liste(C)
## LR(1) items:
main -> liste(A) liste(B) liste(C) . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> liste(A) liste(B) liste(C)

