%start file
%token ABORT
%token ADDRESS
%token ALONG
%token BALANCE
%token BECOME
%token BLOCK
%token BOOL
%token BYTES32
%token CASE
%token COMMA
%token CONTRACT
%token <WrapBn.t> DECLIT256
%token <WrapBn.t> DECLIT8
%token DEFAULT
%token DEPLOY
%token DOT
%token ELSE
%token EOF
%token EQUALITY
%token EVENT
%token FALSE
%token GT
%token <string> IDENT
%token IF
%token INDEXED
%token LAND
%token LBRACE
%token LOG
%token LPAR
%token LSQBR
%token LT
%token MINUS
%token MSG
%token MULT
%token NEQ
%token NOT
%token NOW
%token PLUS
%token RARROW
%token RBRACE
%token REENTRANCE
%token RETURN
%token RPAR
%token RSQBR
%token SELFDESTRUCT
%token SEMICOLON
%token SENDER
%token SINGLE_EQ
%token THEN
%token THIS
%token TRUE
%token UINT256
%token UINT8
%token VALUE
%token VOID
%right RARROW
%left LAND
%left EQUALITY GT LT NEQ
%left MINUS PLUS
%left MULT
%type <unit Syntax.toplevel list> file
%%

option_exp_:
  
    {    ( None )}
| x = exp
    {    ( Some x )}

loption_separated_nonempty_list_COMMA_arg__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_arg_
    {    ( x )}

loption_separated_nonempty_list_COMMA_event_arg__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_event_arg_
    {    ( x )}

loption_separated_nonempty_list_COMMA_exp__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_exp_
    {    ( x )}

list_case_:
  
    {    ( [] )}
| x = case xs = list_case_
    {    ( x :: xs )}

list_contract_:
  
    {    ( [] )}
| x = contract xs = list_contract_
    {    ( x :: xs )}

list_sentence_:
  
    {    ( [] )}
| x = sentence xs = list_sentence_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_arg_:
  x = arg
    {    ( [ x ] )}
| x = arg _2 = COMMA xs = separated_nonempty_list_COMMA_arg_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_event_arg_:
  x = event_arg
    {    ( [ x ] )}
| x = event_arg _2 = COMMA xs = separated_nonempty_list_COMMA_event_arg_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_exp_:
  x = exp
    {    ( [ x ] )}
| x = exp _2 = COMMA xs = separated_nonempty_list_COMMA_exp_
    {    ( x :: xs )}

file:
  cs = list_contract_ _2 = EOF
    {                              ( cs )}

contract:
  _1 = CONTRACT name = IDENT _1_inlined1 = LPAR xs = loption_separated_nonempty_list_COMMA_arg__ _3 = RPAR _4 = LBRACE css = list_case_ _6 = RBRACE
    {let args =
  let xs =
    let x =     ( xs ) in
        ( x )
  in
                                                          (xs)
in
    ( Syntax.Contract
      ({ Syntax.contract_cases = css
       ; contract_name = name
       ; contract_arguments = args}) )}
| _1 = EVENT name = IDENT _1_inlined1 = LPAR xs = loption_separated_nonempty_list_COMMA_event_arg__ _3 = RPAR _4 = SEMICOLON
    {let args =
  let xs =
    let x =     ( xs ) in
        ( x )
  in
                                                          (xs)
in
    ( Syntax.Event { Syntax.event_arguments = args
      ; event_name = name
      })}

case:
  ch = case_header cb = block
    {    (
      { Syntax.case_header = ch
      ; Syntax.case_body = cb
      }
     )}

block:
  _1 = LBRACE scs = list_sentence_ _3 = RBRACE
    {    ( scs )}

case_header:
  _1 = DEFAULT
    {            ( Syntax.DefaultCaseHeader )}
| _1 = CASE _2 = LPAR return_typ = typ name = IDENT _1_inlined1 = LPAR xs = loption_separated_nonempty_list_COMMA_arg__ _3 = RPAR _6 = RPAR
    {let args =
  let xs =
    let x =     ( xs ) in
        ( x )
  in
                                                          (xs)
in
         ( Syntax.UsualCaseHeader
      { case_return_typ = [return_typ] (* multi returns not supported *)
      ; Syntax.case_name = name
      ; case_arguments = args
      }
    )}
| _1 = CASE _2 = LPAR _3 = VOID name = IDENT _1_inlined1 = LPAR xs = loption_separated_nonempty_list_COMMA_arg__ _3_inlined1 = RPAR _6 = RPAR
    {let args =
  let xs =
    let x =     ( xs ) in
        ( x )
  in
                                                          (xs)
in
         ( Syntax.UsualCaseHeader
      { case_return_typ = []
      ; Syntax.case_name = name
      ; case_arguments = args
      }
    )}

arg:
  t = typ i = IDENT
    {    ( { Syntax.arg_typ = t
      ; Syntax.arg_ident = i
      ; Syntax.arg_location = None
      }
    )}

event_arg:
  a = arg
    {            ( Syntax.event_arg_of_arg a false )}
| t = typ _2 = INDEXED i = IDENT
    {    ( { Syntax.event_arg_body =
        { Syntax.arg_typ = t
        ; Syntax.arg_ident = i
        ; Syntax.arg_location = None
        }
      ; Syntax.event_arg_indexed = true
      }
    )}

typ:
  _1 = UINT256
    {            ( Syntax.Uint256Type )}
| _1 = UINT8
    {          ( Syntax.Uint8Type )}
| _1 = BYTES32
    {            ( Syntax.Bytes32Type )}
| _1 = ADDRESS
    {            ( Syntax.AddressType )}
| _1 = BOOL
    {         ( Syntax.BoolType )}
| key = typ _2 = RARROW value = typ
    {    ( Syntax.MappingType (key, value) )}
| s = IDENT
    {              ( Syntax.ContractInstanceType s )}

sentence:
  _1 = ABORT _2 = SEMICOLON
    {                     ( Syntax.AbortSentence )}
| _1 = RETURN value = option_exp_ _3 = THEN _4 = BECOME cont = exp _6 = SEMICOLON
    {    ( Syntax.ReturnSentence { Syntax. return_exp = value; return_cont = cont} )}
| lhs = lexp _2 = SINGLE_EQ rhs = exp _4 = SEMICOLON
    {    ( Syntax.AssignmentSentence (lhs, rhs) )}
| t = typ name = IDENT _3 = SINGLE_EQ value = exp _5 = SEMICOLON
    {              ( Syntax.VariableInitSentence
                { Syntax.variable_init_type = t
                ; variable_init_name = name
                ; variable_init_value = value
                }
              )}
| _1 = VOID _2 = SINGLE_EQ value = exp _4 = SEMICOLON
    {    ( Syntax.ExpSentence value )}
| _1 = IF _2 = LPAR cond = exp _4 = RPAR s = sentence _6 = ELSE s_inlined1 = sentence
    {let bodyF =
  let s = s_inlined1 in
                   ([s])
in
let bodyT =                  ([s]) in
                                                                 ( Syntax.IfThenElse (cond, bodyT, bodyF) )}
| _1 = IF _2 = LPAR cond = exp _4 = RPAR s = sentence _6 = ELSE b = block
    {let bodyF =               (b) in
let bodyT =                  ([s]) in
                                                                 ( Syntax.IfThenElse (cond, bodyT, bodyF) )}
| _1 = IF _2 = LPAR cond = exp _4 = RPAR b = block _6 = ELSE s = sentence
    {let bodyF =                  ([s]) in
let bodyT =               (b) in
                                                                 ( Syntax.IfThenElse (cond, bodyT, bodyF) )}
| _1 = IF _2 = LPAR cond = exp _4 = RPAR b = block _6 = ELSE b_inlined1 = block
    {let bodyF =
  let b = b_inlined1 in
                (b)
in
let bodyT =               (b) in
                                                                 ( Syntax.IfThenElse (cond, bodyT, bodyF) )}
| _1 = IF _2 = LPAR cond = exp _4 = RPAR s = sentence
    {let body =                  ([s]) in
                                            ( Syntax.IfThenOnly (cond, body) )}
| _1 = IF _2 = LPAR cond = exp _4 = RPAR b = block
    {let body =               (b) in
                                            ( Syntax.IfThenOnly (cond, body) )}
| _1 = LOG name = IDENT _1_inlined1 = LPAR xs = loption_separated_nonempty_list_COMMA_exp__ _3 = RPAR _4 = SEMICOLON
    {let lst =
  let lst =
    let xs =
      let x =     ( xs ) in
          ( x )
    in
                                                            (xs)
  in
                      (lst)
in
                                                 ( Syntax.LogSentence (name, lst, None))}
| _1 = SELFDESTRUCT e = exp _3 = SEMICOLON
    {                                     ( Syntax.SelfdestructSentence e )}

exp:
  lhs = exp _2 = LAND rhs = exp
    {                               ( Syntax.LandExp (lhs, rhs), () )}
| _1 = TRUE
    {         ( Syntax.TrueExp, () )}
| _1 = FALSE
    {          ( Syntax.FalseExp, () )}
| d = DECLIT256
    {                  ( Syntax.DecLit256Exp d, ())}
| d = DECLIT8
    {                ( Syntax.DecLit8Exp d, ())}
| _1 = VALUE _2 = LPAR _3 = MSG _4 = RPAR
    {                        ( Syntax.ValueExp, () )}
| _1 = SENDER _2 = LPAR _3 = MSG _4 = RPAR
    {                         ( Syntax.SenderExp, () )}
| _1 = BALANCE _2 = LPAR e = exp _4 = RPAR
    {                                 ( Syntax.BalanceExp e, () )}
| _1 = NOW _2 = LPAR _3 = BLOCK _4 = RPAR
    {                        ( Syntax.NowExp, () )}
| lhs = exp _1 = PLUS rhs = exp
    {let o =          (fun (l, r) -> Syntax.PlusExp(l, r)) in
                                 ( (o (lhs, rhs)), () )}
| lhs = exp _1 = MINUS rhs = exp
    {let o =           (fun (l, r)  -> Syntax.MinusExp(l, r)) in
                                 ( (o (lhs, rhs)), () )}
| lhs = exp _1 = MULT rhs = exp
    {let o =          (fun (l, r) -> Syntax.MultExp(l, r)) in
                                 ( (o (lhs, rhs)), () )}
| lhs = exp _1 = LT rhs = exp
    {let o =        (fun (l, r) -> Syntax.LtExp(l, r)) in
                                 ( (o (lhs, rhs)), () )}
| lhs = exp _1 = GT rhs = exp
    {let o =        (fun (l, r) -> Syntax.GtExp(l, r)) in
                                 ( (o (lhs, rhs)), () )}
| lhs = exp _1 = NEQ rhs = exp
    {let o =         (fun (l, r) -> Syntax.NeqExp(l, r)) in
                                 ( (o (lhs, rhs)), () )}
| lhs = exp _1 = EQUALITY rhs = exp
    {let o =              (fun (l, r) -> Syntax.EqualityExp(l, r)) in
                                 ( (o (lhs, rhs)), () )}
| s = IDENT
    {    ( Syntax.IdentifierExp s, () )}
| _1 = LPAR e = exp _3 = RPAR
    {    ( Syntax.ParenthExp e, () )}
| s = IDENT _1 = LPAR xs = loption_separated_nonempty_list_COMMA_exp__ _3 = RPAR
    {let lst =
  let lst =
    let xs =
      let x =     ( xs ) in
          ( x )
    in
                                                            (xs)
  in
                      (lst)
in
                              ( Syntax.FunctionCallExp {Syntax.call_head = s; call_args = lst }, () )}
| _1 = DEPLOY s = IDENT _1_inlined1 = LPAR xs = loption_separated_nonempty_list_COMMA_exp__ _3 = RPAR m = msg_info
    {let lst =
  let lst =
    let xs =
      let x =     ( xs ) in
          ( x )
    in
                                                            (xs)
  in
                      (lst)
in
                                                    ( Syntax.NewExp { Syntax.new_head = s; new_args = lst; new_msg_info = m }, () )}
| contr = exp _2 = DOT _3 = DEFAULT _4 = LPAR _5 = RPAR m = msg_info
    {    ( Syntax.SendExp { Syntax.send_head_contract = contr; send_head_method = None
                       ; send_args = []; send_msg_info = m }, () )}
| contr = exp _2 = DOT mtd = IDENT _1 = LPAR xs = loption_separated_nonempty_list_COMMA_exp__ _3 = RPAR m = msg_info
    {let lst =
  let lst =
    let xs =
      let x =     ( xs ) in
          ( x )
    in
                                                            (xs)
  in
                      (lst)
in
    ( Syntax.SendExp { Syntax.send_head_contract = contr; send_head_method = Some mtd
                       ; send_args = (lst); send_msg_info = m }, () )}
| _1 = ADDRESS _2 = LPAR e = exp _4 = RPAR
    {                                 ( Syntax.AddressExp e, () )}
| _1 = NOT e = exp
    {                 ( Syntax.NotExp e, () )}
| _1 = THIS
    {         ( Syntax.ThisExp, () )}
| l = lexp
    {    ( Syntax.ArrayAccessExp l, () )}

msg_info:
  v = value_info r = reentrance_info
    {                                        ( { Syntax.message_value_info = v;
                                            message_reentrance_info = r } )}

value_info:
  
    {                ( None )}
| _1 = ALONG v = exp
    {                    ( Some v )}

reentrance_info:
  _1 = REENTRANCE b = block
    {                          ( b )}

lexp:
  s = exp _2 = LSQBR idx = exp _4 = RSQBR
    {    ( Syntax.ArrayAccessLExp {
       Syntax.array_access_array = s; array_access_index = idx} )}

%%
