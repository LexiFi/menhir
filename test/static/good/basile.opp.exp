%{
  open Ast
%}
%start file
%token END
%token EOF
%token <string> IDENT
%token SEMI
%token STRUCT
%token T_PAAMAYIM_NEKUDOTAYIM
%type <Ast.pdecl_desc Ast.loc> decl
%type <Ast.pdecl_desc> decl_desc
%type <Ast.file> file
%%

option___anonymous_0_:
  
    {    ( None )}
| _1 = T_PAAMAYIM_NEKUDOTAYIM i = mkloc_IDENT_
    {let x =                                                        ( i ) in
    ( Some x )}

file:
  d = decl _2 = EOF
    {                     ( [d] )}

decl_desc:
  _1 = STRUCT ps = separated_SEMI_param_ _3 = END
    {    ( PDstruct ({txt="f";loc=(Lexing.dummy_pos, Lexing.dummy_pos)}, ps, false) )}

decl:
  d = mkloc_decl_desc_
    {                        ( d )}

separated_SEMI_param_:
  
    {              ( [] )}
| _1 = SEMI ps = separated_SEMI_param_
    {                                  ( ps )}
| p = param
    {            ( [p] )}
| hd = param _2 = SEMI tl = separated_SEMI_param_
    {                                             ( hd :: tl )}

param:
  p = mkloc_IDENT_ t = option___anonymous_0_
    {                                                               ( (p, t) )}

mkloc_IDENT_:
  txt = IDENT
    {let _endpos = _endpos_txt_ in
let _symbolstartpos = _startpos_txt_ in
let _sloc = (_symbolstartpos, _endpos) in
              ( { txt; loc= _sloc } )}

mkloc_decl_desc_:
  txt = decl_desc
    {let _endpos = _endpos_txt_ in
let _symbolstartpos = _startpos_txt_ in
let _sloc = (_symbolstartpos, _endpos) in
              ( { txt; loc= _sloc } )}

%%
