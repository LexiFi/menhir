State 0:
program' -> . program [ # ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FUNCTION shift to state 89
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On toplevel_list shift to state 100
-- On toplevel shift to state 102
-- On statement shift to state 104
-- On program shift to state 105
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
-- On EOF reduce production toplevel_list -> 

State 1:
loop_statement -> WHILE . LEFT_PAREN expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On LEFT_PAREN shift to state 2

State 2:
loop_statement -> WHILE LEFT_PAREN . expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 57
-- On binary_expression shift to state 23

State 3:
expression -> TRUE . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> TRUE 
-- On SEQ reduce production expression -> TRUE 
-- On SEMICOLON reduce production expression -> TRUE 
-- On RIGHT_PAREN reduce production expression -> TRUE 
-- On RIGHT_BRACK reduce production expression -> TRUE 
-- On PLUS reduce production expression -> TRUE 
-- On MULTIPLY reduce production expression -> TRUE 
-- On MODULO reduce production expression -> TRUE 
-- On MINUS reduce production expression -> TRUE 
-- On LT reduce production expression -> TRUE 
-- On LE reduce production expression -> TRUE 
-- On GT reduce production expression -> TRUE 
-- On GE reduce production expression -> TRUE 
-- On DIVIDE reduce production expression -> TRUE 
-- On CONCAT reduce production expression -> TRUE 
-- On COMMA reduce production expression -> TRUE 
-- On ANE reduce production expression -> TRUE 
-- On AEQ reduce production expression -> TRUE 

State 4:
expression -> STRING . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> STRING 
-- On SEQ reduce production expression -> STRING 
-- On SEMICOLON reduce production expression -> STRING 
-- On RIGHT_PAREN reduce production expression -> STRING 
-- On RIGHT_BRACK reduce production expression -> STRING 
-- On PLUS reduce production expression -> STRING 
-- On MULTIPLY reduce production expression -> STRING 
-- On MODULO reduce production expression -> STRING 
-- On MINUS reduce production expression -> STRING 
-- On LT reduce production expression -> STRING 
-- On LE reduce production expression -> STRING 
-- On GT reduce production expression -> STRING 
-- On GE reduce production expression -> STRING 
-- On DIVIDE reduce production expression -> STRING 
-- On CONCAT reduce production expression -> STRING 
-- On COMMA reduce production expression -> STRING 
-- On ANE reduce production expression -> STRING 
-- On AEQ reduce production expression -> STRING 

State 5:
unary_expression -> NOT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 56
-- On binary_expression shift to state 23

State 6:
expression -> LEFT_PAREN . expression RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 54
-- On binary_expression shift to state 23

State 7:
expression -> LEFT_BRACK . expression_list RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression_list shift to state 52
-- On expression shift to state 49
-- On binary_expression shift to state 23
-- On RIGHT_BRACK reduce production expression_list -> 

State 8:
expression -> INT . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> INT 
-- On SEQ reduce production expression -> INT 
-- On SEMICOLON reduce production expression -> INT 
-- On RIGHT_PAREN reduce production expression -> INT 
-- On RIGHT_BRACK reduce production expression -> INT 
-- On PLUS reduce production expression -> INT 
-- On MULTIPLY reduce production expression -> INT 
-- On MODULO reduce production expression -> INT 
-- On MINUS reduce production expression -> INT 
-- On LT reduce production expression -> INT 
-- On LE reduce production expression -> INT 
-- On GT reduce production expression -> INT 
-- On GE reduce production expression -> INT 
-- On DIVIDE reduce production expression -> INT 
-- On CONCAT reduce production expression -> INT 
-- On COMMA reduce production expression -> INT 
-- On ANE reduce production expression -> INT 
-- On AEQ reduce production expression -> INT 

State 9:
expression -> IDENTIFIER . LEFT_PAREN expression_list RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
leftvalue -> IDENTIFIER . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
-- On LEFT_PAREN shift to state 10
-- On SNE reduce production leftvalue -> IDENTIFIER 
-- On SEQ reduce production leftvalue -> IDENTIFIER 
-- On SEMICOLON reduce production leftvalue -> IDENTIFIER 
-- On RIGHT_PAREN reduce production leftvalue -> IDENTIFIER 
-- On RIGHT_BRACK reduce production leftvalue -> IDENTIFIER 
-- On PLUS reduce production leftvalue -> IDENTIFIER 
-- On MULTIPLY reduce production leftvalue -> IDENTIFIER 
-- On MODULO reduce production leftvalue -> IDENTIFIER 
-- On MINUS reduce production leftvalue -> IDENTIFIER 
-- On LT reduce production leftvalue -> IDENTIFIER 
-- On LEFT_BRACK reduce production leftvalue -> IDENTIFIER 
-- On LE reduce production leftvalue -> IDENTIFIER 
-- On GT reduce production leftvalue -> IDENTIFIER 
-- On GE reduce production leftvalue -> IDENTIFIER 
-- On EQUAL reduce production leftvalue -> IDENTIFIER 
-- On DIVIDE reduce production leftvalue -> IDENTIFIER 
-- On CONCAT reduce production leftvalue -> IDENTIFIER 
-- On COMMA reduce production leftvalue -> IDENTIFIER 
-- On ANE reduce production leftvalue -> IDENTIFIER 
-- On AEQ reduce production leftvalue -> IDENTIFIER 

State 10:
expression -> IDENTIFIER LEFT_PAREN . expression_list RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression_list shift to state 47
-- On expression shift to state 49
-- On binary_expression shift to state 23
-- On RIGHT_PAREN reduce production expression_list -> 

State 11:
expression -> FLOAT . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> FLOAT 
-- On SEQ reduce production expression -> FLOAT 
-- On SEMICOLON reduce production expression -> FLOAT 
-- On RIGHT_PAREN reduce production expression -> FLOAT 
-- On RIGHT_BRACK reduce production expression -> FLOAT 
-- On PLUS reduce production expression -> FLOAT 
-- On MULTIPLY reduce production expression -> FLOAT 
-- On MODULO reduce production expression -> FLOAT 
-- On MINUS reduce production expression -> FLOAT 
-- On LT reduce production expression -> FLOAT 
-- On LE reduce production expression -> FLOAT 
-- On GT reduce production expression -> FLOAT 
-- On GE reduce production expression -> FLOAT 
-- On DIVIDE reduce production expression -> FLOAT 
-- On CONCAT reduce production expression -> FLOAT 
-- On COMMA reduce production expression -> FLOAT 
-- On ANE reduce production expression -> FLOAT 
-- On AEQ reduce production expression -> FLOAT 

State 12:
expression -> FALSE . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> FALSE 
-- On SEQ reduce production expression -> FALSE 
-- On SEMICOLON reduce production expression -> FALSE 
-- On RIGHT_PAREN reduce production expression -> FALSE 
-- On RIGHT_BRACK reduce production expression -> FALSE 
-- On PLUS reduce production expression -> FALSE 
-- On MULTIPLY reduce production expression -> FALSE 
-- On MODULO reduce production expression -> FALSE 
-- On MINUS reduce production expression -> FALSE 
-- On LT reduce production expression -> FALSE 
-- On LE reduce production expression -> FALSE 
-- On GT reduce production expression -> FALSE 
-- On GE reduce production expression -> FALSE 
-- On DIVIDE reduce production expression -> FALSE 
-- On CONCAT reduce production expression -> FALSE 
-- On COMMA reduce production expression -> FALSE 
-- On ANE reduce production expression -> FALSE 
-- On AEQ reduce production expression -> FALSE 

State 13:
expression -> unary_expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> unary_expression 
-- On SEQ reduce production expression -> unary_expression 
-- On SEMICOLON reduce production expression -> unary_expression 
-- On RIGHT_PAREN reduce production expression -> unary_expression 
-- On RIGHT_BRACK reduce production expression -> unary_expression 
-- On PLUS reduce production expression -> unary_expression 
-- On MULTIPLY reduce production expression -> unary_expression 
-- On MODULO reduce production expression -> unary_expression 
-- On MINUS reduce production expression -> unary_expression 
-- On LT reduce production expression -> unary_expression 
-- On LE reduce production expression -> unary_expression 
-- On GT reduce production expression -> unary_expression 
-- On GE reduce production expression -> unary_expression 
-- On DIVIDE reduce production expression -> unary_expression 
-- On CONCAT reduce production expression -> unary_expression 
-- On COMMA reduce production expression -> unary_expression 
-- On ANE reduce production expression -> unary_expression 
-- On AEQ reduce production expression -> unary_expression 

State 14:
expression -> leftvalue . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
leftvalue -> leftvalue . LEFT_BRACK expression RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On LEFT_BRACK shift to state 15
-- On SNE reduce production expression -> leftvalue 
-- On SEQ reduce production expression -> leftvalue 
-- On SEMICOLON reduce production expression -> leftvalue 
-- On RIGHT_PAREN reduce production expression -> leftvalue 
-- On RIGHT_BRACK reduce production expression -> leftvalue 
-- On PLUS reduce production expression -> leftvalue 
-- On MULTIPLY reduce production expression -> leftvalue 
-- On MODULO reduce production expression -> leftvalue 
-- On MINUS reduce production expression -> leftvalue 
-- On LT reduce production expression -> leftvalue 
-- On LE reduce production expression -> leftvalue 
-- On GT reduce production expression -> leftvalue 
-- On GE reduce production expression -> leftvalue 
-- On DIVIDE reduce production expression -> leftvalue 
-- On CONCAT reduce production expression -> leftvalue 
-- On COMMA reduce production expression -> leftvalue 
-- On ANE reduce production expression -> leftvalue 
-- On AEQ reduce production expression -> leftvalue 

State 15:
leftvalue -> leftvalue LEFT_BRACK . expression RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 16
-- On binary_expression shift to state 23

State 16:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
leftvalue -> leftvalue LEFT_BRACK expression . RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_BRACK shift to state 42
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45

State 17:
binary_expression -> expression SNE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 18
-- On binary_expression shift to state 23

State 18:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression SNE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SEMICOLON reduce production binary_expression -> expression SNE expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression SNE expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression SNE expression 
-- On COMMA reduce production binary_expression -> expression SNE expression 

State 19:
binary_expression -> expression PLUS . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 20
-- On binary_expression shift to state 23

State 20:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression PLUS expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On DIVIDE shift to state 26
-- On SNE reduce production binary_expression -> expression PLUS expression 
-- On SEQ reduce production binary_expression -> expression PLUS expression 
-- On SEMICOLON reduce production binary_expression -> expression PLUS expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression PLUS expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression PLUS expression 
-- On PLUS reduce production binary_expression -> expression PLUS expression 
-- On MINUS reduce production binary_expression -> expression PLUS expression 
-- On LT reduce production binary_expression -> expression PLUS expression 
-- On LE reduce production binary_expression -> expression PLUS expression 
-- On GT reduce production binary_expression -> expression PLUS expression 
-- On GE reduce production binary_expression -> expression PLUS expression 
-- On CONCAT reduce production binary_expression -> expression PLUS expression 
-- On COMMA reduce production binary_expression -> expression PLUS expression 
-- On ANE reduce production binary_expression -> expression PLUS expression 
-- On AEQ reduce production binary_expression -> expression PLUS expression 

State 21:
binary_expression -> expression MULTIPLY . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 22
-- On binary_expression shift to state 23

State 22:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression MULTIPLY expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production binary_expression -> expression MULTIPLY expression 
-- On SEQ reduce production binary_expression -> expression MULTIPLY expression 
-- On SEMICOLON reduce production binary_expression -> expression MULTIPLY expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression MULTIPLY expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression MULTIPLY expression 
-- On PLUS reduce production binary_expression -> expression MULTIPLY expression 
-- On MULTIPLY reduce production binary_expression -> expression MULTIPLY expression 
-- On MODULO reduce production binary_expression -> expression MULTIPLY expression 
-- On MINUS reduce production binary_expression -> expression MULTIPLY expression 
-- On LT reduce production binary_expression -> expression MULTIPLY expression 
-- On LE reduce production binary_expression -> expression MULTIPLY expression 
-- On GT reduce production binary_expression -> expression MULTIPLY expression 
-- On GE reduce production binary_expression -> expression MULTIPLY expression 
-- On DIVIDE reduce production binary_expression -> expression MULTIPLY expression 
-- On CONCAT reduce production binary_expression -> expression MULTIPLY expression 
-- On COMMA reduce production binary_expression -> expression MULTIPLY expression 
-- On ANE reduce production binary_expression -> expression MULTIPLY expression 
-- On AEQ reduce production binary_expression -> expression MULTIPLY expression 

State 23:
expression -> binary_expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> binary_expression 
-- On SEQ reduce production expression -> binary_expression 
-- On SEMICOLON reduce production expression -> binary_expression 
-- On RIGHT_PAREN reduce production expression -> binary_expression 
-- On RIGHT_BRACK reduce production expression -> binary_expression 
-- On PLUS reduce production expression -> binary_expression 
-- On MULTIPLY reduce production expression -> binary_expression 
-- On MODULO reduce production expression -> binary_expression 
-- On MINUS reduce production expression -> binary_expression 
-- On LT reduce production expression -> binary_expression 
-- On LE reduce production expression -> binary_expression 
-- On GT reduce production expression -> binary_expression 
-- On GE reduce production expression -> binary_expression 
-- On DIVIDE reduce production expression -> binary_expression 
-- On CONCAT reduce production expression -> binary_expression 
-- On COMMA reduce production expression -> binary_expression 
-- On ANE reduce production expression -> binary_expression 
-- On AEQ reduce production expression -> binary_expression 

State 24:
binary_expression -> expression MODULO . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 25
-- On binary_expression shift to state 23

State 25:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression MODULO expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production binary_expression -> expression MODULO expression 
-- On SEQ reduce production binary_expression -> expression MODULO expression 
-- On SEMICOLON reduce production binary_expression -> expression MODULO expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression MODULO expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression MODULO expression 
-- On PLUS reduce production binary_expression -> expression MODULO expression 
-- On MULTIPLY reduce production binary_expression -> expression MODULO expression 
-- On MODULO reduce production binary_expression -> expression MODULO expression 
-- On MINUS reduce production binary_expression -> expression MODULO expression 
-- On LT reduce production binary_expression -> expression MODULO expression 
-- On LE reduce production binary_expression -> expression MODULO expression 
-- On GT reduce production binary_expression -> expression MODULO expression 
-- On GE reduce production binary_expression -> expression MODULO expression 
-- On DIVIDE reduce production binary_expression -> expression MODULO expression 
-- On CONCAT reduce production binary_expression -> expression MODULO expression 
-- On COMMA reduce production binary_expression -> expression MODULO expression 
-- On ANE reduce production binary_expression -> expression MODULO expression 
-- On AEQ reduce production binary_expression -> expression MODULO expression 

State 26:
binary_expression -> expression DIVIDE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 27
-- On binary_expression shift to state 23

State 27:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression DIVIDE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production binary_expression -> expression DIVIDE expression 
-- On SEQ reduce production binary_expression -> expression DIVIDE expression 
-- On SEMICOLON reduce production binary_expression -> expression DIVIDE expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression DIVIDE expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression DIVIDE expression 
-- On PLUS reduce production binary_expression -> expression DIVIDE expression 
-- On MULTIPLY reduce production binary_expression -> expression DIVIDE expression 
-- On MODULO reduce production binary_expression -> expression DIVIDE expression 
-- On MINUS reduce production binary_expression -> expression DIVIDE expression 
-- On LT reduce production binary_expression -> expression DIVIDE expression 
-- On LE reduce production binary_expression -> expression DIVIDE expression 
-- On GT reduce production binary_expression -> expression DIVIDE expression 
-- On GE reduce production binary_expression -> expression DIVIDE expression 
-- On DIVIDE reduce production binary_expression -> expression DIVIDE expression 
-- On CONCAT reduce production binary_expression -> expression DIVIDE expression 
-- On COMMA reduce production binary_expression -> expression DIVIDE expression 
-- On ANE reduce production binary_expression -> expression DIVIDE expression 
-- On AEQ reduce production binary_expression -> expression DIVIDE expression 

State 28:
binary_expression -> expression MINUS . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 29
-- On binary_expression shift to state 23

State 29:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression MINUS expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On DIVIDE shift to state 26
-- On SNE reduce production binary_expression -> expression MINUS expression 
-- On SEQ reduce production binary_expression -> expression MINUS expression 
-- On SEMICOLON reduce production binary_expression -> expression MINUS expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression MINUS expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression MINUS expression 
-- On PLUS reduce production binary_expression -> expression MINUS expression 
-- On MINUS reduce production binary_expression -> expression MINUS expression 
-- On LT reduce production binary_expression -> expression MINUS expression 
-- On LE reduce production binary_expression -> expression MINUS expression 
-- On GT reduce production binary_expression -> expression MINUS expression 
-- On GE reduce production binary_expression -> expression MINUS expression 
-- On CONCAT reduce production binary_expression -> expression MINUS expression 
-- On COMMA reduce production binary_expression -> expression MINUS expression 
-- On ANE reduce production binary_expression -> expression MINUS expression 
-- On AEQ reduce production binary_expression -> expression MINUS expression 

State 30:
binary_expression -> expression LT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 31
-- On binary_expression shift to state 23

State 31:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression LT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SNE reduce production binary_expression -> expression LT expression 
-- On SEQ reduce production binary_expression -> expression LT expression 
-- On SEMICOLON reduce production binary_expression -> expression LT expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression LT expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression LT expression 
-- On COMMA reduce production binary_expression -> expression LT expression 
-- On ANE reduce production binary_expression -> expression LT expression 
-- On AEQ reduce production binary_expression -> expression LT expression 

State 32:
binary_expression -> expression CONCAT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 33
-- On binary_expression shift to state 23

State 33:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression CONCAT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On SNE reduce production binary_expression -> expression CONCAT expression 
-- On SEQ reduce production binary_expression -> expression CONCAT expression 
-- On SEMICOLON reduce production binary_expression -> expression CONCAT expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression CONCAT expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression CONCAT expression 
-- On LT reduce production binary_expression -> expression CONCAT expression 
-- On LE reduce production binary_expression -> expression CONCAT expression 
-- On GT reduce production binary_expression -> expression CONCAT expression 
-- On GE reduce production binary_expression -> expression CONCAT expression 
-- On CONCAT reduce production binary_expression -> expression CONCAT expression 
-- On COMMA reduce production binary_expression -> expression CONCAT expression 
-- On ANE reduce production binary_expression -> expression CONCAT expression 
-- On AEQ reduce production binary_expression -> expression CONCAT expression 

State 34:
binary_expression -> expression LE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 35
-- On binary_expression shift to state 23

State 35:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression LE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SNE reduce production binary_expression -> expression LE expression 
-- On SEQ reduce production binary_expression -> expression LE expression 
-- On SEMICOLON reduce production binary_expression -> expression LE expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression LE expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression LE expression 
-- On COMMA reduce production binary_expression -> expression LE expression 
-- On ANE reduce production binary_expression -> expression LE expression 
-- On AEQ reduce production binary_expression -> expression LE expression 

State 36:
binary_expression -> expression GT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 37
-- On binary_expression shift to state 23

State 37:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression GT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SNE reduce production binary_expression -> expression GT expression 
-- On SEQ reduce production binary_expression -> expression GT expression 
-- On SEMICOLON reduce production binary_expression -> expression GT expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression GT expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression GT expression 
-- On COMMA reduce production binary_expression -> expression GT expression 
-- On ANE reduce production binary_expression -> expression GT expression 
-- On AEQ reduce production binary_expression -> expression GT expression 

State 38:
binary_expression -> expression GE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 39
-- On binary_expression shift to state 23

State 39:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression GE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SNE reduce production binary_expression -> expression GE expression 
-- On SEQ reduce production binary_expression -> expression GE expression 
-- On SEMICOLON reduce production binary_expression -> expression GE expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression GE expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression GE expression 
-- On COMMA reduce production binary_expression -> expression GE expression 
-- On ANE reduce production binary_expression -> expression GE expression 
-- On AEQ reduce production binary_expression -> expression GE expression 

State 40:
binary_expression -> expression SEQ . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 41
-- On binary_expression shift to state 23

State 41:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression SEQ expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SEMICOLON reduce production binary_expression -> expression SEQ expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression SEQ expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression SEQ expression 
-- On COMMA reduce production binary_expression -> expression SEQ expression 

State 42:
leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On SEQ reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On SEMICOLON reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On RIGHT_PAREN reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On RIGHT_BRACK reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On PLUS reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On MULTIPLY reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On MODULO reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On MINUS reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On LT reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On LEFT_BRACK reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On LE reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On GT reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On GE reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On EQUAL reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On DIVIDE reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On CONCAT reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On COMMA reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On ANE reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 
-- On AEQ reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK 

State 43:
binary_expression -> expression ANE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 44
-- On binary_expression shift to state 23

State 44:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression ANE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SEMICOLON reduce production binary_expression -> expression ANE expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression ANE expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression ANE expression 
-- On COMMA reduce production binary_expression -> expression ANE expression 

State 45:
binary_expression -> expression AEQ . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 46
-- On binary_expression shift to state 23

State 46:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression AEQ expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On SEMICOLON reduce production binary_expression -> expression AEQ expression 
-- On RIGHT_PAREN reduce production binary_expression -> expression AEQ expression 
-- On RIGHT_BRACK reduce production binary_expression -> expression AEQ expression 
-- On COMMA reduce production binary_expression -> expression AEQ expression 

State 47:
expression -> IDENTIFIER LEFT_PAREN expression_list . RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On RIGHT_PAREN shift to state 48

State 48:
expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On SEQ reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On SEMICOLON reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On RIGHT_PAREN reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On RIGHT_BRACK reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On PLUS reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On MULTIPLY reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On MODULO reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On MINUS reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On LT reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On LE reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On GT reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On GE reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On DIVIDE reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On CONCAT reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On COMMA reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On ANE reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 
-- On AEQ reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN 

State 49:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
expression_list -> expression . [ RIGHT_PAREN RIGHT_BRACK ]
expression_list -> expression . COMMA expression_list [ RIGHT_PAREN RIGHT_BRACK ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On COMMA shift to state 50
-- On ANE shift to state 43
-- On AEQ shift to state 45
-- On RIGHT_PAREN reduce production expression_list -> expression 
-- On RIGHT_BRACK reduce production expression_list -> expression 

State 50:
expression_list -> expression COMMA . expression_list [ RIGHT_PAREN RIGHT_BRACK ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression_list shift to state 51
-- On expression shift to state 49
-- On binary_expression shift to state 23
-- On RIGHT_PAREN reduce production expression_list -> 
-- On RIGHT_BRACK reduce production expression_list -> 

State 51:
expression_list -> expression COMMA expression_list . [ RIGHT_PAREN RIGHT_BRACK ]
-- On RIGHT_PAREN reduce production expression_list -> expression COMMA expression_list 
-- On RIGHT_BRACK reduce production expression_list -> expression COMMA expression_list 

State 52:
expression -> LEFT_BRACK expression_list . RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On RIGHT_BRACK shift to state 53

State 53:
expression -> LEFT_BRACK expression_list RIGHT_BRACK . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On SEQ reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On SEMICOLON reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On RIGHT_PAREN reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On RIGHT_BRACK reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On PLUS reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On MULTIPLY reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On MODULO reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On MINUS reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On LT reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On LE reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On GT reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On GE reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On DIVIDE reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On CONCAT reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On COMMA reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On ANE reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 
-- On AEQ reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK 

State 54:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
expression -> LEFT_PAREN expression . RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_PAREN shift to state 55
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45

State 55:
expression -> LEFT_PAREN expression RIGHT_PAREN . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On SNE reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On SEQ reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On SEMICOLON reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On RIGHT_PAREN reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On RIGHT_BRACK reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On PLUS reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On MULTIPLY reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On MODULO reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On MINUS reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On LT reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On LE reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On GT reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On GE reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On DIVIDE reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On CONCAT reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On COMMA reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On ANE reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 
-- On AEQ reduce production expression -> LEFT_PAREN expression RIGHT_PAREN 

State 56:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
unary_expression -> NOT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On SNE reduce production unary_expression -> NOT expression 
-- On SEQ reduce production unary_expression -> NOT expression 
-- On SEMICOLON reduce production unary_expression -> NOT expression 
-- On RIGHT_PAREN reduce production unary_expression -> NOT expression 
-- On RIGHT_BRACK reduce production unary_expression -> NOT expression 
-- On LT reduce production unary_expression -> NOT expression 
-- On LE reduce production unary_expression -> NOT expression 
-- On GT reduce production unary_expression -> NOT expression 
-- On GE reduce production unary_expression -> NOT expression 
-- On CONCAT reduce production unary_expression -> NOT expression 
-- On COMMA reduce production unary_expression -> NOT expression 
-- On ANE reduce production unary_expression -> NOT expression 
-- On AEQ reduce production unary_expression -> NOT expression 

State 57:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
loop_statement -> WHILE LEFT_PAREN expression . RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_PAREN shift to state 58
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45

State 58:
loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN . statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement shift to state 88
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23

State 59:
statement -> SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> SEMICOLON 
-- On TRUE reduce production statement -> SEMICOLON 
-- On STRING reduce production statement -> SEMICOLON 
-- On SEMICOLON reduce production statement -> SEMICOLON 
-- On RIGHT_BRACE reduce production statement -> SEMICOLON 
-- On RETURN reduce production statement -> SEMICOLON 
-- On NOT reduce production statement -> SEMICOLON 
-- On LEFT_PAREN reduce production statement -> SEMICOLON 
-- On LEFT_BRACK reduce production statement -> SEMICOLON 
-- On LEFT_BRACE reduce production statement -> SEMICOLON 
-- On INT reduce production statement -> SEMICOLON 
-- On IF reduce production statement -> SEMICOLON 
-- On IDENTIFIER reduce production statement -> SEMICOLON 
-- On GLOBAL reduce production statement -> SEMICOLON 
-- On FUNCTION reduce production statement -> SEMICOLON 
-- On FLOAT reduce production statement -> SEMICOLON 
-- On FALSE reduce production statement -> SEMICOLON 
-- On EOF reduce production statement -> SEMICOLON 
-- On ELSE reduce production statement -> SEMICOLON 
-- On COMMENT reduce production statement -> SEMICOLON 

State 60:
statement -> RETURN . expression SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
statement -> RETURN . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 61
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 62
-- On binary_expression shift to state 23

State 61:
statement -> RETURN SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> RETURN SEMICOLON 
-- On TRUE reduce production statement -> RETURN SEMICOLON 
-- On STRING reduce production statement -> RETURN SEMICOLON 
-- On SEMICOLON reduce production statement -> RETURN SEMICOLON 
-- On RIGHT_BRACE reduce production statement -> RETURN SEMICOLON 
-- On RETURN reduce production statement -> RETURN SEMICOLON 
-- On NOT reduce production statement -> RETURN SEMICOLON 
-- On LEFT_PAREN reduce production statement -> RETURN SEMICOLON 
-- On LEFT_BRACK reduce production statement -> RETURN SEMICOLON 
-- On LEFT_BRACE reduce production statement -> RETURN SEMICOLON 
-- On INT reduce production statement -> RETURN SEMICOLON 
-- On IF reduce production statement -> RETURN SEMICOLON 
-- On IDENTIFIER reduce production statement -> RETURN SEMICOLON 
-- On GLOBAL reduce production statement -> RETURN SEMICOLON 
-- On FUNCTION reduce production statement -> RETURN SEMICOLON 
-- On FLOAT reduce production statement -> RETURN SEMICOLON 
-- On FALSE reduce production statement -> RETURN SEMICOLON 
-- On EOF reduce production statement -> RETURN SEMICOLON 
-- On ELSE reduce production statement -> RETURN SEMICOLON 
-- On COMMENT reduce production statement -> RETURN SEMICOLON 

State 62:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
statement -> RETURN expression . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On SEMICOLON shift to state 63
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45

State 63:
statement -> RETURN expression SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> RETURN expression SEMICOLON 
-- On TRUE reduce production statement -> RETURN expression SEMICOLON 
-- On STRING reduce production statement -> RETURN expression SEMICOLON 
-- On SEMICOLON reduce production statement -> RETURN expression SEMICOLON 
-- On RIGHT_BRACE reduce production statement -> RETURN expression SEMICOLON 
-- On RETURN reduce production statement -> RETURN expression SEMICOLON 
-- On NOT reduce production statement -> RETURN expression SEMICOLON 
-- On LEFT_PAREN reduce production statement -> RETURN expression SEMICOLON 
-- On LEFT_BRACK reduce production statement -> RETURN expression SEMICOLON 
-- On LEFT_BRACE reduce production statement -> RETURN expression SEMICOLON 
-- On INT reduce production statement -> RETURN expression SEMICOLON 
-- On IF reduce production statement -> RETURN expression SEMICOLON 
-- On IDENTIFIER reduce production statement -> RETURN expression SEMICOLON 
-- On GLOBAL reduce production statement -> RETURN expression SEMICOLON 
-- On FUNCTION reduce production statement -> RETURN expression SEMICOLON 
-- On FLOAT reduce production statement -> RETURN expression SEMICOLON 
-- On FALSE reduce production statement -> RETURN expression SEMICOLON 
-- On EOF reduce production statement -> RETURN expression SEMICOLON 
-- On ELSE reduce production statement -> RETURN expression SEMICOLON 
-- On COMMENT reduce production statement -> RETURN expression SEMICOLON 

State 64:
statement -> LEFT_BRACE . statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement_list shift to state 84
-- On statement shift to state 86
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
-- On RIGHT_BRACE reduce production statement_list -> 

State 65:
if_statement -> IF . LEFT_PAREN expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF . LEFT_PAREN expression RIGHT_PAREN statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On LEFT_PAREN shift to state 66

State 66:
if_statement -> IF LEFT_PAREN . expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN . expression RIGHT_PAREN statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 67
-- On binary_expression shift to state 23

State 67:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
if_statement -> IF LEFT_PAREN expression . RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN expression . RIGHT_PAREN statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_PAREN shift to state 68
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45

State 68:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN . statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN . statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement shift to state 73
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23

State 69:
statement -> GLOBAL . IDENTIFIER SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On IDENTIFIER shift to state 70

State 70:
statement -> GLOBAL IDENTIFIER . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On SEMICOLON shift to state 71

State 71:
statement -> GLOBAL IDENTIFIER SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On TRUE reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On STRING reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On SEMICOLON reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On RIGHT_BRACE reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On RETURN reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On NOT reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On LEFT_PAREN reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On LEFT_BRACK reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On LEFT_BRACE reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On INT reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On IF reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On IDENTIFIER reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On GLOBAL reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On FUNCTION reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On FLOAT reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On FALSE reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On EOF reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On ELSE reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 
-- On COMMENT reduce production statement -> GLOBAL IDENTIFIER SEMICOLON 

State 72:
statement -> COMMENT . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> COMMENT 
-- On TRUE reduce production statement -> COMMENT 
-- On STRING reduce production statement -> COMMENT 
-- On SEMICOLON reduce production statement -> COMMENT 
-- On RIGHT_BRACE reduce production statement -> COMMENT 
-- On RETURN reduce production statement -> COMMENT 
-- On NOT reduce production statement -> COMMENT 
-- On LEFT_PAREN reduce production statement -> COMMENT 
-- On LEFT_BRACK reduce production statement -> COMMENT 
-- On LEFT_BRACE reduce production statement -> COMMENT 
-- On INT reduce production statement -> COMMENT 
-- On IF reduce production statement -> COMMENT 
-- On IDENTIFIER reduce production statement -> COMMENT 
-- On GLOBAL reduce production statement -> COMMENT 
-- On FUNCTION reduce production statement -> COMMENT 
-- On FLOAT reduce production statement -> COMMENT 
-- On FALSE reduce production statement -> COMMENT 
-- On EOF reduce production statement -> COMMENT 
-- On ELSE reduce production statement -> COMMENT 
-- On COMMENT reduce production statement -> COMMENT 

State 73:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement . ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On ELSE shift to state 74
-- On WHILE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On TRUE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On STRING reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On SEMICOLON reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On RIGHT_BRACE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On RETURN reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On NOT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On LEFT_PAREN reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On LEFT_BRACK reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On LEFT_BRACE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On INT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On IF reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On IDENTIFIER reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On GLOBAL reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On FUNCTION reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On FLOAT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On FALSE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On EOF reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 
-- On COMMENT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement 

State 74:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE . statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement shift to state 75
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23

State 75:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On TRUE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On STRING reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On SEMICOLON reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On RIGHT_BRACE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On RETURN reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On NOT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On LEFT_PAREN reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On LEFT_BRACK reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On LEFT_BRACE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On INT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On IF reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On IDENTIFIER reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On GLOBAL reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On FUNCTION reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On FLOAT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On FALSE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On EOF reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On ELSE reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
-- On COMMENT reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 

State 76:
statement -> loop_statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> loop_statement 
-- On TRUE reduce production statement -> loop_statement 
-- On STRING reduce production statement -> loop_statement 
-- On SEMICOLON reduce production statement -> loop_statement 
-- On RIGHT_BRACE reduce production statement -> loop_statement 
-- On RETURN reduce production statement -> loop_statement 
-- On NOT reduce production statement -> loop_statement 
-- On LEFT_PAREN reduce production statement -> loop_statement 
-- On LEFT_BRACK reduce production statement -> loop_statement 
-- On LEFT_BRACE reduce production statement -> loop_statement 
-- On INT reduce production statement -> loop_statement 
-- On IF reduce production statement -> loop_statement 
-- On IDENTIFIER reduce production statement -> loop_statement 
-- On GLOBAL reduce production statement -> loop_statement 
-- On FUNCTION reduce production statement -> loop_statement 
-- On FLOAT reduce production statement -> loop_statement 
-- On FALSE reduce production statement -> loop_statement 
-- On EOF reduce production statement -> loop_statement 
-- On ELSE reduce production statement -> loop_statement 
-- On COMMENT reduce production statement -> loop_statement 

State 77:
expression -> leftvalue . [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
leftvalue -> leftvalue . LEFT_BRACK expression RIGHT_BRACK [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT ANE AEQ ]
statement -> leftvalue . EQUAL expression SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On LEFT_BRACK shift to state 15
-- On EQUAL shift to state 78
-- On SNE reduce production expression -> leftvalue 
-- On SEQ reduce production expression -> leftvalue 
-- On SEMICOLON reduce production expression -> leftvalue 
-- On PLUS reduce production expression -> leftvalue 
-- On MULTIPLY reduce production expression -> leftvalue 
-- On MODULO reduce production expression -> leftvalue 
-- On MINUS reduce production expression -> leftvalue 
-- On LT reduce production expression -> leftvalue 
-- On LE reduce production expression -> leftvalue 
-- On GT reduce production expression -> leftvalue 
-- On GE reduce production expression -> leftvalue 
-- On DIVIDE reduce production expression -> leftvalue 
-- On CONCAT reduce production expression -> leftvalue 
-- On ANE reduce production expression -> leftvalue 
-- On AEQ reduce production expression -> leftvalue 

State 78:
statement -> leftvalue EQUAL . expression SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 79
-- On binary_expression shift to state 23

State 79:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
statement -> leftvalue EQUAL expression . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On SEMICOLON shift to state 80
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45

State 80:
statement -> leftvalue EQUAL expression SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On TRUE reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On STRING reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On SEMICOLON reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On RIGHT_BRACE reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On RETURN reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On NOT reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On LEFT_PAREN reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On LEFT_BRACK reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On LEFT_BRACE reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On INT reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On IF reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On IDENTIFIER reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On GLOBAL reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On FUNCTION reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On FLOAT reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On FALSE reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On EOF reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On ELSE reduce production statement -> leftvalue EQUAL expression SEMICOLON 
-- On COMMENT reduce production statement -> leftvalue EQUAL expression SEMICOLON 

State 81:
statement -> if_statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> if_statement 
-- On TRUE reduce production statement -> if_statement 
-- On STRING reduce production statement -> if_statement 
-- On SEMICOLON reduce production statement -> if_statement 
-- On RIGHT_BRACE reduce production statement -> if_statement 
-- On RETURN reduce production statement -> if_statement 
-- On NOT reduce production statement -> if_statement 
-- On LEFT_PAREN reduce production statement -> if_statement 
-- On LEFT_BRACK reduce production statement -> if_statement 
-- On LEFT_BRACE reduce production statement -> if_statement 
-- On INT reduce production statement -> if_statement 
-- On IF reduce production statement -> if_statement 
-- On IDENTIFIER reduce production statement -> if_statement 
-- On GLOBAL reduce production statement -> if_statement 
-- On FUNCTION reduce production statement -> if_statement 
-- On FLOAT reduce production statement -> if_statement 
-- On FALSE reduce production statement -> if_statement 
-- On EOF reduce production statement -> if_statement 
-- On ELSE reduce production statement -> if_statement 
-- On COMMENT reduce production statement -> if_statement 

State 82:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
statement -> expression . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On SEMICOLON shift to state 83
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45

State 83:
statement -> expression SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> expression SEMICOLON 
-- On TRUE reduce production statement -> expression SEMICOLON 
-- On STRING reduce production statement -> expression SEMICOLON 
-- On SEMICOLON reduce production statement -> expression SEMICOLON 
-- On RIGHT_BRACE reduce production statement -> expression SEMICOLON 
-- On RETURN reduce production statement -> expression SEMICOLON 
-- On NOT reduce production statement -> expression SEMICOLON 
-- On LEFT_PAREN reduce production statement -> expression SEMICOLON 
-- On LEFT_BRACK reduce production statement -> expression SEMICOLON 
-- On LEFT_BRACE reduce production statement -> expression SEMICOLON 
-- On INT reduce production statement -> expression SEMICOLON 
-- On IF reduce production statement -> expression SEMICOLON 
-- On IDENTIFIER reduce production statement -> expression SEMICOLON 
-- On GLOBAL reduce production statement -> expression SEMICOLON 
-- On FUNCTION reduce production statement -> expression SEMICOLON 
-- On FLOAT reduce production statement -> expression SEMICOLON 
-- On FALSE reduce production statement -> expression SEMICOLON 
-- On EOF reduce production statement -> expression SEMICOLON 
-- On ELSE reduce production statement -> expression SEMICOLON 
-- On COMMENT reduce production statement -> expression SEMICOLON 

State 84:
statement -> LEFT_BRACE statement_list . RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On RIGHT_BRACE shift to state 85

State 85:
statement -> LEFT_BRACE statement_list RIGHT_BRACE . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On TRUE reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On STRING reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On SEMICOLON reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On RIGHT_BRACE reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On RETURN reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On NOT reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On LEFT_PAREN reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On LEFT_BRACK reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On LEFT_BRACE reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On INT reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On IF reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On IDENTIFIER reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On GLOBAL reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On FUNCTION reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On FLOAT reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On FALSE reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On EOF reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On ELSE reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 
-- On COMMENT reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE 

State 86:
statement_list -> statement . statement_list [ RIGHT_BRACE ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement_list shift to state 87
-- On statement shift to state 86
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
-- On RIGHT_BRACE reduce production statement_list -> 

State 87:
statement_list -> statement statement_list . [ RIGHT_BRACE ]
-- On RIGHT_BRACE reduce production statement_list -> statement statement_list 

State 88:
loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
-- On WHILE reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On TRUE reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On STRING reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On SEMICOLON reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On RIGHT_BRACE reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On RETURN reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On NOT reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On LEFT_PAREN reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On LEFT_BRACK reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On LEFT_BRACE reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On INT reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On IF reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On IDENTIFIER reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On GLOBAL reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On FUNCTION reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On FLOAT reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On FALSE reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On EOF reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On ELSE reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 
-- On COMMENT reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement 

State 89:
toplevel -> FUNCTION . IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On IDENTIFIER shift to state 90

State 90:
toplevel -> FUNCTION IDENTIFIER . LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On LEFT_PAREN shift to state 91

State 91:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN . identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On IDENTIFIER shift to state 92
-- On identifier_list shift to state 95
-- On RIGHT_PAREN reduce production identifier_list -> 

State 92:
identifier_list -> IDENTIFIER . [ RIGHT_PAREN ]
identifier_list -> IDENTIFIER . COMMA identifier_list [ RIGHT_PAREN ]
-- On COMMA shift to state 93
-- On RIGHT_PAREN reduce production identifier_list -> IDENTIFIER 

State 93:
identifier_list -> IDENTIFIER COMMA . identifier_list [ RIGHT_PAREN ]
-- On IDENTIFIER shift to state 92
-- On identifier_list shift to state 94
-- On RIGHT_PAREN reduce production identifier_list -> 

State 94:
identifier_list -> IDENTIFIER COMMA identifier_list . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production identifier_list -> IDENTIFIER COMMA identifier_list 

State 95:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list . RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On RIGHT_PAREN shift to state 96

State 96:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN . LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On LEFT_BRACE shift to state 97

State 97:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE . statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement_list shift to state 98
-- On statement shift to state 86
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
-- On RIGHT_BRACE reduce production statement_list -> 

State 98:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list . RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On RIGHT_BRACE shift to state 99

State 99:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE . [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On WHILE reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On TRUE reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On STRING reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On SEMICOLON reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On RETURN reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On NOT reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On LEFT_PAREN reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On LEFT_BRACK reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On LEFT_BRACE reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On INT reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On IF reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On IDENTIFIER reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On GLOBAL reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On FUNCTION reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On FLOAT reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On FALSE reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On EOF reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 
-- On COMMENT reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE 

State 100:
program -> toplevel_list . EOF [ # ]
-- On EOF shift to state 101

State 101:
program -> toplevel_list EOF . [ # ]
-- On # reduce production program -> toplevel_list EOF 

State 102:
toplevel_list -> toplevel . toplevel_list [ EOF ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FUNCTION shift to state 89
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On toplevel_list shift to state 103
-- On toplevel shift to state 102
-- On statement shift to state 104
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
-- On EOF reduce production toplevel_list -> 

State 103:
toplevel_list -> toplevel toplevel_list . [ EOF ]
-- On EOF reduce production toplevel_list -> toplevel toplevel_list 

State 104:
toplevel -> statement . [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
-- On WHILE reduce production toplevel -> statement 
-- On TRUE reduce production toplevel -> statement 
-- On STRING reduce production toplevel -> statement 
-- On SEMICOLON reduce production toplevel -> statement 
-- On RETURN reduce production toplevel -> statement 
-- On NOT reduce production toplevel -> statement 
-- On LEFT_PAREN reduce production toplevel -> statement 
-- On LEFT_BRACK reduce production toplevel -> statement 
-- On LEFT_BRACE reduce production toplevel -> statement 
-- On INT reduce production toplevel -> statement 
-- On IF reduce production toplevel -> statement 
-- On IDENTIFIER reduce production toplevel -> statement 
-- On GLOBAL reduce production toplevel -> statement 
-- On FUNCTION reduce production toplevel -> statement 
-- On FLOAT reduce production toplevel -> statement 
-- On FALSE reduce production toplevel -> statement 
-- On EOF reduce production toplevel -> statement 
-- On COMMENT reduce production toplevel -> statement 

State 105:
program' -> program . [ # ]
-- On # accept program

