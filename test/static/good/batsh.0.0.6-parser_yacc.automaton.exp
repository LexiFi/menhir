State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FUNCTION shift to state 89
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On toplevel_list shift to state 100
-- On toplevel shift to state 102
-- On statement shift to state 104
-- On program shift to state 105
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:
-- On EOF
--   reduce production toplevel_list ->

State 1:
## Known stack suffix:
## WHILE
## LR(1) items:
loop_statement -> WHILE . LEFT_PAREN expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On LEFT_PAREN shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## WHILE LEFT_PAREN
## LR(1) items:
loop_statement -> WHILE LEFT_PAREN . expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 57
-- On binary_expression shift to state 23
## Reductions:

State 3:
## Known stack suffix:
## TRUE
## LR(1) items:
expression -> TRUE . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> TRUE

State 4:
## Known stack suffix:
## STRING
## LR(1) items:
expression -> STRING . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> STRING

State 5:
## Known stack suffix:
## NOT
## LR(1) items:
unary_expression -> NOT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 56
-- On binary_expression shift to state 23
## Reductions:

State 6:
## Known stack suffix:
## LEFT_PAREN
## LR(1) items:
expression -> LEFT_PAREN . expression RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 54
-- On binary_expression shift to state 23
## Reductions:

State 7:
## Known stack suffix:
## LEFT_BRACK
## LR(1) items:
expression -> LEFT_BRACK . expression_list RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression_list shift to state 52
-- On expression shift to state 49
-- On binary_expression shift to state 23
## Reductions:
-- On RIGHT_BRACK
--   reduce production expression_list ->

State 8:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> INT

State 9:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
expression -> IDENTIFIER . LEFT_PAREN expression_list RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
leftvalue -> IDENTIFIER . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On LEFT_PAREN shift to state 10
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ
--   reduce production leftvalue -> IDENTIFIER

State 10:
## Known stack suffix:
## IDENTIFIER LEFT_PAREN
## LR(1) items:
expression -> IDENTIFIER LEFT_PAREN . expression_list RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression_list shift to state 47
-- On expression shift to state 49
-- On binary_expression shift to state 23
## Reductions:
-- On RIGHT_PAREN
--   reduce production expression_list ->

State 11:
## Known stack suffix:
## FLOAT
## LR(1) items:
expression -> FLOAT . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> FLOAT

State 12:
## Known stack suffix:
## FALSE
## LR(1) items:
expression -> FALSE . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> FALSE

State 13:
## Known stack suffix:
## unary_expression
## LR(1) items:
expression -> unary_expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> unary_expression

State 14:
## Known stack suffix:
## leftvalue
## LR(1) items:
expression -> leftvalue . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
leftvalue -> leftvalue . LEFT_BRACK expression RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On LEFT_BRACK shift to state 15
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> leftvalue

State 15:
## Known stack suffix:
## leftvalue LEFT_BRACK
## LR(1) items:
leftvalue -> leftvalue LEFT_BRACK . expression RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 16
-- On binary_expression shift to state 23
## Reductions:

State 16:
## Known stack suffix:
## leftvalue LEFT_BRACK expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
leftvalue -> leftvalue LEFT_BRACK expression . RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_BRACK shift to state 42
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:

State 17:
## Known stack suffix:
## expression SNE
## LR(1) items:
binary_expression -> expression SNE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 18
-- On binary_expression shift to state 23
## Reductions:

State 18:
## Known stack suffix:
## expression SNE expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression SNE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA
--   reduce production binary_expression -> expression SNE expression

State 19:
## Known stack suffix:
## expression PLUS
## LR(1) items:
binary_expression -> expression PLUS . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 20
-- On binary_expression shift to state 23
## Reductions:

State 20:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression PLUS expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On DIVIDE shift to state 26
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MINUS LT LE GT GE CONCAT COMMA ANE AEQ
--   reduce production binary_expression -> expression PLUS expression

State 21:
## Known stack suffix:
## expression MULTIPLY
## LR(1) items:
binary_expression -> expression MULTIPLY . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 22
-- On binary_expression shift to state 23
## Reductions:

State 22:
## Known stack suffix:
## expression MULTIPLY expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression MULTIPLY expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production binary_expression -> expression MULTIPLY expression

State 23:
## Known stack suffix:
## binary_expression
## LR(1) items:
expression -> binary_expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> binary_expression

State 24:
## Known stack suffix:
## expression MODULO
## LR(1) items:
binary_expression -> expression MODULO . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 25
-- On binary_expression shift to state 23
## Reductions:

State 25:
## Known stack suffix:
## expression MODULO expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression MODULO expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production binary_expression -> expression MODULO expression

State 26:
## Known stack suffix:
## expression DIVIDE
## LR(1) items:
binary_expression -> expression DIVIDE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 27
-- On binary_expression shift to state 23
## Reductions:

State 27:
## Known stack suffix:
## expression DIVIDE expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression DIVIDE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production binary_expression -> expression DIVIDE expression

State 28:
## Known stack suffix:
## expression MINUS
## LR(1) items:
binary_expression -> expression MINUS . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 29
-- On binary_expression shift to state 23
## Reductions:

State 29:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression MINUS expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On DIVIDE shift to state 26
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MINUS LT LE GT GE CONCAT COMMA ANE AEQ
--   reduce production binary_expression -> expression MINUS expression

State 30:
## Known stack suffix:
## expression LT
## LR(1) items:
binary_expression -> expression LT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 31
-- On binary_expression shift to state 23
## Reductions:

State 31:
## Known stack suffix:
## expression LT expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression LT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA ANE AEQ
--   reduce production binary_expression -> expression LT expression

State 32:
## Known stack suffix:
## expression CONCAT
## LR(1) items:
binary_expression -> expression CONCAT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 33
-- On binary_expression shift to state 23
## Reductions:

State 33:
## Known stack suffix:
## expression CONCAT expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression CONCAT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK LT LE GT GE CONCAT COMMA ANE AEQ
--   reduce production binary_expression -> expression CONCAT expression

State 34:
## Known stack suffix:
## expression LE
## LR(1) items:
binary_expression -> expression LE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 35
-- On binary_expression shift to state 23
## Reductions:

State 35:
## Known stack suffix:
## expression LE expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression LE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA ANE AEQ
--   reduce production binary_expression -> expression LE expression

State 36:
## Known stack suffix:
## expression GT
## LR(1) items:
binary_expression -> expression GT . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 37
-- On binary_expression shift to state 23
## Reductions:

State 37:
## Known stack suffix:
## expression GT expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression GT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA ANE AEQ
--   reduce production binary_expression -> expression GT expression

State 38:
## Known stack suffix:
## expression GE
## LR(1) items:
binary_expression -> expression GE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 39
-- On binary_expression shift to state 23
## Reductions:

State 39:
## Known stack suffix:
## expression GE expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression GE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA ANE AEQ
--   reduce production binary_expression -> expression GE expression

State 40:
## Known stack suffix:
## expression SEQ
## LR(1) items:
binary_expression -> expression SEQ . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 41
-- On binary_expression shift to state 23
## Reductions:

State 41:
## Known stack suffix:
## expression SEQ expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression SEQ expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA
--   reduce production binary_expression -> expression SEQ expression

State 42:
## Known stack suffix:
## leftvalue LEFT_BRACK expression RIGHT_BRACK
## LR(1) items:
leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ
--   reduce production leftvalue -> leftvalue LEFT_BRACK expression RIGHT_BRACK

State 43:
## Known stack suffix:
## expression ANE
## LR(1) items:
binary_expression -> expression ANE . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 44
-- On binary_expression shift to state 23
## Reductions:

State 44:
## Known stack suffix:
## expression ANE expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression ANE expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA
--   reduce production binary_expression -> expression ANE expression

State 45:
## Known stack suffix:
## expression AEQ
## LR(1) items:
binary_expression -> expression AEQ . expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 46
-- On binary_expression shift to state 23
## Reductions:

State 46:
## Known stack suffix:
## expression AEQ expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression AEQ expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
## Reductions:
-- On SEMICOLON RIGHT_PAREN RIGHT_BRACK COMMA
--   reduce production binary_expression -> expression AEQ expression

State 47:
## Known stack suffix:
## IDENTIFIER LEFT_PAREN expression_list
## LR(1) items:
expression -> IDENTIFIER LEFT_PAREN expression_list . RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On RIGHT_PAREN shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN
## LR(1) items:
expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> IDENTIFIER LEFT_PAREN expression_list RIGHT_PAREN

State 49:
## Known stack suffix:
## expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
expression_list -> expression . [ RIGHT_PAREN RIGHT_BRACK ]
expression_list -> expression . COMMA expression_list [ RIGHT_PAREN RIGHT_BRACK ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On COMMA shift to state 50
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:
-- On RIGHT_PAREN RIGHT_BRACK
--   reduce production expression_list -> expression

State 50:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expression_list -> expression COMMA . expression_list [ RIGHT_PAREN RIGHT_BRACK ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression_list shift to state 51
-- On expression shift to state 49
-- On binary_expression shift to state 23
## Reductions:
-- On RIGHT_PAREN RIGHT_BRACK
--   reduce production expression_list ->

State 51:
## Known stack suffix:
## expression COMMA expression_list
## LR(1) items:
expression_list -> expression COMMA expression_list . [ RIGHT_PAREN RIGHT_BRACK ]
## Transitions:
## Reductions:
-- On RIGHT_PAREN RIGHT_BRACK
--   reduce production expression_list -> expression COMMA expression_list

State 52:
## Known stack suffix:
## LEFT_BRACK expression_list
## LR(1) items:
expression -> LEFT_BRACK expression_list . RIGHT_BRACK [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On RIGHT_BRACK shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LEFT_BRACK expression_list RIGHT_BRACK
## LR(1) items:
expression -> LEFT_BRACK expression_list RIGHT_BRACK . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> LEFT_BRACK expression_list RIGHT_BRACK

State 54:
## Known stack suffix:
## LEFT_PAREN expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
expression -> LEFT_PAREN expression . RIGHT_PAREN [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_PAREN shift to state 55
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:

State 55:
## Known stack suffix:
## LEFT_PAREN expression RIGHT_PAREN
## LR(1) items:
expression -> LEFT_PAREN expression RIGHT_PAREN . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
--   reduce production expression -> LEFT_PAREN expression RIGHT_PAREN

State 56:
## Known stack suffix:
## NOT expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
unary_expression -> NOT expression . [ SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ ]
## Transitions:
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On DIVIDE shift to state 26
## Reductions:
-- On SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK LT LE GT GE CONCAT COMMA ANE AEQ
--   reduce production unary_expression -> NOT expression

State 57:
## Known stack suffix:
## WHILE LEFT_PAREN expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
loop_statement -> WHILE LEFT_PAREN expression . RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_PAREN shift to state 58
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:

State 58:
## Known stack suffix:
## WHILE LEFT_PAREN expression RIGHT_PAREN
## LR(1) items:
loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN . statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement shift to state 88
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:

State 59:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
statement -> SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> SEMICOLON

State 60:
## Known stack suffix:
## RETURN
## LR(1) items:
statement -> RETURN . expression SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
statement -> RETURN . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 61
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 62
-- On binary_expression shift to state 23
## Reductions:

State 61:
## Known stack suffix:
## RETURN SEMICOLON
## LR(1) items:
statement -> RETURN SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> RETURN SEMICOLON

State 62:
## Known stack suffix:
## RETURN expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
statement -> RETURN expression . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On SEMICOLON shift to state 63
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:

State 63:
## Known stack suffix:
## RETURN expression SEMICOLON
## LR(1) items:
statement -> RETURN expression SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> RETURN expression SEMICOLON

State 64:
## Known stack suffix:
## LEFT_BRACE
## LR(1) items:
statement -> LEFT_BRACE . statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement_list shift to state 84
-- On statement shift to state 86
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:
-- On RIGHT_BRACE
--   reduce production statement_list ->

State 65:
## Known stack suffix:
## IF
## LR(1) items:
if_statement -> IF . LEFT_PAREN expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF . LEFT_PAREN expression RIGHT_PAREN statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On LEFT_PAREN shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## IF LEFT_PAREN
## LR(1) items:
if_statement -> IF LEFT_PAREN . expression RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN . expression RIGHT_PAREN statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 67
-- On binary_expression shift to state 23
## Reductions:

State 67:
## Known stack suffix:
## IF LEFT_PAREN expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ RIGHT_PAREN PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
if_statement -> IF LEFT_PAREN expression . RIGHT_PAREN statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN expression . RIGHT_PAREN statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On RIGHT_PAREN shift to state 68
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:

State 68:
## Known stack suffix:
## IF LEFT_PAREN expression RIGHT_PAREN
## LR(1) items:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN . statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN . statement ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement shift to state 73
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:

State 69:
## Known stack suffix:
## GLOBAL
## LR(1) items:
statement -> GLOBAL . IDENTIFIER SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On IDENTIFIER shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## GLOBAL IDENTIFIER
## LR(1) items:
statement -> GLOBAL IDENTIFIER . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On SEMICOLON shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## GLOBAL IDENTIFIER SEMICOLON
## LR(1) items:
statement -> GLOBAL IDENTIFIER SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> GLOBAL IDENTIFIER SEMICOLON

State 72:
## Known stack suffix:
## COMMENT
## LR(1) items:
statement -> COMMENT . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> COMMENT

State 73:
## Known stack suffix:
## IF LEFT_PAREN expression RIGHT_PAREN statement
## LR(1) items:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement . ELSE statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On ELSE shift to state 74
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT
--   reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement

State 74:
## Known stack suffix:
## IF LEFT_PAREN expression RIGHT_PAREN statement ELSE
## LR(1) items:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE . statement [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement shift to state 75
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:

State 75:
## Known stack suffix:
## IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement
## LR(1) items:
if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement

State 76:
## Known stack suffix:
## loop_statement
## LR(1) items:
statement -> loop_statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> loop_statement

State 77:
## Known stack suffix:
## leftvalue
## LR(1) items:
expression -> leftvalue . [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
leftvalue -> leftvalue . LEFT_BRACK expression RIGHT_BRACK [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT ANE AEQ ]
statement -> leftvalue . EQUAL expression SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On LEFT_BRACK shift to state 15
-- On EQUAL shift to state 78
## Reductions:
-- On SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ
--   reduce production expression -> leftvalue

State 78:
## Known stack suffix:
## leftvalue EQUAL
## LR(1) items:
statement -> leftvalue EQUAL . expression SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On INT shift to state 8
-- On IDENTIFIER shift to state 9
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On unary_expression shift to state 13
-- On leftvalue shift to state 14
-- On expression shift to state 79
-- On binary_expression shift to state 23
## Reductions:

State 79:
## Known stack suffix:
## leftvalue EQUAL expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
statement -> leftvalue EQUAL expression . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On SEMICOLON shift to state 80
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:

State 80:
## Known stack suffix:
## leftvalue EQUAL expression SEMICOLON
## LR(1) items:
statement -> leftvalue EQUAL expression SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> leftvalue EQUAL expression SEMICOLON

State 81:
## Known stack suffix:
## if_statement
## LR(1) items:
statement -> if_statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> if_statement

State 82:
## Known stack suffix:
## expression
## LR(1) items:
binary_expression -> expression . PLUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MINUS expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MULTIPLY expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . DIVIDE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . MODULO expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . AEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . ANE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . GE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . LE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . CONCAT expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SEQ expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
binary_expression -> expression . SNE expression [ SNE SEQ SEMICOLON PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT ANE AEQ ]
statement -> expression . SEMICOLON [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On SNE shift to state 17
-- On SEQ shift to state 40
-- On SEMICOLON shift to state 83
-- On PLUS shift to state 19
-- On MULTIPLY shift to state 21
-- On MODULO shift to state 24
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LE shift to state 34
-- On GT shift to state 36
-- On GE shift to state 38
-- On DIVIDE shift to state 26
-- On CONCAT shift to state 32
-- On ANE shift to state 43
-- On AEQ shift to state 45
## Reductions:

State 83:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
statement -> expression SEMICOLON . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> expression SEMICOLON

State 84:
## Known stack suffix:
## LEFT_BRACE statement_list
## LR(1) items:
statement -> LEFT_BRACE statement_list . RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
-- On RIGHT_BRACE shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## LEFT_BRACE statement_list RIGHT_BRACE
## LR(1) items:
statement -> LEFT_BRACE statement_list RIGHT_BRACE . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production statement -> LEFT_BRACE statement_list RIGHT_BRACE

State 86:
## Known stack suffix:
## statement
## LR(1) items:
statement_list -> statement . statement_list [ RIGHT_BRACE ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement_list shift to state 87
-- On statement shift to state 86
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:
-- On RIGHT_BRACE
--   reduce production statement_list ->

State 87:
## Known stack suffix:
## statement statement_list
## LR(1) items:
statement_list -> statement statement_list . [ RIGHT_BRACE ]
## Transitions:
## Reductions:
-- On RIGHT_BRACE
--   reduce production statement_list -> statement statement_list

State 88:
## Known stack suffix:
## WHILE LEFT_PAREN expression RIGHT_PAREN statement
## LR(1) items:
loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement . [ WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
--   reduce production loop_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement

State 89:
## Known stack suffix:
## FUNCTION
## LR(1) items:
toplevel -> FUNCTION . IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
-- On IDENTIFIER shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## FUNCTION IDENTIFIER
## LR(1) items:
toplevel -> FUNCTION IDENTIFIER . LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
-- On LEFT_PAREN shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## FUNCTION IDENTIFIER LEFT_PAREN
## LR(1) items:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN . identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
-- On IDENTIFIER shift to state 92
-- On identifier_list shift to state 95
## Reductions:
-- On RIGHT_PAREN
--   reduce production identifier_list ->

State 92:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
identifier_list -> IDENTIFIER . [ RIGHT_PAREN ]
identifier_list -> IDENTIFIER . COMMA identifier_list [ RIGHT_PAREN ]
## Transitions:
-- On COMMA shift to state 93
## Reductions:
-- On RIGHT_PAREN
--   reduce production identifier_list -> IDENTIFIER

State 93:
## Known stack suffix:
## IDENTIFIER COMMA
## LR(1) items:
identifier_list -> IDENTIFIER COMMA . identifier_list [ RIGHT_PAREN ]
## Transitions:
-- On IDENTIFIER shift to state 92
-- On identifier_list shift to state 94
## Reductions:
-- On RIGHT_PAREN
--   reduce production identifier_list ->

State 94:
## Known stack suffix:
## IDENTIFIER COMMA identifier_list
## LR(1) items:
identifier_list -> IDENTIFIER COMMA identifier_list . [ RIGHT_PAREN ]
## Transitions:
## Reductions:
-- On RIGHT_PAREN
--   reduce production identifier_list -> IDENTIFIER COMMA identifier_list

State 95:
## Known stack suffix:
## FUNCTION IDENTIFIER LEFT_PAREN identifier_list
## LR(1) items:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list . RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
-- On RIGHT_PAREN shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN
## LR(1) items:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN . LEFT_BRACE statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
-- On LEFT_BRACE shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE
## LR(1) items:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE . statement_list RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On statement_list shift to state 98
-- On statement shift to state 86
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:
-- On RIGHT_BRACE
--   reduce production statement_list ->

State 98:
## Known stack suffix:
## FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list
## LR(1) items:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list . RIGHT_BRACE [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
-- On RIGHT_BRACE shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE
## LR(1) items:
toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE . [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT
--   reduce production toplevel -> FUNCTION IDENTIFIER LEFT_PAREN identifier_list RIGHT_PAREN LEFT_BRACE statement_list RIGHT_BRACE

State 100:
## Known stack suffix:
## toplevel_list
## LR(1) items:
program -> toplevel_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## toplevel_list EOF
## LR(1) items:
program -> toplevel_list EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> toplevel_list EOF

State 102:
## Known stack suffix:
## toplevel
## LR(1) items:
toplevel_list -> toplevel . toplevel_list [ EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On STRING shift to state 4
-- On SEMICOLON shift to state 59
-- On RETURN shift to state 60
-- On NOT shift to state 5
-- On LEFT_PAREN shift to state 6
-- On LEFT_BRACK shift to state 7
-- On LEFT_BRACE shift to state 64
-- On INT shift to state 8
-- On IF shift to state 65
-- On IDENTIFIER shift to state 9
-- On GLOBAL shift to state 69
-- On FUNCTION shift to state 89
-- On FLOAT shift to state 11
-- On FALSE shift to state 12
-- On COMMENT shift to state 72
-- On unary_expression shift to state 13
-- On toplevel_list shift to state 103
-- On toplevel shift to state 102
-- On statement shift to state 104
-- On loop_statement shift to state 76
-- On leftvalue shift to state 77
-- On if_statement shift to state 81
-- On expression shift to state 82
-- On binary_expression shift to state 23
## Reductions:
-- On EOF
--   reduce production toplevel_list ->

State 103:
## Known stack suffix:
## toplevel toplevel_list
## LR(1) items:
toplevel_list -> toplevel toplevel_list . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production toplevel_list -> toplevel toplevel_list

State 104:
## Known stack suffix:
## statement
## LR(1) items:
toplevel -> statement . [ WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT ]
## Transitions:
## Reductions:
-- On WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT
--   reduce production toplevel -> statement

State 105:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

