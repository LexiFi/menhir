Grammar has 13 nonterminal symbols, among which 1 start symbols.
Grammar has 38 terminal symbols.
Grammar has 54 productions.
nullable(unary_expression) = false
nullable(toplevel_list) = true
nullable(toplevel) = false
nullable(statement_list) = true
nullable(statement) = false
nullable(program) = false
nullable(loop_statement) = false
nullable(leftvalue) = false
nullable(if_statement) = false
nullable(identifier_list) = true
nullable(expression_list) = true
nullable(expression) = false
nullable(binary_expression) = false
first(unary_expression) = NOT
first(toplevel_list) = WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE COMMENT
first(toplevel) = WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE COMMENT
first(statement_list) = WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FLOAT FALSE COMMENT
first(statement) = WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FLOAT FALSE COMMENT
first(program) = WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT
first(loop_statement) = WHILE
first(leftvalue) = IDENTIFIER
first(if_statement) = IF
first(identifier_list) = IDENTIFIER
first(expression_list) = TRUE STRING NOT LEFT_PAREN LEFT_BRACK INT IDENTIFIER FLOAT FALSE
first(expression) = TRUE STRING NOT LEFT_PAREN LEFT_BRACK INT IDENTIFIER FLOAT FALSE
first(binary_expression) = TRUE STRING NOT LEFT_PAREN LEFT_BRACK INT IDENTIFIER FLOAT FALSE
minimal(unary_expression) = (* 2 *) NOT IDENTIFIER
minimal(toplevel_list) = (* 0 *)
minimal(toplevel) = (* 1 *) SEMICOLON
minimal(statement_list) = (* 0 *)
minimal(statement) = (* 1 *) SEMICOLON
minimal(program) = (* 1 *) EOF
minimal(loop_statement) = (* 5 *) WHILE LEFT_PAREN IDENTIFIER RIGHT_PAREN SEMICOLON
minimal(leftvalue) = (* 1 *) IDENTIFIER
minimal(if_statement) = (* 5 *) IF LEFT_PAREN IDENTIFIER RIGHT_PAREN SEMICOLON
minimal(identifier_list) = (* 0 *)
minimal(expression_list) = (* 0 *)
minimal(expression) = (* 1 *) IDENTIFIER
minimal(binary_expression) = (* 3 *) IDENTIFIER PLUS IDENTIFIER
follow(unary_expression) = SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
follow(toplevel_list) = EOF
follow(toplevel) = WHILE TRUE STRING SEMICOLON RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF COMMENT
follow(statement_list) = RIGHT_BRACE
follow(statement) = WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
follow(program) = #
follow(loop_statement) = WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
follow(leftvalue) = SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LEFT_BRACK LE GT GE EQUAL DIVIDE CONCAT COMMA ANE AEQ
follow(if_statement) = WHILE TRUE STRING SEMICOLON RIGHT_BRACE RETURN NOT LEFT_PAREN LEFT_BRACK LEFT_BRACE INT IF IDENTIFIER GLOBAL FUNCTION FLOAT FALSE EOF ELSE COMMENT
follow(identifier_list) = RIGHT_PAREN
follow(expression_list) = RIGHT_PAREN RIGHT_BRACK
follow(expression) = SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
follow(binary_expression) = SNE SEQ SEMICOLON RIGHT_PAREN RIGHT_BRACK PLUS MULTIPLY MODULO MINUS LT LE GT GE DIVIDE CONCAT COMMA ANE AEQ
Built an LR(0) automaton with 106 states.
The grammar is not SLR(1) -- 16 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 106 states.
211 shift/reduce conflicts were silently solved.
34 out of 106 states have a default reduction.
34 out of 106 states are represented.
0 out of 54 symbols keep track of their start position.
0 out of 54 symbols keep track of their end position.
24 out of 55 productions exploit shiftreduce optimization.
179 functions before inlining, 52 functions after inlining.
