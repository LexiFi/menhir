%start program
%token AEQ
%token ANE
%token COMMA
%token <string> COMMENT
%token CONCAT
%token DIVIDE
%token ELSE
%token EOF
%token EQUAL
%token FALSE
%token <float> FLOAT
%token FUNCTION
%token GE
%token GLOBAL
%token GT
%token <string> IDENTIFIER
%token IF
%token <int> INT
%token LE
%token LEFT_BRACE
%token LEFT_BRACK
%token LEFT_PAREN
%token LT
%token MINUS
%token MODULO
%token MULTIPLY
%token NOT
%token PLUS
%token RETURN
%token RIGHT_BRACE
%token RIGHT_BRACK
%token RIGHT_PAREN
%token SEMICOLON
%token SEQ
%token SNE
%token <string> STRING
%token TRUE
%token WHILE
%nonassoc AEQ ANE SEQ SNE
%nonassoc GE GT LE LT
%left CONCAT
%nonassoc NOT
%left MINUS PLUS
%left DIVIDE MODULO MULTIPLY
%nonassoc IF
%nonassoc ELSE
%type <Batsh_ast.t> program
%%

program:
  _1 = toplevel_list _2 = EOF
    {      ( _1 )}

toplevel:
  _1 = statement
    {      ( Batsh_ast.Statement _1 )}
| _1 = FUNCTION _2 = IDENTIFIER _3 = LEFT_PAREN _4 = identifier_list _5 = RIGHT_PAREN _6 = LEFT_BRACE _7 = statement_list _8 = RIGHT_BRACE
    {      ( Batsh_ast.Function (_2, _4, _7) )}

toplevel_list:
  
    {      ( [] )}
| _1 = toplevel _2 = toplevel_list
    {      ( _1 :: _2 )}

statement:
  _1 = SEMICOLON
    {      ( Batsh_ast.Empty )}
| _1 = COMMENT
    {      ( Batsh_ast.Comment _1 )}
| _1 = expression _2 = SEMICOLON
    {      ( Batsh_ast.Expression _1 )}
| _1 = LEFT_BRACE _2 = statement_list _3 = RIGHT_BRACE
    {      ( Batsh_ast.Block _2 )}
| _1 = leftvalue _2 = EQUAL _3 = expression _4 = SEMICOLON
    {      ( Batsh_ast.Assignment (_1, _3) )}
| _1 = if_statement
    {      ( _1 )}
| _1 = loop_statement
    {      ( _1 )}
| _1 = GLOBAL _2 = IDENTIFIER _3 = SEMICOLON
    {      ( Batsh_ast.Global _2 )}
| _1 = RETURN _2 = expression _3 = SEMICOLON
    {      ( Batsh_ast.Return (Some _2))}
| _1 = RETURN _2 = SEMICOLON
    {      ( Batsh_ast.Return None)}

statement_list:
  
    {      ( [] )}
| _1 = statement _2 = statement_list
    {      ( _1 :: _2 )}

if_statement:
  _1 = IF _2 = LEFT_PAREN _3 = expression _4 = RIGHT_PAREN _5 = statement %prec IF
    {      ( Batsh_ast.If (_3, _5) )}
| _1 = IF _2 = LEFT_PAREN _3 = expression _4 = RIGHT_PAREN _5 = statement _6 = ELSE _7 = statement
    {      ( Batsh_ast.IfElse (_3, _5, _7) )}

loop_statement:
  _1 = WHILE _2 = LEFT_PAREN _3 = expression _4 = RIGHT_PAREN _5 = statement
    {      ( Batsh_ast.While (_3, _5) )}

expression:
  _1 = leftvalue
    {      ( Batsh_ast.Leftvalue _1 )}
| _1 = STRING
    {      ( Batsh_ast.String _1 )}
| _1 = INT
    {      ( Batsh_ast.Int _1 )}
| _1 = FLOAT
    {      ( Batsh_ast.Float _1 )}
| _1 = TRUE
    {      ( Batsh_ast.Bool true )}
| _1 = FALSE
    {      ( Batsh_ast.Bool false )}
| _1 = LEFT_BRACK _2 = expression_list _3 = RIGHT_BRACK
    {      ( Batsh_ast.List _2 )}
| _1 = unary_expression
    {      ( _1 )}
| _1 = binary_expression
    {      ( _1 )}
| _1 = LEFT_PAREN _2 = expression _3 = RIGHT_PAREN
    {      ( _2 )}
| _1 = IDENTIFIER _2 = LEFT_PAREN _3 = expression_list _4 = RIGHT_PAREN
    {      ( Batsh_ast.Call (_1, _3) )}

expression_list:
  
    {      ( [] )}
| _1 = expression
    {      ( [_1] )}
| _1 = expression _2 = COMMA _3 = expression_list
    {      ( _1 :: _3 )}

identifier_list:
  
    {      ( [] )}
| _1 = IDENTIFIER
    {      ( [_1] )}
| _1 = IDENTIFIER _2 = COMMA _3 = identifier_list
    {      ( _1 :: _3 )}

leftvalue:
  _1 = IDENTIFIER
    {      ( Batsh_ast.Identifier _1 )}
| _1 = leftvalue _2 = LEFT_BRACK _3 = expression _4 = RIGHT_BRACK
    {      ( Batsh_ast.ListAccess (_1, _3) )}

unary_expression:
  _1 = NOT _2 = expression
    {      ( Batsh_ast.ArithUnary ("!", _2) )}

binary_expression:
  _1 = expression _2 = PLUS _3 = expression
    {      ( Batsh_ast.ArithBinary ("+", _1, _3) )}
| _1 = expression _2 = MINUS _3 = expression
    {      ( Batsh_ast.ArithBinary ("-", _1, _3) )}
| _1 = expression _2 = MULTIPLY _3 = expression
    {      ( Batsh_ast.ArithBinary ("*", _1, _3) )}
| _1 = expression _2 = DIVIDE _3 = expression
    {      ( Batsh_ast.ArithBinary ("/", _1, _3) )}
| _1 = expression _2 = MODULO _3 = expression
    {      ( Batsh_ast.ArithBinary ("%", _1, _3) )}
| _1 = expression _2 = AEQ _3 = expression
    {      ( Batsh_ast.ArithBinary ("===", _1, _3) )}
| _1 = expression _2 = ANE _3 = expression
    {      ( Batsh_ast.ArithBinary ("!==", _1, _3) )}
| _1 = expression _2 = GT _3 = expression
    {      ( Batsh_ast.ArithBinary (">", _1, _3) )}
| _1 = expression _2 = LT _3 = expression
    {      ( Batsh_ast.ArithBinary ("<", _1, _3) )}
| _1 = expression _2 = GE _3 = expression
    {      ( Batsh_ast.ArithBinary (">=", _1, _3) )}
| _1 = expression _2 = LE _3 = expression
    {      ( Batsh_ast.ArithBinary ("<=", _1, _3) )}
| _1 = expression _2 = CONCAT _3 = expression
    {      ( Batsh_ast.Concat (_1, _3) )}
| _1 = expression _2 = SEQ _3 = expression
    {      ( Batsh_ast.StrCompare ("==", _1, _3) )}
| _1 = expression _2 = SNE _3 = expression
    {      ( Batsh_ast.StrCompare ("!=", _1, _3) )}

%%
