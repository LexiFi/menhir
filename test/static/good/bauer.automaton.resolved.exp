State 0:
## Known stack suffix:
##
## LR(1) items:
clauses' -> . clauses [ # ]
## Transitions:
-- On VARIABLE shift to state 1
-- On IDENTIFIER shift to state 2
-- On term shift to state 12
-- On separated_nonempty_list(DOT,clause) shift to state 15
-- On loption(separated_nonempty_list(DOT,clause)) shift to state 16
-- On clauses shift to state 18
-- On clause shift to state 19
## Reductions:
-- On EOF
--   reduce production loption(separated_nonempty_list(DOT,clause)) ->

State 1:
## Known stack suffix:
## VARIABLE
## LR(1) items:
term -> VARIABLE . [ RPARENT INFERS EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> VARIABLE

State 2:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
term -> IDENTIFIER . option(params) [ RPARENT INFERS EOF DOT COMMA ]
## Transitions:
-- On LPARENT shift to state 3
-- On params shift to state 10
-- On option(params) shift to state 11
## Reductions:
-- On RPARENT INFERS EOF DOT COMMA
--   reduce production option(params) ->

State 3:
## Known stack suffix:
## LPARENT
## LR(1) items:
params -> LPARENT . loption(separated_nonempty_list(COMMA,term)) RPARENT [ RPARENT INFERS EOF DOT COMMA ]
## Transitions:
-- On VARIABLE shift to state 1
-- On IDENTIFIER shift to state 2
-- On term shift to state 4
-- On separated_nonempty_list(COMMA,term) shift to state 7
-- On loption(separated_nonempty_list(COMMA,term)) shift to state 8
## Reductions:
-- On RPARENT
--   reduce production loption(separated_nonempty_list(COMMA,term)) ->

State 4:
## Known stack suffix:
## term
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term . [ RPARENT EOF DOT ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RPARENT EOF DOT ]
## Transitions:
-- On COMMA shift to state 5
## Reductions:
-- On RPARENT EOF DOT
--   reduce production separated_nonempty_list(COMMA,term) -> term

State 5:
## Known stack suffix:
## term COMMA
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RPARENT EOF DOT ]
## Transitions:
-- On VARIABLE shift to state 1
-- On IDENTIFIER shift to state 2
-- On term shift to state 4
-- On separated_nonempty_list(COMMA,term) shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## term COMMA separated_nonempty_list(COMMA,term)
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RPARENT EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)

State 7:
## Known stack suffix:
## separated_nonempty_list(COMMA,term)
## LR(1) items:
loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term) . [ RPARENT EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term)

State 8:
## Known stack suffix:
## LPARENT loption(separated_nonempty_list(COMMA,term))
## LR(1) items:
params -> LPARENT loption(separated_nonempty_list(COMMA,term)) . RPARENT [ RPARENT INFERS EOF DOT COMMA ]
## Transitions:
-- On RPARENT shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LPARENT loption(separated_nonempty_list(COMMA,term)) RPARENT
## LR(1) items:
params -> LPARENT loption(separated_nonempty_list(COMMA,term)) RPARENT . [ RPARENT INFERS EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production params -> LPARENT loption(separated_nonempty_list(COMMA,term)) RPARENT

State 10:
## Known stack suffix:
## params
## LR(1) items:
option(params) -> params . [ RPARENT INFERS EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(params) -> params

State 11:
## Known stack suffix:
## IDENTIFIER option(params)
## LR(1) items:
term -> IDENTIFIER option(params) . [ RPARENT INFERS EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> IDENTIFIER option(params)

State 12:
## Known stack suffix:
## term
## LR(1) items:
clause -> term . INFERS loption(separated_nonempty_list(COMMA,term)) [ EOF DOT ]
clause -> term . [ EOF DOT ]
## Transitions:
-- On INFERS shift to state 13
## Reductions:
-- On EOF DOT
--   reduce production clause -> term

State 13:
## Known stack suffix:
## term INFERS
## LR(1) items:
clause -> term INFERS . loption(separated_nonempty_list(COMMA,term)) [ EOF DOT ]
## Transitions:
-- On VARIABLE shift to state 1
-- On IDENTIFIER shift to state 2
-- On term shift to state 4
-- On separated_nonempty_list(COMMA,term) shift to state 7
-- On loption(separated_nonempty_list(COMMA,term)) shift to state 14
## Reductions:
-- On EOF DOT
--   reduce production loption(separated_nonempty_list(COMMA,term)) ->

State 14:
## Known stack suffix:
## term INFERS loption(separated_nonempty_list(COMMA,term))
## LR(1) items:
clause -> term INFERS loption(separated_nonempty_list(COMMA,term)) . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> term INFERS loption(separated_nonempty_list(COMMA,term))

State 15:
## Known stack suffix:
## separated_nonempty_list(DOT,clause)
## LR(1) items:
loption(separated_nonempty_list(DOT,clause)) -> separated_nonempty_list(DOT,clause) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(DOT,clause)) -> separated_nonempty_list(DOT,clause)

State 16:
## Known stack suffix:
## loption(separated_nonempty_list(DOT,clause))
## LR(1) items:
clauses -> loption(separated_nonempty_list(DOT,clause)) . EOF [ # ]
## Transitions:
-- On EOF shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## loption(separated_nonempty_list(DOT,clause)) EOF
## LR(1) items:
clauses -> loption(separated_nonempty_list(DOT,clause)) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production clauses -> loption(separated_nonempty_list(DOT,clause)) EOF

State 18:
## Known stack suffix:
## clauses
## LR(1) items:
clauses' -> clauses . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept clauses

State 19:
## Known stack suffix:
## clause
## LR(1) items:
separated_nonempty_list(DOT,clause) -> clause . [ EOF ]
separated_nonempty_list(DOT,clause) -> clause . DOT separated_nonempty_list(DOT,clause) [ EOF ]
## Transitions:
-- On DOT shift to state 20
## Reductions:
-- On EOF
--   reduce production separated_nonempty_list(DOT,clause) -> clause

State 20:
## Known stack suffix:
## clause DOT
## LR(1) items:
separated_nonempty_list(DOT,clause) -> clause DOT . separated_nonempty_list(DOT,clause) [ EOF ]
## Transitions:
-- On VARIABLE shift to state 1
-- On IDENTIFIER shift to state 2
-- On term shift to state 12
-- On separated_nonempty_list(DOT,clause) shift to state 21
-- On clause shift to state 19
## Reductions:

State 21:
## Known stack suffix:
## clause DOT separated_nonempty_list(DOT,clause)
## LR(1) items:
separated_nonempty_list(DOT,clause) -> clause DOT separated_nonempty_list(DOT,clause) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(DOT,clause) -> clause DOT separated_nonempty_list(DOT,clause)

