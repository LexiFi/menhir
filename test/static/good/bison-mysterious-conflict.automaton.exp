State 0:
def' -> . def [ # ]
-- On ID shift to state 1
-- On typ shift to state 2
-- On separated_nonempty_list(COMMA,name) shift to state 3
-- On param_spec shift to state 7
-- On name shift to state 15
-- On def shift to state 19

State 1:
name -> ID . [ COMMA COLON ]
typ -> ID . [ ID ]
-- On ID reduce production typ -> ID 
-- On COMMA reduce production name -> ID 
-- On COLON reduce production name -> ID 

State 2:
param_spec -> typ . [ ID ]
-- On ID reduce production param_spec -> typ 

State 3:
param_spec -> separated_nonempty_list(COMMA,name) . COLON typ [ ID ]
-- On COLON shift to state 4

State 4:
param_spec -> separated_nonempty_list(COMMA,name) COLON . typ [ ID ]
-- On ID shift to state 5
-- On typ shift to state 6

State 5:
typ -> ID . [ ID COMMA ]
-- On ID reduce production typ -> ID 
-- On COMMA reduce production typ -> ID 

State 6:
param_spec -> separated_nonempty_list(COMMA,name) COLON typ . [ ID ]
-- On ID reduce production param_spec -> separated_nonempty_list(COMMA,name) COLON typ 

State 7:
def -> param_spec . return_spec COMMA [ # ]
-- On ID shift to state 8
-- On typ shift to state 9
-- On return_spec shift to state 10
-- On name shift to state 12

State 8:
name -> ID . [ COLON ]
typ -> ID . [ COMMA ]
-- On COMMA reduce production typ -> ID 
-- On COLON reduce production name -> ID 

State 9:
return_spec -> typ . [ COMMA ]
-- On COMMA reduce production return_spec -> typ 

State 10:
def -> param_spec return_spec . COMMA [ # ]
-- On COMMA shift to state 11

State 11:
def -> param_spec return_spec COMMA . [ # ]
-- On # reduce production def -> param_spec return_spec COMMA 

State 12:
return_spec -> name . COLON typ [ COMMA ]
-- On COLON shift to state 13

State 13:
return_spec -> name COLON . typ [ COMMA ]
-- On ID shift to state 5
-- On typ shift to state 14

State 14:
return_spec -> name COLON typ . [ COMMA ]
-- On COMMA reduce production return_spec -> name COLON typ 

State 15:
separated_nonempty_list(COMMA,name) -> name . [ COLON ]
separated_nonempty_list(COMMA,name) -> name . COMMA separated_nonempty_list(COMMA,name) [ COLON ]
-- On COMMA shift to state 16
-- On COLON reduce production separated_nonempty_list(COMMA,name) -> name 

State 16:
separated_nonempty_list(COMMA,name) -> name COMMA . separated_nonempty_list(COMMA,name) [ COLON ]
-- On ID shift to state 17
-- On separated_nonempty_list(COMMA,name) shift to state 18
-- On name shift to state 15

State 17:
name -> ID . [ COMMA COLON ]
-- On COMMA reduce production name -> ID 
-- On COLON reduce production name -> ID 

State 18:
separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name) . [ COLON ]
-- On COLON reduce production separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name) 

State 19:
def' -> def . [ # ]
-- On # accept def

