State 0:
## Known stack suffix:
##
## LR(1) items:
def' -> . def [ # ]
## Transitions:
-- On ID shift to state 1
-- On typ shift to state 2
-- On separated_nonempty_list(COMMA,name) shift to state 3
-- On param_spec shift to state 7
-- On name shift to state 15
-- On def shift to state 19
## Reductions:

State 1:
## Known stack suffix:
## ID
## LR(1) items:
name -> ID . [ COMMA COLON ]
typ -> ID . [ ID ]
## Transitions:
## Reductions:
-- On ID reduce production typ -> ID
-- On COMMA reduce production name -> ID
-- On COLON reduce production name -> ID

State 2:
## Known stack suffix:
## typ
## LR(1) items:
param_spec -> typ . [ ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_spec -> typ

State 3:
## Known stack suffix:
## separated_nonempty_list(COMMA,name)
## LR(1) items:
param_spec -> separated_nonempty_list(COMMA,name) . COLON typ [ ID ]
## Transitions:
-- On COLON shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## separated_nonempty_list(COMMA,name) COLON
## LR(1) items:
param_spec -> separated_nonempty_list(COMMA,name) COLON . typ [ ID ]
## Transitions:
-- On ID shift to state 5
-- On typ shift to state 6
## Reductions:

State 5:
## Known stack suffix:
## ID
## LR(1) items:
typ -> ID . [ ID COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> ID

State 6:
## Known stack suffix:
## separated_nonempty_list(COMMA,name) COLON typ
## LR(1) items:
param_spec -> separated_nonempty_list(COMMA,name) COLON typ . [ ID ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_spec -> separated_nonempty_list(COMMA,name) COLON typ

State 7:
## Known stack suffix:
## param_spec
## LR(1) items:
def -> param_spec . return_spec COMMA [ # ]
## Transitions:
-- On ID shift to state 8
-- On typ shift to state 9
-- On return_spec shift to state 10
-- On name shift to state 12
## Reductions:

State 8:
## Known stack suffix:
## ID
## LR(1) items:
name -> ID . [ COLON ]
typ -> ID . [ COMMA ]
## Transitions:
## Reductions:
-- On COMMA reduce production typ -> ID
-- On COLON reduce production name -> ID

State 9:
## Known stack suffix:
## typ
## LR(1) items:
return_spec -> typ . [ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_spec -> typ

State 10:
## Known stack suffix:
## param_spec return_spec
## LR(1) items:
def -> param_spec return_spec . COMMA [ # ]
## Transitions:
-- On COMMA shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## param_spec return_spec COMMA
## LR(1) items:
def -> param_spec return_spec COMMA . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production def -> param_spec return_spec COMMA

State 12:
## Known stack suffix:
## name
## LR(1) items:
return_spec -> name . COLON typ [ COMMA ]
## Transitions:
-- On COLON shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## name COLON
## LR(1) items:
return_spec -> name COLON . typ [ COMMA ]
## Transitions:
-- On ID shift to state 5
-- On typ shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## name COLON typ
## LR(1) items:
return_spec -> name COLON typ . [ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_spec -> name COLON typ

State 15:
## Known stack suffix:
## name
## LR(1) items:
separated_nonempty_list(COMMA,name) -> name . [ COLON ]
separated_nonempty_list(COMMA,name) -> name . COMMA separated_nonempty_list(COMMA,name) [ COLON ]
## Transitions:
-- On COMMA shift to state 16
## Reductions:
-- On COLON reduce production separated_nonempty_list(COMMA,name) -> name

State 16:
## Known stack suffix:
## name COMMA
## LR(1) items:
separated_nonempty_list(COMMA,name) -> name COMMA . separated_nonempty_list(COMMA,name) [ COLON ]
## Transitions:
-- On ID shift to state 17
-- On separated_nonempty_list(COMMA,name) shift to state 18
-- On name shift to state 15
## Reductions:

State 17:
## Known stack suffix:
## ID
## LR(1) items:
name -> ID . [ COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> ID

State 18:
## Known stack suffix:
## name COMMA separated_nonempty_list(COMMA,name)
## LR(1) items:
separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name) . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,name) -> name COMMA separated_nonempty_list(COMMA,name)

State 19:
## Known stack suffix:
## def
## LR(1) items:
def' -> def . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept def

