State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On UNIT shift to state 1
-- On main shift to state 2
-- On expr_or_assign(empty) shift to state 3
-- On expr(empty) shift to state 4
-- On empty shift to state 5
## Reductions:
-- On LPAR reduce production empty ->

State 1:
## Known stack suffix:
## UNIT
## LR(1) items:
expr(empty) -> UNIT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production expr(empty) -> UNIT

State 2:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 3:
## Known stack suffix:
## expr_or_assign(empty)
## LR(1) items:
main -> expr_or_assign(empty) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> expr_or_assign(empty)

State 4:
## Known stack suffix:
## expr(empty)
## LR(1) items:
expr_or_assign(empty) -> expr(empty) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production expr_or_assign(empty) -> expr(empty)

State 5:
## Known stack suffix:
## empty
## LR(1) items:
expr(empty) -> empty . LPAR expr_or_assign_cr cr RPAR [ # ]
## Transitions:
-- On LPAR shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## empty LPAR
## LR(1) items:
expr(empty) -> empty LPAR . expr_or_assign_cr cr RPAR [ # ]
## Transitions:
-- On UNIT shift to state 7
-- On NEW_LINE shift to state 8
-- On expr_or_assign_cr shift to state 10
-- On expr_or_assign(cr) shift to state 13
-- On expr(cr) shift to state 14
-- On cr shift to state 15
## Reductions:
-- On LPAR reduce production cr ->

State 7:
## Known stack suffix:
## UNIT
## LR(1) items:
expr(cr) -> UNIT . [ RPAR NEW_LINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr(cr) -> UNIT

State 8:
## Known stack suffix:
## NEW_LINE
## LR(1) items:
cr -> NEW_LINE . cr [ RPAR LPAR ]
## Transitions:
-- On NEW_LINE shift to state 8
-- On cr shift to state 9
## Reductions:
-- On RPAR reduce production cr ->
-- On LPAR reduce production cr ->

State 9:
## Known stack suffix:
## NEW_LINE cr
## LR(1) items:
cr -> NEW_LINE cr . [ RPAR LPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cr -> NEW_LINE cr

State 10:
## Known stack suffix:
## empty LPAR expr_or_assign_cr
## LR(1) items:
expr(empty) -> empty LPAR expr_or_assign_cr . cr RPAR [ # ]
## Transitions:
-- On NEW_LINE shift to state 8
-- On cr shift to state 11
## Reductions:
-- On RPAR reduce production cr ->

State 11:
## Known stack suffix:
## empty LPAR expr_or_assign_cr cr
## LR(1) items:
expr(empty) -> empty LPAR expr_or_assign_cr cr . RPAR [ # ]
## Transitions:
-- On RPAR shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## empty LPAR expr_or_assign_cr cr RPAR
## LR(1) items:
expr(empty) -> empty LPAR expr_or_assign_cr cr RPAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production expr(empty) -> empty LPAR expr_or_assign_cr cr RPAR

State 13:
## Known stack suffix:
## expr_or_assign(cr)
## LR(1) items:
expr_or_assign_cr -> expr_or_assign(cr) . [ RPAR NEW_LINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_or_assign_cr -> expr_or_assign(cr)

State 14:
## Known stack suffix:
## expr(cr)
## LR(1) items:
expr_or_assign(cr) -> expr(cr) . [ RPAR NEW_LINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_or_assign(cr) -> expr(cr)

State 15:
## Known stack suffix:
## cr
## LR(1) items:
expr(cr) -> cr . LPAR expr_or_assign_cr cr RPAR [ RPAR NEW_LINE ]
## Transitions:
-- On LPAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## cr LPAR
## LR(1) items:
expr(cr) -> cr LPAR . expr_or_assign_cr cr RPAR [ RPAR NEW_LINE ]
## Transitions:
-- On UNIT shift to state 7
-- On NEW_LINE shift to state 8
-- On expr_or_assign_cr shift to state 17
-- On expr_or_assign(cr) shift to state 13
-- On expr(cr) shift to state 14
-- On cr shift to state 15
## Reductions:
-- On LPAR reduce production cr ->

State 17:
## Known stack suffix:
## cr LPAR expr_or_assign_cr
## LR(1) items:
expr(cr) -> cr LPAR expr_or_assign_cr . cr RPAR [ RPAR NEW_LINE ]
## Transitions:
-- On NEW_LINE shift to state 8
-- On cr shift to state 18
## Reductions:
-- On RPAR reduce production cr ->

State 18:
## Known stack suffix:
## cr LPAR expr_or_assign_cr cr
## LR(1) items:
expr(cr) -> cr LPAR expr_or_assign_cr cr . RPAR [ RPAR NEW_LINE ]
## Transitions:
-- On RPAR shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## cr LPAR expr_or_assign_cr cr RPAR
## LR(1) items:
expr(cr) -> cr LPAR expr_or_assign_cr cr RPAR . [ RPAR NEW_LINE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr(cr) -> cr LPAR expr_or_assign_cr cr RPAR

