State 0:
## Known stack suffix:
##
## LR(1) items:
modl' -> . modl [ # ]
## Transitions:
-- On MODULE shift to state 1
-- On modl shift to state 508
## Reductions:

State 1:
## Known stack suffix:
## MODULE
## LR(1) items:
modl -> MODULE . UIDENT EQUAL opens decls EOF [ # ]
## Transitions:
-- On UIDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
modl -> MODULE UIDENT . EQUAL opens decls EOF [ # ]
## Transitions:
-- On EQUAL shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## MODULE UIDENT EQUAL
## LR(1) items:
modl -> MODULE UIDENT EQUAL . opens decls EOF [ # ]
## Transitions:
-- On OPEN shift to state 4
-- On opens shift to state 10
## Reductions:
-- On TYPE reduce production opens ->
-- On TEST reduce production opens ->
-- On MODULE reduce production opens ->
-- On LET reduce production opens ->
-- On EOF reduce production opens ->

State 4:
## Known stack suffix:
## OPEN
## LR(1) items:
opens -> OPEN . qid opens [ TYPE TEST MODULE LET EOF ]
## Transitions:
-- On UIDENT shift to state 5
-- On QUALIDENT shift to state 6
-- On LIDENT shift to state 7
-- On qid shift to state 8
## Reductions:

State 5:
## Known stack suffix:
## UIDENT
## LR(1) items:
qid -> UIDENT . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS OPEN NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qid -> UIDENT

State 6:
## Known stack suffix:
## QUALIDENT
## LR(1) items:
qid -> QUALIDENT . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS OPEN NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qid -> QUALIDENT

State 7:
## Known stack suffix:
## LIDENT
## LR(1) items:
qid -> LIDENT . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS OPEN NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qid -> LIDENT

State 8:
## Known stack suffix:
## OPEN qid
## LR(1) items:
opens -> OPEN qid . opens [ TYPE TEST MODULE LET EOF ]
## Transitions:
-- On OPEN shift to state 4
-- On opens shift to state 9
## Reductions:
-- On TYPE reduce production opens ->
-- On TEST reduce production opens ->
-- On MODULE reduce production opens ->
-- On LET reduce production opens ->
-- On EOF reduce production opens ->

State 9:
## Known stack suffix:
## OPEN qid opens
## LR(1) items:
opens -> OPEN qid opens . [ TYPE TEST MODULE LET EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opens -> OPEN qid opens

State 10:
## Known stack suffix:
## MODULE UIDENT EQUAL opens
## LR(1) items:
modl -> MODULE UIDENT EQUAL opens . decls EOF [ # ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 506
## Reductions:
-- On EOF reduce production decls ->

State 11:
## Known stack suffix:
## TYPE
## LR(1) items:
decls -> TYPE . tyvar_list LIDENT EQUAL dtsort_list decls [ EOF END ]
## Transitions:
-- On TYVARIDENT shift to state 12
-- On LPAREN shift to state 13
-- On tyvar_list shift to state 19
-- On tyvar shift to state 505
## Reductions:
-- On LIDENT reduce production tyvar_list ->

State 12:
## Known stack suffix:
## TYVARIDENT
## LR(1) items:
tyvar -> TYVARIDENT . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyvar -> TYVARIDENT

State 13:
## Known stack suffix:
## LPAREN
## LR(1) items:
tyvar_list -> LPAREN . tyvar_list2 RPAREN [ LIDENT ]
## Transitions:
-- On TYVARIDENT shift to state 12
-- On tyvar_list2 shift to state 14
-- On tyvar shift to state 16
## Reductions:

State 14:
## Known stack suffix:
## LPAREN tyvar_list2
## LR(1) items:
tyvar_list -> LPAREN tyvar_list2 . RPAREN [ LIDENT ]
## Transitions:
-- On RPAREN shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LPAREN tyvar_list2 RPAREN
## LR(1) items:
tyvar_list -> LPAREN tyvar_list2 RPAREN . [ LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyvar_list -> LPAREN tyvar_list2 RPAREN

State 16:
## Known stack suffix:
## tyvar
## LR(1) items:
tyvar_list2 -> tyvar . [ RPAREN ]
tyvar_list2 -> tyvar . COMMA tyvar_list2 [ RPAREN ]
## Transitions:
-- On COMMA shift to state 17
## Reductions:
-- On RPAREN reduce production tyvar_list2 -> tyvar

State 17:
## Known stack suffix:
## tyvar COMMA
## LR(1) items:
tyvar_list2 -> tyvar COMMA . tyvar_list2 [ RPAREN ]
## Transitions:
-- On TYVARIDENT shift to state 12
-- On tyvar_list2 shift to state 18
-- On tyvar shift to state 16
## Reductions:

State 18:
## Known stack suffix:
## tyvar COMMA tyvar_list2
## LR(1) items:
tyvar_list2 -> tyvar COMMA tyvar_list2 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyvar_list2 -> tyvar COMMA tyvar_list2

State 19:
## Known stack suffix:
## TYPE tyvar_list
## LR(1) items:
decls -> TYPE tyvar_list . LIDENT EQUAL dtsort_list decls [ EOF END ]
## Transitions:
-- On LIDENT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## TYPE tyvar_list LIDENT
## LR(1) items:
decls -> TYPE tyvar_list LIDENT . EQUAL dtsort_list decls [ EOF END ]
## Transitions:
-- On EQUAL shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## TYPE tyvar_list LIDENT EQUAL
## LR(1) items:
decls -> TYPE tyvar_list LIDENT EQUAL . dtsort_list decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 22
-- On dtsort_list shift to state 456
-- On dtsort shift to state 500
## Reductions:

State 22:
## Known stack suffix:
## UIDENT
## LR(1) items:
dtsort -> UIDENT . [ TYPE TEST MODULE LET EOF END BAR ]
dtsort -> UIDENT . OF sort [ TYPE TEST MODULE LET EOF END BAR ]
## Transitions:
-- On OF shift to state 23
## Reductions:
-- On TYPE reduce production dtsort -> UIDENT
-- On TEST reduce production dtsort -> UIDENT
-- On MODULE reduce production dtsort -> UIDENT
-- On LET reduce production dtsort -> UIDENT
-- On EOF reduce production dtsort -> UIDENT
-- On END reduce production dtsort -> UIDENT
-- On BAR reduce production dtsort -> UIDENT

State 23:
## Known stack suffix:
## UIDENT OF
## LR(1) items:
dtsort -> UIDENT OF . sort [ TYPE TEST MODULE LET EOF END BAR ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 455
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 24:
## Known stack suffix:
## UNIT
## LR(1) items:
asort -> UNIT . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> UNIT

State 25:
## Known stack suffix:
## STRINGPREFS
## LR(1) items:
asort -> STRINGPREFS . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> STRINGPREFS

State 26:
## Known stack suffix:
## STRINGLISTPREFS
## LR(1) items:
asort -> STRINGLISTPREFS . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> STRINGLISTPREFS

State 27:
## Known stack suffix:
## STRING
## LR(1) items:
asort -> STRING . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> STRING

State 28:
## Known stack suffix:
## SKELETONS
## LR(1) items:
asort -> SKELETONS . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> SKELETONS

State 29:
## Known stack suffix:
## RESOURCES
## LR(1) items:
asort -> RESOURCES . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> RESOURCES

State 30:
## Known stack suffix:
## REGEXP
## LR(1) items:
asort -> REGEXP . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> REGEXP

State 31:
## Known stack suffix:
## QUALIDENT
## LR(1) items:
qvar -> QUALIDENT . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qvar -> QUALIDENT

State 32:
## Known stack suffix:
## LPAREN
## LR(1) items:
arrowsort -> LPAREN . id COLON productsort ARROW arrowsort RPAREN [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
bsort -> LPAREN . sort RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . id COLON sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . id COLON sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN QMARK DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN QMARK DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DEQARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . STRING IN exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
datatypesort -> LPAREN . sort COMMA sort_list RPAREN qvar [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UNIT shift to state 24
-- On UIDENT shift to state 33
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 34
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 70
-- On LENS shift to state 71
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 361
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On id shift to state 449
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 33:
## Known stack suffix:
## UIDENT
## LR(1) items:
id -> UIDENT . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id -> UIDENT

State 34:
## Known stack suffix:
## LPAREN STRING
## LR(1) items:
asort -> STRING . [ WHERE STAR RPAREN QUALIDENT LIDENT COMMA ARROW ]
bsort -> LPAREN STRING . IN exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On IN shift to state 35
## Reductions:
-- On WHERE reduce production asort -> STRING
-- On STAR reduce production asort -> STRING
-- On RPAREN reduce production asort -> STRING
-- On QUALIDENT reduce production asort -> STRING
-- On LIDENT reduce production asort -> STRING
-- On COMMA reduce production asort -> STRING
-- On ARROW reduce production asort -> STRING

State 35:
## Known stack suffix:
## LPAREN STRING IN
## LR(1) items:
bsort -> LPAREN STRING IN . exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 447
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 36:
## Known stack suffix:
## SYNTH
## LR(1) items:
appexp -> SYNTH . appexp DEQARROW repexp USING LBRACE listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
appexp -> SYNTH . appexp DEQARROW repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 436
-- On aexp shift to state 162
## Reductions:

State 37:
## Known stack suffix:
## STR
## LR(1) items:
aexp -> STR . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> STR

State 38:
## Known stack suffix:
## SQUASH
## LR(1) items:
appexp -> SQUASH . appexp ARROW repexp USING repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 431
-- On aexp shift to state 162
## Reductions:

State 39:
## Known stack suffix:
## PROJECT
## LR(1) items:
appexp -> PROJECT . appexp ARROW repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 428
-- On aexp shift to state 162
## Reductions:

State 40:
## Known stack suffix:
## PERM
## LR(1) items:
appexp -> PERM . LPAREN listexp1 WITH repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## PERM LPAREN
## LR(1) items:
appexp -> PERM LPAREN . listexp1 WITH repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On RPAREN shift to state 42
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On listexp1 shift to state 421
-- On appexp shift to state 424
-- On aexp shift to state 162
## Reductions:

State 42:
## Known stack suffix:
## RPAREN
## LR(1) items:
listexp1 -> RPAREN . [ WITH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listexp1 -> RPAREN

State 43:
## Known stack suffix:
## NSET
## LR(1) items:
aexp -> NSET . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> NSET

State 44:
## Known stack suffix:
## LPAREN
## LR(1) items:
aexp -> LPAREN . exp RPAREN [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
aexp -> LPAREN . RPAREN [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On RPAREN shift to state 45
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 419
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 45:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
aexp -> LPAREN RPAREN . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> LPAREN RPAREN

State 46:
## Known stack suffix:
## MINUS
## LR(1) items:
minusexp -> MINUS . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 418
-- On aexp shift to state 162
## Reductions:

State 47:
## Known stack suffix:
## LANGLE
## LR(1) items:
matchexp -> LANGLE . exp RANGLE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
matchexp -> LANGLE . appexp COLON exp RANGLE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 412
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 414
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 48:
## Known stack suffix:
## MATCH
## LR(1) items:
cexp -> MATCH . composeexp WITH branch_list [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
cexp -> MATCH . composeexp WITH branch_list COLON sort [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 396
-- On commaexp shift to state 247
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 49:
## Known stack suffix:
## INTEGER
## LR(1) items:
aexp -> INTEGER . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> INTEGER

State 50:
## Known stack suffix:
## HASH
## LR(1) items:
aexp -> HASH . LBRACE sort LLIST boomerang_bparser_list [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On LBRACE shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## HASH LBRACE
## LR(1) items:
aexp -> HASH LBRACE . sort LLIST boomerang_bparser_list [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 388
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 52:
## Known stack suffix:
## LIDENT
## LR(1) items:
qvar -> LIDENT . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qvar -> LIDENT

State 53:
## Known stack suffix:
## LENS
## LR(1) items:
asort -> LENS . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> LENS

State 54:
## Known stack suffix:
## INTPREFS
## LR(1) items:
asort -> INTPREFS . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> INTPREFS

State 55:
## Known stack suffix:
## INT
## LR(1) items:
asort -> INT . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> INT

State 56:
## Known stack suffix:
## FORALL
## LR(1) items:
sort -> FORALL . TYVARIDENT EQARROW sort [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On TYVARIDENT shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## FORALL TYVARIDENT
## LR(1) items:
sort -> FORALL TYVARIDENT . EQARROW sort [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On EQARROW shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## FORALL TYVARIDENT EQARROW
## LR(1) items:
sort -> FORALL TYVARIDENT EQARROW . sort [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 65
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 59:
## Known stack suffix:
## CHAR
## LR(1) items:
asort -> CHAR . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> CHAR

State 60:
## Known stack suffix:
## CANONIZER
## LR(1) items:
asort -> CANONIZER . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> CANONIZER

State 61:
## Known stack suffix:
## BOOLPREFS
## LR(1) items:
asort -> BOOLPREFS . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> BOOLPREFS

State 62:
## Known stack suffix:
## BOOL
## LR(1) items:
asort -> BOOL . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> BOOL

State 63:
## Known stack suffix:
## AREGEXP
## LR(1) items:
asort -> AREGEXP . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> AREGEXP

State 64:
## Known stack suffix:
## tyvar
## LR(1) items:
asort -> tyvar . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> tyvar

State 65:
## Known stack suffix:
## FORALL TYVARIDENT EQARROW sort
## LR(1) items:
sort -> FORALL TYVARIDENT EQARROW sort . [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sort -> FORALL TYVARIDENT EQARROW sort

State 66:
## Known stack suffix:
## qvar
## LR(1) items:
asort -> qvar . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asort -> qvar

State 67:
## Known stack suffix:
## productsort
## LR(1) items:
arrowsort -> productsort . ARROW arrowsort [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
arrowsort -> productsort . [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
productsort -> productsort . STAR datatypesort [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On STAR shift to state 68
-- On ARROW shift to state 386
## Reductions:
-- On WHERE reduce production arrowsort -> productsort
-- On TYPE reduce production arrowsort -> productsort
-- On TEST reduce production arrowsort -> productsort
-- On RPAREN reduce production arrowsort -> productsort
-- On RBRACE reduce production arrowsort -> productsort
-- On RANGLE reduce production arrowsort -> productsort
-- On MODULE reduce production arrowsort -> productsort
-- On LLIST reduce production arrowsort -> productsort
-- On LET reduce production arrowsort -> productsort
-- On IN reduce production arrowsort -> productsort
-- On EQUAL reduce production arrowsort -> productsort
-- On EOF reduce production arrowsort -> productsort
-- On END reduce production arrowsort -> productsort
-- On DOLLAR reduce production arrowsort -> productsort
-- On COMMA reduce production arrowsort -> productsort
-- On BAR reduce production arrowsort -> productsort

State 68:
## Known stack suffix:
## productsort STAR
## LR(1) items:
productsort -> productsort STAR . datatypesort [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 69
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On qvar shift to state 66
-- On datatypesort shift to state 385
-- On bsort shift to state 150
-- On asort shift to state 152
## Reductions:

State 69:
## Known stack suffix:
## LPAREN
## LR(1) items:
bsort -> LPAREN . sort RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . id COLON sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . id COLON sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN QMARK DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN QMARK DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DEQARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . LENS IN appexp DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN . STRING IN exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
datatypesort -> LPAREN . sort COMMA sort_list RPAREN qvar [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UNIT shift to state 24
-- On UIDENT shift to state 33
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 34
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 70
-- On LENS shift to state 71
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 361
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On id shift to state 376
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 70:
## Known stack suffix:
## LIDENT
## LR(1) items:
id -> LIDENT . [ COLON ]
qvar -> LIDENT . [ WHERE STAR RPAREN QUALIDENT LIDENT COMMA ARROW ]
## Transitions:
## Reductions:
-- On WHERE reduce production qvar -> LIDENT
-- On STAR reduce production qvar -> LIDENT
-- On RPAREN reduce production qvar -> LIDENT
-- On QUALIDENT reduce production qvar -> LIDENT
-- On LIDENT reduce production qvar -> LIDENT
-- On COMMA reduce production qvar -> LIDENT
-- On COLON reduce production id -> LIDENT
-- On ARROW reduce production qvar -> LIDENT

State 71:
## Known stack suffix:
## LPAREN LENS
## LR(1) items:
asort -> LENS . [ WHERE STAR RPAREN QUALIDENT LIDENT COMMA ARROW ]
bsort -> LPAREN LENS . IN QMARK DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS . IN QMARK DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS . IN appexp DARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS . IN appexp DEQARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS . IN appexp DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS . IN appexp DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On IN shift to state 72
## Reductions:
-- On WHERE reduce production asort -> LENS
-- On STAR reduce production asort -> LENS
-- On RPAREN reduce production asort -> LENS
-- On QUALIDENT reduce production asort -> LENS
-- On LIDENT reduce production asort -> LENS
-- On COMMA reduce production asort -> LENS
-- On ARROW reduce production asort -> LENS

State 72:
## Known stack suffix:
## LPAREN LENS IN
## LR(1) items:
bsort -> LPAREN LENS IN . QMARK DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN . QMARK DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN . appexp DARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN . appexp DEQARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN . appexp DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN . appexp DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On QMARK shift to state 73
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 350
-- On aexp shift to state 162
## Reductions:

State 73:
## Known stack suffix:
## LPAREN LENS IN QMARK
## LR(1) items:
bsort -> LPAREN LENS IN QMARK . DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN QMARK . DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On DEQARROW shift to state 74
-- On DARROW shift to state 347
## Reductions:

State 74:
## Known stack suffix:
## LPAREN LENS IN QMARK DEQARROW
## LR(1) items:
bsort -> LPAREN LENS IN QMARK DEQARROW . appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 345
-- On aexp shift to state 162
## Reductions:

State 75:
## Known stack suffix:
## GRAMMAR
## LR(1) items:
aexp -> GRAMMAR . productions END [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On LIDENT shift to state 76
-- On productions shift to state 340
-- On production shift to state 342
## Reductions:

State 76:
## Known stack suffix:
## LIDENT
## LR(1) items:
production -> LIDENT . COLONCOLON EQUAL rules [ END AND ]
## Transitions:
-- On COLONCOLON shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## LIDENT COLONCOLON
## LR(1) items:
production -> LIDENT COLONCOLON . EQUAL rules [ END AND ]
## Transitions:
-- On EQUAL shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## LIDENT COLONCOLON EQUAL
## LR(1) items:
production -> LIDENT COLONCOLON EQUAL . rules [ END AND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 79
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On BAR shift to state 319
-- On rules shift to state 337
-- On rule shift to state 338
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On atoms shift to state 324
-- On atom shift to state 331
-- On aexp shift to state 335
## Reductions:

State 79:
## Known stack suffix:
## LIDENT
## LR(1) items:
atom -> LIDENT . COLON aexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BEGIN ]
qid -> LIDENT . [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
## Transitions:
-- On COLON shift to state 80
## Reductions:
-- On VTYPE reduce production qid -> LIDENT
-- On UIDENT reduce production qid -> LIDENT
-- On STYPE reduce production qid -> LIDENT
-- On STR reduce production qid -> LIDENT
-- On QUALIDENT reduce production qid -> LIDENT
-- On NSET reduce production qid -> LIDENT
-- On LPAREN reduce production qid -> LIDENT
-- On LIDENT reduce production qid -> LIDENT
-- On LANGLE reduce production qid -> LIDENT
-- On INTEGER reduce production qid -> LIDENT
-- On HASH reduce production qid -> LIDENT
-- On GRAMMAR reduce production qid -> LIDENT
-- On DARROW reduce production qid -> LIDENT
-- On CSET reduce production qid -> LIDENT
-- On CHARACTER reduce production qid -> LIDENT
-- On CEX reduce production qid -> LIDENT
-- On BOOLEAN reduce production qid -> LIDENT
-- On BIJ reduce production qid -> LIDENT
-- On BEGIN reduce production qid -> LIDENT
-- On AVTYPE reduce production qid -> LIDENT
-- On ASTYPE reduce production qid -> LIDENT

State 80:
## Known stack suffix:
## LIDENT COLON
## LR(1) items:
atom -> LIDENT COLON . aexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BEGIN ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 318
## Reductions:

State 81:
## Known stack suffix:
## CSET
## LR(1) items:
aexp -> CSET . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> CSET

State 82:
## Known stack suffix:
## CHARACTER
## LR(1) items:
aexp -> CHARACTER . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> CHARACTER

State 83:
## Known stack suffix:
## CEX
## LR(1) items:
aexp -> CEX . LPAREN exp RPAREN [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## CEX LPAREN
## LR(1) items:
aexp -> CEX LPAREN . exp RPAREN [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 316
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 85:
## Known stack suffix:
## LET
## LR(1) items:
exp -> LET . id param_list COLON sort EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
exp -> LET . id param_list EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
exp -> LET . letpat COLON sort EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
exp -> LET . letpat EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 87
-- On STR shift to state 88
-- On QUALIDENT shift to state 89
-- On LPAREN shift to state 92
-- On LIDENT shift to state 120
-- On INTEGER shift to state 95
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On letpat shift to state 121
-- On id shift to state 303
-- On apat shift to state 315
-- On aapat shift to state 101
## Reductions:

State 86:
## Known stack suffix:
## UNDERLINE
## LR(1) items:
aapat -> UNDERLINE . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aapat -> UNDERLINE

State 87:
## Known stack suffix:
## UIDENT
## LR(1) items:
apat -> UIDENT . [ EQUAL COMMA COLON ]
id -> UIDENT . [ TYVARIDENT LPAREN ]
## Transitions:
## Reductions:
-- On TYVARIDENT reduce production id -> UIDENT
-- On LPAREN reduce production id -> UIDENT
-- On EQUAL reduce production apat -> UIDENT
-- On COMMA reduce production apat -> UIDENT
-- On COLON reduce production apat -> UIDENT

State 88:
## Known stack suffix:
## STR
## LR(1) items:
apat -> STR . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> STR

State 89:
## Known stack suffix:
## QUALIDENT
## LR(1) items:
apat -> QUALIDENT . [ EQUAL COMMA COLON ]
letpat -> QUALIDENT . apat [ EQUAL COMMA COLON ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 90
-- On STR shift to state 88
-- On QUALIDENT shift to state 91
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On apat shift to state 119
-- On aapat shift to state 101
## Reductions:
-- On EQUAL reduce production apat -> QUALIDENT
-- On COMMA reduce production apat -> QUALIDENT
-- On COLON reduce production apat -> QUALIDENT

State 90:
## Known stack suffix:
## UIDENT
## LR(1) items:
apat -> UIDENT . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> UIDENT

State 91:
## Known stack suffix:
## QUALIDENT
## LR(1) items:
apat -> QUALIDENT . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> QUALIDENT

State 92:
## Known stack suffix:
## LPAREN
## LR(1) items:
apat -> LPAREN . RPAREN [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
apat -> LPAREN . pat RPAREN [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On RPAREN shift to state 116
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On pat shift to state 117
-- On listpat shift to state 106
-- On lcpat shift to state 114
-- On conpat shift to state 108
-- On apat shift to state 112
-- On aapat shift to state 101
## Reductions:

State 93:
## Known stack suffix:
## UIDENT
## LR(1) items:
apat -> UIDENT . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
conpat -> UIDENT . apat [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 90
-- On STR shift to state 88
-- On QUALIDENT shift to state 91
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On apat shift to state 115
-- On aapat shift to state 101
## Reductions:
-- On RPAREN reduce production apat -> UIDENT
-- On EQUAL reduce production apat -> UIDENT
-- On COMMA reduce production apat -> UIDENT
-- On COLONCOLON reduce production apat -> UIDENT
-- On COLON reduce production apat -> UIDENT
-- On ARROW reduce production apat -> UIDENT

State 94:
## Known stack suffix:
## LIDENT
## LR(1) items:
aapat -> LIDENT . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aapat -> LIDENT

State 95:
## Known stack suffix:
## INTEGER
## LR(1) items:
apat -> INTEGER . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> INTEGER

State 96:
## Known stack suffix:
## CEX
## LR(1) items:
apat -> CEX . LPAREN pat RPAREN [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
-- On LPAREN shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## CEX LPAREN
## LR(1) items:
apat -> CEX LPAREN . pat RPAREN [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On pat shift to state 103
-- On listpat shift to state 106
-- On lcpat shift to state 114
-- On conpat shift to state 108
-- On apat shift to state 112
-- On aapat shift to state 101
## Reductions:

State 98:
## Known stack suffix:
## QUALIDENT
## LR(1) items:
apat -> QUALIDENT . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
conpat -> QUALIDENT . apat [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 90
-- On STR shift to state 88
-- On QUALIDENT shift to state 91
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On apat shift to state 100
-- On aapat shift to state 101
## Reductions:
-- On RPAREN reduce production apat -> QUALIDENT
-- On EQUAL reduce production apat -> QUALIDENT
-- On COMMA reduce production apat -> QUALIDENT
-- On COLONCOLON reduce production apat -> QUALIDENT
-- On COLON reduce production apat -> QUALIDENT
-- On ARROW reduce production apat -> QUALIDENT

State 99:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
apat -> BOOLEAN . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> BOOLEAN

State 100:
## Known stack suffix:
## QUALIDENT apat
## LR(1) items:
conpat -> QUALIDENT apat . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conpat -> QUALIDENT apat

State 101:
## Known stack suffix:
## aapat
## LR(1) items:
apat -> aapat . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> aapat

State 102:
## Known stack suffix:
## CSET
## LR(1) items:
listpat -> CSET . [ RPAREN EQUAL COMMA COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listpat -> CSET

State 103:
## Known stack suffix:
## CEX LPAREN pat
## LR(1) items:
apat -> CEX LPAREN pat . RPAREN [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
pat -> pat . COMMA lcpat [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 104
-- On COMMA shift to state 105
## Reductions:

State 104:
## Known stack suffix:
## CEX LPAREN pat RPAREN
## LR(1) items:
apat -> CEX LPAREN pat RPAREN . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> CEX LPAREN pat RPAREN

State 105:
## Known stack suffix:
## pat COMMA
## LR(1) items:
pat -> pat COMMA . lcpat [ RPAREN COMMA ARROW ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On listpat shift to state 106
-- On lcpat shift to state 107
-- On conpat shift to state 108
-- On apat shift to state 112
-- On aapat shift to state 101
## Reductions:

State 106:
## Known stack suffix:
## listpat
## LR(1) items:
lcpat -> listpat . [ RPAREN EQUAL COMMA COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lcpat -> listpat

State 107:
## Known stack suffix:
## pat COMMA lcpat
## LR(1) items:
pat -> pat COMMA lcpat . [ RPAREN COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pat -> pat COMMA lcpat

State 108:
## Known stack suffix:
## conpat
## LR(1) items:
lcpat -> conpat . [ RPAREN EQUAL COMMA COLON ARROW ]
listpat -> conpat . COLONCOLON aapat [ RPAREN EQUAL COMMA COLON ARROW ]
listpat -> conpat . COLONCOLON listpat [ RPAREN EQUAL COMMA COLON ARROW ]
## Transitions:
-- On COLONCOLON shift to state 109
## Reductions:
-- On RPAREN reduce production lcpat -> conpat
-- On EQUAL reduce production lcpat -> conpat
-- On COMMA reduce production lcpat -> conpat
-- On COLON reduce production lcpat -> conpat
-- On ARROW reduce production lcpat -> conpat

State 109:
## Known stack suffix:
## conpat COLONCOLON
## LR(1) items:
listpat -> conpat COLONCOLON . aapat [ RPAREN EQUAL COMMA COLON ARROW ]
listpat -> conpat COLONCOLON . listpat [ RPAREN EQUAL COMMA COLON ARROW ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On listpat shift to state 110
-- On conpat shift to state 111
-- On apat shift to state 112
-- On aapat shift to state 113
## Reductions:

State 110:
## Known stack suffix:
## conpat COLONCOLON listpat
## LR(1) items:
listpat -> conpat COLONCOLON listpat . [ RPAREN EQUAL COMMA COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listpat -> conpat COLONCOLON listpat

State 111:
## Known stack suffix:
## conpat
## LR(1) items:
listpat -> conpat . COLONCOLON aapat [ RPAREN EQUAL COMMA COLON ARROW ]
listpat -> conpat . COLONCOLON listpat [ RPAREN EQUAL COMMA COLON ARROW ]
## Transitions:
-- On COLONCOLON shift to state 109
## Reductions:

State 112:
## Known stack suffix:
## apat
## LR(1) items:
conpat -> apat . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conpat -> apat

State 113:
## Known stack suffix:
## conpat COLONCOLON aapat
## LR(1) items:
apat -> aapat . [ COLONCOLON ]
listpat -> conpat COLONCOLON aapat . [ RPAREN EQUAL COMMA COLON ARROW ]
## Transitions:
## Reductions:
-- On RPAREN reduce production listpat -> conpat COLONCOLON aapat
-- On EQUAL reduce production listpat -> conpat COLONCOLON aapat
-- On COMMA reduce production listpat -> conpat COLONCOLON aapat
-- On COLONCOLON reduce production apat -> aapat
-- On COLON reduce production listpat -> conpat COLONCOLON aapat
-- On ARROW reduce production listpat -> conpat COLONCOLON aapat

State 114:
## Known stack suffix:
## lcpat
## LR(1) items:
pat -> lcpat . [ RPAREN COMMA ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pat -> lcpat

State 115:
## Known stack suffix:
## UIDENT apat
## LR(1) items:
conpat -> UIDENT apat . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conpat -> UIDENT apat

State 116:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
apat -> LPAREN RPAREN . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> LPAREN RPAREN

State 117:
## Known stack suffix:
## LPAREN pat
## LR(1) items:
apat -> LPAREN pat . RPAREN [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
pat -> pat . COMMA lcpat [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 118
-- On COMMA shift to state 105
## Reductions:

State 118:
## Known stack suffix:
## LPAREN pat RPAREN
## LR(1) items:
apat -> LPAREN pat RPAREN . [ RPAREN EQUAL COMMA COLONCOLON COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apat -> LPAREN pat RPAREN

State 119:
## Known stack suffix:
## QUALIDENT apat
## LR(1) items:
letpat -> QUALIDENT apat . [ EQUAL COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letpat -> QUALIDENT apat

State 120:
## Known stack suffix:
## LIDENT
## LR(1) items:
aapat -> LIDENT . [ EQUAL COMMA COLON ]
id -> LIDENT . [ TYVARIDENT LPAREN ]
## Transitions:
## Reductions:
-- On TYVARIDENT reduce production id -> LIDENT
-- On LPAREN reduce production id -> LIDENT
-- On EQUAL reduce production aapat -> LIDENT
-- On COMMA reduce production aapat -> LIDENT
-- On COLON reduce production aapat -> LIDENT

State 121:
## Known stack suffix:
## LET letpat
## LR(1) items:
exp -> LET letpat . COLON sort EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
exp -> LET letpat . EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
letpat -> letpat . COMMA lcpat [ EQUAL COMMA COLON ]
## Transitions:
-- On EQUAL shift to state 122
-- On COMMA shift to state 295
-- On COLON shift to state 297
## Reductions:

State 122:
## Known stack suffix:
## LET letpat EQUAL
## LR(1) items:
exp -> LET letpat EQUAL . exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 292
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 123:
## Known stack suffix:
## FUN
## LR(1) items:
funexp -> FUN . param_list ARROW exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
funexp -> FUN . param_list COLON asort ARROW exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On TYVARIDENT shift to state 124
-- On LPAREN shift to state 125
-- On param_list shift to state 281
-- On param shift to state 288
## Reductions:

State 124:
## Known stack suffix:
## TYVARIDENT
## LR(1) items:
param -> TYVARIDENT . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> TYVARIDENT

State 125:
## Known stack suffix:
## LPAREN
## LR(1) items:
param -> LPAREN . id COLON sort RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON LENS IN QMARK DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON LENS IN QMARK DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON LENS IN appexp DARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON LENS IN appexp DEQARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON LENS IN appexp DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON LENS IN appexp DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON STRING IN exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON sort WHERE BANG exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . id COLON sort WHERE exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . TYVARIDENT RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 33
-- On TYVARIDENT shift to state 126
-- On RPAREN shift to state 128
-- On LIDENT shift to state 129
-- On id shift to state 130
## Reductions:

State 126:
## Known stack suffix:
## LPAREN TYVARIDENT
## LR(1) items:
param -> LPAREN TYVARIDENT . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## LPAREN TYVARIDENT RPAREN
## LR(1) items:
param -> LPAREN TYVARIDENT RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN TYVARIDENT RPAREN

State 128:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
param -> LPAREN RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN RPAREN

State 129:
## Known stack suffix:
## LIDENT
## LR(1) items:
id -> LIDENT . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production id -> LIDENT

State 130:
## Known stack suffix:
## LPAREN id
## LR(1) items:
param -> LPAREN id . COLON sort RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON LENS IN QMARK DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON LENS IN QMARK DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON LENS IN appexp DARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON LENS IN appexp DEQARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON LENS IN appexp DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON LENS IN appexp DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON STRING IN exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON sort WHERE BANG exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id . COLON sort WHERE exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On COLON shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## LPAREN id COLON
## LR(1) items:
param -> LPAREN id COLON . sort RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . LENS IN QMARK DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . LENS IN QMARK DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . LENS IN appexp DARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . LENS IN appexp DEQARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . LENS IN appexp DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . LENS IN appexp DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . STRING IN exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . sort WHERE BANG exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON . sort WHERE exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 132
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 253
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 273
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 132:
## Known stack suffix:
## LPAREN id COLON STRING
## LR(1) items:
asort -> STRING . [ WHERE STAR RPAREN QUALIDENT LIDENT ARROW ]
param -> LPAREN id COLON STRING . IN exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On IN shift to state 133
## Reductions:
-- On WHERE reduce production asort -> STRING
-- On STAR reduce production asort -> STRING
-- On RPAREN reduce production asort -> STRING
-- On QUALIDENT reduce production asort -> STRING
-- On LIDENT reduce production asort -> STRING
-- On ARROW reduce production asort -> STRING

State 133:
## Known stack suffix:
## LPAREN id COLON STRING IN
## LR(1) items:
param -> LPAREN id COLON STRING IN . exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 251
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 134:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
aexp -> BOOLEAN . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> BOOLEAN

State 135:
## Known stack suffix:
## BEGIN
## LR(1) items:
aexp -> BEGIN . exp END [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 231
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 136:
## Known stack suffix:
## tyexp
## LR(1) items:
repexp -> tyexp . rep [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
repexp -> tyexp . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
tyexp -> tyexp . LBRACE sort RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On STAR shift to state 137
-- On QMARK shift to state 138
-- On PLUS shift to state 139
-- On LBRACE shift to state 140
-- On rep shift to state 154
## Reductions:
-- On WITH reduce production repexp -> tyexp
-- On USING reduce production repexp -> tyexp
-- On UIDENT reduce production repexp -> tyexp
-- On TYPE reduce production repexp -> tyexp
-- On TILDE reduce production repexp -> tyexp
-- On TEST reduce production repexp -> tyexp
-- On STR reduce production repexp -> tyexp
-- On SEMI reduce production repexp -> tyexp
-- On RPAREN reduce production repexp -> tyexp
-- On RBRACK reduce production repexp -> tyexp
-- On RBRACE reduce production repexp -> tyexp
-- On RANGLE reduce production repexp -> tyexp
-- On QUALIDENT reduce production repexp -> tyexp
-- On PUT reduce production repexp -> tyexp
-- On NSET reduce production repexp -> tyexp
-- On MODULE reduce production repexp -> tyexp
-- On MINUS reduce production repexp -> tyexp
-- On LT reduce production repexp -> tyexp
-- On LPAREN reduce production repexp -> tyexp
-- On LIDENT reduce production repexp -> tyexp
-- On LET reduce production repexp -> tyexp
-- On LEQ reduce production repexp -> tyexp
-- On LANGLE reduce production repexp -> tyexp
-- On INTO reduce production repexp -> tyexp
-- On INTEGER reduce production repexp -> tyexp
-- On IN reduce production repexp -> tyexp
-- On HASH reduce production repexp -> tyexp
-- On GT reduce production repexp -> tyexp
-- On GRAMMAR reduce production repexp -> tyexp
-- On GET reduce production repexp -> tyexp
-- On GEQ reduce production repexp -> tyexp
-- On EQUAL reduce production repexp -> tyexp
-- On EOF reduce production repexp -> tyexp
-- On END reduce production repexp -> tyexp
-- On DOT reduce production repexp -> tyexp
-- On DOLLAR reduce production repexp -> tyexp
-- On DEQARROW reduce production repexp -> tyexp
-- On DARROW reduce production repexp -> tyexp
-- On CSET reduce production repexp -> tyexp
-- On CREATE reduce production repexp -> tyexp
-- On COMMA reduce production repexp -> tyexp
-- On COLON reduce production repexp -> tyexp
-- On CHOOSE reduce production repexp -> tyexp
-- On CHARACTER reduce production repexp -> tyexp
-- On CEX reduce production repexp -> tyexp
-- On CANONIZE reduce production repexp -> tyexp
-- On BOOLEAN reduce production repexp -> tyexp
-- On BEGIN reduce production repexp -> tyexp
-- On BARBAR reduce production repexp -> tyexp
-- On BAR reduce production repexp -> tyexp
-- On ARROW reduce production repexp -> tyexp
-- On AMPERSAND reduce production repexp -> tyexp

State 137:
## Known stack suffix:
## STAR
## LR(1) items:
rep -> STAR . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rep -> STAR

State 138:
## Known stack suffix:
## QMARK
## LR(1) items:
rep -> QMARK . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rep -> QMARK

State 139:
## Known stack suffix:
## PLUS
## LR(1) items:
rep -> PLUS . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rep -> PLUS

State 140:
## Known stack suffix:
## tyexp LBRACE
## LR(1) items:
rep -> LBRACE . INTEGER RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
rep -> LBRACE . INTEGER COMMA RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
rep -> LBRACE . INTEGER COMMA INTEGER RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
tyexp -> tyexp LBRACE . sort RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INTEGER shift to state 141
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 147
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 141:
## Known stack suffix:
## LBRACE INTEGER
## LR(1) items:
rep -> LBRACE INTEGER . RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
rep -> LBRACE INTEGER . COMMA RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
rep -> LBRACE INTEGER . COMMA INTEGER RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On RBRACE shift to state 142
-- On COMMA shift to state 143
## Reductions:

State 142:
## Known stack suffix:
## LBRACE INTEGER RBRACE
## LR(1) items:
rep -> LBRACE INTEGER RBRACE . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rep -> LBRACE INTEGER RBRACE

State 143:
## Known stack suffix:
## LBRACE INTEGER COMMA
## LR(1) items:
rep -> LBRACE INTEGER COMMA . RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
rep -> LBRACE INTEGER COMMA . INTEGER RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On RBRACE shift to state 144
-- On INTEGER shift to state 145
## Reductions:

State 144:
## Known stack suffix:
## LBRACE INTEGER COMMA RBRACE
## LR(1) items:
rep -> LBRACE INTEGER COMMA RBRACE . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rep -> LBRACE INTEGER COMMA RBRACE

State 145:
## Known stack suffix:
## LBRACE INTEGER COMMA INTEGER
## LR(1) items:
rep -> LBRACE INTEGER COMMA INTEGER . RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On RBRACE shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## LBRACE INTEGER COMMA INTEGER RBRACE
## LR(1) items:
rep -> LBRACE INTEGER COMMA INTEGER RBRACE . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rep -> LBRACE INTEGER COMMA INTEGER RBRACE

State 147:
## Known stack suffix:
## tyexp LBRACE sort
## LR(1) items:
tyexp -> tyexp LBRACE sort . RBRACE [ WITH USING UIDENT TYPE TILDE TEST STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On RBRACE shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## tyexp LBRACE sort RBRACE
## LR(1) items:
tyexp -> tyexp LBRACE sort RBRACE . [ WITH USING UIDENT TYPE TILDE TEST STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyexp -> tyexp LBRACE sort RBRACE

State 149:
## Known stack suffix:
## datatypesort
## LR(1) items:
productsort -> datatypesort . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production productsort -> datatypesort

State 150:
## Known stack suffix:
## bsort
## LR(1) items:
datatypesort -> bsort . qvar [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
datatypesort -> bsort . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On QUALIDENT shift to state 31
-- On LIDENT shift to state 52
-- On qvar shift to state 151
## Reductions:
-- On WHERE reduce production datatypesort -> bsort
-- On TYPE reduce production datatypesort -> bsort
-- On TEST reduce production datatypesort -> bsort
-- On STAR reduce production datatypesort -> bsort
-- On RPAREN reduce production datatypesort -> bsort
-- On RBRACE reduce production datatypesort -> bsort
-- On RANGLE reduce production datatypesort -> bsort
-- On MODULE reduce production datatypesort -> bsort
-- On LLIST reduce production datatypesort -> bsort
-- On LET reduce production datatypesort -> bsort
-- On IN reduce production datatypesort -> bsort
-- On EQUAL reduce production datatypesort -> bsort
-- On EOF reduce production datatypesort -> bsort
-- On END reduce production datatypesort -> bsort
-- On DOLLAR reduce production datatypesort -> bsort
-- On COMMA reduce production datatypesort -> bsort
-- On BAR reduce production datatypesort -> bsort
-- On ARROW reduce production datatypesort -> bsort

State 151:
## Known stack suffix:
## bsort qvar
## LR(1) items:
datatypesort -> bsort qvar . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatypesort -> bsort qvar

State 152:
## Known stack suffix:
## asort
## LR(1) items:
bsort -> asort . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> asort

State 153:
## Known stack suffix:
## arrowsort
## LR(1) items:
sort -> arrowsort . [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sort -> arrowsort

State 154:
## Known stack suffix:
## tyexp rep
## LR(1) items:
repexp -> tyexp rep . [ WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production repexp -> tyexp rep

State 155:
## Known stack suffix:
## tildeexp
## LR(1) items:
infixexp -> tildeexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
tildeexp -> tildeexp . TILDE appexp [ WITH TYPE TILDE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On TILDE shift to state 156
## Reductions:
-- On WITH reduce production infixexp -> tildeexp
-- On TYPE reduce production infixexp -> tildeexp
-- On TEST reduce production infixexp -> tildeexp
-- On SEMI reduce production infixexp -> tildeexp
-- On RPAREN reduce production infixexp -> tildeexp
-- On RBRACK reduce production infixexp -> tildeexp
-- On RANGLE reduce production infixexp -> tildeexp
-- On MODULE reduce production infixexp -> tildeexp
-- On MINUS reduce production infixexp -> tildeexp
-- On LET reduce production infixexp -> tildeexp
-- On IN reduce production infixexp -> tildeexp
-- On EQUAL reduce production infixexp -> tildeexp
-- On EOF reduce production infixexp -> tildeexp
-- On END reduce production infixexp -> tildeexp
-- On DOLLAR reduce production infixexp -> tildeexp
-- On COMMA reduce production infixexp -> tildeexp
-- On COLON reduce production infixexp -> tildeexp
-- On BARBAR reduce production infixexp -> tildeexp
-- On BAR reduce production infixexp -> tildeexp

State 156:
## Known stack suffix:
## tildeexp TILDE
## LR(1) items:
tildeexp -> tildeexp TILDE . appexp [ WITH TYPE TILDE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 160
-- On aexp shift to state 162
## Reductions:

State 157:
## Known stack suffix:
## repexp
## LR(1) items:
appexp -> repexp . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production appexp -> repexp

State 158:
## Known stack suffix:
## qid
## LR(1) items:
aexp -> qid . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> qid

State 159:
## Known stack suffix:
## matchexp
## LR(1) items:
aexp -> matchexp . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> matchexp

State 160:
## Known stack suffix:
## tildeexp TILDE appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
tildeexp -> tildeexp TILDE appexp . [ WITH TYPE TILDE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production tildeexp -> tildeexp TILDE appexp
-- On TYPE reduce production tildeexp -> tildeexp TILDE appexp
-- On TILDE reduce production tildeexp -> tildeexp TILDE appexp
-- On TEST reduce production tildeexp -> tildeexp TILDE appexp
-- On SEMI reduce production tildeexp -> tildeexp TILDE appexp
-- On RPAREN reduce production tildeexp -> tildeexp TILDE appexp
-- On RBRACK reduce production tildeexp -> tildeexp TILDE appexp
-- On RANGLE reduce production tildeexp -> tildeexp TILDE appexp
-- On MODULE reduce production tildeexp -> tildeexp TILDE appexp
-- On MINUS reduce production tildeexp -> tildeexp TILDE appexp
-- On LET reduce production tildeexp -> tildeexp TILDE appexp
-- On IN reduce production tildeexp -> tildeexp TILDE appexp
-- On EQUAL reduce production tildeexp -> tildeexp TILDE appexp
-- On EOF reduce production tildeexp -> tildeexp TILDE appexp
-- On END reduce production tildeexp -> tildeexp TILDE appexp
-- On DOLLAR reduce production tildeexp -> tildeexp TILDE appexp
-- On COMMA reduce production tildeexp -> tildeexp TILDE appexp
-- On COLON reduce production tildeexp -> tildeexp TILDE appexp
-- On BARBAR reduce production tildeexp -> tildeexp TILDE appexp
-- On BAR reduce production tildeexp -> tildeexp TILDE appexp

State 161:
## Known stack suffix:
## appexp repexp
## LR(1) items:
appexp -> appexp repexp . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production appexp -> appexp repexp

State 162:
## Known stack suffix:
## aexp
## LR(1) items:
aexp -> aexp . STYPE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AMPERSAND ]
aexp -> aexp . VTYPE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AMPERSAND ]
aexp -> aexp . ASTYPE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AMPERSAND ]
aexp -> aexp . AVTYPE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AMPERSAND ]
aexp -> aexp . BIJ [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AMPERSAND ]
tyexp -> aexp . [ WITH USING UIDENT TYPE TILDE TEST STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On VTYPE shift to state 163
-- On STYPE shift to state 164
-- On BIJ shift to state 165
-- On AVTYPE shift to state 166
-- On ASTYPE shift to state 167
## Reductions:
-- On WITH reduce production tyexp -> aexp
-- On USING reduce production tyexp -> aexp
-- On UIDENT reduce production tyexp -> aexp
-- On TYPE reduce production tyexp -> aexp
-- On TILDE reduce production tyexp -> aexp
-- On TEST reduce production tyexp -> aexp
-- On STR reduce production tyexp -> aexp
-- On STAR reduce production tyexp -> aexp
-- On SEMI reduce production tyexp -> aexp
-- On RPAREN reduce production tyexp -> aexp
-- On RBRACK reduce production tyexp -> aexp
-- On RBRACE reduce production tyexp -> aexp
-- On RANGLE reduce production tyexp -> aexp
-- On QUALIDENT reduce production tyexp -> aexp
-- On QMARK reduce production tyexp -> aexp
-- On PUT reduce production tyexp -> aexp
-- On PLUS reduce production tyexp -> aexp
-- On NSET reduce production tyexp -> aexp
-- On MODULE reduce production tyexp -> aexp
-- On MINUS reduce production tyexp -> aexp
-- On LT reduce production tyexp -> aexp
-- On LPAREN reduce production tyexp -> aexp
-- On LIDENT reduce production tyexp -> aexp
-- On LET reduce production tyexp -> aexp
-- On LEQ reduce production tyexp -> aexp
-- On LBRACE reduce production tyexp -> aexp
-- On LANGLE reduce production tyexp -> aexp
-- On INTO reduce production tyexp -> aexp
-- On INTEGER reduce production tyexp -> aexp
-- On IN reduce production tyexp -> aexp
-- On HASH reduce production tyexp -> aexp
-- On GT reduce production tyexp -> aexp
-- On GRAMMAR reduce production tyexp -> aexp
-- On GET reduce production tyexp -> aexp
-- On GEQ reduce production tyexp -> aexp
-- On EQUAL reduce production tyexp -> aexp
-- On EOF reduce production tyexp -> aexp
-- On END reduce production tyexp -> aexp
-- On DOT reduce production tyexp -> aexp
-- On DOLLAR reduce production tyexp -> aexp
-- On DEQARROW reduce production tyexp -> aexp
-- On DARROW reduce production tyexp -> aexp
-- On CSET reduce production tyexp -> aexp
-- On CREATE reduce production tyexp -> aexp
-- On COMMA reduce production tyexp -> aexp
-- On COLON reduce production tyexp -> aexp
-- On CHOOSE reduce production tyexp -> aexp
-- On CHARACTER reduce production tyexp -> aexp
-- On CEX reduce production tyexp -> aexp
-- On CANONIZE reduce production tyexp -> aexp
-- On BOOLEAN reduce production tyexp -> aexp
-- On BEGIN reduce production tyexp -> aexp
-- On BARBAR reduce production tyexp -> aexp
-- On BAR reduce production tyexp -> aexp
-- On ARROW reduce production tyexp -> aexp
-- On AMPERSAND reduce production tyexp -> aexp

State 163:
## Known stack suffix:
## aexp VTYPE
## LR(1) items:
aexp -> aexp VTYPE . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> aexp VTYPE

State 164:
## Known stack suffix:
## aexp STYPE
## LR(1) items:
aexp -> aexp STYPE . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> aexp STYPE

State 165:
## Known stack suffix:
## aexp BIJ
## LR(1) items:
aexp -> aexp BIJ . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> aexp BIJ

State 166:
## Known stack suffix:
## aexp AVTYPE
## LR(1) items:
aexp -> aexp AVTYPE . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> aexp AVTYPE

State 167:
## Known stack suffix:
## aexp ASTYPE
## LR(1) items:
aexp -> aexp ASTYPE . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> aexp ASTYPE

State 168:
## Known stack suffix:
## rewriteexp
## LR(1) items:
dotexp -> rewriteexp . DOT rewriteexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
dotexp -> rewriteexp . DOT appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
infixexp -> rewriteexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On DOT shift to state 169
## Reductions:
-- On WITH reduce production infixexp -> rewriteexp
-- On TYPE reduce production infixexp -> rewriteexp
-- On TEST reduce production infixexp -> rewriteexp
-- On SEMI reduce production infixexp -> rewriteexp
-- On RPAREN reduce production infixexp -> rewriteexp
-- On RBRACK reduce production infixexp -> rewriteexp
-- On RANGLE reduce production infixexp -> rewriteexp
-- On MODULE reduce production infixexp -> rewriteexp
-- On MINUS reduce production infixexp -> rewriteexp
-- On LET reduce production infixexp -> rewriteexp
-- On IN reduce production infixexp -> rewriteexp
-- On EQUAL reduce production infixexp -> rewriteexp
-- On EOF reduce production infixexp -> rewriteexp
-- On END reduce production infixexp -> rewriteexp
-- On DOLLAR reduce production infixexp -> rewriteexp
-- On COMMA reduce production infixexp -> rewriteexp
-- On COLON reduce production infixexp -> rewriteexp
-- On BARBAR reduce production infixexp -> rewriteexp
-- On BAR reduce production infixexp -> rewriteexp

State 169:
## Known stack suffix:
## rewriteexp DOT
## LR(1) items:
dotexp -> rewriteexp DOT . rewriteexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
dotexp -> rewriteexp DOT . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On rewriteexp shift to state 170
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 171
-- On aexp shift to state 162
## Reductions:

State 170:
## Known stack suffix:
## rewriteexp DOT rewriteexp
## LR(1) items:
dotexp -> rewriteexp DOT rewriteexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dotexp -> rewriteexp DOT rewriteexp

State 171:
## Known stack suffix:
## rewriteexp DOT appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
dotexp -> rewriteexp DOT appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DEQARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On DEQARROW shift to state 172
-- On DARROW shift to state 174
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production dotexp -> rewriteexp DOT appexp
-- On TYPE reduce production dotexp -> rewriteexp DOT appexp
-- On TEST reduce production dotexp -> rewriteexp DOT appexp
-- On SEMI reduce production dotexp -> rewriteexp DOT appexp
-- On RPAREN reduce production dotexp -> rewriteexp DOT appexp
-- On RBRACK reduce production dotexp -> rewriteexp DOT appexp
-- On RANGLE reduce production dotexp -> rewriteexp DOT appexp
-- On MODULE reduce production dotexp -> rewriteexp DOT appexp
-- On MINUS reduce production dotexp -> rewriteexp DOT appexp
-- On LET reduce production dotexp -> rewriteexp DOT appexp
-- On IN reduce production dotexp -> rewriteexp DOT appexp
-- On EQUAL reduce production dotexp -> rewriteexp DOT appexp
-- On EOF reduce production dotexp -> rewriteexp DOT appexp
-- On END reduce production dotexp -> rewriteexp DOT appexp
-- On DOT reduce production dotexp -> rewriteexp DOT appexp
-- On DOLLAR reduce production dotexp -> rewriteexp DOT appexp
-- On COMMA reduce production dotexp -> rewriteexp DOT appexp
-- On COLON reduce production dotexp -> rewriteexp DOT appexp
-- On BARBAR reduce production dotexp -> rewriteexp DOT appexp
-- On BAR reduce production dotexp -> rewriteexp DOT appexp

State 172:
## Known stack suffix:
## appexp DEQARROW
## LR(1) items:
rewriteexp -> appexp DEQARROW . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 173
-- On aexp shift to state 162
## Reductions:

State 173:
## Known stack suffix:
## appexp DEQARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOT DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
rewriteexp -> appexp DEQARROW appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production rewriteexp -> appexp DEQARROW appexp
-- On TYPE reduce production rewriteexp -> appexp DEQARROW appexp
-- On TEST reduce production rewriteexp -> appexp DEQARROW appexp
-- On SEMI reduce production rewriteexp -> appexp DEQARROW appexp
-- On RPAREN reduce production rewriteexp -> appexp DEQARROW appexp
-- On RBRACK reduce production rewriteexp -> appexp DEQARROW appexp
-- On RANGLE reduce production rewriteexp -> appexp DEQARROW appexp
-- On MODULE reduce production rewriteexp -> appexp DEQARROW appexp
-- On MINUS reduce production rewriteexp -> appexp DEQARROW appexp
-- On LET reduce production rewriteexp -> appexp DEQARROW appexp
-- On IN reduce production rewriteexp -> appexp DEQARROW appexp
-- On EQUAL reduce production rewriteexp -> appexp DEQARROW appexp
-- On EOF reduce production rewriteexp -> appexp DEQARROW appexp
-- On END reduce production rewriteexp -> appexp DEQARROW appexp
-- On DOT reduce production rewriteexp -> appexp DEQARROW appexp
-- On DOLLAR reduce production rewriteexp -> appexp DEQARROW appexp
-- On COMMA reduce production rewriteexp -> appexp DEQARROW appexp
-- On COLON reduce production rewriteexp -> appexp DEQARROW appexp
-- On BARBAR reduce production rewriteexp -> appexp DEQARROW appexp
-- On BAR reduce production rewriteexp -> appexp DEQARROW appexp

State 174:
## Known stack suffix:
## appexp DARROW
## LR(1) items:
rewriteexp -> appexp DARROW . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 175
-- On aexp shift to state 162
## Reductions:

State 175:
## Known stack suffix:
## appexp DARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOT DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
rewriteexp -> appexp DARROW appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production rewriteexp -> appexp DARROW appexp
-- On TYPE reduce production rewriteexp -> appexp DARROW appexp
-- On TEST reduce production rewriteexp -> appexp DARROW appexp
-- On SEMI reduce production rewriteexp -> appexp DARROW appexp
-- On RPAREN reduce production rewriteexp -> appexp DARROW appexp
-- On RBRACK reduce production rewriteexp -> appexp DARROW appexp
-- On RANGLE reduce production rewriteexp -> appexp DARROW appexp
-- On MODULE reduce production rewriteexp -> appexp DARROW appexp
-- On MINUS reduce production rewriteexp -> appexp DARROW appexp
-- On LET reduce production rewriteexp -> appexp DARROW appexp
-- On IN reduce production rewriteexp -> appexp DARROW appexp
-- On EQUAL reduce production rewriteexp -> appexp DARROW appexp
-- On EOF reduce production rewriteexp -> appexp DARROW appexp
-- On END reduce production rewriteexp -> appexp DARROW appexp
-- On DOT reduce production rewriteexp -> appexp DARROW appexp
-- On DOLLAR reduce production rewriteexp -> appexp DARROW appexp
-- On COMMA reduce production rewriteexp -> appexp DARROW appexp
-- On COLON reduce production rewriteexp -> appexp DARROW appexp
-- On BARBAR reduce production rewriteexp -> appexp DARROW appexp
-- On BAR reduce production rewriteexp -> appexp DARROW appexp

State 176:
## Known stack suffix:
## obarexp
## LR(1) items:
barexp -> obarexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
obarexp -> obarexp . BAR equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On BAR shift to state 177
## Reductions:
-- On WITH reduce production barexp -> obarexp
-- On TYPE reduce production barexp -> obarexp
-- On TEST reduce production barexp -> obarexp
-- On SEMI reduce production barexp -> obarexp
-- On RPAREN reduce production barexp -> obarexp
-- On RBRACK reduce production barexp -> obarexp
-- On RANGLE reduce production barexp -> obarexp
-- On MODULE reduce production barexp -> obarexp
-- On LET reduce production barexp -> obarexp
-- On IN reduce production barexp -> obarexp
-- On EOF reduce production barexp -> obarexp
-- On END reduce production barexp -> obarexp
-- On DOLLAR reduce production barexp -> obarexp
-- On COMMA reduce production barexp -> obarexp

State 177:
## Known stack suffix:
## obarexp BAR
## LR(1) items:
obarexp -> obarexp BAR . equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 187
-- On dotexp shift to state 188
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 178:
## Known stack suffix:
## minusexp
## LR(1) items:
infixexp -> minusexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixexp -> minusexp

State 179:
## Known stack suffix:
## ltexp
## LR(1) items:
infixexp -> ltexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixexp -> ltexp

State 180:
## Known stack suffix:
## leqexp
## LR(1) items:
infixexp -> leqexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixexp -> leqexp

State 181:
## Known stack suffix:
## lenscomponentexp
## LR(1) items:
infixexp -> lenscomponentexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixexp -> lenscomponentexp

State 182:
## Known stack suffix:
## infixexp
## LR(1) items:
equalexp -> infixexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
minusexp -> infixexp . MINUS appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On MINUS shift to state 183
## Reductions:
-- On WITH reduce production equalexp -> infixexp
-- On TYPE reduce production equalexp -> infixexp
-- On TEST reduce production equalexp -> infixexp
-- On SEMI reduce production equalexp -> infixexp
-- On RPAREN reduce production equalexp -> infixexp
-- On RBRACK reduce production equalexp -> infixexp
-- On RANGLE reduce production equalexp -> infixexp
-- On MODULE reduce production equalexp -> infixexp
-- On LET reduce production equalexp -> infixexp
-- On IN reduce production equalexp -> infixexp
-- On EOF reduce production equalexp -> infixexp
-- On END reduce production equalexp -> infixexp
-- On DOLLAR reduce production equalexp -> infixexp
-- On COMMA reduce production equalexp -> infixexp
-- On COLON reduce production equalexp -> infixexp
-- On BARBAR reduce production equalexp -> infixexp
-- On BAR reduce production equalexp -> infixexp

State 183:
## Known stack suffix:
## infixexp MINUS
## LR(1) items:
minusexp -> infixexp MINUS . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 184
-- On aexp shift to state 162
## Reductions:

State 184:
## Known stack suffix:
## infixexp MINUS appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
minusexp -> infixexp MINUS appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production minusexp -> infixexp MINUS appexp
-- On TYPE reduce production minusexp -> infixexp MINUS appexp
-- On TEST reduce production minusexp -> infixexp MINUS appexp
-- On SEMI reduce production minusexp -> infixexp MINUS appexp
-- On RPAREN reduce production minusexp -> infixexp MINUS appexp
-- On RBRACK reduce production minusexp -> infixexp MINUS appexp
-- On RANGLE reduce production minusexp -> infixexp MINUS appexp
-- On MODULE reduce production minusexp -> infixexp MINUS appexp
-- On MINUS reduce production minusexp -> infixexp MINUS appexp
-- On LET reduce production minusexp -> infixexp MINUS appexp
-- On IN reduce production minusexp -> infixexp MINUS appexp
-- On EQUAL reduce production minusexp -> infixexp MINUS appexp
-- On EOF reduce production minusexp -> infixexp MINUS appexp
-- On END reduce production minusexp -> infixexp MINUS appexp
-- On DOLLAR reduce production minusexp -> infixexp MINUS appexp
-- On COMMA reduce production minusexp -> infixexp MINUS appexp
-- On COLON reduce production minusexp -> infixexp MINUS appexp
-- On BARBAR reduce production minusexp -> infixexp MINUS appexp
-- On BAR reduce production minusexp -> infixexp MINUS appexp

State 185:
## Known stack suffix:
## gtexp
## LR(1) items:
infixexp -> gtexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixexp -> gtexp

State 186:
## Known stack suffix:
## geqexp
## LR(1) items:
infixexp -> geqexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixexp -> geqexp

State 187:
## Known stack suffix:
## obarexp BAR equalexp
## LR(1) items:
obarexp -> obarexp BAR equalexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production obarexp -> obarexp BAR equalexp

State 188:
## Known stack suffix:
## dotexp
## LR(1) items:
dotexp -> dotexp . DOT appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
dotexp -> dotexp . DOT rewriteexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
infixexp -> dotexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On DOT shift to state 189
## Reductions:
-- On WITH reduce production infixexp -> dotexp
-- On TYPE reduce production infixexp -> dotexp
-- On TEST reduce production infixexp -> dotexp
-- On SEMI reduce production infixexp -> dotexp
-- On RPAREN reduce production infixexp -> dotexp
-- On RBRACK reduce production infixexp -> dotexp
-- On RANGLE reduce production infixexp -> dotexp
-- On MODULE reduce production infixexp -> dotexp
-- On MINUS reduce production infixexp -> dotexp
-- On LET reduce production infixexp -> dotexp
-- On IN reduce production infixexp -> dotexp
-- On EQUAL reduce production infixexp -> dotexp
-- On EOF reduce production infixexp -> dotexp
-- On END reduce production infixexp -> dotexp
-- On DOLLAR reduce production infixexp -> dotexp
-- On COMMA reduce production infixexp -> dotexp
-- On COLON reduce production infixexp -> dotexp
-- On BARBAR reduce production infixexp -> dotexp
-- On BAR reduce production infixexp -> dotexp

State 189:
## Known stack suffix:
## dotexp DOT
## LR(1) items:
dotexp -> dotexp DOT . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
dotexp -> dotexp DOT . rewriteexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On rewriteexp shift to state 190
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 191
-- On aexp shift to state 162
## Reductions:

State 190:
## Known stack suffix:
## dotexp DOT rewriteexp
## LR(1) items:
dotexp -> dotexp DOT rewriteexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dotexp -> dotexp DOT rewriteexp

State 191:
## Known stack suffix:
## dotexp DOT appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
dotexp -> dotexp DOT appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DEQARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On DEQARROW shift to state 172
-- On DARROW shift to state 174
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production dotexp -> dotexp DOT appexp
-- On TYPE reduce production dotexp -> dotexp DOT appexp
-- On TEST reduce production dotexp -> dotexp DOT appexp
-- On SEMI reduce production dotexp -> dotexp DOT appexp
-- On RPAREN reduce production dotexp -> dotexp DOT appexp
-- On RBRACK reduce production dotexp -> dotexp DOT appexp
-- On RANGLE reduce production dotexp -> dotexp DOT appexp
-- On MODULE reduce production dotexp -> dotexp DOT appexp
-- On MINUS reduce production dotexp -> dotexp DOT appexp
-- On LET reduce production dotexp -> dotexp DOT appexp
-- On IN reduce production dotexp -> dotexp DOT appexp
-- On EQUAL reduce production dotexp -> dotexp DOT appexp
-- On EOF reduce production dotexp -> dotexp DOT appexp
-- On END reduce production dotexp -> dotexp DOT appexp
-- On DOT reduce production dotexp -> dotexp DOT appexp
-- On DOLLAR reduce production dotexp -> dotexp DOT appexp
-- On COMMA reduce production dotexp -> dotexp DOT appexp
-- On COLON reduce production dotexp -> dotexp DOT appexp
-- On BARBAR reduce production dotexp -> dotexp DOT appexp
-- On BAR reduce production dotexp -> dotexp DOT appexp

State 192:
## Known stack suffix:
## appexp
## LR(1) items:
ampampexp -> appexp . AMPERSAND AMPERSAND ampampexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampampexp -> appexp . AMPERSAND AMPERSAND appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampexp -> appexp . AMPERSAND appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR AMPERSAND ]
appexp -> appexp . repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR AMPERSAND ]
dotexp -> appexp . DOT appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
dotexp -> appexp . DOT rewriteexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
equalexp -> appexp . EQUAL appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
geqexp -> appexp . GEQ appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
gtexp -> appexp . GT appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
infixexp -> appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
lenscomponentexp -> appexp . GET appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
lenscomponentexp -> appexp . PUT appexp INTO appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
lenscomponentexp -> appexp . CREATE appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
lenscomponentexp -> appexp . CANONIZE appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
lenscomponentexp -> appexp . CHOOSE appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
leqexp -> appexp . LEQ appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
ltexp -> appexp . LT appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DEQARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
tildeexp -> appexp . TILDE appexp [ WITH TYPE TILDE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On TILDE shift to state 193
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On PUT shift to state 195
-- On NSET shift to state 43
-- On LT shift to state 199
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LEQ shift to state 201
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GT shift to state 203
-- On GRAMMAR shift to state 75
-- On GET shift to state 205
-- On GEQ shift to state 207
-- On EQUAL shift to state 209
-- On DOT shift to state 211
-- On DEQARROW shift to state 172
-- On DARROW shift to state 174
-- On CSET shift to state 81
-- On CREATE shift to state 214
-- On CHOOSE shift to state 216
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On CANONIZE shift to state 218
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On AMPERSAND shift to state 220
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production infixexp -> appexp
-- On TYPE reduce production infixexp -> appexp
-- On TEST reduce production infixexp -> appexp
-- On SEMI reduce production infixexp -> appexp
-- On RPAREN reduce production infixexp -> appexp
-- On RBRACK reduce production infixexp -> appexp
-- On RANGLE reduce production infixexp -> appexp
-- On MODULE reduce production infixexp -> appexp
-- On MINUS reduce production infixexp -> appexp
-- On LET reduce production infixexp -> appexp
-- On IN reduce production infixexp -> appexp
-- On EOF reduce production infixexp -> appexp
-- On END reduce production infixexp -> appexp
-- On DOLLAR reduce production infixexp -> appexp
-- On COMMA reduce production infixexp -> appexp
-- On COLON reduce production infixexp -> appexp
-- On BARBAR reduce production infixexp -> appexp
-- On BAR reduce production infixexp -> appexp

State 193:
## Known stack suffix:
## appexp TILDE
## LR(1) items:
tildeexp -> appexp TILDE . appexp [ WITH TYPE TILDE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 194
-- On aexp shift to state 162
## Reductions:

State 194:
## Known stack suffix:
## appexp TILDE appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
tildeexp -> appexp TILDE appexp . [ WITH TYPE TILDE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production tildeexp -> appexp TILDE appexp
-- On TYPE reduce production tildeexp -> appexp TILDE appexp
-- On TILDE reduce production tildeexp -> appexp TILDE appexp
-- On TEST reduce production tildeexp -> appexp TILDE appexp
-- On SEMI reduce production tildeexp -> appexp TILDE appexp
-- On RPAREN reduce production tildeexp -> appexp TILDE appexp
-- On RBRACK reduce production tildeexp -> appexp TILDE appexp
-- On RANGLE reduce production tildeexp -> appexp TILDE appexp
-- On MODULE reduce production tildeexp -> appexp TILDE appexp
-- On MINUS reduce production tildeexp -> appexp TILDE appexp
-- On LET reduce production tildeexp -> appexp TILDE appexp
-- On IN reduce production tildeexp -> appexp TILDE appexp
-- On EQUAL reduce production tildeexp -> appexp TILDE appexp
-- On EOF reduce production tildeexp -> appexp TILDE appexp
-- On END reduce production tildeexp -> appexp TILDE appexp
-- On DOLLAR reduce production tildeexp -> appexp TILDE appexp
-- On COMMA reduce production tildeexp -> appexp TILDE appexp
-- On COLON reduce production tildeexp -> appexp TILDE appexp
-- On BARBAR reduce production tildeexp -> appexp TILDE appexp
-- On BAR reduce production tildeexp -> appexp TILDE appexp

State 195:
## Known stack suffix:
## appexp PUT
## LR(1) items:
lenscomponentexp -> appexp PUT . appexp INTO appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 196
-- On aexp shift to state 162
## Reductions:

State 196:
## Known stack suffix:
## appexp PUT appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTO INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
lenscomponentexp -> appexp PUT appexp . INTO appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTO shift to state 197
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 197:
## Known stack suffix:
## appexp PUT appexp INTO
## LR(1) items:
lenscomponentexp -> appexp PUT appexp INTO . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 198
-- On aexp shift to state 162
## Reductions:

State 198:
## Known stack suffix:
## appexp PUT appexp INTO appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
lenscomponentexp -> appexp PUT appexp INTO appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On TYPE reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On TEST reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On SEMI reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On RPAREN reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On RBRACK reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On RANGLE reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On MODULE reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On MINUS reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On LET reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On IN reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On EQUAL reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On EOF reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On END reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On DOLLAR reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On COMMA reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On COLON reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On BARBAR reduce production lenscomponentexp -> appexp PUT appexp INTO appexp
-- On BAR reduce production lenscomponentexp -> appexp PUT appexp INTO appexp

State 199:
## Known stack suffix:
## appexp LT
## LR(1) items:
ltexp -> appexp LT . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 200
-- On aexp shift to state 162
## Reductions:

State 200:
## Known stack suffix:
## appexp LT appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
ltexp -> appexp LT appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production ltexp -> appexp LT appexp
-- On TYPE reduce production ltexp -> appexp LT appexp
-- On TEST reduce production ltexp -> appexp LT appexp
-- On SEMI reduce production ltexp -> appexp LT appexp
-- On RPAREN reduce production ltexp -> appexp LT appexp
-- On RBRACK reduce production ltexp -> appexp LT appexp
-- On RANGLE reduce production ltexp -> appexp LT appexp
-- On MODULE reduce production ltexp -> appexp LT appexp
-- On MINUS reduce production ltexp -> appexp LT appexp
-- On LET reduce production ltexp -> appexp LT appexp
-- On IN reduce production ltexp -> appexp LT appexp
-- On EQUAL reduce production ltexp -> appexp LT appexp
-- On EOF reduce production ltexp -> appexp LT appexp
-- On END reduce production ltexp -> appexp LT appexp
-- On DOLLAR reduce production ltexp -> appexp LT appexp
-- On COMMA reduce production ltexp -> appexp LT appexp
-- On COLON reduce production ltexp -> appexp LT appexp
-- On BARBAR reduce production ltexp -> appexp LT appexp
-- On BAR reduce production ltexp -> appexp LT appexp

State 201:
## Known stack suffix:
## appexp LEQ
## LR(1) items:
leqexp -> appexp LEQ . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 202
-- On aexp shift to state 162
## Reductions:

State 202:
## Known stack suffix:
## appexp LEQ appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
leqexp -> appexp LEQ appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production leqexp -> appexp LEQ appexp
-- On TYPE reduce production leqexp -> appexp LEQ appexp
-- On TEST reduce production leqexp -> appexp LEQ appexp
-- On SEMI reduce production leqexp -> appexp LEQ appexp
-- On RPAREN reduce production leqexp -> appexp LEQ appexp
-- On RBRACK reduce production leqexp -> appexp LEQ appexp
-- On RANGLE reduce production leqexp -> appexp LEQ appexp
-- On MODULE reduce production leqexp -> appexp LEQ appexp
-- On MINUS reduce production leqexp -> appexp LEQ appexp
-- On LET reduce production leqexp -> appexp LEQ appexp
-- On IN reduce production leqexp -> appexp LEQ appexp
-- On EQUAL reduce production leqexp -> appexp LEQ appexp
-- On EOF reduce production leqexp -> appexp LEQ appexp
-- On END reduce production leqexp -> appexp LEQ appexp
-- On DOLLAR reduce production leqexp -> appexp LEQ appexp
-- On COMMA reduce production leqexp -> appexp LEQ appexp
-- On COLON reduce production leqexp -> appexp LEQ appexp
-- On BARBAR reduce production leqexp -> appexp LEQ appexp
-- On BAR reduce production leqexp -> appexp LEQ appexp

State 203:
## Known stack suffix:
## appexp GT
## LR(1) items:
gtexp -> appexp GT . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 204
-- On aexp shift to state 162
## Reductions:

State 204:
## Known stack suffix:
## appexp GT appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
gtexp -> appexp GT appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production gtexp -> appexp GT appexp
-- On TYPE reduce production gtexp -> appexp GT appexp
-- On TEST reduce production gtexp -> appexp GT appexp
-- On SEMI reduce production gtexp -> appexp GT appexp
-- On RPAREN reduce production gtexp -> appexp GT appexp
-- On RBRACK reduce production gtexp -> appexp GT appexp
-- On RANGLE reduce production gtexp -> appexp GT appexp
-- On MODULE reduce production gtexp -> appexp GT appexp
-- On MINUS reduce production gtexp -> appexp GT appexp
-- On LET reduce production gtexp -> appexp GT appexp
-- On IN reduce production gtexp -> appexp GT appexp
-- On EQUAL reduce production gtexp -> appexp GT appexp
-- On EOF reduce production gtexp -> appexp GT appexp
-- On END reduce production gtexp -> appexp GT appexp
-- On DOLLAR reduce production gtexp -> appexp GT appexp
-- On COMMA reduce production gtexp -> appexp GT appexp
-- On COLON reduce production gtexp -> appexp GT appexp
-- On BARBAR reduce production gtexp -> appexp GT appexp
-- On BAR reduce production gtexp -> appexp GT appexp

State 205:
## Known stack suffix:
## appexp GET
## LR(1) items:
lenscomponentexp -> appexp GET . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 206
-- On aexp shift to state 162
## Reductions:

State 206:
## Known stack suffix:
## appexp GET appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
lenscomponentexp -> appexp GET appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production lenscomponentexp -> appexp GET appexp
-- On TYPE reduce production lenscomponentexp -> appexp GET appexp
-- On TEST reduce production lenscomponentexp -> appexp GET appexp
-- On SEMI reduce production lenscomponentexp -> appexp GET appexp
-- On RPAREN reduce production lenscomponentexp -> appexp GET appexp
-- On RBRACK reduce production lenscomponentexp -> appexp GET appexp
-- On RANGLE reduce production lenscomponentexp -> appexp GET appexp
-- On MODULE reduce production lenscomponentexp -> appexp GET appexp
-- On MINUS reduce production lenscomponentexp -> appexp GET appexp
-- On LET reduce production lenscomponentexp -> appexp GET appexp
-- On IN reduce production lenscomponentexp -> appexp GET appexp
-- On EQUAL reduce production lenscomponentexp -> appexp GET appexp
-- On EOF reduce production lenscomponentexp -> appexp GET appexp
-- On END reduce production lenscomponentexp -> appexp GET appexp
-- On DOLLAR reduce production lenscomponentexp -> appexp GET appexp
-- On COMMA reduce production lenscomponentexp -> appexp GET appexp
-- On COLON reduce production lenscomponentexp -> appexp GET appexp
-- On BARBAR reduce production lenscomponentexp -> appexp GET appexp
-- On BAR reduce production lenscomponentexp -> appexp GET appexp

State 207:
## Known stack suffix:
## appexp GEQ
## LR(1) items:
geqexp -> appexp GEQ . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 208
-- On aexp shift to state 162
## Reductions:

State 208:
## Known stack suffix:
## appexp GEQ appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
geqexp -> appexp GEQ appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production geqexp -> appexp GEQ appexp
-- On TYPE reduce production geqexp -> appexp GEQ appexp
-- On TEST reduce production geqexp -> appexp GEQ appexp
-- On SEMI reduce production geqexp -> appexp GEQ appexp
-- On RPAREN reduce production geqexp -> appexp GEQ appexp
-- On RBRACK reduce production geqexp -> appexp GEQ appexp
-- On RANGLE reduce production geqexp -> appexp GEQ appexp
-- On MODULE reduce production geqexp -> appexp GEQ appexp
-- On MINUS reduce production geqexp -> appexp GEQ appexp
-- On LET reduce production geqexp -> appexp GEQ appexp
-- On IN reduce production geqexp -> appexp GEQ appexp
-- On EQUAL reduce production geqexp -> appexp GEQ appexp
-- On EOF reduce production geqexp -> appexp GEQ appexp
-- On END reduce production geqexp -> appexp GEQ appexp
-- On DOLLAR reduce production geqexp -> appexp GEQ appexp
-- On COMMA reduce production geqexp -> appexp GEQ appexp
-- On COLON reduce production geqexp -> appexp GEQ appexp
-- On BARBAR reduce production geqexp -> appexp GEQ appexp
-- On BAR reduce production geqexp -> appexp GEQ appexp

State 209:
## Known stack suffix:
## appexp EQUAL
## LR(1) items:
equalexp -> appexp EQUAL . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 210
-- On aexp shift to state 162
## Reductions:

State 210:
## Known stack suffix:
## appexp EQUAL appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
equalexp -> appexp EQUAL appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production equalexp -> appexp EQUAL appexp
-- On TYPE reduce production equalexp -> appexp EQUAL appexp
-- On TEST reduce production equalexp -> appexp EQUAL appexp
-- On SEMI reduce production equalexp -> appexp EQUAL appexp
-- On RPAREN reduce production equalexp -> appexp EQUAL appexp
-- On RBRACK reduce production equalexp -> appexp EQUAL appexp
-- On RANGLE reduce production equalexp -> appexp EQUAL appexp
-- On MODULE reduce production equalexp -> appexp EQUAL appexp
-- On LET reduce production equalexp -> appexp EQUAL appexp
-- On IN reduce production equalexp -> appexp EQUAL appexp
-- On EOF reduce production equalexp -> appexp EQUAL appexp
-- On END reduce production equalexp -> appexp EQUAL appexp
-- On DOLLAR reduce production equalexp -> appexp EQUAL appexp
-- On COMMA reduce production equalexp -> appexp EQUAL appexp
-- On COLON reduce production equalexp -> appexp EQUAL appexp
-- On BARBAR reduce production equalexp -> appexp EQUAL appexp
-- On BAR reduce production equalexp -> appexp EQUAL appexp

State 211:
## Known stack suffix:
## appexp DOT
## LR(1) items:
dotexp -> appexp DOT . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
dotexp -> appexp DOT . rewriteexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On rewriteexp shift to state 212
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 213
-- On aexp shift to state 162
## Reductions:

State 212:
## Known stack suffix:
## appexp DOT rewriteexp
## LR(1) items:
dotexp -> appexp DOT rewriteexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dotexp -> appexp DOT rewriteexp

State 213:
## Known stack suffix:
## appexp DOT appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
dotexp -> appexp DOT appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
rewriteexp -> appexp . DEQARROW appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On DEQARROW shift to state 172
-- On DARROW shift to state 174
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production dotexp -> appexp DOT appexp
-- On TYPE reduce production dotexp -> appexp DOT appexp
-- On TEST reduce production dotexp -> appexp DOT appexp
-- On SEMI reduce production dotexp -> appexp DOT appexp
-- On RPAREN reduce production dotexp -> appexp DOT appexp
-- On RBRACK reduce production dotexp -> appexp DOT appexp
-- On RANGLE reduce production dotexp -> appexp DOT appexp
-- On MODULE reduce production dotexp -> appexp DOT appexp
-- On MINUS reduce production dotexp -> appexp DOT appexp
-- On LET reduce production dotexp -> appexp DOT appexp
-- On IN reduce production dotexp -> appexp DOT appexp
-- On EQUAL reduce production dotexp -> appexp DOT appexp
-- On EOF reduce production dotexp -> appexp DOT appexp
-- On END reduce production dotexp -> appexp DOT appexp
-- On DOT reduce production dotexp -> appexp DOT appexp
-- On DOLLAR reduce production dotexp -> appexp DOT appexp
-- On COMMA reduce production dotexp -> appexp DOT appexp
-- On COLON reduce production dotexp -> appexp DOT appexp
-- On BARBAR reduce production dotexp -> appexp DOT appexp
-- On BAR reduce production dotexp -> appexp DOT appexp

State 214:
## Known stack suffix:
## appexp CREATE
## LR(1) items:
lenscomponentexp -> appexp CREATE . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 215
-- On aexp shift to state 162
## Reductions:

State 215:
## Known stack suffix:
## appexp CREATE appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
lenscomponentexp -> appexp CREATE appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production lenscomponentexp -> appexp CREATE appexp
-- On TYPE reduce production lenscomponentexp -> appexp CREATE appexp
-- On TEST reduce production lenscomponentexp -> appexp CREATE appexp
-- On SEMI reduce production lenscomponentexp -> appexp CREATE appexp
-- On RPAREN reduce production lenscomponentexp -> appexp CREATE appexp
-- On RBRACK reduce production lenscomponentexp -> appexp CREATE appexp
-- On RANGLE reduce production lenscomponentexp -> appexp CREATE appexp
-- On MODULE reduce production lenscomponentexp -> appexp CREATE appexp
-- On MINUS reduce production lenscomponentexp -> appexp CREATE appexp
-- On LET reduce production lenscomponentexp -> appexp CREATE appexp
-- On IN reduce production lenscomponentexp -> appexp CREATE appexp
-- On EQUAL reduce production lenscomponentexp -> appexp CREATE appexp
-- On EOF reduce production lenscomponentexp -> appexp CREATE appexp
-- On END reduce production lenscomponentexp -> appexp CREATE appexp
-- On DOLLAR reduce production lenscomponentexp -> appexp CREATE appexp
-- On COMMA reduce production lenscomponentexp -> appexp CREATE appexp
-- On COLON reduce production lenscomponentexp -> appexp CREATE appexp
-- On BARBAR reduce production lenscomponentexp -> appexp CREATE appexp
-- On BAR reduce production lenscomponentexp -> appexp CREATE appexp

State 216:
## Known stack suffix:
## appexp CHOOSE
## LR(1) items:
lenscomponentexp -> appexp CHOOSE . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 217
-- On aexp shift to state 162
## Reductions:

State 217:
## Known stack suffix:
## appexp CHOOSE appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
lenscomponentexp -> appexp CHOOSE appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On TYPE reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On TEST reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On SEMI reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On RPAREN reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On RBRACK reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On RANGLE reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On MODULE reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On MINUS reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On LET reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On IN reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On EQUAL reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On EOF reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On END reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On DOLLAR reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On COMMA reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On COLON reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On BARBAR reduce production lenscomponentexp -> appexp CHOOSE appexp
-- On BAR reduce production lenscomponentexp -> appexp CHOOSE appexp

State 218:
## Known stack suffix:
## appexp CANONIZE
## LR(1) items:
lenscomponentexp -> appexp CANONIZE . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 219
-- On aexp shift to state 162
## Reductions:

State 219:
## Known stack suffix:
## appexp CANONIZE appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
lenscomponentexp -> appexp CANONIZE appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On TYPE reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On TEST reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On SEMI reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On RPAREN reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On RBRACK reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On RANGLE reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On MODULE reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On MINUS reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On LET reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On IN reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On EQUAL reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On EOF reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On END reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On DOLLAR reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On COMMA reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On COLON reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On BARBAR reduce production lenscomponentexp -> appexp CANONIZE appexp
-- On BAR reduce production lenscomponentexp -> appexp CANONIZE appexp

State 220:
## Known stack suffix:
## appexp AMPERSAND
## LR(1) items:
ampampexp -> appexp AMPERSAND . AMPERSAND ampampexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampampexp -> appexp AMPERSAND . AMPERSAND appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampexp -> appexp AMPERSAND . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On AMPERSAND shift to state 221
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 225
-- On aexp shift to state 162
## Reductions:

State 221:
## Known stack suffix:
## appexp AMPERSAND AMPERSAND
## LR(1) items:
ampampexp -> appexp AMPERSAND AMPERSAND . ampampexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampampexp -> appexp AMPERSAND AMPERSAND . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 222
-- On ampampexp shift to state 224
-- On aexp shift to state 162
## Reductions:

State 222:
## Known stack suffix:
## appexp AMPERSAND AMPERSAND appexp
## LR(1) items:
ampampexp -> appexp . AMPERSAND AMPERSAND ampampexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampampexp -> appexp . AMPERSAND AMPERSAND appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampampexp -> appexp AMPERSAND AMPERSAND appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On AMPERSAND shift to state 223
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On TYPE reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On TEST reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On SEMI reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On RPAREN reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On RBRACK reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On RANGLE reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On MODULE reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On MINUS reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On LET reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On IN reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On EQUAL reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On EOF reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On END reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On DOLLAR reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On COMMA reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On COLON reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On BARBAR reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp
-- On BAR reduce production ampampexp -> appexp AMPERSAND AMPERSAND appexp

State 223:
## Known stack suffix:
## appexp AMPERSAND
## LR(1) items:
ampampexp -> appexp AMPERSAND . AMPERSAND ampampexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
ampampexp -> appexp AMPERSAND . AMPERSAND appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On AMPERSAND shift to state 221
## Reductions:

State 224:
## Known stack suffix:
## appexp AMPERSAND AMPERSAND ampampexp
## LR(1) items:
ampampexp -> appexp AMPERSAND AMPERSAND ampampexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ampampexp -> appexp AMPERSAND AMPERSAND ampampexp

State 225:
## Known stack suffix:
## appexp AMPERSAND appexp
## LR(1) items:
ampexp -> appexp AMPERSAND appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR AMPERSAND ]
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production ampexp -> appexp AMPERSAND appexp
-- On TYPE reduce production ampexp -> appexp AMPERSAND appexp
-- On TEST reduce production ampexp -> appexp AMPERSAND appexp
-- On SEMI reduce production ampexp -> appexp AMPERSAND appexp
-- On RPAREN reduce production ampexp -> appexp AMPERSAND appexp
-- On RBRACK reduce production ampexp -> appexp AMPERSAND appexp
-- On RANGLE reduce production ampexp -> appexp AMPERSAND appexp
-- On MODULE reduce production ampexp -> appexp AMPERSAND appexp
-- On MINUS reduce production ampexp -> appexp AMPERSAND appexp
-- On LET reduce production ampexp -> appexp AMPERSAND appexp
-- On IN reduce production ampexp -> appexp AMPERSAND appexp
-- On EQUAL reduce production ampexp -> appexp AMPERSAND appexp
-- On EOF reduce production ampexp -> appexp AMPERSAND appexp
-- On END reduce production ampexp -> appexp AMPERSAND appexp
-- On DOLLAR reduce production ampexp -> appexp AMPERSAND appexp
-- On COMMA reduce production ampexp -> appexp AMPERSAND appexp
-- On COLON reduce production ampexp -> appexp AMPERSAND appexp
-- On BARBAR reduce production ampexp -> appexp AMPERSAND appexp
-- On BAR reduce production ampexp -> appexp AMPERSAND appexp
-- On AMPERSAND reduce production ampexp -> appexp AMPERSAND appexp

State 226:
## Known stack suffix:
## ampexp
## LR(1) items:
ampexp -> ampexp . AMPERSAND appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR AMPERSAND ]
infixexp -> ampexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On AMPERSAND shift to state 227
## Reductions:
-- On WITH reduce production infixexp -> ampexp
-- On TYPE reduce production infixexp -> ampexp
-- On TEST reduce production infixexp -> ampexp
-- On SEMI reduce production infixexp -> ampexp
-- On RPAREN reduce production infixexp -> ampexp
-- On RBRACK reduce production infixexp -> ampexp
-- On RANGLE reduce production infixexp -> ampexp
-- On MODULE reduce production infixexp -> ampexp
-- On MINUS reduce production infixexp -> ampexp
-- On LET reduce production infixexp -> ampexp
-- On IN reduce production infixexp -> ampexp
-- On EQUAL reduce production infixexp -> ampexp
-- On EOF reduce production infixexp -> ampexp
-- On END reduce production infixexp -> ampexp
-- On DOLLAR reduce production infixexp -> ampexp
-- On COMMA reduce production infixexp -> ampexp
-- On COLON reduce production infixexp -> ampexp
-- On BARBAR reduce production infixexp -> ampexp
-- On BAR reduce production infixexp -> ampexp

State 227:
## Known stack suffix:
## ampexp AMPERSAND
## LR(1) items:
ampexp -> ampexp AMPERSAND . appexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 228
-- On aexp shift to state 162
## Reductions:

State 228:
## Known stack suffix:
## ampexp AMPERSAND appexp
## LR(1) items:
ampexp -> ampexp AMPERSAND appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR AMPERSAND ]
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production ampexp -> ampexp AMPERSAND appexp
-- On TYPE reduce production ampexp -> ampexp AMPERSAND appexp
-- On TEST reduce production ampexp -> ampexp AMPERSAND appexp
-- On SEMI reduce production ampexp -> ampexp AMPERSAND appexp
-- On RPAREN reduce production ampexp -> ampexp AMPERSAND appexp
-- On RBRACK reduce production ampexp -> ampexp AMPERSAND appexp
-- On RANGLE reduce production ampexp -> ampexp AMPERSAND appexp
-- On MODULE reduce production ampexp -> ampexp AMPERSAND appexp
-- On MINUS reduce production ampexp -> ampexp AMPERSAND appexp
-- On LET reduce production ampexp -> ampexp AMPERSAND appexp
-- On IN reduce production ampexp -> ampexp AMPERSAND appexp
-- On EQUAL reduce production ampexp -> ampexp AMPERSAND appexp
-- On EOF reduce production ampexp -> ampexp AMPERSAND appexp
-- On END reduce production ampexp -> ampexp AMPERSAND appexp
-- On DOLLAR reduce production ampexp -> ampexp AMPERSAND appexp
-- On COMMA reduce production ampexp -> ampexp AMPERSAND appexp
-- On COLON reduce production ampexp -> ampexp AMPERSAND appexp
-- On BARBAR reduce production ampexp -> ampexp AMPERSAND appexp
-- On BAR reduce production ampexp -> ampexp AMPERSAND appexp
-- On AMPERSAND reduce production ampexp -> ampexp AMPERSAND appexp

State 229:
## Known stack suffix:
## ampampexp
## LR(1) items:
infixexp -> ampampexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixexp -> ampampexp

State 230:
## Known stack suffix:
## funexp
## LR(1) items:
exp -> funexp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> funexp

State 231:
## Known stack suffix:
## BEGIN exp
## LR(1) items:
aexp -> BEGIN exp . END [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On END shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## BEGIN exp END
## LR(1) items:
aexp -> BEGIN exp END . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> BEGIN exp END

State 233:
## Known stack suffix:
## equalexp
## LR(1) items:
barexp -> equalexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
dbarexp -> equalexp . BARBAR equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BARBAR ]
obarexp -> equalexp . BAR equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On BARBAR shift to state 234
-- On BAR shift to state 236
## Reductions:
-- On WITH reduce production barexp -> equalexp
-- On TYPE reduce production barexp -> equalexp
-- On TEST reduce production barexp -> equalexp
-- On SEMI reduce production barexp -> equalexp
-- On RPAREN reduce production barexp -> equalexp
-- On RBRACK reduce production barexp -> equalexp
-- On RANGLE reduce production barexp -> equalexp
-- On MODULE reduce production barexp -> equalexp
-- On LET reduce production barexp -> equalexp
-- On IN reduce production barexp -> equalexp
-- On EOF reduce production barexp -> equalexp
-- On END reduce production barexp -> equalexp
-- On DOLLAR reduce production barexp -> equalexp
-- On COMMA reduce production barexp -> equalexp

State 234:
## Known stack suffix:
## equalexp BARBAR
## LR(1) items:
dbarexp -> equalexp BARBAR . equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BARBAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 235
-- On dotexp shift to state 188
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 235:
## Known stack suffix:
## equalexp BARBAR equalexp
## LR(1) items:
dbarexp -> equalexp BARBAR equalexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BARBAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dbarexp -> equalexp BARBAR equalexp

State 236:
## Known stack suffix:
## equalexp BAR
## LR(1) items:
obarexp -> equalexp BAR . equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 237
-- On dotexp shift to state 188
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 237:
## Known stack suffix:
## equalexp BAR equalexp
## LR(1) items:
obarexp -> equalexp BAR equalexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production obarexp -> equalexp BAR equalexp

State 238:
## Known stack suffix:
## dbarexp
## LR(1) items:
barexp -> dbarexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
dbarexp -> dbarexp . BARBAR equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BARBAR ]
## Transitions:
-- On BARBAR shift to state 239
## Reductions:
-- On WITH reduce production barexp -> dbarexp
-- On TYPE reduce production barexp -> dbarexp
-- On TEST reduce production barexp -> dbarexp
-- On SEMI reduce production barexp -> dbarexp
-- On RPAREN reduce production barexp -> dbarexp
-- On RBRACK reduce production barexp -> dbarexp
-- On RANGLE reduce production barexp -> dbarexp
-- On MODULE reduce production barexp -> dbarexp
-- On LET reduce production barexp -> dbarexp
-- On IN reduce production barexp -> dbarexp
-- On EOF reduce production barexp -> dbarexp
-- On END reduce production barexp -> dbarexp
-- On DOLLAR reduce production barexp -> dbarexp
-- On COMMA reduce production barexp -> dbarexp

State 239:
## Known stack suffix:
## dbarexp BARBAR
## LR(1) items:
dbarexp -> dbarexp BARBAR . equalexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BARBAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 240
-- On dotexp shift to state 188
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 240:
## Known stack suffix:
## dbarexp BARBAR equalexp
## LR(1) items:
dbarexp -> dbarexp BARBAR equalexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BARBAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dbarexp -> dbarexp BARBAR equalexp

State 241:
## Known stack suffix:
## composeexp
## LR(1) items:
cexp -> composeexp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
composeexp -> composeexp . SEMI commaexp [ TYPE TEST SEMI RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On SEMI shift to state 242
## Reductions:
-- On TYPE reduce production cexp -> composeexp
-- On TEST reduce production cexp -> composeexp
-- On RPAREN reduce production cexp -> composeexp
-- On RANGLE reduce production cexp -> composeexp
-- On MODULE reduce production cexp -> composeexp
-- On LET reduce production cexp -> composeexp
-- On IN reduce production cexp -> composeexp
-- On EOF reduce production cexp -> composeexp
-- On END reduce production cexp -> composeexp
-- On DOLLAR reduce production cexp -> composeexp

State 242:
## Known stack suffix:
## composeexp SEMI
## LR(1) items:
composeexp -> composeexp SEMI . commaexp [ WITH TYPE TEST SEMI RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On commaexp shift to state 243
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 243:
## Known stack suffix:
## composeexp SEMI commaexp
## LR(1) items:
commaexp -> commaexp . COMMA barexp [ WITH TYPE TEST SEMI RPAREN RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
composeexp -> composeexp SEMI commaexp . [ WITH TYPE TEST SEMI RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On COMMA shift to state 244
## Reductions:
-- On WITH reduce production composeexp -> composeexp SEMI commaexp
-- On TYPE reduce production composeexp -> composeexp SEMI commaexp
-- On TEST reduce production composeexp -> composeexp SEMI commaexp
-- On SEMI reduce production composeexp -> composeexp SEMI commaexp
-- On RPAREN reduce production composeexp -> composeexp SEMI commaexp
-- On RANGLE reduce production composeexp -> composeexp SEMI commaexp
-- On MODULE reduce production composeexp -> composeexp SEMI commaexp
-- On LET reduce production composeexp -> composeexp SEMI commaexp
-- On IN reduce production composeexp -> composeexp SEMI commaexp
-- On EOF reduce production composeexp -> composeexp SEMI commaexp
-- On END reduce production composeexp -> composeexp SEMI commaexp
-- On DOLLAR reduce production composeexp -> composeexp SEMI commaexp

State 244:
## Known stack suffix:
## commaexp COMMA
## LR(1) items:
commaexp -> commaexp COMMA . barexp [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On barexp shift to state 245
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 245:
## Known stack suffix:
## commaexp COMMA barexp
## LR(1) items:
commaexp -> commaexp COMMA barexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production commaexp -> commaexp COMMA barexp

State 246:
## Known stack suffix:
## barexp
## LR(1) items:
commaexp -> barexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production commaexp -> barexp

State 247:
## Known stack suffix:
## commaexp
## LR(1) items:
commaexp -> commaexp . COMMA barexp [ WITH TYPE TEST SEMI RPAREN RANGLE MODULE LET IN EOF END DOLLAR COMMA ]
composeexp -> commaexp . [ WITH TYPE TEST SEMI RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On COMMA shift to state 244
## Reductions:
-- On WITH reduce production composeexp -> commaexp
-- On TYPE reduce production composeexp -> commaexp
-- On TEST reduce production composeexp -> commaexp
-- On SEMI reduce production composeexp -> commaexp
-- On RPAREN reduce production composeexp -> commaexp
-- On RANGLE reduce production composeexp -> commaexp
-- On MODULE reduce production composeexp -> commaexp
-- On LET reduce production composeexp -> commaexp
-- On IN reduce production composeexp -> commaexp
-- On EOF reduce production composeexp -> commaexp
-- On END reduce production composeexp -> commaexp
-- On DOLLAR reduce production composeexp -> commaexp

State 248:
## Known stack suffix:
## cexp
## LR(1) items:
funexp -> cexp . DOLLAR funexp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
funexp -> cexp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On DOLLAR shift to state 249
## Reductions:
-- On TYPE reduce production funexp -> cexp
-- On TEST reduce production funexp -> cexp
-- On RPAREN reduce production funexp -> cexp
-- On RANGLE reduce production funexp -> cexp
-- On MODULE reduce production funexp -> cexp
-- On LET reduce production funexp -> cexp
-- On IN reduce production funexp -> cexp
-- On EOF reduce production funexp -> cexp
-- On END reduce production funexp -> cexp

State 249:
## Known stack suffix:
## cexp DOLLAR
## LR(1) items:
funexp -> cexp DOLLAR . funexp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 250
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 250:
## Known stack suffix:
## cexp DOLLAR funexp
## LR(1) items:
funexp -> cexp DOLLAR funexp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production funexp -> cexp DOLLAR funexp

State 251:
## Known stack suffix:
## LPAREN id COLON STRING IN exp
## LR(1) items:
param -> LPAREN id COLON STRING IN exp . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## LPAREN id COLON STRING IN exp RPAREN
## LR(1) items:
param -> LPAREN id COLON STRING IN exp RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON STRING IN exp RPAREN

State 253:
## Known stack suffix:
## LPAREN id COLON LENS
## LR(1) items:
asort -> LENS . [ WHERE STAR RPAREN QUALIDENT LIDENT ARROW ]
param -> LPAREN id COLON LENS . IN QMARK DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS . IN QMARK DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS . IN appexp DARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS . IN appexp DEQARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS . IN appexp DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS . IN appexp DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On IN shift to state 254
## Reductions:
-- On WHERE reduce production asort -> LENS
-- On STAR reduce production asort -> LENS
-- On RPAREN reduce production asort -> LENS
-- On QUALIDENT reduce production asort -> LENS
-- On LIDENT reduce production asort -> LENS
-- On ARROW reduce production asort -> LENS

State 254:
## Known stack suffix:
## LPAREN id COLON LENS IN
## LR(1) items:
param -> LPAREN id COLON LENS IN . QMARK DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN . QMARK DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN . appexp DARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN . appexp DEQARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN . appexp DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN . appexp DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On QMARK shift to state 255
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 262
-- On aexp shift to state 162
## Reductions:

State 255:
## Known stack suffix:
## LPAREN id COLON LENS IN QMARK
## LR(1) items:
param -> LPAREN id COLON LENS IN QMARK . DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN QMARK . DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On DEQARROW shift to state 256
-- On DARROW shift to state 259
## Reductions:

State 256:
## Known stack suffix:
## LPAREN id COLON LENS IN QMARK DEQARROW
## LR(1) items:
param -> LPAREN id COLON LENS IN QMARK DEQARROW . appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 257
-- On aexp shift to state 162
## Reductions:

State 257:
## Known stack suffix:
## LPAREN id COLON LENS IN QMARK DEQARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
param -> LPAREN id COLON LENS IN QMARK DEQARROW appexp . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 258
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 258:
## Known stack suffix:
## LPAREN id COLON LENS IN QMARK DEQARROW appexp RPAREN
## LR(1) items:
param -> LPAREN id COLON LENS IN QMARK DEQARROW appexp RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON LENS IN QMARK DEQARROW appexp RPAREN

State 259:
## Known stack suffix:
## LPAREN id COLON LENS IN QMARK DARROW
## LR(1) items:
param -> LPAREN id COLON LENS IN QMARK DARROW . appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 260
-- On aexp shift to state 162
## Reductions:

State 260:
## Known stack suffix:
## LPAREN id COLON LENS IN QMARK DARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
param -> LPAREN id COLON LENS IN QMARK DARROW appexp . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 261
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 261:
## Known stack suffix:
## LPAREN id COLON LENS IN QMARK DARROW appexp RPAREN
## LR(1) items:
param -> LPAREN id COLON LENS IN QMARK DARROW appexp RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON LENS IN QMARK DARROW appexp RPAREN

State 262:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DEQARROW DARROW CSET CHARACTER CEX BOOLEAN BEGIN ]
param -> LPAREN id COLON LENS IN appexp . DARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN appexp . DEQARROW QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN appexp . DARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN appexp . DEQARROW appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On DEQARROW shift to state 263
-- On DARROW shift to state 268
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 263:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DEQARROW
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DEQARROW . QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN appexp DEQARROW . appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On QMARK shift to state 264
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 266
-- On aexp shift to state 162
## Reductions:

State 264:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DEQARROW QMARK
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DEQARROW QMARK . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DEQARROW QMARK RPAREN
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DEQARROW QMARK RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON LENS IN appexp DEQARROW QMARK RPAREN

State 266:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DEQARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
param -> LPAREN id COLON LENS IN appexp DEQARROW appexp . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 267
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 267:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DEQARROW appexp RPAREN
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DEQARROW appexp RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON LENS IN appexp DEQARROW appexp RPAREN

State 268:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DARROW
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DARROW . QMARK RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON LENS IN appexp DARROW . appexp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On QMARK shift to state 269
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 271
-- On aexp shift to state 162
## Reductions:

State 269:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DARROW QMARK
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DARROW QMARK . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DARROW QMARK RPAREN
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DARROW QMARK RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON LENS IN appexp DARROW QMARK RPAREN

State 271:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
param -> LPAREN id COLON LENS IN appexp DARROW appexp . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 272
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 272:
## Known stack suffix:
## LPAREN id COLON LENS IN appexp DARROW appexp RPAREN
## LR(1) items:
param -> LPAREN id COLON LENS IN appexp DARROW appexp RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON LENS IN appexp DARROW appexp RPAREN

State 273:
## Known stack suffix:
## LPAREN id COLON sort
## LR(1) items:
param -> LPAREN id COLON sort . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON sort . WHERE BANG exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON sort . WHERE exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On WHERE shift to state 274
-- On RPAREN shift to state 280
## Reductions:

State 274:
## Known stack suffix:
## LPAREN id COLON sort WHERE
## LR(1) items:
param -> LPAREN id COLON sort WHERE . BANG exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
param -> LPAREN id COLON sort WHERE . exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On BANG shift to state 275
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 278
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 275:
## Known stack suffix:
## LPAREN id COLON sort WHERE BANG
## LR(1) items:
param -> LPAREN id COLON sort WHERE BANG . exp RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 276
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 276:
## Known stack suffix:
## LPAREN id COLON sort WHERE BANG exp
## LR(1) items:
param -> LPAREN id COLON sort WHERE BANG exp . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## LPAREN id COLON sort WHERE BANG exp RPAREN
## LR(1) items:
param -> LPAREN id COLON sort WHERE BANG exp RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON sort WHERE BANG exp RPAREN

State 278:
## Known stack suffix:
## LPAREN id COLON sort WHERE exp
## LR(1) items:
param -> LPAREN id COLON sort WHERE exp . RPAREN [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
-- On RPAREN shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## LPAREN id COLON sort WHERE exp RPAREN
## LR(1) items:
param -> LPAREN id COLON sort WHERE exp RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON sort WHERE exp RPAREN

State 280:
## Known stack suffix:
## LPAREN id COLON sort RPAREN
## LR(1) items:
param -> LPAREN id COLON sort RPAREN . [ TYVARIDENT LPAREN EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> LPAREN id COLON sort RPAREN

State 281:
## Known stack suffix:
## FUN param_list
## LR(1) items:
funexp -> FUN param_list . ARROW exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
funexp -> FUN param_list . COLON asort ARROW exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On COLON shift to state 282
-- On ARROW shift to state 286
## Reductions:

State 282:
## Known stack suffix:
## FUN param_list COLON
## LR(1) items:
funexp -> FUN param_list COLON . asort ARROW exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On qvar shift to state 66
-- On asort shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## FUN param_list COLON asort
## LR(1) items:
funexp -> FUN param_list COLON asort . ARROW exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On ARROW shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## FUN param_list COLON asort ARROW
## LR(1) items:
funexp -> FUN param_list COLON asort ARROW . exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 285
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 285:
## Known stack suffix:
## FUN param_list COLON asort ARROW exp
## LR(1) items:
funexp -> FUN param_list COLON asort ARROW exp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production funexp -> FUN param_list COLON asort ARROW exp

State 286:
## Known stack suffix:
## FUN param_list ARROW
## LR(1) items:
funexp -> FUN param_list ARROW . exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 287
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 287:
## Known stack suffix:
## FUN param_list ARROW exp
## LR(1) items:
funexp -> FUN param_list ARROW exp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production funexp -> FUN param_list ARROW exp

State 288:
## Known stack suffix:
## param
## LR(1) items:
param_list -> param . param_list2 [ EQUAL COLON ARROW ]
## Transitions:
-- On TYVARIDENT shift to state 124
-- On LPAREN shift to state 125
-- On param_list2 shift to state 289
-- On param shift to state 290
## Reductions:
-- On EQUAL reduce production param_list2 ->
-- On COLON reduce production param_list2 ->
-- On ARROW reduce production param_list2 ->

State 289:
## Known stack suffix:
## param param_list2
## LR(1) items:
param_list -> param param_list2 . [ EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_list -> param param_list2

State 290:
## Known stack suffix:
## param
## LR(1) items:
param_list2 -> param . param_list2 [ EQUAL COLON ARROW ]
## Transitions:
-- On TYVARIDENT shift to state 124
-- On LPAREN shift to state 125
-- On param_list2 shift to state 291
-- On param shift to state 290
## Reductions:
-- On EQUAL reduce production param_list2 ->
-- On COLON reduce production param_list2 ->
-- On ARROW reduce production param_list2 ->

State 291:
## Known stack suffix:
## param param_list2
## LR(1) items:
param_list2 -> param param_list2 . [ EQUAL COLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_list2 -> param param_list2

State 292:
## Known stack suffix:
## LET letpat EQUAL exp
## LR(1) items:
exp -> LET letpat EQUAL exp . IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On IN shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## LET letpat EQUAL exp IN
## LR(1) items:
exp -> LET letpat EQUAL exp IN . exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 294
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 294:
## Known stack suffix:
## LET letpat EQUAL exp IN exp
## LR(1) items:
exp -> LET letpat EQUAL exp IN exp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> LET letpat EQUAL exp IN exp

State 295:
## Known stack suffix:
## letpat COMMA
## LR(1) items:
letpat -> letpat COMMA . lcpat [ EQUAL COMMA COLON ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On listpat shift to state 106
-- On lcpat shift to state 296
-- On conpat shift to state 108
-- On apat shift to state 112
-- On aapat shift to state 101
## Reductions:

State 296:
## Known stack suffix:
## letpat COMMA lcpat
## LR(1) items:
letpat -> letpat COMMA lcpat . [ EQUAL COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letpat -> letpat COMMA lcpat

State 297:
## Known stack suffix:
## LET letpat COLON
## LR(1) items:
exp -> LET letpat COLON . sort EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 298
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 298:
## Known stack suffix:
## LET letpat COLON sort
## LR(1) items:
exp -> LET letpat COLON sort . EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On EQUAL shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## LET letpat COLON sort EQUAL
## LR(1) items:
exp -> LET letpat COLON sort EQUAL . exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 300
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 300:
## Known stack suffix:
## LET letpat COLON sort EQUAL exp
## LR(1) items:
exp -> LET letpat COLON sort EQUAL exp . IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On IN shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## LET letpat COLON sort EQUAL exp IN
## LR(1) items:
exp -> LET letpat COLON sort EQUAL exp IN . exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 302
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 302:
## Known stack suffix:
## LET letpat COLON sort EQUAL exp IN exp
## LR(1) items:
exp -> LET letpat COLON sort EQUAL exp IN exp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> LET letpat COLON sort EQUAL exp IN exp

State 303:
## Known stack suffix:
## LET id
## LR(1) items:
exp -> LET id . param_list COLON sort EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
exp -> LET id . param_list EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On TYVARIDENT shift to state 124
-- On LPAREN shift to state 125
-- On param_list shift to state 304
-- On param shift to state 288
## Reductions:

State 304:
## Known stack suffix:
## LET id param_list
## LR(1) items:
exp -> LET id param_list . COLON sort EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
exp -> LET id param_list . EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On EQUAL shift to state 305
-- On COLON shift to state 309
## Reductions:

State 305:
## Known stack suffix:
## LET id param_list EQUAL
## LR(1) items:
exp -> LET id param_list EQUAL . exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 306
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 306:
## Known stack suffix:
## LET id param_list EQUAL exp
## LR(1) items:
exp -> LET id param_list EQUAL exp . IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On IN shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## LET id param_list EQUAL exp IN
## LR(1) items:
exp -> LET id param_list EQUAL exp IN . exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 308
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 308:
## Known stack suffix:
## LET id param_list EQUAL exp IN exp
## LR(1) items:
exp -> LET id param_list EQUAL exp IN exp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> LET id param_list EQUAL exp IN exp

State 309:
## Known stack suffix:
## LET id param_list COLON
## LR(1) items:
exp -> LET id param_list COLON . sort EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 310
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 310:
## Known stack suffix:
## LET id param_list COLON sort
## LR(1) items:
exp -> LET id param_list COLON sort . EQUAL exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On EQUAL shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## LET id param_list COLON sort EQUAL
## LR(1) items:
exp -> LET id param_list COLON sort EQUAL . exp IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 312
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 312:
## Known stack suffix:
## LET id param_list COLON sort EQUAL exp
## LR(1) items:
exp -> LET id param_list COLON sort EQUAL exp . IN exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On IN shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## LET id param_list COLON sort EQUAL exp IN
## LR(1) items:
exp -> LET id param_list COLON sort EQUAL exp IN . exp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 314
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 314:
## Known stack suffix:
## LET id param_list COLON sort EQUAL exp IN exp
## LR(1) items:
exp -> LET id param_list COLON sort EQUAL exp IN exp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> LET id param_list COLON sort EQUAL exp IN exp

State 315:
## Known stack suffix:
## apat
## LR(1) items:
letpat -> apat . [ EQUAL COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letpat -> apat

State 316:
## Known stack suffix:
## CEX LPAREN exp
## LR(1) items:
aexp -> CEX LPAREN exp . RPAREN [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## CEX LPAREN exp RPAREN
## LR(1) items:
aexp -> CEX LPAREN exp RPAREN . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> CEX LPAREN exp RPAREN

State 318:
## Known stack suffix:
## LIDENT COLON aexp
## LR(1) items:
aexp -> aexp . STYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . VTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . ASTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . AVTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . BIJ [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
atom -> LIDENT COLON aexp . [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BEGIN ]
## Transitions:
-- On VTYPE shift to state 163
-- On STYPE shift to state 164
-- On BIJ shift to state 165
-- On AVTYPE shift to state 166
-- On ASTYPE shift to state 167
## Reductions:
-- On UIDENT reduce production atom -> LIDENT COLON aexp
-- On STR reduce production atom -> LIDENT COLON aexp
-- On QUALIDENT reduce production atom -> LIDENT COLON aexp
-- On NSET reduce production atom -> LIDENT COLON aexp
-- On LPAREN reduce production atom -> LIDENT COLON aexp
-- On LIDENT reduce production atom -> LIDENT COLON aexp
-- On LANGLE reduce production atom -> LIDENT COLON aexp
-- On INTEGER reduce production atom -> LIDENT COLON aexp
-- On HASH reduce production atom -> LIDENT COLON aexp
-- On GRAMMAR reduce production atom -> LIDENT COLON aexp
-- On DARROW reduce production atom -> LIDENT COLON aexp
-- On CSET reduce production atom -> LIDENT COLON aexp
-- On CHARACTER reduce production atom -> LIDENT COLON aexp
-- On CEX reduce production atom -> LIDENT COLON aexp
-- On BOOLEAN reduce production atom -> LIDENT COLON aexp
-- On BEGIN reduce production atom -> LIDENT COLON aexp

State 319:
## Known stack suffix:
## BAR
## LR(1) items:
rules -> BAR . rule rules2 [ END AND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 79
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On rule shift to state 320
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On atoms shift to state 324
-- On atom shift to state 331
-- On aexp shift to state 335
## Reductions:

State 320:
## Known stack suffix:
## BAR rule
## LR(1) items:
rules -> BAR rule . rules2 [ END AND ]
## Transitions:
-- On BAR shift to state 321
-- On rules2 shift to state 336
## Reductions:
-- On END reduce production rules2 ->
-- On AND reduce production rules2 ->

State 321:
## Known stack suffix:
## BAR
## LR(1) items:
rules2 -> BAR . rule rules2 [ END AND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 79
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On rule shift to state 322
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On atoms shift to state 324
-- On atom shift to state 331
-- On aexp shift to state 335
## Reductions:

State 322:
## Known stack suffix:
## BAR rule
## LR(1) items:
rules2 -> BAR rule . rules2 [ END AND ]
## Transitions:
-- On BAR shift to state 321
-- On rules2 shift to state 323
## Reductions:
-- On END reduce production rules2 ->
-- On AND reduce production rules2 ->

State 323:
## Known stack suffix:
## BAR rule rules2
## LR(1) items:
rules2 -> BAR rule rules2 . [ END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rules2 -> BAR rule rules2

State 324:
## Known stack suffix:
## atoms
## LR(1) items:
rule -> atoms . DARROW aexps [ END BAR AND ]
## Transitions:
-- On DARROW shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## atoms DARROW
## LR(1) items:
rule -> atoms DARROW . aexps [ END BAR AND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexps shift to state 326
-- On aexp shift to state 327
## Reductions:

State 326:
## Known stack suffix:
## atoms DARROW aexps
## LR(1) items:
rule -> atoms DARROW aexps . [ END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> atoms DARROW aexps

State 327:
## Known stack suffix:
## aexp
## LR(1) items:
aexp -> aexp . STYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . VTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . ASTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . AVTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . BIJ [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexps -> aexp . aexps2 [ END BAR AND ]
## Transitions:
-- On VTYPE shift to state 163
-- On UIDENT shift to state 5
-- On STYPE shift to state 164
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BIJ shift to state 165
-- On BEGIN shift to state 135
-- On AVTYPE shift to state 166
-- On ASTYPE shift to state 167
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexps2 shift to state 328
-- On aexp shift to state 329
## Reductions:
-- On END reduce production aexps2 ->
-- On BAR reduce production aexps2 ->
-- On AND reduce production aexps2 ->

State 328:
## Known stack suffix:
## aexp aexps2
## LR(1) items:
aexps -> aexp aexps2 . [ END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexps -> aexp aexps2

State 329:
## Known stack suffix:
## aexp
## LR(1) items:
aexp -> aexp . STYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . VTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . ASTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . AVTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexp -> aexp . BIJ [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR END CSET CHARACTER CEX BOOLEAN BIJ BEGIN BAR AVTYPE ASTYPE AND ]
aexps2 -> aexp . aexps2 [ END BAR AND ]
## Transitions:
-- On VTYPE shift to state 163
-- On UIDENT shift to state 5
-- On STYPE shift to state 164
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BIJ shift to state 165
-- On BEGIN shift to state 135
-- On AVTYPE shift to state 166
-- On ASTYPE shift to state 167
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexps2 shift to state 330
-- On aexp shift to state 329
## Reductions:
-- On END reduce production aexps2 ->
-- On BAR reduce production aexps2 ->
-- On AND reduce production aexps2 ->

State 330:
## Known stack suffix:
## aexp aexps2
## LR(1) items:
aexps2 -> aexp aexps2 . [ END BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexps2 -> aexp aexps2

State 331:
## Known stack suffix:
## atom
## LR(1) items:
atoms -> atom . atoms2 [ DARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 79
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On atoms2 shift to state 332
-- On atom shift to state 333
-- On aexp shift to state 335
## Reductions:
-- On DARROW reduce production atoms2 ->

State 332:
## Known stack suffix:
## atom atoms2
## LR(1) items:
atoms -> atom atoms2 . [ DARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atoms -> atom atoms2

State 333:
## Known stack suffix:
## atom
## LR(1) items:
atoms2 -> atom . atoms2 [ DARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 79
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On atoms2 shift to state 334
-- On atom shift to state 333
-- On aexp shift to state 335
## Reductions:
-- On DARROW reduce production atoms2 ->

State 334:
## Known stack suffix:
## atom atoms2
## LR(1) items:
atoms2 -> atom atoms2 . [ DARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atoms2 -> atom atoms2

State 335:
## Known stack suffix:
## aexp
## LR(1) items:
aexp -> aexp . STYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . VTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . ASTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . AVTYPE [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
aexp -> aexp . BIJ [ VTYPE UIDENT STYPE STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BIJ BEGIN AVTYPE ASTYPE ]
atom -> aexp . [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BEGIN ]
## Transitions:
-- On VTYPE shift to state 163
-- On STYPE shift to state 164
-- On BIJ shift to state 165
-- On AVTYPE shift to state 166
-- On ASTYPE shift to state 167
## Reductions:
-- On UIDENT reduce production atom -> aexp
-- On STR reduce production atom -> aexp
-- On QUALIDENT reduce production atom -> aexp
-- On NSET reduce production atom -> aexp
-- On LPAREN reduce production atom -> aexp
-- On LIDENT reduce production atom -> aexp
-- On LANGLE reduce production atom -> aexp
-- On INTEGER reduce production atom -> aexp
-- On HASH reduce production atom -> aexp
-- On GRAMMAR reduce production atom -> aexp
-- On DARROW reduce production atom -> aexp
-- On CSET reduce production atom -> aexp
-- On CHARACTER reduce production atom -> aexp
-- On CEX reduce production atom -> aexp
-- On BOOLEAN reduce production atom -> aexp
-- On BEGIN reduce production atom -> aexp

State 336:
## Known stack suffix:
## BAR rule rules2
## LR(1) items:
rules -> BAR rule rules2 . [ END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rules -> BAR rule rules2

State 337:
## Known stack suffix:
## LIDENT COLONCOLON EQUAL rules
## LR(1) items:
production -> LIDENT COLONCOLON EQUAL rules . [ END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production production -> LIDENT COLONCOLON EQUAL rules

State 338:
## Known stack suffix:
## rule
## LR(1) items:
rules -> rule . rules2 [ END AND ]
## Transitions:
-- On BAR shift to state 321
-- On rules2 shift to state 339
## Reductions:
-- On END reduce production rules2 ->
-- On AND reduce production rules2 ->

State 339:
## Known stack suffix:
## rule rules2
## LR(1) items:
rules -> rule rules2 . [ END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rules -> rule rules2

State 340:
## Known stack suffix:
## GRAMMAR productions
## LR(1) items:
aexp -> GRAMMAR productions . END [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On END shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## GRAMMAR productions END
## LR(1) items:
aexp -> GRAMMAR productions END . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> GRAMMAR productions END

State 342:
## Known stack suffix:
## production
## LR(1) items:
productions -> production . [ END ]
productions -> production . AND productions [ END ]
## Transitions:
-- On AND shift to state 343
## Reductions:
-- On END reduce production productions -> production

State 343:
## Known stack suffix:
## production AND
## LR(1) items:
productions -> production AND . productions [ END ]
## Transitions:
-- On LIDENT shift to state 76
-- On productions shift to state 344
-- On production shift to state 342
## Reductions:

State 344:
## Known stack suffix:
## production AND productions
## LR(1) items:
productions -> production AND productions . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production productions -> production AND productions

State 345:
## Known stack suffix:
## LPAREN LENS IN QMARK DEQARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
bsort -> LPAREN LENS IN QMARK DEQARROW appexp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 346
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 346:
## Known stack suffix:
## LPAREN LENS IN QMARK DEQARROW appexp RPAREN
## LR(1) items:
bsort -> LPAREN LENS IN QMARK DEQARROW appexp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN LENS IN QMARK DEQARROW appexp RPAREN

State 347:
## Known stack suffix:
## LPAREN LENS IN QMARK DARROW
## LR(1) items:
bsort -> LPAREN LENS IN QMARK DARROW . appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 348
-- On aexp shift to state 162
## Reductions:

State 348:
## Known stack suffix:
## LPAREN LENS IN QMARK DARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
bsort -> LPAREN LENS IN QMARK DARROW appexp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 349
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 349:
## Known stack suffix:
## LPAREN LENS IN QMARK DARROW appexp RPAREN
## LR(1) items:
bsort -> LPAREN LENS IN QMARK DARROW appexp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN LENS IN QMARK DARROW appexp RPAREN

State 350:
## Known stack suffix:
## LPAREN LENS IN appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DEQARROW DARROW CSET CHARACTER CEX BOOLEAN BEGIN ]
bsort -> LPAREN LENS IN appexp . DARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN appexp . DEQARROW QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN appexp . DARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN appexp . DEQARROW appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On DEQARROW shift to state 351
-- On DARROW shift to state 356
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 351:
## Known stack suffix:
## LPAREN LENS IN appexp DEQARROW
## LR(1) items:
bsort -> LPAREN LENS IN appexp DEQARROW . QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN appexp DEQARROW . appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On QMARK shift to state 352
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 354
-- On aexp shift to state 162
## Reductions:

State 352:
## Known stack suffix:
## LPAREN LENS IN appexp DEQARROW QMARK
## LR(1) items:
bsort -> LPAREN LENS IN appexp DEQARROW QMARK . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## LPAREN LENS IN appexp DEQARROW QMARK RPAREN
## LR(1) items:
bsort -> LPAREN LENS IN appexp DEQARROW QMARK RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN LENS IN appexp DEQARROW QMARK RPAREN

State 354:
## Known stack suffix:
## LPAREN LENS IN appexp DEQARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
bsort -> LPAREN LENS IN appexp DEQARROW appexp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 355
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 355:
## Known stack suffix:
## LPAREN LENS IN appexp DEQARROW appexp RPAREN
## LR(1) items:
bsort -> LPAREN LENS IN appexp DEQARROW appexp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN LENS IN appexp DEQARROW appexp RPAREN

State 356:
## Known stack suffix:
## LPAREN LENS IN appexp DARROW
## LR(1) items:
bsort -> LPAREN LENS IN appexp DARROW . QMARK RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN LENS IN appexp DARROW . appexp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On QMARK shift to state 357
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 359
-- On aexp shift to state 162
## Reductions:

State 357:
## Known stack suffix:
## LPAREN LENS IN appexp DARROW QMARK
## LR(1) items:
bsort -> LPAREN LENS IN appexp DARROW QMARK . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 358
## Reductions:

State 358:
## Known stack suffix:
## LPAREN LENS IN appexp DARROW QMARK RPAREN
## LR(1) items:
bsort -> LPAREN LENS IN appexp DARROW QMARK RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN LENS IN appexp DARROW QMARK RPAREN

State 359:
## Known stack suffix:
## LPAREN LENS IN appexp DARROW appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ]
bsort -> LPAREN LENS IN appexp DARROW appexp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 360
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 360:
## Known stack suffix:
## LPAREN LENS IN appexp DARROW appexp RPAREN
## LR(1) items:
bsort -> LPAREN LENS IN appexp DARROW appexp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN LENS IN appexp DARROW appexp RPAREN

State 361:
## Known stack suffix:
## LPAREN sort
## LR(1) items:
bsort -> LPAREN sort . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN sort . WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN sort . WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
datatypesort -> LPAREN sort . COMMA sort_list RPAREN qvar [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On WHERE shift to state 362
-- On RPAREN shift to state 368
-- On COMMA shift to state 369
## Reductions:

State 362:
## Known stack suffix:
## LPAREN sort WHERE
## LR(1) items:
bsort -> LPAREN sort WHERE . BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN sort WHERE . exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On BANG shift to state 363
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 366
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 363:
## Known stack suffix:
## LPAREN sort WHERE BANG
## LR(1) items:
bsort -> LPAREN sort WHERE BANG . exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 364
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 364:
## Known stack suffix:
## LPAREN sort WHERE BANG exp
## LR(1) items:
bsort -> LPAREN sort WHERE BANG exp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## LPAREN sort WHERE BANG exp RPAREN
## LR(1) items:
bsort -> LPAREN sort WHERE BANG exp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN sort WHERE BANG exp RPAREN

State 366:
## Known stack suffix:
## LPAREN sort WHERE exp
## LR(1) items:
bsort -> LPAREN sort WHERE exp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## LPAREN sort WHERE exp RPAREN
## LR(1) items:
bsort -> LPAREN sort WHERE exp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN sort WHERE exp RPAREN

State 368:
## Known stack suffix:
## LPAREN sort RPAREN
## LR(1) items:
bsort -> LPAREN sort RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN sort RPAREN

State 369:
## Known stack suffix:
## LPAREN sort COMMA
## LR(1) items:
datatypesort -> LPAREN sort COMMA . sort_list RPAREN qvar [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort_list shift to state 370
-- On sort shift to state 373
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 370:
## Known stack suffix:
## LPAREN sort COMMA sort_list
## LR(1) items:
datatypesort -> LPAREN sort COMMA sort_list . RPAREN qvar [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## LPAREN sort COMMA sort_list RPAREN
## LR(1) items:
datatypesort -> LPAREN sort COMMA sort_list RPAREN . qvar [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On QUALIDENT shift to state 31
-- On LIDENT shift to state 52
-- On qvar shift to state 372
## Reductions:

State 372:
## Known stack suffix:
## LPAREN sort COMMA sort_list RPAREN qvar
## LR(1) items:
datatypesort -> LPAREN sort COMMA sort_list RPAREN qvar . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatypesort -> LPAREN sort COMMA sort_list RPAREN qvar

State 373:
## Known stack suffix:
## sort
## LR(1) items:
sort_list -> sort . [ RPAREN ]
sort_list -> sort . COMMA sort_list [ RPAREN ]
## Transitions:
-- On COMMA shift to state 374
## Reductions:
-- On RPAREN reduce production sort_list -> sort

State 374:
## Known stack suffix:
## sort COMMA
## LR(1) items:
sort_list -> sort COMMA . sort_list [ RPAREN ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort_list shift to state 375
-- On sort shift to state 373
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 375:
## Known stack suffix:
## sort COMMA sort_list
## LR(1) items:
sort_list -> sort COMMA sort_list . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sort_list -> sort COMMA sort_list

State 376:
## Known stack suffix:
## LPAREN id
## LR(1) items:
bsort -> LPAREN id . COLON sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN id . COLON sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On COLON shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## LPAREN id COLON
## LR(1) items:
bsort -> LPAREN id COLON . sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN id COLON . sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 378
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 378:
## Known stack suffix:
## LPAREN id COLON sort
## LR(1) items:
bsort -> LPAREN id COLON sort . WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN id COLON sort . WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On WHERE shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## LPAREN id COLON sort WHERE
## LR(1) items:
bsort -> LPAREN id COLON sort WHERE . BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN id COLON sort WHERE . exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On BANG shift to state 380
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 383
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 380:
## Known stack suffix:
## LPAREN id COLON sort WHERE BANG
## LR(1) items:
bsort -> LPAREN id COLON sort WHERE BANG . exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 381
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 381:
## Known stack suffix:
## LPAREN id COLON sort WHERE BANG exp
## LR(1) items:
bsort -> LPAREN id COLON sort WHERE BANG exp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## LPAREN id COLON sort WHERE BANG exp RPAREN
## LR(1) items:
bsort -> LPAREN id COLON sort WHERE BANG exp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN id COLON sort WHERE BANG exp RPAREN

State 383:
## Known stack suffix:
## LPAREN id COLON sort WHERE exp
## LR(1) items:
bsort -> LPAREN id COLON sort WHERE exp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## LPAREN id COLON sort WHERE exp RPAREN
## LR(1) items:
bsort -> LPAREN id COLON sort WHERE exp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN id COLON sort WHERE exp RPAREN

State 385:
## Known stack suffix:
## productsort STAR datatypesort
## LR(1) items:
productsort -> productsort STAR datatypesort . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production productsort -> productsort STAR datatypesort

State 386:
## Known stack suffix:
## productsort ARROW
## LR(1) items:
arrowsort -> productsort ARROW . arrowsort [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## productsort ARROW arrowsort
## LR(1) items:
arrowsort -> productsort ARROW arrowsort . [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrowsort -> productsort ARROW arrowsort

State 388:
## Known stack suffix:
## HASH LBRACE sort
## LR(1) items:
aexp -> HASH LBRACE sort . LLIST boomerang_bparser_list [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On LLIST shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## HASH LBRACE sort LLIST
## LR(1) items:
aexp -> HASH LBRACE sort LLIST . boomerang_bparser_list [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On RBRACK shift to state 390
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On commaexp shift to state 391
-- On boomerang_bparser_list shift to state 395
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 390:
## Known stack suffix:
## RBRACK
## LR(1) items:
boomerang_bparser_list -> RBRACK . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boomerang_bparser_list -> RBRACK

State 391:
## Known stack suffix:
## commaexp
## LR(1) items:
boomerang_bparser_list -> commaexp . RBRACK [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
boomerang_bparser_list -> commaexp . SEMI boomerang_bparser_list [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
commaexp -> commaexp . COMMA barexp [ SEMI RBRACK COMMA ]
## Transitions:
-- On SEMI shift to state 392
-- On RBRACK shift to state 394
-- On COMMA shift to state 244
## Reductions:

State 392:
## Known stack suffix:
## commaexp SEMI
## LR(1) items:
boomerang_bparser_list -> commaexp SEMI . boomerang_bparser_list [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On RBRACK shift to state 390
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On commaexp shift to state 391
-- On boomerang_bparser_list shift to state 393
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 393:
## Known stack suffix:
## commaexp SEMI boomerang_bparser_list
## LR(1) items:
boomerang_bparser_list -> commaexp SEMI boomerang_bparser_list . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boomerang_bparser_list -> commaexp SEMI boomerang_bparser_list

State 394:
## Known stack suffix:
## commaexp RBRACK
## LR(1) items:
boomerang_bparser_list -> commaexp RBRACK . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boomerang_bparser_list -> commaexp RBRACK

State 395:
## Known stack suffix:
## HASH LBRACE sort LLIST boomerang_bparser_list
## LR(1) items:
aexp -> HASH LBRACE sort LLIST boomerang_bparser_list . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> HASH LBRACE sort LLIST boomerang_bparser_list

State 396:
## Known stack suffix:
## MATCH composeexp
## LR(1) items:
cexp -> MATCH composeexp . WITH branch_list [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
cexp -> MATCH composeexp . WITH branch_list COLON sort [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
composeexp -> composeexp . SEMI commaexp [ WITH SEMI ]
## Transitions:
-- On WITH shift to state 397
-- On SEMI shift to state 242
## Reductions:

State 397:
## Known stack suffix:
## MATCH composeexp WITH
## LR(1) items:
cexp -> MATCH composeexp WITH . branch_list [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
cexp -> MATCH composeexp WITH . branch_list COLON sort [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On BAR shift to state 398
-- On pat shift to state 399
-- On listpat shift to state 106
-- On lcpat shift to state 114
-- On conpat shift to state 108
-- On branch_list shift to state 407
-- On branch shift to state 410
-- On apat shift to state 112
-- On aapat shift to state 101
## Reductions:

State 398:
## Known stack suffix:
## BAR
## LR(1) items:
branch_list -> BAR . branch branch_list2 [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On pat shift to state 399
-- On listpat shift to state 106
-- On lcpat shift to state 114
-- On conpat shift to state 108
-- On branch shift to state 402
-- On apat shift to state 112
-- On aapat shift to state 101
## Reductions:

State 399:
## Known stack suffix:
## pat
## LR(1) items:
branch -> pat . ARROW equalexp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON BAR ]
pat -> pat . COMMA lcpat [ COMMA ARROW ]
## Transitions:
-- On COMMA shift to state 105
-- On ARROW shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## pat ARROW
## LR(1) items:
branch -> pat ARROW . equalexp [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On equalexp shift to state 401
-- On dotexp shift to state 188
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 401:
## Known stack suffix:
## pat ARROW equalexp
## LR(1) items:
branch -> pat ARROW equalexp . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production branch -> pat ARROW equalexp

State 402:
## Known stack suffix:
## BAR branch
## LR(1) items:
branch_list -> BAR branch . branch_list2 [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
-- On BAR shift to state 403
-- On branch_list2 shift to state 406
## Reductions:
-- On TYPE reduce production branch_list2 ->
-- On TEST reduce production branch_list2 ->
-- On RPAREN reduce production branch_list2 ->
-- On RANGLE reduce production branch_list2 ->
-- On MODULE reduce production branch_list2 ->
-- On LET reduce production branch_list2 ->
-- On IN reduce production branch_list2 ->
-- On EOF reduce production branch_list2 ->
-- On END reduce production branch_list2 ->
-- On DOLLAR reduce production branch_list2 ->
-- On COLON reduce production branch_list2 ->

State 403:
## Known stack suffix:
## BAR
## LR(1) items:
branch_list2 -> BAR . branch branch_list2 [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 93
-- On STR shift to state 88
-- On QUALIDENT shift to state 98
-- On LPAREN shift to state 92
-- On LIDENT shift to state 94
-- On INTEGER shift to state 95
-- On CSET shift to state 102
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On pat shift to state 399
-- On listpat shift to state 106
-- On lcpat shift to state 114
-- On conpat shift to state 108
-- On branch shift to state 404
-- On apat shift to state 112
-- On aapat shift to state 101
## Reductions:

State 404:
## Known stack suffix:
## BAR branch
## LR(1) items:
branch_list2 -> BAR branch . branch_list2 [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
-- On BAR shift to state 403
-- On branch_list2 shift to state 405
## Reductions:
-- On TYPE reduce production branch_list2 ->
-- On TEST reduce production branch_list2 ->
-- On RPAREN reduce production branch_list2 ->
-- On RANGLE reduce production branch_list2 ->
-- On MODULE reduce production branch_list2 ->
-- On LET reduce production branch_list2 ->
-- On IN reduce production branch_list2 ->
-- On EOF reduce production branch_list2 ->
-- On END reduce production branch_list2 ->
-- On DOLLAR reduce production branch_list2 ->
-- On COLON reduce production branch_list2 ->

State 405:
## Known stack suffix:
## BAR branch branch_list2
## LR(1) items:
branch_list2 -> BAR branch branch_list2 . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production branch_list2 -> BAR branch branch_list2

State 406:
## Known stack suffix:
## BAR branch branch_list2
## LR(1) items:
branch_list -> BAR branch branch_list2 . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production branch_list -> BAR branch branch_list2

State 407:
## Known stack suffix:
## MATCH composeexp WITH branch_list
## LR(1) items:
cexp -> MATCH composeexp WITH branch_list . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
cexp -> MATCH composeexp WITH branch_list . COLON sort [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On COLON shift to state 408
## Reductions:
-- On TYPE reduce production cexp -> MATCH composeexp WITH branch_list
-- On TEST reduce production cexp -> MATCH composeexp WITH branch_list
-- On RPAREN reduce production cexp -> MATCH composeexp WITH branch_list
-- On RANGLE reduce production cexp -> MATCH composeexp WITH branch_list
-- On MODULE reduce production cexp -> MATCH composeexp WITH branch_list
-- On LET reduce production cexp -> MATCH composeexp WITH branch_list
-- On IN reduce production cexp -> MATCH composeexp WITH branch_list
-- On EOF reduce production cexp -> MATCH composeexp WITH branch_list
-- On END reduce production cexp -> MATCH composeexp WITH branch_list
-- On DOLLAR reduce production cexp -> MATCH composeexp WITH branch_list

State 408:
## Known stack suffix:
## MATCH composeexp WITH branch_list COLON
## LR(1) items:
cexp -> MATCH composeexp WITH branch_list COLON . sort [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 409
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 409:
## Known stack suffix:
## MATCH composeexp WITH branch_list COLON sort
## LR(1) items:
cexp -> MATCH composeexp WITH branch_list COLON sort . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexp -> MATCH composeexp WITH branch_list COLON sort

State 410:
## Known stack suffix:
## branch
## LR(1) items:
branch_list -> branch . branch_list2 [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
-- On BAR shift to state 403
-- On branch_list2 shift to state 411
## Reductions:
-- On TYPE reduce production branch_list2 ->
-- On TEST reduce production branch_list2 ->
-- On RPAREN reduce production branch_list2 ->
-- On RANGLE reduce production branch_list2 ->
-- On MODULE reduce production branch_list2 ->
-- On LET reduce production branch_list2 ->
-- On IN reduce production branch_list2 ->
-- On EOF reduce production branch_list2 ->
-- On END reduce production branch_list2 ->
-- On DOLLAR reduce production branch_list2 ->
-- On COLON reduce production branch_list2 ->

State 411:
## Known stack suffix:
## branch branch_list2
## LR(1) items:
branch_list -> branch branch_list2 . [ TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production branch_list -> branch branch_list2

State 412:
## Known stack suffix:
## LANGLE exp
## LR(1) items:
matchexp -> LANGLE exp . RANGLE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On RANGLE shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## LANGLE exp RANGLE
## LR(1) items:
matchexp -> LANGLE exp RANGLE . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production matchexp -> LANGLE exp RANGLE

State 414:
## Known stack suffix:
## LANGLE appexp
## LR(1) items:
ampampexp -> appexp . AMPERSAND AMPERSAND ampampexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
ampampexp -> appexp . AMPERSAND AMPERSAND appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
ampexp -> appexp . AMPERSAND appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR AMPERSAND ]
appexp -> appexp . repexp [ UIDENT TILDE STR SEMI RANGLE QUALIDENT PUT NSET MINUS LT LPAREN LIDENT LEQ LANGLE INTEGER HASH GT GRAMMAR GET GEQ EQUAL DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR AMPERSAND ]
dotexp -> appexp . DOT appexp [ SEMI RANGLE MINUS DOT DOLLAR COMMA BARBAR BAR ]
dotexp -> appexp . DOT rewriteexp [ SEMI RANGLE MINUS DOT DOLLAR COMMA BARBAR BAR ]
equalexp -> appexp . EQUAL appexp [ SEMI RANGLE DOLLAR COMMA BARBAR BAR ]
geqexp -> appexp . GEQ appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
gtexp -> appexp . GT appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
infixexp -> appexp . [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
lenscomponentexp -> appexp . GET appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
lenscomponentexp -> appexp . PUT appexp INTO appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
lenscomponentexp -> appexp . CREATE appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
lenscomponentexp -> appexp . CANONIZE appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
lenscomponentexp -> appexp . CHOOSE appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
leqexp -> appexp . LEQ appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
ltexp -> appexp . LT appexp [ SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
matchexp -> LANGLE appexp . COLON exp RANGLE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
rewriteexp -> appexp . DARROW appexp [ SEMI RANGLE MINUS DOT DOLLAR COMMA BARBAR BAR ]
rewriteexp -> appexp . DEQARROW appexp [ SEMI RANGLE MINUS DOT DOLLAR COMMA BARBAR BAR ]
tildeexp -> appexp . TILDE appexp [ TILDE SEMI RANGLE MINUS DOLLAR COMMA BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On TILDE shift to state 193
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On PUT shift to state 195
-- On NSET shift to state 43
-- On LT shift to state 199
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LEQ shift to state 201
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GT shift to state 203
-- On GRAMMAR shift to state 75
-- On GET shift to state 205
-- On GEQ shift to state 207
-- On EQUAL shift to state 209
-- On DOT shift to state 211
-- On DEQARROW shift to state 172
-- On DARROW shift to state 174
-- On CSET shift to state 81
-- On CREATE shift to state 214
-- On COLON shift to state 415
-- On CHOOSE shift to state 216
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On CANONIZE shift to state 218
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On AMPERSAND shift to state 220
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On SEMI reduce production infixexp -> appexp
-- On RANGLE reduce production infixexp -> appexp
-- On MINUS reduce production infixexp -> appexp
-- On DOLLAR reduce production infixexp -> appexp
-- On COMMA reduce production infixexp -> appexp
-- On BARBAR reduce production infixexp -> appexp
-- On BAR reduce production infixexp -> appexp

State 415:
## Known stack suffix:
## LANGLE appexp COLON
## LR(1) items:
matchexp -> LANGLE appexp COLON . exp RANGLE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 416
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 416:
## Known stack suffix:
## LANGLE appexp COLON exp
## LR(1) items:
matchexp -> LANGLE appexp COLON exp . RANGLE [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On RANGLE shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## LANGLE appexp COLON exp RANGLE
## LR(1) items:
matchexp -> LANGLE appexp COLON exp RANGLE . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production matchexp -> LANGLE appexp COLON exp RANGLE

State 418:
## Known stack suffix:
## MINUS appexp
## LR(1) items:
appexp -> appexp . repexp [ WITH UIDENT TYPE TEST STR SEMI RPAREN RBRACK RANGLE QUALIDENT NSET MODULE MINUS LPAREN LIDENT LET LANGLE INTEGER IN HASH GRAMMAR EQUAL EOF END DOLLAR CSET COMMA COLON CHARACTER CEX BOOLEAN BEGIN BARBAR BAR ]
minusexp -> MINUS appexp . [ WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On WITH reduce production minusexp -> MINUS appexp
-- On TYPE reduce production minusexp -> MINUS appexp
-- On TEST reduce production minusexp -> MINUS appexp
-- On SEMI reduce production minusexp -> MINUS appexp
-- On RPAREN reduce production minusexp -> MINUS appexp
-- On RBRACK reduce production minusexp -> MINUS appexp
-- On RANGLE reduce production minusexp -> MINUS appexp
-- On MODULE reduce production minusexp -> MINUS appexp
-- On MINUS reduce production minusexp -> MINUS appexp
-- On LET reduce production minusexp -> MINUS appexp
-- On IN reduce production minusexp -> MINUS appexp
-- On EQUAL reduce production minusexp -> MINUS appexp
-- On EOF reduce production minusexp -> MINUS appexp
-- On END reduce production minusexp -> MINUS appexp
-- On DOLLAR reduce production minusexp -> MINUS appexp
-- On COMMA reduce production minusexp -> MINUS appexp
-- On COLON reduce production minusexp -> MINUS appexp
-- On BARBAR reduce production minusexp -> MINUS appexp
-- On BAR reduce production minusexp -> MINUS appexp

State 419:
## Known stack suffix:
## LPAREN exp
## LR(1) items:
aexp -> LPAREN exp . RPAREN [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## LPAREN exp RPAREN
## LR(1) items:
aexp -> LPAREN exp RPAREN . [ WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aexp -> LPAREN exp RPAREN

State 421:
## Known stack suffix:
## PERM LPAREN listexp1
## LR(1) items:
appexp -> PERM LPAREN listexp1 . WITH repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On WITH shift to state 422
## Reductions:

State 422:
## Known stack suffix:
## PERM LPAREN listexp1 WITH
## LR(1) items:
appexp -> PERM LPAREN listexp1 WITH . repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 423
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 423:
## Known stack suffix:
## PERM LPAREN listexp1 WITH repexp
## LR(1) items:
appexp -> PERM LPAREN listexp1 WITH repexp . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production appexp -> PERM LPAREN listexp1 WITH repexp

State 424:
## Known stack suffix:
## appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RPAREN QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET COMMA CHARACTER CEX BOOLEAN BEGIN ]
listexp1 -> appexp . RPAREN [ WITH ]
listexp1 -> appexp . COMMA listexp1 [ WITH ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RPAREN shift to state 425
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On COMMA shift to state 426
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 425:
## Known stack suffix:
## appexp RPAREN
## LR(1) items:
listexp1 -> appexp RPAREN . [ WITH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listexp1 -> appexp RPAREN

State 426:
## Known stack suffix:
## appexp COMMA
## LR(1) items:
listexp1 -> appexp COMMA . listexp1 [ WITH ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On RPAREN shift to state 42
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On listexp1 shift to state 427
-- On appexp shift to state 424
-- On aexp shift to state 162
## Reductions:

State 427:
## Known stack suffix:
## appexp COMMA listexp1
## LR(1) items:
listexp1 -> appexp COMMA listexp1 . [ WITH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listexp1 -> appexp COMMA listexp1

State 428:
## Known stack suffix:
## PROJECT appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ARROW ]
appexp -> PROJECT appexp . ARROW repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On ARROW shift to state 429
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 429:
## Known stack suffix:
## PROJECT appexp ARROW
## LR(1) items:
appexp -> PROJECT appexp ARROW . repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 430
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 430:
## Known stack suffix:
## PROJECT appexp ARROW repexp
## LR(1) items:
appexp -> PROJECT appexp ARROW repexp . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production appexp -> PROJECT appexp ARROW repexp

State 431:
## Known stack suffix:
## SQUASH appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN ARROW ]
appexp -> SQUASH appexp . ARROW repexp USING repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On ARROW shift to state 432
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 432:
## Known stack suffix:
## SQUASH appexp ARROW
## LR(1) items:
appexp -> SQUASH appexp ARROW . repexp USING repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 433
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 433:
## Known stack suffix:
## SQUASH appexp ARROW repexp
## LR(1) items:
appexp -> SQUASH appexp ARROW repexp . USING repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On USING shift to state 434
## Reductions:

State 434:
## Known stack suffix:
## SQUASH appexp ARROW repexp USING
## LR(1) items:
appexp -> SQUASH appexp ARROW repexp USING . repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 435
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 435:
## Known stack suffix:
## SQUASH appexp ARROW repexp USING repexp
## LR(1) items:
appexp -> SQUASH appexp ARROW repexp USING repexp . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production appexp -> SQUASH appexp ARROW repexp USING repexp

State 436:
## Known stack suffix:
## SYNTH appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DEQARROW CSET CHARACTER CEX BOOLEAN BEGIN ]
appexp -> SYNTH appexp . DEQARROW repexp USING LBRACE listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
appexp -> SYNTH appexp . DEQARROW repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On DEQARROW shift to state 437
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 437:
## Known stack suffix:
## SYNTH appexp DEQARROW
## LR(1) items:
appexp -> SYNTH appexp DEQARROW . repexp USING LBRACE listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
appexp -> SYNTH appexp DEQARROW . repexp [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 438
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 438:
## Known stack suffix:
## SYNTH appexp DEQARROW repexp
## LR(1) items:
appexp -> SYNTH appexp DEQARROW repexp . USING LBRACE listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
appexp -> SYNTH appexp DEQARROW repexp . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On USING shift to state 439
## Reductions:
-- On WITH reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On UIDENT reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On TYPE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On TILDE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On TEST reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On STR reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On SEMI reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On RPAREN reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On RBRACK reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On RBRACE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On RANGLE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On QUALIDENT reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On PUT reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On NSET reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On MODULE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On MINUS reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On LT reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On LPAREN reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On LIDENT reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On LET reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On LEQ reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On LANGLE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On INTO reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On INTEGER reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On IN reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On HASH reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On GT reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On GRAMMAR reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On GET reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On GEQ reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On EQUAL reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On EOF reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On END reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On DOT reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On DOLLAR reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On DEQARROW reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On DARROW reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On CSET reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On CREATE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On COMMA reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On COLON reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On CHOOSE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On CHARACTER reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On CEX reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On CANONIZE reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On BOOLEAN reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On BEGIN reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On BARBAR reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On BAR reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On ARROW reduce production appexp -> SYNTH appexp DEQARROW repexp
-- On AMPERSAND reduce production appexp -> SYNTH appexp DEQARROW repexp

State 439:
## Known stack suffix:
## SYNTH appexp DEQARROW repexp USING
## LR(1) items:
appexp -> SYNTH appexp DEQARROW repexp USING . LBRACE listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On LBRACE shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## SYNTH appexp DEQARROW repexp USING LBRACE
## LR(1) items:
appexp -> SYNTH appexp DEQARROW repexp USING LBRACE . listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On RBRACE shift to state 441
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On listexp2 shift to state 442
-- On appexp shift to state 443
-- On aexp shift to state 162
## Reductions:

State 441:
## Known stack suffix:
## RBRACE
## LR(1) items:
listexp2 -> RBRACE . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listexp2 -> RBRACE

State 442:
## Known stack suffix:
## SYNTH appexp DEQARROW repexp USING LBRACE listexp2
## LR(1) items:
appexp -> SYNTH appexp DEQARROW repexp USING LBRACE listexp2 . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production appexp -> SYNTH appexp DEQARROW repexp USING LBRACE listexp2

State 443:
## Known stack suffix:
## appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT STR RBRACE QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET COMMA CHARACTER CEX BOOLEAN BEGIN ]
listexp2 -> appexp . RBRACE [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
listexp2 -> appexp . COMMA listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On RBRACE shift to state 444
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On COMMA shift to state 445
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:

State 444:
## Known stack suffix:
## appexp RBRACE
## LR(1) items:
listexp2 -> appexp RBRACE . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listexp2 -> appexp RBRACE

State 445:
## Known stack suffix:
## appexp COMMA
## LR(1) items:
listexp2 -> appexp COMMA . listexp2 [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On RBRACE shift to state 441
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On listexp2 shift to state 446
-- On appexp shift to state 443
-- On aexp shift to state 162
## Reductions:

State 446:
## Known stack suffix:
## appexp COMMA listexp2
## LR(1) items:
listexp2 -> appexp COMMA listexp2 . [ WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production listexp2 -> appexp COMMA listexp2

State 447:
## Known stack suffix:
## LPAREN STRING IN exp
## LR(1) items:
bsort -> LPAREN STRING IN exp . RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On RPAREN shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## LPAREN STRING IN exp RPAREN
## LR(1) items:
bsort -> LPAREN STRING IN exp RPAREN . [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bsort -> LPAREN STRING IN exp RPAREN

State 449:
## Known stack suffix:
## LPAREN id
## LR(1) items:
arrowsort -> LPAREN id . COLON productsort ARROW arrowsort RPAREN [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
bsort -> LPAREN id . COLON sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN id . COLON sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On COLON shift to state 450
## Reductions:

State 450:
## Known stack suffix:
## LPAREN id COLON
## LR(1) items:
arrowsort -> LPAREN id COLON . productsort ARROW arrowsort RPAREN [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
bsort -> LPAREN id COLON . sort WHERE BANG exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
bsort -> LPAREN id COLON . sort WHERE exp RPAREN [ WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 378
-- On qvar shift to state 66
-- On productsort shift to state 451
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 451:
## Known stack suffix:
## LPAREN id COLON productsort
## LR(1) items:
arrowsort -> productsort . ARROW arrowsort [ WHERE ]
arrowsort -> LPAREN id COLON productsort . ARROW arrowsort RPAREN [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
arrowsort -> productsort . [ WHERE ]
productsort -> productsort . STAR datatypesort [ WHERE STAR ARROW ]
## Transitions:
-- On STAR shift to state 68
-- On ARROW shift to state 452
## Reductions:
-- On WHERE reduce production arrowsort -> productsort

State 452:
## Known stack suffix:
## LPAREN id COLON productsort ARROW
## LR(1) items:
arrowsort -> productsort ARROW . arrowsort [ WHERE ]
arrowsort -> LPAREN id COLON productsort ARROW . arrowsort RPAREN [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 453
## Reductions:

State 453:
## Known stack suffix:
## LPAREN id COLON productsort ARROW arrowsort
## LR(1) items:
arrowsort -> productsort ARROW arrowsort . [ WHERE ]
arrowsort -> LPAREN id COLON productsort ARROW arrowsort . RPAREN [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
-- On RPAREN shift to state 454
## Reductions:
-- On WHERE reduce production arrowsort -> productsort ARROW arrowsort

State 454:
## Known stack suffix:
## LPAREN id COLON productsort ARROW arrowsort RPAREN
## LR(1) items:
arrowsort -> LPAREN id COLON productsort ARROW arrowsort RPAREN . [ WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrowsort -> LPAREN id COLON productsort ARROW arrowsort RPAREN

State 455:
## Known stack suffix:
## UIDENT OF sort
## LR(1) items:
dtsort -> UIDENT OF sort . [ TYPE TEST MODULE LET EOF END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dtsort -> UIDENT OF sort

State 456:
## Known stack suffix:
## TYPE tyvar_list LIDENT EQUAL dtsort_list
## LR(1) items:
decls -> TYPE tyvar_list LIDENT EQUAL dtsort_list . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 499
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 457:
## Known stack suffix:
## TEST
## LR(1) items:
decls -> TEST . infixexp EQUAL test_res_exp decls [ EOF END ]
decls -> TEST . infixexp COLON test_res_sort decls [ EOF END ]
decls -> TEST . infixexp COLON ERROR decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 458
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On dotexp shift to state 188
-- On appexp shift to state 498
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 458:
## Known stack suffix:
## TEST infixexp
## LR(1) items:
decls -> TEST infixexp . EQUAL test_res_exp decls [ EOF END ]
decls -> TEST infixexp . COLON test_res_sort decls [ EOF END ]
decls -> TEST infixexp . COLON ERROR decls [ EOF END ]
minusexp -> infixexp . MINUS appexp [ MINUS EQUAL COLON ]
## Transitions:
-- On MINUS shift to state 183
-- On EQUAL shift to state 459
-- On COLON shift to state 491
## Reductions:

State 459:
## Known stack suffix:
## TEST infixexp EQUAL
## LR(1) items:
decls -> TEST infixexp EQUAL . test_res_exp decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On QMARK shift to state 460
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On ERROR shift to state 461
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On test_res_exp shift to state 462
-- On repexp shift to state 157
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On appexp shift to state 490
-- On aexp shift to state 162
## Reductions:

State 460:
## Known stack suffix:
## QMARK
## LR(1) items:
test_res_exp -> QMARK . [ TYPE TEST MODULE LET EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production test_res_exp -> QMARK

State 461:
## Known stack suffix:
## ERROR
## LR(1) items:
test_res_exp -> ERROR . [ TYPE TEST MODULE LET EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production test_res_exp -> ERROR

State 462:
## Known stack suffix:
## TEST infixexp EQUAL test_res_exp
## LR(1) items:
decls -> TEST infixexp EQUAL test_res_exp . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 489
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 463:
## Known stack suffix:
## MODULE
## LR(1) items:
decls -> MODULE . UIDENT EQUAL decls END decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 464
## Reductions:

State 464:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
decls -> MODULE UIDENT . EQUAL decls END decls [ EOF END ]
## Transitions:
-- On EQUAL shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## MODULE UIDENT EQUAL
## LR(1) items:
decls -> MODULE UIDENT EQUAL . decls END decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 486
## Reductions:
-- On END reduce production decls ->

State 466:
## Known stack suffix:
## LET
## LR(1) items:
decls -> LET . id param_list COLON sort EQUAL exp decls [ EOF END ]
decls -> LET . id param_list EQUAL exp decls [ EOF END ]
decls -> LET . letpat COLON sort EQUAL exp decls [ EOF END ]
decls -> LET . letpat EQUAL exp decls [ EOF END ]
## Transitions:
-- On UNDERLINE shift to state 86
-- On UIDENT shift to state 87
-- On STR shift to state 88
-- On QUALIDENT shift to state 89
-- On LPAREN shift to state 92
-- On LIDENT shift to state 120
-- On INTEGER shift to state 95
-- On CEX shift to state 96
-- On BOOLEAN shift to state 99
-- On letpat shift to state 467
-- On id shift to state 476
-- On apat shift to state 315
-- On aapat shift to state 101
## Reductions:

State 467:
## Known stack suffix:
## LET letpat
## LR(1) items:
decls -> LET letpat . COLON sort EQUAL exp decls [ EOF END ]
decls -> LET letpat . EQUAL exp decls [ EOF END ]
letpat -> letpat . COMMA lcpat [ EQUAL COMMA COLON ]
## Transitions:
-- On EQUAL shift to state 468
-- On COMMA shift to state 295
-- On COLON shift to state 471
## Reductions:

State 468:
## Known stack suffix:
## LET letpat EQUAL
## LR(1) items:
decls -> LET letpat EQUAL . exp decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 469
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 469:
## Known stack suffix:
## LET letpat EQUAL exp
## LR(1) items:
decls -> LET letpat EQUAL exp . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 470
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 470:
## Known stack suffix:
## LET letpat EQUAL exp decls
## LR(1) items:
decls -> LET letpat EQUAL exp decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> LET letpat EQUAL exp decls

State 471:
## Known stack suffix:
## LET letpat COLON
## LR(1) items:
decls -> LET letpat COLON . sort EQUAL exp decls [ EOF END ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 472
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 472:
## Known stack suffix:
## LET letpat COLON sort
## LR(1) items:
decls -> LET letpat COLON sort . EQUAL exp decls [ EOF END ]
## Transitions:
-- On EQUAL shift to state 473
## Reductions:

State 473:
## Known stack suffix:
## LET letpat COLON sort EQUAL
## LR(1) items:
decls -> LET letpat COLON sort EQUAL . exp decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 474
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 474:
## Known stack suffix:
## LET letpat COLON sort EQUAL exp
## LR(1) items:
decls -> LET letpat COLON sort EQUAL exp . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 475
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 475:
## Known stack suffix:
## LET letpat COLON sort EQUAL exp decls
## LR(1) items:
decls -> LET letpat COLON sort EQUAL exp decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> LET letpat COLON sort EQUAL exp decls

State 476:
## Known stack suffix:
## LET id
## LR(1) items:
decls -> LET id . param_list COLON sort EQUAL exp decls [ EOF END ]
decls -> LET id . param_list EQUAL exp decls [ EOF END ]
## Transitions:
-- On TYVARIDENT shift to state 124
-- On LPAREN shift to state 125
-- On param_list shift to state 477
-- On param shift to state 288
## Reductions:

State 477:
## Known stack suffix:
## LET id param_list
## LR(1) items:
decls -> LET id param_list . COLON sort EQUAL exp decls [ EOF END ]
decls -> LET id param_list . EQUAL exp decls [ EOF END ]
## Transitions:
-- On EQUAL shift to state 478
-- On COLON shift to state 481
## Reductions:

State 478:
## Known stack suffix:
## LET id param_list EQUAL
## LR(1) items:
decls -> LET id param_list EQUAL . exp decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 479
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 479:
## Known stack suffix:
## LET id param_list EQUAL exp
## LR(1) items:
decls -> LET id param_list EQUAL exp . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 480
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 480:
## Known stack suffix:
## LET id param_list EQUAL exp decls
## LR(1) items:
decls -> LET id param_list EQUAL exp decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> LET id param_list EQUAL exp decls

State 481:
## Known stack suffix:
## LET id param_list COLON
## LR(1) items:
decls -> LET id param_list COLON . sort EQUAL exp decls [ EOF END ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On sort shift to state 482
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 482:
## Known stack suffix:
## LET id param_list COLON sort
## LR(1) items:
decls -> LET id param_list COLON sort . EQUAL exp decls [ EOF END ]
## Transitions:
-- On EQUAL shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## LET id param_list COLON sort EQUAL
## LR(1) items:
decls -> LET id param_list COLON sort EQUAL . exp decls [ EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On SYNTH shift to state 36
-- On STR shift to state 37
-- On SQUASH shift to state 38
-- On QUALIDENT shift to state 6
-- On PROJECT shift to state 39
-- On PERM shift to state 40
-- On NSET shift to state 43
-- On MINUS shift to state 46
-- On MATCH shift to state 48
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LET shift to state 85
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On FUN shift to state 123
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On tildeexp shift to state 155
-- On rewriteexp shift to state 168
-- On repexp shift to state 157
-- On qid shift to state 158
-- On obarexp shift to state 176
-- On minusexp shift to state 178
-- On matchexp shift to state 159
-- On ltexp shift to state 179
-- On leqexp shift to state 180
-- On lenscomponentexp shift to state 181
-- On infixexp shift to state 182
-- On gtexp shift to state 185
-- On geqexp shift to state 186
-- On funexp shift to state 230
-- On exp shift to state 484
-- On equalexp shift to state 233
-- On dotexp shift to state 188
-- On dbarexp shift to state 238
-- On composeexp shift to state 241
-- On commaexp shift to state 247
-- On cexp shift to state 248
-- On barexp shift to state 246
-- On appexp shift to state 192
-- On ampexp shift to state 226
-- On ampampexp shift to state 229
-- On aexp shift to state 162
## Reductions:

State 484:
## Known stack suffix:
## LET id param_list COLON sort EQUAL exp
## LR(1) items:
decls -> LET id param_list COLON sort EQUAL exp . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 485
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 485:
## Known stack suffix:
## LET id param_list COLON sort EQUAL exp decls
## LR(1) items:
decls -> LET id param_list COLON sort EQUAL exp decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> LET id param_list COLON sort EQUAL exp decls

State 486:
## Known stack suffix:
## MODULE UIDENT EQUAL decls
## LR(1) items:
decls -> MODULE UIDENT EQUAL decls . END decls [ EOF END ]
## Transitions:
-- On END shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## MODULE UIDENT EQUAL decls END
## LR(1) items:
decls -> MODULE UIDENT EQUAL decls END . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 488
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 488:
## Known stack suffix:
## MODULE UIDENT EQUAL decls END decls
## LR(1) items:
decls -> MODULE UIDENT EQUAL decls END decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> MODULE UIDENT EQUAL decls END decls

State 489:
## Known stack suffix:
## TEST infixexp EQUAL test_res_exp decls
## LR(1) items:
decls -> TEST infixexp EQUAL test_res_exp decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> TEST infixexp EQUAL test_res_exp decls

State 490:
## Known stack suffix:
## appexp
## LR(1) items:
appexp -> appexp . repexp [ UIDENT TYPE TEST STR QUALIDENT NSET MODULE LPAREN LIDENT LET LANGLE INTEGER HASH GRAMMAR EOF END CSET CHARACTER CEX BOOLEAN BEGIN ]
test_res_exp -> appexp . [ TYPE TEST MODULE LET EOF END ]
## Transitions:
-- On UIDENT shift to state 5
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On NSET shift to state 43
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GRAMMAR shift to state 75
-- On CSET shift to state 81
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On TYPE reduce production test_res_exp -> appexp
-- On TEST reduce production test_res_exp -> appexp
-- On MODULE reduce production test_res_exp -> appexp
-- On LET reduce production test_res_exp -> appexp
-- On EOF reduce production test_res_exp -> appexp
-- On END reduce production test_res_exp -> appexp

State 491:
## Known stack suffix:
## TEST infixexp COLON
## LR(1) items:
decls -> TEST infixexp COLON . test_res_sort decls [ EOF END ]
decls -> TEST infixexp COLON . ERROR decls [ EOF END ]
## Transitions:
-- On UNIT shift to state 24
-- On TYVARIDENT shift to state 12
-- On STRINGPREFS shift to state 25
-- On STRINGLISTPREFS shift to state 26
-- On STRING shift to state 27
-- On SKELETONS shift to state 28
-- On RESOURCES shift to state 29
-- On REGEXP shift to state 30
-- On QUALIDENT shift to state 31
-- On QMARK shift to state 492
-- On LPAREN shift to state 32
-- On LIDENT shift to state 52
-- On LENS shift to state 53
-- On INTPREFS shift to state 54
-- On INT shift to state 55
-- On FORALL shift to state 56
-- On ERROR shift to state 493
-- On CHAR shift to state 59
-- On CANONIZER shift to state 60
-- On BOOLPREFS shift to state 61
-- On BOOL shift to state 62
-- On AREGEXP shift to state 63
-- On tyvar shift to state 64
-- On test_res_sort shift to state 495
-- On sort shift to state 497
-- On qvar shift to state 66
-- On productsort shift to state 67
-- On datatypesort shift to state 149
-- On bsort shift to state 150
-- On asort shift to state 152
-- On arrowsort shift to state 153
## Reductions:

State 492:
## Known stack suffix:
## QMARK
## LR(1) items:
test_res_sort -> QMARK . [ TYPE TEST MODULE LET EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production test_res_sort -> QMARK

State 493:
## Known stack suffix:
## TEST infixexp COLON ERROR
## LR(1) items:
decls -> TEST infixexp COLON ERROR . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 494
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 494:
## Known stack suffix:
## TEST infixexp COLON ERROR decls
## LR(1) items:
decls -> TEST infixexp COLON ERROR decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> TEST infixexp COLON ERROR decls

State 495:
## Known stack suffix:
## TEST infixexp COLON test_res_sort
## LR(1) items:
decls -> TEST infixexp COLON test_res_sort . decls [ EOF END ]
## Transitions:
-- On TYPE shift to state 11
-- On TEST shift to state 457
-- On MODULE shift to state 463
-- On LET shift to state 466
-- On decls shift to state 496
## Reductions:
-- On EOF reduce production decls ->
-- On END reduce production decls ->

State 496:
## Known stack suffix:
## TEST infixexp COLON test_res_sort decls
## LR(1) items:
decls -> TEST infixexp COLON test_res_sort decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> TEST infixexp COLON test_res_sort decls

State 497:
## Known stack suffix:
## sort
## LR(1) items:
test_res_sort -> sort . [ TYPE TEST MODULE LET EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production test_res_sort -> sort

State 498:
## Known stack suffix:
## appexp
## LR(1) items:
ampampexp -> appexp . AMPERSAND AMPERSAND ampampexp [ MINUS EQUAL COLON ]
ampampexp -> appexp . AMPERSAND AMPERSAND appexp [ MINUS EQUAL COLON ]
ampexp -> appexp . AMPERSAND appexp [ MINUS EQUAL COLON AMPERSAND ]
appexp -> appexp . repexp [ UIDENT TILDE STR QUALIDENT PUT NSET MINUS LT LPAREN LIDENT LEQ LANGLE INTEGER HASH GT GRAMMAR GET GEQ EQUAL DOT DEQARROW DARROW CSET CREATE COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN AMPERSAND ]
dotexp -> appexp . DOT appexp [ MINUS EQUAL DOT COLON ]
dotexp -> appexp . DOT rewriteexp [ MINUS EQUAL DOT COLON ]
geqexp -> appexp . GEQ appexp [ MINUS EQUAL COLON ]
gtexp -> appexp . GT appexp [ MINUS EQUAL COLON ]
infixexp -> appexp . [ MINUS EQUAL COLON ]
lenscomponentexp -> appexp . GET appexp [ MINUS EQUAL COLON ]
lenscomponentexp -> appexp . PUT appexp INTO appexp [ MINUS EQUAL COLON ]
lenscomponentexp -> appexp . CREATE appexp [ MINUS EQUAL COLON ]
lenscomponentexp -> appexp . CANONIZE appexp [ MINUS EQUAL COLON ]
lenscomponentexp -> appexp . CHOOSE appexp [ MINUS EQUAL COLON ]
leqexp -> appexp . LEQ appexp [ MINUS EQUAL COLON ]
ltexp -> appexp . LT appexp [ MINUS EQUAL COLON ]
rewriteexp -> appexp . DARROW appexp [ MINUS EQUAL DOT COLON ]
rewriteexp -> appexp . DEQARROW appexp [ MINUS EQUAL DOT COLON ]
tildeexp -> appexp . TILDE appexp [ TILDE MINUS EQUAL COLON ]
## Transitions:
-- On UIDENT shift to state 5
-- On TILDE shift to state 193
-- On STR shift to state 37
-- On QUALIDENT shift to state 6
-- On PUT shift to state 195
-- On NSET shift to state 43
-- On LT shift to state 199
-- On LPAREN shift to state 44
-- On LIDENT shift to state 7
-- On LEQ shift to state 201
-- On LANGLE shift to state 47
-- On INTEGER shift to state 49
-- On HASH shift to state 50
-- On GT shift to state 203
-- On GRAMMAR shift to state 75
-- On GET shift to state 205
-- On GEQ shift to state 207
-- On DOT shift to state 211
-- On DEQARROW shift to state 172
-- On DARROW shift to state 174
-- On CSET shift to state 81
-- On CREATE shift to state 214
-- On CHOOSE shift to state 216
-- On CHARACTER shift to state 82
-- On CEX shift to state 83
-- On CANONIZE shift to state 218
-- On BOOLEAN shift to state 134
-- On BEGIN shift to state 135
-- On AMPERSAND shift to state 220
-- On tyexp shift to state 136
-- On repexp shift to state 161
-- On qid shift to state 158
-- On matchexp shift to state 159
-- On aexp shift to state 162
## Reductions:
-- On MINUS reduce production infixexp -> appexp
-- On EQUAL reduce production infixexp -> appexp
-- On COLON reduce production infixexp -> appexp

State 499:
## Known stack suffix:
## TYPE tyvar_list LIDENT EQUAL dtsort_list decls
## LR(1) items:
decls -> TYPE tyvar_list LIDENT EQUAL dtsort_list decls . [ EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decls -> TYPE tyvar_list LIDENT EQUAL dtsort_list decls

State 500:
## Known stack suffix:
## dtsort
## LR(1) items:
dtsort_list -> dtsort . dtsort_list2 [ TYPE TEST MODULE LET EOF END ]
## Transitions:
-- On BAR shift to state 501
-- On dtsort_list2 shift to state 504
## Reductions:
-- On TYPE reduce production dtsort_list2 ->
-- On TEST reduce production dtsort_list2 ->
-- On MODULE reduce production dtsort_list2 ->
-- On LET reduce production dtsort_list2 ->
-- On EOF reduce production dtsort_list2 ->
-- On END reduce production dtsort_list2 ->

State 501:
## Known stack suffix:
## BAR
## LR(1) items:
dtsort_list2 -> BAR . dtsort dtsort_list2 [ TYPE TEST MODULE LET EOF END ]
## Transitions:
-- On UIDENT shift to state 22
-- On dtsort shift to state 502
## Reductions:

State 502:
## Known stack suffix:
## BAR dtsort
## LR(1) items:
dtsort_list2 -> BAR dtsort . dtsort_list2 [ TYPE TEST MODULE LET EOF END ]
## Transitions:
-- On BAR shift to state 501
-- On dtsort_list2 shift to state 503
## Reductions:
-- On TYPE reduce production dtsort_list2 ->
-- On TEST reduce production dtsort_list2 ->
-- On MODULE reduce production dtsort_list2 ->
-- On LET reduce production dtsort_list2 ->
-- On EOF reduce production dtsort_list2 ->
-- On END reduce production dtsort_list2 ->

State 503:
## Known stack suffix:
## BAR dtsort dtsort_list2
## LR(1) items:
dtsort_list2 -> BAR dtsort dtsort_list2 . [ TYPE TEST MODULE LET EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dtsort_list2 -> BAR dtsort dtsort_list2

State 504:
## Known stack suffix:
## dtsort dtsort_list2
## LR(1) items:
dtsort_list -> dtsort dtsort_list2 . [ TYPE TEST MODULE LET EOF END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dtsort_list -> dtsort dtsort_list2

State 505:
## Known stack suffix:
## tyvar
## LR(1) items:
tyvar_list -> tyvar . [ LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyvar_list -> tyvar

State 506:
## Known stack suffix:
## MODULE UIDENT EQUAL opens decls
## LR(1) items:
modl -> MODULE UIDENT EQUAL opens decls . EOF [ # ]
## Transitions:
-- On EOF shift to state 507
## Reductions:

State 507:
## Known stack suffix:
## MODULE UIDENT EQUAL opens decls EOF
## LR(1) items:
modl -> MODULE UIDENT EQUAL opens decls EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production modl -> MODULE UIDENT EQUAL opens decls EOF

State 508:
## Known stack suffix:
## modl
## LR(1) items:
modl' -> modl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept modl

State 509:
## Known stack suffix:
##
## LR(1) items:
qid' -> . qid [ # ]
## Transitions:
-- On UIDENT shift to state 510
-- On QUALIDENT shift to state 511
-- On LIDENT shift to state 512
-- On qid shift to state 513
## Reductions:

State 510:
## Known stack suffix:
## UIDENT
## LR(1) items:
qid -> UIDENT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production qid -> UIDENT

State 511:
## Known stack suffix:
## QUALIDENT
## LR(1) items:
qid -> QUALIDENT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production qid -> QUALIDENT

State 512:
## Known stack suffix:
## LIDENT
## LR(1) items:
qid -> LIDENT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production qid -> LIDENT

State 513:
## Known stack suffix:
## qid
## LR(1) items:
qid' -> qid . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept qid

State 514:
## Known stack suffix:
##
## LR(1) items:
uid' -> . uid [ # ]
## Transitions:
-- On UIDENT shift to state 515
-- On uid shift to state 516
## Reductions:

State 515:
## Known stack suffix:
## UIDENT
## LR(1) items:
uid -> UIDENT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production uid -> UIDENT

State 516:
## Known stack suffix:
## uid
## LR(1) items:
uid' -> uid . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept uid

