Note: the nonterminal symbol list (from boomerang-bparser.mly) is renamed boomerang_bparser_list.
File "boomerang-bparser.mly", line 207, characters 54-63:
Warning: the token BACKSLASH is unused.
File "boomerang-bparser.mly", line 203, characters 24-29:
Warning: the token FLOAT is unused.
File "boomerang-bparser.mly", line 208, characters 70-73:
Warning: the token HAT is unused.
File "boomerang-bparser.mly", line 204, characters 41-47:
Warning: the token LBRACK is unused.
File "boomerang-bparser.mly", line 208, characters 21-25:
Warning: the token RLUS is unused.
File "boomerang-bparser.mly", line 207, characters 64-69:
Warning: the token SLASH is unused.
Grammar has 75 nonterminal symbols, among which 3 start symbols.
Grammar has 100 terminal symbols.
Grammar has 249 productions.
nullable(uid) = false
nullable(tyvar_list2) = false
nullable(tyvar_list) = true
nullable(tyvar) = false
nullable(tyexp) = false
nullable(tildeexp) = false
nullable(test_res_sort) = false
nullable(test_res_exp) = false
nullable(sort_list) = false
nullable(sort) = false
nullable(rules2) = true
nullable(rules) = false
nullable(rule) = false
nullable(rewriteexp) = false
nullable(repexp) = false
nullable(rep) = false
nullable(qvar) = false
nullable(qid) = false
nullable(productsort) = false
nullable(productions) = false
nullable(production) = false
nullable(pat) = false
nullable(param_list2) = true
nullable(param_list) = false
nullable(param) = false
nullable(opens) = true
nullable(obarexp) = false
nullable(modl) = false
nullable(minusexp) = false
nullable(matchexp) = false
nullable(ltexp) = false
nullable(listpat) = false
nullable(listexp2) = false
nullable(listexp1) = false
nullable(letpat) = false
nullable(leqexp) = false
nullable(lenscomponentexp) = false
nullable(lcpat) = false
nullable(infixexp) = false
nullable(id) = false
nullable(gtexp) = false
nullable(geqexp) = false
nullable(funexp) = false
nullable(exp) = false
nullable(equalexp) = false
nullable(dtsort_list2) = true
nullable(dtsort_list) = false
nullable(dtsort) = false
nullable(dotexp) = false
nullable(decls) = true
nullable(dbarexp) = false
nullable(datatypesort) = false
nullable(conpat) = false
nullable(composeexp) = false
nullable(commaexp) = false
nullable(cexp) = false
nullable(bsort) = false
nullable(branch_list2) = true
nullable(branch_list) = false
nullable(branch) = false
nullable(boomerang_bparser_list) = false
nullable(barexp) = false
nullable(atoms2) = true
nullable(atoms) = false
nullable(atom) = false
nullable(asort) = false
nullable(arrowsort) = false
nullable(appexp) = false
nullable(apat) = false
nullable(ampexp) = false
nullable(ampampexp) = false
nullable(aexps2) = true
nullable(aexps) = false
nullable(aexp) = false
nullable(aapat) = false
first(uid) = UIDENT
first(tyvar_list2) = TYVARIDENT
first(tyvar_list) = TYVARIDENT LPAREN
first(tyvar) = TYVARIDENT
first(tyexp) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(tildeexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(test_res_sort) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT QMARK LPAREN LIDENT LENS INTPREFS INT FORALL CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(test_res_exp) = UIDENT SYNTH STR SQUASH QUALIDENT QMARK PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR ERROR CSET CHARACTER CEX BOOLEAN BEGIN
first(sort_list) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT LPAREN LIDENT LENS INTPREFS INT FORALL CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(sort) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT LPAREN LIDENT LENS INTPREFS INT FORALL CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(rules2) = BAR
first(rules) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN BAR
first(rule) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(rewriteexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(repexp) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(rep) = STAR QMARK PLUS LBRACE
first(qvar) = QUALIDENT LIDENT
first(qid) = UIDENT QUALIDENT LIDENT
first(productsort) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT LPAREN LIDENT LENS INTPREFS INT CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(productions) = LIDENT
first(production) = LIDENT
first(pat) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CSET CEX BOOLEAN
first(param_list2) = TYVARIDENT LPAREN
first(param_list) = TYVARIDENT LPAREN
first(param) = TYVARIDENT LPAREN
first(opens) = OPEN
first(obarexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(modl) = MODULE
first(minusexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(matchexp) = LANGLE
first(ltexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(listpat) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CSET CEX BOOLEAN
first(listexp2) = UIDENT SYNTH STR SQUASH RBRACE QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(listexp1) = UIDENT SYNTH STR SQUASH RPAREN QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(letpat) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CEX BOOLEAN
first(leqexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(lenscomponentexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(lcpat) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CSET CEX BOOLEAN
first(infixexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(id) = UIDENT LIDENT
first(gtexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(geqexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(funexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS MATCH LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR FUN CSET CHARACTER CEX BOOLEAN BEGIN
first(exp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS MATCH LPAREN LIDENT LET LANGLE INTEGER HASH GRAMMAR FUN CSET CHARACTER CEX BOOLEAN BEGIN
first(equalexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(dtsort_list2) = BAR
first(dtsort_list) = UIDENT
first(dtsort) = UIDENT
first(dotexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(decls) = TYPE TEST MODULE LET
first(dbarexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(datatypesort) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT LPAREN LIDENT LENS INTPREFS INT CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(conpat) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CEX BOOLEAN
first(composeexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(commaexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(cexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS MATCH LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(bsort) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT LPAREN LIDENT LENS INTPREFS INT CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(branch_list2) = BAR
first(branch_list) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CSET CEX BOOLEAN BAR
first(branch) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CSET CEX BOOLEAN
first(boomerang_bparser_list) = UIDENT SYNTH STR SQUASH RBRACK QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(barexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET MINUS LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(atoms2) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(atoms) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(atom) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(asort) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT LIDENT LENS INTPREFS INT CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(arrowsort) = UNIT TYVARIDENT STRINGPREFS STRINGLISTPREFS STRING SKELETONS RESOURCES REGEXP QUALIDENT LPAREN LIDENT LENS INTPREFS INT CHAR CANONIZER BOOLPREFS BOOL AREGEXP
first(appexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(apat) = UNDERLINE UIDENT STR QUALIDENT LPAREN LIDENT INTEGER CEX BOOLEAN
first(ampexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(ampampexp) = UIDENT SYNTH STR SQUASH QUALIDENT PROJECT PERM NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(aexps2) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(aexps) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(aexp) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR CSET CHARACTER CEX BOOLEAN BEGIN
first(aapat) = UNDERLINE LIDENT
minimal(uid) = (* 1 *) UIDENT
minimal(tyvar_list2) = (* 1 *) TYVARIDENT
minimal(tyvar_list) = (* 0 *)
minimal(tyvar) = (* 1 *) TYVARIDENT
minimal(tyexp) = (* 1 *) LIDENT
minimal(tildeexp) = (* 3 *) LIDENT TILDE LIDENT
minimal(test_res_sort) = (* 1 *) QMARK
minimal(test_res_exp) = (* 1 *) QMARK
minimal(sort_list) = (* 1 *) LIDENT
minimal(sort) = (* 1 *) LIDENT
minimal(rules2) = (* 0 *)
minimal(rules) = (* 3 *) LIDENT DARROW LIDENT
minimal(rule) = (* 3 *) LIDENT DARROW LIDENT
minimal(rewriteexp) = (* 3 *) LIDENT DARROW LIDENT
minimal(repexp) = (* 1 *) LIDENT
minimal(rep) = (* 1 *) STAR
minimal(qvar) = (* 1 *) LIDENT
minimal(qid) = (* 1 *) LIDENT
minimal(productsort) = (* 1 *) LIDENT
minimal(productions) = (* 6 *) LIDENT COLONCOLON EQUAL LIDENT DARROW LIDENT
minimal(production) = (* 6 *) LIDENT COLONCOLON EQUAL LIDENT DARROW LIDENT
minimal(pat) = (* 1 *) CSET
minimal(param_list2) = (* 0 *)
minimal(param_list) = (* 1 *) TYVARIDENT
minimal(param) = (* 1 *) TYVARIDENT
minimal(opens) = (* 0 *)
minimal(obarexp) = (* 3 *) LIDENT BAR LIDENT
minimal(modl) = (* 4 *) MODULE UIDENT EQUAL EOF
minimal(minusexp) = (* 2 *) MINUS LIDENT
minimal(matchexp) = (* 3 *) LANGLE LIDENT RANGLE
minimal(ltexp) = (* 3 *) LIDENT LT LIDENT
minimal(listpat) = (* 1 *) CSET
minimal(listexp2) = (* 1 *) RBRACE
minimal(listexp1) = (* 1 *) RPAREN
minimal(letpat) = (* 1 *) UNDERLINE
minimal(leqexp) = (* 3 *) LIDENT LEQ LIDENT
minimal(lenscomponentexp) = (* 3 *) LIDENT GET LIDENT
minimal(lcpat) = (* 1 *) CSET
minimal(infixexp) = (* 1 *) LIDENT
minimal(id) = (* 1 *) LIDENT
minimal(gtexp) = (* 3 *) LIDENT GT LIDENT
minimal(geqexp) = (* 3 *) LIDENT GEQ LIDENT
minimal(funexp) = (* 1 *) LIDENT
minimal(exp) = (* 1 *) LIDENT
minimal(equalexp) = (* 1 *) LIDENT
minimal(dtsort_list2) = (* 0 *)
minimal(dtsort_list) = (* 1 *) UIDENT
minimal(dtsort) = (* 1 *) UIDENT
minimal(dotexp) = (* 3 *) LIDENT DOT LIDENT
minimal(decls) = (* 0 *)
minimal(dbarexp) = (* 3 *) LIDENT BARBAR LIDENT
minimal(datatypesort) = (* 1 *) LIDENT
minimal(conpat) = (* 1 *) UNDERLINE
minimal(composeexp) = (* 1 *) LIDENT
minimal(commaexp) = (* 1 *) LIDENT
minimal(cexp) = (* 1 *) LIDENT
minimal(bsort) = (* 1 *) LIDENT
minimal(branch_list2) = (* 0 *)
minimal(branch_list) = (* 3 *) CSET ARROW LIDENT
minimal(branch) = (* 3 *) CSET ARROW LIDENT
minimal(boomerang_bparser_list) = (* 1 *) RBRACK
minimal(barexp) = (* 1 *) LIDENT
minimal(atoms2) = (* 0 *)
minimal(atoms) = (* 1 *) LIDENT
minimal(atom) = (* 1 *) LIDENT
minimal(asort) = (* 1 *) LIDENT
minimal(arrowsort) = (* 1 *) LIDENT
minimal(appexp) = (* 1 *) LIDENT
minimal(apat) = (* 1 *) UNDERLINE
minimal(ampexp) = (* 3 *) LIDENT AMPERSAND LIDENT
minimal(ampampexp) = (* 4 *) LIDENT AMPERSAND AMPERSAND LIDENT
minimal(aexps2) = (* 0 *)
minimal(aexps) = (* 1 *) LIDENT
minimal(aexp) = (* 1 *) LIDENT
minimal(aapat) = (* 1 *) UNDERLINE
follow(uid) = #
follow(tyvar_list2) = RPAREN
follow(tyvar_list) = LIDENT
follow(tyvar) = WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW
follow(tyexp) = WITH USING UIDENT TYPE TILDE TEST STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND
follow(tildeexp) = WITH TYPE TILDE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(test_res_sort) = TYPE TEST MODULE LET EOF END
follow(test_res_exp) = TYPE TEST MODULE LET EOF END
follow(sort_list) = RPAREN
follow(sort) = WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR
follow(rules2) = END AND
follow(rules) = END AND
follow(rule) = END BAR AND
follow(rewriteexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR
follow(repexp) = WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND
follow(rep) = WITH USING UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND
follow(qvar) = WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW
follow(qid) = WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS OPEN NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND #
follow(productsort) = WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW
follow(productions) = END
follow(production) = END AND
follow(pat) = RPAREN COMMA ARROW
follow(param_list2) = EQUAL COLON ARROW
follow(param_list) = EQUAL COLON ARROW
follow(param) = TYVARIDENT LPAREN EQUAL COLON ARROW
follow(opens) = TYPE TEST MODULE LET EOF
follow(obarexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BAR
follow(modl) = #
follow(minusexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(matchexp) = WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND
follow(ltexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(listpat) = RPAREN EQUAL COMMA COLON ARROW
follow(listexp2) = WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND
follow(listexp1) = WITH
follow(letpat) = EQUAL COMMA COLON
follow(leqexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(lenscomponentexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(lcpat) = RPAREN EQUAL COMMA COLON ARROW
follow(infixexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(id) = TYVARIDENT LPAREN COLON
follow(gtexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(geqexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(funexp) = TYPE TEST RPAREN RANGLE MODULE LET IN EOF END
follow(exp) = TYPE TEST RPAREN RANGLE MODULE LET IN EOF END
follow(equalexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA COLON BARBAR BAR
follow(dtsort_list2) = TYPE TEST MODULE LET EOF END
follow(dtsort_list) = TYPE TEST MODULE LET EOF END
follow(dtsort) = TYPE TEST MODULE LET EOF END BAR
follow(dotexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOT DOLLAR COMMA COLON BARBAR BAR
follow(decls) = EOF END
follow(dbarexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA BARBAR
follow(datatypesort) = WHERE TYPE TEST STAR RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW
follow(conpat) = RPAREN EQUAL COMMA COLONCOLON COLON ARROW
follow(composeexp) = WITH TYPE TEST SEMI RPAREN RANGLE MODULE LET IN EOF END DOLLAR
follow(commaexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA
follow(cexp) = TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR
follow(bsort) = WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW
follow(branch_list2) = TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON
follow(branch_list) = TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON
follow(branch) = TYPE TEST RPAREN RANGLE MODULE LET IN EOF END DOLLAR COLON BAR
follow(boomerang_bparser_list) = WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND
follow(barexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE LET IN EOF END DOLLAR COMMA
follow(atoms2) = DARROW
follow(atoms) = DARROW
follow(atom) = UIDENT STR QUALIDENT NSET LPAREN LIDENT LANGLE INTEGER HASH GRAMMAR DARROW CSET CHARACTER CEX BOOLEAN BEGIN
follow(asort) = WHERE TYPE TEST STAR RPAREN RBRACE RANGLE QUALIDENT MODULE LLIST LIDENT LET IN EQUAL EOF END DOLLAR COMMA BAR ARROW
follow(arrowsort) = WHERE TYPE TEST RPAREN RBRACE RANGLE MODULE LLIST LET IN EQUAL EOF END DOLLAR COMMA BAR
follow(appexp) = WITH UIDENT TYPE TILDE TEST STR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT PUT NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BEGIN BARBAR BAR ARROW AMPERSAND
follow(apat) = RPAREN EQUAL COMMA COLONCOLON COLON ARROW
follow(ampexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR AMPERSAND
follow(ampampexp) = WITH TYPE TEST SEMI RPAREN RBRACK RANGLE MODULE MINUS LET IN EQUAL EOF END DOLLAR COMMA COLON BARBAR BAR
follow(aexps2) = END BAR AND
follow(aexps) = END BAR AND
follow(aexp) = WITH VTYPE USING UIDENT TYPE TILDE TEST STYPE STR STAR SEMI RPAREN RBRACK RBRACE RANGLE QUALIDENT QMARK PUT PLUS NSET MODULE MINUS LT LPAREN LIDENT LET LEQ LBRACE LANGLE INTO INTEGER IN HASH GT GRAMMAR GET GEQ EQUAL EOF END DOT DOLLAR DEQARROW DARROW CSET CREATE COMMA COLON CHOOSE CHARACTER CEX CANONIZE BOOLEAN BIJ BEGIN BARBAR BAR AVTYPE ASTYPE ARROW AND AMPERSAND
follow(aapat) = RPAREN EQUAL COMMA COLONCOLON COLON ARROW
Built an LR(0) automaton with 514 states.
The grammar is not SLR(1) -- 11 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 517 states.
196 out of 517 states have a default reduction.
212 out of 517 states are represented.
0 out of 180 symbols keep track of their start position.
0 out of 180 symbols keep track of their end position.
139 out of 252 productions exploit shiftreduce optimization.
850 functions before inlining, 195 functions after inlining.
