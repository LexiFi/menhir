Note: the nonterminal symbol list (from boomerang-bparser.mly) is renamed boomerang_bparser_list.
File "boomerang-bparser.mly", line 207, characters 54-63:
Warning: the token BACKSLASH is unused.
File "boomerang-bparser.mly", line 203, characters 24-29:
Warning: the token FLOAT is unused.
File "boomerang-bparser.mly", line 208, characters 70-73:
Warning: the token HAT is unused.
File "boomerang-bparser.mly", line 204, characters 41-47:
Warning: the token LBRACK is unused.
File "boomerang-bparser.mly", line 208, characters 21-25:
Warning: the token RLUS is unused.
File "boomerang-bparser.mly", line 207, characters 64-69:
Warning: the token SLASH is unused.
%{
(******************************************************************************)
(* The Harmony Project                                                        *)
(* harmony@lists.seas.upenn.edu                                               *)
(******************************************************************************)
(* Copyright (C) 2008 J. Nathan Foster and Benjamin C. Pierce                 *)
(*                                                                            *)
(* This library is free software; you can redistribute it and/or              *)
(* modify it under the terms of the GNU Lesser General Public                 *)
(* License as published by the Free Software Foundation; either               *)
(* version 2.1 of the License, or (at your option) any later version.         *)
(*                                                                            *)
(* This library is distributed in the hope that it will be useful,            *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of             *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          *)
(* Lesser General Public License for more details.                            *)
(******************************************************************************)
(* /src/parser.mly                                                            *)
(* Boomerang parser                                                           *)
(* $Id: bparser.srcy 4998 2011-03-16 21:53:34Z mgree $ *)
(******************************************************************************)

(* imports and abbreviations *)
open Bsyntax
open Bident
module L = Blenses
let sprintf = Printf.sprintf
let (@) = Safelist.append

(* helpers for merging parsing info *)
let m = Info.merge_inc
let me1 e1 i2 = m (info_of_exp e1) i2
let me2 i1 e2 = m i1 (info_of_exp e2)
let me e1 e2 = m (info_of_exp e1) (info_of_exp e2)
let mp2 i1 p2 = m i1 (info_of_pat p2)
let mp p1 p2 = m (info_of_pat p1) (info_of_pat p2)

(* error *)
let syntax_error i msg =
  raise
    (Error.Harmony_error
        (fun () -> Util.format "@[%s: Syntax error: %s @\n@]"
          (Info.string_of_t i)
          msg))

(* default chunk tag *)
let mk_default_tag i =
  let p a b = EPair (i, a, b) in
  let species = mk_core_var i "Greedy" in
  let predicate = mk_app i (mk_core_var i "Threshold") (EInteger (i, 0)) in
  let weight = mk_core_var i "NoKey" in
  let name = EString (i, "") in
  let tag = mk_app i (mk_core_var i "Tag") (p (p (p species predicate) weight) name) in
  tag

(* helper for parsing csets *)
let parse_cset s =
  let err () = raise (Parsing.Parse_error) in
  let i = ref 0 in
  let l = String.length s in
  let eos () = !i = l in
  let test c = not (eos ()) && s.[!i] = c in
  let accept c = let r = test c in if r then incr i; r in
  let num = function
    | '0' -> 0 | '1' -> 1 | '2' -> 2 | '3' -> 3 | '4' -> 4
    | '5' -> 5 | '6' -> 6 | '7' -> 7 | '8' -> 8 | '9' -> 9
    | _ -> err () in
  let hex = function
    | '0' -> 0 | '1' -> 1 | '2' -> 2 | '3' -> 3 | '4' -> 4
    | '5' -> 5 | '6' -> 6 | '7' -> 7 | '8' -> 8 | '9' -> 9
    | 'A' | 'a' -> 10 | 'B' | 'b' -> 11 | 'C' | 'c' -> 12
    | 'D' | 'd' -> 13 | 'E' |'e' -> 14 | 'F' | 'f' -> 15
    | _ -> err () in
  let get () =
    let do_get () = let r = s.[!i] in incr i; r in
      if accept '\\' then
        match do_get () with
          | '^' -> '^'
          | '-' -> '-'
          | 'b' -> '\008'
          | 'n' -> '\010'
          | 'r' -> '\013'
          | 't' -> '\009'
          | '\\' -> '\\'
          | c   ->
          if c = '0' && accept 'x' then
            let h1 = hex (do_get ()) in
            let h2 = hex (do_get ()) in
            Char.chr (16 * h1 + h2)
          else
            let n1 = num c in
            let n2 = num (do_get ()) in
            let n3 = num (do_get ()) in
            Char.chr (100 * n1 + 10 * n2 + n3)
      else (do_get ()) in
  let next () = if eos () then err () else get () in
  let rec go acc =
    if eos () then Safelist.rev acc
    else
      let acc' =
        if accept '-' then err ()
        else
          let c1 = next () in
            if accept '-' then
              (c1,next ())::acc
            else (c1,c1)::acc in
        go acc' in
    go []

(* helper for parsing qids *)
let parse_qid i qstr =
  let err () = raise (Parsing.Parse_error) in
  let j = ref 0 in
  let l = String.length qstr in
  let eos () = !j = l in
  let get () = let r = qstr.[!j] in incr j; r in
  let next () = if eos () then err () else get () in
  let rec go (acc,x) =
    if eos () then (Safelist.rev acc,(i,x))
    else
      let c1 = next () in
      if c1 = '.' then go ((i,x)::acc,"")
      else go (acc,x ^ (String.make 1 c1)) in
  go ([],"")

(* helper for building functions *)
let build_fun i param_alts body sort =
  let f,_,f_sort =
    Safelist.fold_right
      (fun pa (f,so,s) -> match pa with
         | Misc.Left(p) ->
             let f' = EFun(i,p,so,f) in
             let s' = SFunction(Id.wild,sort_of_param p,s) in
             (f',None,s')
         | Misc.Right(a) ->
             let f' = ETyFun(i,a,f) in
             let s' = SForall(a,s) in
             (f',None,s'))
      param_alts (body,Some sort,sort) in
  (f,f_sort)

(* helper for building un-sorted functions *)
let build_bare_fun i param_alts body =
  Safelist.fold_right
    (fun pa f ->
       match pa with
         | Misc.Left(p) ->
             EFun(i,p,None,f)
         | Misc.Right(a) ->
             ETyFun(i,a,f))
    param_alts body

let rec mk_tree op l = match l with
  | [] -> syntax_error (Info.M "mk_tree") "empty tree"
  | [e1] -> e1
  | _ ->
      let n = Safelist.length l in
      let rec take i l acc = match i,l with
        | 0,_ | _,[] -> (Safelist.rev acc,l)
        | _,h::t -> take (pred i) t (h::acc) in
      let l1,l2 = take (n/2) l [] in
      let e1 = mk_tree op l1 in
      let e2 = mk_tree op l2 in
      let res = mk_over (me e1 e2) op [e1;e2] in
      res

let rec fixup_pat i p0 = match p0 with
  | PVnt(i,x,Some pti) -> PVnt(i,x,Some (fixup_pat i pti)) (*syntax_error i "illegal pattern"*)
  | PVnt(i,x,None)   -> PVar(i,Qid.id_of_t x,None)
  | PPar(i,p1,p2)    -> PPar(i,fixup_pat i p1,fixup_pat i p2)
  | _ -> p0

(* helpers for building grammars *)
let rec info_of_nonempty_list f l = match l with
  | [] -> syntax_error (Info.M "info_of_nonempty_list") "list was empty"
  | [h] -> f h
  | h::t -> m (f h) (info_of_nonempty_list f t)

let info_of_rules =
  info_of_nonempty_list info_of_rule

let add_aexp ei (i,ys) = (me1 ei i,ei::ys)

let add_atom ai (i,xs,bs) = match ai with
  | Misc.Left e1 -> (me1 e1 i,e1::xs,bs)
  | Misc.Right (l1,e1) ->
      let i1 = Id.info_of_t l1 in
      (m i1 i, EVar(i,Qid.t_of_id l1)::xs,(l1,e1)::bs)

%}
%start modl
%start qid
%start uid
%token <Info.t> AMPERSAND
%token <Info.t> AND
%token <Info.t> AREGEXP
%token <Info.t> ARROW
%token <Info.t> ASTYPE
%token <Info.t> AVTYPE
%token <Info.t> BACKSLASH
%token <Info.t> BANG
%token <Info.t> BAR
%token <Info.t> BARBAR
%token <Info.t> BEGIN
%token <Info.t> BIJ
%token <Info.t> BOOL
%token <Info.t * bool> BOOLEAN
%token <Info.t> BOOLPREFS
%token <Info.t> CANONIZE
%token <Info.t> CANONIZER
%token <Info.t> CEX
%token <Info.t> CHAR
%token <Info.t * char> CHARACTER
%token <Info.t> CHOOSE
%token <Info.t> COLON
%token <Info.t> COLONCOLON
%token <Info.t> COMMA
%token <Info.t> CREATE
%token <Bident.Id.t> CSET
%token <Info.t> DARROW
%token <Info.t> DEQARROW
%token <Info.t> DOLLAR
%token <Info.t> DOT
%token <Info.t> END
%token <Info.t> EOF
%token <Info.t> EQARROW
%token <Info.t> EQUAL
%token <Info.t> ERROR
%token <Info.t * float> FLOAT
%token <Info.t> FORALL
%token <Info.t> FUN
%token <Info.t> GEQ
%token <Info.t> GET
%token <Info.t> GRAMMAR
%token <Info.t> GT
%token <Info.t> HASH
%token <Info.t> HAT
%token <Info.t> IN
%token <Info.t> INT
%token <Info.t * int> INTEGER
%token <Info.t> INTO
%token <Info.t> INTPREFS
%token <Info.t> LANGLE
%token <Info.t> LBRACE
%token <Info.t> LBRACK
%token <Info.t> LENS
%token <Info.t> LEQ
%token <Info.t> LET
%token <Bident.Id.t> LIDENT
%token <Info.t> LLIST
%token <Info.t> LPAREN
%token <Info.t> LT
%token <Info.t> MATCH
%token <Info.t> MINUS
%token <Info.t> MODULE
%token <Bident.Id.t> NSET
%token <Info.t> OF
%token <Info.t> OPEN
%token <Info.t> PERM
%token <Info.t> PLUS
%token <Info.t> PROJECT
%token <Info.t> PUT
%token <Info.t> QMARK
%token <Bident.Id.t> QUALIDENT
%token <Info.t> RANGLE
%token <Info.t> RBRACE
%token <Info.t> RBRACK
%token <Info.t> REGEXP
%token <Info.t> RESOURCES
%token <Info.t> RLUS
%token <Info.t> RPAREN
%token <Info.t> SEMI
%token <Info.t> SKELETONS
%token <Info.t> SLASH
%token <Info.t> SQUASH
%token <Info.t> STAR
%token <Bident.Id.t> STR
%token <Info.t> STRING
%token <Info.t> STRINGLISTPREFS
%token <Info.t> STRINGPREFS
%token <Info.t> STYPE
%token <Info.t> SYNTH
%token <Info.t> TEST
%token <Info.t> TILDE
%token <Info.t> TYPE
%token <Bident.Id.t> TYVARIDENT
%token <Bident.Id.t> UIDENT
%token <Info.t> UNDERLINE
%token <Info.t> UNIT
%token <Info.t> USING
%token <Info.t> VTYPE
%token <Info.t> WHERE
%token <Info.t> WITH
%type <Bsyntax.modl> modl
%type <Bident.Qid.t> qid
%type <Bident.Qid.t> uid
%%

modl:
  _1 = MODULE _2 = UIDENT _3 = EQUAL _4 = opens _5 = decls _6 = EOF
    {      ( Mod(m _1 _6,_2,_4,_5) )}

opens:
  _1 = OPEN _2 = qid _3 = opens
    {      ( _2::_3 )}
| 
    {    ( [] )}

decls:
  _1 = MODULE _2 = UIDENT _3 = EQUAL _4 = decls _5 = END _6 = decls
    {      ( let i = m _1 _5 in
        DMod(i,_2,_4)::_6 )}
| _1 = TYPE _2 = tyvar_list _3 = LIDENT _4 = EQUAL _5 = dtsort_list _6 = decls
    {      ( let i = m _1 _4 in
        DType(i,_2,Qid.t_of_id _3,_5)::_6 )}
| _1 = LET _2 = id _3 = param_list _4 = COLON _5 = sort _6 = EQUAL _7 = exp _8 = decls
    {      ( let i = me2 _1 _7 in
        let f,f_sort = build_fun i _3 _7 _5 in
        let i2,_ = _2 in
        let b = Bind(i,PVar(i2,_2,None),None,f) in
        DLet(i,b)::_8 )}
| _1 = LET _2 = id _3 = param_list _4 = EQUAL _5 = exp _6 = decls
    {      ( let i = me2 _1 _5 in
        let f = build_bare_fun i _3 _5 in
        let i2,_ = _2 in
        let b =  Bind(i,PVar(i2,_2,None),None,f) in
        DLet(i,b)::_6 )}
| _1 = LET _2 = letpat _3 = COLON _4 = sort _5 = EQUAL _6 = exp _7 = decls
    {      ( let i = me2 _1 _6 in
        let b = Bind(i,fixup_pat i _2,Some _4,_6) in
        DLet(i,b)::_7 )}
| _1 = LET _2 = letpat _3 = EQUAL _4 = exp _5 = decls
    {      ( let i = me2 _1 _4 in
        let b =  Bind(i,fixup_pat i _2,None,_4) in
        DLet(i,b)::_5 )}
| _1 = TEST _2 = infixexp _3 = EQUAL _4 = test_res_exp _5 = decls
    {      ( let i4,tr = _4 in
        let i = m _1 i4 in
        DTest(i,_2,tr)::_5 )}
| _1 = TEST _2 = infixexp _3 = COLON _4 = test_res_sort _5 = decls
    {      ( let i = m _1 _3 in
        DTest(i,_2,_4)::_5 )}
| _1 = TEST _2 = infixexp _3 = COLON _4 = ERROR _5 = decls
    {      ( let i = m _1 _4 in
        DTest(i,_2,TestError)::_5 )}
| 
    {    ( [] )}

test_res_exp:
  _1 = QMARK
    {      ( (_1,TestPrint) )}
| _1 = ERROR
    {      ( (_1,TestError) )}
| _1 = appexp
    {      ( (info_of_exp _1, TestEqual _1) )}

test_res_sort:
  _1 = QMARK
    {      ( TestSortPrint None )}
| _1 = sort
    {      ( TestSortEqual(None,_1) )}

exp:
  _1 = LET _2 = id _3 = param_list _4 = COLON _5 = sort _6 = EQUAL _7 = exp _8 = IN _9 = exp
    {      ( let i = me2 _1 _9 in
        let f,f_sort = build_fun i _3 _7 _5 in
        let i2,_ = _2 in
        let b = Bind(i,PVar(i2,_2,None),None,f) in
        ELet(i,b,_9) )}
| _1 = LET _2 = id _3 = param_list _4 = EQUAL _5 = exp _6 = IN _7 = exp
    {      ( let i = me2 _1 _7 in
        let f = build_bare_fun i _3 _5 in
        let i2,_ = _2 in
        let b = Bind(i,PVar(i2,_2,None),None,f) in
        ELet(i,b,_7) )}
| _1 = LET _2 = letpat _3 = COLON _4 = sort _5 = EQUAL _6 = exp _7 = IN _8 = exp
    {      ( let i = me2 _1 _8 in
        let b = Bind(i,fixup_pat i _2,Some _4,_6) in
        ELet(i,b,_8) )}
| _1 = LET _2 = letpat _3 = EQUAL _4 = exp _5 = IN _6 = exp
    {      ( let i = me2 _1 _6 in
        let b = Bind(i,fixup_pat i _2,None,_4) in
        ELet(i,b,_6) )}
| _1 = funexp
    {      ( _1 )}

funexp:
  _1 = FUN _2 = param_list _3 = ARROW _4 = exp
    {      ( let i = me2 _1 _4 in
        build_bare_fun i _2 _4 )}
| _1 = FUN _2 = param_list _3 = COLON _4 = asort _5 = ARROW _6 = exp
    {      ( let i = me2 _1 _6 in
        let f,_ = build_fun i _2 _6 _4 in
        f )}
| _1 = cexp _2 = DOLLAR _3 = funexp
    {      ( mk_app (me _1 _3) _1 _3 )}
| _1 = cexp
    {      ( _1 )}

cexp:
  _1 = MATCH _2 = composeexp _3 = WITH _4 = branch_list
    {       ( let i4,pl = _4 in
         ECase(m _1 i4,_2,pl,None) )}
| _1 = MATCH _2 = composeexp _3 = WITH _4 = branch_list _5 = COLON _6 = sort
    {      ( let i4,pl = _4 in
        ECase(m _1 i4,_2,pl,Some _6) )}
| _1 = composeexp
    {      ( _1 )}

composeexp:
  _1 = composeexp _2 = SEMI _3 = commaexp
    {      ( mk_compose (me _1 _3) _1 _3 )}
| _1 = commaexp
    {      ( _1 )}

commaexp:
  _1 = commaexp _2 = COMMA _3 = barexp
    {      ( EPair(me _1 _3, _1, _3) )}
| _1 = barexp
    {      ( _1 )}

barexp:
  _1 = obarexp
    {      ( mk_tree OBar (Safelist.rev _1) )}
| _1 = dbarexp
    {      ( mk_tree OBarBar (Safelist.rev _1) )}
| _1 = equalexp
    {      ( _1 )}

obarexp:
  _1 = obarexp _2 = BAR _3 = equalexp
    {      ( _3 :: _1 )}
| _1 = equalexp _2 = BAR _3 = equalexp
    {      ( [_3; _1 ] )}

dbarexp:
  _1 = dbarexp _2 = BARBAR _3 = equalexp
    {      ( _3 :: _1 )}
| _1 = equalexp _2 = BARBAR _3 = equalexp
    {      ( [_3; _1] )}

equalexp:
  _1 = appexp _2 = EQUAL _3 = appexp
    {      ( mk_over (me _1 _3) OEqual [_1; _3] )}
| _1 = infixexp
    {      ( _1 )}

infixexp:
  _1 = dotexp
    {      ( _1 )}
| _1 = tildeexp
    {      ( _1 )}
| _1 = rewriteexp
    {      ( _1 )}
| _1 = ampexp
    {      ( _1 )}
| _1 = ampampexp
    {      ( _1 )}
| _1 = lenscomponentexp
    {      ( _1 )}
| _1 = minusexp
    {      ( _1 )}
| _1 = ltexp
    {      ( _1 )}
| _1 = leqexp
    {      ( _1 )}
| _1 = gtexp
    {      ( _1 )}
| _1 = geqexp
    {      ( _1 )}
| _1 = appexp
    {      ( _1 )}

dotexp:
  _1 = dotexp _2 = DOT _3 = appexp
    {      ( mk_over (me _1 _3) ODot [_1; _3] )}
| _1 = dotexp _2 = DOT _3 = rewriteexp
    {      ( mk_over (me _1 _3) ODot [_1; _3] )}
| _1 = appexp _2 = DOT _3 = appexp
    {      ( mk_over (me _1 _3) ODot [_1; _3] )}
| _1 = rewriteexp _2 = DOT _3 = rewriteexp
    {      ( mk_over (me _1 _3) ODot [_1; _3] )}
| _1 = rewriteexp _2 = DOT _3 = appexp
    {      ( mk_over (me _1 _3) ODot [_1; _3] )}
| _1 = appexp _2 = DOT _3 = rewriteexp
    {      ( mk_over (me _1 _3) ODot [_1; _3] )}

tildeexp:
  _1 = tildeexp _2 = TILDE _3 = appexp
    {      ( mk_over (me _1 _3) OTilde [_1; _3] )}
| _1 = appexp _2 = TILDE _3 = appexp
    {      ( mk_over (me _1 _3) OTilde [_1; _3] )}

ampexp:
  _1 = ampexp _2 = AMPERSAND _3 = appexp
    {      ( mk_over (me _1 _3) OAmp [_1; _3] )}
| _1 = appexp _2 = AMPERSAND _3 = appexp
    {      ( mk_over (me _1 _3) OAmp [_1; _3] )}

ampampexp:
  _1 = appexp _2 = AMPERSAND _3 = AMPERSAND _4 = ampampexp
    {      ( mk_over (me _1 _4) OAmpAmp [_1; _4] )}
| _1 = appexp _2 = AMPERSAND _3 = AMPERSAND _4 = appexp
    {      ( mk_over (me _1 _4) OAmpAmp [_1; _4] )}

rewriteexp:
  _1 = appexp _2 = DARROW _3 = appexp
    {      ( mk_over (me _1 _3) ODarrow [_1; _3] )}
| _1 = appexp _2 = DEQARROW _3 = appexp
    {      ( mk_over (me _1 _3) ODeqarrow [_1; _3] )}

lenscomponentexp:
  _1 = appexp _2 = GET _3 = appexp
    {      ( let i = me _1 _3 in
        mk_bin_op i (mk_core_var i "get") _1 _3 )}
| _1 = appexp _2 = PUT _3 = appexp _4 = INTO _5 = appexp
    {      ( let i = me _1 _3 in
        mk_tern_op i (mk_core_var i "put") _1 _3 _5 )}
| _1 = appexp _2 = CREATE _3 = appexp
    {      ( let i = me _1 _3 in
        mk_bin_op i (mk_core_var i "create") _1 _3 )}
| _1 = appexp _2 = CANONIZE _3 = appexp
    {      ( let i = me _1 _3 in
        mk_bin_op i (mk_core_var i "canonize") _1 _3 )}
| _1 = appexp _2 = CHOOSE _3 = appexp
    {      ( let i = me _1 _3 in
        mk_bin_op i (mk_core_var i "choose") _1 _3 )}

minusexp:
  _1 = infixexp _2 = MINUS _3 = appexp
    {      ( mk_over (me _1 _3) OMinus [_1; _3] )}
| _1 = MINUS _2 = appexp
    {      ( mk_over (me2 _1 _2) OMinus [EInteger(_1,0); _2] )}

ltexp:
  _1 = appexp _2 = LT _3 = appexp
    {      ( mk_over (me _1 _3) OLt [_1; _3] )}

leqexp:
  _1 = appexp _2 = LEQ _3 = appexp
    {      ( mk_over (me _1 _3) OLeq [_1; _3] )}

gtexp:
  _1 = appexp _2 = GT _3 = appexp
    {      ( mk_over (me _1 _3) OGt [_1; _3] )}

geqexp:
  _1 = appexp _2 = GEQ _3 = appexp
    {      ( mk_over (me _1 _3) OGeq [_1; _3] )}

appexp:
  _1 = appexp _2 = repexp
    {      ( mk_app (me _1 _2) _1 _2 )}
| _1 = PERM _2 = LPAREN _3 = listexp1 _4 = WITH _5 = repexp
    {            ( let i = me2 _1 _5 in
        EPerm(i,_3,_5) )}
| _1 = PROJECT _2 = appexp _3 = ARROW _4 = repexp
    {      ( let i = me2 _1 _4 in
        EProject(i,_2,_4) )}
| _1 = SYNTH _2 = appexp _3 = DEQARROW _4 = repexp _5 = USING _6 = LBRACE _7 = listexp2
    {         ( let i = if List.length _7 = 0 then
					me2 _1 _4 else
					me2 _1 (List.hd (List.rev _7)) in
        ESynth (i,_2,_4,Some _7) )}
| _1 = SYNTH _2 = appexp _3 = DEQARROW _4 = repexp
    {         ( let i = me2 _1 _4 in
        ESynth (i,_2,_4,None) )}
| _1 = SQUASH _2 = appexp _3 = ARROW _4 = repexp _5 = USING _6 = repexp
    {    ( let i = me2 _1 _6 in
        ESquash(i,_2,_4, _6) )}
| _1 = repexp
    {      ( _1 )}

listexp1:
  _1 = RPAREN
    {        ([])}
| _1 = appexp _2 = RPAREN
    {        ([_1])}
| _1 = appexp _2 = COMMA _3 = listexp1
    {        (_1 :: _3)}

listexp2:
  _1 = RBRACE
    {  ([])}
| _1 = appexp _2 = RBRACE
    {  ([_1])}
| _1 = appexp _2 = COMMA _3 = listexp2
    {  (_1 :: _3)}

repexp:
  _1 = tyexp _2 = rep
    {      ( let i2,(min,max) = _2 in
        let i = me1 _1 i2 in
	  mk_iter i min max _1 )}
| _1 = tyexp
    {      ( _1 )}

tyexp:
  _1 = tyexp _2 = LBRACE _3 = sort _4 = RBRACE
    {      ( let i = me1 _1 _4 in
        ETyApp(i,_1,_3) )}
| _1 = aexp
    {      ( _1 )}

aexp:
  _1 = LPAREN _2 = exp _3 = RPAREN
    {      ( _2 )}
| _1 = BEGIN _2 = exp _3 = END
    {      ( _2 )}
| _1 = qid
    {      ( mk_qid_var _1 )}
| _1 = matchexp
    {      ( _1 )}
| _1 = HASH _2 = LBRACE _3 = sort _4 = LLIST _5 = boomerang_bparser_list
    {      ( let i6,mk = _5 in
        let i = m _1 i6 in
        let l = mk i _3 in
        l )}
| _1 = CHARACTER
    {      ( let i,c = _1 in
        EChar(i,c) )}
| _1 = INTEGER
    {      ( let i,n = _1 in
        EInteger(i,n) )}
| _1 = BOOLEAN
    {      ( let i,b = _1 in
        EBoolean(i,if b then None else Some (EString(i,""))) )}
| _1 = CEX _2 = LPAREN _3 = exp _4 = RPAREN
    {      ( EBoolean(_1,Some _3) )}
| _1 = CSET
    {      ( let i1,s1 = _1 in
        ECSet(i1,true,parse_cset s1) )}
| _1 = NSET
    {      ( let i1,s1 = _1 in
        ECSet(i1,false,parse_cset s1) )}
| _1 = STR
    {      ( let i,s = _1 in
        EString(i,s) )}
| _1 = LPAREN _2 = RPAREN
    {      ( EUnit(m _1 _2) )}
| _1 = GRAMMAR _2 = productions _3 = END
    {      ( EGrammar(m _1 _3, _2) )}
| _1 = aexp _2 = STYPE
    {      ( let i = me1 _1 _2 in
        mk_app i (mk_core_var i "stype") _1 )}
| _1 = aexp _2 = VTYPE
    {      ( let i = me1 _1 _2 in
        mk_app i (mk_core_var i "vtype") _1 )}
| _1 = aexp _2 = ASTYPE
    {      ( let i = me1 _1 _2 in
        mk_app i (mk_core_var i "astype") _1 )}
| _1 = aexp _2 = AVTYPE
    {      ( let i = me1 _1 _2 in
        mk_app i (mk_core_var i "avtype") _1 )}
| _1 = aexp _2 = BIJ
    {      ( let i = me1 _1 _2 in
        mk_app i (mk_core_var i "bij") _1 )}

matchexp:
  _1 = LANGLE _2 = exp _3 = RANGLE
    {      ( let i = _1 in
        let tag = mk_default_tag i in
        mk_over (m _1 _3) OMatch [tag; _2] )}
| _1 = LANGLE _2 = appexp _3 = COLON _4 = exp _5 = RANGLE
    {      ( mk_over (m _1 _5) OMatch [_2; _4] )}

branch:
  _1 = pat _2 = ARROW _3 = equalexp
    {      ( let i = m (info_of_pat _1) (info_of_exp _3) in
        (i,_1,_3) )}

branch_list:
  _1 = branch _2 = branch_list2
    {      ( let (i1,p,e) = _1 in
        let (i2,l) = _2 i1 in
        (m i1 i2, (p,e)::l) )}
| _1 = BAR _2 = branch _3 = branch_list2
    {      ( let (i1,p,e) = _2 in
        let (i2,l) = _3 i1 in
        (m _1 i2, (p,e)::l) )}

branch_list2:
  
    {      ( (fun i -> (i,[])) )}
| _1 = BAR _2 = branch _3 = branch_list2
    {      ( let (i1,p,e) = _2 in
        let (i2,l) = _3 i1 in
        (fun _ -> (m _1 i2, (p,e)::l)) )}

rep:
  _1 = STAR
    {      ( (_1, (0,-1)) )}
| _1 = PLUS
    {      ( (_1, (1,-1)) )}
| _1 = QMARK
    {      ( (_1, (0,1)) )}
| _1 = LBRACE _2 = INTEGER _3 = RBRACE
    {      ( let i = m _1 _3 in let _,n = _2 in (i, (n,n)) )}
| _1 = LBRACE _2 = INTEGER _3 = COMMA _4 = RBRACE
    {      ( let i = m _1 _3 in let _,n = _2 in (i, (n,-1)) )}
| _1 = LBRACE _2 = INTEGER _3 = COMMA _4 = INTEGER _5 = RBRACE
    {      ( let i = m _1 _5 in let _,n2 = _2 in let _,n4 = _4 in (i, (n2, n4)) )}

boomerang_bparser_list:
  _1 = RBRACK
    {      ( _1, (fun i s -> ETyApp(i,mk_list_var i "Nil",s)) )}
| _1 = commaexp _2 = RBRACK
    {      ( (_2,
         (fun i s ->
            mk_app i
              (ETyApp(i,mk_list_var i "Cons",s))
              (EPair(i,_1,ETyApp(i,mk_list_var i "Nil",s))))) )}
| _1 = commaexp _2 = SEMI _3 = boomerang_bparser_list
    {    ( let i3,mk = _3 in
      (i3,
       (fun i s ->
          mk_app i
            (ETyApp(i,mk_list_var i "Cons",s))
            (EPair(i,_1, mk i s)))) )}

atom:
  _1 = aexp
    {      ( Misc.Left _1 )}
| _1 = LIDENT _2 = COLON _3 = aexp
    {      ( Misc.Right (_1,_3) )}

atoms:
  _1 = atom _2 = atoms2
    {      ( add_atom _1 _2 )}

atoms2:
  
    {     ( (Info.M "atoms",[],[]) )}
| _1 = atom _2 = atoms2
    {     ( add_atom _1 _2 )}

aexps:
  _1 = aexp _2 = aexps2
    {      ( add_aexp _1 _2 )}

aexps2:
  
    {      ( (Info.M "aexps", []) )}
| _1 = aexp _2 = aexps2
    {      ( add_aexp _1 _2 )}

rule:
  _1 = atoms _2 = DARROW _3 = aexps
    {     ( let i1,xs,bs = _1 in
       let i3,ys = _3 in
       Rule(m i1 i3,xs,ys,bs) )}

rules:
  _1 = rule _2 = rules2
    {    ( _1 :: _2 )}
| _1 = BAR _2 = rule _3 = rules2
    {    ( _2 :: _3 )}

rules2:
  
    {    ( [] )}
| _1 = BAR _2 = rule _3 = rules2
    {    ( _2 :: _3 )}

production:
  _1 = LIDENT _2 = COLONCOLON _3 = EQUAL _4 = rules
    {    ( let i1,_ = _1 in
      let i5 = info_of_rules _4 in
      Prod(m i1 i5,_1,_4) )}

productions:
  _1 = production
    {    ( [_1] )}
| _1 = production _2 = AND _3 = productions
    {    ( _1 :: _3 )}

id:
  _1 = LIDENT
    {      ( _1 )}
| _1 = UIDENT
    {      ( _1 )}

qid:
  _1 = LIDENT
    {      ( Qid.t_of_id _1 )}
| _1 = UIDENT
    {      ( Qid.t_of_id _1 )}
| _1 = QUALIDENT
    {      ( let (i,qs) = _1 in parse_qid i qs )}

qvar:
  _1 = LIDENT
    {      ( Qid.t_of_id _1 )}
| _1 = QUALIDENT
    {      ( let (i,qs) = _1 in parse_qid i qs )}

param_list:
  _1 = param _2 = param_list2
    {      ( _1 :: _2 )}

param_list2:
  _1 = param _2 = param_list2
    {      ( _1 :: _2 )}
| 
    {      ( [] )}

param:
  _1 = LPAREN _2 = id _3 = COLON _4 = sort _5 = RPAREN
    {      ( let i = m _1 _5 in
        Misc.Left (Param(i,_2,_4)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = LENS _5 = IN _6 = QMARK _7 = DARROW _8 = appexp _9 = RPAREN
    {      ( let i = m _1 _9 in
        let p = mk_bin_op i (mk_core_var i "equiv")
	                    (mk_app i (mk_core_var i "vtype") (mk_var _2))
                            _8 in
        let s = SRefine(_2,false,SLens,p,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = LENS _5 = IN _6 = QMARK _7 = DEQARROW _8 = appexp _9 = RPAREN
    {      ( let i = m _1 _9 in
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv")
	                                 (mk_app i (mk_core_var i "vtype") (mk_var _2))
                                         _8)
			    (mk_app i (mk_core_var i "bij") (mk_var _2)) in
        let s = SRefine(_2,false,SLens,p,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = LENS _5 = IN _6 = appexp _7 = DARROW _8 = QMARK _9 = RPAREN
    {      ( let i = m _1 _9 in
        let p = mk_bin_op i (mk_core_var i "equiv")
	                    (mk_app i (mk_core_var i "stype") (mk_var _2))
                            _6 in
        let s = SRefine(_2,false,SLens,p,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = LENS _5 = IN _6 = appexp _7 = DEQARROW _8 = QMARK _9 = RPAREN
    {      ( let i = m _1 _9 in
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv")
	                                 (mk_app i (mk_core_var i "stype") (mk_var _2))
                                         _6)
			    (mk_app i (mk_core_var i "bij") (mk_var _2)) in
        let s = SRefine(_2,false,SLens,p,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = LENS _5 = IN _6 = appexp _7 = DARROW _8 = appexp _9 = RPAREN
    {      ( let i = m _1 _9 in
        let p = mk_tern_op i (mk_core_var i "in_lens_type") (mk_var _2) _6 _8 in
        let s = SRefine(_2,false,SLens,p,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = LENS _5 = IN _6 = appexp _7 = DEQARROW _8 = appexp _9 = RPAREN
    {      ( let i = m _1 _9 in
        let p = mk_tern_op i (mk_core_var i "in_bij_lens_type") (mk_var _2) _6 _8 in
        let s = SRefine(_2,false,SLens,p,Some(_6, _8)) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = STRING _5 = IN _6 = exp _7 = RPAREN
    {      ( let i = m _1 _7 in
        let p = mk_bin_op i (mk_core_var i "matches") _6 (mk_var _2) in
        let s = SRefine(_2,false,SString,p,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = sort _5 = WHERE _6 = BANG _7 = exp _8 = RPAREN
    {      ( let i,_ = _2 in
        let s = SRefine(_2,true,_4,_7,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = sort _5 = WHERE _6 = exp _7 = RPAREN
    {      ( let i,_ = _2 in
        let s = SRefine(_2,false,_4,_6,None) in
        Misc.Left (Param(i,_2,s)) )}
| _1 = LPAREN _2 = TYVARIDENT _3 = RPAREN
    {      ( Misc.Right (_2) )}
| _1 = TYVARIDENT
    {      ( Misc.Right (_1) )}
| _1 = LPAREN _2 = RPAREN
    {      ( let i = m _1 _2 in
        Misc.Left (Param(i,(i,"(unit)"),SUnit)) )}

sort:
  _1 = FORALL _2 = TYVARIDENT _3 = EQARROW _4 = sort
    {      ( SForall(_2,_4) )}
| _1 = arrowsort
    {      ( _1 )}

arrowsort:
  _1 = productsort _2 = ARROW _3 = arrowsort
    {      ( SFunction(Id.wild,_1,_3) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = productsort _5 = ARROW _6 = arrowsort _7 = RPAREN
    {      ( SFunction(_2,_4,_6) )}
| _1 = productsort
    {      ( _1 )}

productsort:
  _1 = productsort _2 = STAR _3 = datatypesort
    {      ( SProduct(_1,_3) )}
| _1 = datatypesort
    {      ( _1 )}

datatypesort:
  _1 = bsort _2 = qvar
    {      ( SData([_1],_2) )}
| _1 = LPAREN _2 = sort _3 = COMMA _4 = sort_list _5 = RPAREN _6 = qvar
    {      ( SData(_2::_4, _6) )}
| _1 = bsort
    {      ( _1 )}

bsort:
  _1 = LPAREN _2 = sort _3 = RPAREN
    {      ( _2 )}
| _1 = LPAREN _2 = sort _3 = WHERE _4 = BANG _5 = exp _6 = RPAREN
    {      ( SRefine(Id.wild,false,_2,_5,None) )}
| _1 = LPAREN _2 = sort _3 = WHERE _4 = exp _5 = RPAREN
    {      ( SRefine(Id.wild,true,_2,_4,None) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = sort _5 = WHERE _6 = BANG _7 = exp _8 = RPAREN
    {      ( SRefine(_2,true,_4,_7,None) )}
| _1 = LPAREN _2 = id _3 = COLON _4 = sort _5 = WHERE _6 = exp _7 = RPAREN
    {      ( SRefine(_2,false,_4,_6,None) )}
| _1 = LPAREN _2 = LENS _3 = IN _4 = QMARK _5 = DARROW _6 = appexp _7 = RPAREN
    {      ( let i = m _1 _7 in
        let l = Id.mk i "_l" in
        let p = mk_bin_op i (mk_core_var i "equiv")
	                    (mk_app i (mk_core_var i "vtype") (mk_var l))
                            _6 in
        SRefine(l,false,SLens,p,None) )}
| _1 = LPAREN _2 = LENS _3 = IN _4 = QMARK _5 = DEQARROW _6 = appexp _7 = RPAREN
    {      ( let i = m _1 _7 in
        let l = Id.mk i "_l" in
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv")
	                                 (mk_app i (mk_core_var i "vtype") (mk_var l))
                                         _6)
			    (mk_app i (mk_core_var i "bij") (mk_var l)) in
        SRefine(l,false,SLens,p,None) )}
| _1 = LPAREN _2 = LENS _3 = IN _4 = appexp _5 = DARROW _6 = QMARK _7 = RPAREN
    {      ( let i = m _1 _7 in
	let l = Id.mk i "_l" in
        let p = mk_bin_op i (mk_core_var i "equiv")
	                    (mk_app i (mk_core_var i "stype") (mk_var l))
                            _4 in
        SRefine(l,false,SLens,p,None) )}
| _1 = LPAREN _2 = LENS _3 = IN _4 = appexp _5 = DEQARROW _6 = QMARK _7 = RPAREN
    {      ( let i = m _1 _7 in
	let l = Id.mk i "_l" in
        let p = mk_bin_op i (mk_core_var i "land")
	                    (mk_bin_op i (mk_core_var i "equiv")
	                                 (mk_app i (mk_core_var i "stype") (mk_var l))
                                         _4)
			    (mk_app i (mk_core_var i "bij") (mk_var l)) in
        SRefine(l,false,SLens,p,None) )}
| _1 = LPAREN _2 = LENS _3 = IN _4 = appexp _5 = DARROW _6 = appexp _7 = RPAREN
    {      ( let i = m _1 _7 in
        let l = Id.mk i "_l" in
        let chk c a = mk_tern_op i (mk_core_var i "in_lens_type") (mk_var l) c a in
        SRefine(l,false,SLens,chk _4 _6,None) )}
| _1 = LPAREN _2 = LENS _3 = IN _4 = appexp _5 = DEQARROW _6 = appexp _7 = RPAREN
    {      ( let i = m _1 _7 in
        let l = Id.mk i "_l" in
        let chk c a = mk_tern_op i (mk_core_var i "in_bij_lens_type") (mk_var l) c a in
        SRefine(l,false,SLens,chk _4 _6,Some(_4,_6)) )}
| _1 = LPAREN _2 = STRING _3 = IN _4 = exp _5 = RPAREN
    {      ( let i = m _1 _5 in
        let s = Id.mk i "_s" in
        let p = mk_bin_op i (mk_core_var i "matches") _4 (mk_var s) in
        SRefine(s,false,SString,p,None) )}
| _1 = asort
    {      ( _1 )}

asort:
  _1 = qvar
    {      ( SData([], _1) )}
| _1 = CHAR
    {      ( SChar )}
| _1 = STRING
    {      ( SString )}
| _1 = REGEXP
    {      ( SRegexp )}
| _1 = AREGEXP
    {      ( SAregexp )}
| _1 = SKELETONS
    {      ( SSkeletons )}
| _1 = RESOURCES
    {      ( SResources )}
| _1 = LENS
    {      ( SLens )}
| _1 = INT
    {      ( SInteger )}
| _1 = BOOL
    {      ( SBool )}
| _1 = CANONIZER
    {      ( SCanonizer )}
| _1 = BOOLPREFS
    {      ( SPrefs PrBool )}
| _1 = INTPREFS
    {      ( SPrefs PrInt )}
| _1 = STRINGPREFS
    {      ( SPrefs PrString )}
| _1 = STRINGLISTPREFS
    {      ( SPrefs PrStringList )}
| _1 = UNIT
    {      ( SUnit )}
| _1 = tyvar
    {      ( SVar _1 )}

tyvar:
  _1 = TYVARIDENT
    {      ( _1 )}

tyvar_list:
  
    {      ( [] )}
| _1 = tyvar
    {      ( [_1] )}
| _1 = LPAREN _2 = tyvar_list2 _3 = RPAREN
    {      ( _2 )}

tyvar_list2:
  _1 = tyvar
    {      ( [_1] )}
| _1 = tyvar _2 = COMMA _3 = tyvar_list2
    {      ( _1::_3 )}

sort_list:
  _1 = sort
    {      ( [_1] )}
| _1 = sort _2 = COMMA _3 = sort_list
    {      ( _1 :: _3 )}

dtsort:
  _1 = UIDENT
    {      ( (_1,None) )}
| _1 = UIDENT _2 = OF _3 = sort
    {      ( (_1,Some _3) )}

dtsort_list:
  _1 = dtsort _2 = dtsort_list2
    {      ( _1 :: _2 )}

dtsort_list2:
  
    {      ( [] )}
| _1 = BAR _2 = dtsort _3 = dtsort_list2
    {      ( _2 :: _3 )}

lcpat:
  _1 = listpat
    {            ( _1 )}
| _1 = conpat
    {           ( _1 )}

pat:
  _1 = pat _2 = COMMA _3 = lcpat
    {      ( let i = mp _1 _3 in
        PPar(i,_1,_3) )}
| _1 = lcpat
    {          ( _1 )}

letpat:
  _1 = letpat _2 = COMMA _3 = lcpat
    {      ( let i = mp _1 _3 in
        PPar(i,_1,_3) )}
| _1 = QUALIDENT _2 = apat
    {      ( let i,qs = _1 in
        PVnt(i,parse_qid i qs, Some _2) )}
| _1 = apat
    {         ( _1 )}

conpat:
  _1 = UIDENT _2 = apat
    {      ( let i1,_ = _1 in
        let i = mp2 i1 _2 in
         PVnt(i,Qid.t_of_id _1,Some _2) )}
| _1 = QUALIDENT _2 = apat
    {      ( let (i,qs) = _1 in
        PVnt(i,parse_qid i qs,Some _2) )}
| _1 = apat
    {         ( _1 )}

apat:
  _1 = aapat
    {      ( _1 )}
| _1 = LPAREN _2 = RPAREN
    {      ( PUnt(m _1 _2) )}
| _1 = INTEGER
    {    ( let i,n = _1 in
       PInt(i,n) )}
| _1 = BOOLEAN
    {      ( let i,b = _1 in
        PBol(i,b) )}
| _1 = CEX _2 = LPAREN _3 = pat _4 = RPAREN
    {      ( PCex(_1,_3) )}
| _1 = STR
    {      ( let i,s = _1 in
        PStr(i,s) )}
| _1 = UIDENT
    {      ( let i,_ = _1 in
        PVnt(i,Qid.t_of_id _1,None) )}
| _1 = QUALIDENT
    {      ( let (i,qs) = _1 in
        PVnt(i,parse_qid i qs,None) )}
| _1 = LPAREN _2 = pat _3 = RPAREN
    {      ( _2 )}

aapat:
  _1 = UNDERLINE
    {      ( PWld _1 )}
| _1 = LIDENT
    {      ( let i, _ = _1 in
        PVar (i, _1, None) )}

listpat:
  _1 = CSET
    {      ( let i, cset = _1 in
        if cset = ""
        then PVnt (i, Qid.mk_list_t i "Nil", None)
        else syntax_error i (Printf.sprintf "\nDid you meant %s::[] instead of [%s]?" cset cset) )}
| _1 = conpat _2 = COLONCOLON _3 = aapat
    {      ( let i = _2 in
        let p = PPar (i, _1, _3) in
        PVnt (_2, Qid.mk_list_t i "Cons", Some p) )}
| _1 = conpat _2 = COLONCOLON _3 = listpat
    {      ( let i = _2 in
        let p = PPar (i, _1, _3) in
        PVnt (_2, Qid.mk_list_t i "Cons", Some p) )}

uid:
  _1 = UIDENT
    {      ( Qid.t_of_id _1 )}

%%
