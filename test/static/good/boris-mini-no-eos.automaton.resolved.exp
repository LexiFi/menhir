State 0:
debut' -> . debut [ # ]
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On inst shift to state 4
-- On expr shift to state 13
-- On debut shift to state 15

State 1:
inst -> SEP . inst inst [ SEP LIDENT DOT ]
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On inst shift to state 9
-- On expr shift to state 11

State 2:
expr -> LIDENT . [ EOF DOT ]
inst -> LIDENT . expr [ SEP LIDENT DOT ]
-- On SEP shift to state 1
-- On LIDENT shift to state 3
-- On inst shift to state 4
-- On expr shift to state 8
-- On EOF reduce production expr -> LIDENT
-- On DOT reduce production expr -> LIDENT

State 3:
expr -> LIDENT . [ SEP LIDENT EOF DOT ]
inst -> LIDENT . expr [ DOT ]
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On inst shift to state 4
-- On expr shift to state 8
-- On EOF reduce production expr -> LIDENT
-- On DOT reduce production expr -> LIDENT
** Conflict on SEP LIDENT

State 4:
expr -> inst . DOT expr [ SEP LIDENT EOF DOT ]
-- On DOT shift to state 5

State 5:
expr -> inst DOT . expr [ SEP LIDENT EOF DOT ]
-- On SEP shift to state 1
-- On LIDENT shift to state 3
-- On inst shift to state 4
-- On expr shift to state 6

State 6:
expr -> expr . DOT [ SEP LIDENT EOF DOT ]
expr -> inst DOT expr . [ SEP LIDENT EOF DOT ]
inst -> expr . DOT [ DOT ]
-- On DOT shift to state 7
-- On SEP reduce production expr -> inst DOT expr
-- On LIDENT reduce production expr -> inst DOT expr
-- On EOF reduce production expr -> inst DOT expr
** Conflict on DOT

State 7:
expr -> expr DOT . [ SEP LIDENT EOF DOT ]
inst -> expr DOT . [ DOT ]
-- On SEP reduce production expr -> expr DOT
-- On LIDENT reduce production expr -> expr DOT
-- On EOF reduce production expr -> expr DOT
-- On DOT reduce production inst -> expr DOT
** Conflict on DOT

State 8:
expr -> expr . DOT [ SEP LIDENT DOT ]
inst -> LIDENT expr . [ SEP LIDENT DOT ]
inst -> expr . DOT [ DOT ]
-- On DOT shift to state 7
-- On SEP reduce production inst -> LIDENT expr
-- On LIDENT reduce production inst -> LIDENT expr
** Conflict on DOT

State 9:
expr -> inst . DOT expr [ DOT ]
inst -> SEP inst . inst [ SEP LIDENT DOT ]
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On DOT shift to state 5
-- On inst shift to state 10
-- On expr shift to state 11

State 10:
expr -> inst . DOT expr [ DOT ]
inst -> SEP inst inst . [ SEP LIDENT DOT ]
-- On DOT shift to state 5
-- On SEP reduce production inst -> SEP inst inst
-- On LIDENT reduce production inst -> SEP inst inst
** Conflict on DOT

State 11:
expr -> expr . DOT [ DOT ]
inst -> expr . DOT [ SEP LIDENT DOT ]
-- On DOT shift to state 12

State 12:
expr -> expr DOT . [ DOT ]
inst -> expr DOT . [ SEP LIDENT DOT ]
-- On SEP reduce production inst -> expr DOT
-- On LIDENT reduce production inst -> expr DOT
-- On DOT reduce production inst -> expr DOT
** Conflict on DOT

State 13:
debut -> expr . EOF [ # ]
expr -> expr . DOT [ EOF DOT ]
inst -> expr . DOT [ DOT ]
-- On EOF shift to state 14
-- On DOT shift to state 7

State 14:
debut -> expr EOF . [ # ]
-- On # reduce production debut -> expr EOF

State 15:
debut' -> debut . [ # ]
-- On # accept debut

