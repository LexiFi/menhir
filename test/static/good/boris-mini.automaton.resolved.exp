State 0:
## Known stack suffix:
##
## LR(1) items:
debut' -> . debut [ # ]
## Transitions:
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On inst shift to state 4
-- On expr shift to state 13
-- On debut shift to state 15
## Reductions:

State 1:
## Known stack suffix:
## SEP
## LR(1) items:
inst -> SEP . inst inst [ SEP LIDENT DOT ]
## Transitions:
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On inst shift to state 9
-- On expr shift to state 11
## Reductions:

State 2:
## Known stack suffix:
## LIDENT
## LR(1) items:
expr -> LIDENT . [ DOT ]
inst -> LIDENT . expr [ SEP LIDENT DOT ]
## Transitions:
-- On SEP shift to state 1
-- On LIDENT shift to state 3
-- On inst shift to state 4
-- On expr shift to state 8
## Reductions:
-- On DOT reduce production expr -> LIDENT

State 3:
## Known stack suffix:
## LIDENT
## LR(1) items:
expr -> LIDENT . [ SEP LIDENT DOT ]
inst -> LIDENT . expr [ DOT ]
## Transitions:
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On inst shift to state 4
-- On expr shift to state 8
## Reductions:
-- On DOT reduce production expr -> LIDENT

State 4:
## Known stack suffix:
## inst
## LR(1) items:
expr -> inst . DOT expr [ SEP LIDENT DOT ]
## Transitions:
-- On DOT shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## inst DOT
## LR(1) items:
expr -> inst DOT . expr [ SEP LIDENT DOT ]
## Transitions:
-- On SEP shift to state 1
-- On LIDENT shift to state 3
-- On inst shift to state 4
-- On expr shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## inst DOT expr
## LR(1) items:
expr -> expr . DOT [ SEP LIDENT DOT ]
expr -> inst DOT expr . [ SEP LIDENT DOT ]
inst -> expr . DOT [ DOT ]
## Transitions:
-- On DOT shift to state 7
## Reductions:
-- On SEP reduce production expr -> inst DOT expr
-- On LIDENT reduce production expr -> inst DOT expr

State 7:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . [ SEP LIDENT DOT ]
inst -> expr DOT . [ DOT ]
## Transitions:
## Reductions:
-- On SEP reduce production expr -> expr DOT
-- On LIDENT reduce production expr -> expr DOT
-- On DOT reduce production inst -> expr DOT

State 8:
## Known stack suffix:
## LIDENT expr
## LR(1) items:
expr -> expr . DOT [ SEP LIDENT DOT ]
inst -> LIDENT expr . [ SEP LIDENT DOT ]
inst -> expr . DOT [ DOT ]
## Transitions:
-- On DOT shift to state 7
## Reductions:
-- On SEP reduce production inst -> LIDENT expr
-- On LIDENT reduce production inst -> LIDENT expr

State 9:
## Known stack suffix:
## SEP inst
## LR(1) items:
expr -> inst . DOT expr [ DOT ]
inst -> SEP inst . inst [ SEP LIDENT DOT ]
## Transitions:
-- On SEP shift to state 1
-- On LIDENT shift to state 2
-- On DOT shift to state 5
-- On inst shift to state 10
-- On expr shift to state 11
## Reductions:

State 10:
## Known stack suffix:
## SEP inst inst
## LR(1) items:
expr -> inst . DOT expr [ DOT ]
inst -> SEP inst inst . [ SEP LIDENT DOT ]
## Transitions:
-- On DOT shift to state 5
## Reductions:
-- On SEP reduce production inst -> SEP inst inst
-- On LIDENT reduce production inst -> SEP inst inst

State 11:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . DOT [ DOT ]
inst -> expr . DOT [ SEP LIDENT DOT ]
## Transitions:
-- On DOT shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . [ DOT ]
inst -> expr DOT . [ SEP LIDENT DOT ]
## Transitions:
## Reductions:
-- On SEP reduce production inst -> expr DOT
-- On LIDENT reduce production inst -> expr DOT
-- On DOT reduce production inst -> expr DOT

State 13:
## Known stack suffix:
## expr
## LR(1) items:
debut -> expr . DOT [ # ]
expr -> expr . DOT [ DOT ]
inst -> expr . DOT [ DOT ]
## Transitions:
-- On DOT shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## expr DOT
## LR(1) items:
debut -> expr DOT . [ # ]
expr -> expr DOT . [ DOT ]
inst -> expr DOT . [ DOT ]
## Transitions:
## Reductions:
-- On DOT reduce production inst -> expr DOT

State 15:
## Known stack suffix:
## debut
## LR(1) items:
debut' -> debut . [ # ]
## Transitions:
## Reductions:
-- On # accept debut

