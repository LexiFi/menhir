State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On error shift to state 1
-- On TYPE shift to state 2
-- On TOPVAR shift to state 103
-- On TOPDEF shift to state 654
-- On NL shift to state 673
-- On EXTERNAL shift to state 674
-- On EXCEPTION shift to state 683
-- On AND shift to state 689
-- On rev_definitions shift to state 691
-- On prog shift to state 693
-- On definitions shift to state 694
-- On definition shift to state 696
## Reductions:
-- On EOF reduce production definitions ->

State 1:
## Known stack suffix:
## error
## LR(1) items:
definition -> error . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> error
-- On TYPE reduce production definition -> error
-- On TOPVAR reduce production definition -> error
-- On TOPDEF reduce production definition -> error
-- On NL reduce production definition -> error
-- On EXTERNAL reduce production definition -> error
-- On EXCEPTION reduce production definition -> error
-- On EOF reduce production definition -> error
-- On AND reduce production definition -> error

State 2:
## Known stack suffix:
## TYPE
## LR(1) items:
definition -> TYPE . typedef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On QIDENT shift to state 3
-- On LPAREN shift to state 4
-- On typedef shift to state 11
-- On type_params_opt shift to state 12
-- On type_params shift to state 101
-- On type_param shift to state 102
## Reductions:
-- On IDENT reduce production type_params_opt ->

State 3:
## Known stack suffix:
## QIDENT
## LR(1) items:
type_param -> QIDENT . [ RPAREN IDENT COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production type_param -> QIDENT
-- On IDENT reduce production type_param -> QIDENT
-- On COMMA reduce production type_param -> QIDENT

State 4:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_params -> LPAREN . rev_type_params RPAREN [ IDENT COMMA ]
## Transitions:
-- On QIDENT shift to state 3
-- On LPAREN shift to state 4
-- On type_params shift to state 5
-- On type_param shift to state 8
-- On rev_type_params shift to state 9
## Reductions:

State 5:
## Known stack suffix:
## type_params
## LR(1) items:
rev_type_params -> type_params . COMMA type_param [ RPAREN ]
## Transitions:
-- On COMMA shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## type_params COMMA
## LR(1) items:
rev_type_params -> type_params COMMA . type_param [ RPAREN ]
## Transitions:
-- On QIDENT shift to state 3
-- On type_param shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## type_params COMMA type_param
## LR(1) items:
rev_type_params -> type_params COMMA type_param . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production rev_type_params -> type_params COMMA type_param

State 8:
## Known stack suffix:
## type_param
## LR(1) items:
rev_type_params -> type_param . [ RPAREN ]
type_params -> type_param . [ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production rev_type_params -> type_param
-- On COMMA reduce production type_params -> type_param

State 9:
## Known stack suffix:
## LPAREN rev_type_params
## LR(1) items:
type_params -> LPAREN rev_type_params . RPAREN [ IDENT COMMA ]
## Transitions:
-- On RPAREN shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LPAREN rev_type_params RPAREN
## LR(1) items:
type_params -> LPAREN rev_type_params RPAREN . [ IDENT COMMA ]
## Transitions:
## Reductions:
-- On IDENT reduce production type_params -> LPAREN rev_type_params RPAREN
-- On COMMA reduce production type_params -> LPAREN rev_type_params RPAREN

State 11:
## Known stack suffix:
## TYPE typedef
## LR(1) items:
definition -> TYPE typedef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> TYPE typedef
-- On TYPE reduce production definition -> TYPE typedef
-- On TOPVAR reduce production definition -> TYPE typedef
-- On TOPDEF reduce production definition -> TYPE typedef
-- On NL reduce production definition -> TYPE typedef
-- On EXTERNAL reduce production definition -> TYPE typedef
-- On EXCEPTION reduce production definition -> TYPE typedef
-- On EOF reduce production definition -> TYPE typedef
-- On AND reduce production definition -> TYPE typedef

State 12:
## Known stack suffix:
## type_params_opt
## LR(1) items:
typedef -> type_params_opt . IDENT EQUAL nl_opt type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt . IDENT EQUAL nl_opt constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt . IDENT EQUAL nl_opt PIPE constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt . IDENT EQUAL nl_opt LBRACE field_decls RBRACE [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On IDENT shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## type_params_opt IDENT
## LR(1) items:
typedef -> type_params_opt IDENT . EQUAL nl_opt type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT . EQUAL nl_opt constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT . EQUAL nl_opt PIPE constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT . EQUAL nl_opt LBRACE field_decls RBRACE [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On EQUAL shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## type_params_opt IDENT EQUAL
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL . nl_opt type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT EQUAL . nl_opt constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT EQUAL . nl_opt PIPE constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT EQUAL . nl_opt LBRACE field_decls RBRACE [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 16
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On QIDENT reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->

State 15:
## Known stack suffix:
## NL
## LR(1) items:
nl_opt -> NL . [ WITH VAR UIDENT TRY STRING RETURN RECEIVE RBRACE RAISE QIDENT PIPE PERFORM NOT MINUS MATCH LPAREN LESS_LESS LBRACK LBRACE INT IF IDENT FUN FOR FLOAT EXCL ELSE DO DEF CHAR BOOL ATOM ASSERT ]
## Transitions:
## Reductions:
-- On WITH reduce production nl_opt -> NL
-- On VAR reduce production nl_opt -> NL
-- On UIDENT reduce production nl_opt -> NL
-- On TRY reduce production nl_opt -> NL
-- On STRING reduce production nl_opt -> NL
-- On RETURN reduce production nl_opt -> NL
-- On RECEIVE reduce production nl_opt -> NL
-- On RBRACE reduce production nl_opt -> NL
-- On RAISE reduce production nl_opt -> NL
-- On QIDENT reduce production nl_opt -> NL
-- On PIPE reduce production nl_opt -> NL
-- On PERFORM reduce production nl_opt -> NL
-- On NOT reduce production nl_opt -> NL
-- On MINUS reduce production nl_opt -> NL
-- On MATCH reduce production nl_opt -> NL
-- On LPAREN reduce production nl_opt -> NL
-- On LESS_LESS reduce production nl_opt -> NL
-- On LBRACK reduce production nl_opt -> NL
-- On LBRACE reduce production nl_opt -> NL
-- On INT reduce production nl_opt -> NL
-- On IF reduce production nl_opt -> NL
-- On IDENT reduce production nl_opt -> NL
-- On FUN reduce production nl_opt -> NL
-- On FOR reduce production nl_opt -> NL
-- On FLOAT reduce production nl_opt -> NL
-- On EXCL reduce production nl_opt -> NL
-- On ELSE reduce production nl_opt -> NL
-- On DO reduce production nl_opt -> NL
-- On DEF reduce production nl_opt -> NL
-- On CHAR reduce production nl_opt -> NL
-- On BOOL reduce production nl_opt -> NL
-- On ATOM reduce production nl_opt -> NL
-- On ASSERT reduce production nl_opt -> NL

State 16:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL nl_opt . type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT EQUAL nl_opt . constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT EQUAL nl_opt . PIPE constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT EQUAL nl_opt . LBRACE field_decls RBRACE [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On QIDENT shift to state 20
-- On PIPE shift to state 73
-- On LPAREN shift to state 21
-- On LBRACE shift to state 80
-- On IDENT shift to state 53
-- On type_expr_tuple shift to state 58
-- On type_expr shift to state 99
-- On type_constr shift to state 63
-- On simple_type_expr shift to state 64
-- On rev_constr_path shift to state 55
-- On rev_constr_decls shift to state 75
-- On constr_decls shift to state 100
-- On constr_decl shift to state 79
-- On constr shift to state 57
## Reductions:

State 17:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_decl -> UIDENT . constr_decl_type nl_opt [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
rev_constr_path -> UIDENT . [ IDENT DOT ]
## Transitions:
-- On OF shift to state 18
-- On constr_decl_type shift to state 70
## Reductions:
-- On error reduce production constr_decl_type ->
-- On TYPE reduce production constr_decl_type ->
-- On TOPVAR reduce production constr_decl_type ->
-- On TOPDEF reduce production constr_decl_type ->
-- On PIPE reduce production constr_decl_type ->
-- On NL reduce production constr_decl_type ->
-- On IDENT reduce production rev_constr_path -> UIDENT
-- On EXTERNAL reduce production constr_decl_type ->
-- On EXCEPTION reduce production constr_decl_type ->
-- On EOF reduce production constr_decl_type ->
-- On DOT reduce production rev_constr_path -> UIDENT
-- On AND reduce production constr_decl_type ->

State 18:
## Known stack suffix:
## OF
## LR(1) items:
constr_decl_type -> OF . type_expr [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 20
-- On LPAREN shift to state 21
-- On IDENT shift to state 53
-- On type_expr_tuple shift to state 58
-- On type_expr shift to state 59
-- On type_constr shift to state 63
-- On simple_type_expr shift to state 64
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:

State 19:
## Known stack suffix:
## UIDENT
## LR(1) items:
rev_constr_path -> UIDENT . [ IDENT DOT ]
## Transitions:
## Reductions:
-- On IDENT reduce production rev_constr_path -> UIDENT
-- On DOT reduce production rev_constr_path -> UIDENT

State 20:
## Known stack suffix:
## QIDENT
## LR(1) items:
simple_type_expr -> QIDENT . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production simple_type_expr -> QIDENT
-- On UIDENT reduce production simple_type_expr -> QIDENT
-- On TYPE reduce production simple_type_expr -> QIDENT
-- On TOPVAR reduce production simple_type_expr -> QIDENT
-- On TOPDEF reduce production simple_type_expr -> QIDENT
-- On RARROW reduce production simple_type_expr -> QIDENT
-- On PIPE reduce production simple_type_expr -> QIDENT
-- On NL reduce production simple_type_expr -> QIDENT
-- On IDENT reduce production simple_type_expr -> QIDENT
-- On EXTERNAL reduce production simple_type_expr -> QIDENT
-- On EXCEPTION reduce production simple_type_expr -> QIDENT
-- On EOF reduce production simple_type_expr -> QIDENT
-- On AST reduce production simple_type_expr -> QIDENT
-- On AND reduce production simple_type_expr -> QIDENT

State 21:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_type_expr -> LPAREN . type_expr RPAREN [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
simple_type_expr -> LPAREN . type_constr_params RPAREN type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_expr_tuple shift to state 25
-- On type_expr shift to state 49
-- On type_constr_params shift to state 51
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 37
-- On rev_type_constr_params shift to state 46
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 22:
## Known stack suffix:
## QIDENT
## LR(1) items:
simple_type_expr -> QIDENT . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production simple_type_expr -> QIDENT
-- On RPAREN reduce production simple_type_expr -> QIDENT
-- On RBRACE reduce production simple_type_expr -> QIDENT
-- On RARROW reduce production simple_type_expr -> QIDENT
-- On NL reduce production simple_type_expr -> QIDENT
-- On IDENT reduce production simple_type_expr -> QIDENT
-- On EQUAL reduce production simple_type_expr -> QIDENT
-- On COMMA reduce production simple_type_expr -> QIDENT
-- On AST reduce production simple_type_expr -> QIDENT

State 23:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_type_expr -> LPAREN . type_expr RPAREN [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
simple_type_expr -> LPAREN . type_constr_params RPAREN type_constr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_expr_tuple shift to state 25
-- On type_expr shift to state 26
-- On type_constr_params shift to state 43
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 37
-- On rev_type_constr_params shift to state 46
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 24:
## Known stack suffix:
## IDENT
## LR(1) items:
constr -> IDENT . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production constr -> IDENT
-- On RPAREN reduce production constr -> IDENT
-- On RBRACE reduce production constr -> IDENT
-- On RARROW reduce production constr -> IDENT
-- On NL reduce production constr -> IDENT
-- On IDENT reduce production constr -> IDENT
-- On EQUAL reduce production constr -> IDENT
-- On COMMA reduce production constr -> IDENT
-- On AST reduce production constr -> IDENT

State 25:
## Known stack suffix:
## type_expr_tuple
## LR(1) items:
type_expr -> type_expr_tuple . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
## Transitions:
## Reductions:
-- On UIDENT reduce production type_expr -> type_expr_tuple
-- On RPAREN reduce production type_expr -> type_expr_tuple
-- On RBRACE reduce production type_expr -> type_expr_tuple
-- On RARROW reduce production type_expr -> type_expr_tuple
-- On NL reduce production type_expr -> type_expr_tuple
-- On IDENT reduce production type_expr -> type_expr_tuple
-- On EQUAL reduce production type_expr -> type_expr_tuple
-- On COMMA reduce production type_expr -> type_expr_tuple

State 26:
## Known stack suffix:
## LPAREN type_expr
## LR(1) items:
rev_type_constr_params -> type_expr . [ RPAREN COMMA ]
simple_type_expr -> LPAREN type_expr . RPAREN [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
type_expr -> type_expr . type_constr [ UIDENT RPAREN RARROW IDENT COMMA ]
type_expr -> type_expr . RARROW type_expr [ UIDENT RPAREN RARROW IDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On RPAREN shift to state 27
-- On RARROW shift to state 28
-- On IDENT shift to state 24
-- On type_constr shift to state 30
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:
-- On COMMA reduce production rev_type_constr_params -> type_expr

State 27:
## Known stack suffix:
## LPAREN type_expr RPAREN
## LR(1) items:
simple_type_expr -> LPAREN type_expr RPAREN . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On RPAREN reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On RBRACE reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On RARROW reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On NL reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On IDENT reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On EQUAL reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On COMMA reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On AST reduce production simple_type_expr -> LPAREN type_expr RPAREN

State 28:
## Known stack suffix:
## type_expr RARROW
## LR(1) items:
type_expr -> type_expr RARROW . type_expr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_expr_tuple shift to state 25
-- On type_expr shift to state 29
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 37
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 29:
## Known stack suffix:
## type_expr RARROW type_expr
## LR(1) items:
type_expr -> type_expr . type_constr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
type_expr -> type_expr . RARROW type_expr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
type_expr -> type_expr RARROW type_expr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On IDENT shift to state 24
-- On type_constr shift to state 30
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:
-- On RPAREN reduce production type_expr -> type_expr RARROW type_expr
-- On RBRACE reduce production type_expr -> type_expr RARROW type_expr
-- On RARROW reduce production type_expr -> type_expr RARROW type_expr
-- On NL reduce production type_expr -> type_expr RARROW type_expr
-- On EQUAL reduce production type_expr -> type_expr RARROW type_expr
-- On COMMA reduce production type_expr -> type_expr RARROW type_expr

State 30:
## Known stack suffix:
## type_expr type_constr
## LR(1) items:
type_expr -> type_expr type_constr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
## Transitions:
## Reductions:
-- On UIDENT reduce production type_expr -> type_expr type_constr
-- On RPAREN reduce production type_expr -> type_expr type_constr
-- On RBRACE reduce production type_expr -> type_expr type_constr
-- On RARROW reduce production type_expr -> type_expr type_constr
-- On NL reduce production type_expr -> type_expr type_constr
-- On IDENT reduce production type_expr -> type_expr type_constr
-- On EQUAL reduce production type_expr -> type_expr type_constr
-- On COMMA reduce production type_expr -> type_expr type_constr

State 31:
## Known stack suffix:
## rev_constr_path
## LR(1) items:
constr -> rev_constr_path . IDENT [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
rev_constr_path -> rev_constr_path . DOT UIDENT [ IDENT DOT ]
## Transitions:
-- On IDENT shift to state 32
-- On DOT shift to state 33
## Reductions:

State 32:
## Known stack suffix:
## rev_constr_path IDENT
## LR(1) items:
constr -> rev_constr_path IDENT . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production constr -> rev_constr_path IDENT
-- On RPAREN reduce production constr -> rev_constr_path IDENT
-- On RBRACE reduce production constr -> rev_constr_path IDENT
-- On RARROW reduce production constr -> rev_constr_path IDENT
-- On NL reduce production constr -> rev_constr_path IDENT
-- On IDENT reduce production constr -> rev_constr_path IDENT
-- On EQUAL reduce production constr -> rev_constr_path IDENT
-- On COMMA reduce production constr -> rev_constr_path IDENT
-- On AST reduce production constr -> rev_constr_path IDENT

State 33:
## Known stack suffix:
## rev_constr_path DOT
## LR(1) items:
rev_constr_path -> rev_constr_path DOT . UIDENT [ IDENT DOT ]
## Transitions:
-- On UIDENT shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## rev_constr_path DOT UIDENT
## LR(1) items:
rev_constr_path -> rev_constr_path DOT UIDENT . [ IDENT DOT ]
## Transitions:
## Reductions:
-- On IDENT reduce production rev_constr_path -> rev_constr_path DOT UIDENT
-- On DOT reduce production rev_constr_path -> rev_constr_path DOT UIDENT

State 35:
## Known stack suffix:
## constr
## LR(1) items:
type_constr -> constr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production type_constr -> constr
-- On RPAREN reduce production type_constr -> constr
-- On RBRACE reduce production type_constr -> constr
-- On RARROW reduce production type_constr -> constr
-- On NL reduce production type_constr -> constr
-- On IDENT reduce production type_constr -> constr
-- On EQUAL reduce production type_constr -> constr
-- On COMMA reduce production type_constr -> constr
-- On AST reduce production type_constr -> constr

State 36:
## Known stack suffix:
## type_constr
## LR(1) items:
simple_type_expr -> type_constr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production simple_type_expr -> type_constr
-- On RPAREN reduce production simple_type_expr -> type_constr
-- On RBRACE reduce production simple_type_expr -> type_constr
-- On RARROW reduce production simple_type_expr -> type_constr
-- On NL reduce production simple_type_expr -> type_constr
-- On IDENT reduce production simple_type_expr -> type_constr
-- On EQUAL reduce production simple_type_expr -> type_constr
-- On COMMA reduce production simple_type_expr -> type_constr
-- On AST reduce production simple_type_expr -> type_constr

State 37:
## Known stack suffix:
## simple_type_expr
## LR(1) items:
type_expr -> simple_type_expr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
type_expr_tuple -> simple_type_expr . rev_type_expr_tuple_tail [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
## Transitions:
-- On AST shift to state 38
-- On rev_type_expr_tuple_tail shift to state 40
## Reductions:
-- On UIDENT reduce production type_expr -> simple_type_expr
-- On RPAREN reduce production type_expr -> simple_type_expr
-- On RBRACE reduce production type_expr -> simple_type_expr
-- On RARROW reduce production type_expr -> simple_type_expr
-- On NL reduce production type_expr -> simple_type_expr
-- On IDENT reduce production type_expr -> simple_type_expr
-- On EQUAL reduce production type_expr -> simple_type_expr
-- On COMMA reduce production type_expr -> simple_type_expr

State 38:
## Known stack suffix:
## AST
## LR(1) items:
rev_type_expr_tuple_tail -> AST . simple_type_expr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 39
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 39:
## Known stack suffix:
## AST simple_type_expr
## LR(1) items:
rev_type_expr_tuple_tail -> AST simple_type_expr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On RPAREN reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On RBRACE reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On RARROW reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On NL reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On IDENT reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On EQUAL reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On COMMA reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On AST reduce production rev_type_expr_tuple_tail -> AST simple_type_expr

State 40:
## Known stack suffix:
## simple_type_expr rev_type_expr_tuple_tail
## LR(1) items:
rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail . AST simple_type_expr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA ]
## Transitions:
-- On AST shift to state 41
## Reductions:
-- On UIDENT reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On RPAREN reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On RBRACE reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On RARROW reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On NL reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On IDENT reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On EQUAL reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On COMMA reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail

State 41:
## Known stack suffix:
## rev_type_expr_tuple_tail AST
## LR(1) items:
rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST . simple_type_expr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 42
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 42:
## Known stack suffix:
## rev_type_expr_tuple_tail AST simple_type_expr
## LR(1) items:
rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On RPAREN reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On RBRACE reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On RARROW reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On NL reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On IDENT reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On EQUAL reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On COMMA reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On AST reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr

State 43:
## Known stack suffix:
## LPAREN type_constr_params
## LR(1) items:
simple_type_expr -> LPAREN type_constr_params . RPAREN type_constr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
-- On RPAREN shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## LPAREN type_constr_params RPAREN
## LR(1) items:
simple_type_expr -> LPAREN type_constr_params RPAREN . type_constr [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
-- On UIDENT shift to state 19
-- On IDENT shift to state 24
-- On type_constr shift to state 45
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 45:
## Known stack suffix:
## LPAREN type_constr_params RPAREN type_constr
## LR(1) items:
simple_type_expr -> LPAREN type_constr_params RPAREN type_constr . [ UIDENT RPAREN RBRACE RARROW NL IDENT EQUAL COMMA AST ]
## Transitions:
## Reductions:
-- On UIDENT reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On RPAREN reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On RBRACE reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On RARROW reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On NL reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On IDENT reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On EQUAL reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On COMMA reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On AST reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr

State 46:
## Known stack suffix:
## rev_type_constr_params
## LR(1) items:
rev_type_constr_params -> rev_type_constr_params . COMMA type_expr [ RPAREN COMMA ]
type_constr_params -> rev_type_constr_params . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 47
## Reductions:
-- On RPAREN reduce production type_constr_params -> rev_type_constr_params

State 47:
## Known stack suffix:
## rev_type_constr_params COMMA
## LR(1) items:
rev_type_constr_params -> rev_type_constr_params COMMA . type_expr [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_expr_tuple shift to state 25
-- On type_expr shift to state 48
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 37
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 48:
## Known stack suffix:
## rev_type_constr_params COMMA type_expr
## LR(1) items:
rev_type_constr_params -> rev_type_constr_params COMMA type_expr . [ RPAREN COMMA ]
type_expr -> type_expr . type_constr [ UIDENT RPAREN RARROW IDENT COMMA ]
type_expr -> type_expr . RARROW type_expr [ UIDENT RPAREN RARROW IDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On RARROW shift to state 28
-- On IDENT shift to state 24
-- On type_constr shift to state 30
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:
-- On RPAREN reduce production rev_type_constr_params -> rev_type_constr_params COMMA type_expr
-- On COMMA reduce production rev_type_constr_params -> rev_type_constr_params COMMA type_expr

State 49:
## Known stack suffix:
## LPAREN type_expr
## LR(1) items:
rev_type_constr_params -> type_expr . [ RPAREN COMMA ]
simple_type_expr -> LPAREN type_expr . RPAREN [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
type_expr -> type_expr . type_constr [ UIDENT RPAREN RARROW IDENT COMMA ]
type_expr -> type_expr . RARROW type_expr [ UIDENT RPAREN RARROW IDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On RPAREN shift to state 50
-- On RARROW shift to state 28
-- On IDENT shift to state 24
-- On type_constr shift to state 30
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:
-- On COMMA reduce production rev_type_constr_params -> type_expr

State 50:
## Known stack suffix:
## LPAREN type_expr RPAREN
## LR(1) items:
simple_type_expr -> LPAREN type_expr RPAREN . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On UIDENT reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On TYPE reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On TOPVAR reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On TOPDEF reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On RARROW reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On PIPE reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On NL reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On IDENT reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On EXTERNAL reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On EXCEPTION reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On EOF reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On AST reduce production simple_type_expr -> LPAREN type_expr RPAREN
-- On AND reduce production simple_type_expr -> LPAREN type_expr RPAREN

State 51:
## Known stack suffix:
## LPAREN type_constr_params
## LR(1) items:
simple_type_expr -> LPAREN type_constr_params . RPAREN type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
-- On RPAREN shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LPAREN type_constr_params RPAREN
## LR(1) items:
simple_type_expr -> LPAREN type_constr_params RPAREN . type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On IDENT shift to state 53
-- On type_constr shift to state 54
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:

State 53:
## Known stack suffix:
## IDENT
## LR(1) items:
constr -> IDENT . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production constr -> IDENT
-- On UIDENT reduce production constr -> IDENT
-- On TYPE reduce production constr -> IDENT
-- On TOPVAR reduce production constr -> IDENT
-- On TOPDEF reduce production constr -> IDENT
-- On RARROW reduce production constr -> IDENT
-- On PIPE reduce production constr -> IDENT
-- On NL reduce production constr -> IDENT
-- On IDENT reduce production constr -> IDENT
-- On EXTERNAL reduce production constr -> IDENT
-- On EXCEPTION reduce production constr -> IDENT
-- On EOF reduce production constr -> IDENT
-- On AST reduce production constr -> IDENT
-- On AND reduce production constr -> IDENT

State 54:
## Known stack suffix:
## LPAREN type_constr_params RPAREN type_constr
## LR(1) items:
simple_type_expr -> LPAREN type_constr_params RPAREN type_constr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On UIDENT reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On TYPE reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On TOPVAR reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On TOPDEF reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On RARROW reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On PIPE reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On NL reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On IDENT reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On EXTERNAL reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On EXCEPTION reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On EOF reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On AST reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr
-- On AND reduce production simple_type_expr -> LPAREN type_constr_params RPAREN type_constr

State 55:
## Known stack suffix:
## rev_constr_path
## LR(1) items:
constr -> rev_constr_path . IDENT [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
rev_constr_path -> rev_constr_path . DOT UIDENT [ IDENT DOT ]
## Transitions:
-- On IDENT shift to state 56
-- On DOT shift to state 33
## Reductions:

State 56:
## Known stack suffix:
## rev_constr_path IDENT
## LR(1) items:
constr -> rev_constr_path IDENT . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production constr -> rev_constr_path IDENT
-- On UIDENT reduce production constr -> rev_constr_path IDENT
-- On TYPE reduce production constr -> rev_constr_path IDENT
-- On TOPVAR reduce production constr -> rev_constr_path IDENT
-- On TOPDEF reduce production constr -> rev_constr_path IDENT
-- On RARROW reduce production constr -> rev_constr_path IDENT
-- On PIPE reduce production constr -> rev_constr_path IDENT
-- On NL reduce production constr -> rev_constr_path IDENT
-- On IDENT reduce production constr -> rev_constr_path IDENT
-- On EXTERNAL reduce production constr -> rev_constr_path IDENT
-- On EXCEPTION reduce production constr -> rev_constr_path IDENT
-- On EOF reduce production constr -> rev_constr_path IDENT
-- On AST reduce production constr -> rev_constr_path IDENT
-- On AND reduce production constr -> rev_constr_path IDENT

State 57:
## Known stack suffix:
## constr
## LR(1) items:
type_constr -> constr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production type_constr -> constr
-- On UIDENT reduce production type_constr -> constr
-- On TYPE reduce production type_constr -> constr
-- On TOPVAR reduce production type_constr -> constr
-- On TOPDEF reduce production type_constr -> constr
-- On RARROW reduce production type_constr -> constr
-- On PIPE reduce production type_constr -> constr
-- On NL reduce production type_constr -> constr
-- On IDENT reduce production type_constr -> constr
-- On EXTERNAL reduce production type_constr -> constr
-- On EXCEPTION reduce production type_constr -> constr
-- On EOF reduce production type_constr -> constr
-- On AST reduce production type_constr -> constr
-- On AND reduce production type_constr -> constr

State 58:
## Known stack suffix:
## type_expr_tuple
## LR(1) items:
type_expr -> type_expr_tuple . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production type_expr -> type_expr_tuple
-- On UIDENT reduce production type_expr -> type_expr_tuple
-- On TYPE reduce production type_expr -> type_expr_tuple
-- On TOPVAR reduce production type_expr -> type_expr_tuple
-- On TOPDEF reduce production type_expr -> type_expr_tuple
-- On RARROW reduce production type_expr -> type_expr_tuple
-- On PIPE reduce production type_expr -> type_expr_tuple
-- On NL reduce production type_expr -> type_expr_tuple
-- On IDENT reduce production type_expr -> type_expr_tuple
-- On EXTERNAL reduce production type_expr -> type_expr_tuple
-- On EXCEPTION reduce production type_expr -> type_expr_tuple
-- On EOF reduce production type_expr -> type_expr_tuple
-- On AND reduce production type_expr -> type_expr_tuple

State 59:
## Known stack suffix:
## OF type_expr
## LR(1) items:
constr_decl_type -> OF type_expr . [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . RARROW type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On RARROW shift to state 60
-- On IDENT shift to state 53
-- On type_constr shift to state 62
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:
-- On error reduce production constr_decl_type -> OF type_expr
-- On TYPE reduce production constr_decl_type -> OF type_expr
-- On TOPVAR reduce production constr_decl_type -> OF type_expr
-- On TOPDEF reduce production constr_decl_type -> OF type_expr
-- On PIPE reduce production constr_decl_type -> OF type_expr
-- On NL reduce production constr_decl_type -> OF type_expr
-- On EXTERNAL reduce production constr_decl_type -> OF type_expr
-- On EXCEPTION reduce production constr_decl_type -> OF type_expr
-- On EOF reduce production constr_decl_type -> OF type_expr
-- On AND reduce production constr_decl_type -> OF type_expr

State 60:
## Known stack suffix:
## type_expr RARROW
## LR(1) items:
type_expr -> type_expr RARROW . type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 20
-- On LPAREN shift to state 21
-- On IDENT shift to state 53
-- On type_expr_tuple shift to state 58
-- On type_expr shift to state 61
-- On type_constr shift to state 63
-- On simple_type_expr shift to state 64
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:

State 61:
## Known stack suffix:
## type_expr RARROW type_expr
## LR(1) items:
type_expr -> type_expr . type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . RARROW type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr RARROW type_expr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On IDENT shift to state 53
-- On type_constr shift to state 62
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:
-- On error reduce production type_expr -> type_expr RARROW type_expr
-- On TYPE reduce production type_expr -> type_expr RARROW type_expr
-- On TOPVAR reduce production type_expr -> type_expr RARROW type_expr
-- On TOPDEF reduce production type_expr -> type_expr RARROW type_expr
-- On RARROW reduce production type_expr -> type_expr RARROW type_expr
-- On PIPE reduce production type_expr -> type_expr RARROW type_expr
-- On NL reduce production type_expr -> type_expr RARROW type_expr
-- On EXTERNAL reduce production type_expr -> type_expr RARROW type_expr
-- On EXCEPTION reduce production type_expr -> type_expr RARROW type_expr
-- On EOF reduce production type_expr -> type_expr RARROW type_expr
-- On AND reduce production type_expr -> type_expr RARROW type_expr

State 62:
## Known stack suffix:
## type_expr type_constr
## LR(1) items:
type_expr -> type_expr type_constr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production type_expr -> type_expr type_constr
-- On UIDENT reduce production type_expr -> type_expr type_constr
-- On TYPE reduce production type_expr -> type_expr type_constr
-- On TOPVAR reduce production type_expr -> type_expr type_constr
-- On TOPDEF reduce production type_expr -> type_expr type_constr
-- On RARROW reduce production type_expr -> type_expr type_constr
-- On PIPE reduce production type_expr -> type_expr type_constr
-- On NL reduce production type_expr -> type_expr type_constr
-- On IDENT reduce production type_expr -> type_expr type_constr
-- On EXTERNAL reduce production type_expr -> type_expr type_constr
-- On EXCEPTION reduce production type_expr -> type_expr type_constr
-- On EOF reduce production type_expr -> type_expr type_constr
-- On AND reduce production type_expr -> type_expr type_constr

State 63:
## Known stack suffix:
## type_constr
## LR(1) items:
simple_type_expr -> type_constr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production simple_type_expr -> type_constr
-- On UIDENT reduce production simple_type_expr -> type_constr
-- On TYPE reduce production simple_type_expr -> type_constr
-- On TOPVAR reduce production simple_type_expr -> type_constr
-- On TOPDEF reduce production simple_type_expr -> type_constr
-- On RARROW reduce production simple_type_expr -> type_constr
-- On PIPE reduce production simple_type_expr -> type_constr
-- On NL reduce production simple_type_expr -> type_constr
-- On IDENT reduce production simple_type_expr -> type_constr
-- On EXTERNAL reduce production simple_type_expr -> type_constr
-- On EXCEPTION reduce production simple_type_expr -> type_constr
-- On EOF reduce production simple_type_expr -> type_constr
-- On AST reduce production simple_type_expr -> type_constr
-- On AND reduce production simple_type_expr -> type_constr

State 64:
## Known stack suffix:
## simple_type_expr
## LR(1) items:
type_expr -> simple_type_expr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
type_expr_tuple -> simple_type_expr . rev_type_expr_tuple_tail [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On AST shift to state 65
-- On rev_type_expr_tuple_tail shift to state 67
## Reductions:
-- On error reduce production type_expr -> simple_type_expr
-- On UIDENT reduce production type_expr -> simple_type_expr
-- On TYPE reduce production type_expr -> simple_type_expr
-- On TOPVAR reduce production type_expr -> simple_type_expr
-- On TOPDEF reduce production type_expr -> simple_type_expr
-- On RARROW reduce production type_expr -> simple_type_expr
-- On PIPE reduce production type_expr -> simple_type_expr
-- On NL reduce production type_expr -> simple_type_expr
-- On IDENT reduce production type_expr -> simple_type_expr
-- On EXTERNAL reduce production type_expr -> simple_type_expr
-- On EXCEPTION reduce production type_expr -> simple_type_expr
-- On EOF reduce production type_expr -> simple_type_expr
-- On AND reduce production type_expr -> simple_type_expr

State 65:
## Known stack suffix:
## AST
## LR(1) items:
rev_type_expr_tuple_tail -> AST . simple_type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 20
-- On LPAREN shift to state 21
-- On IDENT shift to state 53
-- On type_constr shift to state 63
-- On simple_type_expr shift to state 66
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:

State 66:
## Known stack suffix:
## AST simple_type_expr
## LR(1) items:
rev_type_expr_tuple_tail -> AST simple_type_expr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On UIDENT reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On TYPE reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On TOPVAR reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On TOPDEF reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On RARROW reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On PIPE reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On NL reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On IDENT reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On EXTERNAL reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On EXCEPTION reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On EOF reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On AST reduce production rev_type_expr_tuple_tail -> AST simple_type_expr
-- On AND reduce production rev_type_expr_tuple_tail -> AST simple_type_expr

State 67:
## Known stack suffix:
## simple_type_expr rev_type_expr_tuple_tail
## LR(1) items:
rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail . AST simple_type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On AST shift to state 68
## Reductions:
-- On error reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On UIDENT reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On TYPE reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On TOPVAR reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On TOPDEF reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On RARROW reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On PIPE reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On NL reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On IDENT reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On EXTERNAL reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On EXCEPTION reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On EOF reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail
-- On AND reduce production type_expr_tuple -> simple_type_expr rev_type_expr_tuple_tail

State 68:
## Known stack suffix:
## rev_type_expr_tuple_tail AST
## LR(1) items:
rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST . simple_type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 20
-- On LPAREN shift to state 21
-- On IDENT shift to state 53
-- On type_constr shift to state 63
-- On simple_type_expr shift to state 69
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:

State 69:
## Known stack suffix:
## rev_type_expr_tuple_tail AST simple_type_expr
## LR(1) items:
rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr . [ error UIDENT TYPE TOPVAR TOPDEF RARROW PIPE NL IDENT EXTERNAL EXCEPTION EOF AST AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On UIDENT reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On TYPE reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On TOPVAR reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On TOPDEF reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On RARROW reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On PIPE reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On NL reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On IDENT reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On EXTERNAL reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On EXCEPTION reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On EOF reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On AST reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr
-- On AND reduce production rev_type_expr_tuple_tail -> rev_type_expr_tuple_tail AST simple_type_expr

State 70:
## Known stack suffix:
## UIDENT constr_decl_type
## LR(1) items:
constr_decl -> UIDENT constr_decl_type . nl_opt [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On NL shift to state 71
-- On nl_opt shift to state 72
## Reductions:
-- On error reduce production nl_opt ->
-- On TYPE reduce production nl_opt ->
-- On TOPVAR reduce production nl_opt ->
-- On TOPDEF reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On EXTERNAL reduce production nl_opt ->
-- On EXCEPTION reduce production nl_opt ->
-- On EOF reduce production nl_opt ->
-- On AND reduce production nl_opt ->

State 71:
## Known stack suffix:
## NL
## LR(1) items:
nl_opt -> NL . [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production nl_opt -> NL
-- On TYPE reduce production nl_opt -> NL
-- On TOPVAR reduce production nl_opt -> NL
-- On TOPDEF reduce production nl_opt -> NL
-- On PIPE reduce production nl_opt -> NL
-- On NL reduce production nl_opt -> NL
-- On EXTERNAL reduce production nl_opt -> NL
-- On EXCEPTION reduce production nl_opt -> NL
-- On EOF reduce production nl_opt -> NL
-- On AND reduce production nl_opt -> NL

State 72:
## Known stack suffix:
## UIDENT constr_decl_type nl_opt
## LR(1) items:
constr_decl -> UIDENT constr_decl_type nl_opt . [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On TYPE reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On TOPVAR reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On TOPDEF reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On PIPE reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On NL reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On EXTERNAL reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On EXCEPTION reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On EOF reduce production constr_decl -> UIDENT constr_decl_type nl_opt
-- On AND reduce production constr_decl -> UIDENT constr_decl_type nl_opt

State 73:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt PIPE
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL nl_opt PIPE . constr_decls [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 74
-- On rev_constr_decls shift to state 75
-- On constr_decls shift to state 78
-- On constr_decl shift to state 79
## Reductions:

State 74:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_decl -> UIDENT . constr_decl_type nl_opt [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On OF shift to state 18
-- On constr_decl_type shift to state 70
## Reductions:
-- On error reduce production constr_decl_type ->
-- On TYPE reduce production constr_decl_type ->
-- On TOPVAR reduce production constr_decl_type ->
-- On TOPDEF reduce production constr_decl_type ->
-- On PIPE reduce production constr_decl_type ->
-- On NL reduce production constr_decl_type ->
-- On EXTERNAL reduce production constr_decl_type ->
-- On EXCEPTION reduce production constr_decl_type ->
-- On EOF reduce production constr_decl_type ->
-- On AND reduce production constr_decl_type ->

State 75:
## Known stack suffix:
## rev_constr_decls
## LR(1) items:
constr_decls -> rev_constr_decls . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
rev_constr_decls -> rev_constr_decls . PIPE constr_decl [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On PIPE shift to state 76
## Reductions:
-- On error reduce production constr_decls -> rev_constr_decls
-- On TYPE reduce production constr_decls -> rev_constr_decls
-- On TOPVAR reduce production constr_decls -> rev_constr_decls
-- On TOPDEF reduce production constr_decls -> rev_constr_decls
-- On NL reduce production constr_decls -> rev_constr_decls
-- On EXTERNAL reduce production constr_decls -> rev_constr_decls
-- On EXCEPTION reduce production constr_decls -> rev_constr_decls
-- On EOF reduce production constr_decls -> rev_constr_decls
-- On AND reduce production constr_decls -> rev_constr_decls

State 76:
## Known stack suffix:
## rev_constr_decls PIPE
## LR(1) items:
rev_constr_decls -> rev_constr_decls PIPE . constr_decl [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 74
-- On constr_decl shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## rev_constr_decls PIPE constr_decl
## LR(1) items:
rev_constr_decls -> rev_constr_decls PIPE constr_decl . [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On TYPE reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On TOPVAR reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On TOPDEF reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On PIPE reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On NL reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On EXTERNAL reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On EXCEPTION reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On EOF reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl
-- On AND reduce production rev_constr_decls -> rev_constr_decls PIPE constr_decl

State 78:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On TYPE reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On TOPVAR reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On TOPDEF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On NL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On EXTERNAL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On EXCEPTION reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On EOF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls
-- On AND reduce production typedef -> type_params_opt IDENT EQUAL nl_opt PIPE constr_decls

State 79:
## Known stack suffix:
## constr_decl
## LR(1) items:
rev_constr_decls -> constr_decl . [ error TYPE TOPVAR TOPDEF PIPE NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_constr_decls -> constr_decl
-- On TYPE reduce production rev_constr_decls -> constr_decl
-- On TOPVAR reduce production rev_constr_decls -> constr_decl
-- On TOPDEF reduce production rev_constr_decls -> constr_decl
-- On PIPE reduce production rev_constr_decls -> constr_decl
-- On NL reduce production rev_constr_decls -> constr_decl
-- On EXTERNAL reduce production rev_constr_decls -> constr_decl
-- On EXCEPTION reduce production rev_constr_decls -> constr_decl
-- On EOF reduce production rev_constr_decls -> constr_decl
-- On AND reduce production rev_constr_decls -> constr_decl

State 80:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt LBRACE
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE . field_decls RBRACE [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On NL shift to state 81
-- On IDENT shift to state 82
-- On rev_field_decls shift to state 93
-- On field_decls shift to state 97
-- On field_decl shift to state 92
## Reductions:

State 81:
## Known stack suffix:
## NL
## LR(1) items:
field_decls -> NL . rev_field_decls nl_opt [ RBRACE ]
field_decls -> NL . rev_field_decls COMMA nl_opt [ RBRACE ]
## Transitions:
-- On IDENT shift to state 82
-- On rev_field_decls shift to state 85
-- On field_decl shift to state 92
## Reductions:

State 82:
## Known stack suffix:
## IDENT
## LR(1) items:
field_decl -> IDENT . COLON type_expr [ RBRACE NL COMMA ]
## Transitions:
-- On COLON shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
field_decl -> IDENT COLON . type_expr [ RBRACE NL COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_expr_tuple shift to state 25
-- On type_expr shift to state 84
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 37
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 84:
## Known stack suffix:
## IDENT COLON type_expr
## LR(1) items:
field_decl -> IDENT COLON type_expr . [ RBRACE NL COMMA ]
type_expr -> type_expr . type_constr [ UIDENT RBRACE RARROW NL IDENT COMMA ]
type_expr -> type_expr . RARROW type_expr [ UIDENT RBRACE RARROW NL IDENT COMMA ]
## Transitions:
-- On UIDENT shift to state 19
-- On RARROW shift to state 28
-- On IDENT shift to state 24
-- On type_constr shift to state 30
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:
-- On RBRACE reduce production field_decl -> IDENT COLON type_expr
-- On NL reduce production field_decl -> IDENT COLON type_expr
-- On COMMA reduce production field_decl -> IDENT COLON type_expr

State 85:
## Known stack suffix:
## NL rev_field_decls
## LR(1) items:
field_decls -> NL rev_field_decls . nl_opt [ RBRACE ]
field_decls -> NL rev_field_decls . COMMA nl_opt [ RBRACE ]
rev_field_decls -> rev_field_decls . COMMA field_decl [ RBRACE NL COMMA ]
rev_field_decls -> rev_field_decls . COMMA NL field_decl [ RBRACE NL COMMA ]
## Transitions:
-- On NL shift to state 15
-- On COMMA shift to state 86
-- On nl_opt shift to state 91
## Reductions:
-- On RBRACE reduce production nl_opt ->

State 86:
## Known stack suffix:
## NL rev_field_decls COMMA
## LR(1) items:
field_decls -> NL rev_field_decls COMMA . nl_opt [ RBRACE ]
rev_field_decls -> rev_field_decls COMMA . field_decl [ RBRACE NL COMMA ]
rev_field_decls -> rev_field_decls COMMA . NL field_decl [ RBRACE NL COMMA ]
## Transitions:
-- On NL shift to state 87
-- On IDENT shift to state 82
-- On nl_opt shift to state 89
-- On field_decl shift to state 90
## Reductions:
-- On RBRACE reduce production nl_opt ->

State 87:
## Known stack suffix:
## rev_field_decls COMMA NL
## LR(1) items:
nl_opt -> NL . [ RBRACE ]
rev_field_decls -> rev_field_decls COMMA NL . field_decl [ RBRACE NL COMMA ]
## Transitions:
-- On IDENT shift to state 82
-- On field_decl shift to state 88
## Reductions:
-- On RBRACE reduce production nl_opt -> NL

State 88:
## Known stack suffix:
## rev_field_decls COMMA NL field_decl
## LR(1) items:
rev_field_decls -> rev_field_decls COMMA NL field_decl . [ RBRACE NL COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production rev_field_decls -> rev_field_decls COMMA NL field_decl
-- On NL reduce production rev_field_decls -> rev_field_decls COMMA NL field_decl
-- On COMMA reduce production rev_field_decls -> rev_field_decls COMMA NL field_decl

State 89:
## Known stack suffix:
## NL rev_field_decls COMMA nl_opt
## LR(1) items:
field_decls -> NL rev_field_decls COMMA nl_opt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production field_decls -> NL rev_field_decls COMMA nl_opt

State 90:
## Known stack suffix:
## rev_field_decls COMMA field_decl
## LR(1) items:
rev_field_decls -> rev_field_decls COMMA field_decl . [ RBRACE NL COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production rev_field_decls -> rev_field_decls COMMA field_decl
-- On NL reduce production rev_field_decls -> rev_field_decls COMMA field_decl
-- On COMMA reduce production rev_field_decls -> rev_field_decls COMMA field_decl

State 91:
## Known stack suffix:
## NL rev_field_decls nl_opt
## LR(1) items:
field_decls -> NL rev_field_decls nl_opt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production field_decls -> NL rev_field_decls nl_opt

State 92:
## Known stack suffix:
## field_decl
## LR(1) items:
rev_field_decls -> field_decl . [ RBRACE NL COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production rev_field_decls -> field_decl
-- On NL reduce production rev_field_decls -> field_decl
-- On COMMA reduce production rev_field_decls -> field_decl

State 93:
## Known stack suffix:
## rev_field_decls
## LR(1) items:
field_decls -> rev_field_decls . nl_opt [ RBRACE ]
field_decls -> rev_field_decls . COMMA nl_opt [ RBRACE ]
rev_field_decls -> rev_field_decls . COMMA field_decl [ RBRACE NL COMMA ]
rev_field_decls -> rev_field_decls . COMMA NL field_decl [ RBRACE NL COMMA ]
## Transitions:
-- On NL shift to state 15
-- On COMMA shift to state 94
-- On nl_opt shift to state 96
## Reductions:
-- On RBRACE reduce production nl_opt ->

State 94:
## Known stack suffix:
## rev_field_decls COMMA
## LR(1) items:
field_decls -> rev_field_decls COMMA . nl_opt [ RBRACE ]
rev_field_decls -> rev_field_decls COMMA . field_decl [ RBRACE NL COMMA ]
rev_field_decls -> rev_field_decls COMMA . NL field_decl [ RBRACE NL COMMA ]
## Transitions:
-- On NL shift to state 87
-- On IDENT shift to state 82
-- On nl_opt shift to state 95
-- On field_decl shift to state 90
## Reductions:
-- On RBRACE reduce production nl_opt ->

State 95:
## Known stack suffix:
## rev_field_decls COMMA nl_opt
## LR(1) items:
field_decls -> rev_field_decls COMMA nl_opt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production field_decls -> rev_field_decls COMMA nl_opt

State 96:
## Known stack suffix:
## rev_field_decls nl_opt
## LR(1) items:
field_decls -> rev_field_decls nl_opt . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production field_decls -> rev_field_decls nl_opt

State 97:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt LBRACE field_decls
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls . RBRACE [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On RBRACE shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On TYPE reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On TOPVAR reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On TOPDEF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On NL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On EXTERNAL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On EXCEPTION reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On EOF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE
-- On AND reduce production typedef -> type_params_opt IDENT EQUAL nl_opt LBRACE field_decls RBRACE

State 99:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt type_expr
## LR(1) items:
type_expr -> type_expr . type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW NL IDENT EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . RARROW type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW NL IDENT EXTERNAL EXCEPTION EOF AND ]
typedef -> type_params_opt IDENT EQUAL nl_opt type_expr . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On RARROW shift to state 60
-- On IDENT shift to state 53
-- On type_constr shift to state 62
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:
-- On error reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On TYPE reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On TOPVAR reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On TOPDEF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On NL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On EXTERNAL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On EXCEPTION reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On EOF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr
-- On AND reduce production typedef -> type_params_opt IDENT EQUAL nl_opt type_expr

State 100:
## Known stack suffix:
## type_params_opt IDENT EQUAL nl_opt constr_decls
## LR(1) items:
typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On TYPE reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On TOPVAR reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On TOPDEF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On NL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On EXTERNAL reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On EXCEPTION reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On EOF reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls
-- On AND reduce production typedef -> type_params_opt IDENT EQUAL nl_opt constr_decls

State 101:
## Known stack suffix:
## type_params
## LR(1) items:
type_params_opt -> type_params . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT reduce production type_params_opt -> type_params

State 102:
## Known stack suffix:
## type_param
## LR(1) items:
type_params -> type_param . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT reduce production type_params -> type_param

State 103:
## Known stack suffix:
## TOPVAR
## LR(1) items:
definition -> TOPVAR . IDENT EQUAL nl_opt expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
definition -> TOPVAR . sigdef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On IDENT shift to state 104
-- On sigdef shift to state 653
## Reductions:

State 104:
## Known stack suffix:
## TOPVAR IDENT
## LR(1) items:
definition -> TOPVAR IDENT . EQUAL nl_opt expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
sigdef -> IDENT . COLON type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On EQUAL shift to state 105
-- On COLON shift to state 651
## Reductions:

State 105:
## Known stack suffix:
## TOPVAR IDENT EQUAL
## LR(1) items:
definition -> TOPVAR IDENT EQUAL . nl_opt expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 106
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 106:
## Known stack suffix:
## TOPVAR IDENT EQUAL nl_opt
## LR(1) items:
definition -> TOPVAR IDENT EQUAL nl_opt . expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 650
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 107:
## Known stack suffix:
## VAR
## LR(1) items:
expr -> VAR . IDENT EQUAL nl_opt expr term block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On IDENT shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## VAR IDENT
## LR(1) items:
expr -> VAR IDENT . EQUAL nl_opt expr term block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On EQUAL shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## VAR IDENT EQUAL
## LR(1) items:
expr -> VAR IDENT EQUAL . nl_opt expr term block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 110
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 110:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt
## LR(1) items:
expr -> VAR IDENT EQUAL nl_opt . expr term block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 444
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 111:
## Known stack suffix:
## VAR
## LR(1) items:
expr -> VAR . IDENT EQUAL nl_opt expr term block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On IDENT shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## VAR IDENT
## LR(1) items:
expr -> VAR IDENT . EQUAL nl_opt expr term block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On EQUAL shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## VAR IDENT EQUAL
## LR(1) items:
expr -> VAR IDENT EQUAL . nl_opt expr term block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 114
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 114:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt
## LR(1) items:
expr -> VAR IDENT EQUAL nl_opt . expr term block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 439
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 115:
## Known stack suffix:
## UIDENT
## LR(1) items:
expr -> UIDENT . simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
primary -> UIDENT . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_module_path -> UIDENT . DOT [ UIDENT IDENT ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 438
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
## Reductions:
-- On WITH reduce production primary -> UIDENT
-- On UARROW reduce production primary -> UIDENT
-- On TO reduce production primary -> UIDENT
-- On THEN reduce production primary -> UIDENT
-- On SLASH_DOT reduce production primary -> UIDENT
-- On SLASH reduce production primary -> UIDENT
-- On SEMI reduce production primary -> UIDENT
-- On RPAREN reduce production primary -> UIDENT
-- On RBRACK reduce production primary -> UIDENT
-- On RBRACE reduce production primary -> UIDENT
-- On PLUS_DOT reduce production primary -> UIDENT
-- On PLUS reduce production primary -> UIDENT
-- On PIPE reduce production primary -> UIDENT
-- On NL reduce production primary -> UIDENT
-- On MOD reduce production primary -> UIDENT
-- On MINUS_DOT reduce production primary -> UIDENT
-- On MINUS reduce production primary -> UIDENT
-- On LOR reduce production primary -> UIDENT
-- On LESS_GREATER reduce production primary -> UIDENT
-- On LESS_EQUAL reduce production primary -> UIDENT
-- On LESS reduce production primary -> UIDENT
-- On LAND reduce production primary -> UIDENT
-- On IN reduce production primary -> UIDENT
-- On GREATER_EQUAL reduce production primary -> UIDENT
-- On GREATER reduce production primary -> UIDENT
-- On EQUAL reduce production primary -> UIDENT
-- On END reduce production primary -> UIDENT
-- On ELSE reduce production primary -> UIDENT
-- On DOT reduce production primary -> UIDENT
-- On DOL reduce production primary -> UIDENT
-- On DO reduce production primary -> UIDENT
-- On CONS reduce production primary -> UIDENT
-- On COMMA reduce production primary -> UIDENT
-- On AST_DOT reduce production primary -> UIDENT
-- On AST reduce production primary -> UIDENT

State 116:
## Known stack suffix:
## UIDENT
## LR(1) items:
primary -> UIDENT . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_module_path -> UIDENT . DOT [ UIDENT IDENT ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> UIDENT
-- On UIDENT reduce production primary -> UIDENT
-- On UARROW reduce production primary -> UIDENT
-- On TO reduce production primary -> UIDENT
-- On THEN reduce production primary -> UIDENT
-- On STRING reduce production primary -> UIDENT
-- On SLASH_DOT reduce production primary -> UIDENT
-- On SLASH reduce production primary -> UIDENT
-- On SEMI reduce production primary -> UIDENT
-- On RPAREN reduce production primary -> UIDENT
-- On RBRACK reduce production primary -> UIDENT
-- On RBRACE reduce production primary -> UIDENT
-- On PLUS_DOT reduce production primary -> UIDENT
-- On PLUS reduce production primary -> UIDENT
-- On PIPE reduce production primary -> UIDENT
-- On NL reduce production primary -> UIDENT
-- On MOD reduce production primary -> UIDENT
-- On MINUS_DOT reduce production primary -> UIDENT
-- On MINUS reduce production primary -> UIDENT
-- On LPAREN reduce production primary -> UIDENT
-- On LOR reduce production primary -> UIDENT
-- On LESS_LESS reduce production primary -> UIDENT
-- On LESS_GREATER reduce production primary -> UIDENT
-- On LESS_EQUAL reduce production primary -> UIDENT
-- On LESS reduce production primary -> UIDENT
-- On LBRACK reduce production primary -> UIDENT
-- On LAND reduce production primary -> UIDENT
-- On INT reduce production primary -> UIDENT
-- On IN reduce production primary -> UIDENT
-- On IDENT reduce production primary -> UIDENT
-- On GREATER_EQUAL reduce production primary -> UIDENT
-- On GREATER reduce production primary -> UIDENT
-- On FLOAT reduce production primary -> UIDENT
-- On EXCL reduce production primary -> UIDENT
-- On EQUAL reduce production primary -> UIDENT
-- On END reduce production primary -> UIDENT
-- On ELSE reduce production primary -> UIDENT
-- On DOT reduce production primary -> UIDENT
-- On DOL reduce production primary -> UIDENT
-- On DO reduce production primary -> UIDENT
-- On CONS reduce production primary -> UIDENT
-- On COMMA reduce production primary -> UIDENT
-- On CHAR reduce production primary -> UIDENT
-- On BOOL reduce production primary -> UIDENT
-- On ATOM reduce production primary -> UIDENT
-- On AST_DOT reduce production primary -> UIDENT
-- On AST reduce production primary -> UIDENT

State 117:
## Known stack suffix:
## STRING
## LR(1) items:
primary -> STRING . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> STRING
-- On UIDENT reduce production primary -> STRING
-- On UARROW reduce production primary -> STRING
-- On TO reduce production primary -> STRING
-- On THEN reduce production primary -> STRING
-- On STRING reduce production primary -> STRING
-- On SLASH_DOT reduce production primary -> STRING
-- On SLASH reduce production primary -> STRING
-- On SEMI reduce production primary -> STRING
-- On RPAREN reduce production primary -> STRING
-- On RBRACK reduce production primary -> STRING
-- On RBRACE reduce production primary -> STRING
-- On PLUS_DOT reduce production primary -> STRING
-- On PLUS reduce production primary -> STRING
-- On PIPE reduce production primary -> STRING
-- On NL reduce production primary -> STRING
-- On MOD reduce production primary -> STRING
-- On MINUS_DOT reduce production primary -> STRING
-- On MINUS reduce production primary -> STRING
-- On LPAREN reduce production primary -> STRING
-- On LOR reduce production primary -> STRING
-- On LESS_LESS reduce production primary -> STRING
-- On LESS_GREATER reduce production primary -> STRING
-- On LESS_EQUAL reduce production primary -> STRING
-- On LESS reduce production primary -> STRING
-- On LBRACK reduce production primary -> STRING
-- On LAND reduce production primary -> STRING
-- On INT reduce production primary -> STRING
-- On IN reduce production primary -> STRING
-- On IDENT reduce production primary -> STRING
-- On GREATER_EQUAL reduce production primary -> STRING
-- On GREATER reduce production primary -> STRING
-- On FLOAT reduce production primary -> STRING
-- On EXCL reduce production primary -> STRING
-- On EQUAL reduce production primary -> STRING
-- On END reduce production primary -> STRING
-- On ELSE reduce production primary -> STRING
-- On DOT reduce production primary -> STRING
-- On DOL reduce production primary -> STRING
-- On DO reduce production primary -> STRING
-- On CONS reduce production primary -> STRING
-- On COMMA reduce production primary -> STRING
-- On CHAR reduce production primary -> STRING
-- On BOOL reduce production primary -> STRING
-- On ATOM reduce production primary -> STRING
-- On AST_DOT reduce production primary -> STRING
-- On AST reduce production primary -> STRING

State 118:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary -> LPAREN . expr RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
primary -> LPAREN . RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RPAREN shift to state 194
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 437
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 119:
## Known stack suffix:
## TRY
## LR(1) items:
expr -> TRY . nl_opt expr nl_opt WITH nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 120
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 120:
## Known stack suffix:
## TRY nl_opt
## LR(1) items:
expr -> TRY nl_opt . expr nl_opt WITH nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 431
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 121:
## Known stack suffix:
## RETURN
## LR(1) items:
expr -> RETURN . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 430
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 122:
## Known stack suffix:
## RECEIVE
## LR(1) items:
expr -> RECEIVE . nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 123
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 123:
## Known stack suffix:
## RECEIVE nl_opt
## LR(1) items:
expr -> RECEIVE nl_opt . pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 428
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 124:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_name -> UIDENT . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
rev_module_path -> UIDENT . DOT [ UIDENT ]
## Transitions:
-- On DOT shift to state 125
## Reductions:
-- On UIDENT reduce production constr_name -> UIDENT
-- On STRING reduce production constr_name -> UIDENT
-- On RPAREN reduce production constr_name -> UIDENT
-- On RBRACK reduce production constr_name -> UIDENT
-- On RBRACE reduce production constr_name -> UIDENT
-- On RARROW reduce production constr_name -> UIDENT
-- On PIPE reduce production constr_name -> UIDENT
-- On LPAREN reduce production constr_name -> UIDENT
-- On LBRACK reduce production constr_name -> UIDENT
-- On LBRACE reduce production constr_name -> UIDENT
-- On INT reduce production constr_name -> UIDENT
-- On IDENT reduce production constr_name -> UIDENT
-- On FLOAT reduce production constr_name -> UIDENT
-- On EQUAL reduce production constr_name -> UIDENT
-- On CONS reduce production constr_name -> UIDENT
-- On COMMA reduce production constr_name -> UIDENT
-- On COLON reduce production constr_name -> UIDENT
-- On BOOL reduce production constr_name -> UIDENT
-- On ATOM reduce production constr_name -> UIDENT
-- On AS reduce production constr_name -> UIDENT

State 125:
## Known stack suffix:
## UIDENT DOT
## LR(1) items:
rev_module_path -> UIDENT DOT . [ UIDENT IDENT ]
## Transitions:
## Reductions:
-- On UIDENT reduce production rev_module_path -> UIDENT DOT
-- On IDENT reduce production rev_module_path -> UIDENT DOT

State 126:
## Known stack suffix:
## STRING
## LR(1) items:
pattern -> STRING . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> STRING
-- On STRING reduce production pattern -> STRING
-- On RPAREN reduce production pattern -> STRING
-- On RBRACK reduce production pattern -> STRING
-- On RBRACE reduce production pattern -> STRING
-- On RARROW reduce production pattern -> STRING
-- On PIPE reduce production pattern -> STRING
-- On LPAREN reduce production pattern -> STRING
-- On LBRACK reduce production pattern -> STRING
-- On LBRACE reduce production pattern -> STRING
-- On INT reduce production pattern -> STRING
-- On IDENT reduce production pattern -> STRING
-- On FLOAT reduce production pattern -> STRING
-- On EQUAL reduce production pattern -> STRING
-- On CONS reduce production pattern -> STRING
-- On COMMA reduce production pattern -> STRING
-- On COLON reduce production pattern -> STRING
-- On BOOL reduce production pattern -> STRING
-- On ATOM reduce production pattern -> STRING
-- On AS reduce production pattern -> STRING

State 127:
## Known stack suffix:
## PIPE
## LR(1) items:
rev_pattern_matching -> PIPE . rev_pattern_matching_elts [ END ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 180
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 331
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 128:
## Known stack suffix:
## LPAREN
## LR(1) items:
pattern -> LPAREN . RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> LPAREN . pattern RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> LPAREN . pattern COLON type_expr RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> LPAREN . tuple_pattern RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On RPAREN shift to state 129
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On tuple_pattern shift to state 168
-- On rev_tuple_pattern shift to state 170
-- On rev_module_path shift to state 140
-- On pattern shift to state 173
-- On constr_name shift to state 146
## Reductions:

State 129:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
pattern -> LPAREN RPAREN . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> LPAREN RPAREN
-- On STRING reduce production pattern -> LPAREN RPAREN
-- On RPAREN reduce production pattern -> LPAREN RPAREN
-- On RBRACK reduce production pattern -> LPAREN RPAREN
-- On RBRACE reduce production pattern -> LPAREN RPAREN
-- On RARROW reduce production pattern -> LPAREN RPAREN
-- On PIPE reduce production pattern -> LPAREN RPAREN
-- On LPAREN reduce production pattern -> LPAREN RPAREN
-- On LBRACK reduce production pattern -> LPAREN RPAREN
-- On LBRACE reduce production pattern -> LPAREN RPAREN
-- On INT reduce production pattern -> LPAREN RPAREN
-- On IDENT reduce production pattern -> LPAREN RPAREN
-- On FLOAT reduce production pattern -> LPAREN RPAREN
-- On EQUAL reduce production pattern -> LPAREN RPAREN
-- On CONS reduce production pattern -> LPAREN RPAREN
-- On COMMA reduce production pattern -> LPAREN RPAREN
-- On COLON reduce production pattern -> LPAREN RPAREN
-- On BOOL reduce production pattern -> LPAREN RPAREN
-- On ATOM reduce production pattern -> LPAREN RPAREN
-- On AS reduce production pattern -> LPAREN RPAREN

State 130:
## Known stack suffix:
## LBRACK
## LR(1) items:
pattern -> LBRACK . list_pattern RBRACK [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> LBRACK . PIPE list_pattern PIPE RBRACK [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 131
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On rev_list_pattern_elts shift to state 159
-- On pattern shift to state 162
-- On list_pattern shift to state 166
-- On constr_name shift to state 146
## Reductions:
-- On RBRACK reduce production list_pattern ->

State 131:
## Known stack suffix:
## LBRACK PIPE
## LR(1) items:
pattern -> LBRACK PIPE . list_pattern PIPE RBRACK [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On rev_list_pattern_elts shift to state 159
-- On pattern shift to state 162
-- On list_pattern shift to state 163
-- On constr_name shift to state 146
## Reductions:
-- On PIPE reduce production list_pattern ->

State 132:
## Known stack suffix:
## LBRACE
## LR(1) items:
pattern -> LBRACE . field_patterns RBRACE [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On IDENT shift to state 133
-- On field_patterns shift to state 151
-- On field_pattern shift to state 153
## Reductions:

State 133:
## Known stack suffix:
## IDENT
## LR(1) items:
field_pattern -> IDENT . EQUAL pattern [ RBRACE COMMA ]
## Transitions:
-- On EQUAL shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
field_pattern -> IDENT EQUAL . pattern [ RBRACE COMMA ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 143
-- On constr_name shift to state 146
## Reductions:

State 135:
## Known stack suffix:
## INT
## LR(1) items:
pattern -> INT . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> INT
-- On STRING reduce production pattern -> INT
-- On RPAREN reduce production pattern -> INT
-- On RBRACK reduce production pattern -> INT
-- On RBRACE reduce production pattern -> INT
-- On RARROW reduce production pattern -> INT
-- On PIPE reduce production pattern -> INT
-- On LPAREN reduce production pattern -> INT
-- On LBRACK reduce production pattern -> INT
-- On LBRACE reduce production pattern -> INT
-- On INT reduce production pattern -> INT
-- On IDENT reduce production pattern -> INT
-- On FLOAT reduce production pattern -> INT
-- On EQUAL reduce production pattern -> INT
-- On CONS reduce production pattern -> INT
-- On COMMA reduce production pattern -> INT
-- On COLON reduce production pattern -> INT
-- On BOOL reduce production pattern -> INT
-- On ATOM reduce production pattern -> INT
-- On AS reduce production pattern -> INT

State 136:
## Known stack suffix:
## IDENT
## LR(1) items:
pattern -> IDENT . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> IDENT
-- On STRING reduce production pattern -> IDENT
-- On RPAREN reduce production pattern -> IDENT
-- On RBRACK reduce production pattern -> IDENT
-- On RBRACE reduce production pattern -> IDENT
-- On RARROW reduce production pattern -> IDENT
-- On PIPE reduce production pattern -> IDENT
-- On LPAREN reduce production pattern -> IDENT
-- On LBRACK reduce production pattern -> IDENT
-- On LBRACE reduce production pattern -> IDENT
-- On INT reduce production pattern -> IDENT
-- On IDENT reduce production pattern -> IDENT
-- On FLOAT reduce production pattern -> IDENT
-- On EQUAL reduce production pattern -> IDENT
-- On CONS reduce production pattern -> IDENT
-- On COMMA reduce production pattern -> IDENT
-- On COLON reduce production pattern -> IDENT
-- On BOOL reduce production pattern -> IDENT
-- On ATOM reduce production pattern -> IDENT
-- On AS reduce production pattern -> IDENT

State 137:
## Known stack suffix:
## FLOAT
## LR(1) items:
pattern -> FLOAT . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> FLOAT
-- On STRING reduce production pattern -> FLOAT
-- On RPAREN reduce production pattern -> FLOAT
-- On RBRACK reduce production pattern -> FLOAT
-- On RBRACE reduce production pattern -> FLOAT
-- On RARROW reduce production pattern -> FLOAT
-- On PIPE reduce production pattern -> FLOAT
-- On LPAREN reduce production pattern -> FLOAT
-- On LBRACK reduce production pattern -> FLOAT
-- On LBRACE reduce production pattern -> FLOAT
-- On INT reduce production pattern -> FLOAT
-- On IDENT reduce production pattern -> FLOAT
-- On FLOAT reduce production pattern -> FLOAT
-- On EQUAL reduce production pattern -> FLOAT
-- On CONS reduce production pattern -> FLOAT
-- On COMMA reduce production pattern -> FLOAT
-- On COLON reduce production pattern -> FLOAT
-- On BOOL reduce production pattern -> FLOAT
-- On ATOM reduce production pattern -> FLOAT
-- On AS reduce production pattern -> FLOAT

State 138:
## Known stack suffix:
## BOOL
## LR(1) items:
pattern -> BOOL . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> BOOL
-- On STRING reduce production pattern -> BOOL
-- On RPAREN reduce production pattern -> BOOL
-- On RBRACK reduce production pattern -> BOOL
-- On RBRACE reduce production pattern -> BOOL
-- On RARROW reduce production pattern -> BOOL
-- On PIPE reduce production pattern -> BOOL
-- On LPAREN reduce production pattern -> BOOL
-- On LBRACK reduce production pattern -> BOOL
-- On LBRACE reduce production pattern -> BOOL
-- On INT reduce production pattern -> BOOL
-- On IDENT reduce production pattern -> BOOL
-- On FLOAT reduce production pattern -> BOOL
-- On EQUAL reduce production pattern -> BOOL
-- On CONS reduce production pattern -> BOOL
-- On COMMA reduce production pattern -> BOOL
-- On COLON reduce production pattern -> BOOL
-- On BOOL reduce production pattern -> BOOL
-- On ATOM reduce production pattern -> BOOL
-- On AS reduce production pattern -> BOOL

State 139:
## Known stack suffix:
## ATOM
## LR(1) items:
pattern -> ATOM . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> ATOM
-- On STRING reduce production pattern -> ATOM
-- On RPAREN reduce production pattern -> ATOM
-- On RBRACK reduce production pattern -> ATOM
-- On RBRACE reduce production pattern -> ATOM
-- On RARROW reduce production pattern -> ATOM
-- On PIPE reduce production pattern -> ATOM
-- On LPAREN reduce production pattern -> ATOM
-- On LBRACK reduce production pattern -> ATOM
-- On LBRACE reduce production pattern -> ATOM
-- On INT reduce production pattern -> ATOM
-- On IDENT reduce production pattern -> ATOM
-- On FLOAT reduce production pattern -> ATOM
-- On EQUAL reduce production pattern -> ATOM
-- On CONS reduce production pattern -> ATOM
-- On COMMA reduce production pattern -> ATOM
-- On COLON reduce production pattern -> ATOM
-- On BOOL reduce production pattern -> ATOM
-- On ATOM reduce production pattern -> ATOM
-- On AS reduce production pattern -> ATOM

State 140:
## Known stack suffix:
## rev_module_path
## LR(1) items:
constr_name -> rev_module_path . UIDENT [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
rev_module_path -> rev_module_path . UIDENT DOT [ UIDENT ]
## Transitions:
-- On UIDENT shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## rev_module_path UIDENT
## LR(1) items:
constr_name -> rev_module_path UIDENT . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
rev_module_path -> rev_module_path UIDENT . DOT [ UIDENT ]
## Transitions:
-- On DOT shift to state 142
## Reductions:
-- On UIDENT reduce production constr_name -> rev_module_path UIDENT
-- On STRING reduce production constr_name -> rev_module_path UIDENT
-- On RPAREN reduce production constr_name -> rev_module_path UIDENT
-- On RBRACK reduce production constr_name -> rev_module_path UIDENT
-- On RBRACE reduce production constr_name -> rev_module_path UIDENT
-- On RARROW reduce production constr_name -> rev_module_path UIDENT
-- On PIPE reduce production constr_name -> rev_module_path UIDENT
-- On LPAREN reduce production constr_name -> rev_module_path UIDENT
-- On LBRACK reduce production constr_name -> rev_module_path UIDENT
-- On LBRACE reduce production constr_name -> rev_module_path UIDENT
-- On INT reduce production constr_name -> rev_module_path UIDENT
-- On IDENT reduce production constr_name -> rev_module_path UIDENT
-- On FLOAT reduce production constr_name -> rev_module_path UIDENT
-- On EQUAL reduce production constr_name -> rev_module_path UIDENT
-- On CONS reduce production constr_name -> rev_module_path UIDENT
-- On COMMA reduce production constr_name -> rev_module_path UIDENT
-- On COLON reduce production constr_name -> rev_module_path UIDENT
-- On BOOL reduce production constr_name -> rev_module_path UIDENT
-- On ATOM reduce production constr_name -> rev_module_path UIDENT
-- On AS reduce production constr_name -> rev_module_path UIDENT

State 142:
## Known stack suffix:
## rev_module_path UIDENT DOT
## LR(1) items:
rev_module_path -> rev_module_path UIDENT DOT . [ UIDENT IDENT ]
## Transitions:
## Reductions:
-- On UIDENT reduce production rev_module_path -> rev_module_path UIDENT DOT
-- On IDENT reduce production rev_module_path -> rev_module_path UIDENT DOT

State 143:
## Known stack suffix:
## IDENT EQUAL pattern
## LR(1) items:
field_pattern -> IDENT EQUAL pattern . [ RBRACE COMMA ]
pattern -> pattern . AS value_name [ RBRACE CONS COMMA AS ]
pattern -> pattern . CONS pattern [ RBRACE CONS COMMA AS ]
## Transitions:
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:
-- On RBRACE reduce production field_pattern -> IDENT EQUAL pattern
-- On COMMA reduce production field_pattern -> IDENT EQUAL pattern

State 144:
## Known stack suffix:
## pattern CONS
## LR(1) items:
pattern -> pattern CONS . pattern [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 145
-- On constr_name shift to state 146
## Reductions:

State 145:
## Known stack suffix:
## pattern CONS pattern
## LR(1) items:
pattern -> pattern . AS value_name [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> pattern . CONS pattern [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> pattern CONS pattern . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On CONS shift to state 144
## Reductions:
-- On UIDENT reduce production pattern -> pattern CONS pattern
-- On STRING reduce production pattern -> pattern CONS pattern
-- On RPAREN reduce production pattern -> pattern CONS pattern
-- On RBRACK reduce production pattern -> pattern CONS pattern
-- On RBRACE reduce production pattern -> pattern CONS pattern
-- On RARROW reduce production pattern -> pattern CONS pattern
-- On PIPE reduce production pattern -> pattern CONS pattern
-- On LPAREN reduce production pattern -> pattern CONS pattern
-- On LBRACK reduce production pattern -> pattern CONS pattern
-- On LBRACE reduce production pattern -> pattern CONS pattern
-- On INT reduce production pattern -> pattern CONS pattern
-- On IDENT reduce production pattern -> pattern CONS pattern
-- On FLOAT reduce production pattern -> pattern CONS pattern
-- On EQUAL reduce production pattern -> pattern CONS pattern
-- On COMMA reduce production pattern -> pattern CONS pattern
-- On COLON reduce production pattern -> pattern CONS pattern
-- On BOOL reduce production pattern -> pattern CONS pattern
-- On ATOM reduce production pattern -> pattern CONS pattern
-- On AS reduce production pattern -> pattern CONS pattern

State 146:
## Known stack suffix:
## constr_name
## LR(1) items:
pattern -> constr_name . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> constr_name . pattern [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 147
-- On constr_name shift to state 146
## Reductions:
-- On RPAREN reduce production pattern -> constr_name
-- On RBRACK reduce production pattern -> constr_name
-- On RBRACE reduce production pattern -> constr_name
-- On RARROW reduce production pattern -> constr_name
-- On PIPE reduce production pattern -> constr_name
-- On EQUAL reduce production pattern -> constr_name
-- On CONS reduce production pattern -> constr_name
-- On COMMA reduce production pattern -> constr_name
-- On COLON reduce production pattern -> constr_name
-- On AS reduce production pattern -> constr_name

State 147:
## Known stack suffix:
## constr_name pattern
## LR(1) items:
pattern -> pattern . AS value_name [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> constr_name pattern . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> pattern . CONS pattern [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On CONS shift to state 144
## Reductions:
-- On UIDENT reduce production pattern -> constr_name pattern
-- On STRING reduce production pattern -> constr_name pattern
-- On RPAREN reduce production pattern -> constr_name pattern
-- On RBRACK reduce production pattern -> constr_name pattern
-- On RBRACE reduce production pattern -> constr_name pattern
-- On RARROW reduce production pattern -> constr_name pattern
-- On PIPE reduce production pattern -> constr_name pattern
-- On LPAREN reduce production pattern -> constr_name pattern
-- On LBRACK reduce production pattern -> constr_name pattern
-- On LBRACE reduce production pattern -> constr_name pattern
-- On INT reduce production pattern -> constr_name pattern
-- On IDENT reduce production pattern -> constr_name pattern
-- On FLOAT reduce production pattern -> constr_name pattern
-- On EQUAL reduce production pattern -> constr_name pattern
-- On COMMA reduce production pattern -> constr_name pattern
-- On COLON reduce production pattern -> constr_name pattern
-- On BOOL reduce production pattern -> constr_name pattern
-- On ATOM reduce production pattern -> constr_name pattern
-- On AS reduce production pattern -> constr_name pattern

State 148:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . value_name [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On IDENT shift to state 149
-- On value_name shift to state 150
## Reductions:

State 149:
## Known stack suffix:
## IDENT
## LR(1) items:
value_name -> IDENT . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE RARROW PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LBRACE LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA COLON CHAR BOOL ATOM AST_DOT AST ASSIGN AS ]
## Transitions:
## Reductions:
-- On WITH reduce production value_name -> IDENT
-- On UIDENT reduce production value_name -> IDENT
-- On UARROW reduce production value_name -> IDENT
-- On TO reduce production value_name -> IDENT
-- On THEN reduce production value_name -> IDENT
-- On STRING reduce production value_name -> IDENT
-- On SLASH_DOT reduce production value_name -> IDENT
-- On SLASH reduce production value_name -> IDENT
-- On SEMI reduce production value_name -> IDENT
-- On RPAREN reduce production value_name -> IDENT
-- On RBRACK reduce production value_name -> IDENT
-- On RBRACE reduce production value_name -> IDENT
-- On RARROW reduce production value_name -> IDENT
-- On PLUS_DOT reduce production value_name -> IDENT
-- On PLUS reduce production value_name -> IDENT
-- On PIPE reduce production value_name -> IDENT
-- On NL reduce production value_name -> IDENT
-- On MOD reduce production value_name -> IDENT
-- On MINUS_DOT reduce production value_name -> IDENT
-- On MINUS reduce production value_name -> IDENT
-- On LPAREN reduce production value_name -> IDENT
-- On LOR reduce production value_name -> IDENT
-- On LESS_LESS reduce production value_name -> IDENT
-- On LESS_GREATER reduce production value_name -> IDENT
-- On LESS_EQUAL reduce production value_name -> IDENT
-- On LESS reduce production value_name -> IDENT
-- On LBRACK reduce production value_name -> IDENT
-- On LBRACE reduce production value_name -> IDENT
-- On LARROW reduce production value_name -> IDENT
-- On LAND reduce production value_name -> IDENT
-- On INT reduce production value_name -> IDENT
-- On IN reduce production value_name -> IDENT
-- On IDENT reduce production value_name -> IDENT
-- On GREATER_EQUAL reduce production value_name -> IDENT
-- On GREATER reduce production value_name -> IDENT
-- On FLOAT reduce production value_name -> IDENT
-- On EXCL reduce production value_name -> IDENT
-- On EQUAL reduce production value_name -> IDENT
-- On END reduce production value_name -> IDENT
-- On ELSE reduce production value_name -> IDENT
-- On DOT reduce production value_name -> IDENT
-- On DOL reduce production value_name -> IDENT
-- On DO reduce production value_name -> IDENT
-- On CONS reduce production value_name -> IDENT
-- On COMMA reduce production value_name -> IDENT
-- On COLON reduce production value_name -> IDENT
-- On CHAR reduce production value_name -> IDENT
-- On BOOL reduce production value_name -> IDENT
-- On ATOM reduce production value_name -> IDENT
-- On AST_DOT reduce production value_name -> IDENT
-- On AST reduce production value_name -> IDENT
-- On ASSIGN reduce production value_name -> IDENT
-- On AS reduce production value_name -> IDENT

State 150:
## Known stack suffix:
## pattern AS value_name
## LR(1) items:
pattern -> pattern AS value_name . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> pattern AS value_name
-- On STRING reduce production pattern -> pattern AS value_name
-- On RPAREN reduce production pattern -> pattern AS value_name
-- On RBRACK reduce production pattern -> pattern AS value_name
-- On RBRACE reduce production pattern -> pattern AS value_name
-- On RARROW reduce production pattern -> pattern AS value_name
-- On PIPE reduce production pattern -> pattern AS value_name
-- On LPAREN reduce production pattern -> pattern AS value_name
-- On LBRACK reduce production pattern -> pattern AS value_name
-- On LBRACE reduce production pattern -> pattern AS value_name
-- On INT reduce production pattern -> pattern AS value_name
-- On IDENT reduce production pattern -> pattern AS value_name
-- On FLOAT reduce production pattern -> pattern AS value_name
-- On EQUAL reduce production pattern -> pattern AS value_name
-- On CONS reduce production pattern -> pattern AS value_name
-- On COMMA reduce production pattern -> pattern AS value_name
-- On COLON reduce production pattern -> pattern AS value_name
-- On BOOL reduce production pattern -> pattern AS value_name
-- On ATOM reduce production pattern -> pattern AS value_name
-- On AS reduce production pattern -> pattern AS value_name

State 151:
## Known stack suffix:
## LBRACE field_patterns
## LR(1) items:
pattern -> LBRACE field_patterns . RBRACE [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On RBRACE shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## LBRACE field_patterns RBRACE
## LR(1) items:
pattern -> LBRACE field_patterns RBRACE . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> LBRACE field_patterns RBRACE
-- On STRING reduce production pattern -> LBRACE field_patterns RBRACE
-- On RPAREN reduce production pattern -> LBRACE field_patterns RBRACE
-- On RBRACK reduce production pattern -> LBRACE field_patterns RBRACE
-- On RBRACE reduce production pattern -> LBRACE field_patterns RBRACE
-- On RARROW reduce production pattern -> LBRACE field_patterns RBRACE
-- On PIPE reduce production pattern -> LBRACE field_patterns RBRACE
-- On LPAREN reduce production pattern -> LBRACE field_patterns RBRACE
-- On LBRACK reduce production pattern -> LBRACE field_patterns RBRACE
-- On LBRACE reduce production pattern -> LBRACE field_patterns RBRACE
-- On INT reduce production pattern -> LBRACE field_patterns RBRACE
-- On IDENT reduce production pattern -> LBRACE field_patterns RBRACE
-- On FLOAT reduce production pattern -> LBRACE field_patterns RBRACE
-- On EQUAL reduce production pattern -> LBRACE field_patterns RBRACE
-- On CONS reduce production pattern -> LBRACE field_patterns RBRACE
-- On COMMA reduce production pattern -> LBRACE field_patterns RBRACE
-- On COLON reduce production pattern -> LBRACE field_patterns RBRACE
-- On BOOL reduce production pattern -> LBRACE field_patterns RBRACE
-- On ATOM reduce production pattern -> LBRACE field_patterns RBRACE
-- On AS reduce production pattern -> LBRACE field_patterns RBRACE

State 153:
## Known stack suffix:
## field_pattern
## LR(1) items:
field_patterns -> field_pattern . COMMA rev_field_patterns [ RBRACE ]
field_patterns -> field_pattern . COMMA rev_field_patterns COMMA [ RBRACE ]
## Transitions:
-- On COMMA shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## field_pattern COMMA
## LR(1) items:
field_patterns -> field_pattern COMMA . rev_field_patterns [ RBRACE ]
field_patterns -> field_pattern COMMA . rev_field_patterns COMMA [ RBRACE ]
## Transitions:
-- On IDENT shift to state 133
-- On rev_field_patterns shift to state 155
-- On field_pattern shift to state 158
## Reductions:

State 155:
## Known stack suffix:
## field_pattern COMMA rev_field_patterns
## LR(1) items:
field_patterns -> field_pattern COMMA rev_field_patterns . [ RBRACE ]
field_patterns -> field_pattern COMMA rev_field_patterns . COMMA [ RBRACE ]
rev_field_patterns -> rev_field_patterns . COMMA field_pattern [ RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 156
## Reductions:
-- On RBRACE reduce production field_patterns -> field_pattern COMMA rev_field_patterns

State 156:
## Known stack suffix:
## field_pattern COMMA rev_field_patterns COMMA
## LR(1) items:
field_patterns -> field_pattern COMMA rev_field_patterns COMMA . [ RBRACE ]
rev_field_patterns -> rev_field_patterns COMMA . field_pattern [ RBRACE COMMA ]
## Transitions:
-- On IDENT shift to state 133
-- On field_pattern shift to state 157
## Reductions:
-- On RBRACE reduce production field_patterns -> field_pattern COMMA rev_field_patterns COMMA

State 157:
## Known stack suffix:
## rev_field_patterns COMMA field_pattern
## LR(1) items:
rev_field_patterns -> rev_field_patterns COMMA field_pattern . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production rev_field_patterns -> rev_field_patterns COMMA field_pattern
-- On COMMA reduce production rev_field_patterns -> rev_field_patterns COMMA field_pattern

State 158:
## Known stack suffix:
## field_pattern
## LR(1) items:
rev_field_patterns -> field_pattern . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production rev_field_patterns -> field_pattern
-- On COMMA reduce production rev_field_patterns -> field_pattern

State 159:
## Known stack suffix:
## rev_list_pattern_elts
## LR(1) items:
list_pattern -> rev_list_pattern_elts . [ RBRACK PIPE ]
list_pattern -> rev_list_pattern_elts . COMMA [ RBRACK PIPE ]
rev_list_pattern_elts -> rev_list_pattern_elts . COMMA pattern [ RBRACK PIPE COMMA ]
## Transitions:
-- On COMMA shift to state 160
## Reductions:
-- On RBRACK reduce production list_pattern -> rev_list_pattern_elts
-- On PIPE reduce production list_pattern -> rev_list_pattern_elts

State 160:
## Known stack suffix:
## rev_list_pattern_elts COMMA
## LR(1) items:
list_pattern -> rev_list_pattern_elts COMMA . [ RBRACK PIPE ]
rev_list_pattern_elts -> rev_list_pattern_elts COMMA . pattern [ RBRACK PIPE COMMA ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 161
-- On constr_name shift to state 146
## Reductions:
-- On RBRACK reduce production list_pattern -> rev_list_pattern_elts COMMA
-- On PIPE reduce production list_pattern -> rev_list_pattern_elts COMMA

State 161:
## Known stack suffix:
## rev_list_pattern_elts COMMA pattern
## LR(1) items:
pattern -> pattern . AS value_name [ RBRACK PIPE CONS COMMA AS ]
pattern -> pattern . CONS pattern [ RBRACK PIPE CONS COMMA AS ]
rev_list_pattern_elts -> rev_list_pattern_elts COMMA pattern . [ RBRACK PIPE COMMA ]
## Transitions:
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:
-- On RBRACK reduce production rev_list_pattern_elts -> rev_list_pattern_elts COMMA pattern
-- On PIPE reduce production rev_list_pattern_elts -> rev_list_pattern_elts COMMA pattern
-- On COMMA reduce production rev_list_pattern_elts -> rev_list_pattern_elts COMMA pattern

State 162:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS value_name [ RBRACK PIPE CONS COMMA AS ]
pattern -> pattern . CONS pattern [ RBRACK PIPE CONS COMMA AS ]
rev_list_pattern_elts -> pattern . [ RBRACK PIPE COMMA ]
## Transitions:
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:
-- On RBRACK reduce production rev_list_pattern_elts -> pattern
-- On PIPE reduce production rev_list_pattern_elts -> pattern
-- On COMMA reduce production rev_list_pattern_elts -> pattern

State 163:
## Known stack suffix:
## LBRACK PIPE list_pattern
## LR(1) items:
pattern -> LBRACK PIPE list_pattern . PIPE RBRACK [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On PIPE shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## LBRACK PIPE list_pattern PIPE
## LR(1) items:
pattern -> LBRACK PIPE list_pattern PIPE . RBRACK [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On RBRACK shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## LBRACK PIPE list_pattern PIPE RBRACK
## LR(1) items:
pattern -> LBRACK PIPE list_pattern PIPE RBRACK . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On STRING reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On RPAREN reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On RBRACK reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On RBRACE reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On RARROW reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On PIPE reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On LPAREN reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On LBRACK reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On LBRACE reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On INT reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On IDENT reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On FLOAT reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On EQUAL reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On CONS reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On COMMA reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On COLON reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On BOOL reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On ATOM reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK
-- On AS reduce production pattern -> LBRACK PIPE list_pattern PIPE RBRACK

State 166:
## Known stack suffix:
## LBRACK list_pattern
## LR(1) items:
pattern -> LBRACK list_pattern . RBRACK [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On RBRACK shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## LBRACK list_pattern RBRACK
## LR(1) items:
pattern -> LBRACK list_pattern RBRACK . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> LBRACK list_pattern RBRACK
-- On STRING reduce production pattern -> LBRACK list_pattern RBRACK
-- On RPAREN reduce production pattern -> LBRACK list_pattern RBRACK
-- On RBRACK reduce production pattern -> LBRACK list_pattern RBRACK
-- On RBRACE reduce production pattern -> LBRACK list_pattern RBRACK
-- On RARROW reduce production pattern -> LBRACK list_pattern RBRACK
-- On PIPE reduce production pattern -> LBRACK list_pattern RBRACK
-- On LPAREN reduce production pattern -> LBRACK list_pattern RBRACK
-- On LBRACK reduce production pattern -> LBRACK list_pattern RBRACK
-- On LBRACE reduce production pattern -> LBRACK list_pattern RBRACK
-- On INT reduce production pattern -> LBRACK list_pattern RBRACK
-- On IDENT reduce production pattern -> LBRACK list_pattern RBRACK
-- On FLOAT reduce production pattern -> LBRACK list_pattern RBRACK
-- On EQUAL reduce production pattern -> LBRACK list_pattern RBRACK
-- On CONS reduce production pattern -> LBRACK list_pattern RBRACK
-- On COMMA reduce production pattern -> LBRACK list_pattern RBRACK
-- On COLON reduce production pattern -> LBRACK list_pattern RBRACK
-- On BOOL reduce production pattern -> LBRACK list_pattern RBRACK
-- On ATOM reduce production pattern -> LBRACK list_pattern RBRACK
-- On AS reduce production pattern -> LBRACK list_pattern RBRACK

State 168:
## Known stack suffix:
## LPAREN tuple_pattern
## LR(1) items:
pattern -> LPAREN tuple_pattern . RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On RPAREN shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## LPAREN tuple_pattern RPAREN
## LR(1) items:
pattern -> LPAREN tuple_pattern RPAREN . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On STRING reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On RPAREN reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On RBRACK reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On RBRACE reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On RARROW reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On PIPE reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On LPAREN reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On LBRACK reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On LBRACE reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On INT reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On IDENT reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On FLOAT reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On EQUAL reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On CONS reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On COMMA reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On COLON reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On BOOL reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On ATOM reduce production pattern -> LPAREN tuple_pattern RPAREN
-- On AS reduce production pattern -> LPAREN tuple_pattern RPAREN

State 170:
## Known stack suffix:
## rev_tuple_pattern
## LR(1) items:
rev_tuple_pattern -> rev_tuple_pattern . COMMA pattern [ RPAREN COMMA ]
tuple_pattern -> rev_tuple_pattern . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 171
## Reductions:
-- On RPAREN reduce production tuple_pattern -> rev_tuple_pattern

State 171:
## Known stack suffix:
## rev_tuple_pattern COMMA
## LR(1) items:
rev_tuple_pattern -> rev_tuple_pattern COMMA . pattern [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 172
-- On constr_name shift to state 146
## Reductions:

State 172:
## Known stack suffix:
## rev_tuple_pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS value_name [ RPAREN CONS COMMA AS ]
pattern -> pattern . CONS pattern [ RPAREN CONS COMMA AS ]
rev_tuple_pattern -> rev_tuple_pattern COMMA pattern . [ RPAREN COMMA ]
## Transitions:
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:
-- On RPAREN reduce production rev_tuple_pattern -> rev_tuple_pattern COMMA pattern
-- On COMMA reduce production rev_tuple_pattern -> rev_tuple_pattern COMMA pattern

State 173:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS value_name [ RPAREN CONS COMMA COLON AS ]
pattern -> LPAREN pattern . RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> LPAREN pattern . COLON type_expr RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
pattern -> pattern . CONS pattern [ RPAREN CONS COMMA COLON AS ]
rev_tuple_pattern -> pattern . COMMA pattern [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 174
-- On CONS shift to state 144
-- On COMMA shift to state 175
-- On COLON shift to state 177
-- On AS shift to state 148
## Reductions:

State 174:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
pattern -> LPAREN pattern RPAREN . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> LPAREN pattern RPAREN
-- On STRING reduce production pattern -> LPAREN pattern RPAREN
-- On RPAREN reduce production pattern -> LPAREN pattern RPAREN
-- On RBRACK reduce production pattern -> LPAREN pattern RPAREN
-- On RBRACE reduce production pattern -> LPAREN pattern RPAREN
-- On RARROW reduce production pattern -> LPAREN pattern RPAREN
-- On PIPE reduce production pattern -> LPAREN pattern RPAREN
-- On LPAREN reduce production pattern -> LPAREN pattern RPAREN
-- On LBRACK reduce production pattern -> LPAREN pattern RPAREN
-- On LBRACE reduce production pattern -> LPAREN pattern RPAREN
-- On INT reduce production pattern -> LPAREN pattern RPAREN
-- On IDENT reduce production pattern -> LPAREN pattern RPAREN
-- On FLOAT reduce production pattern -> LPAREN pattern RPAREN
-- On EQUAL reduce production pattern -> LPAREN pattern RPAREN
-- On CONS reduce production pattern -> LPAREN pattern RPAREN
-- On COMMA reduce production pattern -> LPAREN pattern RPAREN
-- On COLON reduce production pattern -> LPAREN pattern RPAREN
-- On BOOL reduce production pattern -> LPAREN pattern RPAREN
-- On ATOM reduce production pattern -> LPAREN pattern RPAREN
-- On AS reduce production pattern -> LPAREN pattern RPAREN

State 175:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
rev_tuple_pattern -> pattern COMMA . pattern [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 176
-- On constr_name shift to state 146
## Reductions:

State 176:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS value_name [ RPAREN CONS COMMA AS ]
pattern -> pattern . CONS pattern [ RPAREN CONS COMMA AS ]
rev_tuple_pattern -> pattern COMMA pattern . [ RPAREN COMMA ]
## Transitions:
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:
-- On RPAREN reduce production rev_tuple_pattern -> pattern COMMA pattern
-- On COMMA reduce production rev_tuple_pattern -> pattern COMMA pattern

State 177:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
pattern -> LPAREN pattern COLON . type_expr RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_expr_tuple shift to state 25
-- On type_expr shift to state 178
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 37
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 178:
## Known stack suffix:
## LPAREN pattern COLON type_expr
## LR(1) items:
pattern -> LPAREN pattern COLON type_expr . RPAREN [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
type_expr -> type_expr . type_constr [ UIDENT RPAREN RARROW IDENT ]
type_expr -> type_expr . RARROW type_expr [ UIDENT RPAREN RARROW IDENT ]
## Transitions:
-- On UIDENT shift to state 19
-- On RPAREN shift to state 179
-- On RARROW shift to state 28
-- On IDENT shift to state 24
-- On type_constr shift to state 30
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 179:
## Known stack suffix:
## LPAREN pattern COLON type_expr RPAREN
## LR(1) items:
pattern -> LPAREN pattern COLON type_expr RPAREN . [ UIDENT STRING RPAREN RBRACK RBRACE RARROW PIPE LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS COMMA COLON BOOL ATOM AS ]
## Transitions:
## Reductions:
-- On UIDENT reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On STRING reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On RPAREN reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On RBRACK reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On RBRACE reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On RARROW reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On PIPE reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On LPAREN reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On LBRACK reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On LBRACE reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On INT reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On IDENT reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On FLOAT reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On EQUAL reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On CONS reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On COMMA reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On COLON reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On BOOL reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On ATOM reduce production pattern -> LPAREN pattern COLON type_expr RPAREN
-- On AS reduce production pattern -> LPAREN pattern COLON type_expr RPAREN

State 180:
## Known stack suffix:
## PIPE rev_pattern_matching_elts
## LR(1) items:
rev_pattern_matching -> PIPE rev_pattern_matching_elts . [ END ]
rev_pattern_matching_elts -> rev_pattern_matching_elts . PIPE pattern_matching_elt [ PIPE END ]
## Transitions:
-- On PIPE shift to state 181
## Reductions:
-- On END reduce production rev_pattern_matching -> PIPE rev_pattern_matching_elts

State 181:
## Known stack suffix:
## rev_pattern_matching_elts PIPE
## LR(1) items:
rev_pattern_matching_elts -> rev_pattern_matching_elts PIPE . pattern_matching_elt [ PIPE END ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 182
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 182:
## Known stack suffix:
## rev_pattern_matching_elts PIPE pattern_matching_elt
## LR(1) items:
rev_pattern_matching_elts -> rev_pattern_matching_elts PIPE pattern_matching_elt . [ PIPE END ]
## Transitions:
## Reductions:
-- On PIPE reduce production rev_pattern_matching_elts -> rev_pattern_matching_elts PIPE pattern_matching_elt
-- On END reduce production rev_pattern_matching_elts -> rev_pattern_matching_elts PIPE pattern_matching_elt

State 183:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS value_name [ RARROW CONS AS ]
pattern -> pattern . CONS pattern [ RARROW CONS AS ]
pattern_matching_elt -> pattern . RARROW nl_opt block [ PIPE END ]
## Transitions:
-- On RARROW shift to state 184
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:

State 184:
## Known stack suffix:
## pattern RARROW
## LR(1) items:
pattern_matching_elt -> pattern RARROW . nl_opt block [ PIPE END ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 185
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 185:
## Known stack suffix:
## pattern RARROW nl_opt
## LR(1) items:
pattern_matching_elt -> pattern RARROW nl_opt . block [ PIPE END ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 427
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 186:
## Known stack suffix:
## RAISE
## LR(1) items:
expr -> RAISE . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 426
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 187:
## Known stack suffix:
## PERFORM
## LR(1) items:
expr -> PERFORM . nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 188
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 188:
## Known stack suffix:
## PERFORM nl_opt
## LR(1) items:
expr -> PERFORM nl_opt . block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 424
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 189:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 423
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 190:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 422
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 191:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . nl_opt expr WITH nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 192
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 192:
## Known stack suffix:
## MATCH nl_opt
## LR(1) items:
expr -> MATCH nl_opt . expr WITH nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 417
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 193:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary -> LPAREN . expr RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
primary -> LPAREN . RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
tuple -> LPAREN . rev_tuple RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RPAREN shift to state 194
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_tuple shift to state 409
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 413
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 194:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
primary -> LPAREN RPAREN . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> LPAREN RPAREN
-- On UIDENT reduce production primary -> LPAREN RPAREN
-- On UARROW reduce production primary -> LPAREN RPAREN
-- On TO reduce production primary -> LPAREN RPAREN
-- On THEN reduce production primary -> LPAREN RPAREN
-- On STRING reduce production primary -> LPAREN RPAREN
-- On SLASH_DOT reduce production primary -> LPAREN RPAREN
-- On SLASH reduce production primary -> LPAREN RPAREN
-- On SEMI reduce production primary -> LPAREN RPAREN
-- On RPAREN reduce production primary -> LPAREN RPAREN
-- On RBRACK reduce production primary -> LPAREN RPAREN
-- On RBRACE reduce production primary -> LPAREN RPAREN
-- On PLUS_DOT reduce production primary -> LPAREN RPAREN
-- On PLUS reduce production primary -> LPAREN RPAREN
-- On PIPE reduce production primary -> LPAREN RPAREN
-- On NL reduce production primary -> LPAREN RPAREN
-- On MOD reduce production primary -> LPAREN RPAREN
-- On MINUS_DOT reduce production primary -> LPAREN RPAREN
-- On MINUS reduce production primary -> LPAREN RPAREN
-- On LPAREN reduce production primary -> LPAREN RPAREN
-- On LOR reduce production primary -> LPAREN RPAREN
-- On LESS_LESS reduce production primary -> LPAREN RPAREN
-- On LESS_GREATER reduce production primary -> LPAREN RPAREN
-- On LESS_EQUAL reduce production primary -> LPAREN RPAREN
-- On LESS reduce production primary -> LPAREN RPAREN
-- On LBRACK reduce production primary -> LPAREN RPAREN
-- On LAND reduce production primary -> LPAREN RPAREN
-- On INT reduce production primary -> LPAREN RPAREN
-- On IN reduce production primary -> LPAREN RPAREN
-- On IDENT reduce production primary -> LPAREN RPAREN
-- On GREATER_EQUAL reduce production primary -> LPAREN RPAREN
-- On GREATER reduce production primary -> LPAREN RPAREN
-- On FLOAT reduce production primary -> LPAREN RPAREN
-- On EXCL reduce production primary -> LPAREN RPAREN
-- On EQUAL reduce production primary -> LPAREN RPAREN
-- On END reduce production primary -> LPAREN RPAREN
-- On ELSE reduce production primary -> LPAREN RPAREN
-- On DOT reduce production primary -> LPAREN RPAREN
-- On DOL reduce production primary -> LPAREN RPAREN
-- On DO reduce production primary -> LPAREN RPAREN
-- On CONS reduce production primary -> LPAREN RPAREN
-- On COMMA reduce production primary -> LPAREN RPAREN
-- On CHAR reduce production primary -> LPAREN RPAREN
-- On BOOL reduce production primary -> LPAREN RPAREN
-- On ATOM reduce production primary -> LPAREN RPAREN
-- On AST_DOT reduce production primary -> LPAREN RPAREN
-- On AST reduce production primary -> LPAREN RPAREN

State 195:
## Known stack suffix:
## LESS_LESS
## LR(1) items:
primary -> LESS_LESS . bitstring GREATER_GREATER [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On STRING shift to state 196
-- On INT shift to state 197
-- On IDENT shift to state 198
-- On FLOAT shift to state 199
-- On segment shift to state 200
-- On rev_bitstring shift to state 201
-- On bitstring shift to state 218
-- On bits_value shift to state 204
## Reductions:
-- On GREATER_GREATER reduce production bitstring ->

State 196:
## Known stack suffix:
## STRING
## LR(1) items:
bits_value -> STRING . [ SLASH GREATER_GREATER COMMA COLON ]
## Transitions:
## Reductions:
-- On SLASH reduce production bits_value -> STRING
-- On GREATER_GREATER reduce production bits_value -> STRING
-- On COMMA reduce production bits_value -> STRING
-- On COLON reduce production bits_value -> STRING

State 197:
## Known stack suffix:
## INT
## LR(1) items:
bits_value -> INT . [ SLASH GREATER_GREATER COMMA COLON ]
## Transitions:
## Reductions:
-- On SLASH reduce production bits_value -> INT
-- On GREATER_GREATER reduce production bits_value -> INT
-- On COMMA reduce production bits_value -> INT
-- On COLON reduce production bits_value -> INT

State 198:
## Known stack suffix:
## IDENT
## LR(1) items:
bits_value -> IDENT . [ SLASH GREATER_GREATER COMMA COLON ]
## Transitions:
## Reductions:
-- On SLASH reduce production bits_value -> IDENT
-- On GREATER_GREATER reduce production bits_value -> IDENT
-- On COMMA reduce production bits_value -> IDENT
-- On COLON reduce production bits_value -> IDENT

State 199:
## Known stack suffix:
## FLOAT
## LR(1) items:
bits_value -> FLOAT . [ SLASH GREATER_GREATER COMMA COLON ]
## Transitions:
## Reductions:
-- On SLASH reduce production bits_value -> FLOAT
-- On GREATER_GREATER reduce production bits_value -> FLOAT
-- On COMMA reduce production bits_value -> FLOAT
-- On COLON reduce production bits_value -> FLOAT

State 200:
## Known stack suffix:
## segment
## LR(1) items:
rev_bitstring -> segment . [ GREATER_GREATER COMMA ]
## Transitions:
## Reductions:
-- On GREATER_GREATER reduce production rev_bitstring -> segment
-- On COMMA reduce production rev_bitstring -> segment

State 201:
## Known stack suffix:
## rev_bitstring
## LR(1) items:
bitstring -> rev_bitstring . [ GREATER_GREATER ]
rev_bitstring -> rev_bitstring . COMMA segment [ GREATER_GREATER COMMA ]
## Transitions:
-- On COMMA shift to state 202
## Reductions:
-- On GREATER_GREATER reduce production bitstring -> rev_bitstring

State 202:
## Known stack suffix:
## rev_bitstring COMMA
## LR(1) items:
rev_bitstring -> rev_bitstring COMMA . segment [ GREATER_GREATER COMMA ]
## Transitions:
-- On STRING shift to state 196
-- On INT shift to state 197
-- On IDENT shift to state 198
-- On FLOAT shift to state 199
-- On segment shift to state 203
-- On bits_value shift to state 204
## Reductions:

State 203:
## Known stack suffix:
## rev_bitstring COMMA segment
## LR(1) items:
rev_bitstring -> rev_bitstring COMMA segment . [ GREATER_GREATER COMMA ]
## Transitions:
## Reductions:
-- On GREATER_GREATER reduce production rev_bitstring -> rev_bitstring COMMA segment
-- On COMMA reduce production rev_bitstring -> rev_bitstring COMMA segment

State 204:
## Known stack suffix:
## bits_value
## LR(1) items:
segment -> bits_value . [ GREATER_GREATER COMMA ]
segment -> bits_value . COLON INT [ GREATER_GREATER COMMA ]
segment -> bits_value . COLON INT SLASH bits_spec_list [ GREATER_GREATER COMMA ]
segment -> bits_value . SLASH bits_spec_list [ GREATER_GREATER COMMA ]
## Transitions:
-- On SLASH shift to state 205
-- On COLON shift to state 214
## Reductions:
-- On GREATER_GREATER reduce production segment -> bits_value
-- On COMMA reduce production segment -> bits_value

State 205:
## Known stack suffix:
## bits_value SLASH
## LR(1) items:
segment -> bits_value SLASH . bits_spec_list [ GREATER_GREATER COMMA ]
## Transitions:
-- On IDENT shift to state 206
-- On rev_bits_spec_list shift to state 209
-- On bits_spec_list shift to state 212
-- On bits_spec shift to state 213
## Reductions:

State 206:
## Known stack suffix:
## IDENT
## LR(1) items:
bits_spec -> IDENT . [ MINUS GREATER_GREATER COMMA ]
bits_spec -> IDENT . COLON INT [ MINUS GREATER_GREATER COMMA ]
## Transitions:
-- On COLON shift to state 207
## Reductions:
-- On MINUS reduce production bits_spec -> IDENT
-- On GREATER_GREATER reduce production bits_spec -> IDENT
-- On COMMA reduce production bits_spec -> IDENT

State 207:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
bits_spec -> IDENT COLON . INT [ MINUS GREATER_GREATER COMMA ]
## Transitions:
-- On INT shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## IDENT COLON INT
## LR(1) items:
bits_spec -> IDENT COLON INT . [ MINUS GREATER_GREATER COMMA ]
## Transitions:
## Reductions:
-- On MINUS reduce production bits_spec -> IDENT COLON INT
-- On GREATER_GREATER reduce production bits_spec -> IDENT COLON INT
-- On COMMA reduce production bits_spec -> IDENT COLON INT

State 209:
## Known stack suffix:
## rev_bits_spec_list
## LR(1) items:
bits_spec_list -> rev_bits_spec_list . [ GREATER_GREATER COMMA ]
rev_bits_spec_list -> rev_bits_spec_list . MINUS bits_spec [ MINUS GREATER_GREATER COMMA ]
## Transitions:
-- On MINUS shift to state 210
## Reductions:
-- On GREATER_GREATER reduce production bits_spec_list -> rev_bits_spec_list
-- On COMMA reduce production bits_spec_list -> rev_bits_spec_list

State 210:
## Known stack suffix:
## rev_bits_spec_list MINUS
## LR(1) items:
rev_bits_spec_list -> rev_bits_spec_list MINUS . bits_spec [ MINUS GREATER_GREATER COMMA ]
## Transitions:
-- On IDENT shift to state 206
-- On bits_spec shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## rev_bits_spec_list MINUS bits_spec
## LR(1) items:
rev_bits_spec_list -> rev_bits_spec_list MINUS bits_spec . [ MINUS GREATER_GREATER COMMA ]
## Transitions:
## Reductions:
-- On MINUS reduce production rev_bits_spec_list -> rev_bits_spec_list MINUS bits_spec
-- On GREATER_GREATER reduce production rev_bits_spec_list -> rev_bits_spec_list MINUS bits_spec
-- On COMMA reduce production rev_bits_spec_list -> rev_bits_spec_list MINUS bits_spec

State 212:
## Known stack suffix:
## bits_value SLASH bits_spec_list
## LR(1) items:
segment -> bits_value SLASH bits_spec_list . [ GREATER_GREATER COMMA ]
## Transitions:
## Reductions:
-- On GREATER_GREATER reduce production segment -> bits_value SLASH bits_spec_list
-- On COMMA reduce production segment -> bits_value SLASH bits_spec_list

State 213:
## Known stack suffix:
## bits_spec
## LR(1) items:
rev_bits_spec_list -> bits_spec . [ MINUS GREATER_GREATER COMMA ]
## Transitions:
## Reductions:
-- On MINUS reduce production rev_bits_spec_list -> bits_spec
-- On GREATER_GREATER reduce production rev_bits_spec_list -> bits_spec
-- On COMMA reduce production rev_bits_spec_list -> bits_spec

State 214:
## Known stack suffix:
## bits_value COLON
## LR(1) items:
segment -> bits_value COLON . INT [ GREATER_GREATER COMMA ]
segment -> bits_value COLON . INT SLASH bits_spec_list [ GREATER_GREATER COMMA ]
## Transitions:
-- On INT shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## bits_value COLON INT
## LR(1) items:
segment -> bits_value COLON INT . [ GREATER_GREATER COMMA ]
segment -> bits_value COLON INT . SLASH bits_spec_list [ GREATER_GREATER COMMA ]
## Transitions:
-- On SLASH shift to state 216
## Reductions:
-- On GREATER_GREATER reduce production segment -> bits_value COLON INT
-- On COMMA reduce production segment -> bits_value COLON INT

State 216:
## Known stack suffix:
## bits_value COLON INT SLASH
## LR(1) items:
segment -> bits_value COLON INT SLASH . bits_spec_list [ GREATER_GREATER COMMA ]
## Transitions:
-- On IDENT shift to state 206
-- On rev_bits_spec_list shift to state 209
-- On bits_spec_list shift to state 217
-- On bits_spec shift to state 213
## Reductions:

State 217:
## Known stack suffix:
## bits_value COLON INT SLASH bits_spec_list
## LR(1) items:
segment -> bits_value COLON INT SLASH bits_spec_list . [ GREATER_GREATER COMMA ]
## Transitions:
## Reductions:
-- On GREATER_GREATER reduce production segment -> bits_value COLON INT SLASH bits_spec_list
-- On COMMA reduce production segment -> bits_value COLON INT SLASH bits_spec_list

State 218:
## Known stack suffix:
## LESS_LESS bitstring
## LR(1) items:
primary -> LESS_LESS bitstring . GREATER_GREATER [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On GREATER_GREATER shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## LESS_LESS bitstring GREATER_GREATER
## LR(1) items:
primary -> LESS_LESS bitstring GREATER_GREATER . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On UIDENT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On UARROW reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On TO reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On THEN reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On STRING reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On SLASH_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On SLASH reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On SEMI reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On RPAREN reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On RBRACK reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On RBRACE reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On PLUS_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On PLUS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On PIPE reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On NL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On MOD reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On MINUS_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On MINUS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LPAREN reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LOR reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS_LESS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS_GREATER reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS_EQUAL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LBRACK reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LAND reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On INT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On IN reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On IDENT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On GREATER_EQUAL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On GREATER reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On FLOAT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On EXCL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On EQUAL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On END reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On ELSE reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On DOL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On DO reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On CONS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On COMMA reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On CHAR reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On BOOL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On ATOM reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On AST_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On AST reduce production primary -> LESS_LESS bitstring GREATER_GREATER

State 220:
## Known stack suffix:
## LBRACK
## LR(1) items:
primary -> LBRACK . list_ RBRACK [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
primary -> LBRACK . PIPE list_ PIPE RBRACK [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PIPE shift to state 221
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On rev_list_elts shift to state 400
-- On primary shift to state 249
-- On module_path shift to state 262
-- On list_ shift to state 407
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 406
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:
-- On RBRACK reduce production list_ ->

State 221:
## Known stack suffix:
## LBRACK PIPE
## LR(1) items:
primary -> LBRACK PIPE . list_ PIPE RBRACK [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On rev_list_elts shift to state 400
-- On primary shift to state 249
-- On module_path shift to state 262
-- On list_ shift to state 403
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 406
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:
-- On PIPE reduce production list_ ->

State 222:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . fields RBRACE [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On IDENT shift to state 223
-- On fields shift to state 393
-- On field shift to state 395
## Reductions:

State 223:
## Known stack suffix:
## IDENT
## LR(1) items:
field -> IDENT . EQUAL expr [ SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## IDENT EQUAL
## LR(1) items:
field -> IDENT EQUAL . expr [ SEMI RBRACE ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 392
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 225:
## Known stack suffix:
## INT
## LR(1) items:
primary -> INT . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> INT
-- On UIDENT reduce production primary -> INT
-- On UARROW reduce production primary -> INT
-- On TO reduce production primary -> INT
-- On THEN reduce production primary -> INT
-- On STRING reduce production primary -> INT
-- On SLASH_DOT reduce production primary -> INT
-- On SLASH reduce production primary -> INT
-- On SEMI reduce production primary -> INT
-- On RPAREN reduce production primary -> INT
-- On RBRACK reduce production primary -> INT
-- On RBRACE reduce production primary -> INT
-- On PLUS_DOT reduce production primary -> INT
-- On PLUS reduce production primary -> INT
-- On PIPE reduce production primary -> INT
-- On NL reduce production primary -> INT
-- On MOD reduce production primary -> INT
-- On MINUS_DOT reduce production primary -> INT
-- On MINUS reduce production primary -> INT
-- On LPAREN reduce production primary -> INT
-- On LOR reduce production primary -> INT
-- On LESS_LESS reduce production primary -> INT
-- On LESS_GREATER reduce production primary -> INT
-- On LESS_EQUAL reduce production primary -> INT
-- On LESS reduce production primary -> INT
-- On LBRACK reduce production primary -> INT
-- On LAND reduce production primary -> INT
-- On INT reduce production primary -> INT
-- On IN reduce production primary -> INT
-- On IDENT reduce production primary -> INT
-- On GREATER_EQUAL reduce production primary -> INT
-- On GREATER reduce production primary -> INT
-- On FLOAT reduce production primary -> INT
-- On EXCL reduce production primary -> INT
-- On EQUAL reduce production primary -> INT
-- On END reduce production primary -> INT
-- On ELSE reduce production primary -> INT
-- On DOT reduce production primary -> INT
-- On DOL reduce production primary -> INT
-- On DO reduce production primary -> INT
-- On CONS reduce production primary -> INT
-- On COMMA reduce production primary -> INT
-- On CHAR reduce production primary -> INT
-- On BOOL reduce production primary -> INT
-- On ATOM reduce production primary -> INT
-- On AST_DOT reduce production primary -> INT
-- On AST reduce production primary -> INT

State 226:
## Known stack suffix:
## IF
## LR(1) items:
if_exp -> IF . expr THEN nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF . expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF . expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 371
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 227:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . LARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> IDENT . ASSIGN nl_opt expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
value_name -> IDENT . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On LARROW shift to state 228
-- On ASSIGN shift to state 368
## Reductions:
-- On WITH reduce production value_name -> IDENT
-- On UIDENT reduce production value_name -> IDENT
-- On UARROW reduce production value_name -> IDENT
-- On TO reduce production value_name -> IDENT
-- On THEN reduce production value_name -> IDENT
-- On STRING reduce production value_name -> IDENT
-- On SLASH_DOT reduce production value_name -> IDENT
-- On SLASH reduce production value_name -> IDENT
-- On SEMI reduce production value_name -> IDENT
-- On RPAREN reduce production value_name -> IDENT
-- On RBRACK reduce production value_name -> IDENT
-- On RBRACE reduce production value_name -> IDENT
-- On PLUS_DOT reduce production value_name -> IDENT
-- On PLUS reduce production value_name -> IDENT
-- On PIPE reduce production value_name -> IDENT
-- On NL reduce production value_name -> IDENT
-- On MOD reduce production value_name -> IDENT
-- On MINUS_DOT reduce production value_name -> IDENT
-- On MINUS reduce production value_name -> IDENT
-- On LPAREN reduce production value_name -> IDENT
-- On LOR reduce production value_name -> IDENT
-- On LESS_LESS reduce production value_name -> IDENT
-- On LESS_GREATER reduce production value_name -> IDENT
-- On LESS_EQUAL reduce production value_name -> IDENT
-- On LESS reduce production value_name -> IDENT
-- On LBRACK reduce production value_name -> IDENT
-- On LAND reduce production value_name -> IDENT
-- On INT reduce production value_name -> IDENT
-- On IN reduce production value_name -> IDENT
-- On IDENT reduce production value_name -> IDENT
-- On GREATER_EQUAL reduce production value_name -> IDENT
-- On GREATER reduce production value_name -> IDENT
-- On FLOAT reduce production value_name -> IDENT
-- On EXCL reduce production value_name -> IDENT
-- On EQUAL reduce production value_name -> IDENT
-- On END reduce production value_name -> IDENT
-- On ELSE reduce production value_name -> IDENT
-- On DOT reduce production value_name -> IDENT
-- On DOL reduce production value_name -> IDENT
-- On DO reduce production value_name -> IDENT
-- On CONS reduce production value_name -> IDENT
-- On COMMA reduce production value_name -> IDENT
-- On CHAR reduce production value_name -> IDENT
-- On BOOL reduce production value_name -> IDENT
-- On ATOM reduce production value_name -> IDENT
-- On AST_DOT reduce production value_name -> IDENT
-- On AST reduce production value_name -> IDENT

State 228:
## Known stack suffix:
## IDENT LARROW
## LR(1) items:
expr -> IDENT LARROW . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 367
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 229:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . nl_opt rev_formal_args RARROW nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> FUN . nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 230
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 230:
## Known stack suffix:
## FUN nl_opt
## LR(1) items:
expr -> FUN nl_opt . rev_formal_args RARROW nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> FUN nl_opt . pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On rev_formal_args shift to state 233
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 365
-- On pattern shift to state 334
-- On formal_arg shift to state 335
-- On constr_name shift to state 146
## Reductions:

State 231:
## Known stack suffix:
## rev_pattern_matching_elts
## LR(1) items:
rev_pattern_matching -> rev_pattern_matching_elts . [ END ]
rev_pattern_matching_elts -> rev_pattern_matching_elts . PIPE pattern_matching_elt [ PIPE END ]
## Transitions:
-- On PIPE shift to state 181
## Reductions:
-- On END reduce production rev_pattern_matching -> rev_pattern_matching_elts

State 232:
## Known stack suffix:
## rev_pattern_matching
## LR(1) items:
pattern_matching -> rev_pattern_matching . [ END ]
## Transitions:
## Reductions:
-- On END reduce production pattern_matching -> rev_pattern_matching

State 233:
## Known stack suffix:
## FUN nl_opt rev_formal_args
## LR(1) items:
expr -> FUN nl_opt rev_formal_args . RARROW nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_formal_args -> rev_formal_args . formal_arg [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT BOOL ATOM ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On RARROW shift to state 234
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 329
-- On formal_arg shift to state 330
-- On constr_name shift to state 146
## Reductions:

State 234:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW . nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 235
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 235:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW nl_opt
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW nl_opt . block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 363
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 236:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On IDENT shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## FOR IDENT
## LR(1) items:
expr -> FOR IDENT . EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On EQUAL shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## FOR IDENT EQUAL
## LR(1) items:
expr -> FOR IDENT EQUAL . expr TO nl_opt expr nl_opt DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 354
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 239:
## Known stack suffix:
## FLOAT
## LR(1) items:
primary -> FLOAT . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> FLOAT
-- On UIDENT reduce production primary -> FLOAT
-- On UARROW reduce production primary -> FLOAT
-- On TO reduce production primary -> FLOAT
-- On THEN reduce production primary -> FLOAT
-- On STRING reduce production primary -> FLOAT
-- On SLASH_DOT reduce production primary -> FLOAT
-- On SLASH reduce production primary -> FLOAT
-- On SEMI reduce production primary -> FLOAT
-- On RPAREN reduce production primary -> FLOAT
-- On RBRACK reduce production primary -> FLOAT
-- On RBRACE reduce production primary -> FLOAT
-- On PLUS_DOT reduce production primary -> FLOAT
-- On PLUS reduce production primary -> FLOAT
-- On PIPE reduce production primary -> FLOAT
-- On NL reduce production primary -> FLOAT
-- On MOD reduce production primary -> FLOAT
-- On MINUS_DOT reduce production primary -> FLOAT
-- On MINUS reduce production primary -> FLOAT
-- On LPAREN reduce production primary -> FLOAT
-- On LOR reduce production primary -> FLOAT
-- On LESS_LESS reduce production primary -> FLOAT
-- On LESS_GREATER reduce production primary -> FLOAT
-- On LESS_EQUAL reduce production primary -> FLOAT
-- On LESS reduce production primary -> FLOAT
-- On LBRACK reduce production primary -> FLOAT
-- On LAND reduce production primary -> FLOAT
-- On INT reduce production primary -> FLOAT
-- On IN reduce production primary -> FLOAT
-- On IDENT reduce production primary -> FLOAT
-- On GREATER_EQUAL reduce production primary -> FLOAT
-- On GREATER reduce production primary -> FLOAT
-- On FLOAT reduce production primary -> FLOAT
-- On EXCL reduce production primary -> FLOAT
-- On EQUAL reduce production primary -> FLOAT
-- On END reduce production primary -> FLOAT
-- On ELSE reduce production primary -> FLOAT
-- On DOT reduce production primary -> FLOAT
-- On DOL reduce production primary -> FLOAT
-- On DO reduce production primary -> FLOAT
-- On CONS reduce production primary -> FLOAT
-- On COMMA reduce production primary -> FLOAT
-- On CHAR reduce production primary -> FLOAT
-- On BOOL reduce production primary -> FLOAT
-- On ATOM reduce production primary -> FLOAT
-- On AST_DOT reduce production primary -> FLOAT
-- On AST reduce production primary -> FLOAT

State 240:
## Known stack suffix:
## EXCL
## LR(1) items:
simple_expr -> EXCL . simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 245
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
## Reductions:

State 241:
## Known stack suffix:
## CHAR
## LR(1) items:
primary -> CHAR . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> CHAR
-- On UIDENT reduce production primary -> CHAR
-- On UARROW reduce production primary -> CHAR
-- On TO reduce production primary -> CHAR
-- On THEN reduce production primary -> CHAR
-- On STRING reduce production primary -> CHAR
-- On SLASH_DOT reduce production primary -> CHAR
-- On SLASH reduce production primary -> CHAR
-- On SEMI reduce production primary -> CHAR
-- On RPAREN reduce production primary -> CHAR
-- On RBRACK reduce production primary -> CHAR
-- On RBRACE reduce production primary -> CHAR
-- On PLUS_DOT reduce production primary -> CHAR
-- On PLUS reduce production primary -> CHAR
-- On PIPE reduce production primary -> CHAR
-- On NL reduce production primary -> CHAR
-- On MOD reduce production primary -> CHAR
-- On MINUS_DOT reduce production primary -> CHAR
-- On MINUS reduce production primary -> CHAR
-- On LPAREN reduce production primary -> CHAR
-- On LOR reduce production primary -> CHAR
-- On LESS_LESS reduce production primary -> CHAR
-- On LESS_GREATER reduce production primary -> CHAR
-- On LESS_EQUAL reduce production primary -> CHAR
-- On LESS reduce production primary -> CHAR
-- On LBRACK reduce production primary -> CHAR
-- On LAND reduce production primary -> CHAR
-- On INT reduce production primary -> CHAR
-- On IN reduce production primary -> CHAR
-- On IDENT reduce production primary -> CHAR
-- On GREATER_EQUAL reduce production primary -> CHAR
-- On GREATER reduce production primary -> CHAR
-- On FLOAT reduce production primary -> CHAR
-- On EXCL reduce production primary -> CHAR
-- On EQUAL reduce production primary -> CHAR
-- On END reduce production primary -> CHAR
-- On ELSE reduce production primary -> CHAR
-- On DOT reduce production primary -> CHAR
-- On DOL reduce production primary -> CHAR
-- On DO reduce production primary -> CHAR
-- On CONS reduce production primary -> CHAR
-- On COMMA reduce production primary -> CHAR
-- On CHAR reduce production primary -> CHAR
-- On BOOL reduce production primary -> CHAR
-- On ATOM reduce production primary -> CHAR
-- On AST_DOT reduce production primary -> CHAR
-- On AST reduce production primary -> CHAR

State 242:
## Known stack suffix:
## BOOL
## LR(1) items:
primary -> BOOL . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> BOOL
-- On UIDENT reduce production primary -> BOOL
-- On UARROW reduce production primary -> BOOL
-- On TO reduce production primary -> BOOL
-- On THEN reduce production primary -> BOOL
-- On STRING reduce production primary -> BOOL
-- On SLASH_DOT reduce production primary -> BOOL
-- On SLASH reduce production primary -> BOOL
-- On SEMI reduce production primary -> BOOL
-- On RPAREN reduce production primary -> BOOL
-- On RBRACK reduce production primary -> BOOL
-- On RBRACE reduce production primary -> BOOL
-- On PLUS_DOT reduce production primary -> BOOL
-- On PLUS reduce production primary -> BOOL
-- On PIPE reduce production primary -> BOOL
-- On NL reduce production primary -> BOOL
-- On MOD reduce production primary -> BOOL
-- On MINUS_DOT reduce production primary -> BOOL
-- On MINUS reduce production primary -> BOOL
-- On LPAREN reduce production primary -> BOOL
-- On LOR reduce production primary -> BOOL
-- On LESS_LESS reduce production primary -> BOOL
-- On LESS_GREATER reduce production primary -> BOOL
-- On LESS_EQUAL reduce production primary -> BOOL
-- On LESS reduce production primary -> BOOL
-- On LBRACK reduce production primary -> BOOL
-- On LAND reduce production primary -> BOOL
-- On INT reduce production primary -> BOOL
-- On IN reduce production primary -> BOOL
-- On IDENT reduce production primary -> BOOL
-- On GREATER_EQUAL reduce production primary -> BOOL
-- On GREATER reduce production primary -> BOOL
-- On FLOAT reduce production primary -> BOOL
-- On EXCL reduce production primary -> BOOL
-- On EQUAL reduce production primary -> BOOL
-- On END reduce production primary -> BOOL
-- On ELSE reduce production primary -> BOOL
-- On DOT reduce production primary -> BOOL
-- On DOL reduce production primary -> BOOL
-- On DO reduce production primary -> BOOL
-- On CONS reduce production primary -> BOOL
-- On COMMA reduce production primary -> BOOL
-- On CHAR reduce production primary -> BOOL
-- On BOOL reduce production primary -> BOOL
-- On ATOM reduce production primary -> BOOL
-- On AST_DOT reduce production primary -> BOOL
-- On AST reduce production primary -> BOOL

State 243:
## Known stack suffix:
## ATOM
## LR(1) items:
primary -> ATOM . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> ATOM
-- On UIDENT reduce production primary -> ATOM
-- On UARROW reduce production primary -> ATOM
-- On TO reduce production primary -> ATOM
-- On THEN reduce production primary -> ATOM
-- On STRING reduce production primary -> ATOM
-- On SLASH_DOT reduce production primary -> ATOM
-- On SLASH reduce production primary -> ATOM
-- On SEMI reduce production primary -> ATOM
-- On RPAREN reduce production primary -> ATOM
-- On RBRACK reduce production primary -> ATOM
-- On RBRACE reduce production primary -> ATOM
-- On PLUS_DOT reduce production primary -> ATOM
-- On PLUS reduce production primary -> ATOM
-- On PIPE reduce production primary -> ATOM
-- On NL reduce production primary -> ATOM
-- On MOD reduce production primary -> ATOM
-- On MINUS_DOT reduce production primary -> ATOM
-- On MINUS reduce production primary -> ATOM
-- On LPAREN reduce production primary -> ATOM
-- On LOR reduce production primary -> ATOM
-- On LESS_LESS reduce production primary -> ATOM
-- On LESS_GREATER reduce production primary -> ATOM
-- On LESS_EQUAL reduce production primary -> ATOM
-- On LESS reduce production primary -> ATOM
-- On LBRACK reduce production primary -> ATOM
-- On LAND reduce production primary -> ATOM
-- On INT reduce production primary -> ATOM
-- On IN reduce production primary -> ATOM
-- On IDENT reduce production primary -> ATOM
-- On GREATER_EQUAL reduce production primary -> ATOM
-- On GREATER reduce production primary -> ATOM
-- On FLOAT reduce production primary -> ATOM
-- On EXCL reduce production primary -> ATOM
-- On EQUAL reduce production primary -> ATOM
-- On END reduce production primary -> ATOM
-- On ELSE reduce production primary -> ATOM
-- On DOT reduce production primary -> ATOM
-- On DOL reduce production primary -> ATOM
-- On DO reduce production primary -> ATOM
-- On CONS reduce production primary -> ATOM
-- On COMMA reduce production primary -> ATOM
-- On CHAR reduce production primary -> ATOM
-- On BOOL reduce production primary -> ATOM
-- On ATOM reduce production primary -> ATOM
-- On AST_DOT reduce production primary -> ATOM
-- On AST reduce production primary -> ATOM

State 244:
## Known stack suffix:
## value_name
## LR(1) items:
binding -> value_name . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ASSIGN ]
## Transitions:
## Reductions:
-- On WITH reduce production binding -> value_name
-- On UIDENT reduce production binding -> value_name
-- On UARROW reduce production binding -> value_name
-- On TO reduce production binding -> value_name
-- On THEN reduce production binding -> value_name
-- On STRING reduce production binding -> value_name
-- On SLASH_DOT reduce production binding -> value_name
-- On SLASH reduce production binding -> value_name
-- On SEMI reduce production binding -> value_name
-- On RPAREN reduce production binding -> value_name
-- On RBRACK reduce production binding -> value_name
-- On RBRACE reduce production binding -> value_name
-- On PLUS_DOT reduce production binding -> value_name
-- On PLUS reduce production binding -> value_name
-- On PIPE reduce production binding -> value_name
-- On NL reduce production binding -> value_name
-- On MOD reduce production binding -> value_name
-- On MINUS_DOT reduce production binding -> value_name
-- On MINUS reduce production binding -> value_name
-- On LPAREN reduce production binding -> value_name
-- On LOR reduce production binding -> value_name
-- On LESS_LESS reduce production binding -> value_name
-- On LESS_GREATER reduce production binding -> value_name
-- On LESS_EQUAL reduce production binding -> value_name
-- On LESS reduce production binding -> value_name
-- On LBRACK reduce production binding -> value_name
-- On LARROW reduce production binding -> value_name
-- On LAND reduce production binding -> value_name
-- On INT reduce production binding -> value_name
-- On IN reduce production binding -> value_name
-- On IDENT reduce production binding -> value_name
-- On GREATER_EQUAL reduce production binding -> value_name
-- On GREATER reduce production binding -> value_name
-- On FLOAT reduce production binding -> value_name
-- On EXCL reduce production binding -> value_name
-- On EQUAL reduce production binding -> value_name
-- On END reduce production binding -> value_name
-- On ELSE reduce production binding -> value_name
-- On DOT reduce production binding -> value_name
-- On DOL reduce production binding -> value_name
-- On DO reduce production binding -> value_name
-- On CONS reduce production binding -> value_name
-- On COMMA reduce production binding -> value_name
-- On CHAR reduce production binding -> value_name
-- On BOOL reduce production binding -> value_name
-- On ATOM reduce production binding -> value_name
-- On AST_DOT reduce production binding -> value_name
-- On AST reduce production binding -> value_name
-- On ASSIGN reduce production binding -> value_name

State 245:
## Known stack suffix:
## EXCL simple_expr
## LR(1) items:
simple_expr -> EXCL simple_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production simple_expr -> EXCL simple_expr
-- On UIDENT reduce production simple_expr -> EXCL simple_expr
-- On UARROW reduce production simple_expr -> EXCL simple_expr
-- On TO reduce production simple_expr -> EXCL simple_expr
-- On THEN reduce production simple_expr -> EXCL simple_expr
-- On STRING reduce production simple_expr -> EXCL simple_expr
-- On SLASH_DOT reduce production simple_expr -> EXCL simple_expr
-- On SLASH reduce production simple_expr -> EXCL simple_expr
-- On SEMI reduce production simple_expr -> EXCL simple_expr
-- On RPAREN reduce production simple_expr -> EXCL simple_expr
-- On RBRACK reduce production simple_expr -> EXCL simple_expr
-- On RBRACE reduce production simple_expr -> EXCL simple_expr
-- On PLUS_DOT reduce production simple_expr -> EXCL simple_expr
-- On PLUS reduce production simple_expr -> EXCL simple_expr
-- On PIPE reduce production simple_expr -> EXCL simple_expr
-- On NL reduce production simple_expr -> EXCL simple_expr
-- On MOD reduce production simple_expr -> EXCL simple_expr
-- On MINUS_DOT reduce production simple_expr -> EXCL simple_expr
-- On MINUS reduce production simple_expr -> EXCL simple_expr
-- On LPAREN reduce production simple_expr -> EXCL simple_expr
-- On LOR reduce production simple_expr -> EXCL simple_expr
-- On LESS_LESS reduce production simple_expr -> EXCL simple_expr
-- On LESS_GREATER reduce production simple_expr -> EXCL simple_expr
-- On LESS_EQUAL reduce production simple_expr -> EXCL simple_expr
-- On LESS reduce production simple_expr -> EXCL simple_expr
-- On LBRACK reduce production simple_expr -> EXCL simple_expr
-- On LAND reduce production simple_expr -> EXCL simple_expr
-- On INT reduce production simple_expr -> EXCL simple_expr
-- On IN reduce production simple_expr -> EXCL simple_expr
-- On IDENT reduce production simple_expr -> EXCL simple_expr
-- On GREATER_EQUAL reduce production simple_expr -> EXCL simple_expr
-- On GREATER reduce production simple_expr -> EXCL simple_expr
-- On FLOAT reduce production simple_expr -> EXCL simple_expr
-- On EXCL reduce production simple_expr -> EXCL simple_expr
-- On EQUAL reduce production simple_expr -> EXCL simple_expr
-- On END reduce production simple_expr -> EXCL simple_expr
-- On ELSE reduce production simple_expr -> EXCL simple_expr
-- On DOL reduce production simple_expr -> EXCL simple_expr
-- On DO reduce production simple_expr -> EXCL simple_expr
-- On CONS reduce production simple_expr -> EXCL simple_expr
-- On COMMA reduce production simple_expr -> EXCL simple_expr
-- On CHAR reduce production simple_expr -> EXCL simple_expr
-- On BOOL reduce production simple_expr -> EXCL simple_expr
-- On ATOM reduce production simple_expr -> EXCL simple_expr
-- On AST_DOT reduce production simple_expr -> EXCL simple_expr
-- On AST reduce production simple_expr -> EXCL simple_expr

State 246:
## Known stack suffix:
## rev_module_path
## LR(1) items:
module_path -> rev_module_path . value_name [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ASSIGN ]
rev_module_path -> rev_module_path . UIDENT DOT [ UIDENT IDENT ]
## Transitions:
-- On UIDENT shift to state 247
-- On IDENT shift to state 149
-- On value_name shift to state 248
## Reductions:

State 247:
## Known stack suffix:
## rev_module_path UIDENT
## LR(1) items:
rev_module_path -> rev_module_path UIDENT . DOT [ UIDENT IDENT ]
## Transitions:
-- On DOT shift to state 142
## Reductions:

State 248:
## Known stack suffix:
## rev_module_path value_name
## LR(1) items:
module_path -> rev_module_path value_name . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ASSIGN ]
## Transitions:
## Reductions:
-- On WITH reduce production module_path -> rev_module_path value_name
-- On UIDENT reduce production module_path -> rev_module_path value_name
-- On UARROW reduce production module_path -> rev_module_path value_name
-- On TO reduce production module_path -> rev_module_path value_name
-- On THEN reduce production module_path -> rev_module_path value_name
-- On STRING reduce production module_path -> rev_module_path value_name
-- On SLASH_DOT reduce production module_path -> rev_module_path value_name
-- On SLASH reduce production module_path -> rev_module_path value_name
-- On SEMI reduce production module_path -> rev_module_path value_name
-- On RPAREN reduce production module_path -> rev_module_path value_name
-- On RBRACK reduce production module_path -> rev_module_path value_name
-- On RBRACE reduce production module_path -> rev_module_path value_name
-- On PLUS_DOT reduce production module_path -> rev_module_path value_name
-- On PLUS reduce production module_path -> rev_module_path value_name
-- On PIPE reduce production module_path -> rev_module_path value_name
-- On NL reduce production module_path -> rev_module_path value_name
-- On MOD reduce production module_path -> rev_module_path value_name
-- On MINUS_DOT reduce production module_path -> rev_module_path value_name
-- On MINUS reduce production module_path -> rev_module_path value_name
-- On LPAREN reduce production module_path -> rev_module_path value_name
-- On LOR reduce production module_path -> rev_module_path value_name
-- On LESS_LESS reduce production module_path -> rev_module_path value_name
-- On LESS_GREATER reduce production module_path -> rev_module_path value_name
-- On LESS_EQUAL reduce production module_path -> rev_module_path value_name
-- On LESS reduce production module_path -> rev_module_path value_name
-- On LBRACK reduce production module_path -> rev_module_path value_name
-- On LARROW reduce production module_path -> rev_module_path value_name
-- On LAND reduce production module_path -> rev_module_path value_name
-- On INT reduce production module_path -> rev_module_path value_name
-- On IN reduce production module_path -> rev_module_path value_name
-- On IDENT reduce production module_path -> rev_module_path value_name
-- On GREATER_EQUAL reduce production module_path -> rev_module_path value_name
-- On GREATER reduce production module_path -> rev_module_path value_name
-- On FLOAT reduce production module_path -> rev_module_path value_name
-- On EXCL reduce production module_path -> rev_module_path value_name
-- On EQUAL reduce production module_path -> rev_module_path value_name
-- On END reduce production module_path -> rev_module_path value_name
-- On ELSE reduce production module_path -> rev_module_path value_name
-- On DOT reduce production module_path -> rev_module_path value_name
-- On DOL reduce production module_path -> rev_module_path value_name
-- On DO reduce production module_path -> rev_module_path value_name
-- On CONS reduce production module_path -> rev_module_path value_name
-- On COMMA reduce production module_path -> rev_module_path value_name
-- On CHAR reduce production module_path -> rev_module_path value_name
-- On BOOL reduce production module_path -> rev_module_path value_name
-- On ATOM reduce production module_path -> rev_module_path value_name
-- On AST_DOT reduce production module_path -> rev_module_path value_name
-- On AST reduce production module_path -> rev_module_path value_name
-- On ASSIGN reduce production module_path -> rev_module_path value_name

State 249:
## Known stack suffix:
## primary
## LR(1) items:
array_expr -> primary . DOT LPAREN expr RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
field_expr -> primary . DOT binding [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ASSIGN ]
simple_expr -> primary . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On DOT shift to state 250
## Reductions:
-- On WITH reduce production simple_expr -> primary
-- On UIDENT reduce production simple_expr -> primary
-- On UARROW reduce production simple_expr -> primary
-- On TO reduce production simple_expr -> primary
-- On THEN reduce production simple_expr -> primary
-- On STRING reduce production simple_expr -> primary
-- On SLASH_DOT reduce production simple_expr -> primary
-- On SLASH reduce production simple_expr -> primary
-- On SEMI reduce production simple_expr -> primary
-- On RPAREN reduce production simple_expr -> primary
-- On RBRACK reduce production simple_expr -> primary
-- On RBRACE reduce production simple_expr -> primary
-- On PLUS_DOT reduce production simple_expr -> primary
-- On PLUS reduce production simple_expr -> primary
-- On PIPE reduce production simple_expr -> primary
-- On NL reduce production simple_expr -> primary
-- On MOD reduce production simple_expr -> primary
-- On MINUS_DOT reduce production simple_expr -> primary
-- On MINUS reduce production simple_expr -> primary
-- On LPAREN reduce production simple_expr -> primary
-- On LOR reduce production simple_expr -> primary
-- On LESS_LESS reduce production simple_expr -> primary
-- On LESS_GREATER reduce production simple_expr -> primary
-- On LESS_EQUAL reduce production simple_expr -> primary
-- On LESS reduce production simple_expr -> primary
-- On LBRACK reduce production simple_expr -> primary
-- On LAND reduce production simple_expr -> primary
-- On INT reduce production simple_expr -> primary
-- On IN reduce production simple_expr -> primary
-- On IDENT reduce production simple_expr -> primary
-- On GREATER_EQUAL reduce production simple_expr -> primary
-- On GREATER reduce production simple_expr -> primary
-- On FLOAT reduce production simple_expr -> primary
-- On EXCL reduce production simple_expr -> primary
-- On EQUAL reduce production simple_expr -> primary
-- On END reduce production simple_expr -> primary
-- On ELSE reduce production simple_expr -> primary
-- On DOL reduce production simple_expr -> primary
-- On DO reduce production simple_expr -> primary
-- On CONS reduce production simple_expr -> primary
-- On COMMA reduce production simple_expr -> primary
-- On CHAR reduce production simple_expr -> primary
-- On BOOL reduce production simple_expr -> primary
-- On ATOM reduce production simple_expr -> primary
-- On AST_DOT reduce production simple_expr -> primary
-- On AST reduce production simple_expr -> primary

State 250:
## Known stack suffix:
## primary DOT
## LR(1) items:
array_expr -> primary DOT . LPAREN expr RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
field_expr -> primary DOT . binding [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ASSIGN ]
## Transitions:
-- On UIDENT shift to state 251
-- On LPAREN shift to state 252
-- On IDENT shift to state 149
-- On value_name shift to state 244
-- On rev_module_path shift to state 246
-- On module_path shift to state 262
-- On binding shift to state 353
## Reductions:

State 251:
## Known stack suffix:
## UIDENT
## LR(1) items:
rev_module_path -> UIDENT . DOT [ UIDENT IDENT ]
## Transitions:
-- On DOT shift to state 125
## Reductions:

State 252:
## Known stack suffix:
## primary DOT LPAREN
## LR(1) items:
array_expr -> primary DOT LPAREN . expr RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 351
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 253:
## Known stack suffix:
## DEF
## LR(1) items:
expr -> DEF . fundef IN nl_opt block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> DEF . REC fundef IN nl_opt block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On REC shift to state 254
-- On IDENT shift to state 255
-- On fundef shift to state 347
## Reductions:

State 254:
## Known stack suffix:
## DEF REC
## LR(1) items:
expr -> DEF REC . fundef IN nl_opt block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On IDENT shift to state 255
-- On fundef shift to state 343
## Reductions:

State 255:
## Known stack suffix:
## IDENT
## LR(1) items:
fundef -> IDENT . rev_formal_args EQUAL nl_opt block [ IN ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On rev_formal_args shift to state 256
-- On pattern shift to state 329
-- On formal_arg shift to state 335
-- On constr_name shift to state 146
## Reductions:

State 256:
## Known stack suffix:
## IDENT rev_formal_args
## LR(1) items:
fundef -> IDENT rev_formal_args . EQUAL nl_opt block [ IN ]
rev_formal_args -> rev_formal_args . formal_arg [ UIDENT STRING LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL BOOL ATOM ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On EQUAL shift to state 257
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 329
-- On formal_arg shift to state 330
-- On constr_name shift to state 146
## Reductions:

State 257:
## Known stack suffix:
## IDENT rev_formal_args EQUAL
## LR(1) items:
fundef -> IDENT rev_formal_args EQUAL . nl_opt block [ IN ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 258
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 258:
## Known stack suffix:
## IDENT rev_formal_args EQUAL nl_opt
## LR(1) items:
fundef -> IDENT rev_formal_args EQUAL nl_opt . block [ IN ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 342
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 259:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 341
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 260:
## Known stack suffix:
## tuple
## LR(1) items:
expr -> tuple . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> tuple
-- On UIDENT reduce production expr -> tuple
-- On UARROW reduce production expr -> tuple
-- On TO reduce production expr -> tuple
-- On THEN reduce production expr -> tuple
-- On STRING reduce production expr -> tuple
-- On SLASH_DOT reduce production expr -> tuple
-- On SLASH reduce production expr -> tuple
-- On SEMI reduce production expr -> tuple
-- On RPAREN reduce production expr -> tuple
-- On RBRACK reduce production expr -> tuple
-- On RBRACE reduce production expr -> tuple
-- On PLUS_DOT reduce production expr -> tuple
-- On PLUS reduce production expr -> tuple
-- On PIPE reduce production expr -> tuple
-- On NL reduce production expr -> tuple
-- On MOD reduce production expr -> tuple
-- On MINUS_DOT reduce production expr -> tuple
-- On MINUS reduce production expr -> tuple
-- On LPAREN reduce production expr -> tuple
-- On LOR reduce production expr -> tuple
-- On LESS_LESS reduce production expr -> tuple
-- On LESS_GREATER reduce production expr -> tuple
-- On LESS_EQUAL reduce production expr -> tuple
-- On LESS reduce production expr -> tuple
-- On LBRACK reduce production expr -> tuple
-- On LAND reduce production expr -> tuple
-- On INT reduce production expr -> tuple
-- On IN reduce production expr -> tuple
-- On IDENT reduce production expr -> tuple
-- On GREATER_EQUAL reduce production expr -> tuple
-- On GREATER reduce production expr -> tuple
-- On FLOAT reduce production expr -> tuple
-- On EXCL reduce production expr -> tuple
-- On EQUAL reduce production expr -> tuple
-- On END reduce production expr -> tuple
-- On ELSE reduce production expr -> tuple
-- On DOL reduce production expr -> tuple
-- On DO reduce production expr -> tuple
-- On CONS reduce production expr -> tuple
-- On COMMA reduce production expr -> tuple
-- On CHAR reduce production expr -> tuple
-- On BOOL reduce production expr -> tuple
-- On ATOM reduce production expr -> tuple
-- On AST_DOT reduce production expr -> tuple
-- On AST reduce production expr -> tuple

State 261:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr -> simple_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> simple_expr
-- On UIDENT reduce production expr -> simple_expr
-- On UARROW reduce production expr -> simple_expr
-- On TO reduce production expr -> simple_expr
-- On THEN reduce production expr -> simple_expr
-- On STRING reduce production expr -> simple_expr
-- On SLASH_DOT reduce production expr -> simple_expr
-- On SLASH reduce production expr -> simple_expr
-- On SEMI reduce production expr -> simple_expr
-- On RPAREN reduce production expr -> simple_expr
-- On RBRACK reduce production expr -> simple_expr
-- On RBRACE reduce production expr -> simple_expr
-- On PLUS_DOT reduce production expr -> simple_expr
-- On PLUS reduce production expr -> simple_expr
-- On PIPE reduce production expr -> simple_expr
-- On NL reduce production expr -> simple_expr
-- On MOD reduce production expr -> simple_expr
-- On MINUS_DOT reduce production expr -> simple_expr
-- On MINUS reduce production expr -> simple_expr
-- On LPAREN reduce production expr -> simple_expr
-- On LOR reduce production expr -> simple_expr
-- On LESS_LESS reduce production expr -> simple_expr
-- On LESS_GREATER reduce production expr -> simple_expr
-- On LESS_EQUAL reduce production expr -> simple_expr
-- On LESS reduce production expr -> simple_expr
-- On LBRACK reduce production expr -> simple_expr
-- On LAND reduce production expr -> simple_expr
-- On INT reduce production expr -> simple_expr
-- On IN reduce production expr -> simple_expr
-- On IDENT reduce production expr -> simple_expr
-- On GREATER_EQUAL reduce production expr -> simple_expr
-- On GREATER reduce production expr -> simple_expr
-- On FLOAT reduce production expr -> simple_expr
-- On EXCL reduce production expr -> simple_expr
-- On EQUAL reduce production expr -> simple_expr
-- On END reduce production expr -> simple_expr
-- On ELSE reduce production expr -> simple_expr
-- On DOL reduce production expr -> simple_expr
-- On DO reduce production expr -> simple_expr
-- On CONS reduce production expr -> simple_expr
-- On COMMA reduce production expr -> simple_expr
-- On CHAR reduce production expr -> simple_expr
-- On BOOL reduce production expr -> simple_expr
-- On ATOM reduce production expr -> simple_expr
-- On AST_DOT reduce production expr -> simple_expr
-- On AST reduce production expr -> simple_expr

State 262:
## Known stack suffix:
## module_path
## LR(1) items:
binding -> module_path . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ASSIGN ]
## Transitions:
## Reductions:
-- On WITH reduce production binding -> module_path
-- On UIDENT reduce production binding -> module_path
-- On UARROW reduce production binding -> module_path
-- On TO reduce production binding -> module_path
-- On THEN reduce production binding -> module_path
-- On STRING reduce production binding -> module_path
-- On SLASH_DOT reduce production binding -> module_path
-- On SLASH reduce production binding -> module_path
-- On SEMI reduce production binding -> module_path
-- On RPAREN reduce production binding -> module_path
-- On RBRACK reduce production binding -> module_path
-- On RBRACE reduce production binding -> module_path
-- On PLUS_DOT reduce production binding -> module_path
-- On PLUS reduce production binding -> module_path
-- On PIPE reduce production binding -> module_path
-- On NL reduce production binding -> module_path
-- On MOD reduce production binding -> module_path
-- On MINUS_DOT reduce production binding -> module_path
-- On MINUS reduce production binding -> module_path
-- On LPAREN reduce production binding -> module_path
-- On LOR reduce production binding -> module_path
-- On LESS_LESS reduce production binding -> module_path
-- On LESS_GREATER reduce production binding -> module_path
-- On LESS_EQUAL reduce production binding -> module_path
-- On LESS reduce production binding -> module_path
-- On LBRACK reduce production binding -> module_path
-- On LARROW reduce production binding -> module_path
-- On LAND reduce production binding -> module_path
-- On INT reduce production binding -> module_path
-- On IN reduce production binding -> module_path
-- On IDENT reduce production binding -> module_path
-- On GREATER_EQUAL reduce production binding -> module_path
-- On GREATER reduce production binding -> module_path
-- On FLOAT reduce production binding -> module_path
-- On EXCL reduce production binding -> module_path
-- On EQUAL reduce production binding -> module_path
-- On END reduce production binding -> module_path
-- On ELSE reduce production binding -> module_path
-- On DOT reduce production binding -> module_path
-- On DOL reduce production binding -> module_path
-- On DO reduce production binding -> module_path
-- On CONS reduce production binding -> module_path
-- On COMMA reduce production binding -> module_path
-- On CHAR reduce production binding -> module_path
-- On BOOL reduce production binding -> module_path
-- On ATOM reduce production binding -> module_path
-- On AST_DOT reduce production binding -> module_path
-- On AST reduce production binding -> module_path
-- On ASSIGN reduce production binding -> module_path

State 263:
## Known stack suffix:
## if_exp
## LR(1) items:
expr -> if_exp . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> if_exp
-- On UIDENT reduce production expr -> if_exp
-- On UARROW reduce production expr -> if_exp
-- On TO reduce production expr -> if_exp
-- On THEN reduce production expr -> if_exp
-- On STRING reduce production expr -> if_exp
-- On SLASH_DOT reduce production expr -> if_exp
-- On SLASH reduce production expr -> if_exp
-- On SEMI reduce production expr -> if_exp
-- On RPAREN reduce production expr -> if_exp
-- On RBRACK reduce production expr -> if_exp
-- On RBRACE reduce production expr -> if_exp
-- On PLUS_DOT reduce production expr -> if_exp
-- On PLUS reduce production expr -> if_exp
-- On PIPE reduce production expr -> if_exp
-- On NL reduce production expr -> if_exp
-- On MOD reduce production expr -> if_exp
-- On MINUS_DOT reduce production expr -> if_exp
-- On MINUS reduce production expr -> if_exp
-- On LPAREN reduce production expr -> if_exp
-- On LOR reduce production expr -> if_exp
-- On LESS_LESS reduce production expr -> if_exp
-- On LESS_GREATER reduce production expr -> if_exp
-- On LESS_EQUAL reduce production expr -> if_exp
-- On LESS reduce production expr -> if_exp
-- On LBRACK reduce production expr -> if_exp
-- On LAND reduce production expr -> if_exp
-- On INT reduce production expr -> if_exp
-- On IN reduce production expr -> if_exp
-- On IDENT reduce production expr -> if_exp
-- On GREATER_EQUAL reduce production expr -> if_exp
-- On GREATER reduce production expr -> if_exp
-- On FLOAT reduce production expr -> if_exp
-- On EXCL reduce production expr -> if_exp
-- On EQUAL reduce production expr -> if_exp
-- On END reduce production expr -> if_exp
-- On ELSE reduce production expr -> if_exp
-- On DOL reduce production expr -> if_exp
-- On DO reduce production expr -> if_exp
-- On CONS reduce production expr -> if_exp
-- On COMMA reduce production expr -> if_exp
-- On CHAR reduce production expr -> if_exp
-- On BOOL reduce production expr -> if_exp
-- On ATOM reduce production expr -> if_exp
-- On AST_DOT reduce production expr -> if_exp
-- On AST reduce production expr -> if_exp

State 264:
## Known stack suffix:
## field_expr
## LR(1) items:
expr -> field_expr . LARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> field_expr . ASSIGN nl_opt expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
simple_expr -> field_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On LARROW shift to state 265
-- On ASSIGN shift to state 338
## Reductions:
-- On WITH reduce production simple_expr -> field_expr
-- On UIDENT reduce production simple_expr -> field_expr
-- On UARROW reduce production simple_expr -> field_expr
-- On TO reduce production simple_expr -> field_expr
-- On THEN reduce production simple_expr -> field_expr
-- On STRING reduce production simple_expr -> field_expr
-- On SLASH_DOT reduce production simple_expr -> field_expr
-- On SLASH reduce production simple_expr -> field_expr
-- On SEMI reduce production simple_expr -> field_expr
-- On RPAREN reduce production simple_expr -> field_expr
-- On RBRACK reduce production simple_expr -> field_expr
-- On RBRACE reduce production simple_expr -> field_expr
-- On PLUS_DOT reduce production simple_expr -> field_expr
-- On PLUS reduce production simple_expr -> field_expr
-- On PIPE reduce production simple_expr -> field_expr
-- On NL reduce production simple_expr -> field_expr
-- On MOD reduce production simple_expr -> field_expr
-- On MINUS_DOT reduce production simple_expr -> field_expr
-- On MINUS reduce production simple_expr -> field_expr
-- On LPAREN reduce production simple_expr -> field_expr
-- On LOR reduce production simple_expr -> field_expr
-- On LESS_LESS reduce production simple_expr -> field_expr
-- On LESS_GREATER reduce production simple_expr -> field_expr
-- On LESS_EQUAL reduce production simple_expr -> field_expr
-- On LESS reduce production simple_expr -> field_expr
-- On LBRACK reduce production simple_expr -> field_expr
-- On LAND reduce production simple_expr -> field_expr
-- On INT reduce production simple_expr -> field_expr
-- On IN reduce production simple_expr -> field_expr
-- On IDENT reduce production simple_expr -> field_expr
-- On GREATER_EQUAL reduce production simple_expr -> field_expr
-- On GREATER reduce production simple_expr -> field_expr
-- On FLOAT reduce production simple_expr -> field_expr
-- On EXCL reduce production simple_expr -> field_expr
-- On EQUAL reduce production simple_expr -> field_expr
-- On END reduce production simple_expr -> field_expr
-- On ELSE reduce production simple_expr -> field_expr
-- On DOL reduce production simple_expr -> field_expr
-- On DO reduce production simple_expr -> field_expr
-- On CONS reduce production simple_expr -> field_expr
-- On COMMA reduce production simple_expr -> field_expr
-- On CHAR reduce production simple_expr -> field_expr
-- On BOOL reduce production simple_expr -> field_expr
-- On ATOM reduce production simple_expr -> field_expr
-- On AST_DOT reduce production simple_expr -> field_expr
-- On AST reduce production simple_expr -> field_expr

State 265:
## Known stack suffix:
## field_expr LARROW
## LR(1) items:
expr -> field_expr LARROW . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 266
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 266:
## Known stack suffix:
## field_expr LARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> field_expr LARROW expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> field_expr LARROW expr
-- On TO reduce production expr -> field_expr LARROW expr
-- On THEN reduce production expr -> field_expr LARROW expr
-- On SEMI reduce production expr -> field_expr LARROW expr
-- On RPAREN reduce production expr -> field_expr LARROW expr
-- On RBRACK reduce production expr -> field_expr LARROW expr
-- On RBRACE reduce production expr -> field_expr LARROW expr
-- On PIPE reduce production expr -> field_expr LARROW expr
-- On NL reduce production expr -> field_expr LARROW expr
-- On IN reduce production expr -> field_expr LARROW expr
-- On END reduce production expr -> field_expr LARROW expr
-- On ELSE reduce production expr -> field_expr LARROW expr
-- On DOL reduce production expr -> field_expr LARROW expr
-- On DO reduce production expr -> field_expr LARROW expr
-- On COMMA reduce production expr -> field_expr LARROW expr

State 267:
## Known stack suffix:
## expr UARROW
## LR(1) items:
expr -> expr UARROW . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 268
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 268:
## Known stack suffix:
## expr UARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr UARROW expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr UARROW expr
-- On TO reduce production expr -> expr UARROW expr
-- On THEN reduce production expr -> expr UARROW expr
-- On SEMI reduce production expr -> expr UARROW expr
-- On RPAREN reduce production expr -> expr UARROW expr
-- On RBRACK reduce production expr -> expr UARROW expr
-- On RBRACE reduce production expr -> expr UARROW expr
-- On PIPE reduce production expr -> expr UARROW expr
-- On NL reduce production expr -> expr UARROW expr
-- On LOR reduce production expr -> expr UARROW expr
-- On LESS_GREATER reduce production expr -> expr UARROW expr
-- On LESS_EQUAL reduce production expr -> expr UARROW expr
-- On LESS reduce production expr -> expr UARROW expr
-- On LAND reduce production expr -> expr UARROW expr
-- On IN reduce production expr -> expr UARROW expr
-- On GREATER_EQUAL reduce production expr -> expr UARROW expr
-- On GREATER reduce production expr -> expr UARROW expr
-- On EQUAL reduce production expr -> expr UARROW expr
-- On END reduce production expr -> expr UARROW expr
-- On ELSE reduce production expr -> expr UARROW expr
-- On DOL reduce production expr -> expr UARROW expr
-- On DO reduce production expr -> expr UARROW expr
-- On COMMA reduce production expr -> expr UARROW expr

State 269:
## Known stack suffix:
## expr SLASH_DOT
## LR(1) items:
expr -> expr SLASH_DOT . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 270
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 270:
## Known stack suffix:
## expr SLASH_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr SLASH_DOT expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr SLASH_DOT expr
-- On UARROW reduce production expr -> expr SLASH_DOT expr
-- On TO reduce production expr -> expr SLASH_DOT expr
-- On THEN reduce production expr -> expr SLASH_DOT expr
-- On SLASH_DOT reduce production expr -> expr SLASH_DOT expr
-- On SLASH reduce production expr -> expr SLASH_DOT expr
-- On SEMI reduce production expr -> expr SLASH_DOT expr
-- On RPAREN reduce production expr -> expr SLASH_DOT expr
-- On RBRACK reduce production expr -> expr SLASH_DOT expr
-- On RBRACE reduce production expr -> expr SLASH_DOT expr
-- On PLUS_DOT reduce production expr -> expr SLASH_DOT expr
-- On PLUS reduce production expr -> expr SLASH_DOT expr
-- On PIPE reduce production expr -> expr SLASH_DOT expr
-- On NL reduce production expr -> expr SLASH_DOT expr
-- On MOD reduce production expr -> expr SLASH_DOT expr
-- On MINUS_DOT reduce production expr -> expr SLASH_DOT expr
-- On MINUS reduce production expr -> expr SLASH_DOT expr
-- On LOR reduce production expr -> expr SLASH_DOT expr
-- On LESS_GREATER reduce production expr -> expr SLASH_DOT expr
-- On LESS_EQUAL reduce production expr -> expr SLASH_DOT expr
-- On LESS reduce production expr -> expr SLASH_DOT expr
-- On LAND reduce production expr -> expr SLASH_DOT expr
-- On IN reduce production expr -> expr SLASH_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr SLASH_DOT expr
-- On GREATER reduce production expr -> expr SLASH_DOT expr
-- On EQUAL reduce production expr -> expr SLASH_DOT expr
-- On END reduce production expr -> expr SLASH_DOT expr
-- On ELSE reduce production expr -> expr SLASH_DOT expr
-- On DOL reduce production expr -> expr SLASH_DOT expr
-- On DO reduce production expr -> expr SLASH_DOT expr
-- On CONS reduce production expr -> expr SLASH_DOT expr
-- On COMMA reduce production expr -> expr SLASH_DOT expr
-- On AST_DOT reduce production expr -> expr SLASH_DOT expr
-- On AST reduce production expr -> expr SLASH_DOT expr

State 271:
## Known stack suffix:
## simple_expr
## LR(1) items:
actual_args -> simple_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production actual_args -> simple_expr
-- On UIDENT reduce production actual_args -> simple_expr
-- On UARROW reduce production actual_args -> simple_expr
-- On TO reduce production actual_args -> simple_expr
-- On THEN reduce production actual_args -> simple_expr
-- On STRING reduce production actual_args -> simple_expr
-- On SLASH_DOT reduce production actual_args -> simple_expr
-- On SLASH reduce production actual_args -> simple_expr
-- On SEMI reduce production actual_args -> simple_expr
-- On RPAREN reduce production actual_args -> simple_expr
-- On RBRACK reduce production actual_args -> simple_expr
-- On RBRACE reduce production actual_args -> simple_expr
-- On PLUS_DOT reduce production actual_args -> simple_expr
-- On PLUS reduce production actual_args -> simple_expr
-- On PIPE reduce production actual_args -> simple_expr
-- On NL reduce production actual_args -> simple_expr
-- On MOD reduce production actual_args -> simple_expr
-- On MINUS_DOT reduce production actual_args -> simple_expr
-- On MINUS reduce production actual_args -> simple_expr
-- On LPAREN reduce production actual_args -> simple_expr
-- On LOR reduce production actual_args -> simple_expr
-- On LESS_LESS reduce production actual_args -> simple_expr
-- On LESS_GREATER reduce production actual_args -> simple_expr
-- On LESS_EQUAL reduce production actual_args -> simple_expr
-- On LESS reduce production actual_args -> simple_expr
-- On LBRACK reduce production actual_args -> simple_expr
-- On LAND reduce production actual_args -> simple_expr
-- On INT reduce production actual_args -> simple_expr
-- On IN reduce production actual_args -> simple_expr
-- On IDENT reduce production actual_args -> simple_expr
-- On GREATER_EQUAL reduce production actual_args -> simple_expr
-- On GREATER reduce production actual_args -> simple_expr
-- On FLOAT reduce production actual_args -> simple_expr
-- On EXCL reduce production actual_args -> simple_expr
-- On EQUAL reduce production actual_args -> simple_expr
-- On END reduce production actual_args -> simple_expr
-- On ELSE reduce production actual_args -> simple_expr
-- On DOL reduce production actual_args -> simple_expr
-- On DO reduce production actual_args -> simple_expr
-- On CONS reduce production actual_args -> simple_expr
-- On COMMA reduce production actual_args -> simple_expr
-- On CHAR reduce production actual_args -> simple_expr
-- On BOOL reduce production actual_args -> simple_expr
-- On ATOM reduce production actual_args -> simple_expr
-- On AST_DOT reduce production actual_args -> simple_expr
-- On AST reduce production actual_args -> simple_expr

State 272:
## Known stack suffix:
## field_expr
## LR(1) items:
simple_expr -> field_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production simple_expr -> field_expr
-- On UIDENT reduce production simple_expr -> field_expr
-- On UARROW reduce production simple_expr -> field_expr
-- On TO reduce production simple_expr -> field_expr
-- On THEN reduce production simple_expr -> field_expr
-- On STRING reduce production simple_expr -> field_expr
-- On SLASH_DOT reduce production simple_expr -> field_expr
-- On SLASH reduce production simple_expr -> field_expr
-- On SEMI reduce production simple_expr -> field_expr
-- On RPAREN reduce production simple_expr -> field_expr
-- On RBRACK reduce production simple_expr -> field_expr
-- On RBRACE reduce production simple_expr -> field_expr
-- On PLUS_DOT reduce production simple_expr -> field_expr
-- On PLUS reduce production simple_expr -> field_expr
-- On PIPE reduce production simple_expr -> field_expr
-- On NL reduce production simple_expr -> field_expr
-- On MOD reduce production simple_expr -> field_expr
-- On MINUS_DOT reduce production simple_expr -> field_expr
-- On MINUS reduce production simple_expr -> field_expr
-- On LPAREN reduce production simple_expr -> field_expr
-- On LOR reduce production simple_expr -> field_expr
-- On LESS_LESS reduce production simple_expr -> field_expr
-- On LESS_GREATER reduce production simple_expr -> field_expr
-- On LESS_EQUAL reduce production simple_expr -> field_expr
-- On LESS reduce production simple_expr -> field_expr
-- On LBRACK reduce production simple_expr -> field_expr
-- On LAND reduce production simple_expr -> field_expr
-- On INT reduce production simple_expr -> field_expr
-- On IN reduce production simple_expr -> field_expr
-- On IDENT reduce production simple_expr -> field_expr
-- On GREATER_EQUAL reduce production simple_expr -> field_expr
-- On GREATER reduce production simple_expr -> field_expr
-- On FLOAT reduce production simple_expr -> field_expr
-- On EXCL reduce production simple_expr -> field_expr
-- On EQUAL reduce production simple_expr -> field_expr
-- On END reduce production simple_expr -> field_expr
-- On ELSE reduce production simple_expr -> field_expr
-- On DOL reduce production simple_expr -> field_expr
-- On DO reduce production simple_expr -> field_expr
-- On CONS reduce production simple_expr -> field_expr
-- On COMMA reduce production simple_expr -> field_expr
-- On CHAR reduce production simple_expr -> field_expr
-- On BOOL reduce production simple_expr -> field_expr
-- On ATOM reduce production simple_expr -> field_expr
-- On AST_DOT reduce production simple_expr -> field_expr
-- On AST reduce production simple_expr -> field_expr

State 273:
## Known stack suffix:
## binding
## LR(1) items:
primary -> binding . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> binding
-- On UIDENT reduce production primary -> binding
-- On UARROW reduce production primary -> binding
-- On TO reduce production primary -> binding
-- On THEN reduce production primary -> binding
-- On STRING reduce production primary -> binding
-- On SLASH_DOT reduce production primary -> binding
-- On SLASH reduce production primary -> binding
-- On SEMI reduce production primary -> binding
-- On RPAREN reduce production primary -> binding
-- On RBRACK reduce production primary -> binding
-- On RBRACE reduce production primary -> binding
-- On PLUS_DOT reduce production primary -> binding
-- On PLUS reduce production primary -> binding
-- On PIPE reduce production primary -> binding
-- On NL reduce production primary -> binding
-- On MOD reduce production primary -> binding
-- On MINUS_DOT reduce production primary -> binding
-- On MINUS reduce production primary -> binding
-- On LPAREN reduce production primary -> binding
-- On LOR reduce production primary -> binding
-- On LESS_LESS reduce production primary -> binding
-- On LESS_GREATER reduce production primary -> binding
-- On LESS_EQUAL reduce production primary -> binding
-- On LESS reduce production primary -> binding
-- On LBRACK reduce production primary -> binding
-- On LAND reduce production primary -> binding
-- On INT reduce production primary -> binding
-- On IN reduce production primary -> binding
-- On IDENT reduce production primary -> binding
-- On GREATER_EQUAL reduce production primary -> binding
-- On GREATER reduce production primary -> binding
-- On FLOAT reduce production primary -> binding
-- On EXCL reduce production primary -> binding
-- On EQUAL reduce production primary -> binding
-- On END reduce production primary -> binding
-- On ELSE reduce production primary -> binding
-- On DOT reduce production primary -> binding
-- On DOL reduce production primary -> binding
-- On DO reduce production primary -> binding
-- On CONS reduce production primary -> binding
-- On COMMA reduce production primary -> binding
-- On CHAR reduce production primary -> binding
-- On BOOL reduce production primary -> binding
-- On ATOM reduce production primary -> binding
-- On AST_DOT reduce production primary -> binding
-- On AST reduce production primary -> binding

State 274:
## Known stack suffix:
## array_expr
## LR(1) items:
simple_expr -> array_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production simple_expr -> array_expr
-- On UIDENT reduce production simple_expr -> array_expr
-- On UARROW reduce production simple_expr -> array_expr
-- On TO reduce production simple_expr -> array_expr
-- On THEN reduce production simple_expr -> array_expr
-- On STRING reduce production simple_expr -> array_expr
-- On SLASH_DOT reduce production simple_expr -> array_expr
-- On SLASH reduce production simple_expr -> array_expr
-- On SEMI reduce production simple_expr -> array_expr
-- On RPAREN reduce production simple_expr -> array_expr
-- On RBRACK reduce production simple_expr -> array_expr
-- On RBRACE reduce production simple_expr -> array_expr
-- On PLUS_DOT reduce production simple_expr -> array_expr
-- On PLUS reduce production simple_expr -> array_expr
-- On PIPE reduce production simple_expr -> array_expr
-- On NL reduce production simple_expr -> array_expr
-- On MOD reduce production simple_expr -> array_expr
-- On MINUS_DOT reduce production simple_expr -> array_expr
-- On MINUS reduce production simple_expr -> array_expr
-- On LPAREN reduce production simple_expr -> array_expr
-- On LOR reduce production simple_expr -> array_expr
-- On LESS_LESS reduce production simple_expr -> array_expr
-- On LESS_GREATER reduce production simple_expr -> array_expr
-- On LESS_EQUAL reduce production simple_expr -> array_expr
-- On LESS reduce production simple_expr -> array_expr
-- On LBRACK reduce production simple_expr -> array_expr
-- On LAND reduce production simple_expr -> array_expr
-- On INT reduce production simple_expr -> array_expr
-- On IN reduce production simple_expr -> array_expr
-- On IDENT reduce production simple_expr -> array_expr
-- On GREATER_EQUAL reduce production simple_expr -> array_expr
-- On GREATER reduce production simple_expr -> array_expr
-- On FLOAT reduce production simple_expr -> array_expr
-- On EXCL reduce production simple_expr -> array_expr
-- On EQUAL reduce production simple_expr -> array_expr
-- On END reduce production simple_expr -> array_expr
-- On ELSE reduce production simple_expr -> array_expr
-- On DOL reduce production simple_expr -> array_expr
-- On DO reduce production simple_expr -> array_expr
-- On CONS reduce production simple_expr -> array_expr
-- On COMMA reduce production simple_expr -> array_expr
-- On CHAR reduce production simple_expr -> array_expr
-- On BOOL reduce production simple_expr -> array_expr
-- On ATOM reduce production simple_expr -> array_expr
-- On AST_DOT reduce production simple_expr -> array_expr
-- On AST reduce production simple_expr -> array_expr

State 275:
## Known stack suffix:
## expr actual_args
## LR(1) items:
actual_args -> actual_args . simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr actual_args . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr actual_args . do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DO shift to state 276
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 336
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On do_block shift to state 337
-- On binding shift to state 273
-- On array_expr shift to state 274
## Reductions:
-- On WITH reduce production expr -> expr actual_args
-- On UARROW reduce production expr -> expr actual_args
-- On TO reduce production expr -> expr actual_args
-- On THEN reduce production expr -> expr actual_args
-- On SLASH_DOT reduce production expr -> expr actual_args
-- On SLASH reduce production expr -> expr actual_args
-- On SEMI reduce production expr -> expr actual_args
-- On RPAREN reduce production expr -> expr actual_args
-- On RBRACK reduce production expr -> expr actual_args
-- On RBRACE reduce production expr -> expr actual_args
-- On PLUS_DOT reduce production expr -> expr actual_args
-- On PLUS reduce production expr -> expr actual_args
-- On PIPE reduce production expr -> expr actual_args
-- On NL reduce production expr -> expr actual_args
-- On MOD reduce production expr -> expr actual_args
-- On MINUS_DOT reduce production expr -> expr actual_args
-- On MINUS reduce production expr -> expr actual_args
-- On LOR reduce production expr -> expr actual_args
-- On LESS_GREATER reduce production expr -> expr actual_args
-- On LESS_EQUAL reduce production expr -> expr actual_args
-- On LESS reduce production expr -> expr actual_args
-- On LAND reduce production expr -> expr actual_args
-- On IN reduce production expr -> expr actual_args
-- On GREATER_EQUAL reduce production expr -> expr actual_args
-- On GREATER reduce production expr -> expr actual_args
-- On EQUAL reduce production expr -> expr actual_args
-- On END reduce production expr -> expr actual_args
-- On ELSE reduce production expr -> expr actual_args
-- On DOL reduce production expr -> expr actual_args
-- On CONS reduce production expr -> expr actual_args
-- On COMMA reduce production expr -> expr actual_args
-- On AST_DOT reduce production expr -> expr actual_args
-- On AST reduce production expr -> expr actual_args

State 276:
## Known stack suffix:
## DO
## LR(1) items:
do_block -> DO . nl_opt rev_formal_args RARROW nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
do_block -> DO . nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 277
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 277:
## Known stack suffix:
## DO nl_opt
## LR(1) items:
do_block -> DO nl_opt . rev_formal_args RARROW nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
do_block -> DO nl_opt . pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On rev_formal_args shift to state 278
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 332
-- On pattern shift to state 334
-- On formal_arg shift to state 335
-- On constr_name shift to state 146
## Reductions:

State 278:
## Known stack suffix:
## DO nl_opt rev_formal_args
## LR(1) items:
do_block -> DO nl_opt rev_formal_args . RARROW nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_formal_args -> rev_formal_args . formal_arg [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT BOOL ATOM ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On RARROW shift to state 279
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 329
-- On formal_arg shift to state 330
-- On constr_name shift to state 146
## Reductions:

State 279:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW . nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 280
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 280:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW nl_opt
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW nl_opt . block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 327
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 281:
## Known stack suffix:
## stmt
## LR(1) items:
rev_stmts -> stmt . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production rev_stmts -> stmt
-- On UIDENT reduce production rev_stmts -> stmt
-- On UARROW reduce production rev_stmts -> stmt
-- On TO reduce production rev_stmts -> stmt
-- On THEN reduce production rev_stmts -> stmt
-- On STRING reduce production rev_stmts -> stmt
-- On SLASH_DOT reduce production rev_stmts -> stmt
-- On SLASH reduce production rev_stmts -> stmt
-- On SEMI reduce production rev_stmts -> stmt
-- On RPAREN reduce production rev_stmts -> stmt
-- On RBRACK reduce production rev_stmts -> stmt
-- On RBRACE reduce production rev_stmts -> stmt
-- On PLUS_DOT reduce production rev_stmts -> stmt
-- On PLUS reduce production rev_stmts -> stmt
-- On PIPE reduce production rev_stmts -> stmt
-- On NL reduce production rev_stmts -> stmt
-- On MOD reduce production rev_stmts -> stmt
-- On MINUS_DOT reduce production rev_stmts -> stmt
-- On MINUS reduce production rev_stmts -> stmt
-- On LPAREN reduce production rev_stmts -> stmt
-- On LOR reduce production rev_stmts -> stmt
-- On LESS_LESS reduce production rev_stmts -> stmt
-- On LESS_GREATER reduce production rev_stmts -> stmt
-- On LESS_EQUAL reduce production rev_stmts -> stmt
-- On LESS reduce production rev_stmts -> stmt
-- On LBRACK reduce production rev_stmts -> stmt
-- On LAND reduce production rev_stmts -> stmt
-- On INT reduce production rev_stmts -> stmt
-- On IN reduce production rev_stmts -> stmt
-- On IDENT reduce production rev_stmts -> stmt
-- On GREATER_EQUAL reduce production rev_stmts -> stmt
-- On GREATER reduce production rev_stmts -> stmt
-- On FLOAT reduce production rev_stmts -> stmt
-- On EXCL reduce production rev_stmts -> stmt
-- On EQUAL reduce production rev_stmts -> stmt
-- On END reduce production rev_stmts -> stmt
-- On ELSE reduce production rev_stmts -> stmt
-- On DOL reduce production rev_stmts -> stmt
-- On DO reduce production rev_stmts -> stmt
-- On CONS reduce production rev_stmts -> stmt
-- On COMMA reduce production rev_stmts -> stmt
-- On CHAR reduce production rev_stmts -> stmt
-- On BOOL reduce production rev_stmts -> stmt
-- On ATOM reduce production rev_stmts -> stmt
-- On AST_DOT reduce production rev_stmts -> stmt
-- On AST reduce production rev_stmts -> stmt

State 282:
## Known stack suffix:
## rev_stmts
## LR(1) items:
block -> rev_stmts . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
block -> rev_stmts . NL [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_stmts -> rev_stmts . SEMI stmt [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_stmts -> rev_stmts . NL stmt [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On SEMI shift to state 283
-- On NL shift to state 325
## Reductions:
-- On WITH reduce production block -> rev_stmts
-- On UIDENT reduce production block -> rev_stmts
-- On UARROW reduce production block -> rev_stmts
-- On TO reduce production block -> rev_stmts
-- On THEN reduce production block -> rev_stmts
-- On STRING reduce production block -> rev_stmts
-- On SLASH_DOT reduce production block -> rev_stmts
-- On SLASH reduce production block -> rev_stmts
-- On RPAREN reduce production block -> rev_stmts
-- On RBRACK reduce production block -> rev_stmts
-- On RBRACE reduce production block -> rev_stmts
-- On PLUS_DOT reduce production block -> rev_stmts
-- On PLUS reduce production block -> rev_stmts
-- On PIPE reduce production block -> rev_stmts
-- On MOD reduce production block -> rev_stmts
-- On MINUS_DOT reduce production block -> rev_stmts
-- On MINUS reduce production block -> rev_stmts
-- On LPAREN reduce production block -> rev_stmts
-- On LOR reduce production block -> rev_stmts
-- On LESS_LESS reduce production block -> rev_stmts
-- On LESS_GREATER reduce production block -> rev_stmts
-- On LESS_EQUAL reduce production block -> rev_stmts
-- On LESS reduce production block -> rev_stmts
-- On LBRACK reduce production block -> rev_stmts
-- On LAND reduce production block -> rev_stmts
-- On INT reduce production block -> rev_stmts
-- On IN reduce production block -> rev_stmts
-- On IDENT reduce production block -> rev_stmts
-- On GREATER_EQUAL reduce production block -> rev_stmts
-- On GREATER reduce production block -> rev_stmts
-- On FLOAT reduce production block -> rev_stmts
-- On EXCL reduce production block -> rev_stmts
-- On EQUAL reduce production block -> rev_stmts
-- On END reduce production block -> rev_stmts
-- On ELSE reduce production block -> rev_stmts
-- On DOL reduce production block -> rev_stmts
-- On DO reduce production block -> rev_stmts
-- On CONS reduce production block -> rev_stmts
-- On COMMA reduce production block -> rev_stmts
-- On CHAR reduce production block -> rev_stmts
-- On BOOL reduce production block -> rev_stmts
-- On ATOM reduce production block -> rev_stmts
-- On AST_DOT reduce production block -> rev_stmts
-- On AST reduce production block -> rev_stmts

State 283:
## Known stack suffix:
## rev_stmts SEMI
## LR(1) items:
rev_stmts -> rev_stmts SEMI . stmt [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 284
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 284:
## Known stack suffix:
## rev_stmts SEMI stmt
## LR(1) items:
rev_stmts -> rev_stmts SEMI stmt . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production rev_stmts -> rev_stmts SEMI stmt
-- On UIDENT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On UARROW reduce production rev_stmts -> rev_stmts SEMI stmt
-- On TO reduce production rev_stmts -> rev_stmts SEMI stmt
-- On THEN reduce production rev_stmts -> rev_stmts SEMI stmt
-- On STRING reduce production rev_stmts -> rev_stmts SEMI stmt
-- On SLASH_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On SLASH reduce production rev_stmts -> rev_stmts SEMI stmt
-- On SEMI reduce production rev_stmts -> rev_stmts SEMI stmt
-- On RPAREN reduce production rev_stmts -> rev_stmts SEMI stmt
-- On RBRACK reduce production rev_stmts -> rev_stmts SEMI stmt
-- On RBRACE reduce production rev_stmts -> rev_stmts SEMI stmt
-- On PLUS_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On PLUS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On PIPE reduce production rev_stmts -> rev_stmts SEMI stmt
-- On NL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On MOD reduce production rev_stmts -> rev_stmts SEMI stmt
-- On MINUS_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On MINUS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LPAREN reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LOR reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS_LESS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS_GREATER reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS_EQUAL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LBRACK reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LAND reduce production rev_stmts -> rev_stmts SEMI stmt
-- On INT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On IN reduce production rev_stmts -> rev_stmts SEMI stmt
-- On IDENT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On GREATER_EQUAL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On GREATER reduce production rev_stmts -> rev_stmts SEMI stmt
-- On FLOAT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On EXCL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On EQUAL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On END reduce production rev_stmts -> rev_stmts SEMI stmt
-- On ELSE reduce production rev_stmts -> rev_stmts SEMI stmt
-- On DOL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On DO reduce production rev_stmts -> rev_stmts SEMI stmt
-- On CONS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On COMMA reduce production rev_stmts -> rev_stmts SEMI stmt
-- On CHAR reduce production rev_stmts -> rev_stmts SEMI stmt
-- On BOOL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On ATOM reduce production rev_stmts -> rev_stmts SEMI stmt
-- On AST_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On AST reduce production rev_stmts -> rev_stmts SEMI stmt

State 285:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
stmt -> expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production stmt -> expr
-- On TO reduce production stmt -> expr
-- On THEN reduce production stmt -> expr
-- On SEMI reduce production stmt -> expr
-- On RPAREN reduce production stmt -> expr
-- On RBRACK reduce production stmt -> expr
-- On RBRACE reduce production stmt -> expr
-- On PIPE reduce production stmt -> expr
-- On NL reduce production stmt -> expr
-- On IN reduce production stmt -> expr
-- On END reduce production stmt -> expr
-- On ELSE reduce production stmt -> expr
-- On DO reduce production stmt -> expr
-- On COMMA reduce production stmt -> expr

State 286:
## Known stack suffix:
## expr SLASH
## LR(1) items:
expr -> expr SLASH . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 287
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 287:
## Known stack suffix:
## expr SLASH expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr SLASH expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr SLASH expr
-- On UARROW reduce production expr -> expr SLASH expr
-- On TO reduce production expr -> expr SLASH expr
-- On THEN reduce production expr -> expr SLASH expr
-- On SLASH_DOT reduce production expr -> expr SLASH expr
-- On SLASH reduce production expr -> expr SLASH expr
-- On SEMI reduce production expr -> expr SLASH expr
-- On RPAREN reduce production expr -> expr SLASH expr
-- On RBRACK reduce production expr -> expr SLASH expr
-- On RBRACE reduce production expr -> expr SLASH expr
-- On PLUS_DOT reduce production expr -> expr SLASH expr
-- On PLUS reduce production expr -> expr SLASH expr
-- On PIPE reduce production expr -> expr SLASH expr
-- On NL reduce production expr -> expr SLASH expr
-- On MOD reduce production expr -> expr SLASH expr
-- On MINUS_DOT reduce production expr -> expr SLASH expr
-- On MINUS reduce production expr -> expr SLASH expr
-- On LOR reduce production expr -> expr SLASH expr
-- On LESS_GREATER reduce production expr -> expr SLASH expr
-- On LESS_EQUAL reduce production expr -> expr SLASH expr
-- On LESS reduce production expr -> expr SLASH expr
-- On LAND reduce production expr -> expr SLASH expr
-- On IN reduce production expr -> expr SLASH expr
-- On GREATER_EQUAL reduce production expr -> expr SLASH expr
-- On GREATER reduce production expr -> expr SLASH expr
-- On EQUAL reduce production expr -> expr SLASH expr
-- On END reduce production expr -> expr SLASH expr
-- On ELSE reduce production expr -> expr SLASH expr
-- On DOL reduce production expr -> expr SLASH expr
-- On DO reduce production expr -> expr SLASH expr
-- On CONS reduce production expr -> expr SLASH expr
-- On COMMA reduce production expr -> expr SLASH expr
-- On AST_DOT reduce production expr -> expr SLASH expr
-- On AST reduce production expr -> expr SLASH expr

State 288:
## Known stack suffix:
## array_expr
## LR(1) items:
expr -> array_expr . LARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
simple_expr -> array_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On LARROW shift to state 289
## Reductions:
-- On WITH reduce production simple_expr -> array_expr
-- On UIDENT reduce production simple_expr -> array_expr
-- On UARROW reduce production simple_expr -> array_expr
-- On TO reduce production simple_expr -> array_expr
-- On THEN reduce production simple_expr -> array_expr
-- On STRING reduce production simple_expr -> array_expr
-- On SLASH_DOT reduce production simple_expr -> array_expr
-- On SLASH reduce production simple_expr -> array_expr
-- On SEMI reduce production simple_expr -> array_expr
-- On RPAREN reduce production simple_expr -> array_expr
-- On RBRACK reduce production simple_expr -> array_expr
-- On RBRACE reduce production simple_expr -> array_expr
-- On PLUS_DOT reduce production simple_expr -> array_expr
-- On PLUS reduce production simple_expr -> array_expr
-- On PIPE reduce production simple_expr -> array_expr
-- On NL reduce production simple_expr -> array_expr
-- On MOD reduce production simple_expr -> array_expr
-- On MINUS_DOT reduce production simple_expr -> array_expr
-- On MINUS reduce production simple_expr -> array_expr
-- On LPAREN reduce production simple_expr -> array_expr
-- On LOR reduce production simple_expr -> array_expr
-- On LESS_LESS reduce production simple_expr -> array_expr
-- On LESS_GREATER reduce production simple_expr -> array_expr
-- On LESS_EQUAL reduce production simple_expr -> array_expr
-- On LESS reduce production simple_expr -> array_expr
-- On LBRACK reduce production simple_expr -> array_expr
-- On LAND reduce production simple_expr -> array_expr
-- On INT reduce production simple_expr -> array_expr
-- On IN reduce production simple_expr -> array_expr
-- On IDENT reduce production simple_expr -> array_expr
-- On GREATER_EQUAL reduce production simple_expr -> array_expr
-- On GREATER reduce production simple_expr -> array_expr
-- On FLOAT reduce production simple_expr -> array_expr
-- On EXCL reduce production simple_expr -> array_expr
-- On EQUAL reduce production simple_expr -> array_expr
-- On END reduce production simple_expr -> array_expr
-- On ELSE reduce production simple_expr -> array_expr
-- On DOL reduce production simple_expr -> array_expr
-- On DO reduce production simple_expr -> array_expr
-- On CONS reduce production simple_expr -> array_expr
-- On COMMA reduce production simple_expr -> array_expr
-- On CHAR reduce production simple_expr -> array_expr
-- On BOOL reduce production simple_expr -> array_expr
-- On ATOM reduce production simple_expr -> array_expr
-- On AST_DOT reduce production simple_expr -> array_expr
-- On AST reduce production simple_expr -> array_expr

State 289:
## Known stack suffix:
## array_expr LARROW
## LR(1) items:
expr -> array_expr LARROW . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 290
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 290:
## Known stack suffix:
## array_expr LARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> array_expr LARROW expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> array_expr LARROW expr
-- On TO reduce production expr -> array_expr LARROW expr
-- On THEN reduce production expr -> array_expr LARROW expr
-- On SEMI reduce production expr -> array_expr LARROW expr
-- On RPAREN reduce production expr -> array_expr LARROW expr
-- On RBRACK reduce production expr -> array_expr LARROW expr
-- On RBRACE reduce production expr -> array_expr LARROW expr
-- On PIPE reduce production expr -> array_expr LARROW expr
-- On NL reduce production expr -> array_expr LARROW expr
-- On IN reduce production expr -> array_expr LARROW expr
-- On END reduce production expr -> array_expr LARROW expr
-- On ELSE reduce production expr -> array_expr LARROW expr
-- On DOL reduce production expr -> array_expr LARROW expr
-- On DO reduce production expr -> array_expr LARROW expr
-- On COMMA reduce production expr -> array_expr LARROW expr

State 291:
## Known stack suffix:
## expr PLUS_DOT
## LR(1) items:
expr -> expr PLUS_DOT . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 292
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 292:
## Known stack suffix:
## expr PLUS_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr PLUS_DOT expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On MOD shift to state 293
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr PLUS_DOT expr
-- On UARROW reduce production expr -> expr PLUS_DOT expr
-- On TO reduce production expr -> expr PLUS_DOT expr
-- On THEN reduce production expr -> expr PLUS_DOT expr
-- On SEMI reduce production expr -> expr PLUS_DOT expr
-- On RPAREN reduce production expr -> expr PLUS_DOT expr
-- On RBRACK reduce production expr -> expr PLUS_DOT expr
-- On RBRACE reduce production expr -> expr PLUS_DOT expr
-- On PLUS_DOT reduce production expr -> expr PLUS_DOT expr
-- On PLUS reduce production expr -> expr PLUS_DOT expr
-- On PIPE reduce production expr -> expr PLUS_DOT expr
-- On NL reduce production expr -> expr PLUS_DOT expr
-- On MINUS_DOT reduce production expr -> expr PLUS_DOT expr
-- On MINUS reduce production expr -> expr PLUS_DOT expr
-- On LOR reduce production expr -> expr PLUS_DOT expr
-- On LESS_GREATER reduce production expr -> expr PLUS_DOT expr
-- On LESS_EQUAL reduce production expr -> expr PLUS_DOT expr
-- On LESS reduce production expr -> expr PLUS_DOT expr
-- On LAND reduce production expr -> expr PLUS_DOT expr
-- On IN reduce production expr -> expr PLUS_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr PLUS_DOT expr
-- On GREATER reduce production expr -> expr PLUS_DOT expr
-- On EQUAL reduce production expr -> expr PLUS_DOT expr
-- On END reduce production expr -> expr PLUS_DOT expr
-- On ELSE reduce production expr -> expr PLUS_DOT expr
-- On DOL reduce production expr -> expr PLUS_DOT expr
-- On DO reduce production expr -> expr PLUS_DOT expr
-- On CONS reduce production expr -> expr PLUS_DOT expr
-- On COMMA reduce production expr -> expr PLUS_DOT expr

State 293:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 294
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 294:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr MOD expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr MOD expr
-- On UARROW reduce production expr -> expr MOD expr
-- On TO reduce production expr -> expr MOD expr
-- On THEN reduce production expr -> expr MOD expr
-- On SLASH_DOT reduce production expr -> expr MOD expr
-- On SLASH reduce production expr -> expr MOD expr
-- On SEMI reduce production expr -> expr MOD expr
-- On RPAREN reduce production expr -> expr MOD expr
-- On RBRACK reduce production expr -> expr MOD expr
-- On RBRACE reduce production expr -> expr MOD expr
-- On PLUS_DOT reduce production expr -> expr MOD expr
-- On PLUS reduce production expr -> expr MOD expr
-- On PIPE reduce production expr -> expr MOD expr
-- On NL reduce production expr -> expr MOD expr
-- On MOD reduce production expr -> expr MOD expr
-- On MINUS_DOT reduce production expr -> expr MOD expr
-- On MINUS reduce production expr -> expr MOD expr
-- On LOR reduce production expr -> expr MOD expr
-- On LESS_GREATER reduce production expr -> expr MOD expr
-- On LESS_EQUAL reduce production expr -> expr MOD expr
-- On LESS reduce production expr -> expr MOD expr
-- On LAND reduce production expr -> expr MOD expr
-- On IN reduce production expr -> expr MOD expr
-- On GREATER_EQUAL reduce production expr -> expr MOD expr
-- On GREATER reduce production expr -> expr MOD expr
-- On EQUAL reduce production expr -> expr MOD expr
-- On END reduce production expr -> expr MOD expr
-- On ELSE reduce production expr -> expr MOD expr
-- On DOL reduce production expr -> expr MOD expr
-- On DO reduce production expr -> expr MOD expr
-- On CONS reduce production expr -> expr MOD expr
-- On COMMA reduce production expr -> expr MOD expr
-- On AST_DOT reduce production expr -> expr MOD expr
-- On AST reduce production expr -> expr MOD expr

State 295:
## Known stack suffix:
## expr AST_DOT
## LR(1) items:
expr -> expr AST_DOT . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 296
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 296:
## Known stack suffix:
## expr AST_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr AST_DOT expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr AST_DOT expr
-- On UARROW reduce production expr -> expr AST_DOT expr
-- On TO reduce production expr -> expr AST_DOT expr
-- On THEN reduce production expr -> expr AST_DOT expr
-- On SLASH_DOT reduce production expr -> expr AST_DOT expr
-- On SLASH reduce production expr -> expr AST_DOT expr
-- On SEMI reduce production expr -> expr AST_DOT expr
-- On RPAREN reduce production expr -> expr AST_DOT expr
-- On RBRACK reduce production expr -> expr AST_DOT expr
-- On RBRACE reduce production expr -> expr AST_DOT expr
-- On PLUS_DOT reduce production expr -> expr AST_DOT expr
-- On PLUS reduce production expr -> expr AST_DOT expr
-- On PIPE reduce production expr -> expr AST_DOT expr
-- On NL reduce production expr -> expr AST_DOT expr
-- On MOD reduce production expr -> expr AST_DOT expr
-- On MINUS_DOT reduce production expr -> expr AST_DOT expr
-- On MINUS reduce production expr -> expr AST_DOT expr
-- On LOR reduce production expr -> expr AST_DOT expr
-- On LESS_GREATER reduce production expr -> expr AST_DOT expr
-- On LESS_EQUAL reduce production expr -> expr AST_DOT expr
-- On LESS reduce production expr -> expr AST_DOT expr
-- On LAND reduce production expr -> expr AST_DOT expr
-- On IN reduce production expr -> expr AST_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr AST_DOT expr
-- On GREATER reduce production expr -> expr AST_DOT expr
-- On EQUAL reduce production expr -> expr AST_DOT expr
-- On END reduce production expr -> expr AST_DOT expr
-- On ELSE reduce production expr -> expr AST_DOT expr
-- On DOL reduce production expr -> expr AST_DOT expr
-- On DO reduce production expr -> expr AST_DOT expr
-- On CONS reduce production expr -> expr AST_DOT expr
-- On COMMA reduce production expr -> expr AST_DOT expr
-- On AST_DOT reduce production expr -> expr AST_DOT expr
-- On AST reduce production expr -> expr AST_DOT expr

State 297:
## Known stack suffix:
## expr AST
## LR(1) items:
expr -> expr AST . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 298
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 298:
## Known stack suffix:
## expr AST expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr AST expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr AST expr
-- On UARROW reduce production expr -> expr AST expr
-- On TO reduce production expr -> expr AST expr
-- On THEN reduce production expr -> expr AST expr
-- On SLASH_DOT reduce production expr -> expr AST expr
-- On SLASH reduce production expr -> expr AST expr
-- On SEMI reduce production expr -> expr AST expr
-- On RPAREN reduce production expr -> expr AST expr
-- On RBRACK reduce production expr -> expr AST expr
-- On RBRACE reduce production expr -> expr AST expr
-- On PLUS_DOT reduce production expr -> expr AST expr
-- On PLUS reduce production expr -> expr AST expr
-- On PIPE reduce production expr -> expr AST expr
-- On NL reduce production expr -> expr AST expr
-- On MOD reduce production expr -> expr AST expr
-- On MINUS_DOT reduce production expr -> expr AST expr
-- On MINUS reduce production expr -> expr AST expr
-- On LOR reduce production expr -> expr AST expr
-- On LESS_GREATER reduce production expr -> expr AST expr
-- On LESS_EQUAL reduce production expr -> expr AST expr
-- On LESS reduce production expr -> expr AST expr
-- On LAND reduce production expr -> expr AST expr
-- On IN reduce production expr -> expr AST expr
-- On GREATER_EQUAL reduce production expr -> expr AST expr
-- On GREATER reduce production expr -> expr AST expr
-- On EQUAL reduce production expr -> expr AST expr
-- On END reduce production expr -> expr AST expr
-- On ELSE reduce production expr -> expr AST expr
-- On DOL reduce production expr -> expr AST expr
-- On DO reduce production expr -> expr AST expr
-- On CONS reduce production expr -> expr AST expr
-- On COMMA reduce production expr -> expr AST expr
-- On AST_DOT reduce production expr -> expr AST expr
-- On AST reduce production expr -> expr AST expr

State 299:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 300
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 300:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr PLUS expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On MOD shift to state 293
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr PLUS expr
-- On UARROW reduce production expr -> expr PLUS expr
-- On TO reduce production expr -> expr PLUS expr
-- On THEN reduce production expr -> expr PLUS expr
-- On SEMI reduce production expr -> expr PLUS expr
-- On RPAREN reduce production expr -> expr PLUS expr
-- On RBRACK reduce production expr -> expr PLUS expr
-- On RBRACE reduce production expr -> expr PLUS expr
-- On PLUS_DOT reduce production expr -> expr PLUS expr
-- On PLUS reduce production expr -> expr PLUS expr
-- On PIPE reduce production expr -> expr PLUS expr
-- On NL reduce production expr -> expr PLUS expr
-- On MINUS_DOT reduce production expr -> expr PLUS expr
-- On MINUS reduce production expr -> expr PLUS expr
-- On LOR reduce production expr -> expr PLUS expr
-- On LESS_GREATER reduce production expr -> expr PLUS expr
-- On LESS_EQUAL reduce production expr -> expr PLUS expr
-- On LESS reduce production expr -> expr PLUS expr
-- On LAND reduce production expr -> expr PLUS expr
-- On IN reduce production expr -> expr PLUS expr
-- On GREATER_EQUAL reduce production expr -> expr PLUS expr
-- On GREATER reduce production expr -> expr PLUS expr
-- On EQUAL reduce production expr -> expr PLUS expr
-- On END reduce production expr -> expr PLUS expr
-- On ELSE reduce production expr -> expr PLUS expr
-- On DOL reduce production expr -> expr PLUS expr
-- On DO reduce production expr -> expr PLUS expr
-- On CONS reduce production expr -> expr PLUS expr
-- On COMMA reduce production expr -> expr PLUS expr

State 301:
## Known stack suffix:
## expr MINUS_DOT
## LR(1) items:
expr -> expr MINUS_DOT . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 302
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 302:
## Known stack suffix:
## expr MINUS_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr MINUS_DOT expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On MOD shift to state 293
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr MINUS_DOT expr
-- On UARROW reduce production expr -> expr MINUS_DOT expr
-- On TO reduce production expr -> expr MINUS_DOT expr
-- On THEN reduce production expr -> expr MINUS_DOT expr
-- On SEMI reduce production expr -> expr MINUS_DOT expr
-- On RPAREN reduce production expr -> expr MINUS_DOT expr
-- On RBRACK reduce production expr -> expr MINUS_DOT expr
-- On RBRACE reduce production expr -> expr MINUS_DOT expr
-- On PLUS_DOT reduce production expr -> expr MINUS_DOT expr
-- On PLUS reduce production expr -> expr MINUS_DOT expr
-- On PIPE reduce production expr -> expr MINUS_DOT expr
-- On NL reduce production expr -> expr MINUS_DOT expr
-- On MINUS_DOT reduce production expr -> expr MINUS_DOT expr
-- On MINUS reduce production expr -> expr MINUS_DOT expr
-- On LOR reduce production expr -> expr MINUS_DOT expr
-- On LESS_GREATER reduce production expr -> expr MINUS_DOT expr
-- On LESS_EQUAL reduce production expr -> expr MINUS_DOT expr
-- On LESS reduce production expr -> expr MINUS_DOT expr
-- On LAND reduce production expr -> expr MINUS_DOT expr
-- On IN reduce production expr -> expr MINUS_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr MINUS_DOT expr
-- On GREATER reduce production expr -> expr MINUS_DOT expr
-- On EQUAL reduce production expr -> expr MINUS_DOT expr
-- On END reduce production expr -> expr MINUS_DOT expr
-- On ELSE reduce production expr -> expr MINUS_DOT expr
-- On DOL reduce production expr -> expr MINUS_DOT expr
-- On DO reduce production expr -> expr MINUS_DOT expr
-- On CONS reduce production expr -> expr MINUS_DOT expr
-- On COMMA reduce production expr -> expr MINUS_DOT expr

State 303:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 304
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 304:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr MINUS expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On MOD shift to state 293
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr MINUS expr
-- On UARROW reduce production expr -> expr MINUS expr
-- On TO reduce production expr -> expr MINUS expr
-- On THEN reduce production expr -> expr MINUS expr
-- On SEMI reduce production expr -> expr MINUS expr
-- On RPAREN reduce production expr -> expr MINUS expr
-- On RBRACK reduce production expr -> expr MINUS expr
-- On RBRACE reduce production expr -> expr MINUS expr
-- On PLUS_DOT reduce production expr -> expr MINUS expr
-- On PLUS reduce production expr -> expr MINUS expr
-- On PIPE reduce production expr -> expr MINUS expr
-- On NL reduce production expr -> expr MINUS expr
-- On MINUS_DOT reduce production expr -> expr MINUS expr
-- On MINUS reduce production expr -> expr MINUS expr
-- On LOR reduce production expr -> expr MINUS expr
-- On LESS_GREATER reduce production expr -> expr MINUS expr
-- On LESS_EQUAL reduce production expr -> expr MINUS expr
-- On LESS reduce production expr -> expr MINUS expr
-- On LAND reduce production expr -> expr MINUS expr
-- On IN reduce production expr -> expr MINUS expr
-- On GREATER_EQUAL reduce production expr -> expr MINUS expr
-- On GREATER reduce production expr -> expr MINUS expr
-- On EQUAL reduce production expr -> expr MINUS expr
-- On END reduce production expr -> expr MINUS expr
-- On ELSE reduce production expr -> expr MINUS expr
-- On DOL reduce production expr -> expr MINUS expr
-- On DO reduce production expr -> expr MINUS expr
-- On CONS reduce production expr -> expr MINUS expr
-- On COMMA reduce production expr -> expr MINUS expr

State 305:
## Known stack suffix:
## expr LOR
## LR(1) items:
expr -> expr LOR . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 306
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 306:
## Known stack suffix:
## expr LOR expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr LOR expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr LOR expr
-- On TO reduce production expr -> expr LOR expr
-- On THEN reduce production expr -> expr LOR expr
-- On SEMI reduce production expr -> expr LOR expr
-- On RPAREN reduce production expr -> expr LOR expr
-- On RBRACK reduce production expr -> expr LOR expr
-- On RBRACE reduce production expr -> expr LOR expr
-- On PIPE reduce production expr -> expr LOR expr
-- On NL reduce production expr -> expr LOR expr
-- On LESS_GREATER reduce production expr -> expr LOR expr
-- On LESS_EQUAL reduce production expr -> expr LOR expr
-- On LESS reduce production expr -> expr LOR expr
-- On LAND reduce production expr -> expr LOR expr
-- On IN reduce production expr -> expr LOR expr
-- On GREATER_EQUAL reduce production expr -> expr LOR expr
-- On GREATER reduce production expr -> expr LOR expr
-- On EQUAL reduce production expr -> expr LOR expr
-- On END reduce production expr -> expr LOR expr
-- On ELSE reduce production expr -> expr LOR expr
-- On DOL reduce production expr -> expr LOR expr
-- On DO reduce production expr -> expr LOR expr
-- On COMMA reduce production expr -> expr LOR expr

State 307:
## Known stack suffix:
## expr CONS
## LR(1) items:
expr -> expr CONS . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 308
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 308:
## Known stack suffix:
## expr CONS expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr CONS expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr CONS expr
-- On UARROW reduce production expr -> expr CONS expr
-- On TO reduce production expr -> expr CONS expr
-- On THEN reduce production expr -> expr CONS expr
-- On SEMI reduce production expr -> expr CONS expr
-- On RPAREN reduce production expr -> expr CONS expr
-- On RBRACK reduce production expr -> expr CONS expr
-- On RBRACE reduce production expr -> expr CONS expr
-- On PIPE reduce production expr -> expr CONS expr
-- On NL reduce production expr -> expr CONS expr
-- On LOR reduce production expr -> expr CONS expr
-- On LESS_GREATER reduce production expr -> expr CONS expr
-- On LESS_EQUAL reduce production expr -> expr CONS expr
-- On LESS reduce production expr -> expr CONS expr
-- On LAND reduce production expr -> expr CONS expr
-- On IN reduce production expr -> expr CONS expr
-- On GREATER_EQUAL reduce production expr -> expr CONS expr
-- On GREATER reduce production expr -> expr CONS expr
-- On EQUAL reduce production expr -> expr CONS expr
-- On END reduce production expr -> expr CONS expr
-- On ELSE reduce production expr -> expr CONS expr
-- On DOL reduce production expr -> expr CONS expr
-- On DO reduce production expr -> expr CONS expr
-- On COMMA reduce production expr -> expr CONS expr

State 309:
## Known stack suffix:
## expr LESS_GREATER
## LR(1) items:
expr -> expr LESS_GREATER . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 310
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 310:
## Known stack suffix:
## expr LESS_GREATER expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr LESS_GREATER expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr LESS_GREATER expr
-- On TO reduce production expr -> expr LESS_GREATER expr
-- On THEN reduce production expr -> expr LESS_GREATER expr
-- On SEMI reduce production expr -> expr LESS_GREATER expr
-- On RPAREN reduce production expr -> expr LESS_GREATER expr
-- On RBRACK reduce production expr -> expr LESS_GREATER expr
-- On RBRACE reduce production expr -> expr LESS_GREATER expr
-- On PIPE reduce production expr -> expr LESS_GREATER expr
-- On NL reduce production expr -> expr LESS_GREATER expr
-- On LESS_GREATER reduce production expr -> expr LESS_GREATER expr
-- On LESS_EQUAL reduce production expr -> expr LESS_GREATER expr
-- On LESS reduce production expr -> expr LESS_GREATER expr
-- On IN reduce production expr -> expr LESS_GREATER expr
-- On GREATER_EQUAL reduce production expr -> expr LESS_GREATER expr
-- On GREATER reduce production expr -> expr LESS_GREATER expr
-- On EQUAL reduce production expr -> expr LESS_GREATER expr
-- On END reduce production expr -> expr LESS_GREATER expr
-- On ELSE reduce production expr -> expr LESS_GREATER expr
-- On DOL reduce production expr -> expr LESS_GREATER expr
-- On DO reduce production expr -> expr LESS_GREATER expr
-- On COMMA reduce production expr -> expr LESS_GREATER expr

State 311:
## Known stack suffix:
## expr LAND
## LR(1) items:
expr -> expr LAND . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 312
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 312:
## Known stack suffix:
## expr LAND expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr LAND expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr LAND expr
-- On TO reduce production expr -> expr LAND expr
-- On THEN reduce production expr -> expr LAND expr
-- On SEMI reduce production expr -> expr LAND expr
-- On RPAREN reduce production expr -> expr LAND expr
-- On RBRACK reduce production expr -> expr LAND expr
-- On RBRACE reduce production expr -> expr LAND expr
-- On PIPE reduce production expr -> expr LAND expr
-- On NL reduce production expr -> expr LAND expr
-- On LESS_GREATER reduce production expr -> expr LAND expr
-- On LESS_EQUAL reduce production expr -> expr LAND expr
-- On LESS reduce production expr -> expr LAND expr
-- On IN reduce production expr -> expr LAND expr
-- On GREATER_EQUAL reduce production expr -> expr LAND expr
-- On GREATER reduce production expr -> expr LAND expr
-- On EQUAL reduce production expr -> expr LAND expr
-- On END reduce production expr -> expr LAND expr
-- On ELSE reduce production expr -> expr LAND expr
-- On DOL reduce production expr -> expr LAND expr
-- On DO reduce production expr -> expr LAND expr
-- On COMMA reduce production expr -> expr LAND expr

State 313:
## Known stack suffix:
## expr LESS_EQUAL
## LR(1) items:
expr -> expr LESS_EQUAL . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 314
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 314:
## Known stack suffix:
## expr LESS_EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr LESS_EQUAL expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr LESS_EQUAL expr
-- On TO reduce production expr -> expr LESS_EQUAL expr
-- On THEN reduce production expr -> expr LESS_EQUAL expr
-- On SEMI reduce production expr -> expr LESS_EQUAL expr
-- On RPAREN reduce production expr -> expr LESS_EQUAL expr
-- On RBRACK reduce production expr -> expr LESS_EQUAL expr
-- On RBRACE reduce production expr -> expr LESS_EQUAL expr
-- On PIPE reduce production expr -> expr LESS_EQUAL expr
-- On NL reduce production expr -> expr LESS_EQUAL expr
-- On LESS_GREATER reduce production expr -> expr LESS_EQUAL expr
-- On LESS_EQUAL reduce production expr -> expr LESS_EQUAL expr
-- On LESS reduce production expr -> expr LESS_EQUAL expr
-- On IN reduce production expr -> expr LESS_EQUAL expr
-- On GREATER_EQUAL reduce production expr -> expr LESS_EQUAL expr
-- On GREATER reduce production expr -> expr LESS_EQUAL expr
-- On EQUAL reduce production expr -> expr LESS_EQUAL expr
-- On END reduce production expr -> expr LESS_EQUAL expr
-- On ELSE reduce production expr -> expr LESS_EQUAL expr
-- On DOL reduce production expr -> expr LESS_EQUAL expr
-- On DO reduce production expr -> expr LESS_EQUAL expr
-- On COMMA reduce production expr -> expr LESS_EQUAL expr

State 315:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 316
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 316:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr LESS expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr LESS expr
-- On TO reduce production expr -> expr LESS expr
-- On THEN reduce production expr -> expr LESS expr
-- On SEMI reduce production expr -> expr LESS expr
-- On RPAREN reduce production expr -> expr LESS expr
-- On RBRACK reduce production expr -> expr LESS expr
-- On RBRACE reduce production expr -> expr LESS expr
-- On PIPE reduce production expr -> expr LESS expr
-- On NL reduce production expr -> expr LESS expr
-- On LESS_GREATER reduce production expr -> expr LESS expr
-- On LESS_EQUAL reduce production expr -> expr LESS expr
-- On LESS reduce production expr -> expr LESS expr
-- On IN reduce production expr -> expr LESS expr
-- On GREATER_EQUAL reduce production expr -> expr LESS expr
-- On GREATER reduce production expr -> expr LESS expr
-- On EQUAL reduce production expr -> expr LESS expr
-- On END reduce production expr -> expr LESS expr
-- On ELSE reduce production expr -> expr LESS expr
-- On DOL reduce production expr -> expr LESS expr
-- On DO reduce production expr -> expr LESS expr
-- On COMMA reduce production expr -> expr LESS expr

State 317:
## Known stack suffix:
## expr GREATER_EQUAL
## LR(1) items:
expr -> expr GREATER_EQUAL . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 318
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 318:
## Known stack suffix:
## expr GREATER_EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr GREATER_EQUAL expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr GREATER_EQUAL expr
-- On TO reduce production expr -> expr GREATER_EQUAL expr
-- On THEN reduce production expr -> expr GREATER_EQUAL expr
-- On SEMI reduce production expr -> expr GREATER_EQUAL expr
-- On RPAREN reduce production expr -> expr GREATER_EQUAL expr
-- On RBRACK reduce production expr -> expr GREATER_EQUAL expr
-- On RBRACE reduce production expr -> expr GREATER_EQUAL expr
-- On PIPE reduce production expr -> expr GREATER_EQUAL expr
-- On NL reduce production expr -> expr GREATER_EQUAL expr
-- On LESS_GREATER reduce production expr -> expr GREATER_EQUAL expr
-- On LESS_EQUAL reduce production expr -> expr GREATER_EQUAL expr
-- On LESS reduce production expr -> expr GREATER_EQUAL expr
-- On IN reduce production expr -> expr GREATER_EQUAL expr
-- On GREATER_EQUAL reduce production expr -> expr GREATER_EQUAL expr
-- On GREATER reduce production expr -> expr GREATER_EQUAL expr
-- On EQUAL reduce production expr -> expr GREATER_EQUAL expr
-- On END reduce production expr -> expr GREATER_EQUAL expr
-- On ELSE reduce production expr -> expr GREATER_EQUAL expr
-- On DOL reduce production expr -> expr GREATER_EQUAL expr
-- On DO reduce production expr -> expr GREATER_EQUAL expr
-- On COMMA reduce production expr -> expr GREATER_EQUAL expr

State 319:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 320
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 320:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr GREATER expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr GREATER expr
-- On TO reduce production expr -> expr GREATER expr
-- On THEN reduce production expr -> expr GREATER expr
-- On SEMI reduce production expr -> expr GREATER expr
-- On RPAREN reduce production expr -> expr GREATER expr
-- On RBRACK reduce production expr -> expr GREATER expr
-- On RBRACE reduce production expr -> expr GREATER expr
-- On PIPE reduce production expr -> expr GREATER expr
-- On NL reduce production expr -> expr GREATER expr
-- On LESS_GREATER reduce production expr -> expr GREATER expr
-- On LESS_EQUAL reduce production expr -> expr GREATER expr
-- On LESS reduce production expr -> expr GREATER expr
-- On IN reduce production expr -> expr GREATER expr
-- On GREATER_EQUAL reduce production expr -> expr GREATER expr
-- On GREATER reduce production expr -> expr GREATER expr
-- On EQUAL reduce production expr -> expr GREATER expr
-- On END reduce production expr -> expr GREATER expr
-- On ELSE reduce production expr -> expr GREATER expr
-- On DOL reduce production expr -> expr GREATER expr
-- On DO reduce production expr -> expr GREATER expr
-- On COMMA reduce production expr -> expr GREATER expr

State 321:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 322
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 322:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr EQUAL expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr EQUAL expr
-- On TO reduce production expr -> expr EQUAL expr
-- On THEN reduce production expr -> expr EQUAL expr
-- On SEMI reduce production expr -> expr EQUAL expr
-- On RPAREN reduce production expr -> expr EQUAL expr
-- On RBRACK reduce production expr -> expr EQUAL expr
-- On RBRACE reduce production expr -> expr EQUAL expr
-- On PIPE reduce production expr -> expr EQUAL expr
-- On NL reduce production expr -> expr EQUAL expr
-- On LESS_GREATER reduce production expr -> expr EQUAL expr
-- On LESS_EQUAL reduce production expr -> expr EQUAL expr
-- On LESS reduce production expr -> expr EQUAL expr
-- On IN reduce production expr -> expr EQUAL expr
-- On GREATER_EQUAL reduce production expr -> expr EQUAL expr
-- On GREATER reduce production expr -> expr EQUAL expr
-- On EQUAL reduce production expr -> expr EQUAL expr
-- On END reduce production expr -> expr EQUAL expr
-- On ELSE reduce production expr -> expr EQUAL expr
-- On DOL reduce production expr -> expr EQUAL expr
-- On DO reduce production expr -> expr EQUAL expr
-- On COMMA reduce production expr -> expr EQUAL expr

State 323:
## Known stack suffix:
## expr DOL
## LR(1) items:
expr -> expr DOL . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 324
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 324:
## Known stack suffix:
## expr DOL expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr DOL expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> expr DOL expr
-- On TO reduce production expr -> expr DOL expr
-- On THEN reduce production expr -> expr DOL expr
-- On SEMI reduce production expr -> expr DOL expr
-- On RPAREN reduce production expr -> expr DOL expr
-- On RBRACK reduce production expr -> expr DOL expr
-- On RBRACE reduce production expr -> expr DOL expr
-- On PIPE reduce production expr -> expr DOL expr
-- On NL reduce production expr -> expr DOL expr
-- On IN reduce production expr -> expr DOL expr
-- On END reduce production expr -> expr DOL expr
-- On ELSE reduce production expr -> expr DOL expr
-- On DO reduce production expr -> expr DOL expr
-- On COMMA reduce production expr -> expr DOL expr

State 325:
## Known stack suffix:
## rev_stmts NL
## LR(1) items:
block -> rev_stmts NL . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_stmts -> rev_stmts NL . stmt [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 326
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:
-- On WITH reduce production block -> rev_stmts NL
-- On UARROW reduce production block -> rev_stmts NL
-- On TO reduce production block -> rev_stmts NL
-- On THEN reduce production block -> rev_stmts NL
-- On SLASH_DOT reduce production block -> rev_stmts NL
-- On SLASH reduce production block -> rev_stmts NL
-- On SEMI reduce production block -> rev_stmts NL
-- On RPAREN reduce production block -> rev_stmts NL
-- On RBRACK reduce production block -> rev_stmts NL
-- On RBRACE reduce production block -> rev_stmts NL
-- On PLUS_DOT reduce production block -> rev_stmts NL
-- On PLUS reduce production block -> rev_stmts NL
-- On PIPE reduce production block -> rev_stmts NL
-- On NL reduce production block -> rev_stmts NL
-- On MOD reduce production block -> rev_stmts NL
-- On MINUS_DOT reduce production block -> rev_stmts NL
-- On LOR reduce production block -> rev_stmts NL
-- On LESS_GREATER reduce production block -> rev_stmts NL
-- On LESS_EQUAL reduce production block -> rev_stmts NL
-- On LESS reduce production block -> rev_stmts NL
-- On LAND reduce production block -> rev_stmts NL
-- On IN reduce production block -> rev_stmts NL
-- On GREATER_EQUAL reduce production block -> rev_stmts NL
-- On GREATER reduce production block -> rev_stmts NL
-- On EQUAL reduce production block -> rev_stmts NL
-- On END reduce production block -> rev_stmts NL
-- On ELSE reduce production block -> rev_stmts NL
-- On DOL reduce production block -> rev_stmts NL
-- On DO reduce production block -> rev_stmts NL
-- On CONS reduce production block -> rev_stmts NL
-- On COMMA reduce production block -> rev_stmts NL
-- On AST_DOT reduce production block -> rev_stmts NL
-- On AST reduce production block -> rev_stmts NL

State 326:
## Known stack suffix:
## rev_stmts NL stmt
## LR(1) items:
rev_stmts -> rev_stmts NL stmt . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production rev_stmts -> rev_stmts NL stmt
-- On UIDENT reduce production rev_stmts -> rev_stmts NL stmt
-- On UARROW reduce production rev_stmts -> rev_stmts NL stmt
-- On TO reduce production rev_stmts -> rev_stmts NL stmt
-- On THEN reduce production rev_stmts -> rev_stmts NL stmt
-- On STRING reduce production rev_stmts -> rev_stmts NL stmt
-- On SLASH_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On SLASH reduce production rev_stmts -> rev_stmts NL stmt
-- On SEMI reduce production rev_stmts -> rev_stmts NL stmt
-- On RPAREN reduce production rev_stmts -> rev_stmts NL stmt
-- On RBRACK reduce production rev_stmts -> rev_stmts NL stmt
-- On RBRACE reduce production rev_stmts -> rev_stmts NL stmt
-- On PLUS_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On PLUS reduce production rev_stmts -> rev_stmts NL stmt
-- On PIPE reduce production rev_stmts -> rev_stmts NL stmt
-- On NL reduce production rev_stmts -> rev_stmts NL stmt
-- On MOD reduce production rev_stmts -> rev_stmts NL stmt
-- On MINUS_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On MINUS reduce production rev_stmts -> rev_stmts NL stmt
-- On LPAREN reduce production rev_stmts -> rev_stmts NL stmt
-- On LOR reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS_LESS reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS_GREATER reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS_EQUAL reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS reduce production rev_stmts -> rev_stmts NL stmt
-- On LBRACK reduce production rev_stmts -> rev_stmts NL stmt
-- On LAND reduce production rev_stmts -> rev_stmts NL stmt
-- On INT reduce production rev_stmts -> rev_stmts NL stmt
-- On IN reduce production rev_stmts -> rev_stmts NL stmt
-- On IDENT reduce production rev_stmts -> rev_stmts NL stmt
-- On GREATER_EQUAL reduce production rev_stmts -> rev_stmts NL stmt
-- On GREATER reduce production rev_stmts -> rev_stmts NL stmt
-- On FLOAT reduce production rev_stmts -> rev_stmts NL stmt
-- On EXCL reduce production rev_stmts -> rev_stmts NL stmt
-- On EQUAL reduce production rev_stmts -> rev_stmts NL stmt
-- On END reduce production rev_stmts -> rev_stmts NL stmt
-- On ELSE reduce production rev_stmts -> rev_stmts NL stmt
-- On DOL reduce production rev_stmts -> rev_stmts NL stmt
-- On DO reduce production rev_stmts -> rev_stmts NL stmt
-- On CONS reduce production rev_stmts -> rev_stmts NL stmt
-- On COMMA reduce production rev_stmts -> rev_stmts NL stmt
-- On CHAR reduce production rev_stmts -> rev_stmts NL stmt
-- On BOOL reduce production rev_stmts -> rev_stmts NL stmt
-- On ATOM reduce production rev_stmts -> rev_stmts NL stmt
-- On AST_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On AST reduce production rev_stmts -> rev_stmts NL stmt

State 327:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW nl_opt block
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW nl_opt block . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW nl_opt block END
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On UIDENT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On UARROW reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On TO reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On THEN reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On STRING reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On SEMI reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On RPAREN reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On RBRACK reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On RBRACE reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On PIPE reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On NL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On MOD reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LPAREN reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LOR reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_LESS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_GREATER reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_EQUAL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LBRACK reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LAND reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On INT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On IN reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On IDENT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER_EQUAL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On FLOAT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On EXCL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On EQUAL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On END reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On ELSE reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On DOL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On DO reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On CONS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On COMMA reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On CHAR reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On BOOL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On ATOM reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On AST_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On AST reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END

State 329:
## Known stack suffix:
## pattern
## LR(1) items:
formal_arg -> pattern . [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL BOOL ATOM ]
pattern -> pattern . AS value_name [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS BOOL ATOM AS ]
pattern -> pattern . CONS pattern [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL CONS BOOL ATOM AS ]
## Transitions:
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:
-- On UIDENT reduce production formal_arg -> pattern
-- On STRING reduce production formal_arg -> pattern
-- On RARROW reduce production formal_arg -> pattern
-- On LPAREN reduce production formal_arg -> pattern
-- On LBRACK reduce production formal_arg -> pattern
-- On LBRACE reduce production formal_arg -> pattern
-- On INT reduce production formal_arg -> pattern
-- On IDENT reduce production formal_arg -> pattern
-- On FLOAT reduce production formal_arg -> pattern
-- On EQUAL reduce production formal_arg -> pattern
-- On BOOL reduce production formal_arg -> pattern
-- On ATOM reduce production formal_arg -> pattern

State 330:
## Known stack suffix:
## rev_formal_args formal_arg
## LR(1) items:
rev_formal_args -> rev_formal_args formal_arg . [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL BOOL ATOM ]
## Transitions:
## Reductions:
-- On UIDENT reduce production rev_formal_args -> rev_formal_args formal_arg
-- On STRING reduce production rev_formal_args -> rev_formal_args formal_arg
-- On RARROW reduce production rev_formal_args -> rev_formal_args formal_arg
-- On LPAREN reduce production rev_formal_args -> rev_formal_args formal_arg
-- On LBRACK reduce production rev_formal_args -> rev_formal_args formal_arg
-- On LBRACE reduce production rev_formal_args -> rev_formal_args formal_arg
-- On INT reduce production rev_formal_args -> rev_formal_args formal_arg
-- On IDENT reduce production rev_formal_args -> rev_formal_args formal_arg
-- On FLOAT reduce production rev_formal_args -> rev_formal_args formal_arg
-- On EQUAL reduce production rev_formal_args -> rev_formal_args formal_arg
-- On BOOL reduce production rev_formal_args -> rev_formal_args formal_arg
-- On ATOM reduce production rev_formal_args -> rev_formal_args formal_arg

State 331:
## Known stack suffix:
## pattern_matching_elt
## LR(1) items:
rev_pattern_matching_elts -> pattern_matching_elt . [ PIPE END ]
## Transitions:
## Reductions:
-- On PIPE reduce production rev_pattern_matching_elts -> pattern_matching_elt
-- On END reduce production rev_pattern_matching_elts -> pattern_matching_elt

State 332:
## Known stack suffix:
## DO nl_opt pattern_matching
## LR(1) items:
do_block -> DO nl_opt pattern_matching . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## DO nl_opt pattern_matching END
## LR(1) items:
do_block -> DO nl_opt pattern_matching END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production do_block -> DO nl_opt pattern_matching END
-- On UIDENT reduce production do_block -> DO nl_opt pattern_matching END
-- On UARROW reduce production do_block -> DO nl_opt pattern_matching END
-- On TO reduce production do_block -> DO nl_opt pattern_matching END
-- On THEN reduce production do_block -> DO nl_opt pattern_matching END
-- On STRING reduce production do_block -> DO nl_opt pattern_matching END
-- On SLASH_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On SLASH reduce production do_block -> DO nl_opt pattern_matching END
-- On SEMI reduce production do_block -> DO nl_opt pattern_matching END
-- On RPAREN reduce production do_block -> DO nl_opt pattern_matching END
-- On RBRACK reduce production do_block -> DO nl_opt pattern_matching END
-- On RBRACE reduce production do_block -> DO nl_opt pattern_matching END
-- On PLUS_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On PLUS reduce production do_block -> DO nl_opt pattern_matching END
-- On PIPE reduce production do_block -> DO nl_opt pattern_matching END
-- On NL reduce production do_block -> DO nl_opt pattern_matching END
-- On MOD reduce production do_block -> DO nl_opt pattern_matching END
-- On MINUS_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On MINUS reduce production do_block -> DO nl_opt pattern_matching END
-- On LPAREN reduce production do_block -> DO nl_opt pattern_matching END
-- On LOR reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS_LESS reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS_GREATER reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS_EQUAL reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS reduce production do_block -> DO nl_opt pattern_matching END
-- On LBRACK reduce production do_block -> DO nl_opt pattern_matching END
-- On LAND reduce production do_block -> DO nl_opt pattern_matching END
-- On INT reduce production do_block -> DO nl_opt pattern_matching END
-- On IN reduce production do_block -> DO nl_opt pattern_matching END
-- On IDENT reduce production do_block -> DO nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production do_block -> DO nl_opt pattern_matching END
-- On GREATER reduce production do_block -> DO nl_opt pattern_matching END
-- On FLOAT reduce production do_block -> DO nl_opt pattern_matching END
-- On EXCL reduce production do_block -> DO nl_opt pattern_matching END
-- On EQUAL reduce production do_block -> DO nl_opt pattern_matching END
-- On END reduce production do_block -> DO nl_opt pattern_matching END
-- On ELSE reduce production do_block -> DO nl_opt pattern_matching END
-- On DOL reduce production do_block -> DO nl_opt pattern_matching END
-- On DO reduce production do_block -> DO nl_opt pattern_matching END
-- On CONS reduce production do_block -> DO nl_opt pattern_matching END
-- On COMMA reduce production do_block -> DO nl_opt pattern_matching END
-- On CHAR reduce production do_block -> DO nl_opt pattern_matching END
-- On BOOL reduce production do_block -> DO nl_opt pattern_matching END
-- On ATOM reduce production do_block -> DO nl_opt pattern_matching END
-- On AST_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On AST reduce production do_block -> DO nl_opt pattern_matching END

State 334:
## Known stack suffix:
## pattern
## LR(1) items:
formal_arg -> pattern . [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT BOOL ATOM ]
pattern -> pattern . AS value_name [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT CONS BOOL ATOM AS ]
pattern -> pattern . CONS pattern [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT CONS BOOL ATOM AS ]
pattern_matching_elt -> pattern . RARROW nl_opt block [ PIPE END ]
## Transitions:
-- On CONS shift to state 144
-- On AS shift to state 148
## Reductions:
-- On UIDENT reduce production formal_arg -> pattern
-- On STRING reduce production formal_arg -> pattern
-- On RARROW reduce production formal_arg -> pattern
-- On LPAREN reduce production formal_arg -> pattern
-- On LBRACK reduce production formal_arg -> pattern
-- On LBRACE reduce production formal_arg -> pattern
-- On INT reduce production formal_arg -> pattern
-- On IDENT reduce production formal_arg -> pattern
-- On FLOAT reduce production formal_arg -> pattern
-- On BOOL reduce production formal_arg -> pattern
-- On ATOM reduce production formal_arg -> pattern

State 335:
## Known stack suffix:
## formal_arg
## LR(1) items:
rev_formal_args -> formal_arg . [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL BOOL ATOM ]
## Transitions:
## Reductions:
-- On UIDENT reduce production rev_formal_args -> formal_arg
-- On STRING reduce production rev_formal_args -> formal_arg
-- On RARROW reduce production rev_formal_args -> formal_arg
-- On LPAREN reduce production rev_formal_args -> formal_arg
-- On LBRACK reduce production rev_formal_args -> formal_arg
-- On LBRACE reduce production rev_formal_args -> formal_arg
-- On INT reduce production rev_formal_args -> formal_arg
-- On IDENT reduce production rev_formal_args -> formal_arg
-- On FLOAT reduce production rev_formal_args -> formal_arg
-- On EQUAL reduce production rev_formal_args -> formal_arg
-- On BOOL reduce production rev_formal_args -> formal_arg
-- On ATOM reduce production rev_formal_args -> formal_arg

State 336:
## Known stack suffix:
## actual_args simple_expr
## LR(1) items:
actual_args -> actual_args simple_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production actual_args -> actual_args simple_expr
-- On UIDENT reduce production actual_args -> actual_args simple_expr
-- On UARROW reduce production actual_args -> actual_args simple_expr
-- On TO reduce production actual_args -> actual_args simple_expr
-- On THEN reduce production actual_args -> actual_args simple_expr
-- On STRING reduce production actual_args -> actual_args simple_expr
-- On SLASH_DOT reduce production actual_args -> actual_args simple_expr
-- On SLASH reduce production actual_args -> actual_args simple_expr
-- On SEMI reduce production actual_args -> actual_args simple_expr
-- On RPAREN reduce production actual_args -> actual_args simple_expr
-- On RBRACK reduce production actual_args -> actual_args simple_expr
-- On RBRACE reduce production actual_args -> actual_args simple_expr
-- On PLUS_DOT reduce production actual_args -> actual_args simple_expr
-- On PLUS reduce production actual_args -> actual_args simple_expr
-- On PIPE reduce production actual_args -> actual_args simple_expr
-- On NL reduce production actual_args -> actual_args simple_expr
-- On MOD reduce production actual_args -> actual_args simple_expr
-- On MINUS_DOT reduce production actual_args -> actual_args simple_expr
-- On MINUS reduce production actual_args -> actual_args simple_expr
-- On LPAREN reduce production actual_args -> actual_args simple_expr
-- On LOR reduce production actual_args -> actual_args simple_expr
-- On LESS_LESS reduce production actual_args -> actual_args simple_expr
-- On LESS_GREATER reduce production actual_args -> actual_args simple_expr
-- On LESS_EQUAL reduce production actual_args -> actual_args simple_expr
-- On LESS reduce production actual_args -> actual_args simple_expr
-- On LBRACK reduce production actual_args -> actual_args simple_expr
-- On LAND reduce production actual_args -> actual_args simple_expr
-- On INT reduce production actual_args -> actual_args simple_expr
-- On IN reduce production actual_args -> actual_args simple_expr
-- On IDENT reduce production actual_args -> actual_args simple_expr
-- On GREATER_EQUAL reduce production actual_args -> actual_args simple_expr
-- On GREATER reduce production actual_args -> actual_args simple_expr
-- On FLOAT reduce production actual_args -> actual_args simple_expr
-- On EXCL reduce production actual_args -> actual_args simple_expr
-- On EQUAL reduce production actual_args -> actual_args simple_expr
-- On END reduce production actual_args -> actual_args simple_expr
-- On ELSE reduce production actual_args -> actual_args simple_expr
-- On DOL reduce production actual_args -> actual_args simple_expr
-- On DO reduce production actual_args -> actual_args simple_expr
-- On CONS reduce production actual_args -> actual_args simple_expr
-- On COMMA reduce production actual_args -> actual_args simple_expr
-- On CHAR reduce production actual_args -> actual_args simple_expr
-- On BOOL reduce production actual_args -> actual_args simple_expr
-- On ATOM reduce production actual_args -> actual_args simple_expr
-- On AST_DOT reduce production actual_args -> actual_args simple_expr
-- On AST reduce production actual_args -> actual_args simple_expr

State 337:
## Known stack suffix:
## expr actual_args do_block
## LR(1) items:
expr -> expr actual_args do_block . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> expr actual_args do_block
-- On UIDENT reduce production expr -> expr actual_args do_block
-- On UARROW reduce production expr -> expr actual_args do_block
-- On TO reduce production expr -> expr actual_args do_block
-- On THEN reduce production expr -> expr actual_args do_block
-- On STRING reduce production expr -> expr actual_args do_block
-- On SLASH_DOT reduce production expr -> expr actual_args do_block
-- On SLASH reduce production expr -> expr actual_args do_block
-- On SEMI reduce production expr -> expr actual_args do_block
-- On RPAREN reduce production expr -> expr actual_args do_block
-- On RBRACK reduce production expr -> expr actual_args do_block
-- On RBRACE reduce production expr -> expr actual_args do_block
-- On PLUS_DOT reduce production expr -> expr actual_args do_block
-- On PLUS reduce production expr -> expr actual_args do_block
-- On PIPE reduce production expr -> expr actual_args do_block
-- On NL reduce production expr -> expr actual_args do_block
-- On MOD reduce production expr -> expr actual_args do_block
-- On MINUS_DOT reduce production expr -> expr actual_args do_block
-- On MINUS reduce production expr -> expr actual_args do_block
-- On LPAREN reduce production expr -> expr actual_args do_block
-- On LOR reduce production expr -> expr actual_args do_block
-- On LESS_LESS reduce production expr -> expr actual_args do_block
-- On LESS_GREATER reduce production expr -> expr actual_args do_block
-- On LESS_EQUAL reduce production expr -> expr actual_args do_block
-- On LESS reduce production expr -> expr actual_args do_block
-- On LBRACK reduce production expr -> expr actual_args do_block
-- On LAND reduce production expr -> expr actual_args do_block
-- On INT reduce production expr -> expr actual_args do_block
-- On IN reduce production expr -> expr actual_args do_block
-- On IDENT reduce production expr -> expr actual_args do_block
-- On GREATER_EQUAL reduce production expr -> expr actual_args do_block
-- On GREATER reduce production expr -> expr actual_args do_block
-- On FLOAT reduce production expr -> expr actual_args do_block
-- On EXCL reduce production expr -> expr actual_args do_block
-- On EQUAL reduce production expr -> expr actual_args do_block
-- On END reduce production expr -> expr actual_args do_block
-- On ELSE reduce production expr -> expr actual_args do_block
-- On DOL reduce production expr -> expr actual_args do_block
-- On DO reduce production expr -> expr actual_args do_block
-- On CONS reduce production expr -> expr actual_args do_block
-- On COMMA reduce production expr -> expr actual_args do_block
-- On CHAR reduce production expr -> expr actual_args do_block
-- On BOOL reduce production expr -> expr actual_args do_block
-- On ATOM reduce production expr -> expr actual_args do_block
-- On AST_DOT reduce production expr -> expr actual_args do_block
-- On AST reduce production expr -> expr actual_args do_block

State 338:
## Known stack suffix:
## field_expr ASSIGN
## LR(1) items:
expr -> field_expr ASSIGN . nl_opt expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 339
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 339:
## Known stack suffix:
## field_expr ASSIGN nl_opt
## LR(1) items:
expr -> field_expr ASSIGN nl_opt . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 340
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 340:
## Known stack suffix:
## field_expr ASSIGN nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> field_expr ASSIGN nl_opt expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On LPAREN shift to state 118
-- On LBRACK shift to state 220
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> field_expr ASSIGN nl_opt expr
-- On UIDENT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On UARROW reduce production expr -> field_expr ASSIGN nl_opt expr
-- On TO reduce production expr -> field_expr ASSIGN nl_opt expr
-- On THEN reduce production expr -> field_expr ASSIGN nl_opt expr
-- On SLASH_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On SLASH reduce production expr -> field_expr ASSIGN nl_opt expr
-- On SEMI reduce production expr -> field_expr ASSIGN nl_opt expr
-- On RPAREN reduce production expr -> field_expr ASSIGN nl_opt expr
-- On RBRACK reduce production expr -> field_expr ASSIGN nl_opt expr
-- On RBRACE reduce production expr -> field_expr ASSIGN nl_opt expr
-- On PLUS_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On PLUS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On PIPE reduce production expr -> field_expr ASSIGN nl_opt expr
-- On NL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On MOD reduce production expr -> field_expr ASSIGN nl_opt expr
-- On MINUS_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On MINUS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LOR reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LESS_GREATER reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LESS_EQUAL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LESS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LAND reduce production expr -> field_expr ASSIGN nl_opt expr
-- On IN reduce production expr -> field_expr ASSIGN nl_opt expr
-- On GREATER_EQUAL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On GREATER reduce production expr -> field_expr ASSIGN nl_opt expr
-- On EQUAL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On END reduce production expr -> field_expr ASSIGN nl_opt expr
-- On ELSE reduce production expr -> field_expr ASSIGN nl_opt expr
-- On DOL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On DO reduce production expr -> field_expr ASSIGN nl_opt expr
-- On CONS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On COMMA reduce production expr -> field_expr ASSIGN nl_opt expr
-- On AST_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On AST reduce production expr -> field_expr ASSIGN nl_opt expr

State 341:
## Known stack suffix:
## ASSERT expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> ASSERT expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> ASSERT expr
-- On UARROW reduce production expr -> ASSERT expr
-- On TO reduce production expr -> ASSERT expr
-- On THEN reduce production expr -> ASSERT expr
-- On SLASH_DOT reduce production expr -> ASSERT expr
-- On SLASH reduce production expr -> ASSERT expr
-- On SEMI reduce production expr -> ASSERT expr
-- On RPAREN reduce production expr -> ASSERT expr
-- On RBRACK reduce production expr -> ASSERT expr
-- On RBRACE reduce production expr -> ASSERT expr
-- On PLUS_DOT reduce production expr -> ASSERT expr
-- On PLUS reduce production expr -> ASSERT expr
-- On PIPE reduce production expr -> ASSERT expr
-- On NL reduce production expr -> ASSERT expr
-- On MOD reduce production expr -> ASSERT expr
-- On MINUS_DOT reduce production expr -> ASSERT expr
-- On MINUS reduce production expr -> ASSERT expr
-- On LOR reduce production expr -> ASSERT expr
-- On LESS_GREATER reduce production expr -> ASSERT expr
-- On LESS_EQUAL reduce production expr -> ASSERT expr
-- On LESS reduce production expr -> ASSERT expr
-- On LAND reduce production expr -> ASSERT expr
-- On IN reduce production expr -> ASSERT expr
-- On GREATER_EQUAL reduce production expr -> ASSERT expr
-- On GREATER reduce production expr -> ASSERT expr
-- On EQUAL reduce production expr -> ASSERT expr
-- On END reduce production expr -> ASSERT expr
-- On ELSE reduce production expr -> ASSERT expr
-- On DOL reduce production expr -> ASSERT expr
-- On DO reduce production expr -> ASSERT expr
-- On CONS reduce production expr -> ASSERT expr
-- On COMMA reduce production expr -> ASSERT expr
-- On AST_DOT reduce production expr -> ASSERT expr
-- On AST reduce production expr -> ASSERT expr

State 342:
## Known stack suffix:
## IDENT rev_formal_args EQUAL nl_opt block
## LR(1) items:
fundef -> IDENT rev_formal_args EQUAL nl_opt block . [ IN ]
## Transitions:
## Reductions:
-- On IN reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block

State 343:
## Known stack suffix:
## DEF REC fundef
## LR(1) items:
expr -> DEF REC fundef . IN nl_opt block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On IN shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## DEF REC fundef IN
## LR(1) items:
expr -> DEF REC fundef IN . nl_opt block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 345
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 345:
## Known stack suffix:
## DEF REC fundef IN nl_opt
## LR(1) items:
expr -> DEF REC fundef IN nl_opt . block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 346
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 346:
## Known stack suffix:
## DEF REC fundef IN nl_opt block
## LR(1) items:
expr -> DEF REC fundef IN nl_opt block . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> DEF REC fundef IN nl_opt block
-- On UIDENT reduce production expr -> DEF REC fundef IN nl_opt block
-- On UARROW reduce production expr -> DEF REC fundef IN nl_opt block
-- On TO reduce production expr -> DEF REC fundef IN nl_opt block
-- On THEN reduce production expr -> DEF REC fundef IN nl_opt block
-- On STRING reduce production expr -> DEF REC fundef IN nl_opt block
-- On SLASH_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On SLASH reduce production expr -> DEF REC fundef IN nl_opt block
-- On SEMI reduce production expr -> DEF REC fundef IN nl_opt block
-- On RPAREN reduce production expr -> DEF REC fundef IN nl_opt block
-- On RBRACK reduce production expr -> DEF REC fundef IN nl_opt block
-- On RBRACE reduce production expr -> DEF REC fundef IN nl_opt block
-- On PLUS_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On PLUS reduce production expr -> DEF REC fundef IN nl_opt block
-- On PIPE reduce production expr -> DEF REC fundef IN nl_opt block
-- On NL reduce production expr -> DEF REC fundef IN nl_opt block
-- On MOD reduce production expr -> DEF REC fundef IN nl_opt block
-- On MINUS_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On MINUS reduce production expr -> DEF REC fundef IN nl_opt block
-- On LPAREN reduce production expr -> DEF REC fundef IN nl_opt block
-- On LOR reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS_LESS reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS_GREATER reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS_EQUAL reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS reduce production expr -> DEF REC fundef IN nl_opt block
-- On LBRACK reduce production expr -> DEF REC fundef IN nl_opt block
-- On LAND reduce production expr -> DEF REC fundef IN nl_opt block
-- On INT reduce production expr -> DEF REC fundef IN nl_opt block
-- On IN reduce production expr -> DEF REC fundef IN nl_opt block
-- On IDENT reduce production expr -> DEF REC fundef IN nl_opt block
-- On GREATER_EQUAL reduce production expr -> DEF REC fundef IN nl_opt block
-- On GREATER reduce production expr -> DEF REC fundef IN nl_opt block
-- On FLOAT reduce production expr -> DEF REC fundef IN nl_opt block
-- On EXCL reduce production expr -> DEF REC fundef IN nl_opt block
-- On EQUAL reduce production expr -> DEF REC fundef IN nl_opt block
-- On END reduce production expr -> DEF REC fundef IN nl_opt block
-- On ELSE reduce production expr -> DEF REC fundef IN nl_opt block
-- On DOL reduce production expr -> DEF REC fundef IN nl_opt block
-- On DO reduce production expr -> DEF REC fundef IN nl_opt block
-- On CONS reduce production expr -> DEF REC fundef IN nl_opt block
-- On COMMA reduce production expr -> DEF REC fundef IN nl_opt block
-- On CHAR reduce production expr -> DEF REC fundef IN nl_opt block
-- On BOOL reduce production expr -> DEF REC fundef IN nl_opt block
-- On ATOM reduce production expr -> DEF REC fundef IN nl_opt block
-- On AST_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On AST reduce production expr -> DEF REC fundef IN nl_opt block

State 347:
## Known stack suffix:
## DEF fundef
## LR(1) items:
expr -> DEF fundef . IN nl_opt block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On IN shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## DEF fundef IN
## LR(1) items:
expr -> DEF fundef IN . nl_opt block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 349
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 349:
## Known stack suffix:
## DEF fundef IN nl_opt
## LR(1) items:
expr -> DEF fundef IN nl_opt . block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 350
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 350:
## Known stack suffix:
## DEF fundef IN nl_opt block
## LR(1) items:
expr -> DEF fundef IN nl_opt block . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> DEF fundef IN nl_opt block
-- On UIDENT reduce production expr -> DEF fundef IN nl_opt block
-- On UARROW reduce production expr -> DEF fundef IN nl_opt block
-- On TO reduce production expr -> DEF fundef IN nl_opt block
-- On THEN reduce production expr -> DEF fundef IN nl_opt block
-- On STRING reduce production expr -> DEF fundef IN nl_opt block
-- On SLASH_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On SLASH reduce production expr -> DEF fundef IN nl_opt block
-- On SEMI reduce production expr -> DEF fundef IN nl_opt block
-- On RPAREN reduce production expr -> DEF fundef IN nl_opt block
-- On RBRACK reduce production expr -> DEF fundef IN nl_opt block
-- On RBRACE reduce production expr -> DEF fundef IN nl_opt block
-- On PLUS_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On PLUS reduce production expr -> DEF fundef IN nl_opt block
-- On PIPE reduce production expr -> DEF fundef IN nl_opt block
-- On NL reduce production expr -> DEF fundef IN nl_opt block
-- On MOD reduce production expr -> DEF fundef IN nl_opt block
-- On MINUS_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On MINUS reduce production expr -> DEF fundef IN nl_opt block
-- On LPAREN reduce production expr -> DEF fundef IN nl_opt block
-- On LOR reduce production expr -> DEF fundef IN nl_opt block
-- On LESS_LESS reduce production expr -> DEF fundef IN nl_opt block
-- On LESS_GREATER reduce production expr -> DEF fundef IN nl_opt block
-- On LESS_EQUAL reduce production expr -> DEF fundef IN nl_opt block
-- On LESS reduce production expr -> DEF fundef IN nl_opt block
-- On LBRACK reduce production expr -> DEF fundef IN nl_opt block
-- On LAND reduce production expr -> DEF fundef IN nl_opt block
-- On INT reduce production expr -> DEF fundef IN nl_opt block
-- On IN reduce production expr -> DEF fundef IN nl_opt block
-- On IDENT reduce production expr -> DEF fundef IN nl_opt block
-- On GREATER_EQUAL reduce production expr -> DEF fundef IN nl_opt block
-- On GREATER reduce production expr -> DEF fundef IN nl_opt block
-- On FLOAT reduce production expr -> DEF fundef IN nl_opt block
-- On EXCL reduce production expr -> DEF fundef IN nl_opt block
-- On EQUAL reduce production expr -> DEF fundef IN nl_opt block
-- On END reduce production expr -> DEF fundef IN nl_opt block
-- On ELSE reduce production expr -> DEF fundef IN nl_opt block
-- On DOL reduce production expr -> DEF fundef IN nl_opt block
-- On DO reduce production expr -> DEF fundef IN nl_opt block
-- On CONS reduce production expr -> DEF fundef IN nl_opt block
-- On COMMA reduce production expr -> DEF fundef IN nl_opt block
-- On CHAR reduce production expr -> DEF fundef IN nl_opt block
-- On BOOL reduce production expr -> DEF fundef IN nl_opt block
-- On ATOM reduce production expr -> DEF fundef IN nl_opt block
-- On AST_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On AST reduce production expr -> DEF fundef IN nl_opt block

State 351:
## Known stack suffix:
## primary DOT LPAREN expr
## LR(1) items:
array_expr -> primary DOT LPAREN expr . RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On RPAREN shift to state 352
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 352:
## Known stack suffix:
## primary DOT LPAREN expr RPAREN
## LR(1) items:
array_expr -> primary DOT LPAREN expr RPAREN . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On UIDENT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On UARROW reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On TO reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On THEN reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On STRING reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On SLASH_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On SLASH reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On SEMI reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On RPAREN reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On RBRACK reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On RBRACE reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On PLUS_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On PLUS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On PIPE reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On NL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On MOD reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On MINUS_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On MINUS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LPAREN reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LOR reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS_LESS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS_GREATER reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS_EQUAL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LBRACK reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LARROW reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LAND reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On INT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On IN reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On IDENT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On GREATER_EQUAL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On GREATER reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On FLOAT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On EXCL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On EQUAL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On END reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On ELSE reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On DOL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On DO reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On CONS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On COMMA reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On CHAR reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On BOOL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On ATOM reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On AST_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On AST reduce production array_expr -> primary DOT LPAREN expr RPAREN

State 353:
## Known stack suffix:
## primary DOT binding
## LR(1) items:
field_expr -> primary DOT binding . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ASSIGN ]
## Transitions:
## Reductions:
-- On WITH reduce production field_expr -> primary DOT binding
-- On UIDENT reduce production field_expr -> primary DOT binding
-- On UARROW reduce production field_expr -> primary DOT binding
-- On TO reduce production field_expr -> primary DOT binding
-- On THEN reduce production field_expr -> primary DOT binding
-- On STRING reduce production field_expr -> primary DOT binding
-- On SLASH_DOT reduce production field_expr -> primary DOT binding
-- On SLASH reduce production field_expr -> primary DOT binding
-- On SEMI reduce production field_expr -> primary DOT binding
-- On RPAREN reduce production field_expr -> primary DOT binding
-- On RBRACK reduce production field_expr -> primary DOT binding
-- On RBRACE reduce production field_expr -> primary DOT binding
-- On PLUS_DOT reduce production field_expr -> primary DOT binding
-- On PLUS reduce production field_expr -> primary DOT binding
-- On PIPE reduce production field_expr -> primary DOT binding
-- On NL reduce production field_expr -> primary DOT binding
-- On MOD reduce production field_expr -> primary DOT binding
-- On MINUS_DOT reduce production field_expr -> primary DOT binding
-- On MINUS reduce production field_expr -> primary DOT binding
-- On LPAREN reduce production field_expr -> primary DOT binding
-- On LOR reduce production field_expr -> primary DOT binding
-- On LESS_LESS reduce production field_expr -> primary DOT binding
-- On LESS_GREATER reduce production field_expr -> primary DOT binding
-- On LESS_EQUAL reduce production field_expr -> primary DOT binding
-- On LESS reduce production field_expr -> primary DOT binding
-- On LBRACK reduce production field_expr -> primary DOT binding
-- On LARROW reduce production field_expr -> primary DOT binding
-- On LAND reduce production field_expr -> primary DOT binding
-- On INT reduce production field_expr -> primary DOT binding
-- On IN reduce production field_expr -> primary DOT binding
-- On IDENT reduce production field_expr -> primary DOT binding
-- On GREATER_EQUAL reduce production field_expr -> primary DOT binding
-- On GREATER reduce production field_expr -> primary DOT binding
-- On FLOAT reduce production field_expr -> primary DOT binding
-- On EXCL reduce production field_expr -> primary DOT binding
-- On EQUAL reduce production field_expr -> primary DOT binding
-- On END reduce production field_expr -> primary DOT binding
-- On ELSE reduce production field_expr -> primary DOT binding
-- On DOL reduce production field_expr -> primary DOT binding
-- On DO reduce production field_expr -> primary DOT binding
-- On CONS reduce production field_expr -> primary DOT binding
-- On COMMA reduce production field_expr -> primary DOT binding
-- On CHAR reduce production field_expr -> primary DOT binding
-- On BOOL reduce production field_expr -> primary DOT binding
-- On ATOM reduce production field_expr -> primary DOT binding
-- On AST_DOT reduce production field_expr -> primary DOT binding
-- On AST reduce production field_expr -> primary DOT binding
-- On ASSIGN reduce production field_expr -> primary DOT binding

State 354:
## Known stack suffix:
## FOR IDENT EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> FOR IDENT EQUAL expr . TO nl_opt expr nl_opt DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On TO shift to state 355
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 355:
## Known stack suffix:
## FOR IDENT EQUAL expr TO
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO . nl_opt expr nl_opt DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 356
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 356:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt . expr nl_opt DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 357
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 357:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> FOR IDENT EQUAL expr TO nl_opt expr . nl_opt DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 15
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On nl_opt shift to state 358
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On DO reduce production nl_opt ->

State 358:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt . DO nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On DO shift to state 359
## Reductions:

State 359:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO . nl_opt block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 360
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 360:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt . block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 361
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 361:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On UIDENT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On UARROW reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On TO reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On THEN reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On STRING reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On SLASH_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On SLASH reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On SEMI reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On RPAREN reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On RBRACK reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On RBRACE reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On PLUS_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On PLUS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On PIPE reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On NL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On MOD reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On MINUS_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On MINUS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LPAREN reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LOR reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS_LESS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS_GREATER reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS_EQUAL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LBRACK reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LAND reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On INT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On IN reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On IDENT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On GREATER_EQUAL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On GREATER reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On FLOAT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On EXCL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On EQUAL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On END reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On ELSE reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On DOL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On DO reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On CONS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On COMMA reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On CHAR reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On BOOL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On ATOM reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On AST_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On AST reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END

State 363:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW nl_opt block
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW nl_opt block . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW nl_opt block END
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On UIDENT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On UARROW reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On TO reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On THEN reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On STRING reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On SEMI reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On RPAREN reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On RBRACK reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On RBRACE reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On PIPE reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On NL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On MOD reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LPAREN reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LOR reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_LESS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_GREATER reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_EQUAL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LBRACK reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LAND reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On INT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On IN reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On IDENT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER_EQUAL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On FLOAT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On EXCL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On EQUAL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On END reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On ELSE reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On DOL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On DO reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On CONS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On COMMA reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On CHAR reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On BOOL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On ATOM reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On AST_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On AST reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END

State 365:
## Known stack suffix:
## FUN nl_opt pattern_matching
## LR(1) items:
expr -> FUN nl_opt pattern_matching . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 366
## Reductions:

State 366:
## Known stack suffix:
## FUN nl_opt pattern_matching END
## LR(1) items:
expr -> FUN nl_opt pattern_matching END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> FUN nl_opt pattern_matching END
-- On UIDENT reduce production expr -> FUN nl_opt pattern_matching END
-- On UARROW reduce production expr -> FUN nl_opt pattern_matching END
-- On TO reduce production expr -> FUN nl_opt pattern_matching END
-- On THEN reduce production expr -> FUN nl_opt pattern_matching END
-- On STRING reduce production expr -> FUN nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On SLASH reduce production expr -> FUN nl_opt pattern_matching END
-- On SEMI reduce production expr -> FUN nl_opt pattern_matching END
-- On RPAREN reduce production expr -> FUN nl_opt pattern_matching END
-- On RBRACK reduce production expr -> FUN nl_opt pattern_matching END
-- On RBRACE reduce production expr -> FUN nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On PLUS reduce production expr -> FUN nl_opt pattern_matching END
-- On PIPE reduce production expr -> FUN nl_opt pattern_matching END
-- On NL reduce production expr -> FUN nl_opt pattern_matching END
-- On MOD reduce production expr -> FUN nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On MINUS reduce production expr -> FUN nl_opt pattern_matching END
-- On LPAREN reduce production expr -> FUN nl_opt pattern_matching END
-- On LOR reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS reduce production expr -> FUN nl_opt pattern_matching END
-- On LBRACK reduce production expr -> FUN nl_opt pattern_matching END
-- On LAND reduce production expr -> FUN nl_opt pattern_matching END
-- On INT reduce production expr -> FUN nl_opt pattern_matching END
-- On IN reduce production expr -> FUN nl_opt pattern_matching END
-- On IDENT reduce production expr -> FUN nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> FUN nl_opt pattern_matching END
-- On GREATER reduce production expr -> FUN nl_opt pattern_matching END
-- On FLOAT reduce production expr -> FUN nl_opt pattern_matching END
-- On EXCL reduce production expr -> FUN nl_opt pattern_matching END
-- On EQUAL reduce production expr -> FUN nl_opt pattern_matching END
-- On END reduce production expr -> FUN nl_opt pattern_matching END
-- On ELSE reduce production expr -> FUN nl_opt pattern_matching END
-- On DOL reduce production expr -> FUN nl_opt pattern_matching END
-- On DO reduce production expr -> FUN nl_opt pattern_matching END
-- On CONS reduce production expr -> FUN nl_opt pattern_matching END
-- On COMMA reduce production expr -> FUN nl_opt pattern_matching END
-- On CHAR reduce production expr -> FUN nl_opt pattern_matching END
-- On BOOL reduce production expr -> FUN nl_opt pattern_matching END
-- On ATOM reduce production expr -> FUN nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On AST reduce production expr -> FUN nl_opt pattern_matching END

State 367:
## Known stack suffix:
## IDENT LARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> IDENT LARROW expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> IDENT LARROW expr
-- On TO reduce production expr -> IDENT LARROW expr
-- On THEN reduce production expr -> IDENT LARROW expr
-- On SEMI reduce production expr -> IDENT LARROW expr
-- On RPAREN reduce production expr -> IDENT LARROW expr
-- On RBRACK reduce production expr -> IDENT LARROW expr
-- On RBRACE reduce production expr -> IDENT LARROW expr
-- On PIPE reduce production expr -> IDENT LARROW expr
-- On NL reduce production expr -> IDENT LARROW expr
-- On IN reduce production expr -> IDENT LARROW expr
-- On END reduce production expr -> IDENT LARROW expr
-- On ELSE reduce production expr -> IDENT LARROW expr
-- On DOL reduce production expr -> IDENT LARROW expr
-- On DO reduce production expr -> IDENT LARROW expr
-- On COMMA reduce production expr -> IDENT LARROW expr

State 368:
## Known stack suffix:
## IDENT ASSIGN
## LR(1) items:
expr -> IDENT ASSIGN . nl_opt expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 369
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 369:
## Known stack suffix:
## IDENT ASSIGN nl_opt
## LR(1) items:
expr -> IDENT ASSIGN nl_opt . expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 370
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 370:
## Known stack suffix:
## IDENT ASSIGN nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> IDENT ASSIGN nl_opt expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On LPAREN shift to state 118
-- On LBRACK shift to state 220
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> IDENT ASSIGN nl_opt expr
-- On UIDENT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On UARROW reduce production expr -> IDENT ASSIGN nl_opt expr
-- On TO reduce production expr -> IDENT ASSIGN nl_opt expr
-- On THEN reduce production expr -> IDENT ASSIGN nl_opt expr
-- On SLASH_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On SLASH reduce production expr -> IDENT ASSIGN nl_opt expr
-- On SEMI reduce production expr -> IDENT ASSIGN nl_opt expr
-- On RPAREN reduce production expr -> IDENT ASSIGN nl_opt expr
-- On RBRACK reduce production expr -> IDENT ASSIGN nl_opt expr
-- On RBRACE reduce production expr -> IDENT ASSIGN nl_opt expr
-- On PLUS_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On PLUS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On PIPE reduce production expr -> IDENT ASSIGN nl_opt expr
-- On NL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On MOD reduce production expr -> IDENT ASSIGN nl_opt expr
-- On MINUS_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On MINUS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LOR reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LESS_GREATER reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LESS_EQUAL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LESS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LAND reduce production expr -> IDENT ASSIGN nl_opt expr
-- On IN reduce production expr -> IDENT ASSIGN nl_opt expr
-- On GREATER_EQUAL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On GREATER reduce production expr -> IDENT ASSIGN nl_opt expr
-- On EQUAL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On END reduce production expr -> IDENT ASSIGN nl_opt expr
-- On ELSE reduce production expr -> IDENT ASSIGN nl_opt expr
-- On DOL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On DO reduce production expr -> IDENT ASSIGN nl_opt expr
-- On CONS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On COMMA reduce production expr -> IDENT ASSIGN nl_opt expr
-- On AST_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On AST reduce production expr -> IDENT ASSIGN nl_opt expr

State 371:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr . THEN nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr . THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr . THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On THEN shift to state 372
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 372:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
if_exp -> IF expr THEN . nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr THEN . nl_opt multi_exps_block ELSE nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr THEN . nl_opt simple_expr nl_opt ELSE nl_opt simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 373
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 373:
## Known stack suffix:
## IF expr THEN nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt . multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr THEN nl_opt . multi_exps_block ELSE nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr THEN nl_opt . simple_expr nl_opt ELSE nl_opt simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 374
-- On rev_stmts shift to state 379
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On multi_exps_block shift to state 386
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 374:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr
## LR(1) items:
expr -> simple_expr . [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr THEN nl_opt simple_expr . nl_opt ELSE nl_opt simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 375
## Reductions:
-- On UIDENT reduce production expr -> simple_expr
-- On UARROW reduce production expr -> simple_expr
-- On STRING reduce production expr -> simple_expr
-- On SLASH_DOT reduce production expr -> simple_expr
-- On SLASH reduce production expr -> simple_expr
-- On SEMI reduce production expr -> simple_expr
-- On PLUS_DOT reduce production expr -> simple_expr
-- On PLUS reduce production expr -> simple_expr
-- On MOD reduce production expr -> simple_expr
-- On MINUS_DOT reduce production expr -> simple_expr
-- On MINUS reduce production expr -> simple_expr
-- On LPAREN reduce production expr -> simple_expr
-- On LOR reduce production expr -> simple_expr
-- On LESS_LESS reduce production expr -> simple_expr
-- On LESS_GREATER reduce production expr -> simple_expr
-- On LESS_EQUAL reduce production expr -> simple_expr
-- On LESS reduce production expr -> simple_expr
-- On LBRACK reduce production expr -> simple_expr
-- On LAND reduce production expr -> simple_expr
-- On INT reduce production expr -> simple_expr
-- On IDENT reduce production expr -> simple_expr
-- On GREATER_EQUAL reduce production expr -> simple_expr
-- On GREATER reduce production expr -> simple_expr
-- On FLOAT reduce production expr -> simple_expr
-- On EXCL reduce production expr -> simple_expr
-- On EQUAL reduce production expr -> simple_expr
-- On ELSE reduce production nl_opt ->
-- On DOL reduce production expr -> simple_expr
-- On CONS reduce production expr -> simple_expr
-- On CHAR reduce production expr -> simple_expr
-- On BOOL reduce production expr -> simple_expr
-- On ATOM reduce production expr -> simple_expr
-- On AST_DOT reduce production expr -> simple_expr
-- On AST reduce production expr -> simple_expr

State 375:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt . ELSE nl_opt simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On ELSE shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt ELSE
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE . nl_opt simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 377
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 377:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt . simple_expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 378
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
## Reductions:

State 378:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On UIDENT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On UARROW reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On TO reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On THEN reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On STRING reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On SLASH_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On SLASH reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On SEMI reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On RPAREN reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On RBRACK reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On RBRACE reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On PLUS_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On PLUS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On PIPE reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On NL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On MOD reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On MINUS_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On MINUS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LPAREN reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LOR reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS_LESS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS_GREATER reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS_EQUAL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LBRACK reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LAND reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On INT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On IN reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On IDENT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On GREATER_EQUAL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On GREATER reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On FLOAT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On EXCL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On EQUAL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On END reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On ELSE reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On DOL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On DO reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On CONS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On COMMA reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On CHAR reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On BOOL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On ATOM reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On AST_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On AST reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr

State 379:
## Known stack suffix:
## rev_stmts
## LR(1) items:
multi_exps_block -> rev_stmts . SEMI expr [ END ELSE ]
multi_exps_block -> rev_stmts . SEMI expr NL [ END ELSE ]
multi_exps_block -> rev_stmts . NL expr [ END ELSE ]
multi_exps_block -> rev_stmts . NL expr NL [ END ELSE ]
rev_stmts -> rev_stmts . SEMI stmt [ SEMI NL ]
rev_stmts -> rev_stmts . NL stmt [ SEMI NL ]
## Transitions:
-- On SEMI shift to state 380
-- On NL shift to state 383
## Reductions:

State 380:
## Known stack suffix:
## rev_stmts SEMI
## LR(1) items:
multi_exps_block -> rev_stmts SEMI . expr [ END ELSE ]
multi_exps_block -> rev_stmts SEMI . expr NL [ END ELSE ]
rev_stmts -> rev_stmts SEMI . stmt [ SEMI NL ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 284
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 381
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 381:
## Known stack suffix:
## rev_stmts SEMI expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
multi_exps_block -> rev_stmts SEMI expr . [ END ELSE ]
multi_exps_block -> rev_stmts SEMI expr . NL [ END ELSE ]
stmt -> expr . [ SEMI NL ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 382
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On SEMI reduce production stmt -> expr
-- On END reduce production multi_exps_block -> rev_stmts SEMI expr
-- On ELSE reduce production multi_exps_block -> rev_stmts SEMI expr

State 382:
## Known stack suffix:
## rev_stmts SEMI expr NL
## LR(1) items:
multi_exps_block -> rev_stmts SEMI expr NL . [ END ELSE ]
## Transitions:
## Reductions:
-- On END reduce production multi_exps_block -> rev_stmts SEMI expr NL
-- On ELSE reduce production multi_exps_block -> rev_stmts SEMI expr NL

State 383:
## Known stack suffix:
## rev_stmts NL
## LR(1) items:
multi_exps_block -> rev_stmts NL . expr [ END ELSE ]
multi_exps_block -> rev_stmts NL . expr NL [ END ELSE ]
rev_stmts -> rev_stmts NL . stmt [ SEMI NL ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 326
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 384
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 384:
## Known stack suffix:
## rev_stmts NL expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL CONS CHAR BOOL ATOM AST_DOT AST ]
multi_exps_block -> rev_stmts NL expr . [ END ELSE ]
multi_exps_block -> rev_stmts NL expr . NL [ END ELSE ]
stmt -> expr . [ SEMI NL ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 385
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On SEMI reduce production stmt -> expr
-- On END reduce production multi_exps_block -> rev_stmts NL expr
-- On ELSE reduce production multi_exps_block -> rev_stmts NL expr

State 385:
## Known stack suffix:
## rev_stmts NL expr NL
## LR(1) items:
multi_exps_block -> rev_stmts NL expr NL . [ END ELSE ]
## Transitions:
## Reductions:
-- On END reduce production multi_exps_block -> rev_stmts NL expr NL
-- On ELSE reduce production multi_exps_block -> rev_stmts NL expr NL

State 386:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr THEN nl_opt multi_exps_block . ELSE nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 387
-- On ELSE shift to state 388
## Reductions:

State 387:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block END
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On UIDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On UARROW reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On TO reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On THEN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On STRING reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On SLASH_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On SLASH reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On SEMI reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On RPAREN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On RBRACK reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On RBRACE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On PLUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On PLUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On PIPE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On NL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On MOD reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On MINUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On MINUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LPAREN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LOR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS_LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS_GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LBRACK reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LAND reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On INT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On IN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On IDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On GREATER_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On FLOAT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On EXCL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On END reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On ELSE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On DOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On DO reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On CONS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On COMMA reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On CHAR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On BOOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On ATOM reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On AST_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On AST reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END

State 388:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE . nl_opt multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 389
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 389:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt . multi_exps_block END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 379
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On multi_exps_block shift to state 390
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 390:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 391
## Reductions:

State 391:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On UIDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On UARROW reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On TO reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On THEN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On STRING reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On SLASH_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On SLASH reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On SEMI reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On RPAREN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On RBRACK reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On RBRACE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On PLUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On PLUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On PIPE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On NL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On MOD reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On MINUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On MINUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LPAREN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LOR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS_LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS_GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LBRACK reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LAND reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On INT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On IN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On IDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On GREATER_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On FLOAT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On EXCL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On END reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On ELSE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On DOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On DO reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On CONS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On COMMA reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On CHAR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On BOOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On ATOM reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On AST_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On AST reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END

State 392:
## Known stack suffix:
## IDENT EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI RBRACE PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
field -> IDENT EQUAL expr . [ SEMI RBRACE ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On SEMI reduce production field -> IDENT EQUAL expr
-- On RBRACE reduce production field -> IDENT EQUAL expr

State 393:
## Known stack suffix:
## LBRACE fields
## LR(1) items:
expr -> LBRACE fields . RBRACE [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On RBRACE shift to state 394
## Reductions:

State 394:
## Known stack suffix:
## LBRACE fields RBRACE
## LR(1) items:
expr -> LBRACE fields RBRACE . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> LBRACE fields RBRACE
-- On UIDENT reduce production expr -> LBRACE fields RBRACE
-- On UARROW reduce production expr -> LBRACE fields RBRACE
-- On TO reduce production expr -> LBRACE fields RBRACE
-- On THEN reduce production expr -> LBRACE fields RBRACE
-- On STRING reduce production expr -> LBRACE fields RBRACE
-- On SLASH_DOT reduce production expr -> LBRACE fields RBRACE
-- On SLASH reduce production expr -> LBRACE fields RBRACE
-- On SEMI reduce production expr -> LBRACE fields RBRACE
-- On RPAREN reduce production expr -> LBRACE fields RBRACE
-- On RBRACK reduce production expr -> LBRACE fields RBRACE
-- On RBRACE reduce production expr -> LBRACE fields RBRACE
-- On PLUS_DOT reduce production expr -> LBRACE fields RBRACE
-- On PLUS reduce production expr -> LBRACE fields RBRACE
-- On PIPE reduce production expr -> LBRACE fields RBRACE
-- On NL reduce production expr -> LBRACE fields RBRACE
-- On MOD reduce production expr -> LBRACE fields RBRACE
-- On MINUS_DOT reduce production expr -> LBRACE fields RBRACE
-- On MINUS reduce production expr -> LBRACE fields RBRACE
-- On LPAREN reduce production expr -> LBRACE fields RBRACE
-- On LOR reduce production expr -> LBRACE fields RBRACE
-- On LESS_LESS reduce production expr -> LBRACE fields RBRACE
-- On LESS_GREATER reduce production expr -> LBRACE fields RBRACE
-- On LESS_EQUAL reduce production expr -> LBRACE fields RBRACE
-- On LESS reduce production expr -> LBRACE fields RBRACE
-- On LBRACK reduce production expr -> LBRACE fields RBRACE
-- On LAND reduce production expr -> LBRACE fields RBRACE
-- On INT reduce production expr -> LBRACE fields RBRACE
-- On IN reduce production expr -> LBRACE fields RBRACE
-- On IDENT reduce production expr -> LBRACE fields RBRACE
-- On GREATER_EQUAL reduce production expr -> LBRACE fields RBRACE
-- On GREATER reduce production expr -> LBRACE fields RBRACE
-- On FLOAT reduce production expr -> LBRACE fields RBRACE
-- On EXCL reduce production expr -> LBRACE fields RBRACE
-- On EQUAL reduce production expr -> LBRACE fields RBRACE
-- On END reduce production expr -> LBRACE fields RBRACE
-- On ELSE reduce production expr -> LBRACE fields RBRACE
-- On DOL reduce production expr -> LBRACE fields RBRACE
-- On DO reduce production expr -> LBRACE fields RBRACE
-- On CONS reduce production expr -> LBRACE fields RBRACE
-- On COMMA reduce production expr -> LBRACE fields RBRACE
-- On CHAR reduce production expr -> LBRACE fields RBRACE
-- On BOOL reduce production expr -> LBRACE fields RBRACE
-- On ATOM reduce production expr -> LBRACE fields RBRACE
-- On AST_DOT reduce production expr -> LBRACE fields RBRACE
-- On AST reduce production expr -> LBRACE fields RBRACE

State 395:
## Known stack suffix:
## field
## LR(1) items:
fields -> field . fields_tail [ RBRACE ]
## Transitions:
-- On SEMI shift to state 396
-- On fields_tail shift to state 399
## Reductions:
-- On RBRACE reduce production fields_tail ->

State 396:
## Known stack suffix:
## SEMI
## LR(1) items:
fields_tail -> SEMI . field fields_tail [ RBRACE ]
## Transitions:
-- On IDENT shift to state 223
-- On field shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## SEMI field
## LR(1) items:
fields_tail -> SEMI field . fields_tail [ RBRACE ]
## Transitions:
-- On SEMI shift to state 396
-- On fields_tail shift to state 398
## Reductions:
-- On RBRACE reduce production fields_tail ->

State 398:
## Known stack suffix:
## SEMI field fields_tail
## LR(1) items:
fields_tail -> SEMI field fields_tail . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production fields_tail -> SEMI field fields_tail

State 399:
## Known stack suffix:
## field fields_tail
## LR(1) items:
fields -> field fields_tail . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production fields -> field fields_tail

State 400:
## Known stack suffix:
## rev_list_elts
## LR(1) items:
list_ -> rev_list_elts . [ RBRACK PIPE ]
list_ -> rev_list_elts . COMMA [ RBRACK PIPE ]
rev_list_elts -> rev_list_elts . COMMA expr [ RBRACK PIPE COMMA ]
## Transitions:
-- On COMMA shift to state 401
## Reductions:
-- On RBRACK reduce production list_ -> rev_list_elts
-- On PIPE reduce production list_ -> rev_list_elts

State 401:
## Known stack suffix:
## rev_list_elts COMMA
## LR(1) items:
list_ -> rev_list_elts COMMA . [ RBRACK PIPE ]
rev_list_elts -> rev_list_elts COMMA . expr [ RBRACK PIPE COMMA ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 402
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:
-- On RBRACK reduce production list_ -> rev_list_elts COMMA
-- On PIPE reduce production list_ -> rev_list_elts COMMA

State 402:
## Known stack suffix:
## rev_list_elts COMMA expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_list_elts -> rev_list_elts COMMA expr . [ RBRACK PIPE COMMA ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On RBRACK reduce production rev_list_elts -> rev_list_elts COMMA expr
-- On PIPE reduce production rev_list_elts -> rev_list_elts COMMA expr
-- On COMMA reduce production rev_list_elts -> rev_list_elts COMMA expr

State 403:
## Known stack suffix:
## LBRACK PIPE list_
## LR(1) items:
primary -> LBRACK PIPE list_ . PIPE RBRACK [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On PIPE shift to state 404
## Reductions:

State 404:
## Known stack suffix:
## LBRACK PIPE list_ PIPE
## LR(1) items:
primary -> LBRACK PIPE list_ PIPE . RBRACK [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On RBRACK shift to state 405
## Reductions:

State 405:
## Known stack suffix:
## LBRACK PIPE list_ PIPE RBRACK
## LR(1) items:
primary -> LBRACK PIPE list_ PIPE RBRACK . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On UIDENT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On UARROW reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On TO reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On THEN reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On STRING reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On SLASH_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On SLASH reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On SEMI reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On RPAREN reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On RBRACK reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On RBRACE reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On PLUS_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On PLUS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On PIPE reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On NL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On MOD reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On MINUS_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On MINUS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LPAREN reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LOR reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS_LESS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS_GREATER reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS_EQUAL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LBRACK reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LAND reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On INT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On IN reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On IDENT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On GREATER_EQUAL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On GREATER reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On FLOAT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On EXCL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On EQUAL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On END reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On ELSE reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On DOL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On DO reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On CONS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On COMMA reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On CHAR reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On BOOL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On ATOM reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On AST_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On AST reduce production primary -> LBRACK PIPE list_ PIPE RBRACK

State 406:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RBRACK PLUS_DOT PLUS PIPE MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_list_elts -> expr . [ RBRACK PIPE COMMA ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On RBRACK reduce production rev_list_elts -> expr
-- On PIPE reduce production rev_list_elts -> expr
-- On COMMA reduce production rev_list_elts -> expr

State 407:
## Known stack suffix:
## LBRACK list_
## LR(1) items:
primary -> LBRACK list_ . RBRACK [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On RBRACK shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## LBRACK list_ RBRACK
## LR(1) items:
primary -> LBRACK list_ RBRACK . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> LBRACK list_ RBRACK
-- On UIDENT reduce production primary -> LBRACK list_ RBRACK
-- On UARROW reduce production primary -> LBRACK list_ RBRACK
-- On TO reduce production primary -> LBRACK list_ RBRACK
-- On THEN reduce production primary -> LBRACK list_ RBRACK
-- On STRING reduce production primary -> LBRACK list_ RBRACK
-- On SLASH_DOT reduce production primary -> LBRACK list_ RBRACK
-- On SLASH reduce production primary -> LBRACK list_ RBRACK
-- On SEMI reduce production primary -> LBRACK list_ RBRACK
-- On RPAREN reduce production primary -> LBRACK list_ RBRACK
-- On RBRACK reduce production primary -> LBRACK list_ RBRACK
-- On RBRACE reduce production primary -> LBRACK list_ RBRACK
-- On PLUS_DOT reduce production primary -> LBRACK list_ RBRACK
-- On PLUS reduce production primary -> LBRACK list_ RBRACK
-- On PIPE reduce production primary -> LBRACK list_ RBRACK
-- On NL reduce production primary -> LBRACK list_ RBRACK
-- On MOD reduce production primary -> LBRACK list_ RBRACK
-- On MINUS_DOT reduce production primary -> LBRACK list_ RBRACK
-- On MINUS reduce production primary -> LBRACK list_ RBRACK
-- On LPAREN reduce production primary -> LBRACK list_ RBRACK
-- On LOR reduce production primary -> LBRACK list_ RBRACK
-- On LESS_LESS reduce production primary -> LBRACK list_ RBRACK
-- On LESS_GREATER reduce production primary -> LBRACK list_ RBRACK
-- On LESS_EQUAL reduce production primary -> LBRACK list_ RBRACK
-- On LESS reduce production primary -> LBRACK list_ RBRACK
-- On LBRACK reduce production primary -> LBRACK list_ RBRACK
-- On LAND reduce production primary -> LBRACK list_ RBRACK
-- On INT reduce production primary -> LBRACK list_ RBRACK
-- On IN reduce production primary -> LBRACK list_ RBRACK
-- On IDENT reduce production primary -> LBRACK list_ RBRACK
-- On GREATER_EQUAL reduce production primary -> LBRACK list_ RBRACK
-- On GREATER reduce production primary -> LBRACK list_ RBRACK
-- On FLOAT reduce production primary -> LBRACK list_ RBRACK
-- On EXCL reduce production primary -> LBRACK list_ RBRACK
-- On EQUAL reduce production primary -> LBRACK list_ RBRACK
-- On END reduce production primary -> LBRACK list_ RBRACK
-- On ELSE reduce production primary -> LBRACK list_ RBRACK
-- On DOT reduce production primary -> LBRACK list_ RBRACK
-- On DOL reduce production primary -> LBRACK list_ RBRACK
-- On DO reduce production primary -> LBRACK list_ RBRACK
-- On CONS reduce production primary -> LBRACK list_ RBRACK
-- On COMMA reduce production primary -> LBRACK list_ RBRACK
-- On CHAR reduce production primary -> LBRACK list_ RBRACK
-- On BOOL reduce production primary -> LBRACK list_ RBRACK
-- On ATOM reduce production primary -> LBRACK list_ RBRACK
-- On AST_DOT reduce production primary -> LBRACK list_ RBRACK
-- On AST reduce production primary -> LBRACK list_ RBRACK

State 409:
## Known stack suffix:
## LPAREN rev_tuple
## LR(1) items:
rev_tuple -> rev_tuple . COMMA expr [ RPAREN COMMA ]
tuple -> LPAREN rev_tuple . RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On RPAREN shift to state 410
-- On COMMA shift to state 411
## Reductions:

State 410:
## Known stack suffix:
## LPAREN rev_tuple RPAREN
## LR(1) items:
tuple -> LPAREN rev_tuple RPAREN . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production tuple -> LPAREN rev_tuple RPAREN
-- On UIDENT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On UARROW reduce production tuple -> LPAREN rev_tuple RPAREN
-- On TO reduce production tuple -> LPAREN rev_tuple RPAREN
-- On THEN reduce production tuple -> LPAREN rev_tuple RPAREN
-- On STRING reduce production tuple -> LPAREN rev_tuple RPAREN
-- On SLASH_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On SLASH reduce production tuple -> LPAREN rev_tuple RPAREN
-- On SEMI reduce production tuple -> LPAREN rev_tuple RPAREN
-- On RPAREN reduce production tuple -> LPAREN rev_tuple RPAREN
-- On RBRACK reduce production tuple -> LPAREN rev_tuple RPAREN
-- On RBRACE reduce production tuple -> LPAREN rev_tuple RPAREN
-- On PLUS_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On PLUS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On PIPE reduce production tuple -> LPAREN rev_tuple RPAREN
-- On NL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On MOD reduce production tuple -> LPAREN rev_tuple RPAREN
-- On MINUS_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On MINUS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LPAREN reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LOR reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS_LESS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS_GREATER reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS_EQUAL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LBRACK reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LAND reduce production tuple -> LPAREN rev_tuple RPAREN
-- On INT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On IN reduce production tuple -> LPAREN rev_tuple RPAREN
-- On IDENT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On GREATER_EQUAL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On GREATER reduce production tuple -> LPAREN rev_tuple RPAREN
-- On FLOAT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On EXCL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On EQUAL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On END reduce production tuple -> LPAREN rev_tuple RPAREN
-- On ELSE reduce production tuple -> LPAREN rev_tuple RPAREN
-- On DOL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On DO reduce production tuple -> LPAREN rev_tuple RPAREN
-- On CONS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On COMMA reduce production tuple -> LPAREN rev_tuple RPAREN
-- On CHAR reduce production tuple -> LPAREN rev_tuple RPAREN
-- On BOOL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On ATOM reduce production tuple -> LPAREN rev_tuple RPAREN
-- On AST_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On AST reduce production tuple -> LPAREN rev_tuple RPAREN

State 411:
## Known stack suffix:
## rev_tuple COMMA
## LR(1) items:
rev_tuple -> rev_tuple COMMA . expr [ RPAREN COMMA ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 412
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 412:
## Known stack suffix:
## rev_tuple COMMA expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_tuple -> rev_tuple COMMA expr . [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On RPAREN reduce production rev_tuple -> rev_tuple COMMA expr
-- On COMMA reduce production rev_tuple -> rev_tuple COMMA expr

State 413:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
primary -> LPAREN expr . RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_tuple -> expr . COMMA expr [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On RPAREN shift to state 414
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On COMMA shift to state 415
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 414:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
primary -> LPAREN expr RPAREN . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production primary -> LPAREN expr RPAREN
-- On UIDENT reduce production primary -> LPAREN expr RPAREN
-- On UARROW reduce production primary -> LPAREN expr RPAREN
-- On TO reduce production primary -> LPAREN expr RPAREN
-- On THEN reduce production primary -> LPAREN expr RPAREN
-- On STRING reduce production primary -> LPAREN expr RPAREN
-- On SLASH_DOT reduce production primary -> LPAREN expr RPAREN
-- On SLASH reduce production primary -> LPAREN expr RPAREN
-- On SEMI reduce production primary -> LPAREN expr RPAREN
-- On RPAREN reduce production primary -> LPAREN expr RPAREN
-- On RBRACK reduce production primary -> LPAREN expr RPAREN
-- On RBRACE reduce production primary -> LPAREN expr RPAREN
-- On PLUS_DOT reduce production primary -> LPAREN expr RPAREN
-- On PLUS reduce production primary -> LPAREN expr RPAREN
-- On PIPE reduce production primary -> LPAREN expr RPAREN
-- On NL reduce production primary -> LPAREN expr RPAREN
-- On MOD reduce production primary -> LPAREN expr RPAREN
-- On MINUS_DOT reduce production primary -> LPAREN expr RPAREN
-- On MINUS reduce production primary -> LPAREN expr RPAREN
-- On LPAREN reduce production primary -> LPAREN expr RPAREN
-- On LOR reduce production primary -> LPAREN expr RPAREN
-- On LESS_LESS reduce production primary -> LPAREN expr RPAREN
-- On LESS_GREATER reduce production primary -> LPAREN expr RPAREN
-- On LESS_EQUAL reduce production primary -> LPAREN expr RPAREN
-- On LESS reduce production primary -> LPAREN expr RPAREN
-- On LBRACK reduce production primary -> LPAREN expr RPAREN
-- On LAND reduce production primary -> LPAREN expr RPAREN
-- On INT reduce production primary -> LPAREN expr RPAREN
-- On IN reduce production primary -> LPAREN expr RPAREN
-- On IDENT reduce production primary -> LPAREN expr RPAREN
-- On GREATER_EQUAL reduce production primary -> LPAREN expr RPAREN
-- On GREATER reduce production primary -> LPAREN expr RPAREN
-- On FLOAT reduce production primary -> LPAREN expr RPAREN
-- On EXCL reduce production primary -> LPAREN expr RPAREN
-- On EQUAL reduce production primary -> LPAREN expr RPAREN
-- On END reduce production primary -> LPAREN expr RPAREN
-- On ELSE reduce production primary -> LPAREN expr RPAREN
-- On DOT reduce production primary -> LPAREN expr RPAREN
-- On DOL reduce production primary -> LPAREN expr RPAREN
-- On DO reduce production primary -> LPAREN expr RPAREN
-- On CONS reduce production primary -> LPAREN expr RPAREN
-- On COMMA reduce production primary -> LPAREN expr RPAREN
-- On CHAR reduce production primary -> LPAREN expr RPAREN
-- On BOOL reduce production primary -> LPAREN expr RPAREN
-- On ATOM reduce production primary -> LPAREN expr RPAREN
-- On AST_DOT reduce production primary -> LPAREN expr RPAREN
-- On AST reduce production primary -> LPAREN expr RPAREN

State 415:
## Known stack suffix:
## expr COMMA
## LR(1) items:
rev_tuple -> expr COMMA . expr [ RPAREN COMMA ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 416
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 416:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
rev_tuple -> expr COMMA expr . [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On RPAREN reduce production rev_tuple -> expr COMMA expr
-- On COMMA reduce production rev_tuple -> expr COMMA expr

State 417:
## Known stack suffix:
## MATCH nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> MATCH nl_opt expr . WITH nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On WITH shift to state 418
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 418:
## Known stack suffix:
## MATCH nl_opt expr WITH
## LR(1) items:
expr -> MATCH nl_opt expr WITH . nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 419
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 419:
## Known stack suffix:
## MATCH nl_opt expr WITH nl_opt
## LR(1) items:
expr -> MATCH nl_opt expr WITH nl_opt . pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 420
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 420:
## Known stack suffix:
## MATCH nl_opt expr WITH nl_opt pattern_matching
## LR(1) items:
expr -> MATCH nl_opt expr WITH nl_opt pattern_matching . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## MATCH nl_opt expr WITH nl_opt pattern_matching END
## LR(1) items:
expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On UIDENT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On UARROW reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On TO reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On THEN reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On STRING reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On SLASH reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On SEMI reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On RPAREN reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On RBRACK reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On RBRACE reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On PLUS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On PIPE reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On NL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On MOD reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On MINUS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LPAREN reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LOR reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LBRACK reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LAND reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On INT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On IN reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On IDENT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On GREATER reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On FLOAT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On EXCL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On EQUAL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On END reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On ELSE reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On DOL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On DO reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On CONS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On COMMA reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On CHAR reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On BOOL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On ATOM reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On AST reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END

State 422:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> MINUS expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> MINUS expr
-- On UARROW reduce production expr -> MINUS expr
-- On TO reduce production expr -> MINUS expr
-- On THEN reduce production expr -> MINUS expr
-- On SLASH_DOT reduce production expr -> MINUS expr
-- On SLASH reduce production expr -> MINUS expr
-- On SEMI reduce production expr -> MINUS expr
-- On RPAREN reduce production expr -> MINUS expr
-- On RBRACK reduce production expr -> MINUS expr
-- On RBRACE reduce production expr -> MINUS expr
-- On PLUS_DOT reduce production expr -> MINUS expr
-- On PLUS reduce production expr -> MINUS expr
-- On PIPE reduce production expr -> MINUS expr
-- On NL reduce production expr -> MINUS expr
-- On MOD reduce production expr -> MINUS expr
-- On MINUS_DOT reduce production expr -> MINUS expr
-- On MINUS reduce production expr -> MINUS expr
-- On LOR reduce production expr -> MINUS expr
-- On LESS_GREATER reduce production expr -> MINUS expr
-- On LESS_EQUAL reduce production expr -> MINUS expr
-- On LESS reduce production expr -> MINUS expr
-- On LAND reduce production expr -> MINUS expr
-- On IN reduce production expr -> MINUS expr
-- On GREATER_EQUAL reduce production expr -> MINUS expr
-- On GREATER reduce production expr -> MINUS expr
-- On EQUAL reduce production expr -> MINUS expr
-- On END reduce production expr -> MINUS expr
-- On ELSE reduce production expr -> MINUS expr
-- On DOL reduce production expr -> MINUS expr
-- On DO reduce production expr -> MINUS expr
-- On CONS reduce production expr -> MINUS expr
-- On COMMA reduce production expr -> MINUS expr
-- On AST_DOT reduce production expr -> MINUS expr
-- On AST reduce production expr -> MINUS expr

State 423:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> NOT expr
-- On UARROW reduce production expr -> NOT expr
-- On TO reduce production expr -> NOT expr
-- On THEN reduce production expr -> NOT expr
-- On SLASH_DOT reduce production expr -> NOT expr
-- On SLASH reduce production expr -> NOT expr
-- On SEMI reduce production expr -> NOT expr
-- On RPAREN reduce production expr -> NOT expr
-- On RBRACK reduce production expr -> NOT expr
-- On RBRACE reduce production expr -> NOT expr
-- On PLUS_DOT reduce production expr -> NOT expr
-- On PLUS reduce production expr -> NOT expr
-- On PIPE reduce production expr -> NOT expr
-- On NL reduce production expr -> NOT expr
-- On MOD reduce production expr -> NOT expr
-- On MINUS_DOT reduce production expr -> NOT expr
-- On MINUS reduce production expr -> NOT expr
-- On LOR reduce production expr -> NOT expr
-- On LESS_GREATER reduce production expr -> NOT expr
-- On LESS_EQUAL reduce production expr -> NOT expr
-- On LESS reduce production expr -> NOT expr
-- On LAND reduce production expr -> NOT expr
-- On IN reduce production expr -> NOT expr
-- On GREATER_EQUAL reduce production expr -> NOT expr
-- On GREATER reduce production expr -> NOT expr
-- On EQUAL reduce production expr -> NOT expr
-- On END reduce production expr -> NOT expr
-- On ELSE reduce production expr -> NOT expr
-- On DOL reduce production expr -> NOT expr
-- On DO reduce production expr -> NOT expr
-- On CONS reduce production expr -> NOT expr
-- On COMMA reduce production expr -> NOT expr
-- On AST_DOT reduce production expr -> NOT expr
-- On AST reduce production expr -> NOT expr

State 424:
## Known stack suffix:
## PERFORM nl_opt block
## LR(1) items:
expr -> PERFORM nl_opt block . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 425
## Reductions:

State 425:
## Known stack suffix:
## PERFORM nl_opt block END
## LR(1) items:
expr -> PERFORM nl_opt block END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> PERFORM nl_opt block END
-- On UIDENT reduce production expr -> PERFORM nl_opt block END
-- On UARROW reduce production expr -> PERFORM nl_opt block END
-- On TO reduce production expr -> PERFORM nl_opt block END
-- On THEN reduce production expr -> PERFORM nl_opt block END
-- On STRING reduce production expr -> PERFORM nl_opt block END
-- On SLASH_DOT reduce production expr -> PERFORM nl_opt block END
-- On SLASH reduce production expr -> PERFORM nl_opt block END
-- On SEMI reduce production expr -> PERFORM nl_opt block END
-- On RPAREN reduce production expr -> PERFORM nl_opt block END
-- On RBRACK reduce production expr -> PERFORM nl_opt block END
-- On RBRACE reduce production expr -> PERFORM nl_opt block END
-- On PLUS_DOT reduce production expr -> PERFORM nl_opt block END
-- On PLUS reduce production expr -> PERFORM nl_opt block END
-- On PIPE reduce production expr -> PERFORM nl_opt block END
-- On NL reduce production expr -> PERFORM nl_opt block END
-- On MOD reduce production expr -> PERFORM nl_opt block END
-- On MINUS_DOT reduce production expr -> PERFORM nl_opt block END
-- On MINUS reduce production expr -> PERFORM nl_opt block END
-- On LPAREN reduce production expr -> PERFORM nl_opt block END
-- On LOR reduce production expr -> PERFORM nl_opt block END
-- On LESS_LESS reduce production expr -> PERFORM nl_opt block END
-- On LESS_GREATER reduce production expr -> PERFORM nl_opt block END
-- On LESS_EQUAL reduce production expr -> PERFORM nl_opt block END
-- On LESS reduce production expr -> PERFORM nl_opt block END
-- On LBRACK reduce production expr -> PERFORM nl_opt block END
-- On LAND reduce production expr -> PERFORM nl_opt block END
-- On INT reduce production expr -> PERFORM nl_opt block END
-- On IN reduce production expr -> PERFORM nl_opt block END
-- On IDENT reduce production expr -> PERFORM nl_opt block END
-- On GREATER_EQUAL reduce production expr -> PERFORM nl_opt block END
-- On GREATER reduce production expr -> PERFORM nl_opt block END
-- On FLOAT reduce production expr -> PERFORM nl_opt block END
-- On EXCL reduce production expr -> PERFORM nl_opt block END
-- On EQUAL reduce production expr -> PERFORM nl_opt block END
-- On END reduce production expr -> PERFORM nl_opt block END
-- On ELSE reduce production expr -> PERFORM nl_opt block END
-- On DOL reduce production expr -> PERFORM nl_opt block END
-- On DO reduce production expr -> PERFORM nl_opt block END
-- On CONS reduce production expr -> PERFORM nl_opt block END
-- On COMMA reduce production expr -> PERFORM nl_opt block END
-- On CHAR reduce production expr -> PERFORM nl_opt block END
-- On BOOL reduce production expr -> PERFORM nl_opt block END
-- On ATOM reduce production expr -> PERFORM nl_opt block END
-- On AST_DOT reduce production expr -> PERFORM nl_opt block END
-- On AST reduce production expr -> PERFORM nl_opt block END

State 426:
## Known stack suffix:
## RAISE expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> RAISE expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> RAISE expr
-- On UARROW reduce production expr -> RAISE expr
-- On TO reduce production expr -> RAISE expr
-- On THEN reduce production expr -> RAISE expr
-- On SLASH_DOT reduce production expr -> RAISE expr
-- On SLASH reduce production expr -> RAISE expr
-- On SEMI reduce production expr -> RAISE expr
-- On RPAREN reduce production expr -> RAISE expr
-- On RBRACK reduce production expr -> RAISE expr
-- On RBRACE reduce production expr -> RAISE expr
-- On PLUS_DOT reduce production expr -> RAISE expr
-- On PLUS reduce production expr -> RAISE expr
-- On PIPE reduce production expr -> RAISE expr
-- On NL reduce production expr -> RAISE expr
-- On MOD reduce production expr -> RAISE expr
-- On MINUS_DOT reduce production expr -> RAISE expr
-- On MINUS reduce production expr -> RAISE expr
-- On LOR reduce production expr -> RAISE expr
-- On LESS_GREATER reduce production expr -> RAISE expr
-- On LESS_EQUAL reduce production expr -> RAISE expr
-- On LESS reduce production expr -> RAISE expr
-- On LAND reduce production expr -> RAISE expr
-- On IN reduce production expr -> RAISE expr
-- On GREATER_EQUAL reduce production expr -> RAISE expr
-- On GREATER reduce production expr -> RAISE expr
-- On EQUAL reduce production expr -> RAISE expr
-- On END reduce production expr -> RAISE expr
-- On ELSE reduce production expr -> RAISE expr
-- On DOL reduce production expr -> RAISE expr
-- On DO reduce production expr -> RAISE expr
-- On CONS reduce production expr -> RAISE expr
-- On COMMA reduce production expr -> RAISE expr
-- On AST_DOT reduce production expr -> RAISE expr
-- On AST reduce production expr -> RAISE expr

State 427:
## Known stack suffix:
## pattern RARROW nl_opt block
## LR(1) items:
pattern_matching_elt -> pattern RARROW nl_opt block . [ PIPE END ]
## Transitions:
## Reductions:
-- On PIPE reduce production pattern_matching_elt -> pattern RARROW nl_opt block
-- On END reduce production pattern_matching_elt -> pattern RARROW nl_opt block

State 428:
## Known stack suffix:
## RECEIVE nl_opt pattern_matching
## LR(1) items:
expr -> RECEIVE nl_opt pattern_matching . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 429
## Reductions:

State 429:
## Known stack suffix:
## RECEIVE nl_opt pattern_matching END
## LR(1) items:
expr -> RECEIVE nl_opt pattern_matching END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On UIDENT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On UARROW reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On TO reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On THEN reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On STRING reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On SLASH reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On SEMI reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On RPAREN reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On RBRACK reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On RBRACE reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On PLUS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On PIPE reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On NL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On MOD reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On MINUS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LPAREN reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LOR reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LBRACK reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LAND reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On INT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On IN reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On IDENT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On GREATER reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On FLOAT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On EXCL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On EQUAL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On END reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On ELSE reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On DOL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On DO reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On CONS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On COMMA reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On CHAR reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On BOOL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On ATOM reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On AST reduce production expr -> RECEIVE nl_opt pattern_matching END

State 430:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> RETURN expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On STRING shift to state 117
-- On LPAREN shift to state 118
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production expr -> RETURN expr
-- On UARROW reduce production expr -> RETURN expr
-- On TO reduce production expr -> RETURN expr
-- On THEN reduce production expr -> RETURN expr
-- On SLASH_DOT reduce production expr -> RETURN expr
-- On SLASH reduce production expr -> RETURN expr
-- On SEMI reduce production expr -> RETURN expr
-- On RPAREN reduce production expr -> RETURN expr
-- On RBRACK reduce production expr -> RETURN expr
-- On RBRACE reduce production expr -> RETURN expr
-- On PLUS_DOT reduce production expr -> RETURN expr
-- On PLUS reduce production expr -> RETURN expr
-- On PIPE reduce production expr -> RETURN expr
-- On NL reduce production expr -> RETURN expr
-- On MOD reduce production expr -> RETURN expr
-- On MINUS_DOT reduce production expr -> RETURN expr
-- On MINUS reduce production expr -> RETURN expr
-- On LOR reduce production expr -> RETURN expr
-- On LESS_GREATER reduce production expr -> RETURN expr
-- On LESS_EQUAL reduce production expr -> RETURN expr
-- On LESS reduce production expr -> RETURN expr
-- On LAND reduce production expr -> RETURN expr
-- On IN reduce production expr -> RETURN expr
-- On GREATER_EQUAL reduce production expr -> RETURN expr
-- On GREATER reduce production expr -> RETURN expr
-- On EQUAL reduce production expr -> RETURN expr
-- On END reduce production expr -> RETURN expr
-- On ELSE reduce production expr -> RETURN expr
-- On DOL reduce production expr -> RETURN expr
-- On DO reduce production expr -> RETURN expr
-- On CONS reduce production expr -> RETURN expr
-- On COMMA reduce production expr -> RETURN expr
-- On AST_DOT reduce production expr -> RETURN expr
-- On AST reduce production expr -> RETURN expr

State 431:
## Known stack suffix:
## TRY nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> TRY nl_opt expr . nl_opt WITH nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 15
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On nl_opt shift to state 432
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production nl_opt ->

State 432:
## Known stack suffix:
## TRY nl_opt expr nl_opt
## LR(1) items:
expr -> TRY nl_opt expr nl_opt . WITH nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On WITH shift to state 433
## Reductions:

State 433:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH . nl_opt pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 434
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 434:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH nl_opt
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH nl_opt . pattern_matching END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 435
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 435:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH nl_opt pattern_matching
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching . END [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On END shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On UIDENT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On UARROW reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On TO reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On THEN reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On STRING reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On SLASH reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On SEMI reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On RPAREN reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On RBRACK reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On RBRACE reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On PLUS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On PIPE reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On NL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On MOD reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On MINUS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LPAREN reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LOR reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LBRACK reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LAND reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On INT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On IN reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On IDENT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On GREATER reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On FLOAT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On EXCL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On EQUAL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On END reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On ELSE reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On DOL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On DO reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On CONS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On COMMA reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On CHAR reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On BOOL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On ATOM reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On AST reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END

State 437:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
primary -> LPAREN expr . RPAREN [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOT DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On RPAREN shift to state 414
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 438:
## Known stack suffix:
## UIDENT simple_expr
## LR(1) items:
expr -> UIDENT simple_expr . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> UIDENT simple_expr
-- On UIDENT reduce production expr -> UIDENT simple_expr
-- On UARROW reduce production expr -> UIDENT simple_expr
-- On TO reduce production expr -> UIDENT simple_expr
-- On THEN reduce production expr -> UIDENT simple_expr
-- On STRING reduce production expr -> UIDENT simple_expr
-- On SLASH_DOT reduce production expr -> UIDENT simple_expr
-- On SLASH reduce production expr -> UIDENT simple_expr
-- On SEMI reduce production expr -> UIDENT simple_expr
-- On RPAREN reduce production expr -> UIDENT simple_expr
-- On RBRACK reduce production expr -> UIDENT simple_expr
-- On RBRACE reduce production expr -> UIDENT simple_expr
-- On PLUS_DOT reduce production expr -> UIDENT simple_expr
-- On PLUS reduce production expr -> UIDENT simple_expr
-- On PIPE reduce production expr -> UIDENT simple_expr
-- On NL reduce production expr -> UIDENT simple_expr
-- On MOD reduce production expr -> UIDENT simple_expr
-- On MINUS_DOT reduce production expr -> UIDENT simple_expr
-- On MINUS reduce production expr -> UIDENT simple_expr
-- On LPAREN reduce production expr -> UIDENT simple_expr
-- On LOR reduce production expr -> UIDENT simple_expr
-- On LESS_LESS reduce production expr -> UIDENT simple_expr
-- On LESS_GREATER reduce production expr -> UIDENT simple_expr
-- On LESS_EQUAL reduce production expr -> UIDENT simple_expr
-- On LESS reduce production expr -> UIDENT simple_expr
-- On LBRACK reduce production expr -> UIDENT simple_expr
-- On LAND reduce production expr -> UIDENT simple_expr
-- On INT reduce production expr -> UIDENT simple_expr
-- On IN reduce production expr -> UIDENT simple_expr
-- On IDENT reduce production expr -> UIDENT simple_expr
-- On GREATER_EQUAL reduce production expr -> UIDENT simple_expr
-- On GREATER reduce production expr -> UIDENT simple_expr
-- On FLOAT reduce production expr -> UIDENT simple_expr
-- On EXCL reduce production expr -> UIDENT simple_expr
-- On EQUAL reduce production expr -> UIDENT simple_expr
-- On END reduce production expr -> UIDENT simple_expr
-- On ELSE reduce production expr -> UIDENT simple_expr
-- On DOL reduce production expr -> UIDENT simple_expr
-- On DO reduce production expr -> UIDENT simple_expr
-- On CONS reduce production expr -> UIDENT simple_expr
-- On COMMA reduce production expr -> UIDENT simple_expr
-- On CHAR reduce production expr -> UIDENT simple_expr
-- On BOOL reduce production expr -> UIDENT simple_expr
-- On ATOM reduce production expr -> UIDENT simple_expr
-- On AST_DOT reduce production expr -> UIDENT simple_expr
-- On AST reduce production expr -> UIDENT simple_expr

State 439:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> VAR IDENT EQUAL nl_opt expr . term block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On SEMI shift to state 440
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 441
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On term shift to state 442
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 440:
## Known stack suffix:
## SEMI
## LR(1) items:
term -> SEMI . [ VAR UIDENT TRY STRING RETURN RECEIVE RAISE PERFORM NOT MINUS MATCH LPAREN LESS_LESS LBRACK LBRACE INT IF IDENT FUN FOR FLOAT EXCL DEF CHAR BOOL ATOM ASSERT ]
## Transitions:
## Reductions:
-- On VAR reduce production term -> SEMI
-- On UIDENT reduce production term -> SEMI
-- On TRY reduce production term -> SEMI
-- On STRING reduce production term -> SEMI
-- On RETURN reduce production term -> SEMI
-- On RECEIVE reduce production term -> SEMI
-- On RAISE reduce production term -> SEMI
-- On PERFORM reduce production term -> SEMI
-- On NOT reduce production term -> SEMI
-- On MINUS reduce production term -> SEMI
-- On MATCH reduce production term -> SEMI
-- On LPAREN reduce production term -> SEMI
-- On LESS_LESS reduce production term -> SEMI
-- On LBRACK reduce production term -> SEMI
-- On LBRACE reduce production term -> SEMI
-- On INT reduce production term -> SEMI
-- On IF reduce production term -> SEMI
-- On IDENT reduce production term -> SEMI
-- On FUN reduce production term -> SEMI
-- On FOR reduce production term -> SEMI
-- On FLOAT reduce production term -> SEMI
-- On EXCL reduce production term -> SEMI
-- On DEF reduce production term -> SEMI
-- On CHAR reduce production term -> SEMI
-- On BOOL reduce production term -> SEMI
-- On ATOM reduce production term -> SEMI
-- On ASSERT reduce production term -> SEMI

State 441:
## Known stack suffix:
## NL
## LR(1) items:
term -> NL . [ VAR UIDENT TRY STRING RETURN RECEIVE RAISE PERFORM NOT MINUS MATCH LPAREN LESS_LESS LBRACK LBRACE INT IF IDENT FUN FOR FLOAT EXCL DEF CHAR BOOL ATOM ASSERT ]
## Transitions:
## Reductions:
-- On VAR reduce production term -> NL
-- On UIDENT reduce production term -> NL
-- On TRY reduce production term -> NL
-- On STRING reduce production term -> NL
-- On RETURN reduce production term -> NL
-- On RECEIVE reduce production term -> NL
-- On RAISE reduce production term -> NL
-- On PERFORM reduce production term -> NL
-- On NOT reduce production term -> NL
-- On MINUS reduce production term -> NL
-- On MATCH reduce production term -> NL
-- On LPAREN reduce production term -> NL
-- On LESS_LESS reduce production term -> NL
-- On LBRACK reduce production term -> NL
-- On LBRACE reduce production term -> NL
-- On INT reduce production term -> NL
-- On IF reduce production term -> NL
-- On IDENT reduce production term -> NL
-- On FUN reduce production term -> NL
-- On FOR reduce production term -> NL
-- On FLOAT reduce production term -> NL
-- On EXCL reduce production term -> NL
-- On DEF reduce production term -> NL
-- On CHAR reduce production term -> NL
-- On BOOL reduce production term -> NL
-- On ATOM reduce production term -> NL
-- On ASSERT reduce production term -> NL

State 442:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt expr term
## LR(1) items:
expr -> VAR IDENT EQUAL nl_opt expr term . block [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 443
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 443:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt expr term block
## LR(1) items:
expr -> VAR IDENT EQUAL nl_opt expr term block . [ WITH UIDENT UARROW TO THEN STRING SLASH_DOT SLASH SEMI RPAREN RBRACK RBRACE PLUS_DOT PLUS PIPE NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IN IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL END ELSE DOL DO CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
## Reductions:
-- On WITH reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On UIDENT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On UARROW reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On TO reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On THEN reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On STRING reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On SLASH_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On SLASH reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On SEMI reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On RPAREN reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On RBRACK reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On RBRACE reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On PLUS_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On PLUS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On PIPE reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On NL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On MOD reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On MINUS_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On MINUS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LPAREN reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LOR reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS_LESS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS_GREATER reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS_EQUAL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LBRACK reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LAND reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On INT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On IN reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On IDENT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On GREATER_EQUAL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On GREATER reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On FLOAT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On EXCL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On EQUAL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On END reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On ELSE reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On DOL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On DO reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On CONS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On COMMA reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On CHAR reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On BOOL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On ATOM reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On AST_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On AST reduce production expr -> VAR IDENT EQUAL nl_opt expr term block

State 444:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> VAR IDENT EQUAL nl_opt expr . term block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On SEMI shift to state 440
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 441
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On term shift to state 445
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 445:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt expr term
## LR(1) items:
expr -> VAR IDENT EQUAL nl_opt expr term . block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On stmt shift to state 627
-- On simple_expr shift to state 564
-- On rev_stmts shift to state 628
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 631
-- On block shift to state 649
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 446:
## Known stack suffix:
## UIDENT
## LR(1) items:
expr -> UIDENT . simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
primary -> UIDENT . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_module_path -> UIDENT . DOT [ UIDENT IDENT ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 484
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
## Reductions:
-- On error reduce production primary -> UIDENT
-- On UARROW reduce production primary -> UIDENT
-- On TYPE reduce production primary -> UIDENT
-- On TOPVAR reduce production primary -> UIDENT
-- On TOPDEF reduce production primary -> UIDENT
-- On SLASH_DOT reduce production primary -> UIDENT
-- On SLASH reduce production primary -> UIDENT
-- On SEMI reduce production primary -> UIDENT
-- On PLUS_DOT reduce production primary -> UIDENT
-- On PLUS reduce production primary -> UIDENT
-- On NL reduce production primary -> UIDENT
-- On MOD reduce production primary -> UIDENT
-- On MINUS_DOT reduce production primary -> UIDENT
-- On MINUS reduce production primary -> UIDENT
-- On LOR reduce production primary -> UIDENT
-- On LESS_GREATER reduce production primary -> UIDENT
-- On LESS_EQUAL reduce production primary -> UIDENT
-- On LESS reduce production primary -> UIDENT
-- On LAND reduce production primary -> UIDENT
-- On GREATER_EQUAL reduce production primary -> UIDENT
-- On GREATER reduce production primary -> UIDENT
-- On EXTERNAL reduce production primary -> UIDENT
-- On EXCEPTION reduce production primary -> UIDENT
-- On EQUAL reduce production primary -> UIDENT
-- On EOF reduce production primary -> UIDENT
-- On DOT reduce production primary -> UIDENT
-- On DOL reduce production primary -> UIDENT
-- On CONS reduce production primary -> UIDENT
-- On AST_DOT reduce production primary -> UIDENT
-- On AST reduce production primary -> UIDENT
-- On AND reduce production primary -> UIDENT

State 447:
## Known stack suffix:
## UIDENT
## LR(1) items:
primary -> UIDENT . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_module_path -> UIDENT . DOT [ UIDENT IDENT ]
## Transitions:
## Reductions:
-- On error reduce production primary -> UIDENT
-- On UIDENT reduce production primary -> UIDENT
-- On UARROW reduce production primary -> UIDENT
-- On TYPE reduce production primary -> UIDENT
-- On TOPVAR reduce production primary -> UIDENT
-- On TOPDEF reduce production primary -> UIDENT
-- On STRING reduce production primary -> UIDENT
-- On SLASH_DOT reduce production primary -> UIDENT
-- On SLASH reduce production primary -> UIDENT
-- On SEMI reduce production primary -> UIDENT
-- On PLUS_DOT reduce production primary -> UIDENT
-- On PLUS reduce production primary -> UIDENT
-- On NL reduce production primary -> UIDENT
-- On MOD reduce production primary -> UIDENT
-- On MINUS_DOT reduce production primary -> UIDENT
-- On MINUS reduce production primary -> UIDENT
-- On LPAREN reduce production primary -> UIDENT
-- On LOR reduce production primary -> UIDENT
-- On LESS_LESS reduce production primary -> UIDENT
-- On LESS_GREATER reduce production primary -> UIDENT
-- On LESS_EQUAL reduce production primary -> UIDENT
-- On LESS reduce production primary -> UIDENT
-- On LBRACK reduce production primary -> UIDENT
-- On LAND reduce production primary -> UIDENT
-- On INT reduce production primary -> UIDENT
-- On IDENT reduce production primary -> UIDENT
-- On GREATER_EQUAL reduce production primary -> UIDENT
-- On GREATER reduce production primary -> UIDENT
-- On FLOAT reduce production primary -> UIDENT
-- On EXTERNAL reduce production primary -> UIDENT
-- On EXCL reduce production primary -> UIDENT
-- On EXCEPTION reduce production primary -> UIDENT
-- On EQUAL reduce production primary -> UIDENT
-- On EOF reduce production primary -> UIDENT
-- On DOT reduce production primary -> UIDENT
-- On DOL reduce production primary -> UIDENT
-- On DO reduce production primary -> UIDENT
-- On CONS reduce production primary -> UIDENT
-- On CHAR reduce production primary -> UIDENT
-- On BOOL reduce production primary -> UIDENT
-- On ATOM reduce production primary -> UIDENT
-- On AST_DOT reduce production primary -> UIDENT
-- On AST reduce production primary -> UIDENT
-- On AND reduce production primary -> UIDENT

State 448:
## Known stack suffix:
## STRING
## LR(1) items:
primary -> STRING . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> STRING
-- On UIDENT reduce production primary -> STRING
-- On UARROW reduce production primary -> STRING
-- On TYPE reduce production primary -> STRING
-- On TOPVAR reduce production primary -> STRING
-- On TOPDEF reduce production primary -> STRING
-- On STRING reduce production primary -> STRING
-- On SLASH_DOT reduce production primary -> STRING
-- On SLASH reduce production primary -> STRING
-- On SEMI reduce production primary -> STRING
-- On PLUS_DOT reduce production primary -> STRING
-- On PLUS reduce production primary -> STRING
-- On NL reduce production primary -> STRING
-- On MOD reduce production primary -> STRING
-- On MINUS_DOT reduce production primary -> STRING
-- On MINUS reduce production primary -> STRING
-- On LPAREN reduce production primary -> STRING
-- On LOR reduce production primary -> STRING
-- On LESS_LESS reduce production primary -> STRING
-- On LESS_GREATER reduce production primary -> STRING
-- On LESS_EQUAL reduce production primary -> STRING
-- On LESS reduce production primary -> STRING
-- On LBRACK reduce production primary -> STRING
-- On LAND reduce production primary -> STRING
-- On INT reduce production primary -> STRING
-- On IDENT reduce production primary -> STRING
-- On GREATER_EQUAL reduce production primary -> STRING
-- On GREATER reduce production primary -> STRING
-- On FLOAT reduce production primary -> STRING
-- On EXTERNAL reduce production primary -> STRING
-- On EXCL reduce production primary -> STRING
-- On EXCEPTION reduce production primary -> STRING
-- On EQUAL reduce production primary -> STRING
-- On EOF reduce production primary -> STRING
-- On DOT reduce production primary -> STRING
-- On DOL reduce production primary -> STRING
-- On DO reduce production primary -> STRING
-- On CONS reduce production primary -> STRING
-- On CHAR reduce production primary -> STRING
-- On BOOL reduce production primary -> STRING
-- On ATOM reduce production primary -> STRING
-- On AST_DOT reduce production primary -> STRING
-- On AST reduce production primary -> STRING
-- On AND reduce production primary -> STRING

State 449:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary -> LPAREN . expr RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
primary -> LPAREN . RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RPAREN shift to state 450
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 451
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 450:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
primary -> LPAREN RPAREN . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> LPAREN RPAREN
-- On UIDENT reduce production primary -> LPAREN RPAREN
-- On UARROW reduce production primary -> LPAREN RPAREN
-- On TYPE reduce production primary -> LPAREN RPAREN
-- On TOPVAR reduce production primary -> LPAREN RPAREN
-- On TOPDEF reduce production primary -> LPAREN RPAREN
-- On STRING reduce production primary -> LPAREN RPAREN
-- On SLASH_DOT reduce production primary -> LPAREN RPAREN
-- On SLASH reduce production primary -> LPAREN RPAREN
-- On SEMI reduce production primary -> LPAREN RPAREN
-- On PLUS_DOT reduce production primary -> LPAREN RPAREN
-- On PLUS reduce production primary -> LPAREN RPAREN
-- On NL reduce production primary -> LPAREN RPAREN
-- On MOD reduce production primary -> LPAREN RPAREN
-- On MINUS_DOT reduce production primary -> LPAREN RPAREN
-- On MINUS reduce production primary -> LPAREN RPAREN
-- On LPAREN reduce production primary -> LPAREN RPAREN
-- On LOR reduce production primary -> LPAREN RPAREN
-- On LESS_LESS reduce production primary -> LPAREN RPAREN
-- On LESS_GREATER reduce production primary -> LPAREN RPAREN
-- On LESS_EQUAL reduce production primary -> LPAREN RPAREN
-- On LESS reduce production primary -> LPAREN RPAREN
-- On LBRACK reduce production primary -> LPAREN RPAREN
-- On LAND reduce production primary -> LPAREN RPAREN
-- On INT reduce production primary -> LPAREN RPAREN
-- On IDENT reduce production primary -> LPAREN RPAREN
-- On GREATER_EQUAL reduce production primary -> LPAREN RPAREN
-- On GREATER reduce production primary -> LPAREN RPAREN
-- On FLOAT reduce production primary -> LPAREN RPAREN
-- On EXTERNAL reduce production primary -> LPAREN RPAREN
-- On EXCL reduce production primary -> LPAREN RPAREN
-- On EXCEPTION reduce production primary -> LPAREN RPAREN
-- On EQUAL reduce production primary -> LPAREN RPAREN
-- On EOF reduce production primary -> LPAREN RPAREN
-- On DOT reduce production primary -> LPAREN RPAREN
-- On DOL reduce production primary -> LPAREN RPAREN
-- On DO reduce production primary -> LPAREN RPAREN
-- On CONS reduce production primary -> LPAREN RPAREN
-- On CHAR reduce production primary -> LPAREN RPAREN
-- On BOOL reduce production primary -> LPAREN RPAREN
-- On ATOM reduce production primary -> LPAREN RPAREN
-- On AST_DOT reduce production primary -> LPAREN RPAREN
-- On AST reduce production primary -> LPAREN RPAREN
-- On AND reduce production primary -> LPAREN RPAREN

State 451:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
primary -> LPAREN expr . RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On RPAREN shift to state 452
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 452:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
primary -> LPAREN expr RPAREN . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> LPAREN expr RPAREN
-- On UIDENT reduce production primary -> LPAREN expr RPAREN
-- On UARROW reduce production primary -> LPAREN expr RPAREN
-- On TYPE reduce production primary -> LPAREN expr RPAREN
-- On TOPVAR reduce production primary -> LPAREN expr RPAREN
-- On TOPDEF reduce production primary -> LPAREN expr RPAREN
-- On STRING reduce production primary -> LPAREN expr RPAREN
-- On SLASH_DOT reduce production primary -> LPAREN expr RPAREN
-- On SLASH reduce production primary -> LPAREN expr RPAREN
-- On SEMI reduce production primary -> LPAREN expr RPAREN
-- On PLUS_DOT reduce production primary -> LPAREN expr RPAREN
-- On PLUS reduce production primary -> LPAREN expr RPAREN
-- On NL reduce production primary -> LPAREN expr RPAREN
-- On MOD reduce production primary -> LPAREN expr RPAREN
-- On MINUS_DOT reduce production primary -> LPAREN expr RPAREN
-- On MINUS reduce production primary -> LPAREN expr RPAREN
-- On LPAREN reduce production primary -> LPAREN expr RPAREN
-- On LOR reduce production primary -> LPAREN expr RPAREN
-- On LESS_LESS reduce production primary -> LPAREN expr RPAREN
-- On LESS_GREATER reduce production primary -> LPAREN expr RPAREN
-- On LESS_EQUAL reduce production primary -> LPAREN expr RPAREN
-- On LESS reduce production primary -> LPAREN expr RPAREN
-- On LBRACK reduce production primary -> LPAREN expr RPAREN
-- On LAND reduce production primary -> LPAREN expr RPAREN
-- On INT reduce production primary -> LPAREN expr RPAREN
-- On IDENT reduce production primary -> LPAREN expr RPAREN
-- On GREATER_EQUAL reduce production primary -> LPAREN expr RPAREN
-- On GREATER reduce production primary -> LPAREN expr RPAREN
-- On FLOAT reduce production primary -> LPAREN expr RPAREN
-- On EXTERNAL reduce production primary -> LPAREN expr RPAREN
-- On EXCL reduce production primary -> LPAREN expr RPAREN
-- On EXCEPTION reduce production primary -> LPAREN expr RPAREN
-- On EQUAL reduce production primary -> LPAREN expr RPAREN
-- On EOF reduce production primary -> LPAREN expr RPAREN
-- On DOT reduce production primary -> LPAREN expr RPAREN
-- On DOL reduce production primary -> LPAREN expr RPAREN
-- On DO reduce production primary -> LPAREN expr RPAREN
-- On CONS reduce production primary -> LPAREN expr RPAREN
-- On CHAR reduce production primary -> LPAREN expr RPAREN
-- On BOOL reduce production primary -> LPAREN expr RPAREN
-- On ATOM reduce production primary -> LPAREN expr RPAREN
-- On AST_DOT reduce production primary -> LPAREN expr RPAREN
-- On AST reduce production primary -> LPAREN expr RPAREN
-- On AND reduce production primary -> LPAREN expr RPAREN

State 453:
## Known stack suffix:
## LESS_LESS
## LR(1) items:
primary -> LESS_LESS . bitstring GREATER_GREATER [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On STRING shift to state 196
-- On INT shift to state 197
-- On IDENT shift to state 198
-- On FLOAT shift to state 199
-- On segment shift to state 200
-- On rev_bitstring shift to state 201
-- On bitstring shift to state 454
-- On bits_value shift to state 204
## Reductions:
-- On GREATER_GREATER reduce production bitstring ->

State 454:
## Known stack suffix:
## LESS_LESS bitstring
## LR(1) items:
primary -> LESS_LESS bitstring . GREATER_GREATER [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On GREATER_GREATER shift to state 455
## Reductions:

State 455:
## Known stack suffix:
## LESS_LESS bitstring GREATER_GREATER
## LR(1) items:
primary -> LESS_LESS bitstring GREATER_GREATER . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On UIDENT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On UARROW reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On TYPE reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On TOPVAR reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On TOPDEF reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On STRING reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On SLASH_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On SLASH reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On SEMI reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On PLUS_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On PLUS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On NL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On MOD reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On MINUS_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On MINUS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LPAREN reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LOR reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS_LESS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS_GREATER reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS_EQUAL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LESS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LBRACK reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On LAND reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On INT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On IDENT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On GREATER_EQUAL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On GREATER reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On FLOAT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On EXTERNAL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On EXCL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On EXCEPTION reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On EQUAL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On EOF reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On DOL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On DO reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On CONS reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On CHAR reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On BOOL reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On ATOM reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On AST_DOT reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On AST reduce production primary -> LESS_LESS bitstring GREATER_GREATER
-- On AND reduce production primary -> LESS_LESS bitstring GREATER_GREATER

State 456:
## Known stack suffix:
## LBRACK
## LR(1) items:
primary -> LBRACK . list_ RBRACK [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
primary -> LBRACK . PIPE list_ PIPE RBRACK [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PIPE shift to state 457
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On rev_list_elts shift to state 400
-- On primary shift to state 249
-- On module_path shift to state 262
-- On list_ shift to state 461
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 406
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:
-- On RBRACK reduce production list_ ->

State 457:
## Known stack suffix:
## LBRACK PIPE
## LR(1) items:
primary -> LBRACK PIPE . list_ PIPE RBRACK [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On rev_list_elts shift to state 400
-- On primary shift to state 249
-- On module_path shift to state 262
-- On list_ shift to state 458
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 406
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:
-- On PIPE reduce production list_ ->

State 458:
## Known stack suffix:
## LBRACK PIPE list_
## LR(1) items:
primary -> LBRACK PIPE list_ . PIPE RBRACK [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On PIPE shift to state 459
## Reductions:

State 459:
## Known stack suffix:
## LBRACK PIPE list_ PIPE
## LR(1) items:
primary -> LBRACK PIPE list_ PIPE . RBRACK [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On RBRACK shift to state 460
## Reductions:

State 460:
## Known stack suffix:
## LBRACK PIPE list_ PIPE RBRACK
## LR(1) items:
primary -> LBRACK PIPE list_ PIPE RBRACK . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On UIDENT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On UARROW reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On TYPE reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On TOPVAR reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On TOPDEF reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On STRING reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On SLASH_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On SLASH reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On SEMI reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On PLUS_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On PLUS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On NL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On MOD reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On MINUS_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On MINUS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LPAREN reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LOR reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS_LESS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS_GREATER reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS_EQUAL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LESS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LBRACK reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On LAND reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On INT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On IDENT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On GREATER_EQUAL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On GREATER reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On FLOAT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On EXTERNAL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On EXCL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On EXCEPTION reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On EQUAL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On EOF reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On DOL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On DO reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On CONS reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On CHAR reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On BOOL reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On ATOM reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On AST_DOT reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On AST reduce production primary -> LBRACK PIPE list_ PIPE RBRACK
-- On AND reduce production primary -> LBRACK PIPE list_ PIPE RBRACK

State 461:
## Known stack suffix:
## LBRACK list_
## LR(1) items:
primary -> LBRACK list_ . RBRACK [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On RBRACK shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## LBRACK list_ RBRACK
## LR(1) items:
primary -> LBRACK list_ RBRACK . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> LBRACK list_ RBRACK
-- On UIDENT reduce production primary -> LBRACK list_ RBRACK
-- On UARROW reduce production primary -> LBRACK list_ RBRACK
-- On TYPE reduce production primary -> LBRACK list_ RBRACK
-- On TOPVAR reduce production primary -> LBRACK list_ RBRACK
-- On TOPDEF reduce production primary -> LBRACK list_ RBRACK
-- On STRING reduce production primary -> LBRACK list_ RBRACK
-- On SLASH_DOT reduce production primary -> LBRACK list_ RBRACK
-- On SLASH reduce production primary -> LBRACK list_ RBRACK
-- On SEMI reduce production primary -> LBRACK list_ RBRACK
-- On PLUS_DOT reduce production primary -> LBRACK list_ RBRACK
-- On PLUS reduce production primary -> LBRACK list_ RBRACK
-- On NL reduce production primary -> LBRACK list_ RBRACK
-- On MOD reduce production primary -> LBRACK list_ RBRACK
-- On MINUS_DOT reduce production primary -> LBRACK list_ RBRACK
-- On MINUS reduce production primary -> LBRACK list_ RBRACK
-- On LPAREN reduce production primary -> LBRACK list_ RBRACK
-- On LOR reduce production primary -> LBRACK list_ RBRACK
-- On LESS_LESS reduce production primary -> LBRACK list_ RBRACK
-- On LESS_GREATER reduce production primary -> LBRACK list_ RBRACK
-- On LESS_EQUAL reduce production primary -> LBRACK list_ RBRACK
-- On LESS reduce production primary -> LBRACK list_ RBRACK
-- On LBRACK reduce production primary -> LBRACK list_ RBRACK
-- On LAND reduce production primary -> LBRACK list_ RBRACK
-- On INT reduce production primary -> LBRACK list_ RBRACK
-- On IDENT reduce production primary -> LBRACK list_ RBRACK
-- On GREATER_EQUAL reduce production primary -> LBRACK list_ RBRACK
-- On GREATER reduce production primary -> LBRACK list_ RBRACK
-- On FLOAT reduce production primary -> LBRACK list_ RBRACK
-- On EXTERNAL reduce production primary -> LBRACK list_ RBRACK
-- On EXCL reduce production primary -> LBRACK list_ RBRACK
-- On EXCEPTION reduce production primary -> LBRACK list_ RBRACK
-- On EQUAL reduce production primary -> LBRACK list_ RBRACK
-- On EOF reduce production primary -> LBRACK list_ RBRACK
-- On DOT reduce production primary -> LBRACK list_ RBRACK
-- On DOL reduce production primary -> LBRACK list_ RBRACK
-- On DO reduce production primary -> LBRACK list_ RBRACK
-- On CONS reduce production primary -> LBRACK list_ RBRACK
-- On CHAR reduce production primary -> LBRACK list_ RBRACK
-- On BOOL reduce production primary -> LBRACK list_ RBRACK
-- On ATOM reduce production primary -> LBRACK list_ RBRACK
-- On AST_DOT reduce production primary -> LBRACK list_ RBRACK
-- On AST reduce production primary -> LBRACK list_ RBRACK
-- On AND reduce production primary -> LBRACK list_ RBRACK

State 463:
## Known stack suffix:
## INT
## LR(1) items:
primary -> INT . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> INT
-- On UIDENT reduce production primary -> INT
-- On UARROW reduce production primary -> INT
-- On TYPE reduce production primary -> INT
-- On TOPVAR reduce production primary -> INT
-- On TOPDEF reduce production primary -> INT
-- On STRING reduce production primary -> INT
-- On SLASH_DOT reduce production primary -> INT
-- On SLASH reduce production primary -> INT
-- On SEMI reduce production primary -> INT
-- On PLUS_DOT reduce production primary -> INT
-- On PLUS reduce production primary -> INT
-- On NL reduce production primary -> INT
-- On MOD reduce production primary -> INT
-- On MINUS_DOT reduce production primary -> INT
-- On MINUS reduce production primary -> INT
-- On LPAREN reduce production primary -> INT
-- On LOR reduce production primary -> INT
-- On LESS_LESS reduce production primary -> INT
-- On LESS_GREATER reduce production primary -> INT
-- On LESS_EQUAL reduce production primary -> INT
-- On LESS reduce production primary -> INT
-- On LBRACK reduce production primary -> INT
-- On LAND reduce production primary -> INT
-- On INT reduce production primary -> INT
-- On IDENT reduce production primary -> INT
-- On GREATER_EQUAL reduce production primary -> INT
-- On GREATER reduce production primary -> INT
-- On FLOAT reduce production primary -> INT
-- On EXTERNAL reduce production primary -> INT
-- On EXCL reduce production primary -> INT
-- On EXCEPTION reduce production primary -> INT
-- On EQUAL reduce production primary -> INT
-- On EOF reduce production primary -> INT
-- On DOT reduce production primary -> INT
-- On DOL reduce production primary -> INT
-- On DO reduce production primary -> INT
-- On CONS reduce production primary -> INT
-- On CHAR reduce production primary -> INT
-- On BOOL reduce production primary -> INT
-- On ATOM reduce production primary -> INT
-- On AST_DOT reduce production primary -> INT
-- On AST reduce production primary -> INT
-- On AND reduce production primary -> INT

State 464:
## Known stack suffix:
## IDENT
## LR(1) items:
value_name -> IDENT . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
## Transitions:
## Reductions:
-- On error reduce production value_name -> IDENT
-- On UIDENT reduce production value_name -> IDENT
-- On UARROW reduce production value_name -> IDENT
-- On TYPE reduce production value_name -> IDENT
-- On TOPVAR reduce production value_name -> IDENT
-- On TOPDEF reduce production value_name -> IDENT
-- On STRING reduce production value_name -> IDENT
-- On SLASH_DOT reduce production value_name -> IDENT
-- On SLASH reduce production value_name -> IDENT
-- On SEMI reduce production value_name -> IDENT
-- On PLUS_DOT reduce production value_name -> IDENT
-- On PLUS reduce production value_name -> IDENT
-- On NL reduce production value_name -> IDENT
-- On MOD reduce production value_name -> IDENT
-- On MINUS_DOT reduce production value_name -> IDENT
-- On MINUS reduce production value_name -> IDENT
-- On LPAREN reduce production value_name -> IDENT
-- On LOR reduce production value_name -> IDENT
-- On LESS_LESS reduce production value_name -> IDENT
-- On LESS_GREATER reduce production value_name -> IDENT
-- On LESS_EQUAL reduce production value_name -> IDENT
-- On LESS reduce production value_name -> IDENT
-- On LBRACK reduce production value_name -> IDENT
-- On LARROW reduce production value_name -> IDENT
-- On LAND reduce production value_name -> IDENT
-- On INT reduce production value_name -> IDENT
-- On IDENT reduce production value_name -> IDENT
-- On GREATER_EQUAL reduce production value_name -> IDENT
-- On GREATER reduce production value_name -> IDENT
-- On FLOAT reduce production value_name -> IDENT
-- On EXTERNAL reduce production value_name -> IDENT
-- On EXCL reduce production value_name -> IDENT
-- On EXCEPTION reduce production value_name -> IDENT
-- On EQUAL reduce production value_name -> IDENT
-- On EOF reduce production value_name -> IDENT
-- On DOT reduce production value_name -> IDENT
-- On DOL reduce production value_name -> IDENT
-- On DO reduce production value_name -> IDENT
-- On CONS reduce production value_name -> IDENT
-- On CHAR reduce production value_name -> IDENT
-- On BOOL reduce production value_name -> IDENT
-- On ATOM reduce production value_name -> IDENT
-- On AST_DOT reduce production value_name -> IDENT
-- On AST reduce production value_name -> IDENT
-- On ASSIGN reduce production value_name -> IDENT
-- On AND reduce production value_name -> IDENT

State 465:
## Known stack suffix:
## FLOAT
## LR(1) items:
primary -> FLOAT . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> FLOAT
-- On UIDENT reduce production primary -> FLOAT
-- On UARROW reduce production primary -> FLOAT
-- On TYPE reduce production primary -> FLOAT
-- On TOPVAR reduce production primary -> FLOAT
-- On TOPDEF reduce production primary -> FLOAT
-- On STRING reduce production primary -> FLOAT
-- On SLASH_DOT reduce production primary -> FLOAT
-- On SLASH reduce production primary -> FLOAT
-- On SEMI reduce production primary -> FLOAT
-- On PLUS_DOT reduce production primary -> FLOAT
-- On PLUS reduce production primary -> FLOAT
-- On NL reduce production primary -> FLOAT
-- On MOD reduce production primary -> FLOAT
-- On MINUS_DOT reduce production primary -> FLOAT
-- On MINUS reduce production primary -> FLOAT
-- On LPAREN reduce production primary -> FLOAT
-- On LOR reduce production primary -> FLOAT
-- On LESS_LESS reduce production primary -> FLOAT
-- On LESS_GREATER reduce production primary -> FLOAT
-- On LESS_EQUAL reduce production primary -> FLOAT
-- On LESS reduce production primary -> FLOAT
-- On LBRACK reduce production primary -> FLOAT
-- On LAND reduce production primary -> FLOAT
-- On INT reduce production primary -> FLOAT
-- On IDENT reduce production primary -> FLOAT
-- On GREATER_EQUAL reduce production primary -> FLOAT
-- On GREATER reduce production primary -> FLOAT
-- On FLOAT reduce production primary -> FLOAT
-- On EXTERNAL reduce production primary -> FLOAT
-- On EXCL reduce production primary -> FLOAT
-- On EXCEPTION reduce production primary -> FLOAT
-- On EQUAL reduce production primary -> FLOAT
-- On EOF reduce production primary -> FLOAT
-- On DOT reduce production primary -> FLOAT
-- On DOL reduce production primary -> FLOAT
-- On DO reduce production primary -> FLOAT
-- On CONS reduce production primary -> FLOAT
-- On CHAR reduce production primary -> FLOAT
-- On BOOL reduce production primary -> FLOAT
-- On ATOM reduce production primary -> FLOAT
-- On AST_DOT reduce production primary -> FLOAT
-- On AST reduce production primary -> FLOAT
-- On AND reduce production primary -> FLOAT

State 466:
## Known stack suffix:
## EXCL
## LR(1) items:
simple_expr -> EXCL . simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 471
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
## Reductions:

State 467:
## Known stack suffix:
## CHAR
## LR(1) items:
primary -> CHAR . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> CHAR
-- On UIDENT reduce production primary -> CHAR
-- On UARROW reduce production primary -> CHAR
-- On TYPE reduce production primary -> CHAR
-- On TOPVAR reduce production primary -> CHAR
-- On TOPDEF reduce production primary -> CHAR
-- On STRING reduce production primary -> CHAR
-- On SLASH_DOT reduce production primary -> CHAR
-- On SLASH reduce production primary -> CHAR
-- On SEMI reduce production primary -> CHAR
-- On PLUS_DOT reduce production primary -> CHAR
-- On PLUS reduce production primary -> CHAR
-- On NL reduce production primary -> CHAR
-- On MOD reduce production primary -> CHAR
-- On MINUS_DOT reduce production primary -> CHAR
-- On MINUS reduce production primary -> CHAR
-- On LPAREN reduce production primary -> CHAR
-- On LOR reduce production primary -> CHAR
-- On LESS_LESS reduce production primary -> CHAR
-- On LESS_GREATER reduce production primary -> CHAR
-- On LESS_EQUAL reduce production primary -> CHAR
-- On LESS reduce production primary -> CHAR
-- On LBRACK reduce production primary -> CHAR
-- On LAND reduce production primary -> CHAR
-- On INT reduce production primary -> CHAR
-- On IDENT reduce production primary -> CHAR
-- On GREATER_EQUAL reduce production primary -> CHAR
-- On GREATER reduce production primary -> CHAR
-- On FLOAT reduce production primary -> CHAR
-- On EXTERNAL reduce production primary -> CHAR
-- On EXCL reduce production primary -> CHAR
-- On EXCEPTION reduce production primary -> CHAR
-- On EQUAL reduce production primary -> CHAR
-- On EOF reduce production primary -> CHAR
-- On DOT reduce production primary -> CHAR
-- On DOL reduce production primary -> CHAR
-- On DO reduce production primary -> CHAR
-- On CONS reduce production primary -> CHAR
-- On CHAR reduce production primary -> CHAR
-- On BOOL reduce production primary -> CHAR
-- On ATOM reduce production primary -> CHAR
-- On AST_DOT reduce production primary -> CHAR
-- On AST reduce production primary -> CHAR
-- On AND reduce production primary -> CHAR

State 468:
## Known stack suffix:
## BOOL
## LR(1) items:
primary -> BOOL . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> BOOL
-- On UIDENT reduce production primary -> BOOL
-- On UARROW reduce production primary -> BOOL
-- On TYPE reduce production primary -> BOOL
-- On TOPVAR reduce production primary -> BOOL
-- On TOPDEF reduce production primary -> BOOL
-- On STRING reduce production primary -> BOOL
-- On SLASH_DOT reduce production primary -> BOOL
-- On SLASH reduce production primary -> BOOL
-- On SEMI reduce production primary -> BOOL
-- On PLUS_DOT reduce production primary -> BOOL
-- On PLUS reduce production primary -> BOOL
-- On NL reduce production primary -> BOOL
-- On MOD reduce production primary -> BOOL
-- On MINUS_DOT reduce production primary -> BOOL
-- On MINUS reduce production primary -> BOOL
-- On LPAREN reduce production primary -> BOOL
-- On LOR reduce production primary -> BOOL
-- On LESS_LESS reduce production primary -> BOOL
-- On LESS_GREATER reduce production primary -> BOOL
-- On LESS_EQUAL reduce production primary -> BOOL
-- On LESS reduce production primary -> BOOL
-- On LBRACK reduce production primary -> BOOL
-- On LAND reduce production primary -> BOOL
-- On INT reduce production primary -> BOOL
-- On IDENT reduce production primary -> BOOL
-- On GREATER_EQUAL reduce production primary -> BOOL
-- On GREATER reduce production primary -> BOOL
-- On FLOAT reduce production primary -> BOOL
-- On EXTERNAL reduce production primary -> BOOL
-- On EXCL reduce production primary -> BOOL
-- On EXCEPTION reduce production primary -> BOOL
-- On EQUAL reduce production primary -> BOOL
-- On EOF reduce production primary -> BOOL
-- On DOT reduce production primary -> BOOL
-- On DOL reduce production primary -> BOOL
-- On DO reduce production primary -> BOOL
-- On CONS reduce production primary -> BOOL
-- On CHAR reduce production primary -> BOOL
-- On BOOL reduce production primary -> BOOL
-- On ATOM reduce production primary -> BOOL
-- On AST_DOT reduce production primary -> BOOL
-- On AST reduce production primary -> BOOL
-- On AND reduce production primary -> BOOL

State 469:
## Known stack suffix:
## ATOM
## LR(1) items:
primary -> ATOM . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> ATOM
-- On UIDENT reduce production primary -> ATOM
-- On UARROW reduce production primary -> ATOM
-- On TYPE reduce production primary -> ATOM
-- On TOPVAR reduce production primary -> ATOM
-- On TOPDEF reduce production primary -> ATOM
-- On STRING reduce production primary -> ATOM
-- On SLASH_DOT reduce production primary -> ATOM
-- On SLASH reduce production primary -> ATOM
-- On SEMI reduce production primary -> ATOM
-- On PLUS_DOT reduce production primary -> ATOM
-- On PLUS reduce production primary -> ATOM
-- On NL reduce production primary -> ATOM
-- On MOD reduce production primary -> ATOM
-- On MINUS_DOT reduce production primary -> ATOM
-- On MINUS reduce production primary -> ATOM
-- On LPAREN reduce production primary -> ATOM
-- On LOR reduce production primary -> ATOM
-- On LESS_LESS reduce production primary -> ATOM
-- On LESS_GREATER reduce production primary -> ATOM
-- On LESS_EQUAL reduce production primary -> ATOM
-- On LESS reduce production primary -> ATOM
-- On LBRACK reduce production primary -> ATOM
-- On LAND reduce production primary -> ATOM
-- On INT reduce production primary -> ATOM
-- On IDENT reduce production primary -> ATOM
-- On GREATER_EQUAL reduce production primary -> ATOM
-- On GREATER reduce production primary -> ATOM
-- On FLOAT reduce production primary -> ATOM
-- On EXTERNAL reduce production primary -> ATOM
-- On EXCL reduce production primary -> ATOM
-- On EXCEPTION reduce production primary -> ATOM
-- On EQUAL reduce production primary -> ATOM
-- On EOF reduce production primary -> ATOM
-- On DOT reduce production primary -> ATOM
-- On DOL reduce production primary -> ATOM
-- On DO reduce production primary -> ATOM
-- On CONS reduce production primary -> ATOM
-- On CHAR reduce production primary -> ATOM
-- On BOOL reduce production primary -> ATOM
-- On ATOM reduce production primary -> ATOM
-- On AST_DOT reduce production primary -> ATOM
-- On AST reduce production primary -> ATOM
-- On AND reduce production primary -> ATOM

State 470:
## Known stack suffix:
## value_name
## LR(1) items:
binding -> value_name . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
## Transitions:
## Reductions:
-- On error reduce production binding -> value_name
-- On UIDENT reduce production binding -> value_name
-- On UARROW reduce production binding -> value_name
-- On TYPE reduce production binding -> value_name
-- On TOPVAR reduce production binding -> value_name
-- On TOPDEF reduce production binding -> value_name
-- On STRING reduce production binding -> value_name
-- On SLASH_DOT reduce production binding -> value_name
-- On SLASH reduce production binding -> value_name
-- On SEMI reduce production binding -> value_name
-- On PLUS_DOT reduce production binding -> value_name
-- On PLUS reduce production binding -> value_name
-- On NL reduce production binding -> value_name
-- On MOD reduce production binding -> value_name
-- On MINUS_DOT reduce production binding -> value_name
-- On MINUS reduce production binding -> value_name
-- On LPAREN reduce production binding -> value_name
-- On LOR reduce production binding -> value_name
-- On LESS_LESS reduce production binding -> value_name
-- On LESS_GREATER reduce production binding -> value_name
-- On LESS_EQUAL reduce production binding -> value_name
-- On LESS reduce production binding -> value_name
-- On LBRACK reduce production binding -> value_name
-- On LARROW reduce production binding -> value_name
-- On LAND reduce production binding -> value_name
-- On INT reduce production binding -> value_name
-- On IDENT reduce production binding -> value_name
-- On GREATER_EQUAL reduce production binding -> value_name
-- On GREATER reduce production binding -> value_name
-- On FLOAT reduce production binding -> value_name
-- On EXTERNAL reduce production binding -> value_name
-- On EXCL reduce production binding -> value_name
-- On EXCEPTION reduce production binding -> value_name
-- On EQUAL reduce production binding -> value_name
-- On EOF reduce production binding -> value_name
-- On DOT reduce production binding -> value_name
-- On DOL reduce production binding -> value_name
-- On DO reduce production binding -> value_name
-- On CONS reduce production binding -> value_name
-- On CHAR reduce production binding -> value_name
-- On BOOL reduce production binding -> value_name
-- On ATOM reduce production binding -> value_name
-- On AST_DOT reduce production binding -> value_name
-- On AST reduce production binding -> value_name
-- On ASSIGN reduce production binding -> value_name
-- On AND reduce production binding -> value_name

State 471:
## Known stack suffix:
## EXCL simple_expr
## LR(1) items:
simple_expr -> EXCL simple_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production simple_expr -> EXCL simple_expr
-- On UIDENT reduce production simple_expr -> EXCL simple_expr
-- On UARROW reduce production simple_expr -> EXCL simple_expr
-- On TYPE reduce production simple_expr -> EXCL simple_expr
-- On TOPVAR reduce production simple_expr -> EXCL simple_expr
-- On TOPDEF reduce production simple_expr -> EXCL simple_expr
-- On STRING reduce production simple_expr -> EXCL simple_expr
-- On SLASH_DOT reduce production simple_expr -> EXCL simple_expr
-- On SLASH reduce production simple_expr -> EXCL simple_expr
-- On SEMI reduce production simple_expr -> EXCL simple_expr
-- On PLUS_DOT reduce production simple_expr -> EXCL simple_expr
-- On PLUS reduce production simple_expr -> EXCL simple_expr
-- On NL reduce production simple_expr -> EXCL simple_expr
-- On MOD reduce production simple_expr -> EXCL simple_expr
-- On MINUS_DOT reduce production simple_expr -> EXCL simple_expr
-- On MINUS reduce production simple_expr -> EXCL simple_expr
-- On LPAREN reduce production simple_expr -> EXCL simple_expr
-- On LOR reduce production simple_expr -> EXCL simple_expr
-- On LESS_LESS reduce production simple_expr -> EXCL simple_expr
-- On LESS_GREATER reduce production simple_expr -> EXCL simple_expr
-- On LESS_EQUAL reduce production simple_expr -> EXCL simple_expr
-- On LESS reduce production simple_expr -> EXCL simple_expr
-- On LBRACK reduce production simple_expr -> EXCL simple_expr
-- On LAND reduce production simple_expr -> EXCL simple_expr
-- On INT reduce production simple_expr -> EXCL simple_expr
-- On IDENT reduce production simple_expr -> EXCL simple_expr
-- On GREATER_EQUAL reduce production simple_expr -> EXCL simple_expr
-- On GREATER reduce production simple_expr -> EXCL simple_expr
-- On FLOAT reduce production simple_expr -> EXCL simple_expr
-- On EXTERNAL reduce production simple_expr -> EXCL simple_expr
-- On EXCL reduce production simple_expr -> EXCL simple_expr
-- On EXCEPTION reduce production simple_expr -> EXCL simple_expr
-- On EQUAL reduce production simple_expr -> EXCL simple_expr
-- On EOF reduce production simple_expr -> EXCL simple_expr
-- On DOL reduce production simple_expr -> EXCL simple_expr
-- On DO reduce production simple_expr -> EXCL simple_expr
-- On CONS reduce production simple_expr -> EXCL simple_expr
-- On CHAR reduce production simple_expr -> EXCL simple_expr
-- On BOOL reduce production simple_expr -> EXCL simple_expr
-- On ATOM reduce production simple_expr -> EXCL simple_expr
-- On AST_DOT reduce production simple_expr -> EXCL simple_expr
-- On AST reduce production simple_expr -> EXCL simple_expr
-- On AND reduce production simple_expr -> EXCL simple_expr

State 472:
## Known stack suffix:
## rev_module_path
## LR(1) items:
module_path -> rev_module_path . value_name [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
rev_module_path -> rev_module_path . UIDENT DOT [ UIDENT IDENT ]
## Transitions:
-- On UIDENT shift to state 247
-- On IDENT shift to state 464
-- On value_name shift to state 473
## Reductions:

State 473:
## Known stack suffix:
## rev_module_path value_name
## LR(1) items:
module_path -> rev_module_path value_name . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
## Transitions:
## Reductions:
-- On error reduce production module_path -> rev_module_path value_name
-- On UIDENT reduce production module_path -> rev_module_path value_name
-- On UARROW reduce production module_path -> rev_module_path value_name
-- On TYPE reduce production module_path -> rev_module_path value_name
-- On TOPVAR reduce production module_path -> rev_module_path value_name
-- On TOPDEF reduce production module_path -> rev_module_path value_name
-- On STRING reduce production module_path -> rev_module_path value_name
-- On SLASH_DOT reduce production module_path -> rev_module_path value_name
-- On SLASH reduce production module_path -> rev_module_path value_name
-- On SEMI reduce production module_path -> rev_module_path value_name
-- On PLUS_DOT reduce production module_path -> rev_module_path value_name
-- On PLUS reduce production module_path -> rev_module_path value_name
-- On NL reduce production module_path -> rev_module_path value_name
-- On MOD reduce production module_path -> rev_module_path value_name
-- On MINUS_DOT reduce production module_path -> rev_module_path value_name
-- On MINUS reduce production module_path -> rev_module_path value_name
-- On LPAREN reduce production module_path -> rev_module_path value_name
-- On LOR reduce production module_path -> rev_module_path value_name
-- On LESS_LESS reduce production module_path -> rev_module_path value_name
-- On LESS_GREATER reduce production module_path -> rev_module_path value_name
-- On LESS_EQUAL reduce production module_path -> rev_module_path value_name
-- On LESS reduce production module_path -> rev_module_path value_name
-- On LBRACK reduce production module_path -> rev_module_path value_name
-- On LARROW reduce production module_path -> rev_module_path value_name
-- On LAND reduce production module_path -> rev_module_path value_name
-- On INT reduce production module_path -> rev_module_path value_name
-- On IDENT reduce production module_path -> rev_module_path value_name
-- On GREATER_EQUAL reduce production module_path -> rev_module_path value_name
-- On GREATER reduce production module_path -> rev_module_path value_name
-- On FLOAT reduce production module_path -> rev_module_path value_name
-- On EXTERNAL reduce production module_path -> rev_module_path value_name
-- On EXCL reduce production module_path -> rev_module_path value_name
-- On EXCEPTION reduce production module_path -> rev_module_path value_name
-- On EQUAL reduce production module_path -> rev_module_path value_name
-- On EOF reduce production module_path -> rev_module_path value_name
-- On DOT reduce production module_path -> rev_module_path value_name
-- On DOL reduce production module_path -> rev_module_path value_name
-- On DO reduce production module_path -> rev_module_path value_name
-- On CONS reduce production module_path -> rev_module_path value_name
-- On CHAR reduce production module_path -> rev_module_path value_name
-- On BOOL reduce production module_path -> rev_module_path value_name
-- On ATOM reduce production module_path -> rev_module_path value_name
-- On AST_DOT reduce production module_path -> rev_module_path value_name
-- On AST reduce production module_path -> rev_module_path value_name
-- On ASSIGN reduce production module_path -> rev_module_path value_name
-- On AND reduce production module_path -> rev_module_path value_name

State 474:
## Known stack suffix:
## primary
## LR(1) items:
array_expr -> primary . DOT LPAREN expr RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
field_expr -> primary . DOT binding [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
simple_expr -> primary . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On DOT shift to state 475
## Reductions:
-- On error reduce production simple_expr -> primary
-- On UIDENT reduce production simple_expr -> primary
-- On UARROW reduce production simple_expr -> primary
-- On TYPE reduce production simple_expr -> primary
-- On TOPVAR reduce production simple_expr -> primary
-- On TOPDEF reduce production simple_expr -> primary
-- On STRING reduce production simple_expr -> primary
-- On SLASH_DOT reduce production simple_expr -> primary
-- On SLASH reduce production simple_expr -> primary
-- On SEMI reduce production simple_expr -> primary
-- On PLUS_DOT reduce production simple_expr -> primary
-- On PLUS reduce production simple_expr -> primary
-- On NL reduce production simple_expr -> primary
-- On MOD reduce production simple_expr -> primary
-- On MINUS_DOT reduce production simple_expr -> primary
-- On MINUS reduce production simple_expr -> primary
-- On LPAREN reduce production simple_expr -> primary
-- On LOR reduce production simple_expr -> primary
-- On LESS_LESS reduce production simple_expr -> primary
-- On LESS_GREATER reduce production simple_expr -> primary
-- On LESS_EQUAL reduce production simple_expr -> primary
-- On LESS reduce production simple_expr -> primary
-- On LBRACK reduce production simple_expr -> primary
-- On LAND reduce production simple_expr -> primary
-- On INT reduce production simple_expr -> primary
-- On IDENT reduce production simple_expr -> primary
-- On GREATER_EQUAL reduce production simple_expr -> primary
-- On GREATER reduce production simple_expr -> primary
-- On FLOAT reduce production simple_expr -> primary
-- On EXTERNAL reduce production simple_expr -> primary
-- On EXCL reduce production simple_expr -> primary
-- On EXCEPTION reduce production simple_expr -> primary
-- On EQUAL reduce production simple_expr -> primary
-- On EOF reduce production simple_expr -> primary
-- On DOL reduce production simple_expr -> primary
-- On DO reduce production simple_expr -> primary
-- On CONS reduce production simple_expr -> primary
-- On CHAR reduce production simple_expr -> primary
-- On BOOL reduce production simple_expr -> primary
-- On ATOM reduce production simple_expr -> primary
-- On AST_DOT reduce production simple_expr -> primary
-- On AST reduce production simple_expr -> primary
-- On AND reduce production simple_expr -> primary

State 475:
## Known stack suffix:
## primary DOT
## LR(1) items:
array_expr -> primary DOT . LPAREN expr RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
field_expr -> primary DOT . binding [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
## Transitions:
-- On UIDENT shift to state 251
-- On LPAREN shift to state 476
-- On IDENT shift to state 464
-- On value_name shift to state 470
-- On rev_module_path shift to state 472
-- On module_path shift to state 479
-- On binding shift to state 480
## Reductions:

State 476:
## Known stack suffix:
## primary DOT LPAREN
## LR(1) items:
array_expr -> primary DOT LPAREN . expr RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 477
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 477:
## Known stack suffix:
## primary DOT LPAREN expr
## LR(1) items:
array_expr -> primary DOT LPAREN expr . RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On RPAREN shift to state 478
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 478:
## Known stack suffix:
## primary DOT LPAREN expr RPAREN
## LR(1) items:
array_expr -> primary DOT LPAREN expr RPAREN . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On UIDENT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On UARROW reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On TYPE reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On TOPVAR reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On TOPDEF reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On STRING reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On SLASH_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On SLASH reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On SEMI reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On PLUS_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On PLUS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On NL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On MOD reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On MINUS_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On MINUS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LPAREN reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LOR reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS_LESS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS_GREATER reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS_EQUAL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LESS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LBRACK reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LARROW reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On LAND reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On INT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On IDENT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On GREATER_EQUAL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On GREATER reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On FLOAT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On EXTERNAL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On EXCL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On EXCEPTION reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On EQUAL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On EOF reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On DOL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On DO reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On CONS reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On CHAR reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On BOOL reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On ATOM reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On AST_DOT reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On AST reduce production array_expr -> primary DOT LPAREN expr RPAREN
-- On AND reduce production array_expr -> primary DOT LPAREN expr RPAREN

State 479:
## Known stack suffix:
## module_path
## LR(1) items:
binding -> module_path . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
## Transitions:
## Reductions:
-- On error reduce production binding -> module_path
-- On UIDENT reduce production binding -> module_path
-- On UARROW reduce production binding -> module_path
-- On TYPE reduce production binding -> module_path
-- On TOPVAR reduce production binding -> module_path
-- On TOPDEF reduce production binding -> module_path
-- On STRING reduce production binding -> module_path
-- On SLASH_DOT reduce production binding -> module_path
-- On SLASH reduce production binding -> module_path
-- On SEMI reduce production binding -> module_path
-- On PLUS_DOT reduce production binding -> module_path
-- On PLUS reduce production binding -> module_path
-- On NL reduce production binding -> module_path
-- On MOD reduce production binding -> module_path
-- On MINUS_DOT reduce production binding -> module_path
-- On MINUS reduce production binding -> module_path
-- On LPAREN reduce production binding -> module_path
-- On LOR reduce production binding -> module_path
-- On LESS_LESS reduce production binding -> module_path
-- On LESS_GREATER reduce production binding -> module_path
-- On LESS_EQUAL reduce production binding -> module_path
-- On LESS reduce production binding -> module_path
-- On LBRACK reduce production binding -> module_path
-- On LARROW reduce production binding -> module_path
-- On LAND reduce production binding -> module_path
-- On INT reduce production binding -> module_path
-- On IDENT reduce production binding -> module_path
-- On GREATER_EQUAL reduce production binding -> module_path
-- On GREATER reduce production binding -> module_path
-- On FLOAT reduce production binding -> module_path
-- On EXTERNAL reduce production binding -> module_path
-- On EXCL reduce production binding -> module_path
-- On EXCEPTION reduce production binding -> module_path
-- On EQUAL reduce production binding -> module_path
-- On EOF reduce production binding -> module_path
-- On DOT reduce production binding -> module_path
-- On DOL reduce production binding -> module_path
-- On DO reduce production binding -> module_path
-- On CONS reduce production binding -> module_path
-- On CHAR reduce production binding -> module_path
-- On BOOL reduce production binding -> module_path
-- On ATOM reduce production binding -> module_path
-- On AST_DOT reduce production binding -> module_path
-- On AST reduce production binding -> module_path
-- On ASSIGN reduce production binding -> module_path
-- On AND reduce production binding -> module_path

State 480:
## Known stack suffix:
## primary DOT binding
## LR(1) items:
field_expr -> primary DOT binding . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LARROW LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST ASSIGN AND ]
## Transitions:
## Reductions:
-- On error reduce production field_expr -> primary DOT binding
-- On UIDENT reduce production field_expr -> primary DOT binding
-- On UARROW reduce production field_expr -> primary DOT binding
-- On TYPE reduce production field_expr -> primary DOT binding
-- On TOPVAR reduce production field_expr -> primary DOT binding
-- On TOPDEF reduce production field_expr -> primary DOT binding
-- On STRING reduce production field_expr -> primary DOT binding
-- On SLASH_DOT reduce production field_expr -> primary DOT binding
-- On SLASH reduce production field_expr -> primary DOT binding
-- On SEMI reduce production field_expr -> primary DOT binding
-- On PLUS_DOT reduce production field_expr -> primary DOT binding
-- On PLUS reduce production field_expr -> primary DOT binding
-- On NL reduce production field_expr -> primary DOT binding
-- On MOD reduce production field_expr -> primary DOT binding
-- On MINUS_DOT reduce production field_expr -> primary DOT binding
-- On MINUS reduce production field_expr -> primary DOT binding
-- On LPAREN reduce production field_expr -> primary DOT binding
-- On LOR reduce production field_expr -> primary DOT binding
-- On LESS_LESS reduce production field_expr -> primary DOT binding
-- On LESS_GREATER reduce production field_expr -> primary DOT binding
-- On LESS_EQUAL reduce production field_expr -> primary DOT binding
-- On LESS reduce production field_expr -> primary DOT binding
-- On LBRACK reduce production field_expr -> primary DOT binding
-- On LARROW reduce production field_expr -> primary DOT binding
-- On LAND reduce production field_expr -> primary DOT binding
-- On INT reduce production field_expr -> primary DOT binding
-- On IDENT reduce production field_expr -> primary DOT binding
-- On GREATER_EQUAL reduce production field_expr -> primary DOT binding
-- On GREATER reduce production field_expr -> primary DOT binding
-- On FLOAT reduce production field_expr -> primary DOT binding
-- On EXTERNAL reduce production field_expr -> primary DOT binding
-- On EXCL reduce production field_expr -> primary DOT binding
-- On EXCEPTION reduce production field_expr -> primary DOT binding
-- On EQUAL reduce production field_expr -> primary DOT binding
-- On EOF reduce production field_expr -> primary DOT binding
-- On DOL reduce production field_expr -> primary DOT binding
-- On DO reduce production field_expr -> primary DOT binding
-- On CONS reduce production field_expr -> primary DOT binding
-- On CHAR reduce production field_expr -> primary DOT binding
-- On BOOL reduce production field_expr -> primary DOT binding
-- On ATOM reduce production field_expr -> primary DOT binding
-- On AST_DOT reduce production field_expr -> primary DOT binding
-- On AST reduce production field_expr -> primary DOT binding
-- On ASSIGN reduce production field_expr -> primary DOT binding
-- On AND reduce production field_expr -> primary DOT binding

State 481:
## Known stack suffix:
## field_expr
## LR(1) items:
simple_expr -> field_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production simple_expr -> field_expr
-- On UIDENT reduce production simple_expr -> field_expr
-- On UARROW reduce production simple_expr -> field_expr
-- On TYPE reduce production simple_expr -> field_expr
-- On TOPVAR reduce production simple_expr -> field_expr
-- On TOPDEF reduce production simple_expr -> field_expr
-- On STRING reduce production simple_expr -> field_expr
-- On SLASH_DOT reduce production simple_expr -> field_expr
-- On SLASH reduce production simple_expr -> field_expr
-- On SEMI reduce production simple_expr -> field_expr
-- On PLUS_DOT reduce production simple_expr -> field_expr
-- On PLUS reduce production simple_expr -> field_expr
-- On NL reduce production simple_expr -> field_expr
-- On MOD reduce production simple_expr -> field_expr
-- On MINUS_DOT reduce production simple_expr -> field_expr
-- On MINUS reduce production simple_expr -> field_expr
-- On LPAREN reduce production simple_expr -> field_expr
-- On LOR reduce production simple_expr -> field_expr
-- On LESS_LESS reduce production simple_expr -> field_expr
-- On LESS_GREATER reduce production simple_expr -> field_expr
-- On LESS_EQUAL reduce production simple_expr -> field_expr
-- On LESS reduce production simple_expr -> field_expr
-- On LBRACK reduce production simple_expr -> field_expr
-- On LAND reduce production simple_expr -> field_expr
-- On INT reduce production simple_expr -> field_expr
-- On IDENT reduce production simple_expr -> field_expr
-- On GREATER_EQUAL reduce production simple_expr -> field_expr
-- On GREATER reduce production simple_expr -> field_expr
-- On FLOAT reduce production simple_expr -> field_expr
-- On EXTERNAL reduce production simple_expr -> field_expr
-- On EXCL reduce production simple_expr -> field_expr
-- On EXCEPTION reduce production simple_expr -> field_expr
-- On EQUAL reduce production simple_expr -> field_expr
-- On EOF reduce production simple_expr -> field_expr
-- On DOL reduce production simple_expr -> field_expr
-- On DO reduce production simple_expr -> field_expr
-- On CONS reduce production simple_expr -> field_expr
-- On CHAR reduce production simple_expr -> field_expr
-- On BOOL reduce production simple_expr -> field_expr
-- On ATOM reduce production simple_expr -> field_expr
-- On AST_DOT reduce production simple_expr -> field_expr
-- On AST reduce production simple_expr -> field_expr
-- On AND reduce production simple_expr -> field_expr

State 482:
## Known stack suffix:
## binding
## LR(1) items:
primary -> binding . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production primary -> binding
-- On UIDENT reduce production primary -> binding
-- On UARROW reduce production primary -> binding
-- On TYPE reduce production primary -> binding
-- On TOPVAR reduce production primary -> binding
-- On TOPDEF reduce production primary -> binding
-- On STRING reduce production primary -> binding
-- On SLASH_DOT reduce production primary -> binding
-- On SLASH reduce production primary -> binding
-- On SEMI reduce production primary -> binding
-- On PLUS_DOT reduce production primary -> binding
-- On PLUS reduce production primary -> binding
-- On NL reduce production primary -> binding
-- On MOD reduce production primary -> binding
-- On MINUS_DOT reduce production primary -> binding
-- On MINUS reduce production primary -> binding
-- On LPAREN reduce production primary -> binding
-- On LOR reduce production primary -> binding
-- On LESS_LESS reduce production primary -> binding
-- On LESS_GREATER reduce production primary -> binding
-- On LESS_EQUAL reduce production primary -> binding
-- On LESS reduce production primary -> binding
-- On LBRACK reduce production primary -> binding
-- On LAND reduce production primary -> binding
-- On INT reduce production primary -> binding
-- On IDENT reduce production primary -> binding
-- On GREATER_EQUAL reduce production primary -> binding
-- On GREATER reduce production primary -> binding
-- On FLOAT reduce production primary -> binding
-- On EXTERNAL reduce production primary -> binding
-- On EXCL reduce production primary -> binding
-- On EXCEPTION reduce production primary -> binding
-- On EQUAL reduce production primary -> binding
-- On EOF reduce production primary -> binding
-- On DOT reduce production primary -> binding
-- On DOL reduce production primary -> binding
-- On DO reduce production primary -> binding
-- On CONS reduce production primary -> binding
-- On CHAR reduce production primary -> binding
-- On BOOL reduce production primary -> binding
-- On ATOM reduce production primary -> binding
-- On AST_DOT reduce production primary -> binding
-- On AST reduce production primary -> binding
-- On AND reduce production primary -> binding

State 483:
## Known stack suffix:
## array_expr
## LR(1) items:
simple_expr -> array_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production simple_expr -> array_expr
-- On UIDENT reduce production simple_expr -> array_expr
-- On UARROW reduce production simple_expr -> array_expr
-- On TYPE reduce production simple_expr -> array_expr
-- On TOPVAR reduce production simple_expr -> array_expr
-- On TOPDEF reduce production simple_expr -> array_expr
-- On STRING reduce production simple_expr -> array_expr
-- On SLASH_DOT reduce production simple_expr -> array_expr
-- On SLASH reduce production simple_expr -> array_expr
-- On SEMI reduce production simple_expr -> array_expr
-- On PLUS_DOT reduce production simple_expr -> array_expr
-- On PLUS reduce production simple_expr -> array_expr
-- On NL reduce production simple_expr -> array_expr
-- On MOD reduce production simple_expr -> array_expr
-- On MINUS_DOT reduce production simple_expr -> array_expr
-- On MINUS reduce production simple_expr -> array_expr
-- On LPAREN reduce production simple_expr -> array_expr
-- On LOR reduce production simple_expr -> array_expr
-- On LESS_LESS reduce production simple_expr -> array_expr
-- On LESS_GREATER reduce production simple_expr -> array_expr
-- On LESS_EQUAL reduce production simple_expr -> array_expr
-- On LESS reduce production simple_expr -> array_expr
-- On LBRACK reduce production simple_expr -> array_expr
-- On LAND reduce production simple_expr -> array_expr
-- On INT reduce production simple_expr -> array_expr
-- On IDENT reduce production simple_expr -> array_expr
-- On GREATER_EQUAL reduce production simple_expr -> array_expr
-- On GREATER reduce production simple_expr -> array_expr
-- On FLOAT reduce production simple_expr -> array_expr
-- On EXTERNAL reduce production simple_expr -> array_expr
-- On EXCL reduce production simple_expr -> array_expr
-- On EXCEPTION reduce production simple_expr -> array_expr
-- On EQUAL reduce production simple_expr -> array_expr
-- On EOF reduce production simple_expr -> array_expr
-- On DOL reduce production simple_expr -> array_expr
-- On DO reduce production simple_expr -> array_expr
-- On CONS reduce production simple_expr -> array_expr
-- On CHAR reduce production simple_expr -> array_expr
-- On BOOL reduce production simple_expr -> array_expr
-- On ATOM reduce production simple_expr -> array_expr
-- On AST_DOT reduce production simple_expr -> array_expr
-- On AST reduce production simple_expr -> array_expr
-- On AND reduce production simple_expr -> array_expr

State 484:
## Known stack suffix:
## UIDENT simple_expr
## LR(1) items:
expr -> UIDENT simple_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> UIDENT simple_expr
-- On UIDENT reduce production expr -> UIDENT simple_expr
-- On UARROW reduce production expr -> UIDENT simple_expr
-- On TYPE reduce production expr -> UIDENT simple_expr
-- On TOPVAR reduce production expr -> UIDENT simple_expr
-- On TOPDEF reduce production expr -> UIDENT simple_expr
-- On STRING reduce production expr -> UIDENT simple_expr
-- On SLASH_DOT reduce production expr -> UIDENT simple_expr
-- On SLASH reduce production expr -> UIDENT simple_expr
-- On SEMI reduce production expr -> UIDENT simple_expr
-- On PLUS_DOT reduce production expr -> UIDENT simple_expr
-- On PLUS reduce production expr -> UIDENT simple_expr
-- On NL reduce production expr -> UIDENT simple_expr
-- On MOD reduce production expr -> UIDENT simple_expr
-- On MINUS_DOT reduce production expr -> UIDENT simple_expr
-- On MINUS reduce production expr -> UIDENT simple_expr
-- On LPAREN reduce production expr -> UIDENT simple_expr
-- On LOR reduce production expr -> UIDENT simple_expr
-- On LESS_LESS reduce production expr -> UIDENT simple_expr
-- On LESS_GREATER reduce production expr -> UIDENT simple_expr
-- On LESS_EQUAL reduce production expr -> UIDENT simple_expr
-- On LESS reduce production expr -> UIDENT simple_expr
-- On LBRACK reduce production expr -> UIDENT simple_expr
-- On LAND reduce production expr -> UIDENT simple_expr
-- On INT reduce production expr -> UIDENT simple_expr
-- On IDENT reduce production expr -> UIDENT simple_expr
-- On GREATER_EQUAL reduce production expr -> UIDENT simple_expr
-- On GREATER reduce production expr -> UIDENT simple_expr
-- On FLOAT reduce production expr -> UIDENT simple_expr
-- On EXTERNAL reduce production expr -> UIDENT simple_expr
-- On EXCL reduce production expr -> UIDENT simple_expr
-- On EXCEPTION reduce production expr -> UIDENT simple_expr
-- On EQUAL reduce production expr -> UIDENT simple_expr
-- On EOF reduce production expr -> UIDENT simple_expr
-- On DOL reduce production expr -> UIDENT simple_expr
-- On CONS reduce production expr -> UIDENT simple_expr
-- On CHAR reduce production expr -> UIDENT simple_expr
-- On BOOL reduce production expr -> UIDENT simple_expr
-- On ATOM reduce production expr -> UIDENT simple_expr
-- On AST_DOT reduce production expr -> UIDENT simple_expr
-- On AST reduce production expr -> UIDENT simple_expr
-- On AND reduce production expr -> UIDENT simple_expr

State 485:
## Known stack suffix:
## TRY
## LR(1) items:
expr -> TRY . nl_opt expr nl_opt WITH nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 486
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 486:
## Known stack suffix:
## TRY nl_opt
## LR(1) items:
expr -> TRY nl_opt . expr nl_opt WITH nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 487
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 487:
## Known stack suffix:
## TRY nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> TRY nl_opt expr . nl_opt WITH nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 15
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On nl_opt shift to state 488
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On WITH reduce production nl_opt ->

State 488:
## Known stack suffix:
## TRY nl_opt expr nl_opt
## LR(1) items:
expr -> TRY nl_opt expr nl_opt . WITH nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On WITH shift to state 489
## Reductions:

State 489:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH . nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 490
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 490:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH nl_opt
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH nl_opt . pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 491
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 491:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH nl_opt pattern_matching
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
## LR(1) items:
expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On UIDENT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On UARROW reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On TYPE reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On TOPVAR reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On TOPDEF reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On STRING reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On SLASH reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On SEMI reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On PLUS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On NL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On MOD reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On MINUS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LPAREN reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LOR reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LESS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LBRACK reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On LAND reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On INT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On IDENT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On GREATER reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On FLOAT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On EXTERNAL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On EXCL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On EXCEPTION reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On EQUAL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On EOF reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On DOL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On CONS reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On CHAR reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On BOOL reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On ATOM reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On AST reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END
-- On AND reduce production expr -> TRY nl_opt expr nl_opt WITH nl_opt pattern_matching END

State 493:
## Known stack suffix:
## RETURN
## LR(1) items:
expr -> RETURN . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 648
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 494:
## Known stack suffix:
## RECEIVE
## LR(1) items:
expr -> RECEIVE . nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 495
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 495:
## Known stack suffix:
## RECEIVE nl_opt
## LR(1) items:
expr -> RECEIVE nl_opt . pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 496
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 496:
## Known stack suffix:
## RECEIVE nl_opt pattern_matching
## LR(1) items:
expr -> RECEIVE nl_opt pattern_matching . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## RECEIVE nl_opt pattern_matching END
## LR(1) items:
expr -> RECEIVE nl_opt pattern_matching END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On UIDENT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On UARROW reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On TYPE reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On TOPVAR reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On TOPDEF reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On STRING reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On SLASH reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On SEMI reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On PLUS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On NL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On MOD reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On MINUS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LPAREN reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LOR reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LESS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LBRACK reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On LAND reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On INT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On IDENT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On GREATER reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On FLOAT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On EXTERNAL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On EXCL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On EXCEPTION reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On EQUAL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On EOF reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On DOL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On CONS reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On CHAR reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On BOOL reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On ATOM reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On AST reduce production expr -> RECEIVE nl_opt pattern_matching END
-- On AND reduce production expr -> RECEIVE nl_opt pattern_matching END

State 498:
## Known stack suffix:
## RAISE
## LR(1) items:
expr -> RAISE . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 647
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 499:
## Known stack suffix:
## PERFORM
## LR(1) items:
expr -> PERFORM . nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 500
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 500:
## Known stack suffix:
## PERFORM nl_opt
## LR(1) items:
expr -> PERFORM nl_opt . block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 501
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 501:
## Known stack suffix:
## PERFORM nl_opt block
## LR(1) items:
expr -> PERFORM nl_opt block . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 502
## Reductions:

State 502:
## Known stack suffix:
## PERFORM nl_opt block END
## LR(1) items:
expr -> PERFORM nl_opt block END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> PERFORM nl_opt block END
-- On UIDENT reduce production expr -> PERFORM nl_opt block END
-- On UARROW reduce production expr -> PERFORM nl_opt block END
-- On TYPE reduce production expr -> PERFORM nl_opt block END
-- On TOPVAR reduce production expr -> PERFORM nl_opt block END
-- On TOPDEF reduce production expr -> PERFORM nl_opt block END
-- On STRING reduce production expr -> PERFORM nl_opt block END
-- On SLASH_DOT reduce production expr -> PERFORM nl_opt block END
-- On SLASH reduce production expr -> PERFORM nl_opt block END
-- On SEMI reduce production expr -> PERFORM nl_opt block END
-- On PLUS_DOT reduce production expr -> PERFORM nl_opt block END
-- On PLUS reduce production expr -> PERFORM nl_opt block END
-- On NL reduce production expr -> PERFORM nl_opt block END
-- On MOD reduce production expr -> PERFORM nl_opt block END
-- On MINUS_DOT reduce production expr -> PERFORM nl_opt block END
-- On MINUS reduce production expr -> PERFORM nl_opt block END
-- On LPAREN reduce production expr -> PERFORM nl_opt block END
-- On LOR reduce production expr -> PERFORM nl_opt block END
-- On LESS_LESS reduce production expr -> PERFORM nl_opt block END
-- On LESS_GREATER reduce production expr -> PERFORM nl_opt block END
-- On LESS_EQUAL reduce production expr -> PERFORM nl_opt block END
-- On LESS reduce production expr -> PERFORM nl_opt block END
-- On LBRACK reduce production expr -> PERFORM nl_opt block END
-- On LAND reduce production expr -> PERFORM nl_opt block END
-- On INT reduce production expr -> PERFORM nl_opt block END
-- On IDENT reduce production expr -> PERFORM nl_opt block END
-- On GREATER_EQUAL reduce production expr -> PERFORM nl_opt block END
-- On GREATER reduce production expr -> PERFORM nl_opt block END
-- On FLOAT reduce production expr -> PERFORM nl_opt block END
-- On EXTERNAL reduce production expr -> PERFORM nl_opt block END
-- On EXCL reduce production expr -> PERFORM nl_opt block END
-- On EXCEPTION reduce production expr -> PERFORM nl_opt block END
-- On EQUAL reduce production expr -> PERFORM nl_opt block END
-- On EOF reduce production expr -> PERFORM nl_opt block END
-- On DOL reduce production expr -> PERFORM nl_opt block END
-- On CONS reduce production expr -> PERFORM nl_opt block END
-- On CHAR reduce production expr -> PERFORM nl_opt block END
-- On BOOL reduce production expr -> PERFORM nl_opt block END
-- On ATOM reduce production expr -> PERFORM nl_opt block END
-- On AST_DOT reduce production expr -> PERFORM nl_opt block END
-- On AST reduce production expr -> PERFORM nl_opt block END
-- On AND reduce production expr -> PERFORM nl_opt block END

State 503:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 646
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 504:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 645
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 505:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . nl_opt expr WITH nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 506
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 506:
## Known stack suffix:
## MATCH nl_opt
## LR(1) items:
expr -> MATCH nl_opt . expr WITH nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 507
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 507:
## Known stack suffix:
## MATCH nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ WITH UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> MATCH nl_opt expr . WITH nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On WITH shift to state 508
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 508:
## Known stack suffix:
## MATCH nl_opt expr WITH
## LR(1) items:
expr -> MATCH nl_opt expr WITH . nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 509
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 509:
## Known stack suffix:
## MATCH nl_opt expr WITH nl_opt
## LR(1) items:
expr -> MATCH nl_opt expr WITH nl_opt . pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 510
-- On pattern shift to state 183
-- On constr_name shift to state 146
## Reductions:

State 510:
## Known stack suffix:
## MATCH nl_opt expr WITH nl_opt pattern_matching
## LR(1) items:
expr -> MATCH nl_opt expr WITH nl_opt pattern_matching . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 511
## Reductions:

State 511:
## Known stack suffix:
## MATCH nl_opt expr WITH nl_opt pattern_matching END
## LR(1) items:
expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On UIDENT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On UARROW reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On TYPE reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On TOPVAR reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On TOPDEF reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On STRING reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On SLASH reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On SEMI reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On PLUS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On NL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On MOD reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On MINUS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LPAREN reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LOR reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LESS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LBRACK reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On LAND reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On INT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On IDENT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On GREATER reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On FLOAT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On EXTERNAL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On EXCL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On EXCEPTION reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On EQUAL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On EOF reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On DOL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On CONS reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On CHAR reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On BOOL reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On ATOM reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On AST reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END
-- On AND reduce production expr -> MATCH nl_opt expr WITH nl_opt pattern_matching END

State 512:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary -> LPAREN . expr RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
primary -> LPAREN . RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
tuple -> LPAREN . rev_tuple RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RPAREN shift to state 450
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_tuple shift to state 513
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 515
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 513:
## Known stack suffix:
## LPAREN rev_tuple
## LR(1) items:
rev_tuple -> rev_tuple . COMMA expr [ RPAREN COMMA ]
tuple -> LPAREN rev_tuple . RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On RPAREN shift to state 514
-- On COMMA shift to state 411
## Reductions:

State 514:
## Known stack suffix:
## LPAREN rev_tuple RPAREN
## LR(1) items:
tuple -> LPAREN rev_tuple RPAREN . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production tuple -> LPAREN rev_tuple RPAREN
-- On UIDENT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On UARROW reduce production tuple -> LPAREN rev_tuple RPAREN
-- On TYPE reduce production tuple -> LPAREN rev_tuple RPAREN
-- On TOPVAR reduce production tuple -> LPAREN rev_tuple RPAREN
-- On TOPDEF reduce production tuple -> LPAREN rev_tuple RPAREN
-- On STRING reduce production tuple -> LPAREN rev_tuple RPAREN
-- On SLASH_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On SLASH reduce production tuple -> LPAREN rev_tuple RPAREN
-- On SEMI reduce production tuple -> LPAREN rev_tuple RPAREN
-- On PLUS_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On PLUS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On NL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On MOD reduce production tuple -> LPAREN rev_tuple RPAREN
-- On MINUS_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On MINUS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LPAREN reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LOR reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS_LESS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS_GREATER reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS_EQUAL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LESS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LBRACK reduce production tuple -> LPAREN rev_tuple RPAREN
-- On LAND reduce production tuple -> LPAREN rev_tuple RPAREN
-- On INT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On IDENT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On GREATER_EQUAL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On GREATER reduce production tuple -> LPAREN rev_tuple RPAREN
-- On FLOAT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On EXTERNAL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On EXCL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On EXCEPTION reduce production tuple -> LPAREN rev_tuple RPAREN
-- On EQUAL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On EOF reduce production tuple -> LPAREN rev_tuple RPAREN
-- On DOL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On CONS reduce production tuple -> LPAREN rev_tuple RPAREN
-- On CHAR reduce production tuple -> LPAREN rev_tuple RPAREN
-- On BOOL reduce production tuple -> LPAREN rev_tuple RPAREN
-- On ATOM reduce production tuple -> LPAREN rev_tuple RPAREN
-- On AST_DOT reduce production tuple -> LPAREN rev_tuple RPAREN
-- On AST reduce production tuple -> LPAREN rev_tuple RPAREN
-- On AND reduce production tuple -> LPAREN rev_tuple RPAREN

State 515:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH RPAREN PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS COMMA CHAR BOOL ATOM AST_DOT AST ]
primary -> LPAREN expr . RPAREN [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_tuple -> expr . COMMA expr [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On RPAREN shift to state 452
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On COMMA shift to state 415
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 516:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . fields RBRACE [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On IDENT shift to state 223
-- On fields shift to state 517
-- On field shift to state 395
## Reductions:

State 517:
## Known stack suffix:
## LBRACE fields
## LR(1) items:
expr -> LBRACE fields . RBRACE [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On RBRACE shift to state 518
## Reductions:

State 518:
## Known stack suffix:
## LBRACE fields RBRACE
## LR(1) items:
expr -> LBRACE fields RBRACE . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> LBRACE fields RBRACE
-- On UIDENT reduce production expr -> LBRACE fields RBRACE
-- On UARROW reduce production expr -> LBRACE fields RBRACE
-- On TYPE reduce production expr -> LBRACE fields RBRACE
-- On TOPVAR reduce production expr -> LBRACE fields RBRACE
-- On TOPDEF reduce production expr -> LBRACE fields RBRACE
-- On STRING reduce production expr -> LBRACE fields RBRACE
-- On SLASH_DOT reduce production expr -> LBRACE fields RBRACE
-- On SLASH reduce production expr -> LBRACE fields RBRACE
-- On SEMI reduce production expr -> LBRACE fields RBRACE
-- On PLUS_DOT reduce production expr -> LBRACE fields RBRACE
-- On PLUS reduce production expr -> LBRACE fields RBRACE
-- On NL reduce production expr -> LBRACE fields RBRACE
-- On MOD reduce production expr -> LBRACE fields RBRACE
-- On MINUS_DOT reduce production expr -> LBRACE fields RBRACE
-- On MINUS reduce production expr -> LBRACE fields RBRACE
-- On LPAREN reduce production expr -> LBRACE fields RBRACE
-- On LOR reduce production expr -> LBRACE fields RBRACE
-- On LESS_LESS reduce production expr -> LBRACE fields RBRACE
-- On LESS_GREATER reduce production expr -> LBRACE fields RBRACE
-- On LESS_EQUAL reduce production expr -> LBRACE fields RBRACE
-- On LESS reduce production expr -> LBRACE fields RBRACE
-- On LBRACK reduce production expr -> LBRACE fields RBRACE
-- On LAND reduce production expr -> LBRACE fields RBRACE
-- On INT reduce production expr -> LBRACE fields RBRACE
-- On IDENT reduce production expr -> LBRACE fields RBRACE
-- On GREATER_EQUAL reduce production expr -> LBRACE fields RBRACE
-- On GREATER reduce production expr -> LBRACE fields RBRACE
-- On FLOAT reduce production expr -> LBRACE fields RBRACE
-- On EXTERNAL reduce production expr -> LBRACE fields RBRACE
-- On EXCL reduce production expr -> LBRACE fields RBRACE
-- On EXCEPTION reduce production expr -> LBRACE fields RBRACE
-- On EQUAL reduce production expr -> LBRACE fields RBRACE
-- On EOF reduce production expr -> LBRACE fields RBRACE
-- On DOL reduce production expr -> LBRACE fields RBRACE
-- On CONS reduce production expr -> LBRACE fields RBRACE
-- On CHAR reduce production expr -> LBRACE fields RBRACE
-- On BOOL reduce production expr -> LBRACE fields RBRACE
-- On ATOM reduce production expr -> LBRACE fields RBRACE
-- On AST_DOT reduce production expr -> LBRACE fields RBRACE
-- On AST reduce production expr -> LBRACE fields RBRACE
-- On AND reduce production expr -> LBRACE fields RBRACE

State 519:
## Known stack suffix:
## IF
## LR(1) items:
if_exp -> IF . expr THEN nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF . expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF . expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 520
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 520:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW THEN STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr . THEN nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF expr . THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF expr . THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On THEN shift to state 521
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 521:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
if_exp -> IF expr THEN . nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF expr THEN . nl_opt multi_exps_block ELSE nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF expr THEN . nl_opt simple_expr nl_opt ELSE nl_opt simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 522
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 522:
## Known stack suffix:
## IF expr THEN nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt . multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF expr THEN nl_opt . multi_exps_block ELSE nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF expr THEN nl_opt . simple_expr nl_opt ELSE nl_opt simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 523
-- On rev_stmts shift to state 379
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On multi_exps_block shift to state 528
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 523:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr
## LR(1) items:
expr -> simple_expr . [ UIDENT UARROW STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
if_exp -> IF expr THEN nl_opt simple_expr . nl_opt ELSE nl_opt simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 524
## Reductions:
-- On UIDENT reduce production expr -> simple_expr
-- On UARROW reduce production expr -> simple_expr
-- On STRING reduce production expr -> simple_expr
-- On SLASH_DOT reduce production expr -> simple_expr
-- On SLASH reduce production expr -> simple_expr
-- On SEMI reduce production expr -> simple_expr
-- On PLUS_DOT reduce production expr -> simple_expr
-- On PLUS reduce production expr -> simple_expr
-- On MOD reduce production expr -> simple_expr
-- On MINUS_DOT reduce production expr -> simple_expr
-- On MINUS reduce production expr -> simple_expr
-- On LPAREN reduce production expr -> simple_expr
-- On LOR reduce production expr -> simple_expr
-- On LESS_LESS reduce production expr -> simple_expr
-- On LESS_GREATER reduce production expr -> simple_expr
-- On LESS_EQUAL reduce production expr -> simple_expr
-- On LESS reduce production expr -> simple_expr
-- On LBRACK reduce production expr -> simple_expr
-- On LAND reduce production expr -> simple_expr
-- On INT reduce production expr -> simple_expr
-- On IDENT reduce production expr -> simple_expr
-- On GREATER_EQUAL reduce production expr -> simple_expr
-- On GREATER reduce production expr -> simple_expr
-- On FLOAT reduce production expr -> simple_expr
-- On EXCL reduce production expr -> simple_expr
-- On EQUAL reduce production expr -> simple_expr
-- On ELSE reduce production nl_opt ->
-- On DOL reduce production expr -> simple_expr
-- On CONS reduce production expr -> simple_expr
-- On CHAR reduce production expr -> simple_expr
-- On BOOL reduce production expr -> simple_expr
-- On ATOM reduce production expr -> simple_expr
-- On AST_DOT reduce production expr -> simple_expr
-- On AST reduce production expr -> simple_expr

State 524:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt . ELSE nl_opt simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On ELSE shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt ELSE
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE . nl_opt simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 526
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 526:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt . simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 527
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
## Reductions:

State 527:
## Known stack suffix:
## IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
## LR(1) items:
if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On UIDENT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On UARROW reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On TYPE reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On TOPVAR reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On TOPDEF reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On STRING reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On SLASH_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On SLASH reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On SEMI reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On PLUS_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On PLUS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On NL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On MOD reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On MINUS_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On MINUS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LPAREN reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LOR reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS_LESS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS_GREATER reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS_EQUAL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LESS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LBRACK reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On LAND reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On INT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On IDENT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On GREATER_EQUAL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On GREATER reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On FLOAT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On EXTERNAL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On EXCL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On EXCEPTION reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On EQUAL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On EOF reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On DOL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On CONS reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On CHAR reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On BOOL reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On ATOM reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On AST_DOT reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On AST reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr
-- On AND reduce production if_exp -> IF expr THEN nl_opt simple_expr nl_opt ELSE nl_opt simple_expr

State 528:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
if_exp -> IF expr THEN nl_opt multi_exps_block . ELSE nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 529
-- On ELSE shift to state 530
## Reductions:

State 529:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block END
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On UIDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On UARROW reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On TYPE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On TOPVAR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On TOPDEF reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On STRING reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On SLASH_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On SLASH reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On SEMI reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On PLUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On PLUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On NL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On MOD reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On MINUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On MINUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LPAREN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LOR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS_LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS_GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LBRACK reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On LAND reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On INT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On IDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On GREATER_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On FLOAT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On EXTERNAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On EXCL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On EXCEPTION reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On EOF reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On DOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On CONS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On CHAR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On BOOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On ATOM reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On AST_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On AST reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END
-- On AND reduce production if_exp -> IF expr THEN nl_opt multi_exps_block END

State 530:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE . nl_opt multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 531
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 531:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE nl_opt
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt . multi_exps_block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 379
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On multi_exps_block shift to state 532
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 532:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 533
## Reductions:

State 533:
## Known stack suffix:
## IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
## LR(1) items:
if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On UIDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On UARROW reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On TYPE reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On TOPVAR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On TOPDEF reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On STRING reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On SLASH_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On SLASH reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On SEMI reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On PLUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On PLUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On NL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On MOD reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On MINUS_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On MINUS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LPAREN reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LOR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS_LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS_GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LESS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LBRACK reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On LAND reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On INT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On IDENT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On GREATER_EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On GREATER reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On FLOAT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On EXTERNAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On EXCL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On EXCEPTION reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On EQUAL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On EOF reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On DOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On CONS reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On CHAR reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On BOOL reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On ATOM reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On AST_DOT reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On AST reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END
-- On AND reduce production if_exp -> IF expr THEN nl_opt multi_exps_block ELSE nl_opt multi_exps_block END

State 534:
## Known stack suffix:
## IDENT
## LR(1) items:
expr -> IDENT . LARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> IDENT . ASSIGN nl_opt expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
value_name -> IDENT . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOT DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On LARROW shift to state 535
-- On ASSIGN shift to state 642
## Reductions:
-- On error reduce production value_name -> IDENT
-- On UIDENT reduce production value_name -> IDENT
-- On UARROW reduce production value_name -> IDENT
-- On TYPE reduce production value_name -> IDENT
-- On TOPVAR reduce production value_name -> IDENT
-- On TOPDEF reduce production value_name -> IDENT
-- On STRING reduce production value_name -> IDENT
-- On SLASH_DOT reduce production value_name -> IDENT
-- On SLASH reduce production value_name -> IDENT
-- On SEMI reduce production value_name -> IDENT
-- On PLUS_DOT reduce production value_name -> IDENT
-- On PLUS reduce production value_name -> IDENT
-- On NL reduce production value_name -> IDENT
-- On MOD reduce production value_name -> IDENT
-- On MINUS_DOT reduce production value_name -> IDENT
-- On MINUS reduce production value_name -> IDENT
-- On LPAREN reduce production value_name -> IDENT
-- On LOR reduce production value_name -> IDENT
-- On LESS_LESS reduce production value_name -> IDENT
-- On LESS_GREATER reduce production value_name -> IDENT
-- On LESS_EQUAL reduce production value_name -> IDENT
-- On LESS reduce production value_name -> IDENT
-- On LBRACK reduce production value_name -> IDENT
-- On LAND reduce production value_name -> IDENT
-- On INT reduce production value_name -> IDENT
-- On IDENT reduce production value_name -> IDENT
-- On GREATER_EQUAL reduce production value_name -> IDENT
-- On GREATER reduce production value_name -> IDENT
-- On FLOAT reduce production value_name -> IDENT
-- On EXTERNAL reduce production value_name -> IDENT
-- On EXCL reduce production value_name -> IDENT
-- On EXCEPTION reduce production value_name -> IDENT
-- On EQUAL reduce production value_name -> IDENT
-- On EOF reduce production value_name -> IDENT
-- On DOT reduce production value_name -> IDENT
-- On DOL reduce production value_name -> IDENT
-- On CONS reduce production value_name -> IDENT
-- On CHAR reduce production value_name -> IDENT
-- On BOOL reduce production value_name -> IDENT
-- On ATOM reduce production value_name -> IDENT
-- On AST_DOT reduce production value_name -> IDENT
-- On AST reduce production value_name -> IDENT
-- On AND reduce production value_name -> IDENT

State 535:
## Known stack suffix:
## IDENT LARROW
## LR(1) items:
expr -> IDENT LARROW . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 641
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 536:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . nl_opt rev_formal_args RARROW nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> FUN . nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 537
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 537:
## Known stack suffix:
## FUN nl_opt
## LR(1) items:
expr -> FUN nl_opt . rev_formal_args RARROW nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> FUN nl_opt . pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On rev_formal_args shift to state 538
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 543
-- On pattern shift to state 334
-- On formal_arg shift to state 335
-- On constr_name shift to state 146
## Reductions:

State 538:
## Known stack suffix:
## FUN nl_opt rev_formal_args
## LR(1) items:
expr -> FUN nl_opt rev_formal_args . RARROW nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_formal_args -> rev_formal_args . formal_arg [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT BOOL ATOM ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On RARROW shift to state 539
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 329
-- On formal_arg shift to state 330
-- On constr_name shift to state 146
## Reductions:

State 539:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW . nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 540
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 540:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW nl_opt
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW nl_opt . block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 541
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 541:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW nl_opt block
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW nl_opt block . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 542
## Reductions:

State 542:
## Known stack suffix:
## FUN nl_opt rev_formal_args RARROW nl_opt block END
## LR(1) items:
expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On UIDENT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On UARROW reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On TYPE reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On TOPVAR reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On TOPDEF reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On STRING reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On SEMI reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On NL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On MOD reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LPAREN reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LOR reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_LESS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_GREATER reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_EQUAL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LBRACK reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On LAND reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On INT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On IDENT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER_EQUAL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On FLOAT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On EXTERNAL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On EXCL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On EXCEPTION reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On EQUAL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On EOF reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On DOL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On CONS reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On CHAR reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On BOOL reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On ATOM reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On AST_DOT reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On AST reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END
-- On AND reduce production expr -> FUN nl_opt rev_formal_args RARROW nl_opt block END

State 543:
## Known stack suffix:
## FUN nl_opt pattern_matching
## LR(1) items:
expr -> FUN nl_opt pattern_matching . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 544
## Reductions:

State 544:
## Known stack suffix:
## FUN nl_opt pattern_matching END
## LR(1) items:
expr -> FUN nl_opt pattern_matching END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> FUN nl_opt pattern_matching END
-- On UIDENT reduce production expr -> FUN nl_opt pattern_matching END
-- On UARROW reduce production expr -> FUN nl_opt pattern_matching END
-- On TYPE reduce production expr -> FUN nl_opt pattern_matching END
-- On TOPVAR reduce production expr -> FUN nl_opt pattern_matching END
-- On TOPDEF reduce production expr -> FUN nl_opt pattern_matching END
-- On STRING reduce production expr -> FUN nl_opt pattern_matching END
-- On SLASH_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On SLASH reduce production expr -> FUN nl_opt pattern_matching END
-- On SEMI reduce production expr -> FUN nl_opt pattern_matching END
-- On PLUS_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On PLUS reduce production expr -> FUN nl_opt pattern_matching END
-- On NL reduce production expr -> FUN nl_opt pattern_matching END
-- On MOD reduce production expr -> FUN nl_opt pattern_matching END
-- On MINUS_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On MINUS reduce production expr -> FUN nl_opt pattern_matching END
-- On LPAREN reduce production expr -> FUN nl_opt pattern_matching END
-- On LOR reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS_LESS reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS_GREATER reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS_EQUAL reduce production expr -> FUN nl_opt pattern_matching END
-- On LESS reduce production expr -> FUN nl_opt pattern_matching END
-- On LBRACK reduce production expr -> FUN nl_opt pattern_matching END
-- On LAND reduce production expr -> FUN nl_opt pattern_matching END
-- On INT reduce production expr -> FUN nl_opt pattern_matching END
-- On IDENT reduce production expr -> FUN nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production expr -> FUN nl_opt pattern_matching END
-- On GREATER reduce production expr -> FUN nl_opt pattern_matching END
-- On FLOAT reduce production expr -> FUN nl_opt pattern_matching END
-- On EXTERNAL reduce production expr -> FUN nl_opt pattern_matching END
-- On EXCL reduce production expr -> FUN nl_opt pattern_matching END
-- On EXCEPTION reduce production expr -> FUN nl_opt pattern_matching END
-- On EQUAL reduce production expr -> FUN nl_opt pattern_matching END
-- On EOF reduce production expr -> FUN nl_opt pattern_matching END
-- On DOL reduce production expr -> FUN nl_opt pattern_matching END
-- On CONS reduce production expr -> FUN nl_opt pattern_matching END
-- On CHAR reduce production expr -> FUN nl_opt pattern_matching END
-- On BOOL reduce production expr -> FUN nl_opt pattern_matching END
-- On ATOM reduce production expr -> FUN nl_opt pattern_matching END
-- On AST_DOT reduce production expr -> FUN nl_opt pattern_matching END
-- On AST reduce production expr -> FUN nl_opt pattern_matching END
-- On AND reduce production expr -> FUN nl_opt pattern_matching END

State 545:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On IDENT shift to state 546
## Reductions:

State 546:
## Known stack suffix:
## FOR IDENT
## LR(1) items:
expr -> FOR IDENT . EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On EQUAL shift to state 547
## Reductions:

State 547:
## Known stack suffix:
## FOR IDENT EQUAL
## LR(1) items:
expr -> FOR IDENT EQUAL . expr TO nl_opt expr nl_opt DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 548
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 548:
## Known stack suffix:
## FOR IDENT EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW TO STRING SLASH_DOT SLASH PLUS_DOT PLUS MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> FOR IDENT EQUAL expr . TO nl_opt expr nl_opt DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On TO shift to state 549
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:

State 549:
## Known stack suffix:
## FOR IDENT EQUAL expr TO
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO . nl_opt expr nl_opt DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 550
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 550:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt . expr nl_opt DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On simple_expr shift to state 261
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 551
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 551:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MOD expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . PLUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . MINUS_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . AST_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . SLASH_DOT expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . UARROW expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . CONS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LAND expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LOR expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . LESS_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . GREATER_EQUAL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . DOL expr [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> expr . actual_args do_block [ UIDENT UARROW STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXCL EQUAL DOL DO CONS CHAR BOOL ATOM AST_DOT AST ]
expr -> FOR IDENT EQUAL expr TO nl_opt expr . nl_opt DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 116
-- On UARROW shift to state 267
-- On STRING shift to state 117
-- On SLASH_DOT shift to state 269
-- On SLASH shift to state 286
-- On PLUS_DOT shift to state 291
-- On PLUS shift to state 299
-- On NL shift to state 15
-- On MOD shift to state 293
-- On MINUS_DOT shift to state 301
-- On MINUS shift to state 303
-- On LPAREN shift to state 118
-- On LOR shift to state 305
-- On LESS_LESS shift to state 195
-- On LESS_GREATER shift to state 309
-- On LESS_EQUAL shift to state 313
-- On LESS shift to state 315
-- On LBRACK shift to state 220
-- On LAND shift to state 311
-- On INT shift to state 225
-- On IDENT shift to state 149
-- On GREATER_EQUAL shift to state 317
-- On GREATER shift to state 319
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On EQUAL shift to state 321
-- On DOL shift to state 323
-- On CONS shift to state 307
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On AST_DOT shift to state 295
-- On AST shift to state 297
-- On value_name shift to state 244
-- On simple_expr shift to state 271
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On nl_opt shift to state 552
-- On module_path shift to state 262
-- On field_expr shift to state 272
-- On binding shift to state 273
-- On array_expr shift to state 274
-- On actual_args shift to state 275
## Reductions:
-- On DO reduce production nl_opt ->

State 552:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt . DO nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On DO shift to state 553
## Reductions:

State 553:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO . nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 554
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 554:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt . block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 555
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 555:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 556
## Reductions:

State 556:
## Known stack suffix:
## FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
## LR(1) items:
expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On UIDENT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On UARROW reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On TYPE reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On TOPVAR reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On TOPDEF reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On STRING reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On SLASH_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On SLASH reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On SEMI reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On PLUS_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On PLUS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On NL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On MOD reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On MINUS_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On MINUS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LPAREN reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LOR reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS_LESS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS_GREATER reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS_EQUAL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LESS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LBRACK reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On LAND reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On INT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On IDENT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On GREATER_EQUAL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On GREATER reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On FLOAT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On EXTERNAL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On EXCL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On EXCEPTION reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On EQUAL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On EOF reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On DOL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On CONS reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On CHAR reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On BOOL reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On ATOM reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On AST_DOT reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On AST reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END
-- On AND reduce production expr -> FOR IDENT EQUAL expr TO nl_opt expr nl_opt DO nl_opt block END

State 557:
## Known stack suffix:
## DEF
## LR(1) items:
expr -> DEF . fundef IN nl_opt block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> DEF . REC fundef IN nl_opt block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On REC shift to state 558
-- On IDENT shift to state 255
-- On fundef shift to state 637
## Reductions:

State 558:
## Known stack suffix:
## DEF REC
## LR(1) items:
expr -> DEF REC . fundef IN nl_opt block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On IDENT shift to state 255
-- On fundef shift to state 559
## Reductions:

State 559:
## Known stack suffix:
## DEF REC fundef
## LR(1) items:
expr -> DEF REC fundef . IN nl_opt block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On IN shift to state 560
## Reductions:

State 560:
## Known stack suffix:
## DEF REC fundef IN
## LR(1) items:
expr -> DEF REC fundef IN . nl_opt block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 561
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 561:
## Known stack suffix:
## DEF REC fundef IN nl_opt
## LR(1) items:
expr -> DEF REC fundef IN nl_opt . block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On stmt shift to state 627
-- On simple_expr shift to state 564
-- On rev_stmts shift to state 628
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 631
-- On block shift to state 636
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 562:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 626
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 563:
## Known stack suffix:
## tuple
## LR(1) items:
expr -> tuple . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> tuple
-- On UIDENT reduce production expr -> tuple
-- On UARROW reduce production expr -> tuple
-- On TYPE reduce production expr -> tuple
-- On TOPVAR reduce production expr -> tuple
-- On TOPDEF reduce production expr -> tuple
-- On STRING reduce production expr -> tuple
-- On SLASH_DOT reduce production expr -> tuple
-- On SLASH reduce production expr -> tuple
-- On SEMI reduce production expr -> tuple
-- On PLUS_DOT reduce production expr -> tuple
-- On PLUS reduce production expr -> tuple
-- On NL reduce production expr -> tuple
-- On MOD reduce production expr -> tuple
-- On MINUS_DOT reduce production expr -> tuple
-- On MINUS reduce production expr -> tuple
-- On LPAREN reduce production expr -> tuple
-- On LOR reduce production expr -> tuple
-- On LESS_LESS reduce production expr -> tuple
-- On LESS_GREATER reduce production expr -> tuple
-- On LESS_EQUAL reduce production expr -> tuple
-- On LESS reduce production expr -> tuple
-- On LBRACK reduce production expr -> tuple
-- On LAND reduce production expr -> tuple
-- On INT reduce production expr -> tuple
-- On IDENT reduce production expr -> tuple
-- On GREATER_EQUAL reduce production expr -> tuple
-- On GREATER reduce production expr -> tuple
-- On FLOAT reduce production expr -> tuple
-- On EXTERNAL reduce production expr -> tuple
-- On EXCL reduce production expr -> tuple
-- On EXCEPTION reduce production expr -> tuple
-- On EQUAL reduce production expr -> tuple
-- On EOF reduce production expr -> tuple
-- On DOL reduce production expr -> tuple
-- On CONS reduce production expr -> tuple
-- On CHAR reduce production expr -> tuple
-- On BOOL reduce production expr -> tuple
-- On ATOM reduce production expr -> tuple
-- On AST_DOT reduce production expr -> tuple
-- On AST reduce production expr -> tuple
-- On AND reduce production expr -> tuple

State 564:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr -> simple_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> simple_expr
-- On UIDENT reduce production expr -> simple_expr
-- On UARROW reduce production expr -> simple_expr
-- On TYPE reduce production expr -> simple_expr
-- On TOPVAR reduce production expr -> simple_expr
-- On TOPDEF reduce production expr -> simple_expr
-- On STRING reduce production expr -> simple_expr
-- On SLASH_DOT reduce production expr -> simple_expr
-- On SLASH reduce production expr -> simple_expr
-- On SEMI reduce production expr -> simple_expr
-- On PLUS_DOT reduce production expr -> simple_expr
-- On PLUS reduce production expr -> simple_expr
-- On NL reduce production expr -> simple_expr
-- On MOD reduce production expr -> simple_expr
-- On MINUS_DOT reduce production expr -> simple_expr
-- On MINUS reduce production expr -> simple_expr
-- On LPAREN reduce production expr -> simple_expr
-- On LOR reduce production expr -> simple_expr
-- On LESS_LESS reduce production expr -> simple_expr
-- On LESS_GREATER reduce production expr -> simple_expr
-- On LESS_EQUAL reduce production expr -> simple_expr
-- On LESS reduce production expr -> simple_expr
-- On LBRACK reduce production expr -> simple_expr
-- On LAND reduce production expr -> simple_expr
-- On INT reduce production expr -> simple_expr
-- On IDENT reduce production expr -> simple_expr
-- On GREATER_EQUAL reduce production expr -> simple_expr
-- On GREATER reduce production expr -> simple_expr
-- On FLOAT reduce production expr -> simple_expr
-- On EXTERNAL reduce production expr -> simple_expr
-- On EXCL reduce production expr -> simple_expr
-- On EXCEPTION reduce production expr -> simple_expr
-- On EQUAL reduce production expr -> simple_expr
-- On EOF reduce production expr -> simple_expr
-- On DOL reduce production expr -> simple_expr
-- On CONS reduce production expr -> simple_expr
-- On CHAR reduce production expr -> simple_expr
-- On BOOL reduce production expr -> simple_expr
-- On ATOM reduce production expr -> simple_expr
-- On AST_DOT reduce production expr -> simple_expr
-- On AST reduce production expr -> simple_expr
-- On AND reduce production expr -> simple_expr

State 565:
## Known stack suffix:
## if_exp
## LR(1) items:
expr -> if_exp . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> if_exp
-- On UIDENT reduce production expr -> if_exp
-- On UARROW reduce production expr -> if_exp
-- On TYPE reduce production expr -> if_exp
-- On TOPVAR reduce production expr -> if_exp
-- On TOPDEF reduce production expr -> if_exp
-- On STRING reduce production expr -> if_exp
-- On SLASH_DOT reduce production expr -> if_exp
-- On SLASH reduce production expr -> if_exp
-- On SEMI reduce production expr -> if_exp
-- On PLUS_DOT reduce production expr -> if_exp
-- On PLUS reduce production expr -> if_exp
-- On NL reduce production expr -> if_exp
-- On MOD reduce production expr -> if_exp
-- On MINUS_DOT reduce production expr -> if_exp
-- On MINUS reduce production expr -> if_exp
-- On LPAREN reduce production expr -> if_exp
-- On LOR reduce production expr -> if_exp
-- On LESS_LESS reduce production expr -> if_exp
-- On LESS_GREATER reduce production expr -> if_exp
-- On LESS_EQUAL reduce production expr -> if_exp
-- On LESS reduce production expr -> if_exp
-- On LBRACK reduce production expr -> if_exp
-- On LAND reduce production expr -> if_exp
-- On INT reduce production expr -> if_exp
-- On IDENT reduce production expr -> if_exp
-- On GREATER_EQUAL reduce production expr -> if_exp
-- On GREATER reduce production expr -> if_exp
-- On FLOAT reduce production expr -> if_exp
-- On EXTERNAL reduce production expr -> if_exp
-- On EXCL reduce production expr -> if_exp
-- On EXCEPTION reduce production expr -> if_exp
-- On EQUAL reduce production expr -> if_exp
-- On EOF reduce production expr -> if_exp
-- On DOL reduce production expr -> if_exp
-- On CONS reduce production expr -> if_exp
-- On CHAR reduce production expr -> if_exp
-- On BOOL reduce production expr -> if_exp
-- On ATOM reduce production expr -> if_exp
-- On AST_DOT reduce production expr -> if_exp
-- On AST reduce production expr -> if_exp
-- On AND reduce production expr -> if_exp

State 566:
## Known stack suffix:
## field_expr
## LR(1) items:
expr -> field_expr . LARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> field_expr . ASSIGN nl_opt expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
simple_expr -> field_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On LARROW shift to state 567
-- On ASSIGN shift to state 623
## Reductions:
-- On error reduce production simple_expr -> field_expr
-- On UIDENT reduce production simple_expr -> field_expr
-- On UARROW reduce production simple_expr -> field_expr
-- On TYPE reduce production simple_expr -> field_expr
-- On TOPVAR reduce production simple_expr -> field_expr
-- On TOPDEF reduce production simple_expr -> field_expr
-- On STRING reduce production simple_expr -> field_expr
-- On SLASH_DOT reduce production simple_expr -> field_expr
-- On SLASH reduce production simple_expr -> field_expr
-- On SEMI reduce production simple_expr -> field_expr
-- On PLUS_DOT reduce production simple_expr -> field_expr
-- On PLUS reduce production simple_expr -> field_expr
-- On NL reduce production simple_expr -> field_expr
-- On MOD reduce production simple_expr -> field_expr
-- On MINUS_DOT reduce production simple_expr -> field_expr
-- On MINUS reduce production simple_expr -> field_expr
-- On LPAREN reduce production simple_expr -> field_expr
-- On LOR reduce production simple_expr -> field_expr
-- On LESS_LESS reduce production simple_expr -> field_expr
-- On LESS_GREATER reduce production simple_expr -> field_expr
-- On LESS_EQUAL reduce production simple_expr -> field_expr
-- On LESS reduce production simple_expr -> field_expr
-- On LBRACK reduce production simple_expr -> field_expr
-- On LAND reduce production simple_expr -> field_expr
-- On INT reduce production simple_expr -> field_expr
-- On IDENT reduce production simple_expr -> field_expr
-- On GREATER_EQUAL reduce production simple_expr -> field_expr
-- On GREATER reduce production simple_expr -> field_expr
-- On FLOAT reduce production simple_expr -> field_expr
-- On EXTERNAL reduce production simple_expr -> field_expr
-- On EXCL reduce production simple_expr -> field_expr
-- On EXCEPTION reduce production simple_expr -> field_expr
-- On EQUAL reduce production simple_expr -> field_expr
-- On EOF reduce production simple_expr -> field_expr
-- On DOL reduce production simple_expr -> field_expr
-- On CONS reduce production simple_expr -> field_expr
-- On CHAR reduce production simple_expr -> field_expr
-- On BOOL reduce production simple_expr -> field_expr
-- On ATOM reduce production simple_expr -> field_expr
-- On AST_DOT reduce production simple_expr -> field_expr
-- On AST reduce production simple_expr -> field_expr
-- On AND reduce production simple_expr -> field_expr

State 567:
## Known stack suffix:
## field_expr LARROW
## LR(1) items:
expr -> field_expr LARROW . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 568
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 568:
## Known stack suffix:
## field_expr LARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> field_expr LARROW expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LESS_GREATER shift to state 609
-- On LESS_EQUAL shift to state 613
-- On LESS shift to state 615
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On GREATER_EQUAL shift to state 617
-- On GREATER shift to state 619
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On EQUAL shift to state 621
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> field_expr LARROW expr
-- On TYPE reduce production expr -> field_expr LARROW expr
-- On TOPVAR reduce production expr -> field_expr LARROW expr
-- On TOPDEF reduce production expr -> field_expr LARROW expr
-- On SEMI reduce production expr -> field_expr LARROW expr
-- On NL reduce production expr -> field_expr LARROW expr
-- On EXTERNAL reduce production expr -> field_expr LARROW expr
-- On EXCEPTION reduce production expr -> field_expr LARROW expr
-- On EOF reduce production expr -> field_expr LARROW expr
-- On DOL reduce production expr -> field_expr LARROW expr
-- On AND reduce production expr -> field_expr LARROW expr

State 569:
## Known stack suffix:
## expr UARROW
## LR(1) items:
expr -> expr UARROW . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 570
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 570:
## Known stack suffix:
## expr UARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr UARROW expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr UARROW expr
-- On TYPE reduce production expr -> expr UARROW expr
-- On TOPVAR reduce production expr -> expr UARROW expr
-- On TOPDEF reduce production expr -> expr UARROW expr
-- On SEMI reduce production expr -> expr UARROW expr
-- On NL reduce production expr -> expr UARROW expr
-- On LOR reduce production expr -> expr UARROW expr
-- On LESS_GREATER reduce production expr -> expr UARROW expr
-- On LESS_EQUAL reduce production expr -> expr UARROW expr
-- On LESS reduce production expr -> expr UARROW expr
-- On LAND reduce production expr -> expr UARROW expr
-- On GREATER_EQUAL reduce production expr -> expr UARROW expr
-- On GREATER reduce production expr -> expr UARROW expr
-- On EXTERNAL reduce production expr -> expr UARROW expr
-- On EXCEPTION reduce production expr -> expr UARROW expr
-- On EQUAL reduce production expr -> expr UARROW expr
-- On EOF reduce production expr -> expr UARROW expr
-- On DOL reduce production expr -> expr UARROW expr
-- On AND reduce production expr -> expr UARROW expr

State 571:
## Known stack suffix:
## expr SLASH_DOT
## LR(1) items:
expr -> expr SLASH_DOT . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 572
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 572:
## Known stack suffix:
## expr SLASH_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr SLASH_DOT expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr SLASH_DOT expr
-- On UARROW reduce production expr -> expr SLASH_DOT expr
-- On TYPE reduce production expr -> expr SLASH_DOT expr
-- On TOPVAR reduce production expr -> expr SLASH_DOT expr
-- On TOPDEF reduce production expr -> expr SLASH_DOT expr
-- On SLASH_DOT reduce production expr -> expr SLASH_DOT expr
-- On SLASH reduce production expr -> expr SLASH_DOT expr
-- On SEMI reduce production expr -> expr SLASH_DOT expr
-- On PLUS_DOT reduce production expr -> expr SLASH_DOT expr
-- On PLUS reduce production expr -> expr SLASH_DOT expr
-- On NL reduce production expr -> expr SLASH_DOT expr
-- On MOD reduce production expr -> expr SLASH_DOT expr
-- On MINUS_DOT reduce production expr -> expr SLASH_DOT expr
-- On MINUS reduce production expr -> expr SLASH_DOT expr
-- On LOR reduce production expr -> expr SLASH_DOT expr
-- On LESS_GREATER reduce production expr -> expr SLASH_DOT expr
-- On LESS_EQUAL reduce production expr -> expr SLASH_DOT expr
-- On LESS reduce production expr -> expr SLASH_DOT expr
-- On LAND reduce production expr -> expr SLASH_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr SLASH_DOT expr
-- On GREATER reduce production expr -> expr SLASH_DOT expr
-- On EXTERNAL reduce production expr -> expr SLASH_DOT expr
-- On EXCEPTION reduce production expr -> expr SLASH_DOT expr
-- On EQUAL reduce production expr -> expr SLASH_DOT expr
-- On EOF reduce production expr -> expr SLASH_DOT expr
-- On DOL reduce production expr -> expr SLASH_DOT expr
-- On CONS reduce production expr -> expr SLASH_DOT expr
-- On AST_DOT reduce production expr -> expr SLASH_DOT expr
-- On AST reduce production expr -> expr SLASH_DOT expr
-- On AND reduce production expr -> expr SLASH_DOT expr

State 573:
## Known stack suffix:
## simple_expr
## LR(1) items:
actual_args -> simple_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production actual_args -> simple_expr
-- On UIDENT reduce production actual_args -> simple_expr
-- On UARROW reduce production actual_args -> simple_expr
-- On TYPE reduce production actual_args -> simple_expr
-- On TOPVAR reduce production actual_args -> simple_expr
-- On TOPDEF reduce production actual_args -> simple_expr
-- On STRING reduce production actual_args -> simple_expr
-- On SLASH_DOT reduce production actual_args -> simple_expr
-- On SLASH reduce production actual_args -> simple_expr
-- On SEMI reduce production actual_args -> simple_expr
-- On PLUS_DOT reduce production actual_args -> simple_expr
-- On PLUS reduce production actual_args -> simple_expr
-- On NL reduce production actual_args -> simple_expr
-- On MOD reduce production actual_args -> simple_expr
-- On MINUS_DOT reduce production actual_args -> simple_expr
-- On MINUS reduce production actual_args -> simple_expr
-- On LPAREN reduce production actual_args -> simple_expr
-- On LOR reduce production actual_args -> simple_expr
-- On LESS_LESS reduce production actual_args -> simple_expr
-- On LESS_GREATER reduce production actual_args -> simple_expr
-- On LESS_EQUAL reduce production actual_args -> simple_expr
-- On LESS reduce production actual_args -> simple_expr
-- On LBRACK reduce production actual_args -> simple_expr
-- On LAND reduce production actual_args -> simple_expr
-- On INT reduce production actual_args -> simple_expr
-- On IDENT reduce production actual_args -> simple_expr
-- On GREATER_EQUAL reduce production actual_args -> simple_expr
-- On GREATER reduce production actual_args -> simple_expr
-- On FLOAT reduce production actual_args -> simple_expr
-- On EXTERNAL reduce production actual_args -> simple_expr
-- On EXCL reduce production actual_args -> simple_expr
-- On EXCEPTION reduce production actual_args -> simple_expr
-- On EQUAL reduce production actual_args -> simple_expr
-- On EOF reduce production actual_args -> simple_expr
-- On DOL reduce production actual_args -> simple_expr
-- On DO reduce production actual_args -> simple_expr
-- On CONS reduce production actual_args -> simple_expr
-- On CHAR reduce production actual_args -> simple_expr
-- On BOOL reduce production actual_args -> simple_expr
-- On ATOM reduce production actual_args -> simple_expr
-- On AST_DOT reduce production actual_args -> simple_expr
-- On AST reduce production actual_args -> simple_expr
-- On AND reduce production actual_args -> simple_expr

State 574:
## Known stack suffix:
## expr actual_args
## LR(1) items:
actual_args -> actual_args . simple_expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr actual_args . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr actual_args . do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DO shift to state 575
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 584
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On do_block shift to state 585
-- On binding shift to state 482
-- On array_expr shift to state 483
## Reductions:
-- On error reduce production expr -> expr actual_args
-- On UARROW reduce production expr -> expr actual_args
-- On TYPE reduce production expr -> expr actual_args
-- On TOPVAR reduce production expr -> expr actual_args
-- On TOPDEF reduce production expr -> expr actual_args
-- On SLASH_DOT reduce production expr -> expr actual_args
-- On SLASH reduce production expr -> expr actual_args
-- On SEMI reduce production expr -> expr actual_args
-- On PLUS_DOT reduce production expr -> expr actual_args
-- On PLUS reduce production expr -> expr actual_args
-- On NL reduce production expr -> expr actual_args
-- On MOD reduce production expr -> expr actual_args
-- On MINUS_DOT reduce production expr -> expr actual_args
-- On MINUS reduce production expr -> expr actual_args
-- On LOR reduce production expr -> expr actual_args
-- On LESS_GREATER reduce production expr -> expr actual_args
-- On LESS_EQUAL reduce production expr -> expr actual_args
-- On LESS reduce production expr -> expr actual_args
-- On LAND reduce production expr -> expr actual_args
-- On GREATER_EQUAL reduce production expr -> expr actual_args
-- On GREATER reduce production expr -> expr actual_args
-- On EXTERNAL reduce production expr -> expr actual_args
-- On EXCEPTION reduce production expr -> expr actual_args
-- On EQUAL reduce production expr -> expr actual_args
-- On EOF reduce production expr -> expr actual_args
-- On DOL reduce production expr -> expr actual_args
-- On CONS reduce production expr -> expr actual_args
-- On AST_DOT reduce production expr -> expr actual_args
-- On AST reduce production expr -> expr actual_args
-- On AND reduce production expr -> expr actual_args

State 575:
## Known stack suffix:
## DO
## LR(1) items:
do_block -> DO . nl_opt rev_formal_args RARROW nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
do_block -> DO . nl_opt pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 576
## Reductions:
-- On UIDENT reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On PIPE reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->

State 576:
## Known stack suffix:
## DO nl_opt
## LR(1) items:
do_block -> DO nl_opt . rev_formal_args RARROW nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
do_block -> DO nl_opt . pattern_matching END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On PIPE shift to state 127
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_pattern_matching_elts shift to state 231
-- On rev_pattern_matching shift to state 232
-- On rev_module_path shift to state 140
-- On rev_formal_args shift to state 577
-- On pattern_matching_elt shift to state 331
-- On pattern_matching shift to state 582
-- On pattern shift to state 334
-- On formal_arg shift to state 335
-- On constr_name shift to state 146
## Reductions:

State 577:
## Known stack suffix:
## DO nl_opt rev_formal_args
## LR(1) items:
do_block -> DO nl_opt rev_formal_args . RARROW nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_formal_args -> rev_formal_args . formal_arg [ UIDENT STRING RARROW LPAREN LBRACK LBRACE INT IDENT FLOAT BOOL ATOM ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On RARROW shift to state 578
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 329
-- On formal_arg shift to state 330
-- On constr_name shift to state 146
## Reductions:

State 578:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW . nl_opt block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 579
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 579:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW nl_opt
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW nl_opt . block END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 111
-- On UIDENT shift to state 115
-- On TRY shift to state 119
-- On STRING shift to state 117
-- On RETURN shift to state 121
-- On RECEIVE shift to state 122
-- On RAISE shift to state 186
-- On PERFORM shift to state 187
-- On NOT shift to state 189
-- On MINUS shift to state 190
-- On MATCH shift to state 191
-- On LPAREN shift to state 193
-- On LESS_LESS shift to state 195
-- On LBRACK shift to state 220
-- On LBRACE shift to state 222
-- On INT shift to state 225
-- On IF shift to state 226
-- On IDENT shift to state 227
-- On FUN shift to state 229
-- On FOR shift to state 236
-- On FLOAT shift to state 239
-- On EXCL shift to state 240
-- On DEF shift to state 253
-- On CHAR shift to state 241
-- On BOOL shift to state 242
-- On ATOM shift to state 243
-- On ASSERT shift to state 259
-- On value_name shift to state 244
-- On tuple shift to state 260
-- On stmt shift to state 281
-- On simple_expr shift to state 261
-- On rev_stmts shift to state 282
-- On rev_module_path shift to state 246
-- On primary shift to state 249
-- On module_path shift to state 262
-- On if_exp shift to state 263
-- On field_expr shift to state 264
-- On expr shift to state 285
-- On block shift to state 580
-- On binding shift to state 273
-- On array_expr shift to state 288
## Reductions:

State 580:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW nl_opt block
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW nl_opt block . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 581
## Reductions:

State 581:
## Known stack suffix:
## DO nl_opt rev_formal_args RARROW nl_opt block END
## LR(1) items:
do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On UIDENT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On UARROW reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On TYPE reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On TOPVAR reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On TOPDEF reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On STRING reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On SLASH reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On SEMI reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On PLUS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On NL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On MOD reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On MINUS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LPAREN reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LOR reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_LESS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_GREATER reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS_EQUAL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LESS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LBRACK reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On LAND reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On INT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On IDENT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER_EQUAL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On GREATER reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On FLOAT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On EXTERNAL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On EXCL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On EXCEPTION reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On EQUAL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On EOF reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On DOL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On CONS reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On CHAR reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On BOOL reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On ATOM reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On AST_DOT reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On AST reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END
-- On AND reduce production do_block -> DO nl_opt rev_formal_args RARROW nl_opt block END

State 582:
## Known stack suffix:
## DO nl_opt pattern_matching
## LR(1) items:
do_block -> DO nl_opt pattern_matching . END [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On END shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## DO nl_opt pattern_matching END
## LR(1) items:
do_block -> DO nl_opt pattern_matching END . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production do_block -> DO nl_opt pattern_matching END
-- On UIDENT reduce production do_block -> DO nl_opt pattern_matching END
-- On UARROW reduce production do_block -> DO nl_opt pattern_matching END
-- On TYPE reduce production do_block -> DO nl_opt pattern_matching END
-- On TOPVAR reduce production do_block -> DO nl_opt pattern_matching END
-- On TOPDEF reduce production do_block -> DO nl_opt pattern_matching END
-- On STRING reduce production do_block -> DO nl_opt pattern_matching END
-- On SLASH_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On SLASH reduce production do_block -> DO nl_opt pattern_matching END
-- On SEMI reduce production do_block -> DO nl_opt pattern_matching END
-- On PLUS_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On PLUS reduce production do_block -> DO nl_opt pattern_matching END
-- On NL reduce production do_block -> DO nl_opt pattern_matching END
-- On MOD reduce production do_block -> DO nl_opt pattern_matching END
-- On MINUS_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On MINUS reduce production do_block -> DO nl_opt pattern_matching END
-- On LPAREN reduce production do_block -> DO nl_opt pattern_matching END
-- On LOR reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS_LESS reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS_GREATER reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS_EQUAL reduce production do_block -> DO nl_opt pattern_matching END
-- On LESS reduce production do_block -> DO nl_opt pattern_matching END
-- On LBRACK reduce production do_block -> DO nl_opt pattern_matching END
-- On LAND reduce production do_block -> DO nl_opt pattern_matching END
-- On INT reduce production do_block -> DO nl_opt pattern_matching END
-- On IDENT reduce production do_block -> DO nl_opt pattern_matching END
-- On GREATER_EQUAL reduce production do_block -> DO nl_opt pattern_matching END
-- On GREATER reduce production do_block -> DO nl_opt pattern_matching END
-- On FLOAT reduce production do_block -> DO nl_opt pattern_matching END
-- On EXTERNAL reduce production do_block -> DO nl_opt pattern_matching END
-- On EXCL reduce production do_block -> DO nl_opt pattern_matching END
-- On EXCEPTION reduce production do_block -> DO nl_opt pattern_matching END
-- On EQUAL reduce production do_block -> DO nl_opt pattern_matching END
-- On EOF reduce production do_block -> DO nl_opt pattern_matching END
-- On DOL reduce production do_block -> DO nl_opt pattern_matching END
-- On CONS reduce production do_block -> DO nl_opt pattern_matching END
-- On CHAR reduce production do_block -> DO nl_opt pattern_matching END
-- On BOOL reduce production do_block -> DO nl_opt pattern_matching END
-- On ATOM reduce production do_block -> DO nl_opt pattern_matching END
-- On AST_DOT reduce production do_block -> DO nl_opt pattern_matching END
-- On AST reduce production do_block -> DO nl_opt pattern_matching END
-- On AND reduce production do_block -> DO nl_opt pattern_matching END

State 584:
## Known stack suffix:
## actual_args simple_expr
## LR(1) items:
actual_args -> actual_args simple_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL DO CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production actual_args -> actual_args simple_expr
-- On UIDENT reduce production actual_args -> actual_args simple_expr
-- On UARROW reduce production actual_args -> actual_args simple_expr
-- On TYPE reduce production actual_args -> actual_args simple_expr
-- On TOPVAR reduce production actual_args -> actual_args simple_expr
-- On TOPDEF reduce production actual_args -> actual_args simple_expr
-- On STRING reduce production actual_args -> actual_args simple_expr
-- On SLASH_DOT reduce production actual_args -> actual_args simple_expr
-- On SLASH reduce production actual_args -> actual_args simple_expr
-- On SEMI reduce production actual_args -> actual_args simple_expr
-- On PLUS_DOT reduce production actual_args -> actual_args simple_expr
-- On PLUS reduce production actual_args -> actual_args simple_expr
-- On NL reduce production actual_args -> actual_args simple_expr
-- On MOD reduce production actual_args -> actual_args simple_expr
-- On MINUS_DOT reduce production actual_args -> actual_args simple_expr
-- On MINUS reduce production actual_args -> actual_args simple_expr
-- On LPAREN reduce production actual_args -> actual_args simple_expr
-- On LOR reduce production actual_args -> actual_args simple_expr
-- On LESS_LESS reduce production actual_args -> actual_args simple_expr
-- On LESS_GREATER reduce production actual_args -> actual_args simple_expr
-- On LESS_EQUAL reduce production actual_args -> actual_args simple_expr
-- On LESS reduce production actual_args -> actual_args simple_expr
-- On LBRACK reduce production actual_args -> actual_args simple_expr
-- On LAND reduce production actual_args -> actual_args simple_expr
-- On INT reduce production actual_args -> actual_args simple_expr
-- On IDENT reduce production actual_args -> actual_args simple_expr
-- On GREATER_EQUAL reduce production actual_args -> actual_args simple_expr
-- On GREATER reduce production actual_args -> actual_args simple_expr
-- On FLOAT reduce production actual_args -> actual_args simple_expr
-- On EXTERNAL reduce production actual_args -> actual_args simple_expr
-- On EXCL reduce production actual_args -> actual_args simple_expr
-- On EXCEPTION reduce production actual_args -> actual_args simple_expr
-- On EQUAL reduce production actual_args -> actual_args simple_expr
-- On EOF reduce production actual_args -> actual_args simple_expr
-- On DOL reduce production actual_args -> actual_args simple_expr
-- On DO reduce production actual_args -> actual_args simple_expr
-- On CONS reduce production actual_args -> actual_args simple_expr
-- On CHAR reduce production actual_args -> actual_args simple_expr
-- On BOOL reduce production actual_args -> actual_args simple_expr
-- On ATOM reduce production actual_args -> actual_args simple_expr
-- On AST_DOT reduce production actual_args -> actual_args simple_expr
-- On AST reduce production actual_args -> actual_args simple_expr
-- On AND reduce production actual_args -> actual_args simple_expr

State 585:
## Known stack suffix:
## expr actual_args do_block
## LR(1) items:
expr -> expr actual_args do_block . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> expr actual_args do_block
-- On UIDENT reduce production expr -> expr actual_args do_block
-- On UARROW reduce production expr -> expr actual_args do_block
-- On TYPE reduce production expr -> expr actual_args do_block
-- On TOPVAR reduce production expr -> expr actual_args do_block
-- On TOPDEF reduce production expr -> expr actual_args do_block
-- On STRING reduce production expr -> expr actual_args do_block
-- On SLASH_DOT reduce production expr -> expr actual_args do_block
-- On SLASH reduce production expr -> expr actual_args do_block
-- On SEMI reduce production expr -> expr actual_args do_block
-- On PLUS_DOT reduce production expr -> expr actual_args do_block
-- On PLUS reduce production expr -> expr actual_args do_block
-- On NL reduce production expr -> expr actual_args do_block
-- On MOD reduce production expr -> expr actual_args do_block
-- On MINUS_DOT reduce production expr -> expr actual_args do_block
-- On MINUS reduce production expr -> expr actual_args do_block
-- On LPAREN reduce production expr -> expr actual_args do_block
-- On LOR reduce production expr -> expr actual_args do_block
-- On LESS_LESS reduce production expr -> expr actual_args do_block
-- On LESS_GREATER reduce production expr -> expr actual_args do_block
-- On LESS_EQUAL reduce production expr -> expr actual_args do_block
-- On LESS reduce production expr -> expr actual_args do_block
-- On LBRACK reduce production expr -> expr actual_args do_block
-- On LAND reduce production expr -> expr actual_args do_block
-- On INT reduce production expr -> expr actual_args do_block
-- On IDENT reduce production expr -> expr actual_args do_block
-- On GREATER_EQUAL reduce production expr -> expr actual_args do_block
-- On GREATER reduce production expr -> expr actual_args do_block
-- On FLOAT reduce production expr -> expr actual_args do_block
-- On EXTERNAL reduce production expr -> expr actual_args do_block
-- On EXCL reduce production expr -> expr actual_args do_block
-- On EXCEPTION reduce production expr -> expr actual_args do_block
-- On EQUAL reduce production expr -> expr actual_args do_block
-- On EOF reduce production expr -> expr actual_args do_block
-- On DOL reduce production expr -> expr actual_args do_block
-- On CONS reduce production expr -> expr actual_args do_block
-- On CHAR reduce production expr -> expr actual_args do_block
-- On BOOL reduce production expr -> expr actual_args do_block
-- On ATOM reduce production expr -> expr actual_args do_block
-- On AST_DOT reduce production expr -> expr actual_args do_block
-- On AST reduce production expr -> expr actual_args do_block
-- On AND reduce production expr -> expr actual_args do_block

State 586:
## Known stack suffix:
## array_expr
## LR(1) items:
expr -> array_expr . LARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
simple_expr -> array_expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On LARROW shift to state 587
## Reductions:
-- On error reduce production simple_expr -> array_expr
-- On UIDENT reduce production simple_expr -> array_expr
-- On UARROW reduce production simple_expr -> array_expr
-- On TYPE reduce production simple_expr -> array_expr
-- On TOPVAR reduce production simple_expr -> array_expr
-- On TOPDEF reduce production simple_expr -> array_expr
-- On STRING reduce production simple_expr -> array_expr
-- On SLASH_DOT reduce production simple_expr -> array_expr
-- On SLASH reduce production simple_expr -> array_expr
-- On SEMI reduce production simple_expr -> array_expr
-- On PLUS_DOT reduce production simple_expr -> array_expr
-- On PLUS reduce production simple_expr -> array_expr
-- On NL reduce production simple_expr -> array_expr
-- On MOD reduce production simple_expr -> array_expr
-- On MINUS_DOT reduce production simple_expr -> array_expr
-- On MINUS reduce production simple_expr -> array_expr
-- On LPAREN reduce production simple_expr -> array_expr
-- On LOR reduce production simple_expr -> array_expr
-- On LESS_LESS reduce production simple_expr -> array_expr
-- On LESS_GREATER reduce production simple_expr -> array_expr
-- On LESS_EQUAL reduce production simple_expr -> array_expr
-- On LESS reduce production simple_expr -> array_expr
-- On LBRACK reduce production simple_expr -> array_expr
-- On LAND reduce production simple_expr -> array_expr
-- On INT reduce production simple_expr -> array_expr
-- On IDENT reduce production simple_expr -> array_expr
-- On GREATER_EQUAL reduce production simple_expr -> array_expr
-- On GREATER reduce production simple_expr -> array_expr
-- On FLOAT reduce production simple_expr -> array_expr
-- On EXTERNAL reduce production simple_expr -> array_expr
-- On EXCL reduce production simple_expr -> array_expr
-- On EXCEPTION reduce production simple_expr -> array_expr
-- On EQUAL reduce production simple_expr -> array_expr
-- On EOF reduce production simple_expr -> array_expr
-- On DOL reduce production simple_expr -> array_expr
-- On CONS reduce production simple_expr -> array_expr
-- On CHAR reduce production simple_expr -> array_expr
-- On BOOL reduce production simple_expr -> array_expr
-- On ATOM reduce production simple_expr -> array_expr
-- On AST_DOT reduce production simple_expr -> array_expr
-- On AST reduce production simple_expr -> array_expr
-- On AND reduce production simple_expr -> array_expr

State 587:
## Known stack suffix:
## array_expr LARROW
## LR(1) items:
expr -> array_expr LARROW . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 588
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 588:
## Known stack suffix:
## array_expr LARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> array_expr LARROW expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LESS_GREATER shift to state 609
-- On LESS_EQUAL shift to state 613
-- On LESS shift to state 615
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On GREATER_EQUAL shift to state 617
-- On GREATER shift to state 619
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On EQUAL shift to state 621
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> array_expr LARROW expr
-- On TYPE reduce production expr -> array_expr LARROW expr
-- On TOPVAR reduce production expr -> array_expr LARROW expr
-- On TOPDEF reduce production expr -> array_expr LARROW expr
-- On SEMI reduce production expr -> array_expr LARROW expr
-- On NL reduce production expr -> array_expr LARROW expr
-- On EXTERNAL reduce production expr -> array_expr LARROW expr
-- On EXCEPTION reduce production expr -> array_expr LARROW expr
-- On EOF reduce production expr -> array_expr LARROW expr
-- On DOL reduce production expr -> array_expr LARROW expr
-- On AND reduce production expr -> array_expr LARROW expr

State 589:
## Known stack suffix:
## expr SLASH
## LR(1) items:
expr -> expr SLASH . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 590
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 590:
## Known stack suffix:
## expr SLASH expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr SLASH expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr SLASH expr
-- On UARROW reduce production expr -> expr SLASH expr
-- On TYPE reduce production expr -> expr SLASH expr
-- On TOPVAR reduce production expr -> expr SLASH expr
-- On TOPDEF reduce production expr -> expr SLASH expr
-- On SLASH_DOT reduce production expr -> expr SLASH expr
-- On SLASH reduce production expr -> expr SLASH expr
-- On SEMI reduce production expr -> expr SLASH expr
-- On PLUS_DOT reduce production expr -> expr SLASH expr
-- On PLUS reduce production expr -> expr SLASH expr
-- On NL reduce production expr -> expr SLASH expr
-- On MOD reduce production expr -> expr SLASH expr
-- On MINUS_DOT reduce production expr -> expr SLASH expr
-- On MINUS reduce production expr -> expr SLASH expr
-- On LOR reduce production expr -> expr SLASH expr
-- On LESS_GREATER reduce production expr -> expr SLASH expr
-- On LESS_EQUAL reduce production expr -> expr SLASH expr
-- On LESS reduce production expr -> expr SLASH expr
-- On LAND reduce production expr -> expr SLASH expr
-- On GREATER_EQUAL reduce production expr -> expr SLASH expr
-- On GREATER reduce production expr -> expr SLASH expr
-- On EXTERNAL reduce production expr -> expr SLASH expr
-- On EXCEPTION reduce production expr -> expr SLASH expr
-- On EQUAL reduce production expr -> expr SLASH expr
-- On EOF reduce production expr -> expr SLASH expr
-- On DOL reduce production expr -> expr SLASH expr
-- On CONS reduce production expr -> expr SLASH expr
-- On AST_DOT reduce production expr -> expr SLASH expr
-- On AST reduce production expr -> expr SLASH expr
-- On AND reduce production expr -> expr SLASH expr

State 591:
## Known stack suffix:
## expr PLUS_DOT
## LR(1) items:
expr -> expr PLUS_DOT . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 592
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 592:
## Known stack suffix:
## expr PLUS_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr PLUS_DOT expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On MOD shift to state 593
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr PLUS_DOT expr
-- On UARROW reduce production expr -> expr PLUS_DOT expr
-- On TYPE reduce production expr -> expr PLUS_DOT expr
-- On TOPVAR reduce production expr -> expr PLUS_DOT expr
-- On TOPDEF reduce production expr -> expr PLUS_DOT expr
-- On SEMI reduce production expr -> expr PLUS_DOT expr
-- On PLUS_DOT reduce production expr -> expr PLUS_DOT expr
-- On PLUS reduce production expr -> expr PLUS_DOT expr
-- On NL reduce production expr -> expr PLUS_DOT expr
-- On MINUS_DOT reduce production expr -> expr PLUS_DOT expr
-- On MINUS reduce production expr -> expr PLUS_DOT expr
-- On LOR reduce production expr -> expr PLUS_DOT expr
-- On LESS_GREATER reduce production expr -> expr PLUS_DOT expr
-- On LESS_EQUAL reduce production expr -> expr PLUS_DOT expr
-- On LESS reduce production expr -> expr PLUS_DOT expr
-- On LAND reduce production expr -> expr PLUS_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr PLUS_DOT expr
-- On GREATER reduce production expr -> expr PLUS_DOT expr
-- On EXTERNAL reduce production expr -> expr PLUS_DOT expr
-- On EXCEPTION reduce production expr -> expr PLUS_DOT expr
-- On EQUAL reduce production expr -> expr PLUS_DOT expr
-- On EOF reduce production expr -> expr PLUS_DOT expr
-- On DOL reduce production expr -> expr PLUS_DOT expr
-- On CONS reduce production expr -> expr PLUS_DOT expr
-- On AND reduce production expr -> expr PLUS_DOT expr

State 593:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 594
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 594:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr MOD expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr MOD expr
-- On UARROW reduce production expr -> expr MOD expr
-- On TYPE reduce production expr -> expr MOD expr
-- On TOPVAR reduce production expr -> expr MOD expr
-- On TOPDEF reduce production expr -> expr MOD expr
-- On SLASH_DOT reduce production expr -> expr MOD expr
-- On SLASH reduce production expr -> expr MOD expr
-- On SEMI reduce production expr -> expr MOD expr
-- On PLUS_DOT reduce production expr -> expr MOD expr
-- On PLUS reduce production expr -> expr MOD expr
-- On NL reduce production expr -> expr MOD expr
-- On MOD reduce production expr -> expr MOD expr
-- On MINUS_DOT reduce production expr -> expr MOD expr
-- On MINUS reduce production expr -> expr MOD expr
-- On LOR reduce production expr -> expr MOD expr
-- On LESS_GREATER reduce production expr -> expr MOD expr
-- On LESS_EQUAL reduce production expr -> expr MOD expr
-- On LESS reduce production expr -> expr MOD expr
-- On LAND reduce production expr -> expr MOD expr
-- On GREATER_EQUAL reduce production expr -> expr MOD expr
-- On GREATER reduce production expr -> expr MOD expr
-- On EXTERNAL reduce production expr -> expr MOD expr
-- On EXCEPTION reduce production expr -> expr MOD expr
-- On EQUAL reduce production expr -> expr MOD expr
-- On EOF reduce production expr -> expr MOD expr
-- On DOL reduce production expr -> expr MOD expr
-- On CONS reduce production expr -> expr MOD expr
-- On AST_DOT reduce production expr -> expr MOD expr
-- On AST reduce production expr -> expr MOD expr
-- On AND reduce production expr -> expr MOD expr

State 595:
## Known stack suffix:
## expr AST_DOT
## LR(1) items:
expr -> expr AST_DOT . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 596
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 596:
## Known stack suffix:
## expr AST_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr AST_DOT expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr AST_DOT expr
-- On UARROW reduce production expr -> expr AST_DOT expr
-- On TYPE reduce production expr -> expr AST_DOT expr
-- On TOPVAR reduce production expr -> expr AST_DOT expr
-- On TOPDEF reduce production expr -> expr AST_DOT expr
-- On SLASH_DOT reduce production expr -> expr AST_DOT expr
-- On SLASH reduce production expr -> expr AST_DOT expr
-- On SEMI reduce production expr -> expr AST_DOT expr
-- On PLUS_DOT reduce production expr -> expr AST_DOT expr
-- On PLUS reduce production expr -> expr AST_DOT expr
-- On NL reduce production expr -> expr AST_DOT expr
-- On MOD reduce production expr -> expr AST_DOT expr
-- On MINUS_DOT reduce production expr -> expr AST_DOT expr
-- On MINUS reduce production expr -> expr AST_DOT expr
-- On LOR reduce production expr -> expr AST_DOT expr
-- On LESS_GREATER reduce production expr -> expr AST_DOT expr
-- On LESS_EQUAL reduce production expr -> expr AST_DOT expr
-- On LESS reduce production expr -> expr AST_DOT expr
-- On LAND reduce production expr -> expr AST_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr AST_DOT expr
-- On GREATER reduce production expr -> expr AST_DOT expr
-- On EXTERNAL reduce production expr -> expr AST_DOT expr
-- On EXCEPTION reduce production expr -> expr AST_DOT expr
-- On EQUAL reduce production expr -> expr AST_DOT expr
-- On EOF reduce production expr -> expr AST_DOT expr
-- On DOL reduce production expr -> expr AST_DOT expr
-- On CONS reduce production expr -> expr AST_DOT expr
-- On AST_DOT reduce production expr -> expr AST_DOT expr
-- On AST reduce production expr -> expr AST_DOT expr
-- On AND reduce production expr -> expr AST_DOT expr

State 597:
## Known stack suffix:
## expr AST
## LR(1) items:
expr -> expr AST . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 598
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 598:
## Known stack suffix:
## expr AST expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr AST expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr AST expr
-- On UARROW reduce production expr -> expr AST expr
-- On TYPE reduce production expr -> expr AST expr
-- On TOPVAR reduce production expr -> expr AST expr
-- On TOPDEF reduce production expr -> expr AST expr
-- On SLASH_DOT reduce production expr -> expr AST expr
-- On SLASH reduce production expr -> expr AST expr
-- On SEMI reduce production expr -> expr AST expr
-- On PLUS_DOT reduce production expr -> expr AST expr
-- On PLUS reduce production expr -> expr AST expr
-- On NL reduce production expr -> expr AST expr
-- On MOD reduce production expr -> expr AST expr
-- On MINUS_DOT reduce production expr -> expr AST expr
-- On MINUS reduce production expr -> expr AST expr
-- On LOR reduce production expr -> expr AST expr
-- On LESS_GREATER reduce production expr -> expr AST expr
-- On LESS_EQUAL reduce production expr -> expr AST expr
-- On LESS reduce production expr -> expr AST expr
-- On LAND reduce production expr -> expr AST expr
-- On GREATER_EQUAL reduce production expr -> expr AST expr
-- On GREATER reduce production expr -> expr AST expr
-- On EXTERNAL reduce production expr -> expr AST expr
-- On EXCEPTION reduce production expr -> expr AST expr
-- On EQUAL reduce production expr -> expr AST expr
-- On EOF reduce production expr -> expr AST expr
-- On DOL reduce production expr -> expr AST expr
-- On CONS reduce production expr -> expr AST expr
-- On AST_DOT reduce production expr -> expr AST expr
-- On AST reduce production expr -> expr AST expr
-- On AND reduce production expr -> expr AST expr

State 599:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 600
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 600:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr PLUS expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On MOD shift to state 593
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr PLUS expr
-- On UARROW reduce production expr -> expr PLUS expr
-- On TYPE reduce production expr -> expr PLUS expr
-- On TOPVAR reduce production expr -> expr PLUS expr
-- On TOPDEF reduce production expr -> expr PLUS expr
-- On SEMI reduce production expr -> expr PLUS expr
-- On PLUS_DOT reduce production expr -> expr PLUS expr
-- On PLUS reduce production expr -> expr PLUS expr
-- On NL reduce production expr -> expr PLUS expr
-- On MINUS_DOT reduce production expr -> expr PLUS expr
-- On MINUS reduce production expr -> expr PLUS expr
-- On LOR reduce production expr -> expr PLUS expr
-- On LESS_GREATER reduce production expr -> expr PLUS expr
-- On LESS_EQUAL reduce production expr -> expr PLUS expr
-- On LESS reduce production expr -> expr PLUS expr
-- On LAND reduce production expr -> expr PLUS expr
-- On GREATER_EQUAL reduce production expr -> expr PLUS expr
-- On GREATER reduce production expr -> expr PLUS expr
-- On EXTERNAL reduce production expr -> expr PLUS expr
-- On EXCEPTION reduce production expr -> expr PLUS expr
-- On EQUAL reduce production expr -> expr PLUS expr
-- On EOF reduce production expr -> expr PLUS expr
-- On DOL reduce production expr -> expr PLUS expr
-- On CONS reduce production expr -> expr PLUS expr
-- On AND reduce production expr -> expr PLUS expr

State 601:
## Known stack suffix:
## expr MINUS_DOT
## LR(1) items:
expr -> expr MINUS_DOT . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 602
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 602:
## Known stack suffix:
## expr MINUS_DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr MINUS_DOT expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On MOD shift to state 593
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr MINUS_DOT expr
-- On UARROW reduce production expr -> expr MINUS_DOT expr
-- On TYPE reduce production expr -> expr MINUS_DOT expr
-- On TOPVAR reduce production expr -> expr MINUS_DOT expr
-- On TOPDEF reduce production expr -> expr MINUS_DOT expr
-- On SEMI reduce production expr -> expr MINUS_DOT expr
-- On PLUS_DOT reduce production expr -> expr MINUS_DOT expr
-- On PLUS reduce production expr -> expr MINUS_DOT expr
-- On NL reduce production expr -> expr MINUS_DOT expr
-- On MINUS_DOT reduce production expr -> expr MINUS_DOT expr
-- On MINUS reduce production expr -> expr MINUS_DOT expr
-- On LOR reduce production expr -> expr MINUS_DOT expr
-- On LESS_GREATER reduce production expr -> expr MINUS_DOT expr
-- On LESS_EQUAL reduce production expr -> expr MINUS_DOT expr
-- On LESS reduce production expr -> expr MINUS_DOT expr
-- On LAND reduce production expr -> expr MINUS_DOT expr
-- On GREATER_EQUAL reduce production expr -> expr MINUS_DOT expr
-- On GREATER reduce production expr -> expr MINUS_DOT expr
-- On EXTERNAL reduce production expr -> expr MINUS_DOT expr
-- On EXCEPTION reduce production expr -> expr MINUS_DOT expr
-- On EQUAL reduce production expr -> expr MINUS_DOT expr
-- On EOF reduce production expr -> expr MINUS_DOT expr
-- On DOL reduce production expr -> expr MINUS_DOT expr
-- On CONS reduce production expr -> expr MINUS_DOT expr
-- On AND reduce production expr -> expr MINUS_DOT expr

State 603:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 604
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 604:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr MINUS expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On MOD shift to state 593
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr MINUS expr
-- On UARROW reduce production expr -> expr MINUS expr
-- On TYPE reduce production expr -> expr MINUS expr
-- On TOPVAR reduce production expr -> expr MINUS expr
-- On TOPDEF reduce production expr -> expr MINUS expr
-- On SEMI reduce production expr -> expr MINUS expr
-- On PLUS_DOT reduce production expr -> expr MINUS expr
-- On PLUS reduce production expr -> expr MINUS expr
-- On NL reduce production expr -> expr MINUS expr
-- On MINUS_DOT reduce production expr -> expr MINUS expr
-- On MINUS reduce production expr -> expr MINUS expr
-- On LOR reduce production expr -> expr MINUS expr
-- On LESS_GREATER reduce production expr -> expr MINUS expr
-- On LESS_EQUAL reduce production expr -> expr MINUS expr
-- On LESS reduce production expr -> expr MINUS expr
-- On LAND reduce production expr -> expr MINUS expr
-- On GREATER_EQUAL reduce production expr -> expr MINUS expr
-- On GREATER reduce production expr -> expr MINUS expr
-- On EXTERNAL reduce production expr -> expr MINUS expr
-- On EXCEPTION reduce production expr -> expr MINUS expr
-- On EQUAL reduce production expr -> expr MINUS expr
-- On EOF reduce production expr -> expr MINUS expr
-- On DOL reduce production expr -> expr MINUS expr
-- On CONS reduce production expr -> expr MINUS expr
-- On AND reduce production expr -> expr MINUS expr

State 605:
## Known stack suffix:
## expr LOR
## LR(1) items:
expr -> expr LOR . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 606
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 606:
## Known stack suffix:
## expr LOR expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr LOR expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr LOR expr
-- On TYPE reduce production expr -> expr LOR expr
-- On TOPVAR reduce production expr -> expr LOR expr
-- On TOPDEF reduce production expr -> expr LOR expr
-- On SEMI reduce production expr -> expr LOR expr
-- On NL reduce production expr -> expr LOR expr
-- On LESS_GREATER reduce production expr -> expr LOR expr
-- On LESS_EQUAL reduce production expr -> expr LOR expr
-- On LESS reduce production expr -> expr LOR expr
-- On LAND reduce production expr -> expr LOR expr
-- On GREATER_EQUAL reduce production expr -> expr LOR expr
-- On GREATER reduce production expr -> expr LOR expr
-- On EXTERNAL reduce production expr -> expr LOR expr
-- On EXCEPTION reduce production expr -> expr LOR expr
-- On EQUAL reduce production expr -> expr LOR expr
-- On EOF reduce production expr -> expr LOR expr
-- On DOL reduce production expr -> expr LOR expr
-- On AND reduce production expr -> expr LOR expr

State 607:
## Known stack suffix:
## expr CONS
## LR(1) items:
expr -> expr CONS . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 608
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 608:
## Known stack suffix:
## expr CONS expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr CONS expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr CONS expr
-- On UARROW reduce production expr -> expr CONS expr
-- On TYPE reduce production expr -> expr CONS expr
-- On TOPVAR reduce production expr -> expr CONS expr
-- On TOPDEF reduce production expr -> expr CONS expr
-- On SEMI reduce production expr -> expr CONS expr
-- On NL reduce production expr -> expr CONS expr
-- On LOR reduce production expr -> expr CONS expr
-- On LESS_GREATER reduce production expr -> expr CONS expr
-- On LESS_EQUAL reduce production expr -> expr CONS expr
-- On LESS reduce production expr -> expr CONS expr
-- On LAND reduce production expr -> expr CONS expr
-- On GREATER_EQUAL reduce production expr -> expr CONS expr
-- On GREATER reduce production expr -> expr CONS expr
-- On EXTERNAL reduce production expr -> expr CONS expr
-- On EXCEPTION reduce production expr -> expr CONS expr
-- On EQUAL reduce production expr -> expr CONS expr
-- On EOF reduce production expr -> expr CONS expr
-- On DOL reduce production expr -> expr CONS expr
-- On AND reduce production expr -> expr CONS expr

State 609:
## Known stack suffix:
## expr LESS_GREATER
## LR(1) items:
expr -> expr LESS_GREATER . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 610
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 610:
## Known stack suffix:
## expr LESS_GREATER expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr LESS_GREATER expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr LESS_GREATER expr
-- On TYPE reduce production expr -> expr LESS_GREATER expr
-- On TOPVAR reduce production expr -> expr LESS_GREATER expr
-- On TOPDEF reduce production expr -> expr LESS_GREATER expr
-- On SEMI reduce production expr -> expr LESS_GREATER expr
-- On NL reduce production expr -> expr LESS_GREATER expr
-- On LESS_GREATER reduce production expr -> expr LESS_GREATER expr
-- On LESS_EQUAL reduce production expr -> expr LESS_GREATER expr
-- On LESS reduce production expr -> expr LESS_GREATER expr
-- On GREATER_EQUAL reduce production expr -> expr LESS_GREATER expr
-- On GREATER reduce production expr -> expr LESS_GREATER expr
-- On EXTERNAL reduce production expr -> expr LESS_GREATER expr
-- On EXCEPTION reduce production expr -> expr LESS_GREATER expr
-- On EQUAL reduce production expr -> expr LESS_GREATER expr
-- On EOF reduce production expr -> expr LESS_GREATER expr
-- On DOL reduce production expr -> expr LESS_GREATER expr
-- On AND reduce production expr -> expr LESS_GREATER expr

State 611:
## Known stack suffix:
## expr LAND
## LR(1) items:
expr -> expr LAND . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 612
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 612:
## Known stack suffix:
## expr LAND expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr LAND expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr LAND expr
-- On TYPE reduce production expr -> expr LAND expr
-- On TOPVAR reduce production expr -> expr LAND expr
-- On TOPDEF reduce production expr -> expr LAND expr
-- On SEMI reduce production expr -> expr LAND expr
-- On NL reduce production expr -> expr LAND expr
-- On LESS_GREATER reduce production expr -> expr LAND expr
-- On LESS_EQUAL reduce production expr -> expr LAND expr
-- On LESS reduce production expr -> expr LAND expr
-- On GREATER_EQUAL reduce production expr -> expr LAND expr
-- On GREATER reduce production expr -> expr LAND expr
-- On EXTERNAL reduce production expr -> expr LAND expr
-- On EXCEPTION reduce production expr -> expr LAND expr
-- On EQUAL reduce production expr -> expr LAND expr
-- On EOF reduce production expr -> expr LAND expr
-- On DOL reduce production expr -> expr LAND expr
-- On AND reduce production expr -> expr LAND expr

State 613:
## Known stack suffix:
## expr LESS_EQUAL
## LR(1) items:
expr -> expr LESS_EQUAL . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 614
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 614:
## Known stack suffix:
## expr LESS_EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr LESS_EQUAL expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr LESS_EQUAL expr
-- On TYPE reduce production expr -> expr LESS_EQUAL expr
-- On TOPVAR reduce production expr -> expr LESS_EQUAL expr
-- On TOPDEF reduce production expr -> expr LESS_EQUAL expr
-- On SEMI reduce production expr -> expr LESS_EQUAL expr
-- On NL reduce production expr -> expr LESS_EQUAL expr
-- On LESS_GREATER reduce production expr -> expr LESS_EQUAL expr
-- On LESS_EQUAL reduce production expr -> expr LESS_EQUAL expr
-- On LESS reduce production expr -> expr LESS_EQUAL expr
-- On GREATER_EQUAL reduce production expr -> expr LESS_EQUAL expr
-- On GREATER reduce production expr -> expr LESS_EQUAL expr
-- On EXTERNAL reduce production expr -> expr LESS_EQUAL expr
-- On EXCEPTION reduce production expr -> expr LESS_EQUAL expr
-- On EQUAL reduce production expr -> expr LESS_EQUAL expr
-- On EOF reduce production expr -> expr LESS_EQUAL expr
-- On DOL reduce production expr -> expr LESS_EQUAL expr
-- On AND reduce production expr -> expr LESS_EQUAL expr

State 615:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 616
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 616:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr LESS expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr LESS expr
-- On TYPE reduce production expr -> expr LESS expr
-- On TOPVAR reduce production expr -> expr LESS expr
-- On TOPDEF reduce production expr -> expr LESS expr
-- On SEMI reduce production expr -> expr LESS expr
-- On NL reduce production expr -> expr LESS expr
-- On LESS_GREATER reduce production expr -> expr LESS expr
-- On LESS_EQUAL reduce production expr -> expr LESS expr
-- On LESS reduce production expr -> expr LESS expr
-- On GREATER_EQUAL reduce production expr -> expr LESS expr
-- On GREATER reduce production expr -> expr LESS expr
-- On EXTERNAL reduce production expr -> expr LESS expr
-- On EXCEPTION reduce production expr -> expr LESS expr
-- On EQUAL reduce production expr -> expr LESS expr
-- On EOF reduce production expr -> expr LESS expr
-- On DOL reduce production expr -> expr LESS expr
-- On AND reduce production expr -> expr LESS expr

State 617:
## Known stack suffix:
## expr GREATER_EQUAL
## LR(1) items:
expr -> expr GREATER_EQUAL . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 618
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 618:
## Known stack suffix:
## expr GREATER_EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr GREATER_EQUAL expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr GREATER_EQUAL expr
-- On TYPE reduce production expr -> expr GREATER_EQUAL expr
-- On TOPVAR reduce production expr -> expr GREATER_EQUAL expr
-- On TOPDEF reduce production expr -> expr GREATER_EQUAL expr
-- On SEMI reduce production expr -> expr GREATER_EQUAL expr
-- On NL reduce production expr -> expr GREATER_EQUAL expr
-- On LESS_GREATER reduce production expr -> expr GREATER_EQUAL expr
-- On LESS_EQUAL reduce production expr -> expr GREATER_EQUAL expr
-- On LESS reduce production expr -> expr GREATER_EQUAL expr
-- On GREATER_EQUAL reduce production expr -> expr GREATER_EQUAL expr
-- On GREATER reduce production expr -> expr GREATER_EQUAL expr
-- On EXTERNAL reduce production expr -> expr GREATER_EQUAL expr
-- On EXCEPTION reduce production expr -> expr GREATER_EQUAL expr
-- On EQUAL reduce production expr -> expr GREATER_EQUAL expr
-- On EOF reduce production expr -> expr GREATER_EQUAL expr
-- On DOL reduce production expr -> expr GREATER_EQUAL expr
-- On AND reduce production expr -> expr GREATER_EQUAL expr

State 619:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 620
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 620:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr GREATER expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr GREATER expr
-- On TYPE reduce production expr -> expr GREATER expr
-- On TOPVAR reduce production expr -> expr GREATER expr
-- On TOPDEF reduce production expr -> expr GREATER expr
-- On SEMI reduce production expr -> expr GREATER expr
-- On NL reduce production expr -> expr GREATER expr
-- On LESS_GREATER reduce production expr -> expr GREATER expr
-- On LESS_EQUAL reduce production expr -> expr GREATER expr
-- On LESS reduce production expr -> expr GREATER expr
-- On GREATER_EQUAL reduce production expr -> expr GREATER expr
-- On GREATER reduce production expr -> expr GREATER expr
-- On EXTERNAL reduce production expr -> expr GREATER expr
-- On EXCEPTION reduce production expr -> expr GREATER expr
-- On EQUAL reduce production expr -> expr GREATER expr
-- On EOF reduce production expr -> expr GREATER expr
-- On DOL reduce production expr -> expr GREATER expr
-- On AND reduce production expr -> expr GREATER expr

State 621:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 622
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 622:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr EQUAL expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr EQUAL expr
-- On TYPE reduce production expr -> expr EQUAL expr
-- On TOPVAR reduce production expr -> expr EQUAL expr
-- On TOPDEF reduce production expr -> expr EQUAL expr
-- On SEMI reduce production expr -> expr EQUAL expr
-- On NL reduce production expr -> expr EQUAL expr
-- On LESS_GREATER reduce production expr -> expr EQUAL expr
-- On LESS_EQUAL reduce production expr -> expr EQUAL expr
-- On LESS reduce production expr -> expr EQUAL expr
-- On GREATER_EQUAL reduce production expr -> expr EQUAL expr
-- On GREATER reduce production expr -> expr EQUAL expr
-- On EXTERNAL reduce production expr -> expr EQUAL expr
-- On EXCEPTION reduce production expr -> expr EQUAL expr
-- On EQUAL reduce production expr -> expr EQUAL expr
-- On EOF reduce production expr -> expr EQUAL expr
-- On DOL reduce production expr -> expr EQUAL expr
-- On AND reduce production expr -> expr EQUAL expr

State 623:
## Known stack suffix:
## field_expr ASSIGN
## LR(1) items:
expr -> field_expr ASSIGN . nl_opt expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 624
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 624:
## Known stack suffix:
## field_expr ASSIGN nl_opt
## LR(1) items:
expr -> field_expr ASSIGN nl_opt . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 625
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 625:
## Known stack suffix:
## field_expr ASSIGN nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> field_expr ASSIGN nl_opt expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On LPAREN shift to state 449
-- On LBRACK shift to state 456
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> field_expr ASSIGN nl_opt expr
-- On UIDENT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On UARROW reduce production expr -> field_expr ASSIGN nl_opt expr
-- On TYPE reduce production expr -> field_expr ASSIGN nl_opt expr
-- On TOPVAR reduce production expr -> field_expr ASSIGN nl_opt expr
-- On TOPDEF reduce production expr -> field_expr ASSIGN nl_opt expr
-- On SLASH_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On SLASH reduce production expr -> field_expr ASSIGN nl_opt expr
-- On SEMI reduce production expr -> field_expr ASSIGN nl_opt expr
-- On PLUS_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On PLUS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On NL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On MOD reduce production expr -> field_expr ASSIGN nl_opt expr
-- On MINUS_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On MINUS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LOR reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LESS_GREATER reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LESS_EQUAL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LESS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On LAND reduce production expr -> field_expr ASSIGN nl_opt expr
-- On GREATER_EQUAL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On GREATER reduce production expr -> field_expr ASSIGN nl_opt expr
-- On EXTERNAL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On EXCEPTION reduce production expr -> field_expr ASSIGN nl_opt expr
-- On EQUAL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On EOF reduce production expr -> field_expr ASSIGN nl_opt expr
-- On DOL reduce production expr -> field_expr ASSIGN nl_opt expr
-- On CONS reduce production expr -> field_expr ASSIGN nl_opt expr
-- On AST_DOT reduce production expr -> field_expr ASSIGN nl_opt expr
-- On AST reduce production expr -> field_expr ASSIGN nl_opt expr
-- On AND reduce production expr -> field_expr ASSIGN nl_opt expr

State 626:
## Known stack suffix:
## ASSERT expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> ASSERT expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> ASSERT expr
-- On UARROW reduce production expr -> ASSERT expr
-- On TYPE reduce production expr -> ASSERT expr
-- On TOPVAR reduce production expr -> ASSERT expr
-- On TOPDEF reduce production expr -> ASSERT expr
-- On SLASH_DOT reduce production expr -> ASSERT expr
-- On SLASH reduce production expr -> ASSERT expr
-- On SEMI reduce production expr -> ASSERT expr
-- On PLUS_DOT reduce production expr -> ASSERT expr
-- On PLUS reduce production expr -> ASSERT expr
-- On NL reduce production expr -> ASSERT expr
-- On MOD reduce production expr -> ASSERT expr
-- On MINUS_DOT reduce production expr -> ASSERT expr
-- On MINUS reduce production expr -> ASSERT expr
-- On LOR reduce production expr -> ASSERT expr
-- On LESS_GREATER reduce production expr -> ASSERT expr
-- On LESS_EQUAL reduce production expr -> ASSERT expr
-- On LESS reduce production expr -> ASSERT expr
-- On LAND reduce production expr -> ASSERT expr
-- On GREATER_EQUAL reduce production expr -> ASSERT expr
-- On GREATER reduce production expr -> ASSERT expr
-- On EXTERNAL reduce production expr -> ASSERT expr
-- On EXCEPTION reduce production expr -> ASSERT expr
-- On EQUAL reduce production expr -> ASSERT expr
-- On EOF reduce production expr -> ASSERT expr
-- On DOL reduce production expr -> ASSERT expr
-- On CONS reduce production expr -> ASSERT expr
-- On AST_DOT reduce production expr -> ASSERT expr
-- On AST reduce production expr -> ASSERT expr
-- On AND reduce production expr -> ASSERT expr

State 627:
## Known stack suffix:
## stmt
## LR(1) items:
rev_stmts -> stmt . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_stmts -> stmt
-- On UIDENT reduce production rev_stmts -> stmt
-- On UARROW reduce production rev_stmts -> stmt
-- On TYPE reduce production rev_stmts -> stmt
-- On TOPVAR reduce production rev_stmts -> stmt
-- On TOPDEF reduce production rev_stmts -> stmt
-- On STRING reduce production rev_stmts -> stmt
-- On SLASH_DOT reduce production rev_stmts -> stmt
-- On SLASH reduce production rev_stmts -> stmt
-- On SEMI reduce production rev_stmts -> stmt
-- On PLUS_DOT reduce production rev_stmts -> stmt
-- On PLUS reduce production rev_stmts -> stmt
-- On NL reduce production rev_stmts -> stmt
-- On MOD reduce production rev_stmts -> stmt
-- On MINUS_DOT reduce production rev_stmts -> stmt
-- On MINUS reduce production rev_stmts -> stmt
-- On LPAREN reduce production rev_stmts -> stmt
-- On LOR reduce production rev_stmts -> stmt
-- On LESS_LESS reduce production rev_stmts -> stmt
-- On LESS_GREATER reduce production rev_stmts -> stmt
-- On LESS_EQUAL reduce production rev_stmts -> stmt
-- On LESS reduce production rev_stmts -> stmt
-- On LBRACK reduce production rev_stmts -> stmt
-- On LAND reduce production rev_stmts -> stmt
-- On INT reduce production rev_stmts -> stmt
-- On IDENT reduce production rev_stmts -> stmt
-- On GREATER_EQUAL reduce production rev_stmts -> stmt
-- On GREATER reduce production rev_stmts -> stmt
-- On FLOAT reduce production rev_stmts -> stmt
-- On EXTERNAL reduce production rev_stmts -> stmt
-- On EXCL reduce production rev_stmts -> stmt
-- On EXCEPTION reduce production rev_stmts -> stmt
-- On EQUAL reduce production rev_stmts -> stmt
-- On EOF reduce production rev_stmts -> stmt
-- On DOL reduce production rev_stmts -> stmt
-- On CONS reduce production rev_stmts -> stmt
-- On CHAR reduce production rev_stmts -> stmt
-- On BOOL reduce production rev_stmts -> stmt
-- On ATOM reduce production rev_stmts -> stmt
-- On AST_DOT reduce production rev_stmts -> stmt
-- On AST reduce production rev_stmts -> stmt
-- On AND reduce production rev_stmts -> stmt

State 628:
## Known stack suffix:
## rev_stmts
## LR(1) items:
block -> rev_stmts . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
block -> rev_stmts . NL [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_stmts -> rev_stmts . SEMI stmt [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_stmts -> rev_stmts . NL stmt [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On SEMI shift to state 629
-- On NL shift to state 634
## Reductions:
-- On error reduce production block -> rev_stmts
-- On UIDENT reduce production block -> rev_stmts
-- On UARROW reduce production block -> rev_stmts
-- On TYPE reduce production block -> rev_stmts
-- On TOPVAR reduce production block -> rev_stmts
-- On TOPDEF reduce production block -> rev_stmts
-- On STRING reduce production block -> rev_stmts
-- On SLASH_DOT reduce production block -> rev_stmts
-- On SLASH reduce production block -> rev_stmts
-- On PLUS_DOT reduce production block -> rev_stmts
-- On PLUS reduce production block -> rev_stmts
-- On MOD reduce production block -> rev_stmts
-- On MINUS_DOT reduce production block -> rev_stmts
-- On MINUS reduce production block -> rev_stmts
-- On LPAREN reduce production block -> rev_stmts
-- On LOR reduce production block -> rev_stmts
-- On LESS_LESS reduce production block -> rev_stmts
-- On LESS_GREATER reduce production block -> rev_stmts
-- On LESS_EQUAL reduce production block -> rev_stmts
-- On LESS reduce production block -> rev_stmts
-- On LBRACK reduce production block -> rev_stmts
-- On LAND reduce production block -> rev_stmts
-- On INT reduce production block -> rev_stmts
-- On IDENT reduce production block -> rev_stmts
-- On GREATER_EQUAL reduce production block -> rev_stmts
-- On GREATER reduce production block -> rev_stmts
-- On FLOAT reduce production block -> rev_stmts
-- On EXTERNAL reduce production block -> rev_stmts
-- On EXCL reduce production block -> rev_stmts
-- On EXCEPTION reduce production block -> rev_stmts
-- On EQUAL reduce production block -> rev_stmts
-- On EOF reduce production block -> rev_stmts
-- On DOL reduce production block -> rev_stmts
-- On CONS reduce production block -> rev_stmts
-- On CHAR reduce production block -> rev_stmts
-- On BOOL reduce production block -> rev_stmts
-- On ATOM reduce production block -> rev_stmts
-- On AST_DOT reduce production block -> rev_stmts
-- On AST reduce production block -> rev_stmts
-- On AND reduce production block -> rev_stmts

State 629:
## Known stack suffix:
## rev_stmts SEMI
## LR(1) items:
rev_stmts -> rev_stmts SEMI . stmt [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On stmt shift to state 630
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 631
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 630:
## Known stack suffix:
## rev_stmts SEMI stmt
## LR(1) items:
rev_stmts -> rev_stmts SEMI stmt . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_stmts -> rev_stmts SEMI stmt
-- On UIDENT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On UARROW reduce production rev_stmts -> rev_stmts SEMI stmt
-- On TYPE reduce production rev_stmts -> rev_stmts SEMI stmt
-- On TOPVAR reduce production rev_stmts -> rev_stmts SEMI stmt
-- On TOPDEF reduce production rev_stmts -> rev_stmts SEMI stmt
-- On STRING reduce production rev_stmts -> rev_stmts SEMI stmt
-- On SLASH_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On SLASH reduce production rev_stmts -> rev_stmts SEMI stmt
-- On SEMI reduce production rev_stmts -> rev_stmts SEMI stmt
-- On PLUS_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On PLUS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On NL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On MOD reduce production rev_stmts -> rev_stmts SEMI stmt
-- On MINUS_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On MINUS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LPAREN reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LOR reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS_LESS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS_GREATER reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS_EQUAL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LESS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LBRACK reduce production rev_stmts -> rev_stmts SEMI stmt
-- On LAND reduce production rev_stmts -> rev_stmts SEMI stmt
-- On INT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On IDENT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On GREATER_EQUAL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On GREATER reduce production rev_stmts -> rev_stmts SEMI stmt
-- On FLOAT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On EXTERNAL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On EXCL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On EXCEPTION reduce production rev_stmts -> rev_stmts SEMI stmt
-- On EQUAL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On EOF reduce production rev_stmts -> rev_stmts SEMI stmt
-- On DOL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On CONS reduce production rev_stmts -> rev_stmts SEMI stmt
-- On CHAR reduce production rev_stmts -> rev_stmts SEMI stmt
-- On BOOL reduce production rev_stmts -> rev_stmts SEMI stmt
-- On ATOM reduce production rev_stmts -> rev_stmts SEMI stmt
-- On AST_DOT reduce production rev_stmts -> rev_stmts SEMI stmt
-- On AST reduce production rev_stmts -> rev_stmts SEMI stmt
-- On AND reduce production rev_stmts -> rev_stmts SEMI stmt

State 631:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
stmt -> expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LESS_GREATER shift to state 609
-- On LESS_EQUAL shift to state 613
-- On LESS shift to state 615
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On GREATER_EQUAL shift to state 617
-- On GREATER shift to state 619
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On EQUAL shift to state 621
-- On DOL shift to state 632
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production stmt -> expr
-- On TYPE reduce production stmt -> expr
-- On TOPVAR reduce production stmt -> expr
-- On TOPDEF reduce production stmt -> expr
-- On SEMI reduce production stmt -> expr
-- On NL reduce production stmt -> expr
-- On EXTERNAL reduce production stmt -> expr
-- On EXCEPTION reduce production stmt -> expr
-- On EOF reduce production stmt -> expr
-- On AND reduce production stmt -> expr

State 632:
## Known stack suffix:
## expr DOL
## LR(1) items:
expr -> expr DOL . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 633
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 633:
## Known stack suffix:
## expr DOL expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr DOL expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LESS_GREATER shift to state 609
-- On LESS_EQUAL shift to state 613
-- On LESS shift to state 615
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On GREATER_EQUAL shift to state 617
-- On GREATER shift to state 619
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On EQUAL shift to state 621
-- On DOL shift to state 632
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> expr DOL expr
-- On TYPE reduce production expr -> expr DOL expr
-- On TOPVAR reduce production expr -> expr DOL expr
-- On TOPDEF reduce production expr -> expr DOL expr
-- On SEMI reduce production expr -> expr DOL expr
-- On NL reduce production expr -> expr DOL expr
-- On EXTERNAL reduce production expr -> expr DOL expr
-- On EXCEPTION reduce production expr -> expr DOL expr
-- On EOF reduce production expr -> expr DOL expr
-- On AND reduce production expr -> expr DOL expr

State 634:
## Known stack suffix:
## rev_stmts NL
## LR(1) items:
block -> rev_stmts NL . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
rev_stmts -> rev_stmts NL . stmt [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On stmt shift to state 635
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 631
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:
-- On error reduce production block -> rev_stmts NL
-- On UARROW reduce production block -> rev_stmts NL
-- On TYPE reduce production block -> rev_stmts NL
-- On TOPVAR reduce production block -> rev_stmts NL
-- On TOPDEF reduce production block -> rev_stmts NL
-- On SLASH_DOT reduce production block -> rev_stmts NL
-- On SLASH reduce production block -> rev_stmts NL
-- On SEMI reduce production block -> rev_stmts NL
-- On PLUS_DOT reduce production block -> rev_stmts NL
-- On PLUS reduce production block -> rev_stmts NL
-- On NL reduce production block -> rev_stmts NL
-- On MOD reduce production block -> rev_stmts NL
-- On MINUS_DOT reduce production block -> rev_stmts NL
-- On LOR reduce production block -> rev_stmts NL
-- On LESS_GREATER reduce production block -> rev_stmts NL
-- On LESS_EQUAL reduce production block -> rev_stmts NL
-- On LESS reduce production block -> rev_stmts NL
-- On LAND reduce production block -> rev_stmts NL
-- On GREATER_EQUAL reduce production block -> rev_stmts NL
-- On GREATER reduce production block -> rev_stmts NL
-- On EXTERNAL reduce production block -> rev_stmts NL
-- On EXCEPTION reduce production block -> rev_stmts NL
-- On EQUAL reduce production block -> rev_stmts NL
-- On EOF reduce production block -> rev_stmts NL
-- On DOL reduce production block -> rev_stmts NL
-- On CONS reduce production block -> rev_stmts NL
-- On AST_DOT reduce production block -> rev_stmts NL
-- On AST reduce production block -> rev_stmts NL
-- On AND reduce production block -> rev_stmts NL

State 635:
## Known stack suffix:
## rev_stmts NL stmt
## LR(1) items:
rev_stmts -> rev_stmts NL stmt . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_stmts -> rev_stmts NL stmt
-- On UIDENT reduce production rev_stmts -> rev_stmts NL stmt
-- On UARROW reduce production rev_stmts -> rev_stmts NL stmt
-- On TYPE reduce production rev_stmts -> rev_stmts NL stmt
-- On TOPVAR reduce production rev_stmts -> rev_stmts NL stmt
-- On TOPDEF reduce production rev_stmts -> rev_stmts NL stmt
-- On STRING reduce production rev_stmts -> rev_stmts NL stmt
-- On SLASH_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On SLASH reduce production rev_stmts -> rev_stmts NL stmt
-- On SEMI reduce production rev_stmts -> rev_stmts NL stmt
-- On PLUS_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On PLUS reduce production rev_stmts -> rev_stmts NL stmt
-- On NL reduce production rev_stmts -> rev_stmts NL stmt
-- On MOD reduce production rev_stmts -> rev_stmts NL stmt
-- On MINUS_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On MINUS reduce production rev_stmts -> rev_stmts NL stmt
-- On LPAREN reduce production rev_stmts -> rev_stmts NL stmt
-- On LOR reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS_LESS reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS_GREATER reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS_EQUAL reduce production rev_stmts -> rev_stmts NL stmt
-- On LESS reduce production rev_stmts -> rev_stmts NL stmt
-- On LBRACK reduce production rev_stmts -> rev_stmts NL stmt
-- On LAND reduce production rev_stmts -> rev_stmts NL stmt
-- On INT reduce production rev_stmts -> rev_stmts NL stmt
-- On IDENT reduce production rev_stmts -> rev_stmts NL stmt
-- On GREATER_EQUAL reduce production rev_stmts -> rev_stmts NL stmt
-- On GREATER reduce production rev_stmts -> rev_stmts NL stmt
-- On FLOAT reduce production rev_stmts -> rev_stmts NL stmt
-- On EXTERNAL reduce production rev_stmts -> rev_stmts NL stmt
-- On EXCL reduce production rev_stmts -> rev_stmts NL stmt
-- On EXCEPTION reduce production rev_stmts -> rev_stmts NL stmt
-- On EQUAL reduce production rev_stmts -> rev_stmts NL stmt
-- On EOF reduce production rev_stmts -> rev_stmts NL stmt
-- On DOL reduce production rev_stmts -> rev_stmts NL stmt
-- On CONS reduce production rev_stmts -> rev_stmts NL stmt
-- On CHAR reduce production rev_stmts -> rev_stmts NL stmt
-- On BOOL reduce production rev_stmts -> rev_stmts NL stmt
-- On ATOM reduce production rev_stmts -> rev_stmts NL stmt
-- On AST_DOT reduce production rev_stmts -> rev_stmts NL stmt
-- On AST reduce production rev_stmts -> rev_stmts NL stmt
-- On AND reduce production rev_stmts -> rev_stmts NL stmt

State 636:
## Known stack suffix:
## DEF REC fundef IN nl_opt block
## LR(1) items:
expr -> DEF REC fundef IN nl_opt block . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> DEF REC fundef IN nl_opt block
-- On UIDENT reduce production expr -> DEF REC fundef IN nl_opt block
-- On UARROW reduce production expr -> DEF REC fundef IN nl_opt block
-- On TYPE reduce production expr -> DEF REC fundef IN nl_opt block
-- On TOPVAR reduce production expr -> DEF REC fundef IN nl_opt block
-- On TOPDEF reduce production expr -> DEF REC fundef IN nl_opt block
-- On STRING reduce production expr -> DEF REC fundef IN nl_opt block
-- On SLASH_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On SLASH reduce production expr -> DEF REC fundef IN nl_opt block
-- On SEMI reduce production expr -> DEF REC fundef IN nl_opt block
-- On PLUS_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On PLUS reduce production expr -> DEF REC fundef IN nl_opt block
-- On NL reduce production expr -> DEF REC fundef IN nl_opt block
-- On MOD reduce production expr -> DEF REC fundef IN nl_opt block
-- On MINUS_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On MINUS reduce production expr -> DEF REC fundef IN nl_opt block
-- On LPAREN reduce production expr -> DEF REC fundef IN nl_opt block
-- On LOR reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS_LESS reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS_GREATER reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS_EQUAL reduce production expr -> DEF REC fundef IN nl_opt block
-- On LESS reduce production expr -> DEF REC fundef IN nl_opt block
-- On LBRACK reduce production expr -> DEF REC fundef IN nl_opt block
-- On LAND reduce production expr -> DEF REC fundef IN nl_opt block
-- On INT reduce production expr -> DEF REC fundef IN nl_opt block
-- On IDENT reduce production expr -> DEF REC fundef IN nl_opt block
-- On GREATER_EQUAL reduce production expr -> DEF REC fundef IN nl_opt block
-- On GREATER reduce production expr -> DEF REC fundef IN nl_opt block
-- On FLOAT reduce production expr -> DEF REC fundef IN nl_opt block
-- On EXTERNAL reduce production expr -> DEF REC fundef IN nl_opt block
-- On EXCL reduce production expr -> DEF REC fundef IN nl_opt block
-- On EXCEPTION reduce production expr -> DEF REC fundef IN nl_opt block
-- On EQUAL reduce production expr -> DEF REC fundef IN nl_opt block
-- On EOF reduce production expr -> DEF REC fundef IN nl_opt block
-- On DOL reduce production expr -> DEF REC fundef IN nl_opt block
-- On CONS reduce production expr -> DEF REC fundef IN nl_opt block
-- On CHAR reduce production expr -> DEF REC fundef IN nl_opt block
-- On BOOL reduce production expr -> DEF REC fundef IN nl_opt block
-- On ATOM reduce production expr -> DEF REC fundef IN nl_opt block
-- On AST_DOT reduce production expr -> DEF REC fundef IN nl_opt block
-- On AST reduce production expr -> DEF REC fundef IN nl_opt block
-- On AND reduce production expr -> DEF REC fundef IN nl_opt block

State 637:
## Known stack suffix:
## DEF fundef
## LR(1) items:
expr -> DEF fundef . IN nl_opt block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On IN shift to state 638
## Reductions:

State 638:
## Known stack suffix:
## DEF fundef IN
## LR(1) items:
expr -> DEF fundef IN . nl_opt block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 639
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 639:
## Known stack suffix:
## DEF fundef IN nl_opt
## LR(1) items:
expr -> DEF fundef IN nl_opt . block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On stmt shift to state 627
-- On simple_expr shift to state 564
-- On rev_stmts shift to state 628
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 631
-- On block shift to state 640
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 640:
## Known stack suffix:
## DEF fundef IN nl_opt block
## LR(1) items:
expr -> DEF fundef IN nl_opt block . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> DEF fundef IN nl_opt block
-- On UIDENT reduce production expr -> DEF fundef IN nl_opt block
-- On UARROW reduce production expr -> DEF fundef IN nl_opt block
-- On TYPE reduce production expr -> DEF fundef IN nl_opt block
-- On TOPVAR reduce production expr -> DEF fundef IN nl_opt block
-- On TOPDEF reduce production expr -> DEF fundef IN nl_opt block
-- On STRING reduce production expr -> DEF fundef IN nl_opt block
-- On SLASH_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On SLASH reduce production expr -> DEF fundef IN nl_opt block
-- On SEMI reduce production expr -> DEF fundef IN nl_opt block
-- On PLUS_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On PLUS reduce production expr -> DEF fundef IN nl_opt block
-- On NL reduce production expr -> DEF fundef IN nl_opt block
-- On MOD reduce production expr -> DEF fundef IN nl_opt block
-- On MINUS_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On MINUS reduce production expr -> DEF fundef IN nl_opt block
-- On LPAREN reduce production expr -> DEF fundef IN nl_opt block
-- On LOR reduce production expr -> DEF fundef IN nl_opt block
-- On LESS_LESS reduce production expr -> DEF fundef IN nl_opt block
-- On LESS_GREATER reduce production expr -> DEF fundef IN nl_opt block
-- On LESS_EQUAL reduce production expr -> DEF fundef IN nl_opt block
-- On LESS reduce production expr -> DEF fundef IN nl_opt block
-- On LBRACK reduce production expr -> DEF fundef IN nl_opt block
-- On LAND reduce production expr -> DEF fundef IN nl_opt block
-- On INT reduce production expr -> DEF fundef IN nl_opt block
-- On IDENT reduce production expr -> DEF fundef IN nl_opt block
-- On GREATER_EQUAL reduce production expr -> DEF fundef IN nl_opt block
-- On GREATER reduce production expr -> DEF fundef IN nl_opt block
-- On FLOAT reduce production expr -> DEF fundef IN nl_opt block
-- On EXTERNAL reduce production expr -> DEF fundef IN nl_opt block
-- On EXCL reduce production expr -> DEF fundef IN nl_opt block
-- On EXCEPTION reduce production expr -> DEF fundef IN nl_opt block
-- On EQUAL reduce production expr -> DEF fundef IN nl_opt block
-- On EOF reduce production expr -> DEF fundef IN nl_opt block
-- On DOL reduce production expr -> DEF fundef IN nl_opt block
-- On CONS reduce production expr -> DEF fundef IN nl_opt block
-- On CHAR reduce production expr -> DEF fundef IN nl_opt block
-- On BOOL reduce production expr -> DEF fundef IN nl_opt block
-- On ATOM reduce production expr -> DEF fundef IN nl_opt block
-- On AST_DOT reduce production expr -> DEF fundef IN nl_opt block
-- On AST reduce production expr -> DEF fundef IN nl_opt block
-- On AND reduce production expr -> DEF fundef IN nl_opt block

State 641:
## Known stack suffix:
## IDENT LARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> IDENT LARROW expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LESS_GREATER shift to state 609
-- On LESS_EQUAL shift to state 613
-- On LESS shift to state 615
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On GREATER_EQUAL shift to state 617
-- On GREATER shift to state 619
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On EQUAL shift to state 621
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> IDENT LARROW expr
-- On TYPE reduce production expr -> IDENT LARROW expr
-- On TOPVAR reduce production expr -> IDENT LARROW expr
-- On TOPDEF reduce production expr -> IDENT LARROW expr
-- On SEMI reduce production expr -> IDENT LARROW expr
-- On NL reduce production expr -> IDENT LARROW expr
-- On EXTERNAL reduce production expr -> IDENT LARROW expr
-- On EXCEPTION reduce production expr -> IDENT LARROW expr
-- On EOF reduce production expr -> IDENT LARROW expr
-- On DOL reduce production expr -> IDENT LARROW expr
-- On AND reduce production expr -> IDENT LARROW expr

State 642:
## Known stack suffix:
## IDENT ASSIGN
## LR(1) items:
expr -> IDENT ASSIGN . nl_opt expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 643
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 643:
## Known stack suffix:
## IDENT ASSIGN nl_opt
## LR(1) items:
expr -> IDENT ASSIGN nl_opt . expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On simple_expr shift to state 564
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 644
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 644:
## Known stack suffix:
## IDENT ASSIGN nl_opt expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> IDENT ASSIGN nl_opt expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On LPAREN shift to state 449
-- On LBRACK shift to state 456
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> IDENT ASSIGN nl_opt expr
-- On UIDENT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On UARROW reduce production expr -> IDENT ASSIGN nl_opt expr
-- On TYPE reduce production expr -> IDENT ASSIGN nl_opt expr
-- On TOPVAR reduce production expr -> IDENT ASSIGN nl_opt expr
-- On TOPDEF reduce production expr -> IDENT ASSIGN nl_opt expr
-- On SLASH_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On SLASH reduce production expr -> IDENT ASSIGN nl_opt expr
-- On SEMI reduce production expr -> IDENT ASSIGN nl_opt expr
-- On PLUS_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On PLUS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On NL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On MOD reduce production expr -> IDENT ASSIGN nl_opt expr
-- On MINUS_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On MINUS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LOR reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LESS_GREATER reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LESS_EQUAL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LESS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On LAND reduce production expr -> IDENT ASSIGN nl_opt expr
-- On GREATER_EQUAL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On GREATER reduce production expr -> IDENT ASSIGN nl_opt expr
-- On EXTERNAL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On EXCEPTION reduce production expr -> IDENT ASSIGN nl_opt expr
-- On EQUAL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On EOF reduce production expr -> IDENT ASSIGN nl_opt expr
-- On DOL reduce production expr -> IDENT ASSIGN nl_opt expr
-- On CONS reduce production expr -> IDENT ASSIGN nl_opt expr
-- On AST_DOT reduce production expr -> IDENT ASSIGN nl_opt expr
-- On AST reduce production expr -> IDENT ASSIGN nl_opt expr
-- On AND reduce production expr -> IDENT ASSIGN nl_opt expr

State 645:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> MINUS expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> MINUS expr
-- On UARROW reduce production expr -> MINUS expr
-- On TYPE reduce production expr -> MINUS expr
-- On TOPVAR reduce production expr -> MINUS expr
-- On TOPDEF reduce production expr -> MINUS expr
-- On SLASH_DOT reduce production expr -> MINUS expr
-- On SLASH reduce production expr -> MINUS expr
-- On SEMI reduce production expr -> MINUS expr
-- On PLUS_DOT reduce production expr -> MINUS expr
-- On PLUS reduce production expr -> MINUS expr
-- On NL reduce production expr -> MINUS expr
-- On MOD reduce production expr -> MINUS expr
-- On MINUS_DOT reduce production expr -> MINUS expr
-- On MINUS reduce production expr -> MINUS expr
-- On LOR reduce production expr -> MINUS expr
-- On LESS_GREATER reduce production expr -> MINUS expr
-- On LESS_EQUAL reduce production expr -> MINUS expr
-- On LESS reduce production expr -> MINUS expr
-- On LAND reduce production expr -> MINUS expr
-- On GREATER_EQUAL reduce production expr -> MINUS expr
-- On GREATER reduce production expr -> MINUS expr
-- On EXTERNAL reduce production expr -> MINUS expr
-- On EXCEPTION reduce production expr -> MINUS expr
-- On EQUAL reduce production expr -> MINUS expr
-- On EOF reduce production expr -> MINUS expr
-- On DOL reduce production expr -> MINUS expr
-- On CONS reduce production expr -> MINUS expr
-- On AST_DOT reduce production expr -> MINUS expr
-- On AST reduce production expr -> MINUS expr
-- On AND reduce production expr -> MINUS expr

State 646:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> NOT expr
-- On UARROW reduce production expr -> NOT expr
-- On TYPE reduce production expr -> NOT expr
-- On TOPVAR reduce production expr -> NOT expr
-- On TOPDEF reduce production expr -> NOT expr
-- On SLASH_DOT reduce production expr -> NOT expr
-- On SLASH reduce production expr -> NOT expr
-- On SEMI reduce production expr -> NOT expr
-- On PLUS_DOT reduce production expr -> NOT expr
-- On PLUS reduce production expr -> NOT expr
-- On NL reduce production expr -> NOT expr
-- On MOD reduce production expr -> NOT expr
-- On MINUS_DOT reduce production expr -> NOT expr
-- On MINUS reduce production expr -> NOT expr
-- On LOR reduce production expr -> NOT expr
-- On LESS_GREATER reduce production expr -> NOT expr
-- On LESS_EQUAL reduce production expr -> NOT expr
-- On LESS reduce production expr -> NOT expr
-- On LAND reduce production expr -> NOT expr
-- On GREATER_EQUAL reduce production expr -> NOT expr
-- On GREATER reduce production expr -> NOT expr
-- On EXTERNAL reduce production expr -> NOT expr
-- On EXCEPTION reduce production expr -> NOT expr
-- On EQUAL reduce production expr -> NOT expr
-- On EOF reduce production expr -> NOT expr
-- On DOL reduce production expr -> NOT expr
-- On CONS reduce production expr -> NOT expr
-- On AST_DOT reduce production expr -> NOT expr
-- On AST reduce production expr -> NOT expr
-- On AND reduce production expr -> NOT expr

State 647:
## Known stack suffix:
## RAISE expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> RAISE expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> RAISE expr
-- On UARROW reduce production expr -> RAISE expr
-- On TYPE reduce production expr -> RAISE expr
-- On TOPVAR reduce production expr -> RAISE expr
-- On TOPDEF reduce production expr -> RAISE expr
-- On SLASH_DOT reduce production expr -> RAISE expr
-- On SLASH reduce production expr -> RAISE expr
-- On SEMI reduce production expr -> RAISE expr
-- On PLUS_DOT reduce production expr -> RAISE expr
-- On PLUS reduce production expr -> RAISE expr
-- On NL reduce production expr -> RAISE expr
-- On MOD reduce production expr -> RAISE expr
-- On MINUS_DOT reduce production expr -> RAISE expr
-- On MINUS reduce production expr -> RAISE expr
-- On LOR reduce production expr -> RAISE expr
-- On LESS_GREATER reduce production expr -> RAISE expr
-- On LESS_EQUAL reduce production expr -> RAISE expr
-- On LESS reduce production expr -> RAISE expr
-- On LAND reduce production expr -> RAISE expr
-- On GREATER_EQUAL reduce production expr -> RAISE expr
-- On GREATER reduce production expr -> RAISE expr
-- On EXTERNAL reduce production expr -> RAISE expr
-- On EXCEPTION reduce production expr -> RAISE expr
-- On EQUAL reduce production expr -> RAISE expr
-- On EOF reduce production expr -> RAISE expr
-- On DOL reduce production expr -> RAISE expr
-- On CONS reduce production expr -> RAISE expr
-- On AST_DOT reduce production expr -> RAISE expr
-- On AST reduce production expr -> RAISE expr
-- On AND reduce production expr -> RAISE expr

State 648:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> RETURN expr . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On STRING shift to state 448
-- On LPAREN shift to state 449
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production expr -> RETURN expr
-- On UARROW reduce production expr -> RETURN expr
-- On TYPE reduce production expr -> RETURN expr
-- On TOPVAR reduce production expr -> RETURN expr
-- On TOPDEF reduce production expr -> RETURN expr
-- On SLASH_DOT reduce production expr -> RETURN expr
-- On SLASH reduce production expr -> RETURN expr
-- On SEMI reduce production expr -> RETURN expr
-- On PLUS_DOT reduce production expr -> RETURN expr
-- On PLUS reduce production expr -> RETURN expr
-- On NL reduce production expr -> RETURN expr
-- On MOD reduce production expr -> RETURN expr
-- On MINUS_DOT reduce production expr -> RETURN expr
-- On MINUS reduce production expr -> RETURN expr
-- On LOR reduce production expr -> RETURN expr
-- On LESS_GREATER reduce production expr -> RETURN expr
-- On LESS_EQUAL reduce production expr -> RETURN expr
-- On LESS reduce production expr -> RETURN expr
-- On LAND reduce production expr -> RETURN expr
-- On GREATER_EQUAL reduce production expr -> RETURN expr
-- On GREATER reduce production expr -> RETURN expr
-- On EXTERNAL reduce production expr -> RETURN expr
-- On EXCEPTION reduce production expr -> RETURN expr
-- On EQUAL reduce production expr -> RETURN expr
-- On EOF reduce production expr -> RETURN expr
-- On DOL reduce production expr -> RETURN expr
-- On CONS reduce production expr -> RETURN expr
-- On AST_DOT reduce production expr -> RETURN expr
-- On AST reduce production expr -> RETURN expr
-- On AND reduce production expr -> RETURN expr

State 649:
## Known stack suffix:
## VAR IDENT EQUAL nl_opt expr term block
## LR(1) items:
expr -> VAR IDENT EQUAL nl_opt expr term block . [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH SEMI PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
## Reductions:
-- On error reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On UIDENT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On UARROW reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On TYPE reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On TOPVAR reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On TOPDEF reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On STRING reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On SLASH_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On SLASH reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On SEMI reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On PLUS_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On PLUS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On NL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On MOD reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On MINUS_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On MINUS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LPAREN reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LOR reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS_LESS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS_GREATER reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS_EQUAL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LESS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LBRACK reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On LAND reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On INT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On IDENT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On GREATER_EQUAL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On GREATER reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On FLOAT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On EXTERNAL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On EXCL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On EXCEPTION reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On EQUAL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On EOF reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On DOL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On CONS reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On CHAR reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On BOOL reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On ATOM reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On AST_DOT reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On AST reduce production expr -> VAR IDENT EQUAL nl_opt expr term block
-- On AND reduce production expr -> VAR IDENT EQUAL nl_opt expr term block

State 650:
## Known stack suffix:
## TOPVAR IDENT EQUAL nl_opt expr
## LR(1) items:
definition -> TOPVAR IDENT EQUAL nl_opt expr . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
expr -> expr . PLUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MOD expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . PLUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . MINUS_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . AST_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . SLASH_DOT expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . UARROW expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . CONS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LAND expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LOR expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . LESS_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . GREATER_EQUAL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . DOL expr [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
expr -> expr . actual_args do_block [ error UIDENT UARROW TYPE TOPVAR TOPDEF STRING SLASH_DOT SLASH PLUS_DOT PLUS NL MOD MINUS_DOT MINUS LPAREN LOR LESS_LESS LESS_GREATER LESS_EQUAL LESS LBRACK LAND INT IDENT GREATER_EQUAL GREATER FLOAT EXTERNAL EXCL EXCEPTION EQUAL EOF DOL CONS CHAR BOOL ATOM AST_DOT AST AND ]
## Transitions:
-- On UIDENT shift to state 447
-- On UARROW shift to state 569
-- On STRING shift to state 448
-- On SLASH_DOT shift to state 571
-- On SLASH shift to state 589
-- On PLUS_DOT shift to state 591
-- On PLUS shift to state 599
-- On MOD shift to state 593
-- On MINUS_DOT shift to state 601
-- On MINUS shift to state 603
-- On LPAREN shift to state 449
-- On LOR shift to state 605
-- On LESS_LESS shift to state 453
-- On LESS_GREATER shift to state 609
-- On LESS_EQUAL shift to state 613
-- On LESS shift to state 615
-- On LBRACK shift to state 456
-- On LAND shift to state 611
-- On INT shift to state 463
-- On IDENT shift to state 464
-- On GREATER_EQUAL shift to state 617
-- On GREATER shift to state 619
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On EQUAL shift to state 621
-- On DOL shift to state 632
-- On CONS shift to state 607
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On AST_DOT shift to state 595
-- On AST shift to state 597
-- On value_name shift to state 470
-- On simple_expr shift to state 573
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On field_expr shift to state 481
-- On binding shift to state 482
-- On array_expr shift to state 483
-- On actual_args shift to state 574
## Reductions:
-- On error reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On TYPE reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On TOPVAR reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On TOPDEF reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On NL reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On EXTERNAL reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On EXCEPTION reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On EOF reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr
-- On AND reduce production definition -> TOPVAR IDENT EQUAL nl_opt expr

State 651:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
sigdef -> IDENT COLON . type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 20
-- On LPAREN shift to state 21
-- On IDENT shift to state 53
-- On type_expr_tuple shift to state 58
-- On type_expr shift to state 652
-- On type_constr shift to state 63
-- On simple_type_expr shift to state 64
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:

State 652:
## Known stack suffix:
## IDENT COLON type_expr
## LR(1) items:
sigdef -> IDENT COLON type_expr . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW NL IDENT EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . RARROW type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On RARROW shift to state 60
-- On IDENT shift to state 53
-- On type_constr shift to state 62
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:
-- On error reduce production sigdef -> IDENT COLON type_expr
-- On TYPE reduce production sigdef -> IDENT COLON type_expr
-- On TOPVAR reduce production sigdef -> IDENT COLON type_expr
-- On TOPDEF reduce production sigdef -> IDENT COLON type_expr
-- On NL reduce production sigdef -> IDENT COLON type_expr
-- On EXTERNAL reduce production sigdef -> IDENT COLON type_expr
-- On EXCEPTION reduce production sigdef -> IDENT COLON type_expr
-- On EOF reduce production sigdef -> IDENT COLON type_expr
-- On AND reduce production sigdef -> IDENT COLON type_expr

State 653:
## Known stack suffix:
## TOPVAR sigdef
## LR(1) items:
definition -> TOPVAR sigdef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> TOPVAR sigdef
-- On TYPE reduce production definition -> TOPVAR sigdef
-- On TOPVAR reduce production definition -> TOPVAR sigdef
-- On TOPDEF reduce production definition -> TOPVAR sigdef
-- On NL reduce production definition -> TOPVAR sigdef
-- On EXTERNAL reduce production definition -> TOPVAR sigdef
-- On EXCEPTION reduce production definition -> TOPVAR sigdef
-- On EOF reduce production definition -> TOPVAR sigdef
-- On AND reduce production definition -> TOPVAR sigdef

State 654:
## Known stack suffix:
## TOPDEF
## LR(1) items:
definition -> TOPDEF . fundef mutual_fundefs_opt [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
definition -> TOPDEF . REC fundef mutual_fundefs_opt [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
definition -> TOPDEF . sigdef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On REC shift to state 655
-- On IDENT shift to state 669
-- On sigdef shift to state 670
-- On fundef shift to state 671
## Reductions:

State 655:
## Known stack suffix:
## TOPDEF REC
## LR(1) items:
definition -> TOPDEF REC . fundef mutual_fundefs_opt [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On IDENT shift to state 656
-- On fundef shift to state 661
## Reductions:

State 656:
## Known stack suffix:
## IDENT
## LR(1) items:
fundef -> IDENT . rev_formal_args EQUAL nl_opt block [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On rev_formal_args shift to state 657
-- On pattern shift to state 329
-- On formal_arg shift to state 335
-- On constr_name shift to state 146
## Reductions:

State 657:
## Known stack suffix:
## IDENT rev_formal_args
## LR(1) items:
fundef -> IDENT rev_formal_args . EQUAL nl_opt block [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
rev_formal_args -> rev_formal_args . formal_arg [ UIDENT STRING LPAREN LBRACK LBRACE INT IDENT FLOAT EQUAL BOOL ATOM ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On EQUAL shift to state 658
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On pattern shift to state 329
-- On formal_arg shift to state 330
-- On constr_name shift to state 146
## Reductions:

State 658:
## Known stack suffix:
## IDENT rev_formal_args EQUAL
## LR(1) items:
fundef -> IDENT rev_formal_args EQUAL . nl_opt block [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 659
## Reductions:
-- On VAR reduce production nl_opt ->
-- On UIDENT reduce production nl_opt ->
-- On TRY reduce production nl_opt ->
-- On STRING reduce production nl_opt ->
-- On RETURN reduce production nl_opt ->
-- On RECEIVE reduce production nl_opt ->
-- On RAISE reduce production nl_opt ->
-- On PERFORM reduce production nl_opt ->
-- On NOT reduce production nl_opt ->
-- On MINUS reduce production nl_opt ->
-- On MATCH reduce production nl_opt ->
-- On LPAREN reduce production nl_opt ->
-- On LESS_LESS reduce production nl_opt ->
-- On LBRACK reduce production nl_opt ->
-- On LBRACE reduce production nl_opt ->
-- On INT reduce production nl_opt ->
-- On IF reduce production nl_opt ->
-- On IDENT reduce production nl_opt ->
-- On FUN reduce production nl_opt ->
-- On FOR reduce production nl_opt ->
-- On FLOAT reduce production nl_opt ->
-- On EXCL reduce production nl_opt ->
-- On DEF reduce production nl_opt ->
-- On CHAR reduce production nl_opt ->
-- On BOOL reduce production nl_opt ->
-- On ATOM reduce production nl_opt ->
-- On ASSERT reduce production nl_opt ->

State 659:
## Known stack suffix:
## IDENT rev_formal_args EQUAL nl_opt
## LR(1) items:
fundef -> IDENT rev_formal_args EQUAL nl_opt . block [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On VAR shift to state 107
-- On UIDENT shift to state 446
-- On TRY shift to state 485
-- On STRING shift to state 448
-- On RETURN shift to state 493
-- On RECEIVE shift to state 494
-- On RAISE shift to state 498
-- On PERFORM shift to state 499
-- On NOT shift to state 503
-- On MINUS shift to state 504
-- On MATCH shift to state 505
-- On LPAREN shift to state 512
-- On LESS_LESS shift to state 453
-- On LBRACK shift to state 456
-- On LBRACE shift to state 516
-- On INT shift to state 463
-- On IF shift to state 519
-- On IDENT shift to state 534
-- On FUN shift to state 536
-- On FOR shift to state 545
-- On FLOAT shift to state 465
-- On EXCL shift to state 466
-- On DEF shift to state 557
-- On CHAR shift to state 467
-- On BOOL shift to state 468
-- On ATOM shift to state 469
-- On ASSERT shift to state 562
-- On value_name shift to state 470
-- On tuple shift to state 563
-- On stmt shift to state 627
-- On simple_expr shift to state 564
-- On rev_stmts shift to state 628
-- On rev_module_path shift to state 472
-- On primary shift to state 474
-- On module_path shift to state 479
-- On if_exp shift to state 565
-- On field_expr shift to state 566
-- On expr shift to state 631
-- On block shift to state 660
-- On binding shift to state 482
-- On array_expr shift to state 586
## Reductions:

State 660:
## Known stack suffix:
## IDENT rev_formal_args EQUAL nl_opt block
## LR(1) items:
fundef -> IDENT rev_formal_args EQUAL nl_opt block . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On TYPE reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On TOPVAR reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On TOPDEF reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On NL reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On EXTERNAL reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On EXCEPTION reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On EOF reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block
-- On AND reduce production fundef -> IDENT rev_formal_args EQUAL nl_opt block

State 661:
## Known stack suffix:
## TOPDEF REC fundef
## LR(1) items:
definition -> TOPDEF REC fundef . mutual_fundefs_opt [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On AND shift to state 662
-- On rev_mutual_fundefs shift to state 664
-- On mutual_fundefs_opt shift to state 667
-- On mutual_fundef shift to state 668
## Reductions:
-- On error reduce production mutual_fundefs_opt ->
-- On TYPE reduce production mutual_fundefs_opt ->
-- On TOPVAR reduce production mutual_fundefs_opt ->
-- On TOPDEF reduce production mutual_fundefs_opt ->
-- On NL reduce production mutual_fundefs_opt ->
-- On EXTERNAL reduce production mutual_fundefs_opt ->
-- On EXCEPTION reduce production mutual_fundefs_opt ->
-- On EOF reduce production mutual_fundefs_opt ->

State 662:
## Known stack suffix:
## AND
## LR(1) items:
mutual_fundef -> AND . fundef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On IDENT shift to state 656
-- On fundef shift to state 663
## Reductions:

State 663:
## Known stack suffix:
## AND fundef
## LR(1) items:
mutual_fundef -> AND fundef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production mutual_fundef -> AND fundef
-- On TYPE reduce production mutual_fundef -> AND fundef
-- On TOPVAR reduce production mutual_fundef -> AND fundef
-- On TOPDEF reduce production mutual_fundef -> AND fundef
-- On NL reduce production mutual_fundef -> AND fundef
-- On EXTERNAL reduce production mutual_fundef -> AND fundef
-- On EXCEPTION reduce production mutual_fundef -> AND fundef
-- On EOF reduce production mutual_fundef -> AND fundef
-- On AND reduce production mutual_fundef -> AND fundef

State 664:
## Known stack suffix:
## rev_mutual_fundefs
## LR(1) items:
mutual_fundefs_opt -> rev_mutual_fundefs . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
rev_mutual_fundefs -> rev_mutual_fundefs . NL mutual_fundef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On NL shift to state 665
## Reductions:
-- On error reduce production mutual_fundefs_opt -> rev_mutual_fundefs
-- On TYPE reduce production mutual_fundefs_opt -> rev_mutual_fundefs
-- On TOPVAR reduce production mutual_fundefs_opt -> rev_mutual_fundefs
-- On TOPDEF reduce production mutual_fundefs_opt -> rev_mutual_fundefs
-- On EXTERNAL reduce production mutual_fundefs_opt -> rev_mutual_fundefs
-- On EXCEPTION reduce production mutual_fundefs_opt -> rev_mutual_fundefs
-- On EOF reduce production mutual_fundefs_opt -> rev_mutual_fundefs
-- On AND reduce production mutual_fundefs_opt -> rev_mutual_fundefs

State 665:
## Known stack suffix:
## rev_mutual_fundefs NL
## LR(1) items:
rev_mutual_fundefs -> rev_mutual_fundefs NL . mutual_fundef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On AND shift to state 662
-- On mutual_fundef shift to state 666
## Reductions:

State 666:
## Known stack suffix:
## rev_mutual_fundefs NL mutual_fundef
## LR(1) items:
rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On TYPE reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On TOPVAR reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On TOPDEF reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On NL reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On EXTERNAL reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On EXCEPTION reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On EOF reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef
-- On AND reduce production rev_mutual_fundefs -> rev_mutual_fundefs NL mutual_fundef

State 667:
## Known stack suffix:
## TOPDEF REC fundef mutual_fundefs_opt
## LR(1) items:
definition -> TOPDEF REC fundef mutual_fundefs_opt . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On TYPE reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On TOPVAR reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On TOPDEF reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On NL reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On EXTERNAL reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On EXCEPTION reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On EOF reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt
-- On AND reduce production definition -> TOPDEF REC fundef mutual_fundefs_opt

State 668:
## Known stack suffix:
## mutual_fundef
## LR(1) items:
rev_mutual_fundefs -> mutual_fundef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_mutual_fundefs -> mutual_fundef
-- On TYPE reduce production rev_mutual_fundefs -> mutual_fundef
-- On TOPVAR reduce production rev_mutual_fundefs -> mutual_fundef
-- On TOPDEF reduce production rev_mutual_fundefs -> mutual_fundef
-- On NL reduce production rev_mutual_fundefs -> mutual_fundef
-- On EXTERNAL reduce production rev_mutual_fundefs -> mutual_fundef
-- On EXCEPTION reduce production rev_mutual_fundefs -> mutual_fundef
-- On EOF reduce production rev_mutual_fundefs -> mutual_fundef
-- On AND reduce production rev_mutual_fundefs -> mutual_fundef

State 669:
## Known stack suffix:
## IDENT
## LR(1) items:
fundef -> IDENT . rev_formal_args EQUAL nl_opt block [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
sigdef -> IDENT . COLON type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 124
-- On STRING shift to state 126
-- On LPAREN shift to state 128
-- On LBRACK shift to state 130
-- On LBRACE shift to state 132
-- On INT shift to state 135
-- On IDENT shift to state 136
-- On FLOAT shift to state 137
-- On COLON shift to state 651
-- On BOOL shift to state 138
-- On ATOM shift to state 139
-- On rev_module_path shift to state 140
-- On rev_formal_args shift to state 657
-- On pattern shift to state 329
-- On formal_arg shift to state 335
-- On constr_name shift to state 146
## Reductions:

State 670:
## Known stack suffix:
## TOPDEF sigdef
## LR(1) items:
definition -> TOPDEF sigdef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> TOPDEF sigdef
-- On TYPE reduce production definition -> TOPDEF sigdef
-- On TOPVAR reduce production definition -> TOPDEF sigdef
-- On TOPDEF reduce production definition -> TOPDEF sigdef
-- On NL reduce production definition -> TOPDEF sigdef
-- On EXTERNAL reduce production definition -> TOPDEF sigdef
-- On EXCEPTION reduce production definition -> TOPDEF sigdef
-- On EOF reduce production definition -> TOPDEF sigdef
-- On AND reduce production definition -> TOPDEF sigdef

State 671:
## Known stack suffix:
## TOPDEF fundef
## LR(1) items:
definition -> TOPDEF fundef . mutual_fundefs_opt [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On AND shift to state 662
-- On rev_mutual_fundefs shift to state 664
-- On mutual_fundefs_opt shift to state 672
-- On mutual_fundef shift to state 668
## Reductions:
-- On error reduce production mutual_fundefs_opt ->
-- On TYPE reduce production mutual_fundefs_opt ->
-- On TOPVAR reduce production mutual_fundefs_opt ->
-- On TOPDEF reduce production mutual_fundefs_opt ->
-- On NL reduce production mutual_fundefs_opt ->
-- On EXTERNAL reduce production mutual_fundefs_opt ->
-- On EXCEPTION reduce production mutual_fundefs_opt ->
-- On EOF reduce production mutual_fundefs_opt ->

State 672:
## Known stack suffix:
## TOPDEF fundef mutual_fundefs_opt
## LR(1) items:
definition -> TOPDEF fundef mutual_fundefs_opt . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On TYPE reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On TOPVAR reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On TOPDEF reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On NL reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On EXTERNAL reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On EXCEPTION reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On EOF reduce production definition -> TOPDEF fundef mutual_fundefs_opt
-- On AND reduce production definition -> TOPDEF fundef mutual_fundefs_opt

State 673:
## Known stack suffix:
## NL
## LR(1) items:
definition -> NL . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> NL
-- On TYPE reduce production definition -> NL
-- On TOPVAR reduce production definition -> NL
-- On TOPDEF reduce production definition -> NL
-- On NL reduce production definition -> NL
-- On EXTERNAL reduce production definition -> NL
-- On EXCEPTION reduce production definition -> NL
-- On EOF reduce production definition -> NL
-- On AND reduce production definition -> NL

State 674:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
definition -> EXTERNAL . ext_sigdef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On IDENT shift to state 675
-- On sigdef shift to state 678
-- On ext_sigdef shift to state 682
## Reductions:

State 675:
## Known stack suffix:
## IDENT
## LR(1) items:
sigdef -> IDENT . COLON type_expr [ EQUAL ]
## Transitions:
-- On COLON shift to state 676
## Reductions:

State 676:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
sigdef -> IDENT COLON . type_expr [ EQUAL ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 22
-- On LPAREN shift to state 23
-- On IDENT shift to state 24
-- On type_expr_tuple shift to state 25
-- On type_expr shift to state 677
-- On type_constr shift to state 36
-- On simple_type_expr shift to state 37
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:

State 677:
## Known stack suffix:
## IDENT COLON type_expr
## LR(1) items:
sigdef -> IDENT COLON type_expr . [ EQUAL ]
type_expr -> type_expr . type_constr [ UIDENT RARROW IDENT EQUAL ]
type_expr -> type_expr . RARROW type_expr [ UIDENT RARROW IDENT EQUAL ]
## Transitions:
-- On UIDENT shift to state 19
-- On RARROW shift to state 28
-- On IDENT shift to state 24
-- On type_constr shift to state 30
-- On rev_constr_path shift to state 31
-- On constr shift to state 35
## Reductions:
-- On EQUAL reduce production sigdef -> IDENT COLON type_expr

State 678:
## Known stack suffix:
## sigdef
## LR(1) items:
ext_sigdef -> sigdef . EQUAL nl_opt STRING [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On EQUAL shift to state 679
## Reductions:

State 679:
## Known stack suffix:
## sigdef EQUAL
## LR(1) items:
ext_sigdef -> sigdef EQUAL . nl_opt STRING [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On NL shift to state 15
-- On nl_opt shift to state 680
## Reductions:
-- On STRING reduce production nl_opt ->

State 680:
## Known stack suffix:
## sigdef EQUAL nl_opt
## LR(1) items:
ext_sigdef -> sigdef EQUAL nl_opt . STRING [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On STRING shift to state 681
## Reductions:

State 681:
## Known stack suffix:
## sigdef EQUAL nl_opt STRING
## LR(1) items:
ext_sigdef -> sigdef EQUAL nl_opt STRING . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On TYPE reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On TOPVAR reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On TOPDEF reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On NL reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On EXTERNAL reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On EXCEPTION reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On EOF reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING
-- On AND reduce production ext_sigdef -> sigdef EQUAL nl_opt STRING

State 682:
## Known stack suffix:
## EXTERNAL ext_sigdef
## LR(1) items:
definition -> EXTERNAL ext_sigdef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> EXTERNAL ext_sigdef
-- On TYPE reduce production definition -> EXTERNAL ext_sigdef
-- On TOPVAR reduce production definition -> EXTERNAL ext_sigdef
-- On TOPDEF reduce production definition -> EXTERNAL ext_sigdef
-- On NL reduce production definition -> EXTERNAL ext_sigdef
-- On EXTERNAL reduce production definition -> EXTERNAL ext_sigdef
-- On EXCEPTION reduce production definition -> EXTERNAL ext_sigdef
-- On EOF reduce production definition -> EXTERNAL ext_sigdef
-- On AND reduce production definition -> EXTERNAL ext_sigdef

State 683:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
definition -> EXCEPTION . UIDENT [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
definition -> EXCEPTION . UIDENT OF type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
definition -> EXCEPTION . UIDENT EQUAL constr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 684
## Reductions:

State 684:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
definition -> EXCEPTION UIDENT . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
definition -> EXCEPTION UIDENT . OF type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
definition -> EXCEPTION UIDENT . EQUAL constr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On OF shift to state 685
-- On EQUAL shift to state 687
## Reductions:
-- On error reduce production definition -> EXCEPTION UIDENT
-- On TYPE reduce production definition -> EXCEPTION UIDENT
-- On TOPVAR reduce production definition -> EXCEPTION UIDENT
-- On TOPDEF reduce production definition -> EXCEPTION UIDENT
-- On NL reduce production definition -> EXCEPTION UIDENT
-- On EXTERNAL reduce production definition -> EXCEPTION UIDENT
-- On EXCEPTION reduce production definition -> EXCEPTION UIDENT
-- On EOF reduce production definition -> EXCEPTION UIDENT
-- On AND reduce production definition -> EXCEPTION UIDENT

State 685:
## Known stack suffix:
## EXCEPTION UIDENT OF
## LR(1) items:
definition -> EXCEPTION UIDENT OF . type_expr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On QIDENT shift to state 20
-- On LPAREN shift to state 21
-- On IDENT shift to state 53
-- On type_expr_tuple shift to state 58
-- On type_expr shift to state 686
-- On type_constr shift to state 63
-- On simple_type_expr shift to state 64
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:

State 686:
## Known stack suffix:
## EXCEPTION UIDENT OF type_expr
## LR(1) items:
definition -> EXCEPTION UIDENT OF type_expr . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . type_constr [ error UIDENT TYPE TOPVAR TOPDEF RARROW NL IDENT EXTERNAL EXCEPTION EOF AND ]
type_expr -> type_expr . RARROW type_expr [ error UIDENT TYPE TOPVAR TOPDEF RARROW NL IDENT EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On RARROW shift to state 60
-- On IDENT shift to state 53
-- On type_constr shift to state 62
-- On rev_constr_path shift to state 55
-- On constr shift to state 57
## Reductions:
-- On error reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On TYPE reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On TOPVAR reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On TOPDEF reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On NL reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On EXTERNAL reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On EXCEPTION reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On EOF reduce production definition -> EXCEPTION UIDENT OF type_expr
-- On AND reduce production definition -> EXCEPTION UIDENT OF type_expr

State 687:
## Known stack suffix:
## EXCEPTION UIDENT EQUAL
## LR(1) items:
definition -> EXCEPTION UIDENT EQUAL . constr [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On UIDENT shift to state 19
-- On IDENT shift to state 53
-- On rev_constr_path shift to state 55
-- On constr shift to state 688
## Reductions:

State 688:
## Known stack suffix:
## EXCEPTION UIDENT EQUAL constr
## LR(1) items:
definition -> EXCEPTION UIDENT EQUAL constr . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On TYPE reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On TOPVAR reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On TOPDEF reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On NL reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On EXTERNAL reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On EXCEPTION reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On EOF reduce production definition -> EXCEPTION UIDENT EQUAL constr
-- On AND reduce production definition -> EXCEPTION UIDENT EQUAL constr

State 689:
## Known stack suffix:
## AND
## LR(1) items:
definition -> AND . typedef [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On QIDENT shift to state 3
-- On LPAREN shift to state 4
-- On typedef shift to state 690
-- On type_params_opt shift to state 12
-- On type_params shift to state 101
-- On type_param shift to state 102
## Reductions:
-- On IDENT reduce production type_params_opt ->

State 690:
## Known stack suffix:
## AND typedef
## LR(1) items:
definition -> AND typedef . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production definition -> AND typedef
-- On TYPE reduce production definition -> AND typedef
-- On TOPVAR reduce production definition -> AND typedef
-- On TOPDEF reduce production definition -> AND typedef
-- On NL reduce production definition -> AND typedef
-- On EXTERNAL reduce production definition -> AND typedef
-- On EXCEPTION reduce production definition -> AND typedef
-- On EOF reduce production definition -> AND typedef
-- On AND reduce production definition -> AND typedef

State 691:
## Known stack suffix:
## rev_definitions
## LR(1) items:
definitions -> rev_definitions . [ EOF ]
rev_definitions -> rev_definitions . definition [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
-- On error shift to state 1
-- On TYPE shift to state 2
-- On TOPVAR shift to state 103
-- On TOPDEF shift to state 654
-- On NL shift to state 673
-- On EXTERNAL shift to state 674
-- On EXCEPTION shift to state 683
-- On AND shift to state 689
-- On definition shift to state 692
## Reductions:
-- On EOF reduce production definitions -> rev_definitions

State 692:
## Known stack suffix:
## rev_definitions definition
## LR(1) items:
rev_definitions -> rev_definitions definition . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_definitions -> rev_definitions definition
-- On TYPE reduce production rev_definitions -> rev_definitions definition
-- On TOPVAR reduce production rev_definitions -> rev_definitions definition
-- On TOPDEF reduce production rev_definitions -> rev_definitions definition
-- On NL reduce production rev_definitions -> rev_definitions definition
-- On EXTERNAL reduce production rev_definitions -> rev_definitions definition
-- On EXCEPTION reduce production rev_definitions -> rev_definitions definition
-- On EOF reduce production rev_definitions -> rev_definitions definition
-- On AND reduce production rev_definitions -> rev_definitions definition

State 693:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On # accept prog

State 694:
## Known stack suffix:
## definitions
## LR(1) items:
prog -> definitions . EOF [ # ]
## Transitions:
-- On EOF shift to state 695
## Reductions:

State 695:
## Known stack suffix:
## definitions EOF
## LR(1) items:
prog -> definitions EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production prog -> definitions EOF

State 696:
## Known stack suffix:
## definition
## LR(1) items:
rev_definitions -> definition . [ error TYPE TOPVAR TOPDEF NL EXTERNAL EXCEPTION EOF AND ]
## Transitions:
## Reductions:
-- On error reduce production rev_definitions -> definition
-- On TYPE reduce production rev_definitions -> definition
-- On TOPVAR reduce production rev_definitions -> definition
-- On TOPDEF reduce production rev_definitions -> definition
-- On NL reduce production rev_definitions -> definition
-- On EXTERNAL reduce production rev_definitions -> definition
-- On EXCEPTION reduce production rev_definitions -> definition
-- On EOF reduce production rev_definitions -> definition
-- On AND reduce production rev_definitions -> definition

