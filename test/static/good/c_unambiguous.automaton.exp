State 0:
## Known stack suffix:
##
## LR(1) items:
translation_unit_file' -> . translation_unit_file [ # ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On STAR shift to state 9
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LPAREN shift to state 19
-- On LONG shift to state 25
-- On INT shift to state 26
-- On IDENTIFIER shift to state 20
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On translation_unit_file shift to state 242
-- On translation_unit shift to state 243
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On pointer shift to state 21
-- On function_definition shift to state 245
-- On external_declaration shift to state 400
-- On enum_specifier shift to state 170
-- On direct_declarator shift to state 161
-- On declarator shift to state 247
-- On declaration_specifiers shift to state 394
-- On declaration shift to state 399
## Reductions:

State 1:
## Known stack suffix:
## VOLATILE
## LR(1) items:
type_qualifier -> VOLATILE . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_qualifier -> VOLATILE

State 2:
## Known stack suffix:
## VOID
## LR(1) items:
type_specifier -> VOID . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> VOID

State 3:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
type_specifier -> UNSIGNED . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> UNSIGNED

State 4:
## Known stack suffix:
## UNION
## LR(1) items:
struct_or_union -> UNION . [ LBRACE IDENTIFIER ]
## Transitions:
## Reductions:
-- On LBRACE IDENTIFIER
--   reduce production struct_or_union -> UNION

State 5:
## Known stack suffix:
## TYPE_NAME
## LR(1) items:
type_specifier -> TYPE_NAME . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> TYPE_NAME

State 6:
## Known stack suffix:
## TYPEDEF
## LR(1) items:
storage_class_specifier -> TYPEDEF . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO
--   reduce production storage_class_specifier -> TYPEDEF

State 7:
## Known stack suffix:
## STRUCT
## LR(1) items:
struct_or_union -> STRUCT . [ LBRACE IDENTIFIER ]
## Transitions:
## Reductions:
-- On LBRACE IDENTIFIER
--   reduce production struct_or_union -> STRUCT

State 8:
## Known stack suffix:
## STATIC
## LR(1) items:
storage_class_specifier -> STATIC . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO
--   reduce production storage_class_specifier -> STATIC

State 9:
## Known stack suffix:
## STAR
## LR(1) items:
pointer -> STAR . [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
pointer -> STAR . type_qualifier_list [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
pointer -> STAR . pointer [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
pointer -> STAR . type_qualifier_list pointer [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On STAR shift to state 9
-- On CONST shift to state 10
-- On type_qualifier_list shift to state 11
-- On type_qualifier shift to state 14
-- On pointer shift to state 15
## Reductions:
-- On RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production pointer -> STAR

State 10:
## Known stack suffix:
## CONST
## LR(1) items:
type_qualifier -> CONST . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_qualifier -> CONST

State 11:
## Known stack suffix:
## STAR type_qualifier_list
## LR(1) items:
pointer -> STAR type_qualifier_list . [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
pointer -> STAR type_qualifier_list . pointer [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
type_qualifier_list -> type_qualifier_list . type_qualifier [ VOLATILE STAR RPAREN LPAREN LBRACK IDENTIFIER CONST COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On STAR shift to state 9
-- On CONST shift to state 10
-- On type_qualifier shift to state 12
-- On pointer shift to state 13
## Reductions:
-- On RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production pointer -> STAR type_qualifier_list

State 12:
## Known stack suffix:
## type_qualifier_list type_qualifier
## LR(1) items:
type_qualifier_list -> type_qualifier_list type_qualifier . [ VOLATILE STAR RPAREN LPAREN LBRACK IDENTIFIER CONST COMMA ]
## Transitions:
## Reductions:
-- On VOLATILE STAR RPAREN LPAREN LBRACK IDENTIFIER CONST COMMA
--   reduce production type_qualifier_list -> type_qualifier_list type_qualifier

State 13:
## Known stack suffix:
## STAR type_qualifier_list pointer
## LR(1) items:
pointer -> STAR type_qualifier_list pointer . [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production pointer -> STAR type_qualifier_list pointer

State 14:
## Known stack suffix:
## type_qualifier
## LR(1) items:
type_qualifier_list -> type_qualifier . [ VOLATILE STAR RPAREN LPAREN LBRACK IDENTIFIER CONST COMMA ]
## Transitions:
## Reductions:
-- On VOLATILE STAR RPAREN LPAREN LBRACK IDENTIFIER CONST COMMA
--   reduce production type_qualifier_list -> type_qualifier

State 15:
## Known stack suffix:
## STAR pointer
## LR(1) items:
pointer -> STAR pointer . [ RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production pointer -> STAR pointer

State 16:
## Known stack suffix:
## SIGNED
## LR(1) items:
type_specifier -> SIGNED . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> SIGNED

State 17:
## Known stack suffix:
## SHORT
## LR(1) items:
type_specifier -> SHORT . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> SHORT

State 18:
## Known stack suffix:
## REGISTER
## LR(1) items:
storage_class_specifier -> REGISTER . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO
--   reduce production storage_class_specifier -> REGISTER

State 19:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_declarator -> LPAREN . declarator RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On STAR shift to state 9
-- On LPAREN shift to state 19
-- On IDENTIFIER shift to state 20
-- On pointer shift to state 21
-- On direct_declarator shift to state 161
-- On declarator shift to state 216
## Reductions:

State 20:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
direct_declarator -> IDENTIFIER . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production direct_declarator -> IDENTIFIER

State 21:
## Known stack suffix:
## pointer
## LR(1) items:
declarator -> pointer . direct_declarator [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On LPAREN shift to state 19
-- On IDENTIFIER shift to state 20
-- On direct_declarator shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## pointer direct_declarator
## LR(1) items:
declarator -> pointer direct_declarator . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LBRACK constant_expression RBRACK [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LBRACK RBRACK [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LPAREN RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On LPAREN shift to state 23
-- On LBRACK shift to state 162
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production declarator -> pointer direct_declarator

State 23:
## Known stack suffix:
## direct_declarator LPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator LPAREN . RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On RPAREN shift to state 24
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On INT shift to state 26
-- On IDENTIFIER shift to state 27
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On parameter_type_list shift to state 236
-- On parameter_list shift to state 201
-- On parameter_declaration shift to state 210
-- On identifier_list shift to state 238
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 205
## Reductions:

State 24:
## Known stack suffix:
## direct_declarator LPAREN RPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN RPAREN . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production direct_declarator -> direct_declarator LPAREN RPAREN

State 25:
## Known stack suffix:
## LONG
## LR(1) items:
type_specifier -> LONG . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> LONG

State 26:
## Known stack suffix:
## INT
## LR(1) items:
type_specifier -> INT . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> INT

State 27:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
identifier_list -> IDENTIFIER . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production identifier_list -> IDENTIFIER

State 28:
## Known stack suffix:
## FLOAT
## LR(1) items:
type_specifier -> FLOAT . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> FLOAT

State 29:
## Known stack suffix:
## EXTERN
## LR(1) items:
storage_class_specifier -> EXTERN . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO
--   reduce production storage_class_specifier -> EXTERN

State 30:
## Known stack suffix:
## ENUM
## LR(1) items:
enum_specifier -> ENUM . LBRACE enumerator_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
enum_specifier -> ENUM . IDENTIFIER LBRACE enumerator_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
enum_specifier -> ENUM . IDENTIFIER [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On LBRACE shift to state 31
-- On IDENTIFIER shift to state 232
## Reductions:

State 31:
## Known stack suffix:
## ENUM LBRACE
## LR(1) items:
enum_specifier -> ENUM LBRACE . enumerator_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On IDENTIFIER shift to state 32
-- On enumerator_list shift to state 227
-- On enumerator shift to state 231
## Reductions:

State 32:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
enumerator -> IDENTIFIER . [ RBRACE COMMA ]
enumerator -> IDENTIFIER . EQUAL constant_expression [ RBRACE COMMA ]
## Transitions:
-- On EQUAL shift to state 33
## Reductions:
-- On RBRACE COMMA
--   reduce production enumerator -> IDENTIFIER

State 33:
## Known stack suffix:
## IDENTIFIER EQUAL
## LR(1) items:
enumerator -> IDENTIFIER EQUAL . constant_expression [ RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 226
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 34:
## Known stack suffix:
## TILDE
## LR(1) items:
unary_operator -> TILDE . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production unary_operator -> TILDE

State 35:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
primary_expression -> STRING_LITERAL . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production primary_expression -> STRING_LITERAL

State 36:
## Known stack suffix:
## STAR
## LR(1) items:
unary_operator -> STAR . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production unary_operator -> STAR

State 37:
## Known stack suffix:
## SIZEOF
## LR(1) items:
unary_expression -> SIZEOF . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
unary_expression -> SIZEOF . LPAREN type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 40
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 225
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
## Reductions:

State 38:
## Known stack suffix:
## PLUS
## LR(1) items:
unary_operator -> PLUS . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production unary_operator -> PLUS

State 39:
## Known stack suffix:
## MINUS
## LR(1) items:
unary_operator -> MINUS . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production unary_operator -> MINUS

State 40:
## Known stack suffix:
## SIZEOF LPAREN
## LR(1) items:
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
unary_expression -> SIZEOF LPAREN . type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TILDE shift to state 34
-- On STRUCT shift to state 7
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LONG shift to state 25
-- On INT shift to state 26
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On type_name shift to state 223
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On specifier_qualifier_list shift to state 181
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 140
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On enum_specifier shift to state 170
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 41:
## Known stack suffix:
## LPAREN
## LR(1) items:
cast_expression -> LPAREN . type_name RPAREN cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TILDE shift to state 34
-- On STRUCT shift to state 7
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LONG shift to state 25
-- On INT shift to state 26
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On type_name shift to state 178
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On specifier_qualifier_list shift to state 181
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 140
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On enum_specifier shift to state 170
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 42:
## Known stack suffix:
## INC_OP
## LR(1) items:
unary_expression -> INC_OP . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 43
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 142
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
## Reductions:

State 43:
## Known stack suffix:
## LPAREN
## LR(1) items:
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 140
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 44:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
primary_expression -> IDENTIFIER . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production primary_expression -> IDENTIFIER

State 45:
## Known stack suffix:
## DEC_OP
## LR(1) items:
unary_expression -> DEC_OP . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 43
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 139
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
## Reductions:

State 46:
## Known stack suffix:
## CONSTANT
## LR(1) items:
primary_expression -> CONSTANT . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production primary_expression -> CONSTANT

State 47:
## Known stack suffix:
## BANG
## LR(1) items:
unary_operator -> BANG . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production unary_operator -> BANG

State 48:
## Known stack suffix:
## AMPERSAND
## LR(1) items:
unary_operator -> AMPERSAND . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production unary_operator -> AMPERSAND

State 49:
## Known stack suffix:
## unary_operator
## LR(1) items:
unary_expression -> unary_operator . cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On cast_expression shift to state 138
## Reductions:

State 50:
## Known stack suffix:
## unary_expression
## LR(1) items:
cast_expression -> unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production cast_expression -> unary_expression

State 51:
## Known stack suffix:
## primary_expression
## LR(1) items:
postfix_expression -> primary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> primary_expression

State 52:
## Known stack suffix:
## postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . LBRACK expression RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
postfix_expression -> postfix_expression . LPAREN RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
postfix_expression -> postfix_expression . DOT IDENTIFIER [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
postfix_expression -> postfix_expression . PTR_OP IDENTIFIER [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
postfix_expression -> postfix_expression . INC_OP [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
postfix_expression -> postfix_expression . DEC_OP [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
unary_expression -> postfix_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On PTR_OP shift to state 53
-- On LPAREN shift to state 55
-- On LBRACK shift to state 131
-- On INC_OP shift to state 134
-- On DOT shift to state 135
-- On DEC_OP shift to state 137
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production unary_expression -> postfix_expression

State 53:
## Known stack suffix:
## postfix_expression PTR_OP
## LR(1) items:
postfix_expression -> postfix_expression PTR_OP . IDENTIFIER [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On IDENTIFIER shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## postfix_expression PTR_OP IDENTIFIER
## LR(1) items:
postfix_expression -> postfix_expression PTR_OP IDENTIFIER . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> postfix_expression PTR_OP IDENTIFIER

State 55:
## Known stack suffix:
## postfix_expression LPAREN
## LR(1) items:
postfix_expression -> postfix_expression LPAREN . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On RPAREN shift to state 56
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 126
-- On argument_expression_list shift to state 127
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 56:
## Known stack suffix:
## postfix_expression LPAREN RPAREN
## LR(1) items:
postfix_expression -> postfix_expression LPAREN RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> postfix_expression LPAREN RPAREN

State 57:
## Known stack suffix:
## unary_expression
## LR(1) items:
assignment_expression -> unary_expression . assignment_operator assignment_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
cast_expression -> unary_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On XOR_ASSIGN shift to state 58
-- On SUB_ASSIGN shift to state 59
-- On RIGHT_ASSIGN shift to state 60
-- On OR_ASSIGN shift to state 61
-- On MUL_ASSIGN shift to state 62
-- On MOD_ASSIGN shift to state 63
-- On LEFT_ASSIGN shift to state 64
-- On EQUAL shift to state 65
-- On DIV_ASSIGN shift to state 66
-- On AND_ASSIGN shift to state 67
-- On ADD_ASSIGN shift to state 68
-- On assignment_operator shift to state 69
## Reductions:
-- On STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production cast_expression -> unary_expression

State 58:
## Known stack suffix:
## XOR_ASSIGN
## LR(1) items:
assignment_operator -> XOR_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> XOR_ASSIGN

State 59:
## Known stack suffix:
## SUB_ASSIGN
## LR(1) items:
assignment_operator -> SUB_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> SUB_ASSIGN

State 60:
## Known stack suffix:
## RIGHT_ASSIGN
## LR(1) items:
assignment_operator -> RIGHT_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> RIGHT_ASSIGN

State 61:
## Known stack suffix:
## OR_ASSIGN
## LR(1) items:
assignment_operator -> OR_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> OR_ASSIGN

State 62:
## Known stack suffix:
## MUL_ASSIGN
## LR(1) items:
assignment_operator -> MUL_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> MUL_ASSIGN

State 63:
## Known stack suffix:
## MOD_ASSIGN
## LR(1) items:
assignment_operator -> MOD_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> MOD_ASSIGN

State 64:
## Known stack suffix:
## LEFT_ASSIGN
## LR(1) items:
assignment_operator -> LEFT_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> LEFT_ASSIGN

State 65:
## Known stack suffix:
## EQUAL
## LR(1) items:
assignment_operator -> EQUAL . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> EQUAL

State 66:
## Known stack suffix:
## DIV_ASSIGN
## LR(1) items:
assignment_operator -> DIV_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> DIV_ASSIGN

State 67:
## Known stack suffix:
## AND_ASSIGN
## LR(1) items:
assignment_operator -> AND_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> AND_ASSIGN

State 68:
## Known stack suffix:
## ADD_ASSIGN
## LR(1) items:
assignment_operator -> ADD_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
--   reduce production assignment_operator -> ADD_ASSIGN

State 69:
## Known stack suffix:
## unary_expression assignment_operator
## LR(1) items:
assignment_expression -> unary_expression assignment_operator . assignment_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 125
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 70:
## Known stack suffix:
## shift_expression
## LR(1) items:
relational_expression -> shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . LEFT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . RIGHT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On RIGHT_OP shift to state 71
-- On LEFT_OP shift to state 85
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production relational_expression -> shift_expression

State 71:
## Known stack suffix:
## shift_expression RIGHT_OP
## LR(1) items:
shift_expression -> shift_expression RIGHT_OP . additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 80
## Reductions:

State 72:
## Known stack suffix:
## multiplicative_expression
## LR(1) items:
additive_expression -> multiplicative_expression . [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . STAR cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . SLASH cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . PERCENT cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On STAR shift to state 73
-- On SLASH shift to state 75
-- On PERCENT shift to state 77
## Reductions:
-- On SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production additive_expression -> multiplicative_expression

State 73:
## Known stack suffix:
## multiplicative_expression STAR
## LR(1) items:
multiplicative_expression -> multiplicative_expression STAR . cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On cast_expression shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## multiplicative_expression STAR cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression STAR cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
## Reductions:
-- On STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production multiplicative_expression -> multiplicative_expression STAR cast_expression

State 75:
## Known stack suffix:
## multiplicative_expression SLASH
## LR(1) items:
multiplicative_expression -> multiplicative_expression SLASH . cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On cast_expression shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## multiplicative_expression SLASH cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression SLASH cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
## Reductions:
-- On STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production multiplicative_expression -> multiplicative_expression SLASH cast_expression

State 77:
## Known stack suffix:
## multiplicative_expression PERCENT
## LR(1) items:
multiplicative_expression -> multiplicative_expression PERCENT . cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On cast_expression shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## multiplicative_expression PERCENT cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression PERCENT cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
## Reductions:
-- On STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production multiplicative_expression -> multiplicative_expression PERCENT cast_expression

State 79:
## Known stack suffix:
## cast_expression
## LR(1) items:
multiplicative_expression -> cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
## Reductions:
-- On STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production multiplicative_expression -> cast_expression

State 80:
## Known stack suffix:
## shift_expression RIGHT_OP additive_expression
## LR(1) items:
additive_expression -> additive_expression . PLUS multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
additive_expression -> additive_expression . MINUS multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression RIGHT_OP additive_expression . [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On PLUS shift to state 81
-- On MINUS shift to state 83
## Reductions:
-- On SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production shift_expression -> shift_expression RIGHT_OP additive_expression

State 81:
## Known stack suffix:
## additive_expression PLUS
## LR(1) items:
additive_expression -> additive_expression PLUS . multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 82
-- On cast_expression shift to state 79
## Reductions:

State 82:
## Known stack suffix:
## additive_expression PLUS multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression PLUS multiplicative_expression . [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . STAR cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . SLASH cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . PERCENT cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On STAR shift to state 73
-- On SLASH shift to state 75
-- On PERCENT shift to state 77
## Reductions:
-- On SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production additive_expression -> additive_expression PLUS multiplicative_expression

State 83:
## Known stack suffix:
## additive_expression MINUS
## LR(1) items:
additive_expression -> additive_expression MINUS . multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 84
-- On cast_expression shift to state 79
## Reductions:

State 84:
## Known stack suffix:
## additive_expression MINUS multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression MINUS multiplicative_expression . [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . STAR cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . SLASH cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
multiplicative_expression -> multiplicative_expression . PERCENT cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On STAR shift to state 73
-- On SLASH shift to state 75
-- On PERCENT shift to state 77
## Reductions:
-- On SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production additive_expression -> additive_expression MINUS multiplicative_expression

State 85:
## Known stack suffix:
## shift_expression LEFT_OP
## LR(1) items:
shift_expression -> shift_expression LEFT_OP . additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## shift_expression LEFT_OP additive_expression
## LR(1) items:
additive_expression -> additive_expression . PLUS multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
additive_expression -> additive_expression . MINUS multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression LEFT_OP additive_expression . [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On PLUS shift to state 81
-- On MINUS shift to state 83
## Reductions:
-- On SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production shift_expression -> shift_expression LEFT_OP additive_expression

State 87:
## Known stack suffix:
## relational_expression
## LR(1) items:
equality_expression -> relational_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . LT shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . GT shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . LE_OP shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . GE_OP shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On LT shift to state 88
-- On LE_OP shift to state 91
-- On GT shift to state 93
-- On GE_OP shift to state 95
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production equality_expression -> relational_expression

State 88:
## Known stack suffix:
## relational_expression LT
## LR(1) items:
relational_expression -> relational_expression LT . shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 89
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 90
## Reductions:

State 89:
## Known stack suffix:
## relational_expression LT shift_expression
## LR(1) items:
relational_expression -> relational_expression LT shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . LEFT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . RIGHT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On RIGHT_OP shift to state 71
-- On LEFT_OP shift to state 85
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production relational_expression -> relational_expression LT shift_expression

State 90:
## Known stack suffix:
## additive_expression
## LR(1) items:
additive_expression -> additive_expression . PLUS multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
additive_expression -> additive_expression . MINUS multiplicative_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> additive_expression . [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On PLUS shift to state 81
-- On MINUS shift to state 83
## Reductions:
-- On SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production shift_expression -> additive_expression

State 91:
## Known stack suffix:
## relational_expression LE_OP
## LR(1) items:
relational_expression -> relational_expression LE_OP . shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 92
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 90
## Reductions:

State 92:
## Known stack suffix:
## relational_expression LE_OP shift_expression
## LR(1) items:
relational_expression -> relational_expression LE_OP shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . LEFT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . RIGHT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On RIGHT_OP shift to state 71
-- On LEFT_OP shift to state 85
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production relational_expression -> relational_expression LE_OP shift_expression

State 93:
## Known stack suffix:
## relational_expression GT
## LR(1) items:
relational_expression -> relational_expression GT . shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 94
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 90
## Reductions:

State 94:
## Known stack suffix:
## relational_expression GT shift_expression
## LR(1) items:
relational_expression -> relational_expression GT shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . LEFT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . RIGHT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On RIGHT_OP shift to state 71
-- On LEFT_OP shift to state 85
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production relational_expression -> relational_expression GT shift_expression

State 95:
## Known stack suffix:
## relational_expression GE_OP
## LR(1) items:
relational_expression -> relational_expression GE_OP . shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 96
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 90
## Reductions:

State 96:
## Known stack suffix:
## relational_expression GE_OP shift_expression
## LR(1) items:
relational_expression -> relational_expression GE_OP shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . LEFT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
shift_expression -> shift_expression . RIGHT_OP additive_expression [ SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On RIGHT_OP shift to state 71
-- On LEFT_OP shift to state 85
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production relational_expression -> relational_expression GE_OP shift_expression

State 97:
## Known stack suffix:
## logical_or_expression
## LR(1) items:
conditional_expression -> logical_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
logical_or_expression -> logical_or_expression . OR_OP logical_and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON ]
## Transitions:
-- On QUESTION shift to state 98
-- On OR_OP shift to state 123
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE COMMA COLON
--   reduce production conditional_expression -> logical_or_expression

State 98:
## Known stack suffix:
## logical_or_expression QUESTION
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 116
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 99:
## Known stack suffix:
## logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP ]
logical_or_expression -> logical_and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON ]
## Transitions:
-- On AND_OP shift to state 100
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON
--   reduce production logical_or_expression -> logical_and_expression

State 100:
## Known stack suffix:
## logical_and_expression AND_OP
## LR(1) items:
logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On inclusive_or_expression shift to state 101
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 101:
## Known stack suffix:
## logical_and_expression AND_OP inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . BAR exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP ]
logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP ]
## Transitions:
-- On BAR shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP
--   reduce production logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression

State 102:
## Known stack suffix:
## inclusive_or_expression BAR
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression BAR . exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On exclusive_or_expression shift to state 103
-- On equality_expression shift to state 105
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 103:
## Known stack suffix:
## inclusive_or_expression BAR exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . HAT and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP ]
inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP ]
## Transitions:
-- On HAT shift to state 104
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP
--   reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression

State 104:
## Known stack suffix:
## exclusive_or_expression HAT
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression HAT . and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On equality_expression shift to state 105
-- On cast_expression shift to state 79
-- On and_expression shift to state 110
-- On additive_expression shift to state 90
## Reductions:

State 105:
## Known stack suffix:
## equality_expression
## LR(1) items:
and_expression -> equality_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND ]
equality_expression -> equality_expression . EQ_OP relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
equality_expression -> equality_expression . NE_OP relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On NE_OP shift to state 106
-- On EQ_OP shift to state 108
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND
--   reduce production and_expression -> equality_expression

State 106:
## Known stack suffix:
## equality_expression NE_OP
## LR(1) items:
equality_expression -> equality_expression NE_OP . relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 107
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 90
## Reductions:

State 107:
## Known stack suffix:
## equality_expression NE_OP relational_expression
## LR(1) items:
equality_expression -> equality_expression NE_OP relational_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . LT shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . GT shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . LE_OP shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . GE_OP shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On LT shift to state 88
-- On LE_OP shift to state 91
-- On GT shift to state 93
-- On GE_OP shift to state 95
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production equality_expression -> equality_expression NE_OP relational_expression

State 108:
## Known stack suffix:
## equality_expression EQ_OP
## LR(1) items:
equality_expression -> equality_expression EQ_OP . relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 109
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On cast_expression shift to state 79
-- On additive_expression shift to state 90
## Reductions:

State 109:
## Known stack suffix:
## equality_expression EQ_OP relational_expression
## LR(1) items:
equality_expression -> equality_expression EQ_OP relational_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . LT shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . GT shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . LE_OP shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
relational_expression -> relational_expression . GE_OP shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On LT shift to state 88
-- On LE_OP shift to state 91
-- On GT shift to state 93
-- On GE_OP shift to state 95
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND
--   reduce production equality_expression -> equality_expression EQ_OP relational_expression

State 110:
## Known stack suffix:
## exclusive_or_expression HAT and_expression
## LR(1) items:
and_expression -> and_expression . AMPERSAND equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND ]
exclusive_or_expression -> exclusive_or_expression HAT and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP ]
## Transitions:
-- On AMPERSAND shift to state 111
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP
--   reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression

State 111:
## Known stack suffix:
## and_expression AMPERSAND
## LR(1) items:
and_expression -> and_expression AMPERSAND . equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On equality_expression shift to state 112
-- On cast_expression shift to state 79
-- On additive_expression shift to state 90
## Reductions:

State 112:
## Known stack suffix:
## and_expression AMPERSAND equality_expression
## LR(1) items:
and_expression -> and_expression AMPERSAND equality_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND ]
equality_expression -> equality_expression . EQ_OP relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
equality_expression -> equality_expression . NE_OP relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND ]
## Transitions:
-- On NE_OP shift to state 106
-- On EQ_OP shift to state 108
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND
--   reduce production and_expression -> and_expression AMPERSAND equality_expression

State 113:
## Known stack suffix:
## and_expression
## LR(1) items:
and_expression -> and_expression . AMPERSAND equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND ]
exclusive_or_expression -> and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP ]
## Transitions:
-- On AMPERSAND shift to state 111
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP
--   reduce production exclusive_or_expression -> and_expression

State 114:
## Known stack suffix:
## exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . HAT and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP ]
inclusive_or_expression -> exclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP ]
## Transitions:
-- On HAT shift to state 104
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP
--   reduce production inclusive_or_expression -> exclusive_or_expression

State 115:
## Known stack suffix:
## inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . BAR exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP ]
logical_and_expression -> inclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP ]
## Transitions:
-- On BAR shift to state 102
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP
--   reduce production logical_and_expression -> inclusive_or_expression

State 116:
## Known stack suffix:
## logical_or_expression QUESTION expression
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
expression -> expression . COMMA assignment_expression [ COMMA COLON ]
## Transitions:
-- On COMMA shift to state 117
-- On COLON shift to state 120
## Reductions:

State 117:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expression -> expression COMMA . assignment_expression [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 119
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 118:
## Known stack suffix:
## conditional_expression
## LR(1) items:
assignment_expression -> conditional_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE COMMA COLON
--   reduce production assignment_expression -> conditional_expression

State 119:
## Known stack suffix:
## expression COMMA assignment_expression
## LR(1) items:
expression -> expression COMMA assignment_expression . [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN RBRACK COMMA COLON
--   reduce production expression -> expression COMMA assignment_expression

State 120:
## Known stack suffix:
## logical_or_expression QUESTION expression COLON
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 121
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 121:
## Known stack suffix:
## logical_or_expression QUESTION expression COLON conditional_expression
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE COMMA COLON
--   reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression

State 122:
## Known stack suffix:
## assignment_expression
## LR(1) items:
expression -> assignment_expression . [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN RBRACK COMMA COLON
--   reduce production expression -> assignment_expression

State 123:
## Known stack suffix:
## logical_or_expression OR_OP
## LR(1) items:
logical_or_expression -> logical_or_expression OR_OP . logical_and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_and_expression shift to state 124
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 124:
## Known stack suffix:
## logical_or_expression OR_OP logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP ]
logical_or_expression -> logical_or_expression OR_OP logical_and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON ]
## Transitions:
-- On AND_OP shift to state 100
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON
--   reduce production logical_or_expression -> logical_or_expression OR_OP logical_and_expression

State 125:
## Known stack suffix:
## unary_expression assignment_operator assignment_expression
## LR(1) items:
assignment_expression -> unary_expression assignment_operator assignment_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE COMMA COLON
--   reduce production assignment_expression -> unary_expression assignment_operator assignment_expression

State 126:
## Known stack suffix:
## assignment_expression
## LR(1) items:
argument_expression_list -> assignment_expression . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production argument_expression_list -> assignment_expression

State 127:
## Known stack suffix:
## postfix_expression LPAREN argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 128
-- On COMMA shift to state 129
## Reductions:

State 128:
## Known stack suffix:
## postfix_expression LPAREN argument_expression_list RPAREN
## LR(1) items:
postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN

State 129:
## Known stack suffix:
## argument_expression_list COMMA
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA . assignment_expression [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 130
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 130:
## Known stack suffix:
## argument_expression_list COMMA assignment_expression
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA assignment_expression . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production argument_expression_list -> argument_expression_list COMMA assignment_expression

State 131:
## Known stack suffix:
## postfix_expression LBRACK
## LR(1) items:
postfix_expression -> postfix_expression LBRACK . expression RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 132
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 132:
## Known stack suffix:
## postfix_expression LBRACK expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RBRACK COMMA ]
postfix_expression -> postfix_expression LBRACK expression . RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On RBRACK shift to state 133
-- On COMMA shift to state 117
## Reductions:

State 133:
## Known stack suffix:
## postfix_expression LBRACK expression RBRACK
## LR(1) items:
postfix_expression -> postfix_expression LBRACK expression RBRACK . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK

State 134:
## Known stack suffix:
## postfix_expression INC_OP
## LR(1) items:
postfix_expression -> postfix_expression INC_OP . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> postfix_expression INC_OP

State 135:
## Known stack suffix:
## postfix_expression DOT
## LR(1) items:
postfix_expression -> postfix_expression DOT . IDENTIFIER [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On IDENTIFIER shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## postfix_expression DOT IDENTIFIER
## LR(1) items:
postfix_expression -> postfix_expression DOT IDENTIFIER . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> postfix_expression DOT IDENTIFIER

State 137:
## Known stack suffix:
## postfix_expression DEC_OP
## LR(1) items:
postfix_expression -> postfix_expression DEC_OP . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production postfix_expression -> postfix_expression DEC_OP

State 138:
## Known stack suffix:
## unary_operator cast_expression
## LR(1) items:
unary_expression -> unary_operator cast_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production unary_expression -> unary_operator cast_expression

State 139:
## Known stack suffix:
## DEC_OP unary_expression
## LR(1) items:
unary_expression -> DEC_OP unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production unary_expression -> DEC_OP unary_expression

State 140:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
primary_expression -> LPAREN expression . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 141
-- On COMMA shift to state 117
## Reductions:

State 141:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
primary_expression -> LPAREN expression RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production primary_expression -> LPAREN expression RPAREN

State 142:
## Known stack suffix:
## INC_OP unary_expression
## LR(1) items:
unary_expression -> INC_OP unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production unary_expression -> INC_OP unary_expression

State 143:
## Known stack suffix:
## DOUBLE
## LR(1) items:
type_specifier -> DOUBLE . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> DOUBLE

State 144:
## Known stack suffix:
## CHAR
## LR(1) items:
type_specifier -> CHAR . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> CHAR

State 145:
## Known stack suffix:
## type_specifier
## LR(1) items:
specifier_qualifier_list -> type_specifier . specifier_qualifier_list [ STAR RPAREN LPAREN LBRACK IDENTIFIER COLON ]
specifier_qualifier_list -> type_specifier . [ STAR RPAREN LPAREN LBRACK IDENTIFIER COLON ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On STRUCT shift to state 7
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On specifier_qualifier_list shift to state 177
-- On enum_specifier shift to state 170
## Reductions:
-- On STAR RPAREN LPAREN LBRACK IDENTIFIER COLON
--   reduce production specifier_qualifier_list -> type_specifier

State 146:
## Known stack suffix:
## type_qualifier
## LR(1) items:
specifier_qualifier_list -> type_qualifier . specifier_qualifier_list [ STAR RPAREN LPAREN LBRACK IDENTIFIER COLON ]
specifier_qualifier_list -> type_qualifier . [ STAR RPAREN LPAREN LBRACK IDENTIFIER COLON ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On STRUCT shift to state 7
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On specifier_qualifier_list shift to state 176
-- On enum_specifier shift to state 170
## Reductions:
-- On STAR RPAREN LPAREN LBRACK IDENTIFIER COLON
--   reduce production specifier_qualifier_list -> type_qualifier

State 147:
## Known stack suffix:
## struct_or_union_specifier
## LR(1) items:
type_specifier -> struct_or_union_specifier . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> struct_or_union_specifier

State 148:
## Known stack suffix:
## struct_or_union
## LR(1) items:
struct_or_union_specifier -> struct_or_union . IDENTIFIER LBRACE struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
struct_or_union_specifier -> struct_or_union . IDENTIFIER [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On LBRACE shift to state 149
-- On IDENTIFIER shift to state 172
## Reductions:

State 149:
## Known stack suffix:
## struct_or_union LBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On STRUCT shift to state 7
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On struct_declaration_list shift to state 150
-- On struct_declaration shift to state 171
-- On specifier_qualifier_list shift to state 153
-- On enum_specifier shift to state 170
## Reductions:

State 150:
## Known stack suffix:
## struct_or_union LBRACE struct_declaration_list
## LR(1) items:
struct_declaration_list -> struct_declaration_list . struct_declaration [ VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On STRUCT shift to state 7
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On RBRACE shift to state 151
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On struct_declaration shift to state 152
-- On specifier_qualifier_list shift to state 153
-- On enum_specifier shift to state 170
## Reductions:

State 151:
## Known stack suffix:
## struct_or_union LBRACE struct_declaration_list RBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE

State 152:
## Known stack suffix:
## struct_declaration_list struct_declaration
## LR(1) items:
struct_declaration_list -> struct_declaration_list struct_declaration . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR
--   reduce production struct_declaration_list -> struct_declaration_list struct_declaration

State 153:
## Known stack suffix:
## specifier_qualifier_list
## LR(1) items:
struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMICOLON [ VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
## Transitions:
-- On STAR shift to state 9
-- On LPAREN shift to state 19
-- On IDENTIFIER shift to state 20
-- On COLON shift to state 154
-- On struct_declarator_list shift to state 157
-- On struct_declarator shift to state 169
-- On pointer shift to state 21
-- On direct_declarator shift to state 161
-- On declarator shift to state 166
## Reductions:

State 154:
## Known stack suffix:
## COLON
## LR(1) items:
struct_declarator -> COLON . constant_expression [ SEMICOLON COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 155
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 155:
## Known stack suffix:
## COLON constant_expression
## LR(1) items:
struct_declarator -> COLON constant_expression . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA
--   reduce production struct_declarator -> COLON constant_expression

State 156:
## Known stack suffix:
## conditional_expression
## LR(1) items:
constant_expression -> conditional_expression . [ SEMICOLON RBRACK RBRACE COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACK RBRACE COMMA COLON
--   reduce production constant_expression -> conditional_expression

State 157:
## Known stack suffix:
## specifier_qualifier_list struct_declarator_list
## LR(1) items:
struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMICOLON [ VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
struct_declarator_list -> struct_declarator_list . COMMA struct_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On SEMICOLON shift to state 158
-- On COMMA shift to state 159
## Reductions:

State 158:
## Known stack suffix:
## specifier_qualifier_list struct_declarator_list SEMICOLON
## LR(1) items:
struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR
--   reduce production struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON

State 159:
## Known stack suffix:
## struct_declarator_list COMMA
## LR(1) items:
struct_declarator_list -> struct_declarator_list COMMA . struct_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On STAR shift to state 9
-- On LPAREN shift to state 19
-- On IDENTIFIER shift to state 20
-- On COLON shift to state 154
-- On struct_declarator shift to state 160
-- On pointer shift to state 21
-- On direct_declarator shift to state 161
-- On declarator shift to state 166
## Reductions:

State 160:
## Known stack suffix:
## struct_declarator_list COMMA struct_declarator
## LR(1) items:
struct_declarator_list -> struct_declarator_list COMMA struct_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA
--   reduce production struct_declarator_list -> struct_declarator_list COMMA struct_declarator

State 161:
## Known stack suffix:
## direct_declarator
## LR(1) items:
declarator -> direct_declarator . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LBRACK constant_expression RBRACK [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LBRACK RBRACK [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator . LPAREN RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On LPAREN shift to state 23
-- On LBRACK shift to state 162
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production declarator -> direct_declarator

State 162:
## Known stack suffix:
## direct_declarator LBRACK
## LR(1) items:
direct_declarator -> direct_declarator LBRACK . constant_expression RBRACK [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
direct_declarator -> direct_declarator LBRACK . RBRACK [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On RBRACK shift to state 163
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 164
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 163:
## Known stack suffix:
## direct_declarator LBRACK RBRACK
## LR(1) items:
direct_declarator -> direct_declarator LBRACK RBRACK . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production direct_declarator -> direct_declarator LBRACK RBRACK

State 164:
## Known stack suffix:
## direct_declarator LBRACK constant_expression
## LR(1) items:
direct_declarator -> direct_declarator LBRACK constant_expression . RBRACK [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On RBRACK shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## direct_declarator LBRACK constant_expression RBRACK
## LR(1) items:
direct_declarator -> direct_declarator LBRACK constant_expression RBRACK . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production direct_declarator -> direct_declarator LBRACK constant_expression RBRACK

State 166:
## Known stack suffix:
## declarator
## LR(1) items:
struct_declarator -> declarator . [ SEMICOLON COMMA ]
struct_declarator -> declarator . COLON constant_expression [ SEMICOLON COMMA ]
## Transitions:
-- On COLON shift to state 167
## Reductions:
-- On SEMICOLON COMMA
--   reduce production struct_declarator -> declarator

State 167:
## Known stack suffix:
## declarator COLON
## LR(1) items:
struct_declarator -> declarator COLON . constant_expression [ SEMICOLON COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 168
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 168:
## Known stack suffix:
## declarator COLON constant_expression
## LR(1) items:
struct_declarator -> declarator COLON constant_expression . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA
--   reduce production struct_declarator -> declarator COLON constant_expression

State 169:
## Known stack suffix:
## struct_declarator
## LR(1) items:
struct_declarator_list -> struct_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA
--   reduce production struct_declarator_list -> struct_declarator

State 170:
## Known stack suffix:
## enum_specifier
## LR(1) items:
type_specifier -> enum_specifier . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production type_specifier -> enum_specifier

State 171:
## Known stack suffix:
## struct_declaration
## LR(1) items:
struct_declaration_list -> struct_declaration . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR
--   reduce production struct_declaration_list -> struct_declaration

State 172:
## Known stack suffix:
## struct_or_union IDENTIFIER
## LR(1) items:
struct_or_union_specifier -> struct_or_union IDENTIFIER . LBRACE struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
struct_or_union_specifier -> struct_or_union IDENTIFIER . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On LBRACE shift to state 173
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production struct_or_union_specifier -> struct_or_union IDENTIFIER

State 173:
## Known stack suffix:
## struct_or_union IDENTIFIER LBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE . struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On STRUCT shift to state 7
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On struct_declaration_list shift to state 174
-- On struct_declaration shift to state 171
-- On specifier_qualifier_list shift to state 153
-- On enum_specifier shift to state 170
## Reductions:

State 174:
## Known stack suffix:
## struct_or_union IDENTIFIER LBRACE struct_declaration_list
## LR(1) items:
struct_declaration_list -> struct_declaration_list . struct_declaration [ VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR ]
struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list . RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On STRUCT shift to state 7
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On RBRACE shift to state 175
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On type_specifier shift to state 145
-- On type_qualifier shift to state 146
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On struct_declaration shift to state 152
-- On specifier_qualifier_list shift to state 153
-- On enum_specifier shift to state 170
## Reductions:

State 175:
## Known stack suffix:
## struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE

State 176:
## Known stack suffix:
## type_qualifier specifier_qualifier_list
## LR(1) items:
specifier_qualifier_list -> type_qualifier specifier_qualifier_list . [ STAR RPAREN LPAREN LBRACK IDENTIFIER COLON ]
## Transitions:
## Reductions:
-- On STAR RPAREN LPAREN LBRACK IDENTIFIER COLON
--   reduce production specifier_qualifier_list -> type_qualifier specifier_qualifier_list

State 177:
## Known stack suffix:
## type_specifier specifier_qualifier_list
## LR(1) items:
specifier_qualifier_list -> type_specifier specifier_qualifier_list . [ STAR RPAREN LPAREN LBRACK IDENTIFIER COLON ]
## Transitions:
## Reductions:
-- On STAR RPAREN LPAREN LBRACK IDENTIFIER COLON
--   reduce production specifier_qualifier_list -> type_specifier specifier_qualifier_list

State 178:
## Known stack suffix:
## LPAREN type_name
## LR(1) items:
cast_expression -> LPAREN type_name . RPAREN cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## LPAREN type_name RPAREN
## LR(1) items:
cast_expression -> LPAREN type_name RPAREN . cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On cast_expression shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## LPAREN type_name RPAREN cast_expression
## LR(1) items:
cast_expression -> LPAREN type_name RPAREN cast_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production cast_expression -> LPAREN type_name RPAREN cast_expression

State 181:
## Known stack suffix:
## specifier_qualifier_list
## LR(1) items:
type_name -> specifier_qualifier_list . [ RPAREN ]
type_name -> specifier_qualifier_list . abstract_declarator [ RPAREN ]
## Transitions:
-- On STAR shift to state 9
-- On LPAREN shift to state 182
-- On LBRACK shift to state 184
-- On pointer shift to state 195
-- On direct_abstract_declarator shift to state 211
-- On abstract_declarator shift to state 222
## Reductions:
-- On RPAREN
--   reduce production type_name -> specifier_qualifier_list

State 182:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN [ RPAREN LPAREN LBRACK ]
direct_abstract_declarator -> LPAREN . RPAREN [ RPAREN LPAREN LBRACK ]
direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN [ RPAREN LPAREN LBRACK ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On STAR shift to state 9
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On RPAREN shift to state 183
-- On REGISTER shift to state 18
-- On LPAREN shift to state 182
-- On LONG shift to state 25
-- On LBRACK shift to state 184
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On pointer shift to state 195
-- On parameter_type_list shift to state 208
-- On parameter_list shift to state 201
-- On parameter_declaration shift to state 210
-- On enum_specifier shift to state 170
-- On direct_abstract_declarator shift to state 211
-- On declaration_specifiers shift to state 205
-- On abstract_declarator shift to state 218
## Reductions:

State 183:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> LPAREN RPAREN

State 184:
## Known stack suffix:
## LBRACK
## LR(1) items:
direct_abstract_declarator -> LBRACK . RBRACK [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> LBRACK . constant_expression RBRACK [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On RBRACK shift to state 185
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 186
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 185:
## Known stack suffix:
## LBRACK RBRACK
## LR(1) items:
direct_abstract_declarator -> LBRACK RBRACK . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> LBRACK RBRACK

State 186:
## Known stack suffix:
## LBRACK constant_expression
## LR(1) items:
direct_abstract_declarator -> LBRACK constant_expression . RBRACK [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RBRACK shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## LBRACK constant_expression RBRACK
## LR(1) items:
direct_abstract_declarator -> LBRACK constant_expression RBRACK . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> LBRACK constant_expression RBRACK

State 188:
## Known stack suffix:
## AUTO
## LR(1) items:
storage_class_specifier -> AUTO . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO
--   reduce production storage_class_specifier -> AUTO

State 189:
## Known stack suffix:
## type_specifier
## LR(1) items:
declaration_specifiers -> type_specifier . [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
declaration_specifiers -> type_specifier . declaration_specifiers [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 194
## Reductions:
-- On STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production declaration_specifiers -> type_specifier

State 190:
## Known stack suffix:
## type_qualifier
## LR(1) items:
declaration_specifiers -> type_qualifier . [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
declaration_specifiers -> type_qualifier . declaration_specifiers [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 193
## Reductions:
-- On STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production declaration_specifiers -> type_qualifier

State 191:
## Known stack suffix:
## storage_class_specifier
## LR(1) items:
declaration_specifiers -> storage_class_specifier . [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
declaration_specifiers -> storage_class_specifier . declaration_specifiers [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 192
## Reductions:
-- On STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production declaration_specifiers -> storage_class_specifier

State 192:
## Known stack suffix:
## storage_class_specifier declaration_specifiers
## LR(1) items:
declaration_specifiers -> storage_class_specifier declaration_specifiers . [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production declaration_specifiers -> storage_class_specifier declaration_specifiers

State 193:
## Known stack suffix:
## type_qualifier declaration_specifiers
## LR(1) items:
declaration_specifiers -> type_qualifier declaration_specifiers . [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production declaration_specifiers -> type_qualifier declaration_specifiers

State 194:
## Known stack suffix:
## type_specifier declaration_specifiers
## LR(1) items:
declaration_specifiers -> type_specifier declaration_specifiers . [ STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA
--   reduce production declaration_specifiers -> type_specifier declaration_specifiers

State 195:
## Known stack suffix:
## pointer
## LR(1) items:
abstract_declarator -> pointer . [ RPAREN ]
abstract_declarator -> pointer . direct_abstract_declarator [ RPAREN ]
## Transitions:
-- On LPAREN shift to state 182
-- On LBRACK shift to state 184
-- On direct_abstract_declarator shift to state 196
## Reductions:
-- On RPAREN
--   reduce production abstract_declarator -> pointer

State 196:
## Known stack suffix:
## pointer direct_abstract_declarator
## LR(1) items:
abstract_declarator -> pointer direct_abstract_declarator . [ RPAREN COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LBRACK RBRACK [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LBRACK constant_expression RBRACK [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LPAREN shift to state 197
-- On LBRACK shift to state 212
## Reductions:
-- On RPAREN COMMA
--   reduce production abstract_declarator -> pointer direct_abstract_declarator

State 197:
## Known stack suffix:
## direct_abstract_declarator LPAREN
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On RPAREN shift to state 198
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On parameter_type_list shift to state 199
-- On parameter_list shift to state 201
-- On parameter_declaration shift to state 210
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 205
## Reductions:

State 198:
## Known stack suffix:
## direct_abstract_declarator LPAREN RPAREN
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN

State 199:
## Known stack suffix:
## direct_abstract_declarator LPAREN parameter_type_list
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## direct_abstract_declarator LPAREN parameter_type_list RPAREN
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN

State 201:
## Known stack suffix:
## parameter_list
## LR(1) items:
parameter_list -> parameter_list . COMMA parameter_declaration [ RPAREN COMMA ]
parameter_type_list -> parameter_list . [ RPAREN ]
parameter_type_list -> parameter_list . COMMA ELLIPSIS [ RPAREN ]
## Transitions:
-- On COMMA shift to state 202
## Reductions:
-- On RPAREN
--   reduce production parameter_type_list -> parameter_list

State 202:
## Known stack suffix:
## parameter_list COMMA
## LR(1) items:
parameter_list -> parameter_list COMMA . parameter_declaration [ RPAREN COMMA ]
parameter_type_list -> parameter_list COMMA . ELLIPSIS [ RPAREN ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On ELLIPSIS shift to state 203
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On parameter_declaration shift to state 204
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 205
## Reductions:

State 203:
## Known stack suffix:
## parameter_list COMMA ELLIPSIS
## LR(1) items:
parameter_type_list -> parameter_list COMMA ELLIPSIS . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production parameter_type_list -> parameter_list COMMA ELLIPSIS

State 204:
## Known stack suffix:
## parameter_list COMMA parameter_declaration
## LR(1) items:
parameter_list -> parameter_list COMMA parameter_declaration . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production parameter_list -> parameter_list COMMA parameter_declaration

State 205:
## Known stack suffix:
## declaration_specifiers
## LR(1) items:
parameter_declaration -> declaration_specifiers . declarator [ RPAREN COMMA ]
parameter_declaration -> declaration_specifiers . abstract_declarator [ RPAREN COMMA ]
parameter_declaration -> declaration_specifiers . [ RPAREN COMMA ]
## Transitions:
-- On STAR shift to state 9
-- On LPAREN shift to state 206
-- On LBRACK shift to state 184
-- On IDENTIFIER shift to state 20
-- On pointer shift to state 207
-- On direct_declarator shift to state 161
-- On direct_abstract_declarator shift to state 211
-- On declarator shift to state 220
-- On abstract_declarator shift to state 221
## Reductions:
-- On RPAREN COMMA
--   reduce production parameter_declaration -> declaration_specifiers

State 206:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> LPAREN . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_declarator -> LPAREN . declarator RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On STAR shift to state 9
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On RPAREN shift to state 183
-- On REGISTER shift to state 18
-- On LPAREN shift to state 206
-- On LONG shift to state 25
-- On LBRACK shift to state 184
-- On INT shift to state 26
-- On IDENTIFIER shift to state 20
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On pointer shift to state 207
-- On parameter_type_list shift to state 208
-- On parameter_list shift to state 201
-- On parameter_declaration shift to state 210
-- On enum_specifier shift to state 170
-- On direct_declarator shift to state 161
-- On direct_abstract_declarator shift to state 211
-- On declarator shift to state 216
-- On declaration_specifiers shift to state 205
-- On abstract_declarator shift to state 218
## Reductions:

State 207:
## Known stack suffix:
## pointer
## LR(1) items:
abstract_declarator -> pointer . [ RPAREN COMMA ]
abstract_declarator -> pointer . direct_abstract_declarator [ RPAREN COMMA ]
declarator -> pointer . direct_declarator [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 206
-- On LBRACK shift to state 184
-- On IDENTIFIER shift to state 20
-- On direct_declarator shift to state 22
-- On direct_abstract_declarator shift to state 196
## Reductions:
-- On RPAREN COMMA
--   reduce production abstract_declarator -> pointer

State 208:
## Known stack suffix:
## LPAREN parameter_type_list
## LR(1) items:
direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## LPAREN parameter_type_list RPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN parameter_type_list RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> LPAREN parameter_type_list RPAREN

State 210:
## Known stack suffix:
## parameter_declaration
## LR(1) items:
parameter_list -> parameter_declaration . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production parameter_list -> parameter_declaration

State 211:
## Known stack suffix:
## direct_abstract_declarator
## LR(1) items:
abstract_declarator -> direct_abstract_declarator . [ RPAREN COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LBRACK RBRACK [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LBRACK constant_expression RBRACK [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LPAREN shift to state 197
-- On LBRACK shift to state 212
## Reductions:
-- On RPAREN COMMA
--   reduce production abstract_declarator -> direct_abstract_declarator

State 212:
## Known stack suffix:
## direct_abstract_declarator LBRACK
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LBRACK . RBRACK [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> direct_abstract_declarator LBRACK . constant_expression RBRACK [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On RBRACK shift to state 213
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 214
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 213:
## Known stack suffix:
## direct_abstract_declarator LBRACK RBRACK
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> direct_abstract_declarator LBRACK RBRACK

State 214:
## Known stack suffix:
## direct_abstract_declarator LBRACK constant_expression
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression . RBRACK [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RBRACK shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## direct_abstract_declarator LBRACK constant_expression RBRACK
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> direct_abstract_declarator LBRACK constant_expression RBRACK

State 216:
## Known stack suffix:
## LPAREN declarator
## LR(1) items:
direct_declarator -> LPAREN declarator . RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On RPAREN shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## LPAREN declarator RPAREN
## LR(1) items:
direct_declarator -> LPAREN declarator RPAREN . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production direct_declarator -> LPAREN declarator RPAREN

State 218:
## Known stack suffix:
## LPAREN abstract_declarator
## LR(1) items:
direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## LPAREN abstract_declarator RPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN abstract_declarator RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LBRACK COMMA
--   reduce production direct_abstract_declarator -> LPAREN abstract_declarator RPAREN

State 220:
## Known stack suffix:
## declaration_specifiers declarator
## LR(1) items:
parameter_declaration -> declaration_specifiers declarator . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production parameter_declaration -> declaration_specifiers declarator

State 221:
## Known stack suffix:
## declaration_specifiers abstract_declarator
## LR(1) items:
parameter_declaration -> declaration_specifiers abstract_declarator . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production parameter_declaration -> declaration_specifiers abstract_declarator

State 222:
## Known stack suffix:
## specifier_qualifier_list abstract_declarator
## LR(1) items:
type_name -> specifier_qualifier_list abstract_declarator . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production type_name -> specifier_qualifier_list abstract_declarator

State 223:
## Known stack suffix:
## SIZEOF LPAREN type_name
## LR(1) items:
unary_expression -> SIZEOF LPAREN type_name . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## SIZEOF LPAREN type_name RPAREN
## LR(1) items:
unary_expression -> SIZEOF LPAREN type_name RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN

State 225:
## Known stack suffix:
## SIZEOF unary_expression
## LR(1) items:
unary_expression -> SIZEOF unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production unary_expression -> SIZEOF unary_expression

State 226:
## Known stack suffix:
## IDENTIFIER EQUAL constant_expression
## LR(1) items:
enumerator -> IDENTIFIER EQUAL constant_expression . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production enumerator -> IDENTIFIER EQUAL constant_expression

State 227:
## Known stack suffix:
## ENUM LBRACE enumerator_list
## LR(1) items:
enum_specifier -> ENUM LBRACE enumerator_list . RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
enumerator_list -> enumerator_list . COMMA enumerator [ RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 228
-- On COMMA shift to state 229
## Reductions:

State 228:
## Known stack suffix:
## ENUM LBRACE enumerator_list RBRACE
## LR(1) items:
enum_specifier -> ENUM LBRACE enumerator_list RBRACE . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production enum_specifier -> ENUM LBRACE enumerator_list RBRACE

State 229:
## Known stack suffix:
## enumerator_list COMMA
## LR(1) items:
enumerator_list -> enumerator_list COMMA . enumerator [ RBRACE COMMA ]
## Transitions:
-- On IDENTIFIER shift to state 32
-- On enumerator shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## enumerator_list COMMA enumerator
## LR(1) items:
enumerator_list -> enumerator_list COMMA enumerator . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production enumerator_list -> enumerator_list COMMA enumerator

State 231:
## Known stack suffix:
## enumerator
## LR(1) items:
enumerator_list -> enumerator . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production enumerator_list -> enumerator

State 232:
## Known stack suffix:
## ENUM IDENTIFIER
## LR(1) items:
enum_specifier -> ENUM IDENTIFIER . LBRACE enumerator_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
enum_specifier -> ENUM IDENTIFIER . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On LBRACE shift to state 233
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production enum_specifier -> ENUM IDENTIFIER

State 233:
## Known stack suffix:
## ENUM IDENTIFIER LBRACE
## LR(1) items:
enum_specifier -> ENUM IDENTIFIER LBRACE . enumerator_list RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On IDENTIFIER shift to state 32
-- On enumerator_list shift to state 234
-- On enumerator shift to state 231
## Reductions:

State 234:
## Known stack suffix:
## ENUM IDENTIFIER LBRACE enumerator_list
## LR(1) items:
enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list . RBRACE [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
enumerator_list -> enumerator_list . COMMA enumerator [ RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 235
-- On COMMA shift to state 229
## Reductions:

State 235:
## Known stack suffix:
## ENUM IDENTIFIER LBRACE enumerator_list RBRACE
## LR(1) items:
enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE

State 236:
## Known stack suffix:
## direct_declarator LPAREN parameter_type_list
## LR(1) items:
direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
-- On RPAREN shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## direct_declarator LPAREN parameter_type_list RPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN

State 238:
## Known stack suffix:
## direct_declarator LPAREN identifier_list
## LR(1) items:
direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
identifier_list -> identifier_list . COMMA IDENTIFIER [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 239
-- On COMMA shift to state 240
## Reductions:

State 239:
## Known stack suffix:
## direct_declarator LPAREN identifier_list RPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN identifier_list RPAREN . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
--   reduce production direct_declarator -> direct_declarator LPAREN identifier_list RPAREN

State 240:
## Known stack suffix:
## identifier_list COMMA
## LR(1) items:
identifier_list -> identifier_list COMMA . IDENTIFIER [ RPAREN COMMA ]
## Transitions:
-- On IDENTIFIER shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## identifier_list COMMA IDENTIFIER
## LR(1) items:
identifier_list -> identifier_list COMMA IDENTIFIER . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production identifier_list -> identifier_list COMMA IDENTIFIER

State 242:
## Known stack suffix:
## translation_unit_file
## LR(1) items:
translation_unit_file' -> translation_unit_file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept translation_unit_file

State 243:
## Known stack suffix:
## translation_unit
## LR(1) items:
translation_unit -> translation_unit . external_declaration [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
translation_unit_file -> translation_unit . EOF [ # ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On STAR shift to state 9
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LPAREN shift to state 19
-- On LONG shift to state 25
-- On INT shift to state 26
-- On IDENTIFIER shift to state 20
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On EOF shift to state 244
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On pointer shift to state 21
-- On function_definition shift to state 245
-- On external_declaration shift to state 246
-- On enum_specifier shift to state 170
-- On direct_declarator shift to state 161
-- On declarator shift to state 247
-- On declaration_specifiers shift to state 394
-- On declaration shift to state 399
## Reductions:

State 244:
## Known stack suffix:
## translation_unit EOF
## LR(1) items:
translation_unit_file -> translation_unit EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production translation_unit_file -> translation_unit EOF

State 245:
## Known stack suffix:
## function_definition
## LR(1) items:
external_declaration -> function_definition . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production external_declaration -> function_definition

State 246:
## Known stack suffix:
## translation_unit external_declaration
## LR(1) items:
translation_unit -> translation_unit external_declaration . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production translation_unit -> translation_unit external_declaration

State 247:
## Known stack suffix:
## declarator
## LR(1) items:
function_definition -> declarator . declaration_list compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
function_definition -> declarator . compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On LBRACE shift to state 248
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 367
-- On declaration_list shift to state 391
-- On declaration shift to state 390
-- On compound_statement shift to state 393
## Reductions:

State 248:
## Known stack suffix:
## LBRACE
## LR(1) items:
compound_statement -> LBRACE . RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
compound_statement -> LBRACE . statement_list RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
compound_statement -> LBRACE . declaration_list RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
compound_statement -> LBRACE . declaration_list statement_list RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRUCT shift to state 7
-- On STRING_LITERAL shift to state 35
-- On STATIC shift to state 8
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On REGISTER shift to state 18
-- On RBRACE shift to state 362
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LONG shift to state 25
-- On LBRACE shift to state 248
-- On INT shift to state 26
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AUTO shift to state 188
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On statement_list shift to state 363
-- On statement_dangerous shift to state 366
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 367
-- On declaration_list shift to state 385
-- On declaration shift to state 390
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 249:
## Known stack suffix:
## WHILE
## LR(1) items:
iteration_statement(statement_dangerous) -> WHILE . LPAREN expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> WHILE LPAREN . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 251
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 251:
## Known stack suffix:
## WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(statement_dangerous) -> WHILE LPAREN expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 252
-- On COMMA shift to state 117
## Reductions:

State 252:
## Known stack suffix:
## WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> WHILE LPAREN expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 359
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 253:
## Known stack suffix:
## SWITCH
## LR(1) items:
selection_statement_dangerous -> SWITCH . LPAREN expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
selection_statement_dangerous -> SWITCH LPAREN . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 255
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 255:
## Known stack suffix:
## SWITCH LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement_dangerous -> SWITCH LPAREN expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 256
-- On COMMA shift to state 117
## Reductions:

State 256:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN
## LR(1) items:
selection_statement_dangerous -> SWITCH LPAREN expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 357
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 257:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
expression_statement -> SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production expression_statement -> SEMICOLON

State 258:
## Known stack suffix:
## RETURN
## LR(1) items:
jump_statement -> RETURN . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
jump_statement -> RETURN . expression SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 259
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 260
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 259:
## Known stack suffix:
## RETURN SEMICOLON
## LR(1) items:
jump_statement -> RETURN SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production jump_statement -> RETURN SEMICOLON

State 260:
## Known stack suffix:
## RETURN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ SEMICOLON COMMA ]
jump_statement -> RETURN expression . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 261
-- On COMMA shift to state 117
## Reductions:

State 261:
## Known stack suffix:
## RETURN expression SEMICOLON
## LR(1) items:
jump_statement -> RETURN expression SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production jump_statement -> RETURN expression SEMICOLON

State 262:
## Known stack suffix:
## IF
## LR(1) items:
selection_statement_dangerous -> IF . LPAREN expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF . LPAREN expression RPAREN statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
selection_statement_dangerous -> IF LPAREN . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF LPAREN . expression RPAREN statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 264
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 264:
## Known stack suffix:
## IF LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement_dangerous -> IF LPAREN expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF LPAREN expression . RPAREN statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 265
-- On COMMA shift to state 117
## Reductions:

State 265:
## Known stack suffix:
## IF LPAREN expression RPAREN
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF LPAREN expression RPAREN . statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 360
-- On statement_dangerous shift to state 355
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 266:
## Known stack suffix:
## WHILE
## LR(1) items:
iteration_statement(statement_dangerous) -> WHILE . LPAREN expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> WHILE . LPAREN expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On LPAREN shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> WHILE LPAREN . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> WHILE LPAREN . expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 268
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 268:
## Known stack suffix:
## WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(statement_dangerous) -> WHILE LPAREN expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> WHILE LPAREN expression . RPAREN statement_safe [ ELSE ]
## Transitions:
-- On RPAREN shift to state 269
-- On COMMA shift to state 117
## Reductions:

State 269:
## Known stack suffix:
## WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> WHILE LPAREN expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> WHILE LPAREN expression RPAREN . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 358
-- On statement_dangerous shift to state 359
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 270:
## Known stack suffix:
## SWITCH
## LR(1) items:
selection_statement_dangerous -> SWITCH . LPAREN expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> SWITCH . LPAREN expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On LPAREN shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
selection_statement_dangerous -> SWITCH LPAREN . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> SWITCH LPAREN . expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 272
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 272:
## Known stack suffix:
## SWITCH LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement_dangerous -> SWITCH LPAREN expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> SWITCH LPAREN expression . RPAREN statement_safe [ ELSE ]
## Transitions:
-- On RPAREN shift to state 273
-- On COMMA shift to state 117
## Reductions:

State 273:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN
## LR(1) items:
selection_statement_dangerous -> SWITCH LPAREN expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> SWITCH LPAREN expression RPAREN . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 356
-- On statement_dangerous shift to state 357
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 274:
## Known stack suffix:
## IF
## LR(1) items:
selection_statement_dangerous -> IF . LPAREN expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF . LPAREN expression RPAREN statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> IF . LPAREN expression RPAREN statement_safe ELSE statement_safe [ ELSE ]
## Transitions:
-- On LPAREN shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
selection_statement_dangerous -> IF LPAREN . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF LPAREN . expression RPAREN statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> IF LPAREN . expression RPAREN statement_safe ELSE statement_safe [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 276
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 276:
## Known stack suffix:
## IF LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement_dangerous -> IF LPAREN expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF LPAREN expression . RPAREN statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> IF LPAREN expression . RPAREN statement_safe ELSE statement_safe [ ELSE ]
## Transitions:
-- On RPAREN shift to state 277
-- On COMMA shift to state 117
## Reductions:

State 277:
## Known stack suffix:
## IF LPAREN expression RPAREN
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_dangerous -> IF LPAREN expression RPAREN . statement_safe ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> IF LPAREN expression RPAREN . statement_safe ELSE statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 351
-- On statement_dangerous shift to state 355
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 278:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
labeled_statement(statement_dangerous) -> IDENTIFIER . COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
labeled_statement(statement_safe) -> IDENTIFIER . COLON statement_safe [ ELSE ]
primary_expression -> IDENTIFIER . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RIGHT_OP RIGHT_ASSIGN QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On COLON shift to state 279
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RIGHT_OP RIGHT_ASSIGN QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production primary_expression -> IDENTIFIER

State 279:
## Known stack suffix:
## IDENTIFIER COLON
## LR(1) items:
labeled_statement(statement_dangerous) -> IDENTIFIER COLON . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
labeled_statement(statement_safe) -> IDENTIFIER COLON . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 350
-- On statement_dangerous shift to state 326
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 280:
## Known stack suffix:
## GOTO
## LR(1) items:
jump_statement -> GOTO . IDENTIFIER SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On IDENTIFIER shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## GOTO IDENTIFIER
## LR(1) items:
jump_statement -> GOTO IDENTIFIER . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## GOTO IDENTIFIER SEMICOLON
## LR(1) items:
jump_statement -> GOTO IDENTIFIER SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production jump_statement -> GOTO IDENTIFIER SEMICOLON

State 283:
## Known stack suffix:
## FOR
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR . LPAREN expression_statement expression_statement RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> FOR . LPAREN expression_statement expression_statement RPAREN statement_safe [ ELSE ]
iteration_statement(statement_safe) -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On LPAREN shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN . expression_statement expression_statement RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> FOR LPAREN . expression_statement expression_statement RPAREN statement_safe [ ELSE ]
iteration_statement(statement_safe) -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 285
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 285:
## Known stack suffix:
## FOR LPAREN expression_statement
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement . expression_statement RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> FOR LPAREN expression_statement . expression_statement RPAREN statement_safe [ ELSE ]
iteration_statement(statement_safe) -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 286
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 286:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement . RPAREN statement_safe [ ELSE ]
iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement_safe [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On RPAREN shift to state 287
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 347
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 287:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement RPAREN . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 346
-- On statement_dangerous shift to state 322
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 288:
## Known stack suffix:
## DO
## LR(1) items:
iteration_statement(statement_dangerous) -> DO . statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> DO . statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON [ ELSE ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 327
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 289:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
labeled_statement(statement_dangerous) -> IDENTIFIER . COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
primary_expression -> IDENTIFIER . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RIGHT_OP RIGHT_ASSIGN QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN ]
## Transitions:
-- On COLON shift to state 290
## Reductions:
-- On XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RIGHT_OP RIGHT_ASSIGN QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
--   reduce production primary_expression -> IDENTIFIER

State 290:
## Known stack suffix:
## IDENTIFIER COLON
## LR(1) items:
labeled_statement(statement_dangerous) -> IDENTIFIER COLON . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 326
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 291:
## Known stack suffix:
## FOR
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR . LPAREN expression_statement expression_statement RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN . expression_statement expression_statement RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 293
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 293:
## Known stack suffix:
## FOR LPAREN expression_statement
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement . expression_statement RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 294
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 294:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On RPAREN shift to state 295
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 323
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 295:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 322
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 296:
## Known stack suffix:
## DO
## LR(1) items:
iteration_statement(statement_dangerous) -> DO . statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 316
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 297:
## Known stack suffix:
## DEFAULT
## LR(1) items:
labeled_statement(statement_dangerous) -> DEFAULT . COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On COLON shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
labeled_statement(statement_dangerous) -> DEFAULT COLON . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 315
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 299:
## Known stack suffix:
## CONTINUE
## LR(1) items:
jump_statement -> CONTINUE . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## CONTINUE SEMICOLON
## LR(1) items:
jump_statement -> CONTINUE SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production jump_statement -> CONTINUE SEMICOLON

State 301:
## Known stack suffix:
## CASE
## LR(1) items:
labeled_statement(statement_dangerous) -> CASE . constant_expression COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 302
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 302:
## Known stack suffix:
## CASE constant_expression
## LR(1) items:
labeled_statement(statement_dangerous) -> CASE constant_expression . COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On COLON shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## CASE constant_expression COLON
## LR(1) items:
labeled_statement(statement_dangerous) -> CASE constant_expression COLON . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 306
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 304:
## Known stack suffix:
## BREAK
## LR(1) items:
jump_statement -> BREAK . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## BREAK SEMICOLON
## LR(1) items:
jump_statement -> BREAK SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production jump_statement -> BREAK SEMICOLON

State 306:
## Known stack suffix:
## CASE constant_expression COLON statement_dangerous
## LR(1) items:
labeled_statement(statement_dangerous) -> CASE constant_expression COLON statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production labeled_statement(statement_dangerous) -> CASE constant_expression COLON statement_dangerous

State 307:
## Known stack suffix:
## selection_statement_dangerous
## LR(1) items:
statement_dangerous -> selection_statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> selection_statement_dangerous

State 308:
## Known stack suffix:
## labeled_statement(statement_dangerous)
## LR(1) items:
statement_dangerous -> labeled_statement(statement_dangerous) . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> labeled_statement(statement_dangerous)

State 309:
## Known stack suffix:
## jump_statement
## LR(1) items:
statement_dangerous -> jump_statement . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> jump_statement

State 310:
## Known stack suffix:
## iteration_statement(statement_dangerous)
## LR(1) items:
statement_dangerous -> iteration_statement(statement_dangerous) . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> iteration_statement(statement_dangerous)

State 311:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement_dangerous -> expression_statement . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> expression_statement

State 312:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ SEMICOLON COMMA ]
expression_statement -> expression . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 313
-- On COMMA shift to state 117
## Reductions:

State 313:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
expression_statement -> expression SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production expression_statement -> expression SEMICOLON

State 314:
## Known stack suffix:
## compound_statement
## LR(1) items:
statement_dangerous -> compound_statement . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> compound_statement

State 315:
## Known stack suffix:
## DEFAULT COLON statement_dangerous
## LR(1) items:
labeled_statement(statement_dangerous) -> DEFAULT COLON statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production labeled_statement(statement_dangerous) -> DEFAULT COLON statement_dangerous

State 316:
## Known stack suffix:
## DO statement_dangerous
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous . WHILE LPAREN expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## DO statement_dangerous WHILE
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE . LPAREN expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN . expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 319
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 319:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression . RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 320
-- On COMMA shift to state 117
## Reductions:

State 320:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression RPAREN . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON

State 322:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement RPAREN statement_dangerous
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement RPAREN statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement RPAREN statement_dangerous

State 323:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 324
-- On COMMA shift to state 117
## Reductions:

State 324:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement expression RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 325
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 325:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement expression RPAREN statement_dangerous
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement expression RPAREN statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement expression RPAREN statement_dangerous

State 326:
## Known stack suffix:
## IDENTIFIER COLON statement_dangerous
## LR(1) items:
labeled_statement(statement_dangerous) -> IDENTIFIER COLON statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production labeled_statement(statement_dangerous) -> IDENTIFIER COLON statement_dangerous

State 327:
## Known stack suffix:
## DO statement_dangerous
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous . WHILE LPAREN expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> DO statement_dangerous . WHILE LPAREN expression RPAREN SEMICOLON [ ELSE ]
## Transitions:
-- On WHILE shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## DO statement_dangerous WHILE
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE . LPAREN expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> DO statement_dangerous WHILE . LPAREN expression RPAREN SEMICOLON [ ELSE ]
## Transitions:
-- On LPAREN shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN . expression RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> DO statement_dangerous WHILE LPAREN . expression RPAREN SEMICOLON [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On expression shift to state 330
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 330:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression . RPAREN SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> DO statement_dangerous WHILE LPAREN expression . RPAREN SEMICOLON [ ELSE ]
## Transitions:
-- On RPAREN shift to state 331
-- On COMMA shift to state 117
## Reductions:

State 331:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression RPAREN . SEMICOLON [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> DO statement_dangerous WHILE LPAREN expression RPAREN . SEMICOLON [ ELSE ]
## Transitions:
-- On SEMICOLON shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON
## LR(1) items:
iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production iteration_statement(statement_dangerous) -> DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON
-- On ELSE
--   reduce production iteration_statement(statement_safe) -> DO statement_dangerous WHILE LPAREN expression RPAREN SEMICOLON

State 333:
## Known stack suffix:
## DEFAULT
## LR(1) items:
labeled_statement(statement_dangerous) -> DEFAULT . COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
labeled_statement(statement_safe) -> DEFAULT . COLON statement_safe [ ELSE ]
## Transitions:
-- On COLON shift to state 334
## Reductions:

State 334:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
labeled_statement(statement_dangerous) -> DEFAULT COLON . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
labeled_statement(statement_safe) -> DEFAULT COLON . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 345
-- On statement_dangerous shift to state 315
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 335:
## Known stack suffix:
## CASE
## LR(1) items:
labeled_statement(statement_dangerous) -> CASE . constant_expression COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
labeled_statement(statement_safe) -> CASE . constant_expression COLON statement_safe [ ELSE ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 50
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On constant_expression shift to state 336
-- On conditional_expression shift to state 156
-- On cast_expression shift to state 79
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 336:
## Known stack suffix:
## CASE constant_expression
## LR(1) items:
labeled_statement(statement_dangerous) -> CASE constant_expression . COLON statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
labeled_statement(statement_safe) -> CASE constant_expression . COLON statement_safe [ ELSE ]
## Transitions:
-- On COLON shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## CASE constant_expression COLON
## LR(1) items:
labeled_statement(statement_dangerous) -> CASE constant_expression COLON . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
labeled_statement(statement_safe) -> CASE constant_expression COLON . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 338
-- On statement_dangerous shift to state 306
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 338:
## Known stack suffix:
## CASE constant_expression COLON statement_safe
## LR(1) items:
labeled_statement(statement_safe) -> CASE constant_expression COLON statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production labeled_statement(statement_safe) -> CASE constant_expression COLON statement_safe

State 339:
## Known stack suffix:
## selection_statement_safe
## LR(1) items:
statement_safe -> selection_statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production statement_safe -> selection_statement_safe

State 340:
## Known stack suffix:
## labeled_statement(statement_safe)
## LR(1) items:
statement_safe -> labeled_statement(statement_safe) . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production statement_safe -> labeled_statement(statement_safe)

State 341:
## Known stack suffix:
## jump_statement
## LR(1) items:
statement_dangerous -> jump_statement . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
statement_safe -> jump_statement . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> jump_statement
-- On ELSE
--   reduce production statement_safe -> jump_statement

State 342:
## Known stack suffix:
## iteration_statement(statement_safe)
## LR(1) items:
statement_safe -> iteration_statement(statement_safe) . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production statement_safe -> iteration_statement(statement_safe)

State 343:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement_dangerous -> expression_statement . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
statement_safe -> expression_statement . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> expression_statement
-- On ELSE
--   reduce production statement_safe -> expression_statement

State 344:
## Known stack suffix:
## compound_statement
## LR(1) items:
statement_dangerous -> compound_statement . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
statement_safe -> compound_statement . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_dangerous -> compound_statement
-- On ELSE
--   reduce production statement_safe -> compound_statement

State 345:
## Known stack suffix:
## DEFAULT COLON statement_safe
## LR(1) items:
labeled_statement(statement_safe) -> DEFAULT COLON statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production labeled_statement(statement_safe) -> DEFAULT COLON statement_safe

State 346:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement RPAREN statement_safe
## LR(1) items:
iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement RPAREN statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement RPAREN statement_safe

State 347:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement_safe [ ELSE ]
## Transitions:
-- On RPAREN shift to state 348
-- On COMMA shift to state 117
## Reductions:

State 348:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement expression RPAREN
## LR(1) items:
iteration_statement(statement_dangerous) -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 349
-- On statement_dangerous shift to state 325
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 349:
## Known stack suffix:
## FOR LPAREN expression_statement expression_statement expression RPAREN statement_safe
## LR(1) items:
iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement expression RPAREN statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production iteration_statement(statement_safe) -> FOR LPAREN expression_statement expression_statement expression RPAREN statement_safe

State 350:
## Known stack suffix:
## IDENTIFIER COLON statement_safe
## LR(1) items:
labeled_statement(statement_safe) -> IDENTIFIER COLON statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production labeled_statement(statement_safe) -> IDENTIFIER COLON statement_safe

State 351:
## Known stack suffix:
## IF LPAREN expression RPAREN statement_safe
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN statement_safe . ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> IF LPAREN expression RPAREN statement_safe . ELSE statement_safe [ ELSE ]
## Transitions:
-- On ELSE shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## IF LPAREN expression RPAREN statement_safe ELSE
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN statement_safe ELSE . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
selection_statement_safe -> IF LPAREN expression RPAREN statement_safe ELSE . statement_safe [ ELSE ]
## Transitions:
-- On WHILE shift to state 266
-- On TILDE shift to state 34
-- On SWITCH shift to state 270
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 274
-- On IDENTIFIER shift to state 278
-- On GOTO shift to state 280
-- On FOR shift to state 283
-- On DO shift to state 288
-- On DEFAULT shift to state 333
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 335
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_safe shift to state 353
-- On statement_dangerous shift to state 354
-- On shift_expression shift to state 70
-- On selection_statement_safe shift to state 339
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_safe) shift to state 340
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 341
-- On iteration_statement(statement_safe) shift to state 342
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 343
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 344
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 353:
## Known stack suffix:
## IF LPAREN expression RPAREN statement_safe ELSE statement_safe
## LR(1) items:
selection_statement_safe -> IF LPAREN expression RPAREN statement_safe ELSE statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production selection_statement_safe -> IF LPAREN expression RPAREN statement_safe ELSE statement_safe

State 354:
## Known stack suffix:
## IF LPAREN expression RPAREN statement_safe ELSE statement_dangerous
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN statement_safe ELSE statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production selection_statement_dangerous -> IF LPAREN expression RPAREN statement_safe ELSE statement_dangerous

State 355:
## Known stack suffix:
## IF LPAREN expression RPAREN statement_dangerous
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production selection_statement_dangerous -> IF LPAREN expression RPAREN statement_dangerous

State 356:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN statement_safe
## LR(1) items:
selection_statement_safe -> SWITCH LPAREN expression RPAREN statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production selection_statement_safe -> SWITCH LPAREN expression RPAREN statement_safe

State 357:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN statement_dangerous
## LR(1) items:
selection_statement_dangerous -> SWITCH LPAREN expression RPAREN statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production selection_statement_dangerous -> SWITCH LPAREN expression RPAREN statement_dangerous

State 358:
## Known stack suffix:
## WHILE LPAREN expression RPAREN statement_safe
## LR(1) items:
iteration_statement(statement_safe) -> WHILE LPAREN expression RPAREN statement_safe . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production iteration_statement(statement_safe) -> WHILE LPAREN expression RPAREN statement_safe

State 359:
## Known stack suffix:
## WHILE LPAREN expression RPAREN statement_dangerous
## LR(1) items:
iteration_statement(statement_dangerous) -> WHILE LPAREN expression RPAREN statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production iteration_statement(statement_dangerous) -> WHILE LPAREN expression RPAREN statement_dangerous

State 360:
## Known stack suffix:
## IF LPAREN expression RPAREN statement_safe
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN statement_safe . ELSE statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On ELSE shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## IF LPAREN expression RPAREN statement_safe ELSE
## LR(1) items:
selection_statement_dangerous -> IF LPAREN expression RPAREN statement_safe ELSE . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 354
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 362:
## Known stack suffix:
## LBRACE RBRACE
## LR(1) items:
compound_statement -> LBRACE RBRACE . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production compound_statement -> LBRACE RBRACE

State 363:
## Known stack suffix:
## LBRACE statement_list
## LR(1) items:
compound_statement -> LBRACE statement_list . RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
statement_list -> statement_list . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On RBRACE shift to state 364
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 365
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 364:
## Known stack suffix:
## LBRACE statement_list RBRACE
## LR(1) items:
compound_statement -> LBRACE statement_list RBRACE . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production compound_statement -> LBRACE statement_list RBRACE

State 365:
## Known stack suffix:
## statement_list statement_dangerous
## LR(1) items:
statement_list -> statement_list statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_list -> statement_list statement_dangerous

State 366:
## Known stack suffix:
## statement_dangerous
## LR(1) items:
statement_list -> statement_dangerous . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
--   reduce production statement_list -> statement_dangerous

State 367:
## Known stack suffix:
## declaration_specifiers
## LR(1) items:
declaration -> declaration_specifiers . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
declaration -> declaration_specifiers . init_declarator_list SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
-- On STAR shift to state 9
-- On SEMICOLON shift to state 368
-- On LPAREN shift to state 19
-- On IDENTIFIER shift to state 20
-- On pointer shift to state 21
-- On init_declarator_list shift to state 369
-- On init_declarator shift to state 384
-- On direct_declarator shift to state 161
-- On declarator shift to state 373
## Reductions:

State 368:
## Known stack suffix:
## declaration_specifiers SEMICOLON
## LR(1) items:
declaration -> declaration_specifiers SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production declaration -> declaration_specifiers SEMICOLON

State 369:
## Known stack suffix:
## declaration_specifiers init_declarator_list
## LR(1) items:
declaration -> declaration_specifiers init_declarator_list . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
init_declarator_list -> init_declarator_list . COMMA init_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On SEMICOLON shift to state 370
-- On COMMA shift to state 371
## Reductions:

State 370:
## Known stack suffix:
## declaration_specifiers init_declarator_list SEMICOLON
## LR(1) items:
declaration -> declaration_specifiers init_declarator_list SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production declaration -> declaration_specifiers init_declarator_list SEMICOLON

State 371:
## Known stack suffix:
## init_declarator_list COMMA
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA . init_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On STAR shift to state 9
-- On LPAREN shift to state 19
-- On IDENTIFIER shift to state 20
-- On pointer shift to state 21
-- On init_declarator shift to state 372
-- On direct_declarator shift to state 161
-- On declarator shift to state 373
## Reductions:

State 372:
## Known stack suffix:
## init_declarator_list COMMA init_declarator
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA init_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA
--   reduce production init_declarator_list -> init_declarator_list COMMA init_declarator

State 373:
## Known stack suffix:
## declarator
## LR(1) items:
init_declarator -> declarator . [ SEMICOLON COMMA ]
init_declarator -> declarator . EQUAL c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On EQUAL shift to state 374
## Reductions:
-- On SEMICOLON COMMA
--   reduce production init_declarator -> declarator

State 374:
## Known stack suffix:
## declarator EQUAL
## LR(1) items:
init_declarator -> declarator EQUAL . c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 375
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On c_initializer shift to state 383
-- On assignment_expression shift to state 381
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 375:
## Known stack suffix:
## LBRACE
## LR(1) items:
c_initializer -> LBRACE . c_initializer_list RBRACE [ SEMICOLON RBRACE COMMA ]
c_initializer -> LBRACE . c_initializer_list COMMA RBRACE [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 375
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On c_initializer_list shift to state 376
-- On c_initializer shift to state 382
-- On assignment_expression shift to state 381
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 376:
## Known stack suffix:
## LBRACE c_initializer_list
## LR(1) items:
c_initializer -> LBRACE c_initializer_list . RBRACE [ SEMICOLON RBRACE COMMA ]
c_initializer -> LBRACE c_initializer_list . COMMA RBRACE [ SEMICOLON RBRACE COMMA ]
c_initializer_list -> c_initializer_list . COMMA c_initializer [ RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 377
-- On COMMA shift to state 378
## Reductions:

State 377:
## Known stack suffix:
## LBRACE c_initializer_list RBRACE
## LR(1) items:
c_initializer -> LBRACE c_initializer_list RBRACE . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE COMMA
--   reduce production c_initializer -> LBRACE c_initializer_list RBRACE

State 378:
## Known stack suffix:
## LBRACE c_initializer_list COMMA
## LR(1) items:
c_initializer -> LBRACE c_initializer_list COMMA . RBRACE [ SEMICOLON RBRACE COMMA ]
c_initializer_list -> c_initializer_list COMMA . c_initializer [ RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 34
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On RBRACE shift to state 379
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 375
-- On INC_OP shift to state 42
-- On IDENTIFIER shift to state 44
-- On DEC_OP shift to state 45
-- On CONSTANT shift to state 46
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On shift_expression shift to state 70
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On inclusive_or_expression shift to state 115
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On cast_expression shift to state 79
-- On c_initializer shift to state 380
-- On assignment_expression shift to state 381
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 379:
## Known stack suffix:
## LBRACE c_initializer_list COMMA RBRACE
## LR(1) items:
c_initializer -> LBRACE c_initializer_list COMMA RBRACE . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE COMMA
--   reduce production c_initializer -> LBRACE c_initializer_list COMMA RBRACE

State 380:
## Known stack suffix:
## c_initializer_list COMMA c_initializer
## LR(1) items:
c_initializer_list -> c_initializer_list COMMA c_initializer . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production c_initializer_list -> c_initializer_list COMMA c_initializer

State 381:
## Known stack suffix:
## assignment_expression
## LR(1) items:
c_initializer -> assignment_expression . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRACE COMMA
--   reduce production c_initializer -> assignment_expression

State 382:
## Known stack suffix:
## c_initializer
## LR(1) items:
c_initializer_list -> c_initializer . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production c_initializer_list -> c_initializer

State 383:
## Known stack suffix:
## declarator EQUAL c_initializer
## LR(1) items:
init_declarator -> declarator EQUAL c_initializer . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA
--   reduce production init_declarator -> declarator EQUAL c_initializer

State 384:
## Known stack suffix:
## init_declarator
## LR(1) items:
init_declarator_list -> init_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON COMMA
--   reduce production init_declarator_list -> init_declarator

State 385:
## Known stack suffix:
## LBRACE declaration_list
## LR(1) items:
compound_statement -> LBRACE declaration_list . RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
compound_statement -> LBRACE declaration_list . statement_list RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
declaration_list -> declaration_list . declaration [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRUCT shift to state 7
-- On STRING_LITERAL shift to state 35
-- On STATIC shift to state 8
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On REGISTER shift to state 18
-- On RBRACE shift to state 386
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LONG shift to state 25
-- On LBRACE shift to state 248
-- On INT shift to state 26
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AUTO shift to state 188
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On statement_list shift to state 387
-- On statement_dangerous shift to state 366
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 367
-- On declaration shift to state 389
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 386:
## Known stack suffix:
## LBRACE declaration_list RBRACE
## LR(1) items:
compound_statement -> LBRACE declaration_list RBRACE . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production compound_statement -> LBRACE declaration_list RBRACE

State 387:
## Known stack suffix:
## LBRACE declaration_list statement_list
## LR(1) items:
compound_statement -> LBRACE declaration_list statement_list . RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
statement_list -> statement_list . statement_dangerous [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND ]
## Transitions:
-- On WHILE shift to state 249
-- On TILDE shift to state 34
-- On SWITCH shift to state 253
-- On STRING_LITERAL shift to state 35
-- On STAR shift to state 36
-- On SIZEOF shift to state 37
-- On SEMICOLON shift to state 257
-- On RETURN shift to state 258
-- On RBRACE shift to state 388
-- On PLUS shift to state 38
-- On MINUS shift to state 39
-- On LPAREN shift to state 41
-- On LBRACE shift to state 248
-- On INC_OP shift to state 42
-- On IF shift to state 262
-- On IDENTIFIER shift to state 289
-- On GOTO shift to state 280
-- On FOR shift to state 291
-- On DO shift to state 296
-- On DEFAULT shift to state 297
-- On DEC_OP shift to state 45
-- On CONTINUE shift to state 299
-- On CONSTANT shift to state 46
-- On CASE shift to state 301
-- On BREAK shift to state 304
-- On BANG shift to state 47
-- On AMPERSAND shift to state 48
-- On unary_operator shift to state 49
-- On unary_expression shift to state 57
-- On statement_dangerous shift to state 365
-- On shift_expression shift to state 70
-- On selection_statement_dangerous shift to state 307
-- On relational_expression shift to state 87
-- On primary_expression shift to state 51
-- On postfix_expression shift to state 52
-- On multiplicative_expression shift to state 72
-- On logical_or_expression shift to state 97
-- On logical_and_expression shift to state 99
-- On labeled_statement(statement_dangerous) shift to state 308
-- On jump_statement shift to state 309
-- On iteration_statement(statement_dangerous) shift to state 310
-- On inclusive_or_expression shift to state 115
-- On expression_statement shift to state 311
-- On expression shift to state 312
-- On exclusive_or_expression shift to state 114
-- On equality_expression shift to state 105
-- On conditional_expression shift to state 118
-- On compound_statement shift to state 314
-- On cast_expression shift to state 79
-- On assignment_expression shift to state 122
-- On and_expression shift to state 113
-- On additive_expression shift to state 90
## Reductions:

State 388:
## Known stack suffix:
## LBRACE declaration_list statement_list RBRACE
## LR(1) items:
compound_statement -> LBRACE declaration_list statement_list RBRACE . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production compound_statement -> LBRACE declaration_list statement_list RBRACE

State 389:
## Known stack suffix:
## declaration_list declaration
## LR(1) items:
declaration_list -> declaration_list declaration . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production declaration_list -> declaration_list declaration

State 390:
## Known stack suffix:
## declaration
## LR(1) items:
declaration_list -> declaration . [ WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND ]
## Transitions:
## Reductions:
-- On WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
--   reduce production declaration_list -> declaration

State 391:
## Known stack suffix:
## declarator declaration_list
## LR(1) items:
declaration_list -> declaration_list . declaration [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG LBRACE INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ]
function_definition -> declarator declaration_list . compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On LBRACE shift to state 248
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 367
-- On declaration shift to state 389
-- On compound_statement shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## declarator declaration_list compound_statement
## LR(1) items:
function_definition -> declarator declaration_list compound_statement . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production function_definition -> declarator declaration_list compound_statement

State 393:
## Known stack suffix:
## declarator compound_statement
## LR(1) items:
function_definition -> declarator compound_statement . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production function_definition -> declarator compound_statement

State 394:
## Known stack suffix:
## declaration_specifiers
## LR(1) items:
declaration -> declaration_specifiers . SEMICOLON [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
declaration -> declaration_specifiers . init_declarator_list SEMICOLON [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
function_definition -> declaration_specifiers . declarator declaration_list compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
function_definition -> declaration_specifiers . declarator compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
-- On STAR shift to state 9
-- On SEMICOLON shift to state 368
-- On LPAREN shift to state 19
-- On IDENTIFIER shift to state 20
-- On pointer shift to state 21
-- On init_declarator_list shift to state 369
-- On init_declarator shift to state 384
-- On direct_declarator shift to state 161
-- On declarator shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## declaration_specifiers declarator
## LR(1) items:
function_definition -> declaration_specifiers declarator . declaration_list compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
function_definition -> declaration_specifiers declarator . compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
init_declarator -> declarator . [ SEMICOLON COMMA ]
init_declarator -> declarator . EQUAL c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On LBRACE shift to state 248
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On EQUAL shift to state 374
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 367
-- On declaration_list shift to state 396
-- On declaration shift to state 390
-- On compound_statement shift to state 398
## Reductions:
-- On SEMICOLON COMMA
--   reduce production init_declarator -> declarator

State 396:
## Known stack suffix:
## declaration_specifiers declarator declaration_list
## LR(1) items:
declaration_list -> declaration_list . declaration [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG LBRACE INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ]
function_definition -> declaration_specifiers declarator declaration_list . compound_statement [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
-- On VOLATILE shift to state 1
-- On VOID shift to state 2
-- On UNSIGNED shift to state 3
-- On UNION shift to state 4
-- On TYPE_NAME shift to state 5
-- On TYPEDEF shift to state 6
-- On STRUCT shift to state 7
-- On STATIC shift to state 8
-- On SIGNED shift to state 16
-- On SHORT shift to state 17
-- On REGISTER shift to state 18
-- On LONG shift to state 25
-- On LBRACE shift to state 248
-- On INT shift to state 26
-- On FLOAT shift to state 28
-- On EXTERN shift to state 29
-- On ENUM shift to state 30
-- On DOUBLE shift to state 143
-- On CONST shift to state 10
-- On CHAR shift to state 144
-- On AUTO shift to state 188
-- On type_specifier shift to state 189
-- On type_qualifier shift to state 190
-- On struct_or_union_specifier shift to state 147
-- On struct_or_union shift to state 148
-- On storage_class_specifier shift to state 191
-- On enum_specifier shift to state 170
-- On declaration_specifiers shift to state 367
-- On declaration shift to state 389
-- On compound_statement shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## declaration_specifiers declarator declaration_list compound_statement
## LR(1) items:
function_definition -> declaration_specifiers declarator declaration_list compound_statement . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production function_definition -> declaration_specifiers declarator declaration_list compound_statement

State 398:
## Known stack suffix:
## declaration_specifiers declarator compound_statement
## LR(1) items:
function_definition -> declaration_specifiers declarator compound_statement . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production function_definition -> declaration_specifiers declarator compound_statement

State 399:
## Known stack suffix:
## declaration
## LR(1) items:
external_declaration -> declaration . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production external_declaration -> declaration

State 400:
## Known stack suffix:
## external_declaration
## LR(1) items:
translation_unit -> external_declaration . [ VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ]
## Transitions:
## Reductions:
-- On VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
--   reduce production translation_unit -> external_declaration

