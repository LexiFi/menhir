Grammar has 68 nonterminal symbols, among which 1 start symbols.
Grammar has 83 terminal symbols.
Grammar has 227 productions.
nullable(unary_operator) = false
nullable(unary_expression) = false
nullable(type_specifier) = false
nullable(type_qualifier_list) = false
nullable(type_qualifier) = false
nullable(type_name) = false
nullable(translation_unit_file) = false
nullable(translation_unit) = false
nullable(struct_or_union_specifier) = false
nullable(struct_or_union) = false
nullable(struct_declarator_list) = false
nullable(struct_declarator) = false
nullable(struct_declaration_list) = false
nullable(struct_declaration) = false
nullable(storage_class_specifier) = false
nullable(statement_safe) = false
nullable(statement_list) = false
nullable(statement_dangerous) = false
nullable(specifier_qualifier_list) = false
nullable(shift_expression) = false
nullable(selection_statement_safe) = false
nullable(selection_statement_dangerous) = false
nullable(relational_expression) = false
nullable(primary_expression) = false
nullable(postfix_expression) = false
nullable(pointer) = false
nullable(parameter_type_list) = false
nullable(parameter_list) = false
nullable(parameter_declaration) = false
nullable(multiplicative_expression) = false
nullable(logical_or_expression) = false
nullable(logical_and_expression) = false
nullable(labeled_statement(statement_safe)) = false
nullable(labeled_statement(statement_dangerous)) = false
nullable(jump_statement) = false
nullable(iteration_statement(statement_safe)) = false
nullable(iteration_statement(statement_dangerous)) = false
nullable(init_declarator_list) = false
nullable(init_declarator) = false
nullable(inclusive_or_expression) = false
nullable(identifier_list) = false
nullable(function_definition) = false
nullable(external_declaration) = false
nullable(expression_statement) = false
nullable(expression) = false
nullable(exclusive_or_expression) = false
nullable(equality_expression) = false
nullable(enumerator_list) = false
nullable(enumerator) = false
nullable(enum_specifier) = false
nullable(direct_declarator) = false
nullable(direct_abstract_declarator) = false
nullable(declarator) = false
nullable(declaration_specifiers) = false
nullable(declaration_list) = false
nullable(declaration) = false
nullable(constant_expression) = false
nullable(conditional_expression) = false
nullable(compound_statement) = false
nullable(cast_expression) = false
nullable(c_initializer_list) = false
nullable(c_initializer) = false
nullable(assignment_operator) = false
nullable(assignment_expression) = false
nullable(argument_expression_list) = false
nullable(and_expression) = false
nullable(additive_expression) = false
nullable(abstract_declarator) = false
first(unary_operator) = TILDE STAR PLUS MINUS BANG AMPERSAND
first(unary_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(type_specifier) = VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT LONG INT FLOAT ENUM DOUBLE CHAR
first(type_qualifier_list) = VOLATILE CONST
first(type_qualifier) = VOLATILE CONST
first(type_name) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(translation_unit_file) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(translation_unit) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(struct_or_union_specifier) = UNION STRUCT
first(struct_or_union) = UNION STRUCT
first(struct_declarator_list) = STAR LPAREN IDENTIFIER COLON
first(struct_declarator) = STAR LPAREN IDENTIFIER COLON
first(struct_declaration_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(struct_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(storage_class_specifier) = TYPEDEF STATIC REGISTER EXTERN AUTO
first(statement_safe) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
first(statement_list) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
first(statement_dangerous) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
first(specifier_qualifier_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT LONG INT FLOAT ENUM DOUBLE CONST CHAR
first(shift_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(selection_statement_safe) = SWITCH IF
first(selection_statement_dangerous) = SWITCH IF
first(relational_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(primary_expression) = STRING_LITERAL LPAREN IDENTIFIER CONSTANT
first(postfix_expression) = STRING_LITERAL LPAREN IDENTIFIER CONSTANT
first(pointer) = STAR
first(parameter_type_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(parameter_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(parameter_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(multiplicative_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(logical_or_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(logical_and_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(labeled_statement(statement_safe)) = IDENTIFIER DEFAULT CASE
first(labeled_statement(statement_dangerous)) = IDENTIFIER DEFAULT CASE
first(jump_statement) = RETURN GOTO CONTINUE BREAK
first(iteration_statement(statement_safe)) = WHILE FOR DO
first(iteration_statement(statement_dangerous)) = WHILE FOR DO
first(init_declarator_list) = STAR LPAREN IDENTIFIER
first(init_declarator) = STAR LPAREN IDENTIFIER
first(inclusive_or_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(identifier_list) = IDENTIFIER
first(function_definition) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(external_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(expression_statement) = TILDE STRING_LITERAL STAR SIZEOF SEMICOLON PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(exclusive_or_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(equality_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(enumerator_list) = IDENTIFIER
first(enumerator) = IDENTIFIER
first(enum_specifier) = ENUM
first(direct_declarator) = LPAREN IDENTIFIER
first(direct_abstract_declarator) = LPAREN LBRACK
first(declarator) = STAR LPAREN IDENTIFIER
first(declaration_specifiers) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(declaration_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT REGISTER LONG INT FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO
first(constant_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(conditional_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(compound_statement) = LBRACE
first(cast_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(c_initializer_list) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN LBRACE INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(c_initializer) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN LBRACE INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(assignment_operator) = XOR_ASSIGN SUB_ASSIGN RIGHT_ASSIGN OR_ASSIGN MUL_ASSIGN MOD_ASSIGN LEFT_ASSIGN EQUAL DIV_ASSIGN AND_ASSIGN ADD_ASSIGN
first(assignment_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(argument_expression_list) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(and_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(additive_expression) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
first(abstract_declarator) = STAR LPAREN LBRACK
minimal(unary_operator) = (* 1 *) AMPERSAND
minimal(unary_expression) = (* 1 *) IDENTIFIER
minimal(type_specifier) = (* 1 *) VOID
minimal(type_qualifier_list) = (* 1 *) CONST
minimal(type_qualifier) = (* 1 *) CONST
minimal(type_name) = (* 1 *) VOID
minimal(translation_unit_file) = (* 3 *) TYPEDEF SEMICOLON EOF
minimal(translation_unit) = (* 2 *) TYPEDEF SEMICOLON
minimal(struct_or_union_specifier) = (* 2 *) STRUCT IDENTIFIER
minimal(struct_or_union) = (* 1 *) STRUCT
minimal(struct_declarator_list) = (* 1 *) IDENTIFIER
minimal(struct_declarator) = (* 1 *) IDENTIFIER
minimal(struct_declaration_list) = (* 3 *) VOID IDENTIFIER SEMICOLON
minimal(struct_declaration) = (* 3 *) VOID IDENTIFIER SEMICOLON
minimal(storage_class_specifier) = (* 1 *) TYPEDEF
minimal(statement_safe) = (* 1 *) SEMICOLON
minimal(statement_list) = (* 1 *) SEMICOLON
minimal(statement_dangerous) = (* 1 *) SEMICOLON
minimal(specifier_qualifier_list) = (* 1 *) VOID
minimal(shift_expression) = (* 1 *) IDENTIFIER
minimal(selection_statement_safe) = (* 5 *) SWITCH LPAREN IDENTIFIER RPAREN SEMICOLON
minimal(selection_statement_dangerous) = (* 5 *) IF LPAREN IDENTIFIER RPAREN SEMICOLON
minimal(relational_expression) = (* 1 *) IDENTIFIER
minimal(primary_expression) = (* 1 *) IDENTIFIER
minimal(postfix_expression) = (* 1 *) IDENTIFIER
minimal(pointer) = (* 1 *) STAR
minimal(parameter_type_list) = (* 1 *) TYPEDEF
minimal(parameter_list) = (* 1 *) TYPEDEF
minimal(parameter_declaration) = (* 1 *) TYPEDEF
minimal(multiplicative_expression) = (* 1 *) IDENTIFIER
minimal(logical_or_expression) = (* 1 *) IDENTIFIER
minimal(logical_and_expression) = (* 1 *) IDENTIFIER
minimal(labeled_statement(statement_safe)) = (* 3 *) IDENTIFIER COLON SEMICOLON
minimal(labeled_statement(statement_dangerous)) = (* 3 *) IDENTIFIER COLON SEMICOLON
minimal(jump_statement) = (* 2 *) CONTINUE SEMICOLON
minimal(iteration_statement(statement_safe)) = (* 5 *) WHILE LPAREN IDENTIFIER RPAREN SEMICOLON
minimal(iteration_statement(statement_dangerous)) = (* 5 *) WHILE LPAREN IDENTIFIER RPAREN SEMICOLON
minimal(init_declarator_list) = (* 1 *) IDENTIFIER
minimal(init_declarator) = (* 1 *) IDENTIFIER
minimal(inclusive_or_expression) = (* 1 *) IDENTIFIER
minimal(identifier_list) = (* 1 *) IDENTIFIER
minimal(function_definition) = (* 3 *) IDENTIFIER LBRACE RBRACE
minimal(external_declaration) = (* 2 *) TYPEDEF SEMICOLON
minimal(expression_statement) = (* 1 *) SEMICOLON
minimal(expression) = (* 1 *) IDENTIFIER
minimal(exclusive_or_expression) = (* 1 *) IDENTIFIER
minimal(equality_expression) = (* 1 *) IDENTIFIER
minimal(enumerator_list) = (* 1 *) IDENTIFIER
minimal(enumerator) = (* 1 *) IDENTIFIER
minimal(enum_specifier) = (* 2 *) ENUM IDENTIFIER
minimal(direct_declarator) = (* 1 *) IDENTIFIER
minimal(direct_abstract_declarator) = (* 2 *) LBRACK RBRACK
minimal(declarator) = (* 1 *) IDENTIFIER
minimal(declaration_specifiers) = (* 1 *) TYPEDEF
minimal(declaration_list) = (* 2 *) TYPEDEF SEMICOLON
minimal(declaration) = (* 2 *) TYPEDEF SEMICOLON
minimal(constant_expression) = (* 1 *) IDENTIFIER
minimal(conditional_expression) = (* 1 *) IDENTIFIER
minimal(compound_statement) = (* 2 *) LBRACE RBRACE
minimal(cast_expression) = (* 1 *) IDENTIFIER
minimal(c_initializer_list) = (* 1 *) IDENTIFIER
minimal(c_initializer) = (* 1 *) IDENTIFIER
minimal(assignment_operator) = (* 1 *) EQUAL
minimal(assignment_expression) = (* 1 *) IDENTIFIER
minimal(argument_expression_list) = (* 1 *) IDENTIFIER
minimal(and_expression) = (* 1 *) IDENTIFIER
minimal(additive_expression) = (* 1 *) IDENTIFIER
minimal(abstract_declarator) = (* 1 *) STAR
follow(unary_operator) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
follow(unary_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
follow(type_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(type_qualifier_list) = VOLATILE STAR RPAREN LPAREN LBRACK IDENTIFIER CONST COMMA
follow(type_qualifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(type_name) = RPAREN
follow(translation_unit_file) = #
follow(translation_unit) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
follow(struct_or_union_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(struct_or_union) = LBRACE IDENTIFIER
follow(struct_declarator_list) = SEMICOLON COMMA
follow(struct_declarator) = SEMICOLON COMMA
follow(struct_declaration_list) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR
follow(struct_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME STRUCT SIGNED SHORT RBRACE LONG INT FLOAT ENUM DOUBLE CONST CHAR
follow(storage_class_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO
follow(statement_safe) = ELSE
follow(statement_list) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
follow(statement_dangerous) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
follow(specifier_qualifier_list) = STAR RPAREN LPAREN LBRACK IDENTIFIER COLON
follow(shift_expression) = SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
follow(selection_statement_safe) = ELSE
follow(selection_statement_dangerous) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
follow(relational_expression) = SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP LT LE_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
follow(primary_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
follow(postfix_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PTR_OP PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LE_OP LEFT_OP LEFT_ASSIGN LBRACK INC_OP HAT GT GE_OP EQ_OP EQUAL DOT DIV_ASSIGN DEC_OP COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
follow(pointer) = RPAREN LPAREN LBRACK IDENTIFIER COMMA
follow(parameter_type_list) = RPAREN
follow(parameter_list) = RPAREN COMMA
follow(parameter_declaration) = RPAREN COMMA
follow(multiplicative_expression) = STAR SLASH SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS PERCENT OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
follow(logical_or_expression) = SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON
follow(logical_and_expression) = SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON AND_OP
follow(labeled_statement(statement_safe)) = ELSE
follow(labeled_statement(statement_dangerous)) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
follow(jump_statement) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
follow(iteration_statement(statement_safe)) = ELSE
follow(iteration_statement(statement_dangerous)) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
follow(init_declarator_list) = SEMICOLON COMMA
follow(init_declarator) = SEMICOLON COMMA
follow(inclusive_or_expression) = SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP COMMA COLON BAR AND_OP
follow(identifier_list) = RPAREN COMMA
follow(function_definition) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
follow(external_declaration) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT REGISTER LPAREN LONG INT IDENTIFIER FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO
follow(expression_statement) = WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN RETURN RBRACE PLUS MINUS LPAREN LBRACE INC_OP IF IDENTIFIER GOTO FOR ELSE DO DEFAULT DEC_OP CONTINUE CONSTANT CASE BREAK BANG AMPERSAND
follow(expression) = SEMICOLON RPAREN RBRACK COMMA COLON
follow(exclusive_or_expression) = SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP
follow(equality_expression) = SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP NE_OP HAT EQ_OP COMMA COLON BAR AND_OP AMPERSAND
follow(enumerator_list) = RBRACE COMMA
follow(enumerator) = RBRACE COMMA
follow(enum_specifier) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK INT IDENTIFIER FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(direct_declarator) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LPAREN LONG LBRACK LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(direct_abstract_declarator) = RPAREN LPAREN LBRACK COMMA
follow(declarator) = VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN REGISTER LONG LBRACE INT FLOAT EXTERN EQUAL ENUM DOUBLE CONST COMMA COLON CHAR AUTO
follow(declaration_specifiers) = STAR SEMICOLON RPAREN LPAREN LBRACK IDENTIFIER COMMA
follow(declaration_list) = WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
follow(declaration) = WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
follow(constant_expression) = SEMICOLON RBRACK RBRACE COMMA COLON
follow(conditional_expression) = SEMICOLON RPAREN RBRACK RBRACE COMMA COLON
follow(compound_statement) = WHILE VOLATILE VOID UNSIGNED UNION TYPE_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN REGISTER RBRACE PLUS MINUS LPAREN LONG LBRACE INT INC_OP IF IDENTIFIER GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC_OP CONTINUE CONSTANT CONST CHAR CASE BREAK BANG AUTO AMPERSAND
follow(cast_expression) = XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_OP RIGHT_ASSIGN RBRACK RBRACE QUESTION PLUS PERCENT OR_OP OR_ASSIGN NE_OP MUL_ASSIGN MOD_ASSIGN MINUS LT LE_OP LEFT_OP LEFT_ASSIGN HAT GT GE_OP EQ_OP EQUAL DIV_ASSIGN COMMA COLON BAR AND_OP AND_ASSIGN AMPERSAND ADD_ASSIGN
follow(c_initializer_list) = RBRACE COMMA
follow(c_initializer) = SEMICOLON RBRACE COMMA
follow(assignment_operator) = TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC_OP IDENTIFIER DEC_OP CONSTANT BANG AMPERSAND
follow(assignment_expression) = SEMICOLON RPAREN RBRACK RBRACE COMMA COLON
follow(argument_expression_list) = RPAREN COMMA
follow(and_expression) = SEMICOLON RPAREN RBRACK RBRACE QUESTION OR_OP HAT COMMA COLON BAR AND_OP AMPERSAND
follow(additive_expression) = SEMICOLON RPAREN RIGHT_OP RBRACK RBRACE QUESTION PLUS OR_OP NE_OP MINUS LT LE_OP LEFT_OP HAT GT GE_OP EQ_OP COMMA COLON BAR AND_OP AMPERSAND
follow(abstract_declarator) = RPAREN COMMA
Built an LR(0) automaton with 401 states.
The grammar is not SLR(1) -- 3 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 401 states.
178 out of 401 states have a default reduction.
120 out of 401 states are represented.
0 out of 154 symbols keep track of their start position.
0 out of 154 symbols keep track of their end position.
131 out of 228 productions exploit shiftreduce optimization.
0 out of 401 states can peek at an error.
1103 functions before inlining, 168 functions after inlining.
