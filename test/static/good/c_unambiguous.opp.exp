%start translation_unit_file
%token ADD_ASSIGN
%token AMPERSAND
%token AND_ASSIGN
%token AND_OP
%token AUTO
%token BANG
%token BAR
%token BREAK
%token CASE
%token CHAR
%token COLON
%token COMMA
%token CONST
%token CONSTANT
%token CONTINUE
%token DEC_OP
%token DEFAULT
%token DIV_ASSIGN
%token DO
%token DOT
%token DOUBLE
%token ELLIPSIS
%token ELSE
%token ENUM
%token EOF
%token EQUAL
%token EQ_OP
%token EXTERN
%token FLOAT
%token FOR
%token GE_OP
%token GOTO
%token GT
%token HAT
%token IDENTIFIER
%token IF
%token INC_OP
%token INT
%token LBRACE
%token LBRACK
%token LEFT_ASSIGN
%token LEFT_OP
%token LE_OP
%token LONG
%token LPAREN
%token LT
%token MINUS
%token MOD_ASSIGN
%token MUL_ASSIGN
%token NE_OP
%token OR_ASSIGN
%token OR_OP
%token PERCENT
%token PLUS
%token PTR_OP
%token QUESTION
%token RBRACE
%token RBRACK
%token REGISTER
%token RETURN
%token RIGHT_ASSIGN
%token RIGHT_OP
%token RPAREN
%token SEMICOLON
%token SHORT
%token SIGNED
%token SIZEOF
%token SLASH
%token STAR
%token STATIC
%token STRING_LITERAL
%token STRUCT
%token SUB_ASSIGN
%token SWITCH
%token TILDE
%token TYPEDEF
%token TYPE_NAME
%token UNION
%token UNSIGNED
%token VOID
%token VOLATILE
%token WHILE
%token XOR_ASSIGN
%type <unit> translation_unit_file
%%

primary_expression:
  _1 = IDENTIFIER
    { ()}
| _1 = CONSTANT
    { ()}
| _1 = STRING_LITERAL
    { ()}
| _1 = LPAREN _2 = expression _3 = RPAREN
    { ()}

postfix_expression:
  _1 = primary_expression
    { ()}
| _1 = postfix_expression _2 = LBRACK _3 = expression _4 = RBRACK
    { ()}
| _1 = postfix_expression _2 = LPAREN _3 = RPAREN
    { ()}
| _1 = postfix_expression _2 = LPAREN _3 = argument_expression_list _4 = RPAREN
    { ()}
| _1 = postfix_expression _2 = DOT _3 = IDENTIFIER
    { ()}
| _1 = postfix_expression _2 = PTR_OP _3 = IDENTIFIER
    { ()}
| _1 = postfix_expression _2 = INC_OP
    { ()}
| _1 = postfix_expression _2 = DEC_OP
    { ()}

argument_expression_list:
  _1 = assignment_expression
    { ()}
| _1 = argument_expression_list _2 = COMMA _3 = assignment_expression
    { ()}

unary_expression:
  _1 = postfix_expression
    { ()}
| _1 = INC_OP _2 = unary_expression
    { ()}
| _1 = DEC_OP _2 = unary_expression
    { ()}
| _1 = unary_operator _2 = cast_expression
    { ()}
| _1 = SIZEOF _2 = unary_expression
    { ()}
| _1 = SIZEOF _2 = LPAREN _3 = type_name _4 = RPAREN
    { ()}

unary_operator:
  _1 = AMPERSAND
    { ()}
| _1 = STAR
    { ()}
| _1 = PLUS
    { ()}
| _1 = MINUS
    { ()}
| _1 = TILDE
    { ()}
| _1 = BANG
    { ()}

cast_expression:
  _1 = unary_expression
    { ()}
| _1 = LPAREN _2 = type_name _3 = RPAREN _4 = cast_expression
    { ()}

multiplicative_expression:
  _1 = cast_expression
    { ()}
| _1 = multiplicative_expression _2 = STAR _3 = cast_expression
    { ()}
| _1 = multiplicative_expression _2 = SLASH _3 = cast_expression
    { ()}
| _1 = multiplicative_expression _2 = PERCENT _3 = cast_expression
    { ()}

additive_expression:
  _1 = multiplicative_expression
    { ()}
| _1 = additive_expression _2 = PLUS _3 = multiplicative_expression
    { ()}
| _1 = additive_expression _2 = MINUS _3 = multiplicative_expression
    { ()}

shift_expression:
  _1 = additive_expression
    { ()}
| _1 = shift_expression _2 = LEFT_OP _3 = additive_expression
    { ()}
| _1 = shift_expression _2 = RIGHT_OP _3 = additive_expression
    { ()}

relational_expression:
  _1 = shift_expression
    { ()}
| _1 = relational_expression _2 = LT _3 = shift_expression
    { ()}
| _1 = relational_expression _2 = GT _3 = shift_expression
    { ()}
| _1 = relational_expression _2 = LE_OP _3 = shift_expression
    { ()}
| _1 = relational_expression _2 = GE_OP _3 = shift_expression
    { ()}

equality_expression:
  _1 = relational_expression
    { ()}
| _1 = equality_expression _2 = EQ_OP _3 = relational_expression
    { ()}
| _1 = equality_expression _2 = NE_OP _3 = relational_expression
    { ()}

and_expression:
  _1 = equality_expression
    { ()}
| _1 = and_expression _2 = AMPERSAND _3 = equality_expression
    { ()}

exclusive_or_expression:
  _1 = and_expression
    { ()}
| _1 = exclusive_or_expression _2 = HAT _3 = and_expression
    { ()}

inclusive_or_expression:
  _1 = exclusive_or_expression
    { ()}
| _1 = inclusive_or_expression _2 = BAR _3 = exclusive_or_expression
    { ()}

logical_and_expression:
  _1 = inclusive_or_expression
    { ()}
| _1 = logical_and_expression _2 = AND_OP _3 = inclusive_or_expression
    { ()}

logical_or_expression:
  _1 = logical_and_expression
    { ()}
| _1 = logical_or_expression _2 = OR_OP _3 = logical_and_expression
    { ()}

conditional_expression:
  _1 = logical_or_expression
    { ()}
| _1 = logical_or_expression _2 = QUESTION _3 = expression _4 = COLON _5 = conditional_expression
    { ()}

assignment_expression:
  _1 = conditional_expression
    { ()}
| _1 = unary_expression _2 = assignment_operator _3 = assignment_expression
    { ()}

assignment_operator:
  _1 = EQUAL
    { ()}
| _1 = MUL_ASSIGN
    { ()}
| _1 = DIV_ASSIGN
    { ()}
| _1 = MOD_ASSIGN
    { ()}
| _1 = ADD_ASSIGN
    { ()}
| _1 = SUB_ASSIGN
    { ()}
| _1 = LEFT_ASSIGN
    { ()}
| _1 = RIGHT_ASSIGN
    { ()}
| _1 = AND_ASSIGN
    { ()}
| _1 = XOR_ASSIGN
    { ()}
| _1 = OR_ASSIGN
    { ()}

expression:
  _1 = assignment_expression
    { ()}
| _1 = expression _2 = COMMA _3 = assignment_expression
    { ()}

constant_expression:
  _1 = conditional_expression
    { ()}

declaration:
  _1 = declaration_specifiers _2 = SEMICOLON
    { ()}
| _1 = declaration_specifiers _2 = init_declarator_list _3 = SEMICOLON
    { ()}

declaration_specifiers:
  _1 = storage_class_specifier
    { ()}
| _1 = storage_class_specifier _2 = declaration_specifiers
    { ()}
| _1 = type_specifier
    { ()}
| _1 = type_specifier _2 = declaration_specifiers
    { ()}
| _1 = type_qualifier
    { ()}
| _1 = type_qualifier _2 = declaration_specifiers
    { ()}

init_declarator_list:
  _1 = init_declarator
    { ()}
| _1 = init_declarator_list _2 = COMMA _3 = init_declarator
    { ()}

init_declarator:
  _1 = declarator
    { ()}
| _1 = declarator _2 = EQUAL _3 = c_initializer
    { ()}

storage_class_specifier:
  _1 = TYPEDEF
    { ()}
| _1 = EXTERN
    { ()}
| _1 = STATIC
    { ()}
| _1 = AUTO
    { ()}
| _1 = REGISTER
    { ()}

type_specifier:
  _1 = VOID
    { ()}
| _1 = CHAR
    { ()}
| _1 = SHORT
    { ()}
| _1 = INT
    { ()}
| _1 = LONG
    { ()}
| _1 = FLOAT
    { ()}
| _1 = DOUBLE
    { ()}
| _1 = SIGNED
    { ()}
| _1 = UNSIGNED
    { ()}
| _1 = struct_or_union_specifier
    { ()}
| _1 = enum_specifier
    { ()}
| _1 = TYPE_NAME
    { ()}

struct_or_union_specifier:
  _1 = struct_or_union _2 = IDENTIFIER _3 = LBRACE _4 = struct_declaration_list _5 = RBRACE
    { ()}
| _1 = struct_or_union _2 = LBRACE _3 = struct_declaration_list _4 = RBRACE
    { ()}
| _1 = struct_or_union _2 = IDENTIFIER
    { ()}

struct_or_union:
  _1 = STRUCT
    { ()}
| _1 = UNION
    { ()}

struct_declaration_list:
  _1 = struct_declaration
    { ()}
| _1 = struct_declaration_list _2 = struct_declaration
    { ()}

struct_declaration:
  _1 = specifier_qualifier_list _2 = struct_declarator_list _3 = SEMICOLON
    { ()}

specifier_qualifier_list:
  _1 = type_specifier _2 = specifier_qualifier_list
    { ()}
| _1 = type_specifier
    { ()}
| _1 = type_qualifier _2 = specifier_qualifier_list
    { ()}
| _1 = type_qualifier
    { ()}

struct_declarator_list:
  _1 = struct_declarator
    { ()}
| _1 = struct_declarator_list _2 = COMMA _3 = struct_declarator
    { ()}

struct_declarator:
  _1 = declarator
    { ()}
| _1 = COLON _2 = constant_expression
    { ()}
| _1 = declarator _2 = COLON _3 = constant_expression
    { ()}

enum_specifier:
  _1 = ENUM _2 = LBRACE _3 = enumerator_list _4 = RBRACE
    { ()}
| _1 = ENUM _2 = IDENTIFIER _3 = LBRACE _4 = enumerator_list _5 = RBRACE
    { ()}
| _1 = ENUM _2 = IDENTIFIER
    { ()}

enumerator_list:
  _1 = enumerator
    { ()}
| _1 = enumerator_list _2 = COMMA _3 = enumerator
    { ()}

enumerator:
  _1 = IDENTIFIER
    { ()}
| _1 = IDENTIFIER _2 = EQUAL _3 = constant_expression
    { ()}

type_qualifier:
  _1 = CONST
    { ()}
| _1 = VOLATILE
    { ()}

declarator:
  _1 = pointer _2 = direct_declarator
    { ()}
| _1 = direct_declarator
    { ()}

direct_declarator:
  _1 = IDENTIFIER
    { ()}
| _1 = LPAREN _2 = declarator _3 = RPAREN
    { ()}
| _1 = direct_declarator _2 = LBRACK _3 = constant_expression _4 = RBRACK
    { ()}
| _1 = direct_declarator _2 = LBRACK _3 = RBRACK
    { ()}
| _1 = direct_declarator _2 = LPAREN _3 = parameter_type_list _4 = RPAREN
    { ()}
| _1 = direct_declarator _2 = LPAREN _3 = identifier_list _4 = RPAREN
    { ()}
| _1 = direct_declarator _2 = LPAREN _3 = RPAREN
    { ()}

pointer:
  _1 = STAR
    { ()}
| _1 = STAR _2 = type_qualifier_list
    { ()}
| _1 = STAR _2 = pointer
    { ()}
| _1 = STAR _2 = type_qualifier_list _3 = pointer
    { ()}

type_qualifier_list:
  _1 = type_qualifier
    { ()}
| _1 = type_qualifier_list _2 = type_qualifier
    { ()}

parameter_type_list:
  _1 = parameter_list
    { ()}
| _1 = parameter_list _2 = COMMA _3 = ELLIPSIS
    { ()}

parameter_list:
  _1 = parameter_declaration
    { ()}
| _1 = parameter_list _2 = COMMA _3 = parameter_declaration
    { ()}

parameter_declaration:
  _1 = declaration_specifiers _2 = declarator
    { ()}
| _1 = declaration_specifiers _2 = abstract_declarator
    { ()}
| _1 = declaration_specifiers
    { ()}

identifier_list:
  _1 = IDENTIFIER
    { ()}
| _1 = identifier_list _2 = COMMA _3 = IDENTIFIER
    { ()}

type_name:
  _1 = specifier_qualifier_list
    { ()}
| _1 = specifier_qualifier_list _2 = abstract_declarator
    { ()}

abstract_declarator:
  _1 = pointer
    { ()}
| _1 = direct_abstract_declarator
    { ()}
| _1 = pointer _2 = direct_abstract_declarator
    { ()}

direct_abstract_declarator:
  _1 = LPAREN _2 = abstract_declarator _3 = RPAREN
    { ()}
| _1 = LBRACK _2 = RBRACK
    { ()}
| _1 = LBRACK _2 = constant_expression _3 = RBRACK
    { ()}
| _1 = direct_abstract_declarator _2 = LBRACK _3 = RBRACK
    { ()}
| _1 = direct_abstract_declarator _2 = LBRACK _3 = constant_expression _4 = RBRACK
    { ()}
| _1 = LPAREN _2 = RPAREN
    { ()}
| _1 = LPAREN _2 = parameter_type_list _3 = RPAREN
    { ()}
| _1 = direct_abstract_declarator _2 = LPAREN _3 = RPAREN
    { ()}
| _1 = direct_abstract_declarator _2 = LPAREN _3 = parameter_type_list _4 = RPAREN
    { ()}

c_initializer:
  _1 = assignment_expression
    { ()}
| _1 = LBRACE _2 = c_initializer_list _3 = RBRACE
    { ()}
| _1 = LBRACE _2 = c_initializer_list _3 = COMMA _4 = RBRACE
    { ()}

c_initializer_list:
  _1 = c_initializer
    { ()}
| _1 = c_initializer_list _2 = COMMA _3 = c_initializer
    { ()}

statement_dangerous:
  _1 = labeled_statement_statement_dangerous_
    { ()}
| _1 = compound_statement
    { ()}
| _1 = expression_statement
    { ()}
| _1 = selection_statement_dangerous
    { ()}
| _1 = iteration_statement_statement_dangerous_
    { ()}
| _1 = jump_statement
    { ()}

statement_safe:
  _1 = labeled_statement_statement_safe_
    { ()}
| _1 = compound_statement
    { ()}
| _1 = expression_statement
    { ()}
| _1 = selection_statement_safe
    { ()}
| _1 = iteration_statement_statement_safe_
    { ()}
| _1 = jump_statement
    { ()}

labeled_statement_statement_dangerous_:
  _1 = IDENTIFIER _2 = COLON _3 = statement_dangerous
    { ()}
| _1 = CASE _2 = constant_expression _3 = COLON _4 = statement_dangerous
    { ()}
| _1 = DEFAULT _2 = COLON _3 = statement_dangerous
    { ()}

labeled_statement_statement_safe_:
  _1 = IDENTIFIER _2 = COLON _3 = statement_safe
    { ()}
| _1 = CASE _2 = constant_expression _3 = COLON _4 = statement_safe
    { ()}
| _1 = DEFAULT _2 = COLON _3 = statement_safe
    { ()}

compound_statement:
  _1 = LBRACE _2 = RBRACE
    { ()}
| _1 = LBRACE _2 = statement_list _3 = RBRACE
    { ()}
| _1 = LBRACE _2 = declaration_list _3 = RBRACE
    { ()}
| _1 = LBRACE _2 = declaration_list _3 = statement_list _4 = RBRACE
    { ()}

declaration_list:
  _1 = declaration
    { ()}
| _1 = declaration_list _2 = declaration
    { ()}

statement_list:
  _1 = statement_dangerous
    { ()}
| _1 = statement_list _2 = statement_dangerous
    { ()}

expression_statement:
  _1 = SEMICOLON
    { ()}
| _1 = expression _2 = SEMICOLON
    { ()}

selection_statement_dangerous:
  _1 = IF _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_dangerous
    { ()}
| _1 = IF _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_safe _6 = ELSE _7 = statement_dangerous
    { ()}
| _1 = SWITCH _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_dangerous
    { ()}

selection_statement_safe:
  _1 = IF _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_safe _6 = ELSE _7 = statement_safe
    { ()}
| _1 = SWITCH _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_safe
    { ()}

iteration_statement_statement_dangerous_:
  _1 = WHILE _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_dangerous
    { ()}
| _1 = DO _2 = statement_dangerous _3 = WHILE _4 = LPAREN _5 = expression _6 = RPAREN _7 = SEMICOLON
    { ()}
| _1 = FOR _2 = LPAREN _3 = expression_statement _4 = expression_statement _5 = RPAREN _6 = statement_dangerous
    { ()}
| _1 = FOR _2 = LPAREN _3 = expression_statement _4 = expression_statement _5 = expression _6 = RPAREN _7 = statement_dangerous
    { ()}

iteration_statement_statement_safe_:
  _1 = WHILE _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_safe
    { ()}
| _1 = DO _2 = statement_dangerous _3 = WHILE _4 = LPAREN _5 = expression _6 = RPAREN _7 = SEMICOLON
    { ()}
| _1 = FOR _2 = LPAREN _3 = expression_statement _4 = expression_statement _5 = RPAREN _6 = statement_safe
    { ()}
| _1 = FOR _2 = LPAREN _3 = expression_statement _4 = expression_statement _5 = expression _6 = RPAREN _7 = statement_safe
    { ()}

jump_statement:
  _1 = GOTO _2 = IDENTIFIER _3 = SEMICOLON
    { ()}
| _1 = CONTINUE _2 = SEMICOLON
    { ()}
| _1 = BREAK _2 = SEMICOLON
    { ()}
| _1 = RETURN _2 = SEMICOLON
    { ()}
| _1 = RETURN _2 = expression _3 = SEMICOLON
    { ()}

translation_unit:
  _1 = external_declaration
    { ()}
| _1 = translation_unit _2 = external_declaration
    { ()}

translation_unit_file:
  _1 = translation_unit _2 = EOF
    { ()}

external_declaration:
  _1 = function_definition
    { ()}
| _1 = declaration
    { ()}

function_definition:
  _1 = declaration_specifiers _2 = declarator _3 = declaration_list _4 = compound_statement
    { ()}
| _1 = declaration_specifiers _2 = declarator _3 = compound_statement
    { ()}
| _1 = declarator _2 = declaration_list _3 = compound_statement
    { ()}
| _1 = declarator _2 = compound_statement
    { ()}

%%
