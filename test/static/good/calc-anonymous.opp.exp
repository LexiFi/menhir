%start main
%token DIV
%token EOL
%token <int> INT
%token LPAREN
%token MINUS
%token PLUS
%token RPAREN
%token TIMES
%left MINUS PLUS
%left DIV TIMES
%nonassoc UMINUS
%type <int> main
%%

main:
  e = expr _2 = EOL
    {    ( e )}

expr:
  i = INT
    {    ( i )}
| _1 = LPAREN e = expr _3 = RPAREN
    {    ( e )}
| e1 = expr _1 = PLUS e2 = expr
    {let op =
  let x =                       ( (+) ) in
      ( x )
in
    ( op e1 e2 )}
| e1 = expr _1 = MINUS e2 = expr
    {let op =
  let x =                                       ( (-) ) in
      ( x )
in
    ( op e1 e2 )}
| e1 = expr _1 = TIMES e2 = expr
    {let op =
  let x =                                                       ( ( * ) ) in
      ( x )
in
    ( op e1 e2 )}
| e1 = expr _1 = DIV e2 = expr
    {let op =
  let x =                                                                       ( (/) ) in
      ( x )
in
    ( op e1 e2 )}
| _1 = MINUS e = expr %prec UMINUS
    {    ( - e )}

%%
