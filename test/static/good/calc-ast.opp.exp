%{ open Syntax %}
%start main
%token DIV
%token EOL
%token <int> INT
%token LPAREN
%token MINUS
%token PLUS
%token RPAREN
%token TIMES
%type <Syntax.expr> main
%%

main:
  _1 = additive_expr _2 = EOL
    {_1}

additive_expr:
  _1 = multiplicative_expr
    {_1}
| additive_expr = additive_expr _1 = PLUS multiplicative_expr = multiplicative_expr
    {let x =
  let additive_op =            ( OpPlus ) in
                                                                      EBinOp  (additive_expr, additive_op, multiplicative_expr)
in
let (_endpos_x_, _startpos_x_) = (_endpos_multiplicative_expr_, _startpos_additive_expr_) in
let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
let _loc = (_startpos, _endpos) in
         ( { loc = _loc; value = x } )}
| additive_expr = additive_expr _1 = MINUS multiplicative_expr = multiplicative_expr
    {let x =
  let additive_op =            ( OpMinus ) in
                                                                      EBinOp  (additive_expr, additive_op, multiplicative_expr)
in
let (_endpos_x_, _startpos_x_) = (_endpos_multiplicative_expr_, _startpos_additive_expr_) in
let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
let _loc = (_startpos, _endpos) in
         ( { loc = _loc; value = x } )}

multiplicative_expr:
  _1 = atomic_expr
    {_1}
| multiplicative_expr = multiplicative_expr _1 = TIMES atomic_expr = atomic_expr
    {let x =
  let multiplicative_op =            ( OpTimes ) in
                                                                          EBinOp  (multiplicative_expr, multiplicative_op, atomic_expr)
in
let (_endpos_x_, _startpos_x_) = (_endpos_atomic_expr_, _startpos_multiplicative_expr_) in
let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
let _loc = (_startpos, _endpos) in
         ( { loc = _loc; value = x } )}
| multiplicative_expr = multiplicative_expr _1 = DIV atomic_expr = atomic_expr
    {let x =
  let multiplicative_op =            ( OpDiv ) in
                                                                          EBinOp  (multiplicative_expr, multiplicative_op, atomic_expr)
in
let (_endpos_x_, _startpos_x_) = (_endpos_atomic_expr_, _startpos_multiplicative_expr_) in
let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
let _loc = (_startpos, _endpos) in
         ( { loc = _loc; value = x } )}

atomic_expr:
  _1 = LPAREN _1_inlined1 = additive_expr _3 = RPAREN
    {_1_inlined1}
| _1 = INT
    {let x =
  let _1_1 = _1 in
                  ELiteral  _1_1
in
let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
let _loc = (_startpos, _endpos) in
         ( { loc = _loc; value = x } )}
| _1 = MINUS atomic_expr = atomic_expr
    {let x =
  let unary_op =            ( OpNeg ) in
                                        EUnOp  (unary_op, atomic_expr)
in
let (_endpos_x_, _startpos_x_) = (_endpos_atomic_expr_, _startpos__1_) in
let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
let _loc = (_startpos, _endpos) in
         ( { loc = _loc; value = x } )}

%%
