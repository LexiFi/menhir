State 0:
main' -> . main [ # ]
-- On MINUS shift to state 1
-- On LPAREN shift to state 2
-- On INT shift to state 3
-- On main shift to state 17
-- On fold_left(multiplicative_op,atomic_expr) shift to state 4
-- On fold_left(additive_op,multiplicative_expr) shift to state 18
-- On atomic_expr shift to state 13

State 1:
atomic_expr -> MINUS . atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On MINUS shift to state 1
-- On LPAREN shift to state 2
-- On INT shift to state 3
-- On atomic_expr shift to state 16

State 2:
atomic_expr -> LPAREN . fold_left(additive_op,multiplicative_expr) RPAREN [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On MINUS shift to state 1
-- On LPAREN shift to state 2
-- On INT shift to state 3
-- On fold_left(multiplicative_op,atomic_expr) shift to state 4
-- On fold_left(additive_op,multiplicative_expr) shift to state 9
-- On atomic_expr shift to state 13

State 3:
atomic_expr -> INT . [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES reduce production atomic_expr -> INT 
-- On RPAREN reduce production atomic_expr -> INT 
-- On PLUS reduce production atomic_expr -> INT 
-- On MINUS reduce production atomic_expr -> INT 
-- On EOL reduce production atomic_expr -> INT 
-- On DIV reduce production atomic_expr -> INT 

State 4:
fold_left(additive_op,multiplicative_expr) -> fold_left(multiplicative_op,atomic_expr) . [ RPAREN PLUS MINUS EOL ]
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) . TIMES atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) . DIV atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES shift to state 5
-- On DIV shift to state 7
-- On RPAREN reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(multiplicative_op,atomic_expr) 
-- On PLUS reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(multiplicative_op,atomic_expr) 
-- On MINUS reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(multiplicative_op,atomic_expr) 
-- On EOL reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(multiplicative_op,atomic_expr) 

State 5:
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES . atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On MINUS shift to state 1
-- On LPAREN shift to state 2
-- On INT shift to state 3
-- On atomic_expr shift to state 6

State 6:
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES atomic_expr . [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES atomic_expr 
-- On RPAREN reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES atomic_expr 
-- On PLUS reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES atomic_expr 
-- On MINUS reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES atomic_expr 
-- On EOL reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES atomic_expr 
-- On DIV reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) TIMES atomic_expr 

State 7:
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV . atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On MINUS shift to state 1
-- On LPAREN shift to state 2
-- On INT shift to state 3
-- On atomic_expr shift to state 8

State 8:
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV atomic_expr . [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV atomic_expr 
-- On RPAREN reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV atomic_expr 
-- On PLUS reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV atomic_expr 
-- On MINUS reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV atomic_expr 
-- On EOL reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV atomic_expr 
-- On DIV reduce production fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) DIV atomic_expr 

State 9:
atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) . RPAREN [ TIMES RPAREN PLUS MINUS EOL DIV ]
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) . PLUS fold_left(multiplicative_op,atomic_expr) [ RPAREN PLUS MINUS ]
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) . MINUS fold_left(multiplicative_op,atomic_expr) [ RPAREN PLUS MINUS ]
-- On RPAREN shift to state 10
-- On PLUS shift to state 11
-- On MINUS shift to state 14

State 10:
atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) RPAREN . [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES reduce production atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) RPAREN 
-- On RPAREN reduce production atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) RPAREN 
-- On PLUS reduce production atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) RPAREN 
-- On MINUS reduce production atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) RPAREN 
-- On EOL reduce production atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) RPAREN 
-- On DIV reduce production atomic_expr -> LPAREN fold_left(additive_op,multiplicative_expr) RPAREN 

State 11:
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) PLUS . fold_left(multiplicative_op,atomic_expr) [ RPAREN PLUS MINUS EOL ]
-- On MINUS shift to state 1
-- On LPAREN shift to state 2
-- On INT shift to state 3
-- On fold_left(multiplicative_op,atomic_expr) shift to state 12
-- On atomic_expr shift to state 13

State 12:
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) PLUS fold_left(multiplicative_op,atomic_expr) . [ RPAREN PLUS MINUS EOL ]
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) . TIMES atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) . DIV atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES shift to state 5
-- On DIV shift to state 7
-- On RPAREN reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) PLUS fold_left(multiplicative_op,atomic_expr) 
-- On PLUS reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) PLUS fold_left(multiplicative_op,atomic_expr) 
-- On MINUS reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) PLUS fold_left(multiplicative_op,atomic_expr) 
-- On EOL reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) PLUS fold_left(multiplicative_op,atomic_expr) 

State 13:
fold_left(multiplicative_op,atomic_expr) -> atomic_expr . [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES reduce production fold_left(multiplicative_op,atomic_expr) -> atomic_expr 
-- On RPAREN reduce production fold_left(multiplicative_op,atomic_expr) -> atomic_expr 
-- On PLUS reduce production fold_left(multiplicative_op,atomic_expr) -> atomic_expr 
-- On MINUS reduce production fold_left(multiplicative_op,atomic_expr) -> atomic_expr 
-- On EOL reduce production fold_left(multiplicative_op,atomic_expr) -> atomic_expr 
-- On DIV reduce production fold_left(multiplicative_op,atomic_expr) -> atomic_expr 

State 14:
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) MINUS . fold_left(multiplicative_op,atomic_expr) [ RPAREN PLUS MINUS EOL ]
-- On MINUS shift to state 1
-- On LPAREN shift to state 2
-- On INT shift to state 3
-- On fold_left(multiplicative_op,atomic_expr) shift to state 15
-- On atomic_expr shift to state 13

State 15:
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) MINUS fold_left(multiplicative_op,atomic_expr) . [ RPAREN PLUS MINUS EOL ]
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) . TIMES atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
fold_left(multiplicative_op,atomic_expr) -> fold_left(multiplicative_op,atomic_expr) . DIV atomic_expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES shift to state 5
-- On DIV shift to state 7
-- On RPAREN reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) MINUS fold_left(multiplicative_op,atomic_expr) 
-- On PLUS reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) MINUS fold_left(multiplicative_op,atomic_expr) 
-- On MINUS reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) MINUS fold_left(multiplicative_op,atomic_expr) 
-- On EOL reduce production fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) MINUS fold_left(multiplicative_op,atomic_expr) 

State 16:
atomic_expr -> MINUS atomic_expr . [ TIMES RPAREN PLUS MINUS EOL DIV ]
-- On TIMES reduce production atomic_expr -> MINUS atomic_expr 
-- On RPAREN reduce production atomic_expr -> MINUS atomic_expr 
-- On PLUS reduce production atomic_expr -> MINUS atomic_expr 
-- On MINUS reduce production atomic_expr -> MINUS atomic_expr 
-- On EOL reduce production atomic_expr -> MINUS atomic_expr 
-- On DIV reduce production atomic_expr -> MINUS atomic_expr 

State 17:
main' -> main . [ # ]
-- On # accept main

State 18:
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) . PLUS fold_left(multiplicative_op,atomic_expr) [ PLUS MINUS EOL ]
fold_left(additive_op,multiplicative_expr) -> fold_left(additive_op,multiplicative_expr) . MINUS fold_left(multiplicative_op,atomic_expr) [ PLUS MINUS EOL ]
main -> fold_left(additive_op,multiplicative_expr) . EOL [ # ]
-- On PLUS shift to state 11
-- On MINUS shift to state 14
-- On EOL shift to state 19

State 19:
main -> fold_left(additive_op,multiplicative_expr) EOL . [ # ]
-- On # reduce production main -> fold_left(additive_op,multiplicative_expr) EOL 

