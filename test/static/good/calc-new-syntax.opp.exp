%start main
%token DIV
%token EOL
%token <int> INT
%token LPAREN
%token MINUS
%token PLUS
%token RPAREN
%token TIMES
%type <int> main
%%

fold_left_additive_op_multiplicative_expr_:
  _1 = fold_left_multiplicative_op_atomic_expr_
    {_1}
| sum = fold_left_additive_op_multiplicative_expr_ _1 = PLUS _1_inlined1 = fold_left_multiplicative_op_atomic_expr_
    {let elem = _1_inlined1 in
let op =            ( ( + ) ) in
                                                 ( op sum elem )}
| sum = fold_left_additive_op_multiplicative_expr_ _1 = MINUS _1_inlined1 = fold_left_multiplicative_op_atomic_expr_
    {let elem = _1_inlined1 in
let op =            ( ( - ) ) in
                                                 ( op sum elem )}

fold_left_multiplicative_op_atomic_expr_:
  _1 = atomic_expr
    {_1}
| sum = fold_left_multiplicative_op_atomic_expr_ _1 = TIMES elem = atomic_expr
    {let op =            ( ( * ) ) in
                                                 ( op sum elem )}
| sum = fold_left_multiplicative_op_atomic_expr_ _1 = DIV elem = atomic_expr
    {let op =            ( ( / ) ) in
                                                 ( op sum elem )}

main:
  _1 = fold_left_additive_op_multiplicative_expr_ _2 = EOL
    {_1}

atomic_expr:
  _1 = INT
    {_1}
| _1 = LPAREN _1_inlined1 = fold_left_additive_op_multiplicative_expr_ _3 = RPAREN
    {let x = _1_inlined1 in
    ( x )}
| _1 = MINUS x = atomic_expr
    {let f =            ( (~- ) ) in
                ( f x )}

%%
