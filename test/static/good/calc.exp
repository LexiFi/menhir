Grammar has 2 nonterminal symbols, among which 1 start symbols.
Grammar has 8 terminal symbols.
Grammar has 8 productions.
nullable(main) = false
nullable(expr) = false
first(main) = MINUS LPAREN INT
first(expr) = MINUS LPAREN INT
minimal(main) = (* 2 *) INT EOL
minimal(expr) = (* 1 *) INT
maximal(main) = infinity
maximal(expr) = infinity
follow(main) = #
follow(expr) = TIMES RPAREN PLUS MINUS EOL DIV
Built an LR(0) automaton with 18 states.
The grammar is not SLR(1) -- 5 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 18 states.
20 shift/reduce conflicts were silently solved.
7 out of 18 states have a default reduction.
7 out of 18 states are represented.
0 out of 13 symbols keep track of their start position.
0 out of 13 symbols keep track of their end position.
Total star size: 89
Done with level 0.
22 calls to intern; 4 unique strings.
F stores 8 facts.
E stores 0 edges.
Q stores 20 facts.
8 facts extracted out of Q, of which 7 considered.
Done with level 1.
139 calls to intern; 15 unique strings.
F stores 51 facts.
E stores 56 edges.
Q stores 103 facts.
51 facts extracted out of Q, of which 50 considered.
Done with level 2.
446 calls to intern; 32 unique strings.
F stores 177 facts.
E stores 120 edges.
Q stores 286 facts.
177 facts extracted out of Q, of which 176 considered.
Done with level 3.
915 calls to intern; 55 unique strings.
F stores 307 facts.
E stores 184 edges.
Q stores 543 facts.
398 facts extracted out of Q, of which 306 considered.
Done with level 4.
1179 calls to intern; 67 unique strings.
F stores 408 facts.
E stores 192 edges.
Q stores 527 facts.
678 facts extracted out of Q, of which 407 considered.
Done with level 5.
1179 calls to intern; 67 unique strings.
F stores 495 facts.
E stores 192 edges.
Q stores 0 facts.
1205 facts extracted out of Q, of which 495 considered.
144 graph nodes explored by forward search.
18 out of 18 states are reachable.
Found 11 states where an error can occur.
main: INT DIV TIMES
##
## Ends in an error in state: 10.
##
## expr -> expr DIV . expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: INT MINUS INT LPAREN
##
## Ends in an error in state: 13.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr MINUS expr . [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: INT MINUS TIMES
##
## Ends in an error in state: 12.
##
## expr -> expr MINUS . expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: INT PLUS INT LPAREN
##
## Ends in an error in state: 9.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr PLUS expr . [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: INT PLUS TIMES
##
## Ends in an error in state: 8.
##
## expr -> expr PLUS . expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: INT RPAREN
##
## Ends in an error in state: 16.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS EOL DIV ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS EOL DIV ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS EOL DIV ]
## expr -> expr . DIV expr [ TIMES PLUS MINUS EOL DIV ]
## main -> expr . EOL [ # ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: INT TIMES TIMES
##
## Ends in an error in state: 5.
##
## expr -> expr TIMES . expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: LPAREN INT LPAREN
##
## Ends in an error in state: 4.
##
## expr -> LPAREN expr . RPAREN [ TIMES RPAREN PLUS MINUS EOL DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIV ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MINUS DIV ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: LPAREN TIMES
##
## Ends in an error in state: 2.
##
## expr -> LPAREN . expr RPAREN [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: MINUS TIMES
##
## Ends in an error in state: 1.
##
## expr -> MINUS . expr [ TIMES RPAREN PLUS MINUS EOL DIV ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

main: TIMES
##
## Ends in an error in state: 0.
##
## main' -> . main [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

