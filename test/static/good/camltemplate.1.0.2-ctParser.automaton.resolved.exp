State 0:
## Known stack suffix:
##
## LR(1) items:
input' -> . input [ # ]
## Transitions:
-- On VAR shift to state 1
-- On TEXT shift to state 79
-- On START shift to state 81
-- On SET shift to state 83
-- On OPEN shift to state 90
-- On MACRO shift to state 95
-- On INCLUDE shift to state 107
-- On IF shift to state 112
-- On IDENT shift to state 117
-- On FOREACH shift to state 119
-- On EXPANSION shift to state 126
-- On EOF shift to state 149
-- On stmts shift to state 150
-- On stmt shift to state 131
-- On input shift to state 152
-- On ident shift to state 133
## Reductions:

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
stmt -> VAR . LPAREN ident EQUALS expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> VAR . LPAREN ident RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> VAR . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 2
-- On LPAREN shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## VAR error
## LR(1) items:
stmt -> VAR error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> VAR error

State 3:
## Known stack suffix:
## VAR LPAREN
## LR(1) items:
stmt -> VAR LPAREN . ident EQUALS expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> VAR LPAREN . ident RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 6
## Reductions:

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS LBRACKET INCLUDE IN IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
ident -> IDENT . error [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS LBRACKET INCLUDE IN IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
-- On error shift to state 5
## Reductions:
-- On VAR reduce production ident -> IDENT
-- On TIMES reduce production ident -> IDENT
-- On TEXT reduce production ident -> IDENT
-- On SET reduce production ident -> IDENT
-- On RPAREN reduce production ident -> IDENT
-- On RBRACKET reduce production ident -> IDENT
-- On PLUS reduce production ident -> IDENT
-- On OR reduce production ident -> IDENT
-- On OPEN reduce production ident -> IDENT
-- On NOT_EQUALS reduce production ident -> IDENT
-- On MOD reduce production ident -> IDENT
-- On MINUS reduce production ident -> IDENT
-- On MACRO reduce production ident -> IDENT
-- On LPAREN reduce production ident -> IDENT
-- On LESS_OR_EQUAL reduce production ident -> IDENT
-- On LESS reduce production ident -> IDENT
-- On LBRACKET reduce production ident -> IDENT
-- On INCLUDE reduce production ident -> IDENT
-- On IN reduce production ident -> IDENT
-- On IF reduce production ident -> IDENT
-- On IDENT reduce production ident -> IDENT
-- On GREATER_OR_EQUAL reduce production ident -> IDENT
-- On GREATER reduce production ident -> IDENT
-- On FOREACH reduce production ident -> IDENT
-- On EXPANSION reduce production ident -> IDENT
-- On EQUALS_EQUALS reduce production ident -> IDENT
-- On EQUALS reduce production ident -> IDENT
-- On EOF reduce production ident -> IDENT
-- On END reduce production ident -> IDENT
-- On ELSEIF reduce production ident -> IDENT
-- On ELSE reduce production ident -> IDENT
-- On DOT reduce production ident -> IDENT
-- On DIV reduce production ident -> IDENT
-- On COMMA reduce production ident -> IDENT
-- On AND reduce production ident -> IDENT

State 5:
## Known stack suffix:
## IDENT error
## LR(1) items:
ident -> IDENT error . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS LBRACKET INCLUDE IN IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT error

State 6:
## Known stack suffix:
## VAR LPAREN ident
## LR(1) items:
stmt -> VAR LPAREN ident . EQUALS expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> VAR LPAREN ident . RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On RPAREN shift to state 7
-- On EQUALS shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## VAR LPAREN ident RPAREN
## LR(1) items:
stmt -> VAR LPAREN ident RPAREN . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> VAR LPAREN ident RPAREN

State 8:
## Known stack suffix:
## VAR LPAREN ident EQUALS
## LR(1) items:
stmt -> VAR LPAREN ident EQUALS . expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 77
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 9:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRUE

State 10:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> STRING

State 11:
## Known stack suffix:
## NULL
## LR(1) items:
expr -> NULL . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> NULL

State 12:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 76
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 13:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 75
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 14:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> LPAREN . error [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On error shift to state 15
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 73
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 15:
## Known stack suffix:
## LPAREN error
## LR(1) items:
expr -> LPAREN error . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN error

State 16:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INT

State 17:
## Known stack suffix:
## FLOAT
## LR(1) items:
expr -> FLOAT . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FLOAT

State 18:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FALSE

State 19:
## Known stack suffix:
## ident
## LR(1) items:
bracket_lookup -> ident . LBRACKET expr RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
dot_lookup -> ident . DOT ident [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> ident . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
function_call -> ident . function_args [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
-- On LPAREN shift to state 20
-- On LBRACKET shift to state 67
-- On DOT shift to state 70
-- On function_args shift to state 72
## Reductions:
-- On VAR reduce production expr -> ident
-- On TIMES reduce production expr -> ident
-- On TEXT reduce production expr -> ident
-- On SET reduce production expr -> ident
-- On RPAREN reduce production expr -> ident
-- On RBRACKET reduce production expr -> ident
-- On PLUS reduce production expr -> ident
-- On OR reduce production expr -> ident
-- On OPEN reduce production expr -> ident
-- On NOT_EQUALS reduce production expr -> ident
-- On MOD reduce production expr -> ident
-- On MINUS reduce production expr -> ident
-- On MACRO reduce production expr -> ident
-- On LESS_OR_EQUAL reduce production expr -> ident
-- On LESS reduce production expr -> ident
-- On INCLUDE reduce production expr -> ident
-- On IF reduce production expr -> ident
-- On IDENT reduce production expr -> ident
-- On GREATER_OR_EQUAL reduce production expr -> ident
-- On GREATER reduce production expr -> ident
-- On FOREACH reduce production expr -> ident
-- On EXPANSION reduce production expr -> ident
-- On EQUALS_EQUALS reduce production expr -> ident
-- On EOF reduce production expr -> ident
-- On END reduce production expr -> ident
-- On ELSEIF reduce production expr -> ident
-- On ELSE reduce production expr -> ident
-- On DIV reduce production expr -> ident
-- On COMMA reduce production expr -> ident
-- On AND reduce production expr -> ident

State 20:
## Known stack suffix:
## LPAREN
## LR(1) items:
function_args -> LPAREN . RPAREN [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
function_args -> LPAREN . error [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
function_args -> LPAREN . expr_list RPAREN [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
-- On error shift to state 21
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On RPAREN shift to state 22
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr_list shift to state 61
-- On expr shift to state 63
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 21:
## Known stack suffix:
## LPAREN error
## LR(1) items:
function_args -> LPAREN error . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_args -> LPAREN error

State 22:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
function_args -> LPAREN RPAREN . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_args -> LPAREN RPAREN

State 23:
## Known stack suffix:
## function_call
## LR(1) items:
bracket_lookup -> function_call . LBRACKET expr RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
dot_lookup -> function_call . DOT ident [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> function_call . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 24
-- On DOT shift to state 59
## Reductions:
-- On VAR reduce production expr -> function_call
-- On TIMES reduce production expr -> function_call
-- On TEXT reduce production expr -> function_call
-- On SET reduce production expr -> function_call
-- On RPAREN reduce production expr -> function_call
-- On RBRACKET reduce production expr -> function_call
-- On PLUS reduce production expr -> function_call
-- On OR reduce production expr -> function_call
-- On OPEN reduce production expr -> function_call
-- On NOT_EQUALS reduce production expr -> function_call
-- On MOD reduce production expr -> function_call
-- On MINUS reduce production expr -> function_call
-- On MACRO reduce production expr -> function_call
-- On LESS_OR_EQUAL reduce production expr -> function_call
-- On LESS reduce production expr -> function_call
-- On INCLUDE reduce production expr -> function_call
-- On IF reduce production expr -> function_call
-- On IDENT reduce production expr -> function_call
-- On GREATER_OR_EQUAL reduce production expr -> function_call
-- On GREATER reduce production expr -> function_call
-- On FOREACH reduce production expr -> function_call
-- On EXPANSION reduce production expr -> function_call
-- On EQUALS_EQUALS reduce production expr -> function_call
-- On EOF reduce production expr -> function_call
-- On END reduce production expr -> function_call
-- On ELSEIF reduce production expr -> function_call
-- On ELSE reduce production expr -> function_call
-- On DIV reduce production expr -> function_call
-- On COMMA reduce production expr -> function_call
-- On AND reduce production expr -> function_call

State 24:
## Known stack suffix:
## function_call LBRACKET
## LR(1) items:
bracket_lookup -> function_call LBRACKET . expr RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 25
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 25:
## Known stack suffix:
## function_call LBRACKET expr
## LR(1) items:
bracket_lookup -> function_call LBRACKET expr . RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . PLUS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
## Transitions:
-- On TIMES shift to state 26
-- On RBRACKET shift to state 58
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 26:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 27
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 27:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr TIMES expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr TIMES expr

State 28:
## Known stack suffix:
## dot_lookup
## LR(1) items:
expr -> dot_lookup . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
function_call -> dot_lookup . function_args [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
-- On LPAREN shift to state 20
-- On function_args shift to state 29
## Reductions:
-- On VAR reduce production expr -> dot_lookup
-- On TIMES reduce production expr -> dot_lookup
-- On TEXT reduce production expr -> dot_lookup
-- On SET reduce production expr -> dot_lookup
-- On RPAREN reduce production expr -> dot_lookup
-- On RBRACKET reduce production expr -> dot_lookup
-- On PLUS reduce production expr -> dot_lookup
-- On OR reduce production expr -> dot_lookup
-- On OPEN reduce production expr -> dot_lookup
-- On NOT_EQUALS reduce production expr -> dot_lookup
-- On MOD reduce production expr -> dot_lookup
-- On MINUS reduce production expr -> dot_lookup
-- On MACRO reduce production expr -> dot_lookup
-- On LESS_OR_EQUAL reduce production expr -> dot_lookup
-- On LESS reduce production expr -> dot_lookup
-- On INCLUDE reduce production expr -> dot_lookup
-- On IF reduce production expr -> dot_lookup
-- On IDENT reduce production expr -> dot_lookup
-- On GREATER_OR_EQUAL reduce production expr -> dot_lookup
-- On GREATER reduce production expr -> dot_lookup
-- On FOREACH reduce production expr -> dot_lookup
-- On EXPANSION reduce production expr -> dot_lookup
-- On EQUALS_EQUALS reduce production expr -> dot_lookup
-- On EOF reduce production expr -> dot_lookup
-- On END reduce production expr -> dot_lookup
-- On ELSEIF reduce production expr -> dot_lookup
-- On ELSE reduce production expr -> dot_lookup
-- On DIV reduce production expr -> dot_lookup
-- On COMMA reduce production expr -> dot_lookup
-- On AND reduce production expr -> dot_lookup

State 29:
## Known stack suffix:
## dot_lookup function_args
## LR(1) items:
function_call -> dot_lookup function_args . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_call -> dot_lookup function_args

State 30:
## Known stack suffix:
## bracket_lookup
## LR(1) items:
bracket_lookup -> bracket_lookup . LBRACKET expr RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> bracket_lookup . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 31
## Reductions:
-- On VAR reduce production expr -> bracket_lookup
-- On TIMES reduce production expr -> bracket_lookup
-- On TEXT reduce production expr -> bracket_lookup
-- On SET reduce production expr -> bracket_lookup
-- On RPAREN reduce production expr -> bracket_lookup
-- On RBRACKET reduce production expr -> bracket_lookup
-- On PLUS reduce production expr -> bracket_lookup
-- On OR reduce production expr -> bracket_lookup
-- On OPEN reduce production expr -> bracket_lookup
-- On NOT_EQUALS reduce production expr -> bracket_lookup
-- On MOD reduce production expr -> bracket_lookup
-- On MINUS reduce production expr -> bracket_lookup
-- On MACRO reduce production expr -> bracket_lookup
-- On LESS_OR_EQUAL reduce production expr -> bracket_lookup
-- On LESS reduce production expr -> bracket_lookup
-- On INCLUDE reduce production expr -> bracket_lookup
-- On IF reduce production expr -> bracket_lookup
-- On IDENT reduce production expr -> bracket_lookup
-- On GREATER_OR_EQUAL reduce production expr -> bracket_lookup
-- On GREATER reduce production expr -> bracket_lookup
-- On FOREACH reduce production expr -> bracket_lookup
-- On EXPANSION reduce production expr -> bracket_lookup
-- On EQUALS_EQUALS reduce production expr -> bracket_lookup
-- On EOF reduce production expr -> bracket_lookup
-- On END reduce production expr -> bracket_lookup
-- On ELSEIF reduce production expr -> bracket_lookup
-- On ELSE reduce production expr -> bracket_lookup
-- On DIV reduce production expr -> bracket_lookup
-- On COMMA reduce production expr -> bracket_lookup
-- On AND reduce production expr -> bracket_lookup

State 31:
## Known stack suffix:
## bracket_lookup LBRACKET
## LR(1) items:
bracket_lookup -> bracket_lookup LBRACKET . expr RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 32
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 32:
## Known stack suffix:
## bracket_lookup LBRACKET expr
## LR(1) items:
bracket_lookup -> bracket_lookup LBRACKET expr . RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . PLUS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
## Transitions:
-- On TIMES shift to state 26
-- On RBRACKET shift to state 33
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 33:
## Known stack suffix:
## bracket_lookup LBRACKET expr RBRACKET
## LR(1) items:
bracket_lookup -> bracket_lookup LBRACKET expr RBRACKET . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bracket_lookup -> bracket_lookup LBRACKET expr RBRACKET

State 34:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 35
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 35:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr PLUS expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On MOD shift to state 36
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr PLUS expr
-- On TEXT reduce production expr -> expr PLUS expr
-- On SET reduce production expr -> expr PLUS expr
-- On RPAREN reduce production expr -> expr PLUS expr
-- On RBRACKET reduce production expr -> expr PLUS expr
-- On PLUS reduce production expr -> expr PLUS expr
-- On OR reduce production expr -> expr PLUS expr
-- On OPEN reduce production expr -> expr PLUS expr
-- On NOT_EQUALS reduce production expr -> expr PLUS expr
-- On MINUS reduce production expr -> expr PLUS expr
-- On MACRO reduce production expr -> expr PLUS expr
-- On LESS_OR_EQUAL reduce production expr -> expr PLUS expr
-- On LESS reduce production expr -> expr PLUS expr
-- On INCLUDE reduce production expr -> expr PLUS expr
-- On IF reduce production expr -> expr PLUS expr
-- On IDENT reduce production expr -> expr PLUS expr
-- On GREATER_OR_EQUAL reduce production expr -> expr PLUS expr
-- On GREATER reduce production expr -> expr PLUS expr
-- On FOREACH reduce production expr -> expr PLUS expr
-- On EXPANSION reduce production expr -> expr PLUS expr
-- On EQUALS_EQUALS reduce production expr -> expr PLUS expr
-- On EOF reduce production expr -> expr PLUS expr
-- On END reduce production expr -> expr PLUS expr
-- On ELSEIF reduce production expr -> expr PLUS expr
-- On ELSE reduce production expr -> expr PLUS expr
-- On COMMA reduce production expr -> expr PLUS expr
-- On AND reduce production expr -> expr PLUS expr

State 36:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 37
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 37:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr MOD expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr MOD expr

State 38:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 39
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 39:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr DIV expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr DIV expr

State 40:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 41
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 41:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr OR expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:
-- On VAR reduce production expr -> expr OR expr
-- On TEXT reduce production expr -> expr OR expr
-- On SET reduce production expr -> expr OR expr
-- On RPAREN reduce production expr -> expr OR expr
-- On RBRACKET reduce production expr -> expr OR expr
-- On OR reduce production expr -> expr OR expr
-- On OPEN reduce production expr -> expr OR expr
-- On MACRO reduce production expr -> expr OR expr
-- On INCLUDE reduce production expr -> expr OR expr
-- On IF reduce production expr -> expr OR expr
-- On IDENT reduce production expr -> expr OR expr
-- On FOREACH reduce production expr -> expr OR expr
-- On EXPANSION reduce production expr -> expr OR expr
-- On EOF reduce production expr -> expr OR expr
-- On END reduce production expr -> expr OR expr
-- On ELSEIF reduce production expr -> expr OR expr
-- On ELSE reduce production expr -> expr OR expr
-- On COMMA reduce production expr -> expr OR expr

State 42:
## Known stack suffix:
## expr NOT_EQUALS
## LR(1) items:
expr -> expr NOT_EQUALS . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 43
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 43:
## Known stack suffix:
## expr NOT_EQUALS expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr NOT_EQUALS expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr NOT_EQUALS expr
-- On TEXT reduce production expr -> expr NOT_EQUALS expr
-- On SET reduce production expr -> expr NOT_EQUALS expr
-- On RPAREN reduce production expr -> expr NOT_EQUALS expr
-- On RBRACKET reduce production expr -> expr NOT_EQUALS expr
-- On OR reduce production expr -> expr NOT_EQUALS expr
-- On OPEN reduce production expr -> expr NOT_EQUALS expr
-- On NOT_EQUALS reduce production expr -> expr NOT_EQUALS expr
-- On MACRO reduce production expr -> expr NOT_EQUALS expr
-- On INCLUDE reduce production expr -> expr NOT_EQUALS expr
-- On IF reduce production expr -> expr NOT_EQUALS expr
-- On IDENT reduce production expr -> expr NOT_EQUALS expr
-- On FOREACH reduce production expr -> expr NOT_EQUALS expr
-- On EXPANSION reduce production expr -> expr NOT_EQUALS expr
-- On EQUALS_EQUALS reduce production expr -> expr NOT_EQUALS expr
-- On EOF reduce production expr -> expr NOT_EQUALS expr
-- On END reduce production expr -> expr NOT_EQUALS expr
-- On ELSEIF reduce production expr -> expr NOT_EQUALS expr
-- On ELSE reduce production expr -> expr NOT_EQUALS expr
-- On COMMA reduce production expr -> expr NOT_EQUALS expr
-- On AND reduce production expr -> expr NOT_EQUALS expr

State 44:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 45
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 45:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr MINUS expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On MOD shift to state 36
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr MINUS expr
-- On TEXT reduce production expr -> expr MINUS expr
-- On SET reduce production expr -> expr MINUS expr
-- On RPAREN reduce production expr -> expr MINUS expr
-- On RBRACKET reduce production expr -> expr MINUS expr
-- On PLUS reduce production expr -> expr MINUS expr
-- On OR reduce production expr -> expr MINUS expr
-- On OPEN reduce production expr -> expr MINUS expr
-- On NOT_EQUALS reduce production expr -> expr MINUS expr
-- On MINUS reduce production expr -> expr MINUS expr
-- On MACRO reduce production expr -> expr MINUS expr
-- On LESS_OR_EQUAL reduce production expr -> expr MINUS expr
-- On LESS reduce production expr -> expr MINUS expr
-- On INCLUDE reduce production expr -> expr MINUS expr
-- On IF reduce production expr -> expr MINUS expr
-- On IDENT reduce production expr -> expr MINUS expr
-- On GREATER_OR_EQUAL reduce production expr -> expr MINUS expr
-- On GREATER reduce production expr -> expr MINUS expr
-- On FOREACH reduce production expr -> expr MINUS expr
-- On EXPANSION reduce production expr -> expr MINUS expr
-- On EQUALS_EQUALS reduce production expr -> expr MINUS expr
-- On EOF reduce production expr -> expr MINUS expr
-- On END reduce production expr -> expr MINUS expr
-- On ELSEIF reduce production expr -> expr MINUS expr
-- On ELSE reduce production expr -> expr MINUS expr
-- On COMMA reduce production expr -> expr MINUS expr
-- On AND reduce production expr -> expr MINUS expr

State 46:
## Known stack suffix:
## expr LESS_OR_EQUAL
## LR(1) items:
expr -> expr LESS_OR_EQUAL . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 47
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 47:
## Known stack suffix:
## expr LESS_OR_EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr LESS_OR_EQUAL expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr LESS_OR_EQUAL expr
-- On TEXT reduce production expr -> expr LESS_OR_EQUAL expr
-- On SET reduce production expr -> expr LESS_OR_EQUAL expr
-- On RPAREN reduce production expr -> expr LESS_OR_EQUAL expr
-- On RBRACKET reduce production expr -> expr LESS_OR_EQUAL expr
-- On OR reduce production expr -> expr LESS_OR_EQUAL expr
-- On OPEN reduce production expr -> expr LESS_OR_EQUAL expr
-- On NOT_EQUALS reduce production expr -> expr LESS_OR_EQUAL expr
-- On MACRO reduce production expr -> expr LESS_OR_EQUAL expr
-- On LESS_OR_EQUAL reduce production expr -> expr LESS_OR_EQUAL expr
-- On LESS reduce production expr -> expr LESS_OR_EQUAL expr
-- On INCLUDE reduce production expr -> expr LESS_OR_EQUAL expr
-- On IF reduce production expr -> expr LESS_OR_EQUAL expr
-- On IDENT reduce production expr -> expr LESS_OR_EQUAL expr
-- On GREATER_OR_EQUAL reduce production expr -> expr LESS_OR_EQUAL expr
-- On GREATER reduce production expr -> expr LESS_OR_EQUAL expr
-- On FOREACH reduce production expr -> expr LESS_OR_EQUAL expr
-- On EXPANSION reduce production expr -> expr LESS_OR_EQUAL expr
-- On EQUALS_EQUALS reduce production expr -> expr LESS_OR_EQUAL expr
-- On EOF reduce production expr -> expr LESS_OR_EQUAL expr
-- On END reduce production expr -> expr LESS_OR_EQUAL expr
-- On ELSEIF reduce production expr -> expr LESS_OR_EQUAL expr
-- On ELSE reduce production expr -> expr LESS_OR_EQUAL expr
-- On COMMA reduce production expr -> expr LESS_OR_EQUAL expr
-- On AND reduce production expr -> expr LESS_OR_EQUAL expr

State 48:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 49
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 49:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr LESS expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr LESS expr
-- On TEXT reduce production expr -> expr LESS expr
-- On SET reduce production expr -> expr LESS expr
-- On RPAREN reduce production expr -> expr LESS expr
-- On RBRACKET reduce production expr -> expr LESS expr
-- On OR reduce production expr -> expr LESS expr
-- On OPEN reduce production expr -> expr LESS expr
-- On NOT_EQUALS reduce production expr -> expr LESS expr
-- On MACRO reduce production expr -> expr LESS expr
-- On LESS_OR_EQUAL reduce production expr -> expr LESS expr
-- On LESS reduce production expr -> expr LESS expr
-- On INCLUDE reduce production expr -> expr LESS expr
-- On IF reduce production expr -> expr LESS expr
-- On IDENT reduce production expr -> expr LESS expr
-- On GREATER_OR_EQUAL reduce production expr -> expr LESS expr
-- On GREATER reduce production expr -> expr LESS expr
-- On FOREACH reduce production expr -> expr LESS expr
-- On EXPANSION reduce production expr -> expr LESS expr
-- On EQUALS_EQUALS reduce production expr -> expr LESS expr
-- On EOF reduce production expr -> expr LESS expr
-- On END reduce production expr -> expr LESS expr
-- On ELSEIF reduce production expr -> expr LESS expr
-- On ELSE reduce production expr -> expr LESS expr
-- On COMMA reduce production expr -> expr LESS expr
-- On AND reduce production expr -> expr LESS expr

State 50:
## Known stack suffix:
## expr GREATER_OR_EQUAL
## LR(1) items:
expr -> expr GREATER_OR_EQUAL . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 51
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 51:
## Known stack suffix:
## expr GREATER_OR_EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr GREATER_OR_EQUAL expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr GREATER_OR_EQUAL expr
-- On TEXT reduce production expr -> expr GREATER_OR_EQUAL expr
-- On SET reduce production expr -> expr GREATER_OR_EQUAL expr
-- On RPAREN reduce production expr -> expr GREATER_OR_EQUAL expr
-- On RBRACKET reduce production expr -> expr GREATER_OR_EQUAL expr
-- On OR reduce production expr -> expr GREATER_OR_EQUAL expr
-- On OPEN reduce production expr -> expr GREATER_OR_EQUAL expr
-- On NOT_EQUALS reduce production expr -> expr GREATER_OR_EQUAL expr
-- On MACRO reduce production expr -> expr GREATER_OR_EQUAL expr
-- On LESS_OR_EQUAL reduce production expr -> expr GREATER_OR_EQUAL expr
-- On LESS reduce production expr -> expr GREATER_OR_EQUAL expr
-- On INCLUDE reduce production expr -> expr GREATER_OR_EQUAL expr
-- On IF reduce production expr -> expr GREATER_OR_EQUAL expr
-- On IDENT reduce production expr -> expr GREATER_OR_EQUAL expr
-- On GREATER_OR_EQUAL reduce production expr -> expr GREATER_OR_EQUAL expr
-- On GREATER reduce production expr -> expr GREATER_OR_EQUAL expr
-- On FOREACH reduce production expr -> expr GREATER_OR_EQUAL expr
-- On EXPANSION reduce production expr -> expr GREATER_OR_EQUAL expr
-- On EQUALS_EQUALS reduce production expr -> expr GREATER_OR_EQUAL expr
-- On EOF reduce production expr -> expr GREATER_OR_EQUAL expr
-- On END reduce production expr -> expr GREATER_OR_EQUAL expr
-- On ELSEIF reduce production expr -> expr GREATER_OR_EQUAL expr
-- On ELSE reduce production expr -> expr GREATER_OR_EQUAL expr
-- On COMMA reduce production expr -> expr GREATER_OR_EQUAL expr
-- On AND reduce production expr -> expr GREATER_OR_EQUAL expr

State 52:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 53
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 53:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr GREATER expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr GREATER expr
-- On TEXT reduce production expr -> expr GREATER expr
-- On SET reduce production expr -> expr GREATER expr
-- On RPAREN reduce production expr -> expr GREATER expr
-- On RBRACKET reduce production expr -> expr GREATER expr
-- On OR reduce production expr -> expr GREATER expr
-- On OPEN reduce production expr -> expr GREATER expr
-- On NOT_EQUALS reduce production expr -> expr GREATER expr
-- On MACRO reduce production expr -> expr GREATER expr
-- On LESS_OR_EQUAL reduce production expr -> expr GREATER expr
-- On LESS reduce production expr -> expr GREATER expr
-- On INCLUDE reduce production expr -> expr GREATER expr
-- On IF reduce production expr -> expr GREATER expr
-- On IDENT reduce production expr -> expr GREATER expr
-- On GREATER_OR_EQUAL reduce production expr -> expr GREATER expr
-- On GREATER reduce production expr -> expr GREATER expr
-- On FOREACH reduce production expr -> expr GREATER expr
-- On EXPANSION reduce production expr -> expr GREATER expr
-- On EQUALS_EQUALS reduce production expr -> expr GREATER expr
-- On EOF reduce production expr -> expr GREATER expr
-- On END reduce production expr -> expr GREATER expr
-- On ELSEIF reduce production expr -> expr GREATER expr
-- On ELSE reduce production expr -> expr GREATER expr
-- On COMMA reduce production expr -> expr GREATER expr
-- On AND reduce production expr -> expr GREATER expr

State 54:
## Known stack suffix:
## expr EQUALS_EQUALS
## LR(1) items:
expr -> expr EQUALS_EQUALS . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 55
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 55:
## Known stack suffix:
## expr EQUALS_EQUALS expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr EQUALS_EQUALS expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr EQUALS_EQUALS expr
-- On TEXT reduce production expr -> expr EQUALS_EQUALS expr
-- On SET reduce production expr -> expr EQUALS_EQUALS expr
-- On RPAREN reduce production expr -> expr EQUALS_EQUALS expr
-- On RBRACKET reduce production expr -> expr EQUALS_EQUALS expr
-- On OR reduce production expr -> expr EQUALS_EQUALS expr
-- On OPEN reduce production expr -> expr EQUALS_EQUALS expr
-- On NOT_EQUALS reduce production expr -> expr EQUALS_EQUALS expr
-- On MACRO reduce production expr -> expr EQUALS_EQUALS expr
-- On INCLUDE reduce production expr -> expr EQUALS_EQUALS expr
-- On IF reduce production expr -> expr EQUALS_EQUALS expr
-- On IDENT reduce production expr -> expr EQUALS_EQUALS expr
-- On FOREACH reduce production expr -> expr EQUALS_EQUALS expr
-- On EXPANSION reduce production expr -> expr EQUALS_EQUALS expr
-- On EQUALS_EQUALS reduce production expr -> expr EQUALS_EQUALS expr
-- On EOF reduce production expr -> expr EQUALS_EQUALS expr
-- On END reduce production expr -> expr EQUALS_EQUALS expr
-- On ELSEIF reduce production expr -> expr EQUALS_EQUALS expr
-- On ELSE reduce production expr -> expr EQUALS_EQUALS expr
-- On COMMA reduce production expr -> expr EQUALS_EQUALS expr
-- On AND reduce production expr -> expr EQUALS_EQUALS expr

State 56:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 57
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 57:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr AND expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
## Reductions:
-- On VAR reduce production expr -> expr AND expr
-- On TEXT reduce production expr -> expr AND expr
-- On SET reduce production expr -> expr AND expr
-- On RPAREN reduce production expr -> expr AND expr
-- On RBRACKET reduce production expr -> expr AND expr
-- On OR reduce production expr -> expr AND expr
-- On OPEN reduce production expr -> expr AND expr
-- On MACRO reduce production expr -> expr AND expr
-- On INCLUDE reduce production expr -> expr AND expr
-- On IF reduce production expr -> expr AND expr
-- On IDENT reduce production expr -> expr AND expr
-- On FOREACH reduce production expr -> expr AND expr
-- On EXPANSION reduce production expr -> expr AND expr
-- On EOF reduce production expr -> expr AND expr
-- On END reduce production expr -> expr AND expr
-- On ELSEIF reduce production expr -> expr AND expr
-- On ELSE reduce production expr -> expr AND expr
-- On COMMA reduce production expr -> expr AND expr
-- On AND reduce production expr -> expr AND expr

State 58:
## Known stack suffix:
## function_call LBRACKET expr RBRACKET
## LR(1) items:
bracket_lookup -> function_call LBRACKET expr RBRACKET . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bracket_lookup -> function_call LBRACKET expr RBRACKET

State 59:
## Known stack suffix:
## function_call DOT
## LR(1) items:
dot_lookup -> function_call DOT . ident [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## function_call DOT ident
## LR(1) items:
dot_lookup -> function_call DOT ident . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dot_lookup -> function_call DOT ident

State 61:
## Known stack suffix:
## LPAREN expr_list
## LR(1) items:
function_args -> LPAREN expr_list . RPAREN [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
-- On RPAREN shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## LPAREN expr_list RPAREN
## LR(1) items:
function_args -> LPAREN expr_list RPAREN . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_args -> LPAREN expr_list RPAREN

State 63:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV COMMA AND ]
expr_list -> expr . [ RPAREN ]
expr_list -> expr . COMMA expr_list [ RPAREN ]
expr_list -> expr . COMMA error [ RPAREN ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On COMMA shift to state 64
-- On AND shift to state 56
## Reductions:
-- On RPAREN reduce production expr_list -> expr

State 64:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_list -> expr COMMA . expr_list [ RPAREN ]
expr_list -> expr COMMA . error [ RPAREN ]
## Transitions:
-- On error shift to state 65
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr_list shift to state 66
-- On expr shift to state 63
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 65:
## Known stack suffix:
## expr COMMA error
## LR(1) items:
expr_list -> expr COMMA error . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> expr COMMA error

State 66:
## Known stack suffix:
## expr COMMA expr_list
## LR(1) items:
expr_list -> expr COMMA expr_list . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> expr COMMA expr_list

State 67:
## Known stack suffix:
## ident LBRACKET
## LR(1) items:
bracket_lookup -> ident LBRACKET . expr RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 68
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 68:
## Known stack suffix:
## ident LBRACKET expr
## LR(1) items:
bracket_lookup -> ident LBRACKET expr . RBRACKET [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . PLUS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RBRACKET PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
## Transitions:
-- On TIMES shift to state 26
-- On RBRACKET shift to state 69
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 69:
## Known stack suffix:
## ident LBRACKET expr RBRACKET
## LR(1) items:
bracket_lookup -> ident LBRACKET expr RBRACKET . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bracket_lookup -> ident LBRACKET expr RBRACKET

State 70:
## Known stack suffix:
## ident DOT
## LR(1) items:
dot_lookup -> ident DOT . ident [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## ident DOT ident
## LR(1) items:
dot_lookup -> ident DOT ident . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LPAREN LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dot_lookup -> ident DOT ident

State 72:
## Known stack suffix:
## ident function_args
## LR(1) items:
function_call -> ident function_args . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS LBRACKET INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_call -> ident function_args

State 73:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> LPAREN expr . RPAREN [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
-- On TIMES shift to state 26
-- On RPAREN shift to state 74
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 74:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr RPAREN

State 75:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> MINUS expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> MINUS expr

State 76:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . PLUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET RPAREN RBRACKET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> NOT expr

State 77:
## Known stack suffix:
## VAR LPAREN ident EQUALS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
stmt -> VAR LPAREN ident EQUALS expr . RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TIMES shift to state 26
-- On RPAREN shift to state 78
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 78:
## Known stack suffix:
## VAR LPAREN ident EQUALS expr RPAREN
## LR(1) items:
stmt -> VAR LPAREN ident EQUALS expr RPAREN . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> VAR LPAREN ident EQUALS expr RPAREN

State 79:
## Known stack suffix:
## TEXT
## LR(1) items:
stmt -> TEXT . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> TEXT . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 80
## Reductions:
-- On VAR reduce production stmt -> TEXT
-- On TEXT reduce production stmt -> TEXT
-- On SET reduce production stmt -> TEXT
-- On OPEN reduce production stmt -> TEXT
-- On MACRO reduce production stmt -> TEXT
-- On INCLUDE reduce production stmt -> TEXT
-- On IF reduce production stmt -> TEXT
-- On IDENT reduce production stmt -> TEXT
-- On FOREACH reduce production stmt -> TEXT
-- On EXPANSION reduce production stmt -> TEXT
-- On EOF reduce production stmt -> TEXT
-- On END reduce production stmt -> TEXT
-- On ELSEIF reduce production stmt -> TEXT
-- On ELSE reduce production stmt -> TEXT

State 80:
## Known stack suffix:
## TEXT error
## LR(1) items:
stmt -> TEXT error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> TEXT error

State 81:
## Known stack suffix:
## START
## LR(1) items:
input -> START . stmts EOF [ # ]
input -> START . error [ # ]
## Transitions:
-- On error shift to state 82
-- On VAR shift to state 1
-- On TEXT shift to state 79
-- On SET shift to state 83
-- On OPEN shift to state 90
-- On MACRO shift to state 95
-- On INCLUDE shift to state 107
-- On IF shift to state 112
-- On IDENT shift to state 117
-- On FOREACH shift to state 119
-- On EXPANSION shift to state 126
-- On stmts shift to state 147
-- On stmt shift to state 131
-- On ident shift to state 133
## Reductions:

State 82:
## Known stack suffix:
## START error
## LR(1) items:
input -> START error . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production input -> START error

State 83:
## Known stack suffix:
## SET
## LR(1) items:
stmt -> SET . LPAREN ident EQUALS expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> SET . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 84
-- On LPAREN shift to state 85
## Reductions:

State 84:
## Known stack suffix:
## SET error
## LR(1) items:
stmt -> SET error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> SET error

State 85:
## Known stack suffix:
## SET LPAREN
## LR(1) items:
stmt -> SET LPAREN . ident EQUALS expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## SET LPAREN ident
## LR(1) items:
stmt -> SET LPAREN ident . EQUALS expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On EQUALS shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## SET LPAREN ident EQUALS
## LR(1) items:
stmt -> SET LPAREN ident EQUALS . expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 88
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 88:
## Known stack suffix:
## SET LPAREN ident EQUALS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
stmt -> SET LPAREN ident EQUALS expr . RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TIMES shift to state 26
-- On RPAREN shift to state 89
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 89:
## Known stack suffix:
## SET LPAREN ident EQUALS expr RPAREN
## LR(1) items:
stmt -> SET LPAREN ident EQUALS expr RPAREN . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> SET LPAREN ident EQUALS expr RPAREN

State 90:
## Known stack suffix:
## OPEN
## LR(1) items:
stmt -> OPEN . LPAREN expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> OPEN . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 91
-- On LPAREN shift to state 92
## Reductions:

State 91:
## Known stack suffix:
## OPEN error
## LR(1) items:
stmt -> OPEN error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> OPEN error

State 92:
## Known stack suffix:
## OPEN LPAREN
## LR(1) items:
stmt -> OPEN LPAREN . expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 93
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 93:
## Known stack suffix:
## OPEN LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
stmt -> OPEN LPAREN expr . RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TIMES shift to state 26
-- On RPAREN shift to state 94
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 94:
## Known stack suffix:
## OPEN LPAREN expr RPAREN
## LR(1) items:
stmt -> OPEN LPAREN expr RPAREN . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> OPEN LPAREN expr RPAREN

State 95:
## Known stack suffix:
## MACRO
## LR(1) items:
stmt -> MACRO . ident macro_arg_names stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> MACRO . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 96
-- On IDENT shift to state 4
-- On ident shift to state 97
## Reductions:

State 96:
## Known stack suffix:
## MACRO error
## LR(1) items:
stmt -> MACRO error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> MACRO error

State 97:
## Known stack suffix:
## MACRO ident
## LR(1) items:
stmt -> MACRO ident . macro_arg_names stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On LPAREN shift to state 98
-- On macro_arg_names shift to state 106
## Reductions:

State 98:
## Known stack suffix:
## LPAREN
## LR(1) items:
macro_arg_names -> LPAREN . RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION ]
macro_arg_names -> LPAREN . ident_list RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION ]
## Transitions:
-- On RPAREN shift to state 99
-- On IDENT shift to state 4
-- On ident_list shift to state 100
-- On ident shift to state 102
## Reductions:

State 99:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
macro_arg_names -> LPAREN RPAREN . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production macro_arg_names -> LPAREN RPAREN

State 100:
## Known stack suffix:
## LPAREN ident_list
## LR(1) items:
macro_arg_names -> LPAREN ident_list . RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION ]
## Transitions:
-- On RPAREN shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## LPAREN ident_list RPAREN
## LR(1) items:
macro_arg_names -> LPAREN ident_list RPAREN . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production macro_arg_names -> LPAREN ident_list RPAREN

State 102:
## Known stack suffix:
## ident
## LR(1) items:
ident_list -> ident . [ RPAREN ]
ident_list -> ident . COMMA ident_list [ RPAREN ]
ident_list -> ident . COMMA error [ RPAREN ]
## Transitions:
-- On COMMA shift to state 103
## Reductions:
-- On RPAREN reduce production ident_list -> ident

State 103:
## Known stack suffix:
## ident COMMA
## LR(1) items:
ident_list -> ident COMMA . ident_list [ RPAREN ]
ident_list -> ident COMMA . error [ RPAREN ]
## Transitions:
-- On error shift to state 104
-- On IDENT shift to state 4
-- On ident_list shift to state 105
-- On ident shift to state 102
## Reductions:

State 104:
## Known stack suffix:
## ident COMMA error
## LR(1) items:
ident_list -> ident COMMA error . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_list -> ident COMMA error

State 105:
## Known stack suffix:
## ident COMMA ident_list
## LR(1) items:
ident_list -> ident COMMA ident_list . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_list -> ident COMMA ident_list

State 106:
## Known stack suffix:
## MACRO ident macro_arg_names
## LR(1) items:
stmt -> MACRO ident macro_arg_names . stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On VAR shift to state 1
-- On TEXT shift to state 79
-- On SET shift to state 83
-- On OPEN shift to state 90
-- On MACRO shift to state 95
-- On INCLUDE shift to state 107
-- On IF shift to state 112
-- On IDENT shift to state 117
-- On FOREACH shift to state 119
-- On EXPANSION shift to state 126
-- On stmts shift to state 145
-- On stmt shift to state 131
-- On ident shift to state 133
## Reductions:

State 107:
## Known stack suffix:
## INCLUDE
## LR(1) items:
stmt -> INCLUDE . LPAREN expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> INCLUDE . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 108
-- On LPAREN shift to state 109
## Reductions:

State 108:
## Known stack suffix:
## INCLUDE error
## LR(1) items:
stmt -> INCLUDE error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> INCLUDE error

State 109:
## Known stack suffix:
## INCLUDE LPAREN
## LR(1) items:
stmt -> INCLUDE LPAREN . expr RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 110
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 110:
## Known stack suffix:
## INCLUDE LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
stmt -> INCLUDE LPAREN expr . RPAREN [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TIMES shift to state 26
-- On RPAREN shift to state 111
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 111:
## Known stack suffix:
## INCLUDE LPAREN expr RPAREN
## LR(1) items:
stmt -> INCLUDE LPAREN expr RPAREN . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> INCLUDE LPAREN expr RPAREN

State 112:
## Known stack suffix:
## IF
## LR(1) items:
stmt -> IF . if_chain else_part END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> IF . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 113
-- On LPAREN shift to state 114
-- On if_chain shift to state 139
## Reductions:

State 113:
## Known stack suffix:
## IF error
## LR(1) items:
stmt -> IF error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> IF error

State 114:
## Known stack suffix:
## LPAREN
## LR(1) items:
if_chain -> LPAREN . expr RPAREN stmts [ END ELSE ]
if_chain -> LPAREN . expr RPAREN stmts ELSEIF if_chain [ END ELSE ]
if_chain -> LPAREN . expr RPAREN stmts ELSEIF error [ END ELSE ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 115
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 115:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
if_chain -> LPAREN expr . RPAREN stmts [ END ELSE ]
if_chain -> LPAREN expr . RPAREN stmts ELSEIF if_chain [ END ELSE ]
if_chain -> LPAREN expr . RPAREN stmts ELSEIF error [ END ELSE ]
## Transitions:
-- On TIMES shift to state 26
-- On RPAREN shift to state 116
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 116:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
if_chain -> LPAREN expr RPAREN . stmts [ END ELSE ]
if_chain -> LPAREN expr RPAREN . stmts ELSEIF if_chain [ END ELSE ]
if_chain -> LPAREN expr RPAREN . stmts ELSEIF error [ END ELSE ]
## Transitions:
-- On VAR shift to state 1
-- On TEXT shift to state 79
-- On SET shift to state 83
-- On OPEN shift to state 90
-- On MACRO shift to state 95
-- On INCLUDE shift to state 107
-- On IF shift to state 112
-- On IDENT shift to state 117
-- On FOREACH shift to state 119
-- On EXPANSION shift to state 126
-- On stmts shift to state 135
-- On stmt shift to state 131
-- On ident shift to state 133
## Reductions:

State 117:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ LPAREN ]
ident -> IDENT . error [ LPAREN ]
stmt -> IDENT . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 118
## Reductions:
-- On LPAREN reduce production ident -> IDENT

State 118:
## Known stack suffix:
## IDENT error
## LR(1) items:
ident -> IDENT error . [ LPAREN ]
stmt -> IDENT error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Reductions:
-- On VAR reduce production stmt -> IDENT error
-- On TEXT reduce production stmt -> IDENT error
-- On SET reduce production stmt -> IDENT error
-- On OPEN reduce production stmt -> IDENT error
-- On MACRO reduce production stmt -> IDENT error
-- On LPAREN reduce production ident -> IDENT error
-- On INCLUDE reduce production stmt -> IDENT error
-- On IF reduce production stmt -> IDENT error
-- On IDENT reduce production stmt -> IDENT error
-- On FOREACH reduce production stmt -> IDENT error
-- On EXPANSION reduce production stmt -> IDENT error
-- On EOF reduce production stmt -> IDENT error
-- On END reduce production stmt -> IDENT error
-- On ELSEIF reduce production stmt -> IDENT error
-- On ELSE reduce production stmt -> IDENT error

State 119:
## Known stack suffix:
## FOREACH
## LR(1) items:
stmt -> FOREACH . LPAREN ident IN expr RPAREN stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> FOREACH . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 120
-- On LPAREN shift to state 121
## Reductions:

State 120:
## Known stack suffix:
## FOREACH error
## LR(1) items:
stmt -> FOREACH error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FOREACH error

State 121:
## Known stack suffix:
## FOREACH LPAREN
## LR(1) items:
stmt -> FOREACH LPAREN . ident IN expr RPAREN stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On IDENT shift to state 4
-- On ident shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## FOREACH LPAREN ident
## LR(1) items:
stmt -> FOREACH LPAREN ident . IN expr RPAREN stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On IN shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## FOREACH LPAREN ident IN
## LR(1) items:
stmt -> FOREACH LPAREN ident IN . expr RPAREN stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 124
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 124:
## Known stack suffix:
## FOREACH LPAREN ident IN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . MOD expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . NOT_EQUALS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NOT_EQUALS MOD MINUS LESS_OR_EQUAL LESS GREATER_OR_EQUAL GREATER EQUALS_EQUALS DIV AND ]
stmt -> FOREACH LPAREN ident IN expr . RPAREN stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TIMES shift to state 26
-- On RPAREN shift to state 125
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:

State 125:
## Known stack suffix:
## FOREACH LPAREN ident IN expr RPAREN
## LR(1) items:
stmt -> FOREACH LPAREN ident IN expr RPAREN . stmts END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On VAR shift to state 1
-- On TEXT shift to state 79
-- On SET shift to state 83
-- On OPEN shift to state 90
-- On MACRO shift to state 95
-- On INCLUDE shift to state 107
-- On IF shift to state 112
-- On IDENT shift to state 117
-- On FOREACH shift to state 119
-- On EXPANSION shift to state 126
-- On stmts shift to state 129
-- On stmt shift to state 131
-- On ident shift to state 133
## Reductions:

State 126:
## Known stack suffix:
## EXPANSION
## LR(1) items:
stmt -> EXPANSION . expr [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
stmt -> EXPANSION . error [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On error shift to state 127
-- On TRUE shift to state 9
-- On STRING shift to state 10
-- On NULL shift to state 11
-- On NOT shift to state 12
-- On MINUS shift to state 13
-- On LPAREN shift to state 14
-- On INT shift to state 16
-- On IDENT shift to state 4
-- On FLOAT shift to state 17
-- On FALSE shift to state 18
-- On ident shift to state 19
-- On function_call shift to state 23
-- On expr shift to state 128
-- On dot_lookup shift to state 28
-- On bracket_lookup shift to state 30
## Reductions:

State 127:
## Known stack suffix:
## EXPANSION error
## LR(1) items:
stmt -> EXPANSION error . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> EXPANSION error

State 128:
## Known stack suffix:
## EXPANSION expr
## LR(1) items:
expr -> expr . PLUS expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . MINUS expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . TIMES expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . DIV expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . MOD expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . EQUALS_EQUALS expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . NOT_EQUALS expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . LESS expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . GREATER expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . LESS_OR_EQUAL expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . GREATER_OR_EQUAL expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . AND expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
expr -> expr . OR expr [ VAR TIMES TEXT SET PLUS OR OPEN NOT_EQUALS MOD MINUS MACRO LESS_OR_EQUAL LESS INCLUDE IF IDENT GREATER_OR_EQUAL GREATER FOREACH EXPANSION EQUALS_EQUALS EOF END ELSEIF ELSE DIV AND ]
stmt -> EXPANSION expr . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On TIMES shift to state 26
-- On PLUS shift to state 34
-- On OR shift to state 40
-- On NOT_EQUALS shift to state 42
-- On MOD shift to state 36
-- On MINUS shift to state 44
-- On LESS_OR_EQUAL shift to state 46
-- On LESS shift to state 48
-- On GREATER_OR_EQUAL shift to state 50
-- On GREATER shift to state 52
-- On EQUALS_EQUALS shift to state 54
-- On DIV shift to state 38
-- On AND shift to state 56
## Reductions:
-- On VAR reduce production stmt -> EXPANSION expr
-- On TEXT reduce production stmt -> EXPANSION expr
-- On SET reduce production stmt -> EXPANSION expr
-- On OPEN reduce production stmt -> EXPANSION expr
-- On MACRO reduce production stmt -> EXPANSION expr
-- On INCLUDE reduce production stmt -> EXPANSION expr
-- On IF reduce production stmt -> EXPANSION expr
-- On IDENT reduce production stmt -> EXPANSION expr
-- On FOREACH reduce production stmt -> EXPANSION expr
-- On EXPANSION reduce production stmt -> EXPANSION expr
-- On EOF reduce production stmt -> EXPANSION expr
-- On END reduce production stmt -> EXPANSION expr
-- On ELSEIF reduce production stmt -> EXPANSION expr
-- On ELSE reduce production stmt -> EXPANSION expr

State 129:
## Known stack suffix:
## FOREACH LPAREN ident IN expr RPAREN stmts
## LR(1) items:
stmt -> FOREACH LPAREN ident IN expr RPAREN stmts . END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On END shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## FOREACH LPAREN ident IN expr RPAREN stmts END
## LR(1) items:
stmt -> FOREACH LPAREN ident IN expr RPAREN stmts END . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FOREACH LPAREN ident IN expr RPAREN stmts END

State 131:
## Known stack suffix:
## stmt
## LR(1) items:
stmts -> stmt . [ EOF END ELSEIF ELSE ]
stmts -> stmt . stmts [ EOF END ELSEIF ELSE ]
## Transitions:
-- On VAR shift to state 1
-- On TEXT shift to state 79
-- On SET shift to state 83
-- On OPEN shift to state 90
-- On MACRO shift to state 95
-- On INCLUDE shift to state 107
-- On IF shift to state 112
-- On IDENT shift to state 117
-- On FOREACH shift to state 119
-- On EXPANSION shift to state 126
-- On stmts shift to state 132
-- On stmt shift to state 131
-- On ident shift to state 133
## Reductions:
-- On EOF reduce production stmts -> stmt
-- On END reduce production stmts -> stmt
-- On ELSEIF reduce production stmts -> stmt
-- On ELSE reduce production stmts -> stmt

State 132:
## Known stack suffix:
## stmt stmts
## LR(1) items:
stmts -> stmt stmts . [ EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmts -> stmt stmts

State 133:
## Known stack suffix:
## ident
## LR(1) items:
stmt -> ident . function_args [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On LPAREN shift to state 20
-- On function_args shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## ident function_args
## LR(1) items:
stmt -> ident function_args . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> ident function_args

State 135:
## Known stack suffix:
## LPAREN expr RPAREN stmts
## LR(1) items:
if_chain -> LPAREN expr RPAREN stmts . [ END ELSE ]
if_chain -> LPAREN expr RPAREN stmts . ELSEIF if_chain [ END ELSE ]
if_chain -> LPAREN expr RPAREN stmts . ELSEIF error [ END ELSE ]
## Transitions:
-- On ELSEIF shift to state 136
## Reductions:
-- On END reduce production if_chain -> LPAREN expr RPAREN stmts
-- On ELSE reduce production if_chain -> LPAREN expr RPAREN stmts

State 136:
## Known stack suffix:
## LPAREN expr RPAREN stmts ELSEIF
## LR(1) items:
if_chain -> LPAREN expr RPAREN stmts ELSEIF . if_chain [ END ELSE ]
if_chain -> LPAREN expr RPAREN stmts ELSEIF . error [ END ELSE ]
## Transitions:
-- On error shift to state 137
-- On LPAREN shift to state 114
-- On if_chain shift to state 138
## Reductions:

State 137:
## Known stack suffix:
## LPAREN expr RPAREN stmts ELSEIF error
## LR(1) items:
if_chain -> LPAREN expr RPAREN stmts ELSEIF error . [ END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_chain -> LPAREN expr RPAREN stmts ELSEIF error

State 138:
## Known stack suffix:
## LPAREN expr RPAREN stmts ELSEIF if_chain
## LR(1) items:
if_chain -> LPAREN expr RPAREN stmts ELSEIF if_chain . [ END ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_chain -> LPAREN expr RPAREN stmts ELSEIF if_chain

State 139:
## Known stack suffix:
## IF if_chain
## LR(1) items:
stmt -> IF if_chain . else_part END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On ELSE shift to state 140
-- On else_part shift to state 143
## Reductions:
-- On END reduce production else_part ->

State 140:
## Known stack suffix:
## ELSE
## LR(1) items:
else_part -> ELSE . stmts [ END ]
else_part -> ELSE . error [ END ]
## Transitions:
-- On error shift to state 141
-- On VAR shift to state 1
-- On TEXT shift to state 79
-- On SET shift to state 83
-- On OPEN shift to state 90
-- On MACRO shift to state 95
-- On INCLUDE shift to state 107
-- On IF shift to state 112
-- On IDENT shift to state 117
-- On FOREACH shift to state 119
-- On EXPANSION shift to state 126
-- On stmts shift to state 142
-- On stmt shift to state 131
-- On ident shift to state 133
## Reductions:

State 141:
## Known stack suffix:
## ELSE error
## LR(1) items:
else_part -> ELSE error . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production else_part -> ELSE error

State 142:
## Known stack suffix:
## ELSE stmts
## LR(1) items:
else_part -> ELSE stmts . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production else_part -> ELSE stmts

State 143:
## Known stack suffix:
## IF if_chain else_part
## LR(1) items:
stmt -> IF if_chain else_part . END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On END shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## IF if_chain else_part END
## LR(1) items:
stmt -> IF if_chain else_part END . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> IF if_chain else_part END

State 145:
## Known stack suffix:
## MACRO ident macro_arg_names stmts
## LR(1) items:
stmt -> MACRO ident macro_arg_names stmts . END [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
-- On END shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## MACRO ident macro_arg_names stmts END
## LR(1) items:
stmt -> MACRO ident macro_arg_names stmts END . [ VAR TEXT SET OPEN MACRO INCLUDE IF IDENT FOREACH EXPANSION EOF END ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> MACRO ident macro_arg_names stmts END

State 147:
## Known stack suffix:
## START stmts
## LR(1) items:
input -> START stmts . EOF [ # ]
## Transitions:
-- On EOF shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## START stmts EOF
## LR(1) items:
input -> START stmts EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production input -> START stmts EOF

State 149:
## Known stack suffix:
## EOF
## LR(1) items:
input -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production input -> EOF

State 150:
## Known stack suffix:
## stmts
## LR(1) items:
input -> stmts . EOF [ # ]
## Transitions:
-- On EOF shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## stmts EOF
## LR(1) items:
input -> stmts EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production input -> stmts EOF

State 152:
## Known stack suffix:
## input
## LR(1) items:
input' -> input . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept input

