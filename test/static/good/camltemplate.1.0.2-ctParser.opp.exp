%{
  (*

    CamlTemplate: A template processor for Objective Caml programs.
    Copyright © 2003, 2004, 2005 Benjamin Geer

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St., 5th Floor, Boston MA 02110-1301
    USA

    In addition, as a special exception, Benjamin Geer gives permission
    to link the code of this program with the Apache HTTP Server (or
    with modified versions of Apache that use the same license as
    Apache), and distribute linked combinations including the two. You
    must obey the GNU General Public License in all respects for all of
    the code used other than Apache. If you modify this file, you may
    extend this exception to your version of the file, but you are not
    obligated to do so. If you do not wish to do so, delete this
    exception statement from your version.

  *)

  (* $Id: ctParser.mly,v 1.18 2005-06-08 15:22:09 ben Exp $ *)

  open Printf ;;
  open CtStatement ;;
  open CtExpression ;;
  open CtIdent ;;
  open CtLiteral ;;
  open CtUnop ;;
  open CtBinop ;;
  open CtFunctionCall ;;
  open CtHashLookup ;;
  open CtTemplateTypes ;;
  open CtMacro ;;
  open CtTemplateModel ;;
  open CtParserAux ;;

  (* An ocamlyacc parser for template source code. *)

  (* Convenience function that raises an exception for the position
    in a TEXT token. *)
  let parser_error_for_text (_, end_pos, _) =
    raise (ParserError end_pos) ;;

  (* Convenience function that gets the string from a TEXT token. *)
  let string_for_text (_, _, str) = str ;;
%}
%start input
%token <CtSourcePos.source_pos> AND
%token <CtSourcePos.source_pos> COMMA
%token <CtSourcePos.source_pos> DIV
%token <CtSourcePos.source_pos> DOT
%token <CtSourcePos.source_pos> ELSE
%token <CtSourcePos.source_pos> ELSEIF
%token <CtSourcePos.source_pos> END
%token EOF
%token <CtSourcePos.source_pos> EQUALS
%token <CtSourcePos.source_pos> EQUALS_EQUALS
%token <CtSourcePos.source_pos> EXPANSION
%token <CtSourcePos.source_pos> FALSE
%token <CtSourcePos.source_pos * float> FLOAT
%token <CtSourcePos.source_pos> FOREACH
%token <CtSourcePos.source_pos> GREATER
%token <CtSourcePos.source_pos> GREATER_OR_EQUAL
%token <CtSourcePos.source_pos * string> IDENT
%token <CtSourcePos.source_pos> IF
%token <CtSourcePos.source_pos> IN
%token <CtSourcePos.source_pos> INCLUDE
%token <CtSourcePos.source_pos * int> INT
%token <CtSourcePos.source_pos> LBRACKET
%token <CtSourcePos.source_pos> LESS
%token <CtSourcePos.source_pos> LESS_OR_EQUAL
%token <CtSourcePos.source_pos> LPAREN
%token <CtSourcePos.source_pos> MACRO
%token <CtSourcePos.source_pos> MINUS
%token <CtSourcePos.source_pos> MOD
%token <CtSourcePos.source_pos> NOT
%token <CtSourcePos.source_pos> NOT_EQUALS
%token <CtSourcePos.source_pos> NULL
%token <CtSourcePos.source_pos> OPEN
%token <CtSourcePos.source_pos> OR
%token <CtSourcePos.source_pos> PLUS
%token <CtSourcePos.source_pos> RBRACKET
%token <CtSourcePos.source_pos> RPAREN
%token <CtSourcePos.source_pos> SET
%token <CtSourcePos.source_pos> START
%token <CtSourcePos.source_pos * string> STRING
%token <CtSourcePos.source_pos * CtSourcePos.source_pos * string> TEXT
%token <CtSourcePos.source_pos> TIMES
%token <CtSourcePos.source_pos> TRUE
%token <CtSourcePos.source_pos> VAR
%left EQUALS
%left COMMA
%left OR
%left AND
%left EQUALS_EQUALS NOT_EQUALS
%left GREATER GREATER_OR_EQUAL LESS LESS_OR_EQUAL
%left MINUS PLUS
%left DIV MOD TIMES
%nonassoc NOT UMINUS
%left DOT
%type <CtStatement.statement list> input
%%

input:
  _1 = EOF
    {        ( [] )}
| _1 = START _2 = stmts _3 = EOF
    {                    ( _2 )}
| _1 = START _2 = error
    {                ( raise (ParserError _1) )}
| _1 = stmts _2 = EOF
    {              ( _1 )}

stmts:
  _1 = stmt
    {         ( [_1] )}
| _1 = stmt _2 = stmts
    {               ( _1 :: _2 )}

stmt:
  _1 = EXPANSION _2 = expr
    {                   ( as_statement (new expansion_statement ~expr:_2) )}
| _1 = EXPANSION _2 = error
    {                    ( raise (ParserError _1) )}
| _1 = IF _2 = if_chain _3 = else_part _4 = END
    {      ( as_statement (new if_statement ~cond_branches:_2 ~else_statements:_3) )}
| _1 = IF _2 = error
    {             ( raise (ParserError _1) )}
| _1 = FOREACH _2 = LPAREN _3 = ident _4 = IN _5 = expr _6 = RPAREN _7 = stmts _8 = END
    {      ( as_statement (new for_each_statement ~index:_3 ~list_expr:_5 ~statements:_7) )}
| _1 = FOREACH _2 = error
    {                  ( raise (ParserError _1) )}
| _1 = SET _2 = LPAREN _3 = ident _4 = EQUALS _5 = expr _6 = RPAREN
    {      ( as_statement (new set_statement ~left:_3 ~right:_5) )}
| _1 = SET _2 = error
    {              ( raise (ParserError _1) )}
| _1 = VAR _2 = LPAREN _3 = ident _4 = EQUALS _5 = expr _6 = RPAREN
    {      ( as_statement (new var_statement ~left:_3 ~right:(Some _5)) )}
| _1 = VAR _2 = LPAREN _3 = ident _4 = RPAREN
    {      ( as_statement (new var_statement ~left:_3 ~right:None) )}
| _1 = VAR _2 = error
    {              ( raise (ParserError _1) )}
| _1 = TEXT
    {         ( as_statement (new text_statement ~text:(string_for_text _1)) )}
| _1 = TEXT _2 = error
    {               ( parser_error_for_text _1 )}
| _1 = INCLUDE _2 = LPAREN _3 = expr _4 = RPAREN
    {      ( as_statement (new include_statement ~pos:_1 ~template_name:_3) )}
| _1 = INCLUDE _2 = error
    {                  ( raise (ParserError _1) )}
| _1 = MACRO _2 = ident _3 = macro_arg_names _4 = stmts _5 = END
    {      ( add_macro_for_current_template (new macro_impl
                                          ~template_name:(!current_template_name)
                                          ~pos:_1
                                          ~macro_name:_2#get_name
                                          ~arg_names:_3
                                          ~statements:_4);
        as_statement (new null_statement) )}
| _1 = MACRO _2 = error
    {                ( raise (ParserError _1) )}
| _1 = OPEN _2 = LPAREN _3 = expr _4 = RPAREN
    {      ( as_statement (new open_statement ~pos:_1 ~template_name:_3)  )}
| _1 = OPEN _2 = error
    {               ( raise (ParserError _1) )}
| _1 = ident _2 = function_args
    {      ( as_statement (new macro_call_statement
                        ~pos:(_1#get_pos)
                        ~macro_name:_1#get_name
                        ~args:_2) )}
| _1 = IDENT _2 = error
    {                ( raise (ParserError (fst _1)) )}

if_chain:
  _1 = LPAREN _2 = expr _3 = RPAREN _4 = stmts
    {                             ( [(_2, _4)] )}
| _1 = LPAREN _2 = expr _3 = RPAREN _4 = stmts _5 = ELSEIF _6 = if_chain
    {                                             ( (_2, _4) :: _6 )}
| _1 = LPAREN _2 = expr _3 = RPAREN _4 = stmts _5 = ELSEIF _6 = error
    {                                          ( raise (ParserError _5) )}

else_part:
  
    {              ( [] )}
| _1 = ELSE _2 = stmts
    {               ( _2 )}
| _1 = ELSE _2 = error
    {               ( raise (ParserError _1) )}

macro_arg_names:
  _1 = LPAREN _2 = RPAREN
    {                  ( [] )}
| _1 = LPAREN _2 = ident_list _3 = RPAREN
    {                             ( _2 )}

ident_list:
  _1 = ident
    {          ( [_1] )}
| _1 = ident _2 = COMMA _3 = ident_list
    {                           ( _1 :: _3 )}
| _1 = ident _2 = COMMA _3 = error
    {                      ( raise (ParserError _2) )}

ident:
  _1 = IDENT
    {          ( new ident ~pos:(fst _1) ~name:(snd _1) )}
| _1 = IDENT _2 = error
    {                ( raise (ParserError (fst _1)) )}

expr:
  _1 = ident
    {          ( as_expression _1 )}
| _1 = INT
    {        ( as_expression (new literal ~pos:(fst _1) ~value:(Tint (snd _1))) )}
| _1 = STRING
    {           ( as_expression (new literal ~pos:(fst _1) ~value:(Tstr (snd _1))) )}
| _1 = FLOAT
    {          ( as_expression (new literal ~pos:(fst _1) ~value:(Tfloat (snd _1))) )}
| _1 = TRUE
    {         ( as_expression (new literal ~pos:_1 ~value:(Tbool true)) )}
| _1 = FALSE
    {          ( as_expression (new literal ~pos:_1 ~value:(Tbool false)) )}
| _1 = NULL
    {         ( as_expression (new literal ~pos:_1 ~value:(Tnull)) )}
| _1 = function_call
    {                  ( _1 )}
| _1 = dot_lookup
    {               ( _1 )}
| _1 = bracket_lookup
    {                   ( _1 )}
| _1 = NOT _2 = expr
    {             ( as_expression (new not_op ~pos:_1 ~arg:_2) )}
| _1 = MINUS _2 = expr %prec UMINUS
    {                            ( as_expression (new negative_op ~pos:_1 ~arg:_2) )}
| _1 = expr _2 = PLUS _3 = expr
    {                   ( as_expression (new plus_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = MINUS _3 = expr
    {                    ( as_expression (new minus_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = TIMES _3 = expr
    {                    ( as_expression (new times_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = DIV _3 = expr
    {                  ( as_expression (new div_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = MOD _3 = expr
    {                  ( as_expression (new mod_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = EQUALS_EQUALS _3 = expr
    {                            ( as_expression (new equals_equals_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = NOT_EQUALS _3 = expr
    {                         ( as_expression (new not_equals_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = LESS _3 = expr
    {                   ( as_expression (new less_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = GREATER _3 = expr
    {                      ( as_expression (new greater_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = LESS_OR_EQUAL _3 = expr
    {                            ( as_expression (new less_or_equal_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = GREATER_OR_EQUAL _3 = expr
    {                               ( as_expression (new greater_or_equal_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = AND _3 = expr
    {                  ( as_expression (new and_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = expr _2 = OR _3 = expr
    {                 ( as_expression (new or_op ~pos:_2 ~left:_1 ~right:_3) )}
| _1 = LPAREN _2 = expr _3 = RPAREN
    {                       ( _2 )}
| _1 = LPAREN _2 = error
    {                 ( raise (ParserError _1) )}

function_call:
  _1 = ident _2 = function_args
    {                        ( as_expression (new function_call_op
                                           ~pos:(_1#get_pos)
                                           ~left:(as_expression _1)
                                           ~params:_2) )}
| _1 = dot_lookup _2 = function_args
    {                             ( as_expression (new function_call_op
                                                 ~pos:(_1#get_pos)
                                                 ~left:_1
                                                 ~params:_2) )}

function_args:
  _1 = LPAREN _2 = RPAREN
    {                  ( [] )}
| _1 = LPAREN _2 = error
    {                 ( raise (ParserError _1) )}
| _1 = LPAREN _2 = expr_list _3 = RPAREN
    {                            ( _2 )}

expr_list:
  _1 = expr
    {         ( [_1] )}
| _1 = expr _2 = COMMA _3 = expr_list
    {                         ( _1 :: _3 )}
| _1 = expr _2 = COMMA _3 = error
    {                     ( raise (ParserError _2) )}

dot_lookup:
  _1 = ident _2 = DOT _3 = ident
    {                    ( as_expression (new dot_op
                                       ~pos:(_3#get_pos)
                                       ~left:(as_expression _1)
                                       ~key:_3) )}
| _1 = function_call _2 = DOT _3 = ident
    {                            ( as_expression (new dot_op
                                             ~pos:(_3#get_pos)
                                             ~left:_1
                                             ~key:_3) )}

bracket_lookup:
  _1 = ident _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                 ( as_expression (new bracket_op
                                                    ~pos:_2
                                                    ~left:(as_expression _1)
                                                    ~key:_3) )}
| _1 = bracket_lookup _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                          ( as_expression (new bracket_op
                                                            ~pos:_2
                                                            ~left:_1
                                                            ~key:_3) )}
| _1 = function_call _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                         ( as_expression (new bracket_op
                                                            ~pos:_2
                                                            ~left:_1
                                                            ~key:_3) )}

%%
