%{

open CamomileLibrary

let parse_error _ = failwith "Syntax error"
let acset : AbsCe.aceset_info = Toolslib.Unidata.read_data "acset"

    %}
%start main
%token EOF
%token EQ
%token EXPAND
%token <string list> OPTION
%token PREFIX
%token PRIMARY
%token RESET
%token SECONDARY
%token TERTIARY
%token <CamomileLibrary.UChar.t> UCHAR
%nonassoc RESET
%left EQ PRIMARY SECONDARY TERTIARY
%left EXPAND
%right PREFIX
%type <AbsCe.ace_info> main
%%

main:
  _1 = header _2 = rules _3 = EOF
    {  (let ceset = acset.lowercase_first_tbl in
  let ace_info = AbsCe.create_ace_info ceset in
  let ace_info = _1 ace_info in
  {ace_info with ceset = _2 ace_info.AbsCe.ceset})}
| _1 = rules _2 = EOF
    {  (let ceset = acset.lowercase_first_tbl in
  let ace_info = AbsCe.create_ace_info ceset in
  {ace_info with ceset = _1 ace_info.ceset})}
| _1 = header _2 = EOF
    {    (let ceset = acset.lowercase_first_tbl in
    _1 (AbsCe.create_ace_info ceset))}
| _1 = EOF
    {    (AbsCe.create_ace_info acset.lowercase_first_tbl)}

header:
  _1 = header_option _2 = header
    {    (fun env ->
      _2 (_1 env))}
| _1 = header_option
    {    (fun env -> _1 env)}

header_option:
  _1 = OPTION
    {           (fun env ->
      match _1 with
	["alternate"; "non-ignorable"] ->
	  {env with variable_option = `Non_ignorable}
      | ["alternate"; "shifted"] ->
	  {env with variable_option = `Shifted}
      | ["alternate"; "shifted-trimmed"] ->
	  {env with variable_option = `Shift_Trimmed}
      | ["alternate"; "blanked"] ->
	  {env with variable_option = `Blanked}
      | ["backwards"; "2"] ->
	  {env with french = true}
      | ["backwards"; x] ->
	  failwith
	    ("backward comparison for the level " ^ x ^ " is not supported.")
      | ["normalization"; _] ->
	  prerr_endline "Warning : normalization option is not supported";
	  env
      | ["caseLevel"; _] ->
	  prerr_endline "Warning : caseLevel option is not supported";
	  env

      | [("caseFirst" | "casefirst"); ("off" | "lower")] ->
	  let ceset = acset.lowercase_first_tbl in
	  {env with ceset = ceset}
      | [("caseFirst" | "casefirst"); "upper"] ->
	  let ceset = acset.uppercase_first_tbl in
	  {env with ceset = ceset}
      | ["strength"; _] ->
	  prerr_endline "Warning : strength option is not supported";
	  env
      | ["hiraganaQ"; _] ->
	  let ceset = env.ceset in
	  let ce, ceset = AbsCe.add_after `Primary (AbsCe.last_variable ceset) ceset in
	  let ceset = AbsCe.put `HiraganaQ [ce] ceset in
	  {env with ceset = ceset; hiraganaQ = true}
      | x ->
	  let s = String.concat " " x in
	  failwith ("unknown option:" ^ s))}
| _1 = UCHAR
    {          (
    fun env ->
      if _1 = UChar.of_char '@' then
	{env with french = true}
      else
	failwith "stray character")}

rules:
  _1 = rule _2 = rules
    {    (fun env ->
      let _, _, env = _1 env in
      _2 env)}
| _1 = rule
    {       (fun env -> let _, _, env = _1 env in env)}

rule:
  _1 = RESET _2 = init
    {             (_2)}
| _1 = RESET _2 = OPTION _3 = init
    {                    (
  fun ceset ->
    match _2 with
      ["before"; depth] ->
	let prec =
	  match int_of_string depth with
	    1 -> `Primary
	  | 2 -> `Secondary
	  | 3 -> `Tertiary
	  | _ -> failwith ("Level " ^ depth ^ " is not supported")
	in
	let pos, exp, ceset = _3 ceset in
	(AbsCe.prev prec pos ceset, exp, ceset)
    | _ -> failwith "Unknown option")}
| _1 = rule _2 = PRIMARY _3 = elem
    {                    (
  fun ceset ->
    let pos, exp, ceset = _1 ceset in
    let pos', ceset = AbsCe.add_after `Primary pos ceset in
    let ceset' = _3 [] (pos' :: exp) ceset in
    (pos', exp, ceset'))}
| _1 = rule _2 = SECONDARY _3 = elem
    {                      (
  fun ceset ->
    let pos, exp, ceset = _1 ceset in
    let pos', ceset = AbsCe.add_after `Secondary pos ceset in
    let ceset' = _3 [] (pos' :: exp) ceset in
    (pos', exp, ceset'))}
| _1 = rule _2 = TERTIARY _3 = elem
    {                     (
  fun ceset ->
    let pos, exp, ceset = _1 ceset in
    let pos', ceset = AbsCe.add_after `Tertiary pos ceset in
    let ceset' = _3 [] (pos' :: exp) ceset in
    (pos', exp, ceset'))}
| _1 = rule _2 = EQ _3 = elem
    {               (
  fun ceset ->
    let pos, exp, ceset = _1 ceset in
    let ceset' = _3 [] (pos :: exp) ceset in
    (pos, exp, ceset'))}

ulist:
  _1 = UCHAR
    {                ([_1])}
| _1 = UCHAR _2 = ulist
    {                                     (_1 :: _2)}

init:
  _1 = ulist
    {          (
  fun ceset ->
    let ceset, es = AbsCe.ces_of ceset _1 in
    (List.hd es, List.tl es, ceset))}
| _1 = OPTION
    {         (
  fun ceset ->
    match _1 with
      [("first" | "last") ; "teritiary"; "ignorable"]
    | [("first" | "last") ; "secondary"; "ignorable"] ->
	(AbsCe.complete_ignorable ceset, [], ceset)
    | ["first"; "primary"; "ignorable"] ->
	let ce = AbsCe.next `Secondary (AbsCe.complete_ignorable ceset) ceset in
	(ce, [], ceset)
    | ["last"; "primary"; "ignorable"] ->
	let ce = AbsCe.next `Primary (AbsCe.complete_ignorable ceset) ceset in
	(ce, [], ceset)
    | ["first"; "variable"] ->
	let ce = AbsCe.next `Primary (AbsCe.complete_ignorable ceset) ceset in
	(ce, [], ceset)
    | ["last"; "variable"] ->
	(AbsCe.last_variable ceset, [], ceset)
    | ["first"; "regular"] ->
	let ce = AbsCe.next `Primary (AbsCe.last_variable ceset) ceset in
	(ce, [], ceset)
    | ["last"; "regular"] | ["top"] ->
	let ce = AbsCe.prev `Tertiary (AbsCe.first_implicit ceset) ceset in
	(ce, [], ceset)
    | ["first"; "implicit"] ->
	(AbsCe.first_implicit ceset, [], ceset)
    | ["last"; "implicit"] ->
	let ce = AbsCe.prev `Tertiary (AbsCe.first_trailing ceset) ceset in
	(ce, [], ceset)
    | ["first"; "trailing"] ->
	(AbsCe.first_trailing ceset, [], ceset)
    | ["last"; "trailing"] ->
	(AbsCe.top ceset, [], ceset)
    | _ -> assert false)}

elem:
  _1 = ulist
    {          (fun prefix ces ceset ->
      AbsCe.put (`Seq (prefix @ _1)) ces ceset)}
| _1 = elem _2 = EXPAND _3 = ulist
    {                    (fun prefix ces ceset ->
    let ceset', exps = AbsCe.ces_of ceset _3 in
    _1 prefix (ces @ exps) ceset')}
| _1 = ulist _2 = PREFIX _3 = elem
    {                    (fun prefix ces ceset ->
    let ceset', exps = AbsCe.ces_of ceset _1 in
    _3 (prefix @ _1) (exps @ ces) ceset')}
| _1 = OPTION
    {         (fun prefix ces ceset ->
    match _1 with ["variable"; "top"] ->
      (match prefix, ces with
	[], [_] ->
	  AbsCe.put `LastVariable ces ceset
      | _, _ ->
	  failwith "Variable top should be neither contraction nor prefixed.")
    | _ -> failwith "Unknown option")}

%%
