State 0:
## Known stack suffix:
##
## LR(1) items:
source_file_or_master' -> . source_file_or_master [ # ]
## Transitions:
-- On MASTER_FILE shift to state 1
-- On LAW_TEXT shift to state 2
-- On source_file_or_master shift to state 11
-- On source_file shift to state 12
-- On list(law_intermediate_text) shift to state 13
-- On law_text shift to state 376
-- On law_intermediate_text shift to state 377
## Reductions:
-- On LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
--   reduce production list(law_intermediate_text) ->

State 1:
## Known stack suffix:
## MASTER_FILE
## LR(1) items:
source_file_or_master -> MASTER_FILE . option(law_text) master_file_includes [ # ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On option(law_text) shift to state 3
-- On law_text shift to state 10
## Reductions:
-- On LAW_INCLUDE EOF
--   reduce production option(law_text) ->

State 2:
## Known stack suffix:
## LAW_TEXT
## LR(1) items:
law_text -> LAW_TEXT . [ SCOPE LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF END_METADATA END_CODE DECLARATION BEGIN_METADATA BEGIN_CODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production law_text -> LAW_TEXT

State 3:
## Known stack suffix:
## MASTER_FILE option(law_text)
## LR(1) items:
source_file_or_master -> MASTER_FILE option(law_text) . master_file_includes [ # ]
## Transitions:
-- On LAW_INCLUDE shift to state 4
-- On EOF shift to state 5
-- On master_file_includes shift to state 6
-- On master_file_include shift to state 7
## Reductions:

State 4:
## Known stack suffix:
## LAW_INCLUDE
## LR(1) items:
master_file_include -> LAW_INCLUDE . [ LAW_TEXT LAW_INCLUDE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production master_file_include -> LAW_INCLUDE

State 5:
## Known stack suffix:
## EOF
## LR(1) items:
master_file_includes -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production master_file_includes -> EOF

State 6:
## Known stack suffix:
## MASTER_FILE option(law_text) master_file_includes
## LR(1) items:
source_file_or_master -> MASTER_FILE option(law_text) master_file_includes . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production source_file_or_master -> MASTER_FILE option(law_text) master_file_includes

State 7:
## Known stack suffix:
## master_file_include
## LR(1) items:
master_file_includes -> master_file_include . option(law_text) master_file_includes [ # ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On option(law_text) shift to state 8
-- On law_text shift to state 10
## Reductions:
-- On LAW_INCLUDE EOF
--   reduce production option(law_text) ->

State 8:
## Known stack suffix:
## master_file_include option(law_text)
## LR(1) items:
master_file_includes -> master_file_include option(law_text) . master_file_includes [ # ]
## Transitions:
-- On LAW_INCLUDE shift to state 4
-- On EOF shift to state 5
-- On master_file_includes shift to state 9
-- On master_file_include shift to state 7
## Reductions:

State 9:
## Known stack suffix:
## master_file_include option(law_text) master_file_includes
## LR(1) items:
master_file_includes -> master_file_include option(law_text) master_file_includes . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production master_file_includes -> master_file_include option(law_text) master_file_includes

State 10:
## Known stack suffix:
## law_text
## LR(1) items:
option(law_text) -> law_text . [ SCOPE LAW_INCLUDE EOF END_METADATA END_CODE DECLARATION BEGIN_CODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(law_text) -> law_text

State 11:
## Known stack suffix:
## source_file_or_master
## LR(1) items:
source_file_or_master' -> source_file_or_master . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept source_file_or_master

State 12:
## Known stack suffix:
## source_file
## LR(1) items:
source_file_or_master -> source_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production source_file_or_master -> source_file

State 13:
## Known stack suffix:
## list(law_intermediate_text)
## LR(1) items:
source_file -> list(law_intermediate_text) . source_file_after_text [ # ]
## Transitions:
-- On LAW_INCLUDE shift to state 14
-- On LAW_HEADING shift to state 15
-- On LAW_ARTICLE shift to state 16
-- On EOF shift to state 17
-- On BEGIN_METADATA shift to state 18
-- On source_file_item shift to state 362
-- On source_file_article shift to state 364
-- On source_file_after_text shift to state 379
-- On law_heading shift to state 366
-- On law_article shift to state 367
## Reductions:

State 14:
## Known stack suffix:
## LAW_INCLUDE
## LR(1) items:
source_file_item -> LAW_INCLUDE . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_file_item -> LAW_INCLUDE

State 15:
## Known stack suffix:
## LAW_HEADING
## LR(1) items:
law_heading -> LAW_HEADING . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production law_heading -> LAW_HEADING

State 16:
## Known stack suffix:
## LAW_ARTICLE
## LR(1) items:
law_article -> LAW_ARTICLE . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production law_article -> LAW_ARTICLE

State 17:
## Known stack suffix:
## EOF
## LR(1) items:
source_file_after_text -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production source_file_after_text -> EOF

State 18:
## Known stack suffix:
## BEGIN_METADATA
## LR(1) items:
source_file_item -> BEGIN_METADATA . option(law_text) metadata_block [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On option(law_text) shift to state 19
-- On law_text shift to state 10
## Reductions:
-- On BEGIN_CODE
--   reduce production option(law_text) ->

State 19:
## Known stack suffix:
## BEGIN_METADATA option(law_text)
## LR(1) items:
source_file_item -> BEGIN_METADATA option(law_text) . metadata_block [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On BEGIN_CODE shift to state 20
-- On metadata_block shift to state 361
## Reductions:

State 20:
## Known stack suffix:
## BEGIN_CODE
## LR(1) items:
metadata_block -> BEGIN_CODE . option(law_text) code END_CODE option(law_text) END_METADATA [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On option(law_text) shift to state 21
-- On law_text shift to state 10
## Reductions:
-- On SCOPE END_CODE DECLARATION
--   reduce production option(law_text) ->

State 21:
## Known stack suffix:
## BEGIN_CODE option(law_text)
## LR(1) items:
metadata_block -> BEGIN_CODE option(law_text) . code END_CODE option(law_text) END_METADATA [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On SCOPE shift to state 22
-- On DECLARATION shift to state 304
-- On list(code_item) shift to state 354
-- On code_item shift to state 355
-- On code shift to state 357
## Reductions:
-- On END_CODE
--   reduce production list(code_item) ->

State 22:
## Known stack suffix:
## SCOPE
## LR(1) items:
code_item -> SCOPE . constructor option(scope_use_condition) COLON nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 24
## Reductions:

State 23:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor -> CONSTRUCTOR . [ WITH WE_HAVE UNDER_CONDITION THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LBRACKET LABEL INIT INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEPENDS DEFINITION DECREASING DECLARATION DATA CONTEXT CONTENT CONSTRUCTOR CONSEQUENCE CONDITION COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor -> CONSTRUCTOR

State 24:
## Known stack suffix:
## SCOPE constructor
## LR(1) items:
code_item -> SCOPE constructor . option(scope_use_condition) COLON nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On UNDER_CONDITION shift to state 25
-- On scope_use_condition shift to state 243
-- On option(scope_use_condition) shift to state 244
## Reductions:
-- On COLON
--   reduce production option(scope_use_condition) ->

State 25:
## Known stack suffix:
## UNDER_CONDITION
## LR(1) items:
scope_use_condition -> UNDER_CONDITION . expression [ COLON ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 242
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 26:
## Known stack suffix:
## VERTICAL
## LR(1) items:
literal -> VERTICAL . date_int DIV date_int DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On INT_LITERAL shift to state 27
-- On date_int shift to state 28
## Reductions:

State 27:
## Known stack suffix:
## INT_LITERAL
## LR(1) items:
date_int -> INT_LITERAL . [ VERTICAL DIV ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production date_int -> INT_LITERAL

State 28:
## Known stack suffix:
## VERTICAL date_int
## LR(1) items:
literal -> VERTICAL date_int . DIV date_int DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On DIV shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## VERTICAL date_int DIV
## LR(1) items:
literal -> VERTICAL date_int DIV . date_int DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On INT_LITERAL shift to state 27
-- On date_int shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## VERTICAL date_int DIV date_int
## LR(1) items:
literal -> VERTICAL date_int DIV date_int . DIV date_int VERTICAL [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On DIV shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## VERTICAL date_int DIV date_int DIV
## LR(1) items:
literal -> VERTICAL date_int DIV date_int DIV . date_int VERTICAL [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On INT_LITERAL shift to state 27
-- On date_int shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## VERTICAL date_int DIV date_int DIV date_int
## LR(1) items:
literal -> VERTICAL date_int DIV date_int DIV date_int . VERTICAL [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On VERTICAL shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## VERTICAL date_int DIV date_int DIV date_int VERTICAL
## LR(1) items:
literal -> VERTICAL date_int DIV date_int DIV date_int VERTICAL . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> VERTICAL date_int DIV date_int DIV date_int VERTICAL

State 34:
## Known stack suffix:
## TRUE
## LR(1) items:
literal -> TRUE . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> TRUE

State 35:
## Known stack suffix:
## SUM
## LR(1) items:
aggregate_func -> SUM . typ_base [ FOR ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 43
-- On constructor shift to state 44
## Reductions:

State 36:
## Known stack suffix:
## TEXT
## LR(1) items:
typ_base -> TEXT . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> TEXT

State 37:
## Known stack suffix:
## MONEY
## LR(1) items:
typ_base -> MONEY . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> MONEY

State 38:
## Known stack suffix:
## INTEGER
## LR(1) items:
typ_base -> INTEGER . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> INTEGER

State 39:
## Known stack suffix:
## DURATION
## LR(1) items:
typ_base -> DURATION . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> DURATION

State 40:
## Known stack suffix:
## DECIMAL
## LR(1) items:
typ_base -> DECIMAL . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> DECIMAL

State 41:
## Known stack suffix:
## DATE
## LR(1) items:
typ_base -> DATE . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> DATE

State 42:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
typ_base -> BOOLEAN . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> BOOLEAN

State 43:
## Known stack suffix:
## SUM typ_base
## LR(1) items:
aggregate_func -> SUM typ_base . [ FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate_func -> SUM typ_base

State 44:
## Known stack suffix:
## constructor
## LR(1) items:
typ_base -> constructor . [ SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_base -> constructor

State 45:
## Known stack suffix:
## NOT
## LR(1) items:
logical_unop -> NOT . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_unop -> NOT

State 46:
## Known stack suffix:
## MONEY_AMOUNT
## LR(1) items:
literal
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> MONEY_AMOUNT

State 47:
## Known stack suffix:
## MINUSMONEY
## LR(1) items:
sum_unop -> MINUSMONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_unop -> MINUSMONEY

State 48:
## Known stack suffix:
## MINUSDURATION
## LR(1) items:
sum_unop -> MINUSDURATION . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_unop -> MINUSDURATION

State 49:
## Known stack suffix:
## MINUSDEC
## LR(1) items:
sum_unop -> MINUSDEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_unop -> MINUSDEC

State 50:
## Known stack suffix:
## MINUS
## LR(1) items:
sum_unop -> MINUS . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_unop -> MINUS

State 51:
## Known stack suffix:
## MINIMUM
## LR(1) items:
aggregate_func -> MINIMUM . typ_base INIT primitive_expression [ FOR ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 52
-- On constructor shift to state 44
## Reductions:

State 52:
## Known stack suffix:
## MINIMUM typ_base
## LR(1) items:
aggregate_func -> MINIMUM typ_base . INIT primitive_expression [ FOR ]
## Transitions:
-- On INIT shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## MINIMUM typ_base INIT
## LR(1) items:
aggregate_func -> MINIMUM typ_base INIT . primitive_expression [ FOR ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 241
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 54:
## Known stack suffix:
## LSQUARE
## LR(1) items:
primitive_expression -> LSQUARE . loption(separated_nonempty_list(SEMICOLON,expression)) RSQUARE [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On separated_nonempty_list(SEMICOLON,expression) shift to state 235
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On loption(separated_nonempty_list(SEMICOLON,expression)) shift to state 236
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 238
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:
-- On RSQUARE
--   reduce production loption(separated_nonempty_list(SEMICOLON,expression)) ->

State 55:
## Known stack suffix:
## MAXIMUM
## LR(1) items:
aggregate_func -> MAXIMUM . typ_base INIT primitive_expression [ FOR ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 56
-- On constructor shift to state 44
## Reductions:

State 56:
## Known stack suffix:
## MAXIMUM typ_base
## LR(1) items:
aggregate_func -> MAXIMUM typ_base . INIT primitive_expression [ FOR ]
## Transitions:
-- On INIT shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## MAXIMUM typ_base INIT
## LR(1) items:
aggregate_func -> MAXIMUM typ_base INIT . primitive_expression [ FOR ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 234
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 58:
## Known stack suffix:
## LPAREN
## LR(1) items:
atomic_expression -> LPAREN . expression RPAREN [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 232
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 59:
## Known stack suffix:
## MATCH
## LR(1) items:
expression -> MATCH . primitive_expression WITH match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 78
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 60:
## Known stack suffix:
## INT_TO_DEC
## LR(1) items:
primitive_expression
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_expression -> INT_TO_DEC

State 61:
## Known stack suffix:
## INT_LITERAL
## LR(1) items:
num_literal -> INT_LITERAL . [ YEAR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS PERCENT OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MONTH MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION DAY CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production num_literal -> INT_LITERAL

State 62:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ WITH_V WITH WE_HAVE UNDER_CONDITION THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL NOT MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR FILLED EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEPENDS DEFINITION DEFINED_AS DECREASING DECLARATION DATA CONTENT CONSEQUENCE CONDITION COLON BY ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT

State 63:
## Known stack suffix:
## GET_YEAR
## LR(1) items:
primitive_expression -> GET_YEAR . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_expression -> GET_YEAR

State 64:
## Known stack suffix:
## GET_MONTH
## LR(1) items:
primitive_expression -> GET_MONTH . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_expression -> GET_MONTH

State 65:
## Known stack suffix:
## GET_DAY
## LR(1) items:
primitive_expression -> GET_DAY . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_expression -> GET_DAY

State 66:
## Known stack suffix:
## FALSE
## LR(1) items:
literal -> FALSE . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> FALSE

State 67:
## Known stack suffix:
## DECIMAL_LITERAL
## LR(1) items:
num_literal -> DECIMAL_LITERAL . [ YEAR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS PERCENT OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MONTH MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION DAY CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production num_literal -> DECIMAL_LITERAL

State 68:
## Known stack suffix:
## CARDINAL
## LR(1) items:
primitive_expression -> CARDINAL . [ WITH WE_HAVE SUCH OF FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_expression -> CARDINAL

State 69:
## Known stack suffix:
## struct_or_enum_inject
## LR(1) items:
primitive_expression -> struct_or_enum_inject . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_expression -> struct_or_enum_inject

State 70:
## Known stack suffix:
## small_expression
## LR(1) items:
primitive_expression -> small_expression . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
small_expression -> small_expression . ARROW constructor [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
small_expression -> small_expression . DOT option(terminated(constructor,DOT)) ident [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On DOT shift to state 71
-- On ARROW shift to state 76
## Reductions:
-- On WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production primitive_expression -> small_expression

State 71:
## Known stack suffix:
## small_expression DOT
## LR(1) items:
small_expression -> small_expression DOT . option(terminated(constructor,DOT)) ident [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On option(terminated(constructor,DOT)) shift to state 72
-- On constructor shift to state 74
## Reductions:
-- On IDENT
--   reduce production option(terminated(constructor,DOT)) ->

State 72:
## Known stack suffix:
## small_expression DOT option(terminated(constructor,DOT))
## LR(1) items:
small_expression -> small_expression DOT option(terminated(constructor,DOT)) . ident [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## small_expression DOT option(terminated(constructor,DOT)) ident
## LR(1) items:
small_expression -> small_expression DOT option(terminated(constructor,DOT)) ident . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_expression -> small_expression DOT option(terminated(constructor,DOT)) ident

State 74:
## Known stack suffix:
## constructor
## LR(1) items:
option(terminated(constructor,DOT)) -> constructor . DOT [ IDENT ]
## Transitions:
-- On DOT shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## constructor DOT
## LR(1) items:
option(terminated(constructor,DOT)) -> constructor DOT . [ IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(terminated(constructor,DOT)) -> constructor DOT

State 76:
## Known stack suffix:
## small_expression ARROW
## LR(1) items:
small_expression -> small_expression ARROW . constructor [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## small_expression ARROW constructor
## LR(1) items:
small_expression -> small_expression ARROW constructor . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_expression -> small_expression ARROW constructor

State 78:
## Known stack suffix:
## MATCH primitive_expression
## LR(1) items:
expression -> MATCH primitive_expression . WITH match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On WITH shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## MATCH primitive_expression WITH
## LR(1) items:
expression -> MATCH primitive_expression WITH . match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On ALT shift to state 80
-- On match_arms shift to state 206
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION
--   reduce production match_arms ->

State 80:
## Known stack suffix:
## ALT
## LR(1) items:
match_arms -> ALT . match_arm match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On maybe_qualified_constructor shift to state 81
-- On match_arm shift to state 91
-- On constructor_binding shift to state 93
-- On constructor shift to state 85
## Reductions:

State 81:
## Known stack suffix:
## maybe_qualified_constructor
## LR(1) items:
constructor_binding -> maybe_qualified_constructor . optional_binding [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On OF shift to state 82
-- On optional_binding shift to state 90
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production optional_binding ->

State 82:
## Known stack suffix:
## OF
## LR(1) items:
optional_binding -> OF . ident [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
optional_binding -> OF . maybe_qualified_constructor constructor_binding [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On IDENT shift to state 62
-- On CONSTRUCTOR shift to state 23
-- On maybe_qualified_constructor shift to state 83
-- On ident shift to state 89
-- On constructor shift to state 85
## Reductions:

State 83:
## Known stack suffix:
## OF maybe_qualified_constructor
## LR(1) items:
optional_binding -> OF maybe_qualified_constructor . constructor_binding [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On maybe_qualified_constructor shift to state 81
-- On constructor_binding shift to state 84
-- On constructor shift to state 85
## Reductions:

State 84:
## Known stack suffix:
## OF maybe_qualified_constructor constructor_binding
## LR(1) items:
optional_binding -> OF maybe_qualified_constructor constructor_binding . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_binding -> OF maybe_qualified_constructor constructor_binding

State 85:
## Known stack suffix:
## constructor
## LR(1) items:
maybe_qualified_constructor -> constructor . option(preceded(DOT,constructor)) [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On DOT shift to state 86
-- On option(preceded(DOT,constructor)) shift to state 88
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production option(preceded(DOT,constructor)) ->

State 86:
## Known stack suffix:
## DOT
## LR(1) items:
option(preceded(DOT,constructor)) -> DOT . constructor [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONTENT CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## DOT constructor
## LR(1) items:
option(preceded(DOT,constructor)) -> DOT constructor . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONTENT CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(preceded(DOT,constructor)) -> DOT constructor

State 88:
## Known stack suffix:
## constructor option(preceded(DOT,constructor))
## LR(1) items:
maybe_qualified_constructor -> constructor option(preceded(DOT,constructor)) . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production maybe_qualified_constructor -> constructor option(preceded(DOT,constructor))

State 89:
## Known stack suffix:
## OF ident
## LR(1) items:
optional_binding -> OF ident . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_binding -> OF ident

State 90:
## Known stack suffix:
## maybe_qualified_constructor optional_binding
## LR(1) items:
constructor_binding -> maybe_qualified_constructor optional_binding . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_binding -> maybe_qualified_constructor optional_binding

State 91:
## Known stack suffix:
## ALT match_arm
## LR(1) items:
match_arms -> ALT match_arm . match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On ALT shift to state 80
-- On match_arms shift to state 92
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION
--   reduce production match_arms ->

State 92:
## Known stack suffix:
## ALT match_arm match_arms
## LR(1) items:
match_arms -> ALT match_arm match_arms . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_arms -> ALT match_arm match_arms

State 93:
## Known stack suffix:
## constructor_binding
## LR(1) items:
match_arm -> constructor_binding . COLON logical_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
-- On COLON shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## constructor_binding COLON
## LR(1) items:
match_arm -> constructor_binding COLON . logical_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 205
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 95:
## Known stack suffix:
## MAP
## LR(1) items:
aggregate_func -> MAP . [ FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate_func -> MAP

State 96:
## Known stack suffix:
## FILTER
## LR(1) items:
aggregate_func -> FILTER . [ FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate_func -> FILTER

State 97:
## Known stack suffix:
## CONTENT
## LR(1) items:
aggregate_func -> CONTENT . MAXIMUM typ_base INIT primitive_expression [ FOR ]
aggregate_func -> CONTENT . MINIMUM typ_base INIT primitive_expression [ FOR ]
## Transitions:
-- On MINIMUM shift to state 98
-- On MAXIMUM shift to state 201
## Reductions:

State 98:
## Known stack suffix:
## CONTENT MINIMUM
## LR(1) items:
aggregate_func -> CONTENT MINIMUM . typ_base INIT primitive_expression [ FOR ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 99
-- On constructor shift to state 44
## Reductions:

State 99:
## Known stack suffix:
## CONTENT MINIMUM typ_base
## LR(1) items:
aggregate_func -> CONTENT MINIMUM typ_base . INIT primitive_expression [ FOR ]
## Transitions:
-- On INIT shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## CONTENT MINIMUM typ_base INIT
## LR(1) items:
aggregate_func -> CONTENT MINIMUM typ_base INIT . primitive_expression [ FOR ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 101
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 101:
## Known stack suffix:
## CONTENT MINIMUM typ_base INIT primitive_expression
## LR(1) items:
aggregate_func -> CONTENT MINIMUM typ_base INIT primitive_expression . [ FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate_func -> CONTENT MINIMUM typ_base INIT primitive_expression

State 102:
## Known stack suffix:
## num_literal
## LR(1) items:
literal -> num_literal . option(unit_literal) [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On YEAR shift to state 103
-- On PERCENT shift to state 104
-- On MONTH shift to state 105
-- On DAY shift to state 106
-- On unit_literal shift to state 107
-- On option(unit_literal) shift to state 108
## Reductions:
-- On WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT
--   reduce production option(unit_literal) ->

State 103:
## Known stack suffix:
## YEAR
## LR(1) items:
unit_literal -> YEAR . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unit_literal -> YEAR

State 104:
## Known stack suffix:
## PERCENT
## LR(1) items:
unit_literal -> PERCENT . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unit_literal -> PERCENT

State 105:
## Known stack suffix:
## MONTH
## LR(1) items:
unit_literal -> MONTH . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unit_literal -> MONTH

State 106:
## Known stack suffix:
## DAY
## LR(1) items:
unit_literal -> DAY . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unit_literal -> DAY

State 107:
## Known stack suffix:
## unit_literal
## LR(1) items:
option(unit_literal) -> unit_literal . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(unit_literal) -> unit_literal

State 108:
## Known stack suffix:
## num_literal option(unit_literal)
## LR(1) items:
literal -> num_literal option(unit_literal) . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> num_literal option(unit_literal)

State 109:
## Known stack suffix:
## literal
## LR(1) items:
atomic_expression -> literal . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> literal

State 110:
## Known stack suffix:
## ident
## LR(1) items:
atomic_expression -> ident . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> ident

State 111:
## Known stack suffix:
## constructor
## LR(1) items:
struct_or_enum_inject -> constructor . option(preceded(DOT,constructor)) option(enum_inject_content) [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
struct_or_enum_inject -> constructor . struct_inject_content [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On LBRACKET shift to state 112
-- On DOT shift to state 86
-- On struct_inject_content shift to state 195
-- On option(preceded(DOT,constructor)) shift to state 196
## Reductions:
-- On WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONTENT CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production option(preceded(DOT,constructor)) ->

State 112:
## Known stack suffix:
## LBRACKET
## LR(1) items:
struct_inject_content -> LBRACKET . ALT separated_nonempty_list(ALT,struct_content_field) RBRACKET [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On ALT shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## LBRACKET ALT
## LR(1) items:
struct_inject_content -> LBRACKET ALT . separated_nonempty_list(ALT,struct_content_field) RBRACKET [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On IDENT shift to state 62
-- On struct_content_field shift to state 114
-- On separated_nonempty_list(ALT,struct_content_field) shift to state 193
-- On ident shift to state 117
## Reductions:

State 114:
## Known stack suffix:
## struct_content_field
## LR(1) items:
separated_nonempty_list(ALT,struct_content_field) -> struct_content_field . [ RBRACKET ]
separated_nonempty_list(ALT,struct_content_field) -> struct_content_field . ALT separated_nonempty_list(ALT,struct_content_field) [ RBRACKET ]
## Transitions:
-- On ALT shift to state 115
## Reductions:
-- On RBRACKET
--   reduce production separated_nonempty_list(ALT,struct_content_field) -> struct_content_field

State 115:
## Known stack suffix:
## struct_content_field ALT
## LR(1) items:
separated_nonempty_list(ALT,struct_content_field) -> struct_content_field ALT . separated_nonempty_list(ALT,struct_content_field) [ RBRACKET ]
## Transitions:
-- On IDENT shift to state 62
-- On struct_content_field shift to state 114
-- On separated_nonempty_list(ALT,struct_content_field) shift to state 116
-- On ident shift to state 117
## Reductions:

State 116:
## Known stack suffix:
## struct_content_field ALT separated_nonempty_list(ALT,struct_content_field)
## LR(1) items:
separated_nonempty_list(ALT,struct_content_field) -> struct_content_field ALT separated_nonempty_list(ALT,struct_content_field) . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(ALT,struct_content_field) -> struct_content_field ALT separated_nonempty_list(ALT,struct_content_field)

State 117:
## Known stack suffix:
## ident
## LR(1) items:
struct_content_field -> ident . COLON logical_expression [ RBRACKET ALT ]
## Transitions:
-- On COLON shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## ident COLON
## LR(1) items:
struct_content_field -> ident COLON . logical_expression [ RBRACKET ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 187
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 119:
## Known stack suffix:
## CARDINAL
## LR(1) items:
aggregate_func -> CARDINAL . [ FOR ]
primitive_expression -> CARDINAL . [ WITH THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Reductions:
-- On FOR
--   reduce production aggregate_func -> CARDINAL
-- On WITH THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production primitive_expression -> CARDINAL

State 120:
## Known stack suffix:
## sum_unop
## LR(1) items:
sum_expression -> sum_unop . sum_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 121
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 121:
## Known stack suffix:
## sum_unop sum_expression
## LR(1) items:
sum_expression -> sum_unop sum_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_expression -> sum_unop sum_expression

State 122:
## Known stack suffix:
## primitive_expression
## LR(1) items:
base_expression -> primitive_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
base_expression -> primitive_expression . OF base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
base_expression -> primitive_expression . WITH constructor_binding [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
base_expression -> primitive_expression . IN base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On WITH shift to state 123
-- On OF shift to state 125
-- On IN shift to state 136
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production base_expression -> primitive_expression

State 123:
## Known stack suffix:
## primitive_expression WITH
## LR(1) items:
base_expression -> primitive_expression WITH . constructor_binding [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On maybe_qualified_constructor shift to state 81
-- On constructor_binding shift to state 124
-- On constructor shift to state 85
## Reductions:

State 124:
## Known stack suffix:
## primitive_expression WITH constructor_binding
## LR(1) items:
base_expression -> primitive_expression WITH constructor_binding . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_expression -> primitive_expression WITH constructor_binding

State 125:
## Known stack suffix:
## primitive_expression OF
## LR(1) items:
base_expression -> primitive_expression OF . base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 126
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 126:
## Known stack suffix:
## primitive_expression OF base_expression
## LR(1) items:
base_expression -> primitive_expression OF base_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_expression -> primitive_expression OF base_expression

State 127:
## Known stack suffix:
## atomic_expression
## LR(1) items:
small_expression -> atomic_expression . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production small_expression -> atomic_expression

State 128:
## Known stack suffix:
## aggregate_func
## LR(1) items:
aggregate -> aggregate_func . FOR ident IN primitive_expression OF base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On FOR shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## aggregate_func FOR
## LR(1) items:
aggregate -> aggregate_func FOR . ident IN primitive_expression OF base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## aggregate_func FOR ident
## LR(1) items:
aggregate -> aggregate_func FOR ident . IN primitive_expression OF base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On IN shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## aggregate_func FOR ident IN
## LR(1) items:
aggregate -> aggregate_func FOR ident IN . primitive_expression OF base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 132
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 132:
## Known stack suffix:
## aggregate_func FOR ident IN primitive_expression
## LR(1) items:
aggregate -> aggregate_func FOR ident IN primitive_expression . OF base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On OF shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## aggregate_func FOR ident IN primitive_expression OF
## LR(1) items:
aggregate -> aggregate_func FOR ident IN primitive_expression OF . base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 134
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 134:
## Known stack suffix:
## aggregate_func FOR ident IN primitive_expression OF base_expression
## LR(1) items:
aggregate -> aggregate_func FOR ident IN primitive_expression OF base_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate -> aggregate_func FOR ident IN primitive_expression OF base_expression

State 135:
## Known stack suffix:
## aggregate
## LR(1) items:
base_expression -> aggregate . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_expression -> aggregate

State 136:
## Known stack suffix:
## primitive_expression IN
## LR(1) items:
base_expression -> primitive_expression IN . base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 137
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 137:
## Known stack suffix:
## primitive_expression IN base_expression
## LR(1) items:
base_expression -> primitive_expression IN base_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_expression -> primitive_expression IN base_expression

State 138:
## Known stack suffix:
## mult_expression
## LR(1) items:
sum_expression -> mult_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
sum_expression -> mult_expression . sum_op sum_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On PLUSMONEY shift to state 139
-- On PLUSDURATION shift to state 140
-- On PLUSDEC shift to state 141
-- On PLUSDATE shift to state 142
-- On PLUS shift to state 143
-- On MINUSMONEY shift to state 144
-- On MINUSDURATION shift to state 145
-- On MINUSDEC shift to state 146
-- On MINUSDATE shift to state 147
-- On MINUS shift to state 148
-- On sum_op shift to state 149
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production sum_expression -> mult_expression

State 139:
## Known stack suffix:
## PLUSMONEY
## LR(1) items:
sum_op -> PLUSMONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> PLUSMONEY

State 140:
## Known stack suffix:
## PLUSDURATION
## LR(1) items:
sum_op -> PLUSDURATION . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> PLUSDURATION

State 141:
## Known stack suffix:
## PLUSDEC
## LR(1) items:
sum_op -> PLUSDEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> PLUSDEC

State 142:
## Known stack suffix:
## PLUSDATE
## LR(1) items:
sum_op -> PLUSDATE . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> PLUSDATE

State 143:
## Known stack suffix:
## PLUS
## LR(1) items:
sum_op -> PLUS . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> PLUS

State 144:
## Known stack suffix:
## MINUSMONEY
## LR(1) items:
sum_op -> MINUSMONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> MINUSMONEY

State 145:
## Known stack suffix:
## MINUSDURATION
## LR(1) items:
sum_op -> MINUSDURATION . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> MINUSDURATION

State 146:
## Known stack suffix:
## MINUSDEC
## LR(1) items:
sum_op -> MINUSDEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> MINUSDEC

State 147:
## Known stack suffix:
## MINUSDATE
## LR(1) items:
sum_op -> MINUSDATE . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> MINUSDATE

State 148:
## Known stack suffix:
## MINUS
## LR(1) items:
sum_op -> MINUS . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_op -> MINUS

State 149:
## Known stack suffix:
## mult_expression sum_op
## LR(1) items:
sum_expression -> mult_expression sum_op . sum_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 150
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 150:
## Known stack suffix:
## mult_expression sum_op sum_expression
## LR(1) items:
sum_expression -> mult_expression sum_op sum_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum_expression -> mult_expression sum_op sum_expression

State 151:
## Known stack suffix:
## base_expression
## LR(1) items:
mult_expression -> base_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
mult_expression -> base_expression . mult_op mult_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On MULTMONEY shift to state 152
-- On MULTDEC shift to state 153
-- On MULT shift to state 154
-- On DIVMONEY shift to state 155
-- On DIVDEC shift to state 156
-- On DIV shift to state 157
-- On mult_op shift to state 158
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production mult_expression -> base_expression

State 152:
## Known stack suffix:
## MULTMONEY
## LR(1) items:
mult_op -> MULTMONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mult_op -> MULTMONEY

State 153:
## Known stack suffix:
## MULTDEC
## LR(1) items:
mult_op -> MULTDEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mult_op -> MULTDEC

State 154:
## Known stack suffix:
## MULT
## LR(1) items:
mult_op -> MULT . [ VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mult_op -> MULT

State 155:
## Known stack suffix:
## DIVMONEY
## LR(1) items:
mult_op -> DIVMONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mult_op -> DIVMONEY

State 156:
## Known stack suffix:
## DIVDEC
## LR(1) items:
mult_op -> DIVDEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mult_op -> DIVDEC

State 157:
## Known stack suffix:
## DIV
## LR(1) items:
mult_op -> DIV . [ VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mult_op -> DIV

State 158:
## Known stack suffix:
## base_expression mult_op
## LR(1) items:
mult_expression -> base_expression mult_op . mult_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 159
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 159:
## Known stack suffix:
## base_expression mult_op mult_expression
## LR(1) items:
mult_expression -> base_expression mult_op mult_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mult_expression -> base_expression mult_op mult_expression

State 160:
## Known stack suffix:
## sum_expression
## LR(1) items:
compare_expression -> sum_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
compare_expression -> sum_expression . compare_op compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On NOT_EQUAL shift to state 161
-- On LESSER_MONEY shift to state 162
-- On LESSER_EQUAL_MONEY shift to state 163
-- On LESSER_EQUAL_DURATION shift to state 164
-- On LESSER_EQUAL_DEC shift to state 165
-- On LESSER_EQUAL_DATE shift to state 166
-- On LESSER_EQUAL shift to state 167
-- On LESSER_DURATION shift to state 168
-- On LESSER_DEC shift to state 169
-- On LESSER_DATE shift to state 170
-- On LESSER shift to state 171
-- On GREATER_MONEY shift to state 172
-- On GREATER_EQUAL_MONEY shift to state 173
-- On GREATER_EQUAL_DURATION shift to state 174
-- On GREATER_EQUAL_DEC shift to state 175
-- On GREATER_EQUAL_DATE shift to state 176
-- On GREATER_EQUAL shift to state 177
-- On GREATER_DURATION shift to state 178
-- On GREATER_DEC shift to state 179
-- On GREATER_DATE shift to state 180
-- On GREATER shift to state 181
-- On EQUAL shift to state 182
-- On compare_op shift to state 183
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production compare_expression -> sum_expression

State 161:
## Known stack suffix:
## NOT_EQUAL
## LR(1) items:
compare_op -> NOT_EQUAL . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> NOT_EQUAL

State 162:
## Known stack suffix:
## LESSER_MONEY
## LR(1) items:
compare_op -> LESSER_MONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_MONEY

State 163:
## Known stack suffix:
## LESSER_EQUAL_MONEY
## LR(1) items:
compare_op -> LESSER_EQUAL_MONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_EQUAL_MONEY

State 164:
## Known stack suffix:
## LESSER_EQUAL_DURATION
## LR(1) items:
compare_op -> LESSER_EQUAL_DURATION . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_EQUAL_DURATION

State 165:
## Known stack suffix:
## LESSER_EQUAL_DEC
## LR(1) items:
compare_op -> LESSER_EQUAL_DEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_EQUAL_DEC

State 166:
## Known stack suffix:
## LESSER_EQUAL_DATE
## LR(1) items:
compare_op -> LESSER_EQUAL_DATE . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_EQUAL_DATE

State 167:
## Known stack suffix:
## LESSER_EQUAL
## LR(1) items:
compare_op -> LESSER_EQUAL . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_EQUAL

State 168:
## Known stack suffix:
## LESSER_DURATION
## LR(1) items:
compare_op -> LESSER_DURATION . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_DURATION

State 169:
## Known stack suffix:
## LESSER_DEC
## LR(1) items:
compare_op -> LESSER_DEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_DEC

State 170:
## Known stack suffix:
## LESSER_DATE
## LR(1) items:
compare_op -> LESSER_DATE . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER_DATE

State 171:
## Known stack suffix:
## LESSER
## LR(1) items:
compare_op -> LESSER . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> LESSER

State 172:
## Known stack suffix:
## GREATER_MONEY
## LR(1) items:
compare_op -> GREATER_MONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_MONEY

State 173:
## Known stack suffix:
## GREATER_EQUAL_MONEY
## LR(1) items:
compare_op -> GREATER_EQUAL_MONEY . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_EQUAL_MONEY

State 174:
## Known stack suffix:
## GREATER_EQUAL_DURATION
## LR(1) items:
compare_op -> GREATER_EQUAL_DURATION . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_EQUAL_DURATION

State 175:
## Known stack suffix:
## GREATER_EQUAL_DEC
## LR(1) items:
compare_op -> GREATER_EQUAL_DEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_EQUAL_DEC

State 176:
## Known stack suffix:
## GREATER_EQUAL_DATE
## LR(1) items:
compare_op -> GREATER_EQUAL_DATE . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_EQUAL_DATE

State 177:
## Known stack suffix:
## GREATER_EQUAL
## LR(1) items:
compare_op -> GREATER_EQUAL . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_EQUAL

State 178:
## Known stack suffix:
## GREATER_DURATION
## LR(1) items:
compare_op -> GREATER_DURATION . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_DURATION

State 179:
## Known stack suffix:
## GREATER_DEC
## LR(1) items:
compare_op -> GREATER_DEC . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_DEC

State 180:
## Known stack suffix:
## GREATER_DATE
## LR(1) items:
compare_op -> GREATER_DATE . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER_DATE

State 181:
## Known stack suffix:
## GREATER
## LR(1) items:
compare_op -> GREATER . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> GREATER

State 182:
## Known stack suffix:
## EQUAL
## LR(1) items:
compare_op -> EQUAL . [ VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_op -> EQUAL

State 183:
## Known stack suffix:
## sum_expression compare_op
## LR(1) items:
compare_expression -> sum_expression compare_op . compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On compare_expression shift to state 184
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 184:
## Known stack suffix:
## sum_expression compare_op compare_expression
## LR(1) items:
compare_expression -> sum_expression compare_op compare_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compare_expression -> sum_expression compare_op compare_expression

State 185:
## Known stack suffix:
## logical_unop
## LR(1) items:
logical_expression -> logical_unop . compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On compare_expression shift to state 186
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 186:
## Known stack suffix:
## logical_unop compare_expression
## LR(1) items:
logical_expression -> logical_unop compare_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_expression -> logical_unop compare_expression

State 187:
## Known stack suffix:
## ident COLON logical_expression
## LR(1) items:
struct_content_field -> ident COLON logical_expression . [ RBRACKET ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_content_field -> ident COLON logical_expression

State 188:
## Known stack suffix:
## compare_expression
## LR(1) items:
logical_expression -> compare_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
logical_expression -> compare_expression . logical_op logical_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
-- On OR shift to state 189
-- On AND shift to state 190
-- On logical_op shift to state 191
## Reductions:
-- On THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT
--   reduce production logical_expression -> compare_expression

State 189:
## Known stack suffix:
## OR
## LR(1) items:
logical_op -> OR . [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_op -> OR

State 190:
## Known stack suffix:
## AND
## LR(1) items:
logical_op -> AND . [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_op -> AND

State 191:
## Known stack suffix:
## compare_expression logical_op
## LR(1) items:
logical_expression -> compare_expression logical_op . logical_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 192
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 192:
## Known stack suffix:
## compare_expression logical_op logical_expression
## LR(1) items:
logical_expression -> compare_expression logical_op logical_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production logical_expression -> compare_expression logical_op logical_expression

State 193:
## Known stack suffix:
## LBRACKET ALT separated_nonempty_list(ALT,struct_content_field)
## LR(1) items:
struct_inject_content -> LBRACKET ALT separated_nonempty_list(ALT,struct_content_field) . RBRACKET [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On RBRACKET shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## LBRACKET ALT separated_nonempty_list(ALT,struct_content_field) RBRACKET
## LR(1) items:
struct_inject_content -> LBRACKET ALT separated_nonempty_list(ALT,struct_content_field) RBRACKET . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_inject_content -> LBRACKET ALT separated_nonempty_list(ALT,struct_content_field) RBRACKET

State 195:
## Known stack suffix:
## constructor struct_inject_content
## LR(1) items:
struct_or_enum_inject -> constructor struct_inject_content . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_enum_inject -> constructor struct_inject_content

State 196:
## Known stack suffix:
## constructor option(preceded(DOT,constructor))
## LR(1) items:
struct_or_enum_inject -> constructor option(preceded(DOT,constructor)) . option(enum_inject_content) [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On CONTENT shift to state 197
-- On option(enum_inject_content) shift to state 199
-- On enum_inject_content shift to state 200
## Reductions:
-- On WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production option(enum_inject_content) ->

State 197:
## Known stack suffix:
## CONTENT
## LR(1) items:
enum_inject_content -> CONTENT . small_expression [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LPAREN shift to state 58
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On small_expression shift to state 198
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On atomic_expression shift to state 127
## Reductions:

State 198:
## Known stack suffix:
## CONTENT small_expression
## LR(1) items:
enum_inject_content -> CONTENT small_expression . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
small_expression -> small_expression . ARROW constructor [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
small_expression -> small_expression . DOT option(terminated(constructor,DOT)) ident [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On DOT shift to state 71
-- On ARROW shift to state 76
## Reductions:
-- On WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
--   reduce production enum_inject_content -> CONTENT small_expression

State 199:
## Known stack suffix:
## constructor option(preceded(DOT,constructor)) option(enum_inject_content)
## LR(1) items:
struct_or_enum_inject -> constructor option(preceded(DOT,constructor)) option(enum_inject_content) . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_enum_inject -> constructor option(preceded(DOT,constructor)) option(enum_inject_content)

State 200:
## Known stack suffix:
## enum_inject_content
## LR(1) items:
option(enum_inject_content) -> enum_inject_content . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(enum_inject_content) -> enum_inject_content

State 201:
## Known stack suffix:
## CONTENT MAXIMUM
## LR(1) items:
aggregate_func -> CONTENT MAXIMUM . typ_base INIT primitive_expression [ FOR ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 202
-- On constructor shift to state 44
## Reductions:

State 202:
## Known stack suffix:
## CONTENT MAXIMUM typ_base
## LR(1) items:
aggregate_func -> CONTENT MAXIMUM typ_base . INIT primitive_expression [ FOR ]
## Transitions:
-- On INIT shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## CONTENT MAXIMUM typ_base INIT
## LR(1) items:
aggregate_func -> CONTENT MAXIMUM typ_base INIT . primitive_expression [ FOR ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 204
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 204:
## Known stack suffix:
## CONTENT MAXIMUM typ_base INIT primitive_expression
## LR(1) items:
aggregate_func -> CONTENT MAXIMUM typ_base INIT primitive_expression . [ FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate_func -> CONTENT MAXIMUM typ_base INIT primitive_expression

State 205:
## Known stack suffix:
## constructor_binding COLON logical_expression
## LR(1) items:
match_arm -> constructor_binding COLON logical_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_arm -> constructor_binding COLON logical_expression

State 206:
## Known stack suffix:
## MATCH primitive_expression WITH match_arms
## LR(1) items:
expression -> MATCH primitive_expression WITH match_arms . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> MATCH primitive_expression WITH match_arms

State 207:
## Known stack suffix:
## IF
## LR(1) items:
expression -> IF . expression THEN expression ELSE base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 227
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 208:
## Known stack suffix:
## FOR
## LR(1) items:
for_all_marked -> FOR . ALL [ IDENT ]
## Transitions:
-- On ALL shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## FOR ALL
## LR(1) items:
for_all_marked -> FOR ALL . [ IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_all_marked -> FOR ALL

State 210:
## Known stack suffix:
## EXISTS
## LR(1) items:
exists_marked -> EXISTS . [ IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exists_marked -> EXISTS

State 211:
## Known stack suffix:
## logical_expression
## LR(1) items:
expression -> logical_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> logical_expression

State 212:
## Known stack suffix:
## forall_prefix
## LR(1) items:
expression -> forall_prefix . expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 218
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 213:
## Known stack suffix:
## for_all_marked
## LR(1) items:
forall_prefix -> for_all_marked . ident IN primitive_expression WE_HAVE [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## for_all_marked ident
## LR(1) items:
forall_prefix -> for_all_marked ident . IN primitive_expression WE_HAVE [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On IN shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## for_all_marked ident IN
## LR(1) items:
forall_prefix -> for_all_marked ident IN . primitive_expression WE_HAVE [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 216
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 216:
## Known stack suffix:
## for_all_marked ident IN primitive_expression
## LR(1) items:
forall_prefix -> for_all_marked ident IN primitive_expression . WE_HAVE [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On WE_HAVE shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## for_all_marked ident IN primitive_expression WE_HAVE
## LR(1) items:
forall_prefix -> for_all_marked ident IN primitive_expression WE_HAVE . [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production forall_prefix -> for_all_marked ident IN primitive_expression WE_HAVE

State 218:
## Known stack suffix:
## forall_prefix expression
## LR(1) items:
expression -> forall_prefix expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> forall_prefix expression

State 219:
## Known stack suffix:
## exists_prefix
## LR(1) items:
expression -> exists_prefix . expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 220
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 220:
## Known stack suffix:
## exists_prefix expression
## LR(1) items:
expression -> exists_prefix expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> exists_prefix expression

State 221:
## Known stack suffix:
## exists_marked
## LR(1) items:
exists_prefix -> exists_marked . ident IN primitive_expression SUCH THAT [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## exists_marked ident
## LR(1) items:
exists_prefix -> exists_marked ident . IN primitive_expression SUCH THAT [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On IN shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## exists_marked ident IN
## LR(1) items:
exists_prefix -> exists_marked ident IN . primitive_expression SUCH THAT [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On MONEY_AMOUNT shift to state 46
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 68
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 224
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On atomic_expression shift to state 127
## Reductions:

State 224:
## Known stack suffix:
## exists_marked ident IN primitive_expression
## LR(1) items:
exists_prefix -> exists_marked ident IN primitive_expression . SUCH THAT [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On SUCH shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## exists_marked ident IN primitive_expression SUCH
## LR(1) items:
exists_prefix -> exists_marked ident IN primitive_expression SUCH . THAT [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On THAT shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## exists_marked ident IN primitive_expression SUCH THAT
## LR(1) items:
exists_prefix -> exists_marked ident IN primitive_expression SUCH THAT . [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exists_prefix -> exists_marked ident IN primitive_expression SUCH THAT

State 227:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> IF expression . THEN expression ELSE base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On THEN shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
expression -> IF expression THEN . expression ELSE base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 229
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 229:
## Known stack suffix:
## IF expression THEN expression
## LR(1) items:
expression -> IF expression THEN expression . ELSE base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On ELSE shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## IF expression THEN expression ELSE
## LR(1) items:
expression -> IF expression THEN expression ELSE . base_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 231
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 231:
## Known stack suffix:
## IF expression THEN expression ELSE base_expression
## LR(1) items:
expression -> IF expression THEN expression ELSE base_expression . [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> IF expression THEN expression ELSE base_expression

State 232:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
atomic_expression -> LPAREN expression . RPAREN [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
-- On RPAREN shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
atomic_expression -> LPAREN expression RPAREN . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> LPAREN expression RPAREN

State 234:
## Known stack suffix:
## MAXIMUM typ_base INIT primitive_expression
## LR(1) items:
aggregate_func -> MAXIMUM typ_base INIT primitive_expression . [ FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate_func -> MAXIMUM typ_base INIT primitive_expression

State 235:
## Known stack suffix:
## separated_nonempty_list(SEMICOLON,expression)
## LR(1) items:
loption(separated_nonempty_list(SEMICOLON,expression)) -> separated_nonempty_list(SEMICOLON,expression) . [ RSQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(SEMICOLON,expression)) -> separated_nonempty_list(SEMICOLON,expression)

State 236:
## Known stack suffix:
## LSQUARE loption(separated_nonempty_list(SEMICOLON,expression))
## LR(1) items:
primitive_expression -> LSQUARE loption(separated_nonempty_list(SEMICOLON,expression)) . RSQUARE [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
-- On RSQUARE shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## LSQUARE loption(separated_nonempty_list(SEMICOLON,expression)) RSQUARE
## LR(1) items:
primitive_expression -> LSQUARE loption(separated_nonempty_list(SEMICOLON,expression)) RSQUARE . [ WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_expression -> LSQUARE loption(separated_nonempty_list(SEMICOLON,expression)) RSQUARE

State 238:
## Known stack suffix:
## expression
## LR(1) items:
separated_nonempty_list(SEMICOLON,expression) -> expression . [ RSQUARE ]
separated_nonempty_list(SEMICOLON,expression) -> expression . SEMICOLON separated_nonempty_list(SEMICOLON,expression) [ RSQUARE ]
## Transitions:
-- On SEMICOLON shift to state 239
## Reductions:
-- On RSQUARE
--   reduce production separated_nonempty_list(SEMICOLON,expression) -> expression

State 239:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
separated_nonempty_list(SEMICOLON,expression) -> expression SEMICOLON . separated_nonempty_list(SEMICOLON,expression) [ RSQUARE ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On separated_nonempty_list(SEMICOLON,expression) shift to state 240
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 238
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 240:
## Known stack suffix:
## expression SEMICOLON separated_nonempty_list(SEMICOLON,expression)
## LR(1) items:
separated_nonempty_list(SEMICOLON,expression) -> expression SEMICOLON separated_nonempty_list(SEMICOLON,expression) . [ RSQUARE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(SEMICOLON,expression) -> expression SEMICOLON separated_nonempty_list(SEMICOLON,expression)

State 241:
## Known stack suffix:
## MINIMUM typ_base INIT primitive_expression
## LR(1) items:
aggregate_func -> MINIMUM typ_base INIT primitive_expression . [ FOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production aggregate_func -> MINIMUM typ_base INIT primitive_expression

State 242:
## Known stack suffix:
## UNDER_CONDITION expression
## LR(1) items:
scope_use_condition -> UNDER_CONDITION expression . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scope_use_condition -> UNDER_CONDITION expression

State 243:
## Known stack suffix:
## scope_use_condition
## LR(1) items:
option(scope_use_condition) -> scope_use_condition . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(scope_use_condition) -> scope_use_condition

State 244:
## Known stack suffix:
## SCOPE constructor option(scope_use_condition)
## LR(1) items:
code_item -> SCOPE constructor option(scope_use_condition) . COLON nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On COLON shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## SCOPE constructor option(scope_use_condition) COLON
## LR(1) items:
code_item -> SCOPE constructor option(scope_use_condition) COLON . nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On LABEL shift to state 246
-- On ASSERTION shift to state 248
-- On scope_item shift to state 274
-- On rule shift to state 275
-- On option(label) shift to state 276
-- On nonempty_list(scope_item) shift to state 303
-- On label shift to state 301
-- On definition shift to state 302
## Reductions:
-- On RULE EXCEPTION DEFINITION
--   reduce production option(label) ->

State 246:
## Known stack suffix:
## LABEL
## LR(1) items:
label -> LABEL . ident [ RULE EXCEPTION DEFINITION ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## LABEL ident
## LR(1) items:
label -> LABEL ident . [ RULE EXCEPTION DEFINITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> LABEL ident

State 248:
## Known stack suffix:
## ASSERTION
## LR(1) items:
scope_item -> ASSERTION . assertion [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On VARIES shift to state 249
-- On UNDER_CONDITION shift to state 261
-- On FIXED shift to state 263
-- On option(condition_consequence) shift to state 267
-- On condition_consequence shift to state 270
-- On condition shift to state 271
-- On assertion shift to state 273
## Reductions:
-- On VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
--   reduce production option(condition_consequence) ->

State 249:
## Known stack suffix:
## VARIES
## LR(1) items:
assertion -> VARIES . qident WITH_V base_expression option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(DOT,ident) shift to state 250
-- On qident shift to state 251
-- On ident shift to state 258
## Reductions:

State 250:
## Known stack suffix:
## separated_nonempty_list(DOT,ident)
## LR(1) items:
qident -> separated_nonempty_list(DOT,ident) . [ WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qident -> separated_nonempty_list(DOT,ident)

State 251:
## Known stack suffix:
## VARIES qident
## LR(1) items:
assertion -> VARIES qident . WITH_V base_expression option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On WITH_V shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## VARIES qident WITH_V
## LR(1) items:
assertion -> VARIES qident WITH_V . base_expression option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On MONEY_AMOUNT shift to state 46
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On literal shift to state 109
-- On ident shift to state 110
-- On constructor shift to state 111
-- On base_expression shift to state 253
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 253:
## Known stack suffix:
## VARIES qident WITH_V base_expression
## LR(1) items:
assertion -> VARIES qident WITH_V base_expression . option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On INCREASING shift to state 254
-- On DECREASING shift to state 255
-- On variation_type shift to state 256
-- On option(variation_type) shift to state 257
## Reductions:
-- On SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
--   reduce production option(variation_type) ->

State 254:
## Known stack suffix:
## INCREASING
## LR(1) items:
variation_type -> INCREASING . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variation_type -> INCREASING

State 255:
## Known stack suffix:
## DECREASING
## LR(1) items:
variation_type -> DECREASING . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variation_type -> DECREASING

State 256:
## Known stack suffix:
## variation_type
## LR(1) items:
option(variation_type) -> variation_type . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(variation_type) -> variation_type

State 257:
## Known stack suffix:
## VARIES qident WITH_V base_expression option(variation_type)
## LR(1) items:
assertion -> VARIES qident WITH_V base_expression option(variation_type) . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> VARIES qident WITH_V base_expression option(variation_type)

State 258:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(DOT,ident) -> ident . [ WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY ]
separated_nonempty_list(DOT,ident) -> ident . DOT separated_nonempty_list(DOT,ident) [ WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY ]
## Transitions:
-- On DOT shift to state 259
## Reductions:
-- On WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY
--   reduce production separated_nonempty_list(DOT,ident) -> ident

State 259:
## Known stack suffix:
## ident DOT
## LR(1) items:
separated_nonempty_list(DOT,ident) -> ident DOT . separated_nonempty_list(DOT,ident) [ WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(DOT,ident) shift to state 260
-- On ident shift to state 258
## Reductions:

State 260:
## Known stack suffix:
## ident DOT separated_nonempty_list(DOT,ident)
## LR(1) items:
separated_nonempty_list(DOT,ident) -> ident DOT separated_nonempty_list(DOT,ident) . [ WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(DOT,ident) -> ident DOT separated_nonempty_list(DOT,ident)

State 261:
## Known stack suffix:
## UNDER_CONDITION
## LR(1) items:
condition -> UNDER_CONDITION . expression [ CONSEQUENCE ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 262
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 262:
## Known stack suffix:
## UNDER_CONDITION expression
## LR(1) items:
condition -> UNDER_CONDITION expression . [ CONSEQUENCE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition -> UNDER_CONDITION expression

State 263:
## Known stack suffix:
## FIXED
## LR(1) items:
assertion -> FIXED . qident BY ident [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(DOT,ident) shift to state 250
-- On qident shift to state 264
-- On ident shift to state 258
## Reductions:

State 264:
## Known stack suffix:
## FIXED qident
## LR(1) items:
assertion -> FIXED qident . BY ident [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On BY shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## FIXED qident BY
## LR(1) items:
assertion -> FIXED qident BY . ident [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## FIXED qident BY ident
## LR(1) items:
assertion -> FIXED qident BY ident . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> FIXED qident BY ident

State 267:
## Known stack suffix:
## option(condition_consequence)
## LR(1) items:
assertion -> option(condition_consequence) . assertion_base [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 268
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On assertion_base shift to state 269
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 268:
## Known stack suffix:
## expression
## LR(1) items:
assertion_base -> expression . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion_base -> expression

State 269:
## Known stack suffix:
## option(condition_consequence) assertion_base
## LR(1) items:
assertion -> option(condition_consequence) assertion_base . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> option(condition_consequence) assertion_base

State 270:
## Known stack suffix:
## condition_consequence
## LR(1) items:
option(condition_consequence) -> condition_consequence . [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FILLED FALSE EXISTS DEFINED_AS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(condition_consequence) -> condition_consequence

State 271:
## Known stack suffix:
## condition
## LR(1) items:
condition_consequence -> condition . CONSEQUENCE [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FILLED FALSE EXISTS DEFINED_AS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
-- On CONSEQUENCE shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## condition CONSEQUENCE
## LR(1) items:
condition_consequence -> condition CONSEQUENCE . [ VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FILLED FALSE EXISTS DEFINED_AS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition_consequence -> condition CONSEQUENCE

State 273:
## Known stack suffix:
## ASSERTION assertion
## LR(1) items:
scope_item -> ASSERTION assertion . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scope_item -> ASSERTION assertion

State 274:
## Known stack suffix:
## scope_item
## LR(1) items:
nonempty_list(scope_item) -> scope_item . [ SCOPE END_CODE DECLARATION ]
nonempty_list(scope_item) -> scope_item . nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On LABEL shift to state 246
-- On ASSERTION shift to state 248
-- On scope_item shift to state 274
-- On rule shift to state 275
-- On option(label) shift to state 276
-- On nonempty_list(scope_item) shift to state 300
-- On label shift to state 301
-- On definition shift to state 302
## Reductions:
-- On SCOPE END_CODE DECLARATION
--   reduce production nonempty_list(scope_item) -> scope_item
-- On RULE EXCEPTION DEFINITION
--   reduce production option(label) ->

State 275:
## Known stack suffix:
## rule
## LR(1) items:
scope_item -> rule . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scope_item -> rule

State 276:
## Known stack suffix:
## option(label)
## LR(1) items:
definition -> option(label) . option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
rule -> option(label) . option(exception_to) RULE rule_expr option(condition_consequence) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On EXCEPTION shift to state 277
-- On option(exception_to) shift to state 280
-- On exception_to shift to state 299
## Reductions:
-- On RULE DEFINITION
--   reduce production option(exception_to) ->

State 277:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
exception_to -> EXCEPTION . option(ident) [ RULE DEFINITION ]
## Transitions:
-- On IDENT shift to state 62
-- On option(ident) shift to state 278
-- On ident shift to state 279
## Reductions:
-- On RULE DEFINITION
--   reduce production option(ident) ->

State 278:
## Known stack suffix:
## EXCEPTION option(ident)
## LR(1) items:
exception_to -> EXCEPTION option(ident) . [ RULE DEFINITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exception_to -> EXCEPTION option(ident)

State 279:
## Known stack suffix:
## ident
## LR(1) items:
option(ident) -> ident . [ RULE DEFINITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(ident) -> ident

State 280:
## Known stack suffix:
## option(label) option(exception_to)
## LR(1) items:
definition -> option(label) option(exception_to) . DEFINITION qident option(definition_parameters) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
rule -> option(label) option(exception_to) . RULE rule_expr option(condition_consequence) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On RULE shift to state 281
-- On DEFINITION shift to state 293
## Reductions:

State 281:
## Known stack suffix:
## option(label) option(exception_to) RULE
## LR(1) items:
rule -> option(label) option(exception_to) RULE . rule_expr option(condition_consequence) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(DOT,ident) shift to state 250
-- On rule_expr shift to state 282
-- On qident shift to state 288
-- On ident shift to state 258
## Reductions:

State 282:
## Known stack suffix:
## option(label) option(exception_to) RULE rule_expr
## LR(1) items:
rule -> option(label) option(exception_to) RULE rule_expr . option(condition_consequence) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On UNDER_CONDITION shift to state 261
-- On option(condition_consequence) shift to state 283
-- On condition_consequence shift to state 270
-- On condition shift to state 271
## Reductions:
-- On NOT FILLED
--   reduce production option(condition_consequence) ->

State 283:
## Known stack suffix:
## option(label) option(exception_to) RULE rule_expr option(condition_consequence)
## LR(1) items:
rule -> option(label) option(exception_to) RULE rule_expr option(condition_consequence) . rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On NOT shift to state 284
-- On rule_consequence shift to state 285
-- On option(NOT) shift to state 286
## Reductions:
-- On FILLED
--   reduce production option(NOT) ->

State 284:
## Known stack suffix:
## NOT
## LR(1) items:
option(NOT) -> NOT . [ FILLED ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(NOT) -> NOT

State 285:
## Known stack suffix:
## option(label) option(exception_to) RULE rule_expr option(condition_consequence) rule_consequence
## LR(1) items:
rule -> option(label) option(exception_to) RULE rule_expr option(condition_consequence) rule_consequence . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> option(label) option(exception_to) RULE rule_expr option(condition_consequence) rule_consequence

State 286:
## Known stack suffix:
## option(NOT)
## LR(1) items:
rule_consequence -> option(NOT) . FILLED [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On FILLED shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## option(NOT) FILLED
## LR(1) items:
rule_consequence -> option(NOT) FILLED . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_consequence -> option(NOT) FILLED

State 288:
## Known stack suffix:
## qident
## LR(1) items:
rule_expr -> qident . option(definition_parameters) [ UNDER_CONDITION NOT FILLED ]
## Transitions:
-- On OF shift to state 289
-- On option(definition_parameters) shift to state 291
-- On definition_parameters shift to state 292
## Reductions:
-- On UNDER_CONDITION NOT FILLED
--   reduce production option(definition_parameters) ->

State 289:
## Known stack suffix:
## OF
## LR(1) items:
definition_parameters -> OF . ident [ UNDER_CONDITION NOT FILLED DEFINED_AS ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## OF ident
## LR(1) items:
definition_parameters -> OF ident . [ UNDER_CONDITION NOT FILLED DEFINED_AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production definition_parameters -> OF ident

State 291:
## Known stack suffix:
## qident option(definition_parameters)
## LR(1) items:
rule_expr -> qident option(definition_parameters) . [ UNDER_CONDITION NOT FILLED ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_expr -> qident option(definition_parameters)

State 292:
## Known stack suffix:
## definition_parameters
## LR(1) items:
option(definition_parameters) -> definition_parameters . [ UNDER_CONDITION NOT FILLED DEFINED_AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(definition_parameters) -> definition_parameters

State 293:
## Known stack suffix:
## option(label) option(exception_to) DEFINITION
## LR(1) items:
definition -> option(label) option(exception_to) DEFINITION . qident option(definition_parameters) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On IDENT shift to state 62
-- On separated_nonempty_list(DOT,ident) shift to state 250
-- On qident shift to state 294
-- On ident shift to state 258
## Reductions:

State 294:
## Known stack suffix:
## option(label) option(exception_to) DEFINITION qident
## LR(1) items:
definition -> option(label) option(exception_to) DEFINITION qident . option(definition_parameters) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On OF shift to state 289
-- On option(definition_parameters) shift to state 295
-- On definition_parameters shift to state 292
## Reductions:
-- On UNDER_CONDITION DEFINED_AS
--   reduce production option(definition_parameters) ->

State 295:
## Known stack suffix:
## option(label) option(exception_to) DEFINITION qident option(definition_parameters)
## LR(1) items:
definition -> option(label) option(exception_to) DEFINITION qident option(definition_parameters) . option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On UNDER_CONDITION shift to state 261
-- On option(condition_consequence) shift to state 296
-- On condition_consequence shift to state 270
-- On condition shift to state 271
## Reductions:
-- On DEFINED_AS
--   reduce production option(condition_consequence) ->

State 296:
## Known stack suffix:
## option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence)
## LR(1) items:
definition -> option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence) . DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On DEFINED_AS shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence) DEFINED_AS
## LR(1) items:
definition -> option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence) DEFINED_AS . expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
-- On VERTICAL shift to state 26
-- On TRUE shift to state 34
-- On SUM shift to state 35
-- On NOT shift to state 45
-- On MONEY_AMOUNT shift to state 46
-- On MINUSMONEY shift to state 47
-- On MINUSDURATION shift to state 48
-- On MINUSDEC shift to state 49
-- On MINUS shift to state 50
-- On MINIMUM shift to state 51
-- On MAXIMUM shift to state 55
-- On MATCH shift to state 59
-- On MAP shift to state 95
-- On LSQUARE shift to state 54
-- On LPAREN shift to state 58
-- On INT_TO_DEC shift to state 60
-- On INT_LITERAL shift to state 61
-- On IF shift to state 207
-- On IDENT shift to state 62
-- On GET_YEAR shift to state 63
-- On GET_MONTH shift to state 64
-- On GET_DAY shift to state 65
-- On FOR shift to state 208
-- On FILTER shift to state 96
-- On FALSE shift to state 66
-- On EXISTS shift to state 210
-- On DECIMAL_LITERAL shift to state 67
-- On CONTENT shift to state 97
-- On CONSTRUCTOR shift to state 23
-- On CARDINAL shift to state 119
-- On sum_unop shift to state 120
-- On sum_expression shift to state 160
-- On struct_or_enum_inject shift to state 69
-- On small_expression shift to state 70
-- On primitive_expression shift to state 122
-- On num_literal shift to state 102
-- On mult_expression shift to state 138
-- On logical_unop shift to state 185
-- On logical_expression shift to state 211
-- On literal shift to state 109
-- On ident shift to state 110
-- On forall_prefix shift to state 212
-- On for_all_marked shift to state 213
-- On expression shift to state 298
-- On exists_prefix shift to state 219
-- On exists_marked shift to state 221
-- On constructor shift to state 111
-- On compare_expression shift to state 188
-- On base_expression shift to state 151
-- On atomic_expression shift to state 127
-- On aggregate_func shift to state 128
-- On aggregate shift to state 135
## Reductions:

State 298:
## Known stack suffix:
## option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence) DEFINED_AS expression
## LR(1) items:
definition -> option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence) DEFINED_AS expression . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production definition -> option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(condition_consequence) DEFINED_AS expression

State 299:
## Known stack suffix:
## exception_to
## LR(1) items:
option(exception_to) -> exception_to . [ RULE DEFINITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(exception_to) -> exception_to

State 300:
## Known stack suffix:
## scope_item nonempty_list(scope_item)
## LR(1) items:
nonempty_list(scope_item) -> scope_item nonempty_list(scope_item) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(scope_item) -> scope_item nonempty_list(scope_item)

State 301:
## Known stack suffix:
## label
## LR(1) items:
option(label) -> label . [ RULE EXCEPTION DEFINITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(label) -> label

State 302:
## Known stack suffix:
## definition
## LR(1) items:
scope_item -> definition . [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scope_item -> definition

State 303:
## Known stack suffix:
## SCOPE constructor option(scope_use_condition) COLON nonempty_list(scope_item)
## LR(1) items:
code_item -> SCOPE constructor option(scope_use_condition) COLON nonempty_list(scope_item) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code_item -> SCOPE constructor option(scope_use_condition) COLON nonempty_list(scope_item)

State 304:
## Known stack suffix:
## DECLARATION
## LR(1) items:
code_item -> DECLARATION . STRUCT constructor COLON list(struct_scope) [ SCOPE END_CODE DECLARATION ]
code_item -> DECLARATION . SCOPE constructor COLON nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
code_item -> DECLARATION . ENUM constructor COLON nonempty_list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On STRUCT shift to state 305
-- On SCOPE shift to state 327
-- On ENUM shift to state 342
## Reductions:

State 305:
## Known stack suffix:
## DECLARATION STRUCT
## LR(1) items:
code_item -> DECLARATION STRUCT . constructor COLON list(struct_scope) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## DECLARATION STRUCT constructor
## LR(1) items:
code_item -> DECLARATION STRUCT constructor . COLON list(struct_scope) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On COLON shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## DECLARATION STRUCT constructor COLON
## LR(1) items:
code_item -> DECLARATION STRUCT constructor COLON . list(struct_scope) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On DATA shift to state 308
-- On CONDITION shift to state 316
-- On struct_scope_base shift to state 317
-- On struct_scope shift to state 322
-- On list(struct_scope) shift to state 326
-- On condition_pos shift to state 324
## Reductions:
-- On SCOPE END_CODE DECLARATION
--   reduce production list(struct_scope) ->

State 308:
## Known stack suffix:
## DATA
## LR(1) items:
struct_scope_base -> DATA . ident CONTENT typ [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## DATA ident
## LR(1) items:
struct_scope_base -> DATA ident . CONTENT typ [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
## Transitions:
-- On CONTENT shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## DATA ident CONTENT
## LR(1) items:
struct_scope_base -> DATA ident CONTENT . typ [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On COLLECTION shift to state 311
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 312
-- On typ shift to state 313
-- On constructor shift to state 44
-- On collection_marked shift to state 314
## Reductions:

State 311:
## Known stack suffix:
## COLLECTION
## LR(1) items:
collection_marked -> COLLECTION . [ TEXT MONEY INTEGER DURATION DECIMAL DATE CONSTRUCTOR COLLECTION BOOLEAN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production collection_marked -> COLLECTION

State 312:
## Known stack suffix:
## typ_base
## LR(1) items:
typ -> typ_base . [ SCOPE END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> typ_base

State 313:
## Known stack suffix:
## DATA ident CONTENT typ
## LR(1) items:
struct_scope_base -> DATA ident CONTENT typ . [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_scope_base -> DATA ident CONTENT typ

State 314:
## Known stack suffix:
## collection_marked
## LR(1) items:
typ -> collection_marked . typ [ SCOPE END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On COLLECTION shift to state 311
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 312
-- On typ shift to state 315
-- On constructor shift to state 44
-- On collection_marked shift to state 314
## Reductions:

State 315:
## Known stack suffix:
## collection_marked typ
## LR(1) items:
typ -> collection_marked typ . [ SCOPE END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> collection_marked typ

State 316:
## Known stack suffix:
## CONDITION
## LR(1) items:
condition_pos -> CONDITION . [ IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition_pos -> CONDITION

State 317:
## Known stack suffix:
## struct_scope_base
## LR(1) items:
struct_scope -> struct_scope_base . option(struct_scope_func) [ SCOPE END_CODE DECLARATION DATA CONDITION ]
## Transitions:
-- On DEPENDS shift to state 318
-- On struct_scope_func shift to state 320
-- On option(struct_scope_func) shift to state 321
## Reductions:
-- On SCOPE END_CODE DECLARATION DATA CONDITION
--   reduce production option(struct_scope_func) ->

State 318:
## Known stack suffix:
## DEPENDS
## LR(1) items:
struct_scope_func -> DEPENDS . typ [ SCOPE END_CODE DECLARATION DATA CONTEXT CONDITION ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On COLLECTION shift to state 311
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 312
-- On typ shift to state 319
-- On constructor shift to state 44
-- On collection_marked shift to state 314
## Reductions:

State 319:
## Known stack suffix:
## DEPENDS typ
## LR(1) items:
struct_scope_func -> DEPENDS typ . [ SCOPE END_CODE DECLARATION DATA CONTEXT CONDITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_scope_func -> DEPENDS typ

State 320:
## Known stack suffix:
## struct_scope_func
## LR(1) items:
option(struct_scope_func) -> struct_scope_func . [ SCOPE END_CODE DECLARATION DATA CONTEXT CONDITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(struct_scope_func) -> struct_scope_func

State 321:
## Known stack suffix:
## struct_scope_base option(struct_scope_func)
## LR(1) items:
struct_scope -> struct_scope_base option(struct_scope_func) . [ SCOPE END_CODE DECLARATION DATA CONDITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_scope -> struct_scope_base option(struct_scope_func)

State 322:
## Known stack suffix:
## struct_scope
## LR(1) items:
list(struct_scope) -> struct_scope . list(struct_scope) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On DATA shift to state 308
-- On CONDITION shift to state 316
-- On struct_scope_base shift to state 317
-- On struct_scope shift to state 322
-- On list(struct_scope) shift to state 323
-- On condition_pos shift to state 324
## Reductions:
-- On SCOPE END_CODE DECLARATION
--   reduce production list(struct_scope) ->

State 323:
## Known stack suffix:
## struct_scope list(struct_scope)
## LR(1) items:
list(struct_scope) -> struct_scope list(struct_scope) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(struct_scope) -> struct_scope list(struct_scope)

State 324:
## Known stack suffix:
## condition_pos
## LR(1) items:
struct_scope_base -> condition_pos . ident [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## condition_pos ident
## LR(1) items:
struct_scope_base -> condition_pos ident . [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_scope_base -> condition_pos ident

State 326:
## Known stack suffix:
## DECLARATION STRUCT constructor COLON list(struct_scope)
## LR(1) items:
code_item -> DECLARATION STRUCT constructor COLON list(struct_scope) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code_item -> DECLARATION STRUCT constructor COLON list(struct_scope)

State 327:
## Known stack suffix:
## DECLARATION SCOPE
## LR(1) items:
code_item -> DECLARATION SCOPE . constructor COLON nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## DECLARATION SCOPE constructor
## LR(1) items:
code_item -> DECLARATION SCOPE constructor . COLON nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On COLON shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## DECLARATION SCOPE constructor COLON
## LR(1) items:
code_item -> DECLARATION SCOPE constructor COLON . nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On CONTEXT shift to state 330
-- On scope_decl_item shift to state 339
-- On nonempty_list(scope_decl_item) shift to state 341
## Reductions:

State 330:
## Known stack suffix:
## CONTEXT
## LR(1) items:
scope_decl_item -> CONTEXT . ident CONTENT typ option(struct_scope_func) [ SCOPE END_CODE DECLARATION CONTEXT ]
scope_decl_item -> CONTEXT . ident SCOPE constructor [ SCOPE END_CODE DECLARATION CONTEXT ]
scope_decl_item -> CONTEXT . ident CONDITION option(struct_scope_func) [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
-- On IDENT shift to state 62
-- On ident shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## CONTEXT ident
## LR(1) items:
scope_decl_item -> CONTEXT ident . CONTENT typ option(struct_scope_func) [ SCOPE END_CODE DECLARATION CONTEXT ]
scope_decl_item -> CONTEXT ident . SCOPE constructor [ SCOPE END_CODE DECLARATION CONTEXT ]
scope_decl_item -> CONTEXT ident . CONDITION option(struct_scope_func) [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
-- On SCOPE shift to state 332
-- On CONTENT shift to state 334
-- On CONDITION shift to state 337
## Reductions:

State 332:
## Known stack suffix:
## CONTEXT ident SCOPE
## LR(1) items:
scope_decl_item -> CONTEXT ident SCOPE . constructor [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## CONTEXT ident SCOPE constructor
## LR(1) items:
scope_decl_item -> CONTEXT ident SCOPE constructor . [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scope_decl_item -> CONTEXT ident SCOPE constructor

State 334:
## Known stack suffix:
## CONTEXT ident CONTENT
## LR(1) items:
scope_decl_item -> CONTEXT ident CONTENT . typ option(struct_scope_func) [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On COLLECTION shift to state 311
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 312
-- On typ shift to state 335
-- On constructor shift to state 44
-- On collection_marked shift to state 314
## Reductions:

State 335:
## Known stack suffix:
## CONTEXT ident CONTENT typ
## LR(1) items:
scope_decl_item -> CONTEXT ident CONTENT typ . option(struct_scope_func) [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
-- On DEPENDS shift to state 318
-- On struct_scope_func shift to state 320
-- On option(struct_scope_func) shift to state 336
## Reductions:
-- On SCOPE END_CODE DECLARATION CONTEXT
--   reduce production option(struct_scope_func) ->

State 336:
## Known stack suffix:
## CONTEXT ident CONTENT typ option(struct_scope_func)
## LR(1) items:
scope_decl_item -> CONTEXT ident CONTENT typ option(struct_scope_func) . [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scope_decl_item -> CONTEXT ident CONTENT typ option(struct_scope_func)

State 337:
## Known stack suffix:
## CONTEXT ident CONDITION
## LR(1) items:
scope_decl_item -> CONTEXT ident CONDITION . option(struct_scope_func) [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
-- On DEPENDS shift to state 318
-- On struct_scope_func shift to state 320
-- On option(struct_scope_func) shift to state 338
## Reductions:
-- On SCOPE END_CODE DECLARATION CONTEXT
--   reduce production option(struct_scope_func) ->

State 338:
## Known stack suffix:
## CONTEXT ident CONDITION option(struct_scope_func)
## LR(1) items:
scope_decl_item -> CONTEXT ident CONDITION option(struct_scope_func) . [ SCOPE END_CODE DECLARATION CONTEXT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scope_decl_item -> CONTEXT ident CONDITION option(struct_scope_func)

State 339:
## Known stack suffix:
## scope_decl_item
## LR(1) items:
nonempty_list(scope_decl_item) -> scope_decl_item . [ SCOPE END_CODE DECLARATION ]
nonempty_list(scope_decl_item) -> scope_decl_item . nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On CONTEXT shift to state 330
-- On scope_decl_item shift to state 339
-- On nonempty_list(scope_decl_item) shift to state 340
## Reductions:
-- On SCOPE END_CODE DECLARATION
--   reduce production nonempty_list(scope_decl_item) -> scope_decl_item

State 340:
## Known stack suffix:
## scope_decl_item nonempty_list(scope_decl_item)
## LR(1) items:
nonempty_list(scope_decl_item) -> scope_decl_item nonempty_list(scope_decl_item) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(scope_decl_item) -> scope_decl_item nonempty_list(scope_decl_item)

State 341:
## Known stack suffix:
## DECLARATION SCOPE constructor COLON nonempty_list(scope_decl_item)
## LR(1) items:
code_item -> DECLARATION SCOPE constructor COLON nonempty_list(scope_decl_item) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code_item -> DECLARATION SCOPE constructor COLON nonempty_list(scope_decl_item)

State 342:
## Known stack suffix:
## DECLARATION ENUM
## LR(1) items:
code_item -> DECLARATION ENUM . constructor COLON nonempty_list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## DECLARATION ENUM constructor
## LR(1) items:
code_item -> DECLARATION ENUM constructor . COLON nonempty_list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On COLON shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## DECLARATION ENUM constructor COLON
## LR(1) items:
code_item -> DECLARATION ENUM constructor COLON . nonempty_list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On ALT shift to state 345
-- On nonempty_list(enum_decl_line) shift to state 351
-- On enum_decl_line shift to state 352
## Reductions:

State 345:
## Known stack suffix:
## ALT
## LR(1) items:
enum_decl_line -> ALT . constructor option(enum_decl_line_payload) [ SCOPE END_CODE DECLARATION ALT ]
## Transitions:
-- On CONSTRUCTOR shift to state 23
-- On constructor shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## ALT constructor
## LR(1) items:
enum_decl_line -> ALT constructor . option(enum_decl_line_payload) [ SCOPE END_CODE DECLARATION ALT ]
## Transitions:
-- On CONTENT shift to state 347
-- On option(enum_decl_line_payload) shift to state 349
-- On enum_decl_line_payload shift to state 350
## Reductions:
-- On SCOPE END_CODE DECLARATION ALT
--   reduce production option(enum_decl_line_payload) ->

State 347:
## Known stack suffix:
## CONTENT
## LR(1) items:
enum_decl_line_payload -> CONTENT . typ [ SCOPE END_CODE DECLARATION ALT ]
## Transitions:
-- On TEXT shift to state 36
-- On MONEY shift to state 37
-- On INTEGER shift to state 38
-- On DURATION shift to state 39
-- On DECIMAL shift to state 40
-- On DATE shift to state 41
-- On CONSTRUCTOR shift to state 23
-- On COLLECTION shift to state 311
-- On BOOLEAN shift to state 42
-- On typ_base shift to state 312
-- On typ shift to state 348
-- On constructor shift to state 44
-- On collection_marked shift to state 314
## Reductions:

State 348:
## Known stack suffix:
## CONTENT typ
## LR(1) items:
enum_decl_line_payload -> CONTENT typ . [ SCOPE END_CODE DECLARATION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_decl_line_payload -> CONTENT typ

State 349:
## Known stack suffix:
## ALT constructor option(enum_decl_line_payload)
## LR(1) items:
enum_decl_line -> ALT constructor option(enum_decl_line_payload) . [ SCOPE END_CODE DECLARATION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_decl_line -> ALT constructor option(enum_decl_line_payload)

State 350:
## Known stack suffix:
## enum_decl_line_payload
## LR(1) items:
option(enum_decl_line_payload) -> enum_decl_line_payload . [ SCOPE END_CODE DECLARATION ALT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(enum_decl_line_payload) -> enum_decl_line_payload

State 351:
## Known stack suffix:
## DECLARATION ENUM constructor COLON nonempty_list(enum_decl_line)
## LR(1) items:
code_item -> DECLARATION ENUM constructor COLON nonempty_list(enum_decl_line) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code_item -> DECLARATION ENUM constructor COLON nonempty_list(enum_decl_line)

State 352:
## Known stack suffix:
## enum_decl_line
## LR(1) items:
nonempty_list(enum_decl_line) -> enum_decl_line . [ SCOPE END_CODE DECLARATION ]
nonempty_list(enum_decl_line) -> enum_decl_line . nonempty_list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
## Transitions:
-- On ALT shift to state 345
-- On nonempty_list(enum_decl_line) shift to state 353
-- On enum_decl_line shift to state 352
## Reductions:
-- On SCOPE END_CODE DECLARATION
--   reduce production nonempty_list(enum_decl_line) -> enum_decl_line

State 353:
## Known stack suffix:
## enum_decl_line nonempty_list(enum_decl_line)
## LR(1) items:
nonempty_list(enum_decl_line) -> enum_decl_line nonempty_list(enum_decl_line) . [ SCOPE END_CODE DECLARATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(enum_decl_line) -> enum_decl_line nonempty_list(enum_decl_line)

State 354:
## Known stack suffix:
## list(code_item)
## LR(1) items:
code -> list(code_item) . [ END_CODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> list(code_item)

State 355:
## Known stack suffix:
## code_item
## LR(1) items:
list(code_item) -> code_item . list(code_item) [ END_CODE ]
## Transitions:
-- On SCOPE shift to state 22
-- On DECLARATION shift to state 304
-- On list(code_item) shift to state 356
-- On code_item shift to state 355
## Reductions:
-- On END_CODE
--   reduce production list(code_item) ->

State 356:
## Known stack suffix:
## code_item list(code_item)
## LR(1) items:
list(code_item) -> code_item list(code_item) . [ END_CODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(code_item) -> code_item list(code_item)

State 357:
## Known stack suffix:
## BEGIN_CODE option(law_text) code
## LR(1) items:
metadata_block -> BEGIN_CODE option(law_text) code . END_CODE option(law_text) END_METADATA [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On END_CODE shift to state 358
## Reductions:

State 358:
## Known stack suffix:
## BEGIN_CODE option(law_text) code END_CODE
## LR(1) items:
metadata_block -> BEGIN_CODE option(law_text) code END_CODE . option(law_text) END_METADATA [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On option(law_text) shift to state 359
-- On law_text shift to state 10
## Reductions:
-- On END_METADATA
--   reduce production option(law_text) ->

State 359:
## Known stack suffix:
## BEGIN_CODE option(law_text) code END_CODE option(law_text)
## LR(1) items:
metadata_block -> BEGIN_CODE option(law_text) code END_CODE option(law_text) . END_METADATA [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On END_METADATA shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## BEGIN_CODE option(law_text) code END_CODE option(law_text) END_METADATA
## LR(1) items:
metadata_block -> BEGIN_CODE option(law_text) code END_CODE option(law_text) END_METADATA . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production metadata_block -> BEGIN_CODE option(law_text) code END_CODE option(law_text) END_METADATA

State 361:
## Known stack suffix:
## BEGIN_METADATA option(law_text) metadata_block
## LR(1) items:
source_file_item -> BEGIN_METADATA option(law_text) metadata_block . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_file_item -> BEGIN_METADATA option(law_text) metadata_block

State 362:
## Known stack suffix:
## source_file_item
## LR(1) items:
source_file_after_text -> source_file_item . list(law_intermediate_text) source_file_after_text [ # ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On list(law_intermediate_text) shift to state 363
-- On law_text shift to state 376
-- On law_intermediate_text shift to state 377
## Reductions:
-- On LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
--   reduce production list(law_intermediate_text) ->

State 363:
## Known stack suffix:
## source_file_item list(law_intermediate_text)
## LR(1) items:
source_file_after_text -> source_file_item list(law_intermediate_text) . source_file_after_text [ # ]
## Transitions:
-- On LAW_INCLUDE shift to state 14
-- On LAW_HEADING shift to state 15
-- On LAW_ARTICLE shift to state 16
-- On EOF shift to state 17
-- On BEGIN_METADATA shift to state 18
-- On source_file_item shift to state 362
-- On source_file_article shift to state 364
-- On source_file_after_text shift to state 375
-- On law_heading shift to state 366
-- On law_article shift to state 367
## Reductions:

State 364:
## Known stack suffix:
## source_file_article
## LR(1) items:
source_file_after_text -> source_file_article . source_file_after_text [ # ]
## Transitions:
-- On LAW_INCLUDE shift to state 14
-- On LAW_HEADING shift to state 15
-- On LAW_ARTICLE shift to state 16
-- On EOF shift to state 17
-- On BEGIN_METADATA shift to state 18
-- On source_file_item shift to state 362
-- On source_file_article shift to state 364
-- On source_file_after_text shift to state 365
-- On law_heading shift to state 366
-- On law_article shift to state 367
## Reductions:

State 365:
## Known stack suffix:
## source_file_article source_file_after_text
## LR(1) items:
source_file_after_text -> source_file_article source_file_after_text . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production source_file_after_text -> source_file_article source_file_after_text

State 366:
## Known stack suffix:
## law_heading
## LR(1) items:
source_file_item -> law_heading . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_file_item -> law_heading

State 367:
## Known stack suffix:
## law_article
## LR(1) items:
source_file_article -> law_article . law_articles_items [ LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On BEGIN_CODE shift to state 368
-- On law_text shift to state 371
-- On law_articles_items shift to state 372
-- On law_article_item shift to state 373
## Reductions:
-- On LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
--   reduce production law_articles_items ->

State 368:
## Known stack suffix:
## BEGIN_CODE
## LR(1) items:
law_article_item -> BEGIN_CODE . code END_CODE [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
## Transitions:
-- On SCOPE shift to state 22
-- On DECLARATION shift to state 304
-- On list(code_item) shift to state 354
-- On code_item shift to state 355
-- On code shift to state 369
## Reductions:
-- On END_CODE
--   reduce production list(code_item) ->

State 369:
## Known stack suffix:
## BEGIN_CODE code
## LR(1) items:
law_article_item -> BEGIN_CODE code . END_CODE [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
## Transitions:
-- On END_CODE shift to state 370
## Reductions:

State 370:
## Known stack suffix:
## BEGIN_CODE code END_CODE
## LR(1) items:
law_article_item -> BEGIN_CODE code END_CODE . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production law_article_item -> BEGIN_CODE code END_CODE

State 371:
## Known stack suffix:
## law_text
## LR(1) items:
law_article_item -> law_text . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production law_article_item -> law_text

State 372:
## Known stack suffix:
## law_article law_articles_items
## LR(1) items:
source_file_article -> law_article law_articles_items . [ LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_file_article -> law_article law_articles_items

State 373:
## Known stack suffix:
## law_article_item
## LR(1) items:
law_articles_items -> law_article_item . law_articles_items [ LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On BEGIN_CODE shift to state 368
-- On law_text shift to state 371
-- On law_articles_items shift to state 374
-- On law_article_item shift to state 373
## Reductions:
-- On LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
--   reduce production law_articles_items ->

State 374:
## Known stack suffix:
## law_article_item law_articles_items
## LR(1) items:
law_articles_items -> law_article_item law_articles_items . [ LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production law_articles_items -> law_article_item law_articles_items

State 375:
## Known stack suffix:
## source_file_item list(law_intermediate_text) source_file_after_text
## LR(1) items:
source_file_after_text -> source_file_item list(law_intermediate_text) source_file_after_text . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production source_file_after_text -> source_file_item list(law_intermediate_text) source_file_after_text

State 376:
## Known stack suffix:
## law_text
## LR(1) items:
law_intermediate_text -> law_text . [ LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production law_intermediate_text -> law_text

State 377:
## Known stack suffix:
## law_intermediate_text
## LR(1) items:
list(law_intermediate_text) -> law_intermediate_text . list(law_intermediate_text) [ LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
-- On LAW_TEXT shift to state 2
-- On list(law_intermediate_text) shift to state 378
-- On law_text shift to state 376
-- On law_intermediate_text shift to state 377
## Reductions:
-- On LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
--   reduce production list(law_intermediate_text) ->

State 378:
## Known stack suffix:
## law_intermediate_text list(law_intermediate_text)
## LR(1) items:
list(law_intermediate_text) -> law_intermediate_text list(law_intermediate_text) . [ LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(law_intermediate_text) -> law_intermediate_text list(law_intermediate_text)

State 379:
## Known stack suffix:
## list(law_intermediate_text) source_file_after_text
## LR(1) items:
source_file -> list(law_intermediate_text) source_file_after_text . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production source_file -> list(law_intermediate_text) source_file_after_text

