Grammar has 102 nonterminal symbols, among which 1 start symbols.
Grammar has 130 terminal symbols.
Grammar has 237 productions.
nullable(variation_type) = false
nullable(unit_literal) = false
nullable(typ_base) = false
nullable(typ) = false
nullable(sum_unop) = false
nullable(sum_op) = false
nullable(sum_expression) = false
nullable(struct_scope_func) = false
nullable(struct_scope_base) = false
nullable(struct_scope) = false
nullable(struct_or_enum_inject) = false
nullable(struct_inject_content) = false
nullable(struct_content_field) = false
nullable(source_file_or_master) = false
nullable(source_file_item) = false
nullable(source_file_article) = false
nullable(source_file_after_text) = false
nullable(source_file) = false
nullable(small_expression) = false
nullable(separated_nonempty_list(SEMICOLON,expression)) = false
nullable(separated_nonempty_list(DOT,ident)) = false
nullable(separated_nonempty_list(ALT,struct_content_field)) = false
nullable(scope_use_condition) = false
nullable(scope_item) = false
nullable(scope_decl_item) = false
nullable(rule_expr) = false
nullable(rule_consequence) = false
nullable(rule) = false
nullable(qident) = false
nullable(primitive_expression) = false
nullable(optional_binding) = true
nullable(option(variation_type)) = true
nullable(option(unit_literal)) = true
nullable(option(terminated(constructor,DOT))) = true
nullable(option(struct_scope_func)) = true
nullable(option(scope_use_condition)) = true
nullable(option(preceded(DOT,constructor))) = true
nullable(option(law_text)) = true
nullable(option(label)) = true
nullable(option(ident)) = true
nullable(option(exception_to)) = true
nullable(option(enum_inject_content)) = true
nullable(option(enum_decl_line_payload)) = true
nullable(option(definition_parameters)) = true
nullable(option(condition_consequence)) = true
nullable(option(NOT)) = true
nullable(num_literal) = false
nullable(nonempty_list(scope_item)) = false
nullable(nonempty_list(scope_decl_item)) = false
nullable(nonempty_list(enum_decl_line)) = false
nullable(mult_op) = false
nullable(mult_expression) = false
nullable(metadata_block) = false
nullable(maybe_qualified_constructor) = false
nullable(match_arms) = true
nullable(match_arm) = false
nullable(master_file_includes) = false
nullable(master_file_include) = false
nullable(loption(separated_nonempty_list(SEMICOLON,expression))) = true
nullable(logical_unop) = false
nullable(logical_op) = false
nullable(logical_expression) = false
nullable(literal) = false
nullable(list(struct_scope)) = true
nullable(list(law_intermediate_text)) = true
nullable(list(code_item)) = true
nullable(law_text) = false
nullable(law_intermediate_text) = false
nullable(law_heading) = false
nullable(law_articles_items) = true
nullable(law_article_item) = false
nullable(law_article) = false
nullable(label) = false
nullable(ident) = false
nullable(forall_prefix) = false
nullable(for_all_marked) = false
nullable(expression) = false
nullable(exists_prefix) = false
nullable(exists_marked) = false
nullable(exception_to) = false
nullable(enum_inject_content) = false
nullable(enum_decl_line_payload) = false
nullable(enum_decl_line) = false
nullable(definition_parameters) = false
nullable(definition) = false
nullable(date_int) = false
nullable(constructor_binding) = false
nullable(constructor) = false
nullable(condition_pos) = false
nullable(condition_consequence) = false
nullable(condition) = false
nullable(compare_op) = false
nullable(compare_expression) = false
nullable(collection_marked) = false
nullable(code_item) = false
nullable(code) = true
nullable(base_expression) = false
nullable(atomic_expression) = false
nullable(assertion_base) = false
nullable(assertion) = false
nullable(aggregate_func) = false
nullable(aggregate) = false
first(variation_type) = INCREASING DECREASING
first(unit_literal) = YEAR PERCENT MONTH DAY
first(typ_base) = TEXT MONEY INTEGER DURATION DECIMAL DATE CONSTRUCTOR BOOLEAN
first(typ) = TEXT MONEY INTEGER DURATION DECIMAL DATE CONSTRUCTOR COLLECTION BOOLEAN
first(sum_unop) = MINUSMONEY MINUSDURATION MINUSDEC MINUS
first(sum_op) = PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS
first(sum_expression) = VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(struct_scope_func) = DEPENDS
first(struct_scope_base) = DATA CONDITION
first(struct_scope) = DATA CONDITION
first(struct_or_enum_inject) = CONSTRUCTOR
first(struct_inject_content) = LBRACKET
first(struct_content_field) = IDENT
first(source_file_or_master) = MASTER_FILE LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
first(source_file_item) = LAW_INCLUDE LAW_HEADING BEGIN_METADATA
first(source_file_article) = LAW_ARTICLE
first(source_file_after_text) = LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
first(source_file) = LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
first(small_expression) = VERTICAL TRUE MONEY_AMOUNT LPAREN INT_LITERAL IDENT FALSE DECIMAL_LITERAL
first(separated_nonempty_list(SEMICOLON,expression)) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(separated_nonempty_list(DOT,ident)) = IDENT
first(separated_nonempty_list(ALT,struct_content_field)) = IDENT
first(scope_use_condition) = UNDER_CONDITION
first(scope_item) = RULE LABEL EXCEPTION DEFINITION ASSERTION
first(scope_decl_item) = CONTEXT
first(rule_expr) = IDENT
first(rule_consequence) = NOT FILLED
first(rule) = RULE LABEL EXCEPTION
first(qident) = IDENT
first(primitive_expression) = VERTICAL TRUE MONEY_AMOUNT LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FALSE DECIMAL_LITERAL CONSTRUCTOR CARDINAL
first(optional_binding) = OF
first(option(variation_type)) = INCREASING DECREASING
first(option(unit_literal)) = YEAR PERCENT MONTH DAY
first(option(terminated(constructor,DOT))) = CONSTRUCTOR
first(option(struct_scope_func)) = DEPENDS
first(option(scope_use_condition)) = UNDER_CONDITION
first(option(preceded(DOT,constructor))) = DOT
first(option(law_text)) = LAW_TEXT
first(option(label)) = LABEL
first(option(ident)) = IDENT
first(option(exception_to)) = EXCEPTION
first(option(enum_inject_content)) = CONTENT
first(option(enum_decl_line_payload)) = CONTENT
first(option(definition_parameters)) = OF
first(option(condition_consequence)) = UNDER_CONDITION
first(option(NOT)) = NOT
first(num_literal) = INT_LITERAL DECIMAL_LITERAL
first(nonempty_list(scope_item)) = RULE LABEL EXCEPTION DEFINITION ASSERTION
first(nonempty_list(scope_decl_item)) = CONTEXT
first(nonempty_list(enum_decl_line)) = ALT
first(mult_op) = MULTMONEY MULTDEC MULT DIVMONEY DIVDEC DIV
first(mult_expression) = VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(metadata_block) = BEGIN_CODE
first(maybe_qualified_constructor) = CONSTRUCTOR
first(match_arms) = ALT
first(match_arm) = CONSTRUCTOR
first(master_file_includes) = LAW_INCLUDE EOF
first(master_file_include) = LAW_INCLUDE
first(loption(separated_nonempty_list(SEMICOLON,expression))) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(logical_unop) = NOT
first(logical_op) = OR AND
first(logical_expression) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(literal) = VERTICAL TRUE MONEY_AMOUNT INT_LITERAL FALSE DECIMAL_LITERAL
first(list(struct_scope)) = DATA CONDITION
first(list(law_intermediate_text)) = LAW_TEXT
first(list(code_item)) = SCOPE DECLARATION
first(law_text) = LAW_TEXT
first(law_intermediate_text) = LAW_TEXT
first(law_heading) = LAW_HEADING
first(law_articles_items) = LAW_TEXT BEGIN_CODE
first(law_article_item) = LAW_TEXT BEGIN_CODE
first(law_article) = LAW_ARTICLE
first(label) = LABEL
first(ident) = IDENT
first(forall_prefix) = FOR
first(for_all_marked) = FOR
first(expression) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(exists_prefix) = EXISTS
first(exists_marked) = EXISTS
first(exception_to) = EXCEPTION
first(enum_inject_content) = CONTENT
first(enum_decl_line_payload) = CONTENT
first(enum_decl_line) = ALT
first(definition_parameters) = OF
first(definition) = LABEL EXCEPTION DEFINITION
first(date_int) = INT_LITERAL
first(constructor_binding) = CONSTRUCTOR
first(constructor) = CONSTRUCTOR
first(condition_pos) = CONDITION
first(condition_consequence) = UNDER_CONDITION
first(condition) = UNDER_CONDITION
first(compare_op) = NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EQUAL
first(compare_expression) = VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(collection_marked) = COLLECTION
first(code_item) = SCOPE DECLARATION
first(code) = SCOPE DECLARATION
first(base_expression) = VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(atomic_expression) = VERTICAL TRUE MONEY_AMOUNT LPAREN INT_LITERAL IDENT FALSE DECIMAL_LITERAL
first(assertion_base) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(assertion) = VERTICAL VARIES UNDER_CONDITION TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FIXED FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
first(aggregate_func) = SUM MINIMUM MAXIMUM MAP FILTER CONTENT CARDINAL
first(aggregate) = SUM MINIMUM MAXIMUM MAP FILTER CONTENT CARDINAL
minimal(variation_type) = (* 1 *) INCREASING
minimal(unit_literal) = (* 1 *) PERCENT
minimal(typ_base) = (* 1 *) INTEGER
minimal(typ) = (* 1 *) INTEGER
minimal(sum_unop) = (* 1 *) MINUS
minimal(sum_op) = (* 1 *) PLUSDURATION
minimal(sum_expression) = (* 1 *) IDENT
minimal(struct_scope_func) = (* 2 *) DEPENDS INTEGER
minimal(struct_scope_base) = (* 2 *) CONDITION IDENT
minimal(struct_scope) = (* 2 *) CONDITION IDENT
minimal(struct_or_enum_inject) = (* 1 *) CONSTRUCTOR
minimal(struct_inject_content) = (* 6 *) LBRACKET ALT IDENT COLON IDENT RBRACKET
minimal(struct_content_field) = (* 3 *) IDENT COLON IDENT
minimal(source_file_or_master) = (* 1 *) EOF
minimal(source_file_item) = (* 1 *) LAW_HEADING
minimal(source_file_article) = (* 1 *) LAW_ARTICLE
minimal(source_file_after_text) = (* 1 *) EOF
minimal(source_file) = (* 1 *) EOF
minimal(small_expression) = (* 1 *) IDENT
minimal(separated_nonempty_list(SEMICOLON,expression)) = (* 1 *) IDENT
minimal(separated_nonempty_list(DOT,ident)) = (* 1 *) IDENT
minimal(separated_nonempty_list(ALT,struct_content_field)) = (* 3 *) IDENT COLON IDENT
minimal(scope_use_condition) = (* 2 *) UNDER_CONDITION IDENT
minimal(scope_item) = (* 2 *) ASSERTION IDENT
minimal(scope_decl_item) = (* 3 *) CONTEXT IDENT CONDITION
minimal(rule_expr) = (* 1 *) IDENT
minimal(rule_consequence) = (* 1 *) FILLED
minimal(rule) = (* 3 *) RULE IDENT FILLED
minimal(qident) = (* 1 *) IDENT
minimal(primitive_expression) = (* 1 *) IDENT
minimal(optional_binding) = (* 0 *)
minimal(option(variation_type)) = (* 0 *)
minimal(option(unit_literal)) = (* 0 *)
minimal(option(terminated(constructor,DOT))) = (* 0 *)
minimal(option(struct_scope_func)) = (* 0 *)
minimal(option(scope_use_condition)) = (* 0 *)
minimal(option(preceded(DOT,constructor))) = (* 0 *)
minimal(option(law_text)) = (* 0 *)
minimal(option(label)) = (* 0 *)
minimal(option(ident)) = (* 0 *)
minimal(option(exception_to)) = (* 0 *)
minimal(option(enum_inject_content)) = (* 0 *)
minimal(option(enum_decl_line_payload)) = (* 0 *)
minimal(option(definition_parameters)) = (* 0 *)
minimal(option(condition_consequence)) = (* 0 *)
minimal(option(NOT)) = (* 0 *)
minimal(num_literal) = (* 1 *) INT_LITERAL
minimal(nonempty_list(scope_item)) = (* 2 *) ASSERTION IDENT
minimal(nonempty_list(scope_decl_item)) = (* 3 *) CONTEXT IDENT CONDITION
minimal(nonempty_list(enum_decl_line)) = (* 2 *) ALT CONSTRUCTOR
minimal(mult_op) = (* 1 *) MULT
minimal(mult_expression) = (* 1 *) IDENT
minimal(metadata_block) = (* 3 *) BEGIN_CODE END_CODE END_METADATA
minimal(maybe_qualified_constructor) = (* 1 *) CONSTRUCTOR
minimal(match_arms) = (* 0 *)
minimal(match_arm) = (* 3 *) CONSTRUCTOR COLON IDENT
minimal(master_file_includes) = (* 1 *) EOF
minimal(master_file_include) = (* 1 *) LAW_INCLUDE
minimal(loption(separated_nonempty_list(SEMICOLON,expression))) = (* 0 *)
minimal(logical_unop) = (* 1 *) NOT
minimal(logical_op) = (* 1 *) AND
minimal(logical_expression) = (* 1 *) IDENT
minimal(literal) = (* 1 *) INT_LITERAL
minimal(list(struct_scope)) = (* 0 *)
minimal(list(law_intermediate_text)) = (* 0 *)
minimal(list(code_item)) = (* 0 *)
minimal(law_text) = (* 1 *) LAW_TEXT
minimal(law_intermediate_text) = (* 1 *) LAW_TEXT
minimal(law_heading) = (* 1 *) LAW_HEADING
minimal(law_articles_items) = (* 0 *)
minimal(law_article_item) = (* 1 *) LAW_TEXT
minimal(law_article) = (* 1 *) LAW_ARTICLE
minimal(label) = (* 2 *) LABEL IDENT
minimal(ident) = (* 1 *) IDENT
minimal(forall_prefix) = (* 6 *) FOR ALL IDENT IN IDENT WE_HAVE
minimal(for_all_marked) = (* 2 *) FOR ALL
minimal(expression) = (* 1 *) IDENT
minimal(exists_prefix) = (* 6 *) EXISTS IDENT IN IDENT SUCH THAT
minimal(exists_marked) = (* 1 *) EXISTS
minimal(exception_to) = (* 1 *) EXCEPTION
minimal(enum_inject_content) = (* 2 *) CONTENT IDENT
minimal(enum_decl_line_payload) = (* 2 *) CONTENT INTEGER
minimal(enum_decl_line) = (* 2 *) ALT CONSTRUCTOR
minimal(definition_parameters) = (* 2 *) OF IDENT
minimal(definition) = (* 4 *) DEFINITION IDENT DEFINED_AS IDENT
minimal(date_int) = (* 1 *) INT_LITERAL
minimal(constructor_binding) = (* 1 *) CONSTRUCTOR
minimal(constructor) = (* 1 *) CONSTRUCTOR
minimal(condition_pos) = (* 1 *) CONDITION
minimal(condition_consequence) = (* 3 *) UNDER_CONDITION IDENT CONSEQUENCE
minimal(condition) = (* 2 *) UNDER_CONDITION IDENT
minimal(compare_op) = (* 1 *) LESSER
minimal(compare_expression) = (* 1 *) IDENT
minimal(collection_marked) = (* 1 *) COLLECTION
minimal(code_item) = (* 4 *) DECLARATION STRUCT CONSTRUCTOR COLON
minimal(code) = (* 0 *)
minimal(base_expression) = (* 1 *) IDENT
minimal(atomic_expression) = (* 1 *) IDENT
minimal(assertion_base) = (* 1 *) IDENT
minimal(assertion) = (* 1 *) IDENT
minimal(aggregate_func) = (* 1 *) CARDINAL
minimal(aggregate) = (* 7 *) CARDINAL FOR IDENT IN IDENT OF IDENT
maximal(variation_type) = 1
maximal(unit_literal) = 1
maximal(typ_base) = 1
maximal(typ) = infinity
maximal(sum_unop) = 1
maximal(sum_op) = 1
maximal(sum_expression) = infinity
maximal(struct_scope_func) = infinity
maximal(struct_scope_base) = infinity
maximal(struct_scope) = infinity
maximal(struct_or_enum_inject) = infinity
maximal(struct_inject_content) = infinity
maximal(struct_content_field) = infinity
maximal(source_file_or_master) = infinity
maximal(source_file_item) = infinity
maximal(source_file_article) = infinity
maximal(source_file_after_text) = infinity
maximal(source_file) = infinity
maximal(small_expression) = infinity
maximal(separated_nonempty_list(SEMICOLON,expression)) = infinity
maximal(separated_nonempty_list(DOT,ident)) = infinity
maximal(separated_nonempty_list(ALT,struct_content_field)) = infinity
maximal(scope_use_condition) = infinity
maximal(scope_item) = infinity
maximal(scope_decl_item) = infinity
maximal(rule_expr) = infinity
maximal(rule_consequence) = 2
maximal(rule) = infinity
maximal(qident) = infinity
maximal(primitive_expression) = infinity
maximal(optional_binding) = infinity
maximal(option(variation_type)) = 1
maximal(option(unit_literal)) = 1
maximal(option(terminated(constructor,DOT))) = 2
maximal(option(struct_scope_func)) = infinity
maximal(option(scope_use_condition)) = infinity
maximal(option(preceded(DOT,constructor))) = 2
maximal(option(law_text)) = 1
maximal(option(label)) = 2
maximal(option(ident)) = 1
maximal(option(exception_to)) = 2
maximal(option(enum_inject_content)) = infinity
maximal(option(enum_decl_line_payload)) = infinity
maximal(option(definition_parameters)) = 2
maximal(option(condition_consequence)) = infinity
maximal(option(NOT)) = 1
maximal(num_literal) = 1
maximal(nonempty_list(scope_item)) = infinity
maximal(nonempty_list(scope_decl_item)) = infinity
maximal(nonempty_list(enum_decl_line)) = infinity
maximal(mult_op) = 1
maximal(mult_expression) = infinity
maximal(metadata_block) = infinity
maximal(maybe_qualified_constructor) = 3
maximal(match_arms) = infinity
maximal(match_arm) = infinity
maximal(master_file_includes) = infinity
maximal(master_file_include) = 1
maximal(loption(separated_nonempty_list(SEMICOLON,expression))) = infinity
maximal(logical_unop) = 1
maximal(logical_op) = 1
maximal(logical_expression) = infinity
maximal(literal) = 7
maximal(list(struct_scope)) = infinity
maximal(list(law_intermediate_text)) = infinity
maximal(list(code_item)) = infinity
maximal(law_text) = 1
maximal(law_intermediate_text) = 1
maximal(law_heading) = 1
maximal(law_articles_items) = infinity
maximal(law_article_item) = infinity
maximal(law_article) = 1
maximal(label) = 2
maximal(ident) = 1
maximal(forall_prefix) = infinity
maximal(for_all_marked) = 2
maximal(expression) = infinity
maximal(exists_prefix) = infinity
maximal(exists_marked) = 1
maximal(exception_to) = 2
maximal(enum_inject_content) = infinity
maximal(enum_decl_line_payload) = infinity
maximal(enum_decl_line) = infinity
maximal(definition_parameters) = 2
maximal(definition) = infinity
maximal(date_int) = 1
maximal(constructor_binding) = infinity
maximal(constructor) = 1
maximal(condition_pos) = 1
maximal(condition_consequence) = infinity
maximal(condition) = infinity
maximal(compare_op) = 1
maximal(compare_expression) = infinity
maximal(collection_marked) = 1
maximal(code_item) = infinity
maximal(code) = infinity
maximal(base_expression) = infinity
maximal(atomic_expression) = infinity
maximal(assertion_base) = infinity
maximal(assertion) = infinity
maximal(aggregate_func) = infinity
maximal(aggregate) = infinity
follow(variation_type) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(unit_literal) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT
follow(typ_base) = SCOPE INIT FOR END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT
follow(typ) = SCOPE END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT
follow(sum_unop) = VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(sum_op) = VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(sum_expression) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR NOT_EQUAL LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(struct_scope_func) = SCOPE END_CODE DECLARATION DATA CONTEXT CONDITION
follow(struct_scope_base) = SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION
follow(struct_scope) = SCOPE END_CODE DECLARATION DATA CONDITION
follow(struct_or_enum_inject) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(struct_inject_content) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(struct_content_field) = RBRACKET ALT
follow(source_file_or_master) = #
follow(source_file_item) = LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
follow(source_file_article) = LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
follow(source_file_after_text) = #
follow(source_file) = #
follow(small_expression) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT
follow(separated_nonempty_list(SEMICOLON,expression)) = RSQUARE
follow(separated_nonempty_list(DOT,ident)) = WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY
follow(separated_nonempty_list(ALT,struct_content_field)) = RBRACKET
follow(scope_use_condition) = COLON
follow(scope_item) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(scope_decl_item) = SCOPE END_CODE DECLARATION CONTEXT
follow(rule_expr) = UNDER_CONDITION NOT FILLED
follow(rule_consequence) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(rule) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(qident) = WITH_V UNDER_CONDITION OF NOT FILLED DEFINED_AS BY
follow(primitive_expression) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(optional_binding) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(option(variation_type)) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(option(unit_literal)) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT
follow(option(terminated(constructor,DOT))) = IDENT
follow(option(struct_scope_func)) = SCOPE END_CODE DECLARATION DATA CONTEXT CONDITION
follow(option(scope_use_condition)) = COLON
follow(option(preceded(DOT,constructor))) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONTENT CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT
follow(option(law_text)) = SCOPE LAW_INCLUDE EOF END_METADATA END_CODE DECLARATION BEGIN_CODE
follow(option(label)) = RULE EXCEPTION DEFINITION
follow(option(ident)) = RULE DEFINITION
follow(option(exception_to)) = RULE DEFINITION
follow(option(enum_inject_content)) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(option(enum_decl_line_payload)) = SCOPE END_CODE DECLARATION ALT
follow(option(definition_parameters)) = UNDER_CONDITION NOT FILLED DEFINED_AS
follow(option(condition_consequence)) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FILLED FALSE EXISTS DEFINED_AS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(option(NOT)) = FILLED
follow(num_literal) = YEAR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS PERCENT OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MONTH MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION DAY CONSEQUENCE COLON ASSERTION ARROW AND ALT
follow(nonempty_list(scope_item)) = SCOPE END_CODE DECLARATION
follow(nonempty_list(scope_decl_item)) = SCOPE END_CODE DECLARATION
follow(nonempty_list(enum_decl_line)) = SCOPE END_CODE DECLARATION
follow(mult_op) = VERTICAL TRUE SUM MONEY_AMOUNT MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(mult_expression) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(metadata_block) = LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
follow(maybe_qualified_constructor) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT
follow(match_arms) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION
follow(match_arm) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT
follow(master_file_includes) = #
follow(master_file_include) = LAW_TEXT LAW_INCLUDE EOF
follow(loption(separated_nonempty_list(SEMICOLON,expression))) = RSQUARE
follow(logical_unop) = VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(logical_op) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(logical_expression) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT
follow(literal) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT
follow(list(struct_scope)) = SCOPE END_CODE DECLARATION
follow(list(law_intermediate_text)) = LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
follow(list(code_item)) = END_CODE
follow(law_text) = SCOPE LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF END_METADATA END_CODE DECLARATION BEGIN_METADATA BEGIN_CODE
follow(law_intermediate_text) = LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
follow(law_heading) = LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
follow(law_articles_items) = LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA
follow(law_article_item) = LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE
follow(law_article) = LAW_TEXT LAW_INCLUDE LAW_HEADING LAW_ARTICLE EOF BEGIN_METADATA BEGIN_CODE
follow(label) = RULE EXCEPTION DEFINITION
follow(ident) = WITH_V WITH WE_HAVE UNDER_CONDITION THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL NOT MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR FILLED EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEPENDS DEFINITION DEFINED_AS DECREASING DECLARATION DATA CONTENT CONSEQUENCE CONDITION COLON BY ASSERTION ARROW AND ALT
follow(forall_prefix) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(for_all_marked) = IDENT
follow(expression) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION
follow(exists_prefix) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FALSE EXISTS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(exists_marked) = IDENT
follow(exception_to) = RULE DEFINITION
follow(enum_inject_content) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(enum_decl_line_payload) = SCOPE END_CODE DECLARATION ALT
follow(enum_decl_line) = SCOPE END_CODE DECLARATION ALT
follow(definition_parameters) = UNDER_CONDITION NOT FILLED DEFINED_AS
follow(definition) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(date_int) = VERTICAL DIV
follow(constructor_binding) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(constructor) = WITH WE_HAVE UNDER_CONDITION THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LBRACKET LABEL INIT INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEPENDS DEFINITION DECREASING DECLARATION DATA CONTEXT CONTENT CONSTRUCTOR CONSEQUENCE CONDITION COLON ASSERTION ARROW AND ALT
follow(condition_pos) = IDENT
follow(condition_consequence) = VERTICAL TRUE SUM NOT MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MATCH MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IF IDENT GET_YEAR GET_MONTH GET_DAY FOR FILTER FILLED FALSE EXISTS DEFINED_AS DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(condition) = CONSEQUENCE
follow(compare_op) = VERTICAL TRUE SUM MONEY_AMOUNT MINUSMONEY MINUSDURATION MINUSDEC MINUS MINIMUM MAXIMUM MAP LSQUARE LPAREN INT_TO_DEC INT_LITERAL IDENT GET_YEAR GET_MONTH GET_DAY FILTER FALSE DECIMAL_LITERAL CONTENT CONSTRUCTOR CARDINAL
follow(compare_expression) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET OR LABEL EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(collection_marked) = TEXT MONEY INTEGER DURATION DECIMAL DATE CONSTRUCTOR COLLECTION BOOLEAN
follow(code_item) = SCOPE END_CODE DECLARATION
follow(code) = END_CODE
follow(base_expression) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
follow(atomic_expression) = WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR OF NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING IN GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION ARROW AND ALT
follow(assertion_base) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(assertion) = SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION
follow(aggregate_func) = FOR
follow(aggregate) = THEN SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSMONEY PLUSDURATION PLUSDEC PLUSDATE PLUS OR NOT_EQUAL MULTMONEY MULTDEC MULT MINUSMONEY MINUSDURATION MINUSDEC MINUSDATE MINUS LESSER_MONEY LESSER_EQUAL_MONEY LESSER_EQUAL_DURATION LESSER_EQUAL_DEC LESSER_EQUAL_DATE LESSER_EQUAL LESSER_DURATION LESSER_DEC LESSER_DATE LESSER LABEL INCREASING GREATER_MONEY GREATER_EQUAL_MONEY GREATER_EQUAL_DURATION GREATER_EQUAL_DEC GREATER_EQUAL_DATE GREATER_EQUAL GREATER_DURATION GREATER_DEC GREATER_DATE GREATER EXCEPTION EQUAL END_CODE ELSE DIVMONEY DIVDEC DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT
Built an LR(0) automaton with 380 states.
The grammar is not SLR(1) -- 1 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 380 states.
202 out of 380 states have a default reduction.
The action table is 49780 entries; 1925 non-zero; 1919 compressed.
The action table occupies roughly 3928 bytes.
The goto table is 39140 entries; 707 non-zero; 1596 compressed.
The goto table occupies roughly 3280 bytes.
The error table occupies roughly 6256 bytes.
The default_reduction table occupies roughly 416 bytes.
The lhs table occupies roughly 272 bytes.
The trace table occupies roughly 8 bytes.
