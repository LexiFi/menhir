Grammar has 744 nonterminal symbols, among which 11 start symbols.
Grammar has 420 terminal symbols.
Grammar has 5396 productions.
nullable(yield_expression) = false
nullable(virt_specifier_seq) = false
nullable(virt_specifier) = false
nullable(using_declarator_list) = false
nullable(using_declarator) = false
nullable(using_declaration) = false
nullable(unqualified_id) = false
nullable(unnamed_namespace_definition_head) = false
nullable(unnamed_namespace_definition) = false
nullable(unary_operator) = false
nullable(unary_expression) = false
nullable(typename_specifier) = false
nullable(type_sub) = false
nullable(type_specifier) = false
nullable(type_requirement) = false
nullable(type_parameter) = false
nullable(type_name) = false
nullable(type_id) = false
nullable(type_constraint) = false
nullable(ty_macro_call) = false
nullable(try_block) = false
nullable(translation_unit) = false
nullable(trailing_return_type) = false
nullable(token_seq) = false
nullable(token_no_paren) = false
nullable(token) = false
nullable(throw_expression) = false
nullable(template_parameter_list) = false
nullable(template_parameter) = false
nullable(template_id) = false
nullable(template_head) = false
nullable(template_declaration) = false
nullable(template_argument_list_opt) = true
nullable(template_argument_list) = false
nullable(template_argument) = false
nullable(templ_param_macro_call) = false
nullable(swift_arg) = false
nullable(suffix_macro_call) = false
nullable(string_literal_list) = false
nullable(string_literal_) = false
nullable(string_literal) = false
nullable(str_) = false
nullable(storage_class_specifier) = false
nullable(stmts_sub) = false
nullable(stmts_macro_arg) = false
nullable(stmt_macro_call) = false
nullable(stmt_macro_arg) = false
nullable(static_assert_declaration) = false
nullable(statement_seq_opt) = true
nullable(statement) = false
nullable(specs_sub) = false
nullable(special_token) = false
nullable(simple_type_specifier) = false
nullable(simple_template_id_) = false
nullable(simple_template_id) = false
nullable(simple_requirement) = false
nullable(simple_capture) = false
nullable(shift_expression) = false
nullable(separated_nonempty_list(COMMA,type_id)) = false
nullable(separated_nonempty_list(COMMA,objc_struct_dtor)) = false
nullable(separated_nonempty_list(COMMA,objc_property_attr)) = false
nullable(separated_nonempty_list(COMMA,objc_class_name)) = false
nullable(separated_nonempty_list(COMMA,objc_avail_item)) = false
nullable(selection_statement) = false
nullable(return_type_requirement) = false
nullable(restricted_xor_expr) = false
nullable(restricted_unary_expr) = false
nullable(restricted_shift_expr) = false
nullable(restricted_rel_expr) = false
nullable(restricted_prim_expr) = false
nullable(restricted_postfix_expr) = false
nullable(restricted_pm_expr) = false
nullable(restricted_mult_expr) = false
nullable(restricted_lor_expr) = false
nullable(restricted_land_expr) = false
nullable(restricted_ior_expr) = false
nullable(restricted_expr) = false
nullable(restricted_eq_expr) = false
nullable(restricted_decls) = false
nullable(restricted_decl) = false
nullable(restricted_cond_expr) = false
nullable(restricted_comp_expr) = false
nullable(restricted_cast_expr) = false
nullable(restricted_assign_expr) = false
nullable(restricted_and_expr) = false
nullable(restricted_add_expr) = false
nullable(requires_expression) = false
nullable(requires_clause) = false
nullable(requirement_seq) = false
nullable(requirement_parameter_list) = false
nullable(requirement_body) = false
nullable(requirement) = false
nullable(relational_expression) = false
nullable(ref_qualifier) = false
nullable(quasi_keyword) = false
nullable(qualified_id) = false
nullable(pure_specifier) = false
nullable(ptr_operator) = false
nullable(ptr_declarator) = false
nullable(ptr_abstract_declarator) = false
nullable(primary_expression) = false
nullable(pp_templ_param_if_section) = false
nullable(pp_templ_param_if_group) = false
nullable(pp_templ_param_else_group) = false
nullable(pp_templ_param_elif_group) = false
nullable(pp_templ_arg_if_section) = false
nullable(pp_templ_arg_if_group) = false
nullable(pp_templ_arg_else_group) = false
nullable(pp_templ_arg_elif_group) = false
nullable(pp_str_if_section) = false
nullable(pp_str_if_group) = false
nullable(pp_str_else_group) = false
nullable(pp_str_elif_group) = false
nullable(pp_stmt_if_section_closing) = false
nullable(pp_stmt_if_section_close_open) = false
nullable(pp_stmt_if_section_broken) = false
nullable(pp_stmt_if_section) = false
nullable(pp_stmt_if_group_closing) = false
nullable(pp_stmt_if_group_close_open) = false
nullable(pp_stmt_if_group_broken) = false
nullable(pp_stmt_if_group) = false
nullable(pp_stmt_else_group_closing) = false
nullable(pp_stmt_else_group_close_open) = false
nullable(pp_stmt_else_group_broken) = false
nullable(pp_stmt_else_group) = false
nullable(pp_stmt_elif_group_closing) = false
nullable(pp_stmt_elif_group_close_open) = false
nullable(pp_stmt_elif_group_broken) = false
nullable(pp_stmt_elif_group) = false
nullable(pp_spec_if_section) = false
nullable(pp_spec_if_group) = false
nullable(pp_spec_else_group) = false
nullable(pp_spec_elif_group) = false
nullable(pp_param_list) = true
nullable(pp_param_if_section) = false
nullable(pp_param_if_group) = false
nullable(pp_param_else_group) = false
nullable(pp_param_elif_group) = false
nullable(pp_p_if_section) = false
nullable(pp_p_if_group) = false
nullable(pp_p_else_group) = false
nullable(pp_p_elif_group) = false
nullable(pp_old_param_decl_list_if_section) = false
nullable(pp_old_param_decl_list_if_group) = false
nullable(pp_old_param_decl_list_else_group) = false
nullable(pp_old_param_decl_list_elif_group) = false
nullable(pp_objc_proto_name_if_section) = false
nullable(pp_objc_proto_name_else_group) = false
nullable(pp_objc_proto_name_elif_group) = false
nullable(pp_objc_ivar_decl_if_section) = false
nullable(pp_objc_ivar_decl_if_group) = false
nullable(pp_objc_ivar_decl_else_group) = false
nullable(pp_objc_ivar_decl_elif_group) = false
nullable(pp_objc_idecl_if_section) = false
nullable(pp_objc_idecl_if_group) = false
nullable(pp_objc_idecl_else_group) = false
nullable(pp_objc_idecl_elif_group) = false
nullable(pp_minit_if_section_broken) = false
nullable(pp_minit_if_section) = false
nullable(pp_minit_if_group_broken) = false
nullable(pp_minit_if_group) = false
nullable(pp_minit_else_group_broken) = false
nullable(pp_minit_else_group) = false
nullable(pp_minit_elif_group_broken) = false
nullable(pp_minit_elif_group) = false
nullable(pp_mdecl_if_section_broken) = false
nullable(pp_mdecl_if_section) = false
nullable(pp_mdecl_if_group_broken) = false
nullable(pp_mdecl_if_group) = false
nullable(pp_mdecl_else_group_broken) = false
nullable(pp_mdecl_else_group) = false
nullable(pp_mdecl_elif_group_broken) = false
nullable(pp_mdecl_elif_group) = false
nullable(pp_lor_if_section) = false
nullable(pp_lor_if_group) = false
nullable(pp_lor_else_group) = false
nullable(pp_lor_elif_group) = false
nullable(pp_land_if_section) = false
nullable(pp_land_if_group) = false
nullable(pp_land_else_group) = false
nullable(pp_land_elif_group) = false
nullable(pp_ior_if_section_seq) = false
nullable(pp_ior_if_section) = false
nullable(pp_ior_if_group) = false
nullable(pp_ior_else_group) = false
nullable(pp_ior_elif_group) = false
nullable(pp_init_if_section) = false
nullable(pp_init_if_group) = false
nullable(pp_init_else_group) = false
nullable(pp_init_elif_group) = false
nullable(pp_ifx_x) = false
nullable(pp_ifx_shift) = false
nullable(pp_ifx_s) = false
nullable(pp_ifx_p) = false
nullable(pp_ifx_o) = false
nullable(pp_ifx_i) = false
nullable(pp_ifx_h) = false
nullable(pp_ifx_eh) = false
nullable(pp_ifx_e) = false
nullable(pp_ifx_d) = false
nullable(pp_ifx_cond_) = false
nullable(pp_ifx_cond) = false
nullable(pp_ifx_closing) = false
nullable(pp_ifx_close_open) = false
nullable(pp_ifx_cb) = false
nullable(pp_ifx_c) = false
nullable(pp_ifx_b) = false
nullable(pp_ifx_attr) = false
nullable(pp_ifx_a) = false
nullable(pp_ifx) = false
nullable(pp_ifstmt_if_section_closing) = false
nullable(pp_ifstmt_if_group_closing) = false
nullable(pp_ifstmt_else_group_closing) = false
nullable(pp_ifstmt_elif_group_closing) = false
nullable(pp_idtor_if_section) = false
nullable(pp_idtor_if_group) = false
nullable(pp_idtor_else_group) = false
nullable(pp_idtor_elif_group) = false
nullable(pp_handler_if_section_broken) = false
nullable(pp_handler_if_section) = false
nullable(pp_handler_if_group_broken) = false
nullable(pp_handler_if_group) = false
nullable(pp_handler_else_group_broken) = false
nullable(pp_handler_else_group) = false
nullable(pp_handler_elif_group_broken) = false
nullable(pp_handler_elif_group) = false
nullable(pp_gnu_asm_if_section) = false
nullable(pp_gnu_asm_if_group) = false
nullable(pp_gnu_asm_else_group) = false
nullable(pp_gnu_asm_elif_group) = false
nullable(pp_func_head_if_section_broken) = false
nullable(pp_func_head_if_group_broken) = false
nullable(pp_func_head_else_group_broken) = false
nullable(pp_func_head_elif_group_broken) = false
nullable(pp_func_body_if_section) = false
nullable(pp_func_body_if_group) = false
nullable(pp_func_body_else_group) = false
nullable(pp_func_body_elif_group) = false
nullable(pp_expr_if_section_broken) = false
nullable(pp_expr_if_section) = false
nullable(pp_expr_if_group_broken) = false
nullable(pp_expr_if_group) = false
nullable(pp_expr_else_group_broken) = false
nullable(pp_expr_else_group) = false
nullable(pp_expr_elif_group_broken) = false
nullable(pp_expr_elif_group) = false
nullable(pp_enum_if_section_closing) = false
nullable(pp_enum_if_group_closing) = false
nullable(pp_enum_head_if_section) = false
nullable(pp_enum_head_if_group) = false
nullable(pp_enum_head_else_group) = false
nullable(pp_enum_head_elif_group) = false
nullable(pp_enum_else_group_closing) = false
nullable(pp_enum_elif_group_closing) = false
nullable(pp_endif) = false
nullable(pp_else) = false
nullable(pp_elif) = false
nullable(pp_edef_if_section) = false
nullable(pp_edef_if_group) = false
nullable(pp_edef_else_group) = false
nullable(pp_edef_elif_group) = false
nullable(pp_dtor_if_section_broken) = false
nullable(pp_dtor_if_section) = false
nullable(pp_dtor_if_group_broken) = false
nullable(pp_dtor_if_group) = false
nullable(pp_dtor_else_group_broken) = false
nullable(pp_dtor_else_group) = false
nullable(pp_dtor_elif_group_broken) = false
nullable(pp_dtor_elif_group) = false
nullable(pp_dinit_if_section) = false
nullable(pp_dinit_if_group) = false
nullable(pp_dinit_else_group) = false
nullable(pp_dinit_elif_group) = false
nullable(pp_decl_spec_if_section) = false
nullable(pp_decl_spec_if_group) = false
nullable(pp_decl_spec_else_group) = false
nullable(pp_decl_spec_elif_group) = false
nullable(pp_decl_if_section_broken) = false
nullable(pp_decl_if_section) = false
nullable(pp_decl_if_group_broken) = false
nullable(pp_decl_if_group) = false
nullable(pp_decl_else_group_broken) = false
nullable(pp_decl_else_group) = false
nullable(pp_decl_elif_group_broken) = false
nullable(pp_decl_elif_group) = false
nullable(pp_ctor_init_if_section) = false
nullable(pp_ctor_init_if_group) = false
nullable(pp_ctor_init_else_group) = false
nullable(pp_ctor_init_elif_group) = false
nullable(pp_control_line) = false
nullable(pp_cond_tl_if_section) = false
nullable(pp_cond_tl_if_group) = false
nullable(pp_cond_tl_else_group) = false
nullable(pp_cond_tl_elif_group) = false
nullable(pp_cond_if_section) = false
nullable(pp_cond_if_group) = false
nullable(pp_cond_hd_if_section) = false
nullable(pp_cond_hd_if_group) = false
nullable(pp_cond_hd_else_group) = false
nullable(pp_cond_hd_elif_group) = false
nullable(pp_cond_else_group) = false
nullable(pp_cond_elif_group) = false
nullable(pp_concat) = false
nullable(pp_class_head_if_section_broken) = false
nullable(pp_class_head_if_section) = false
nullable(pp_class_head_if_group_broken) = false
nullable(pp_class_head_if_group) = false
nullable(pp_class_head_else_group_broken) = false
nullable(pp_class_head_else_group) = false
nullable(pp_class_head_elif_group_broken) = false
nullable(pp_class_head_elif_group) = false
nullable(pp_class_body_if_section) = false
nullable(pp_class_body_if_group) = false
nullable(pp_class_body_else_group) = false
nullable(pp_class_body_elif_group) = false
nullable(pp_cc_if_section) = false
nullable(pp_cc_if_group) = false
nullable(pp_cc_else_group) = false
nullable(pp_cc_elif_group) = false
nullable(pp_capture_if_section) = false
nullable(pp_capture_if_group) = false
nullable(pp_capture_else_group) = false
nullable(pp_capture_elif_group) = false
nullable(pp_base_clause_if_section) = false
nullable(pp_base_clause_if_group) = false
nullable(pp_base_clause_else_group) = false
nullable(pp_base_clause_elif_group) = false
nullable(pp_attr_if_section) = false
nullable(pp_attr_if_group) = false
nullable(pp_attr_else_group) = false
nullable(pp_attr_elif_group) = false
nullable(pp_args_if_section_closing) = false
nullable(pp_args_if_group_closing) = false
nullable(pp_args_else_group_closing) = false
nullable(pp_args_elif_group_closing) = false
nullable(pp_aexpr_if_section_closing) = false
nullable(pp_aexpr_if_section) = false
nullable(pp_aexpr_if_group_closing) = false
nullable(pp_aexpr_if_group) = false
nullable(pp_aexpr_else_group_closing) = false
nullable(pp_aexpr_else_group) = false
nullable(pp_aexpr_elif_group_closing) = false
nullable(pp_aexpr_elif_group) = false
nullable(pp_a_if_section) = false
nullable(pp_a_if_group) = false
nullable(pp_a_else_group) = false
nullable(pp_a_elif_group) = false
nullable(postfix_expression) = false
nullable(pm_expression) = false
nullable(placeholder_type_specifier) = false
nullable(params_body_macro_call) = false
nullable(params_body_macro) = false
nullable(parameters_and_qualifiers) = false
nullable(parameter_declaration_list) = false
nullable(parameter_declaration_clause) = true
nullable(parameter_declaration) = false
nullable(operator_function_id) = false
nullable(operator) = false
nullable(opaque_enum_declaration) = false
nullable(op_macro_call) = false
nullable(old_param_decl_list) = false
nullable(old_param_decl) = false
nullable(old_init_decl_list) = false
nullable(odd_stmt) = false
nullable(odd_mult_expr) = false
nullable(odd_mem_decl) = false
nullable(odd_expr) = false
nullable(odd_decl) = false
nullable(objc_visibility_spec) = false
nullable(objc_try_block) = false
nullable(objc_try) = false
nullable(objc_superclass) = false
nullable(objc_struct_dtor) = false
nullable(objc_struct_decl) = false
nullable(objc_selector_expr) = false
nullable(objc_selector) = false
nullable(objc_qualified_interface_decl) = false
nullable(objc_qualified_idecl_seq) = false
nullable(objc_protocol_ref_list) = false
nullable(objc_protocol_name_list) = false
nullable(objc_protocol_name) = false
nullable(objc_protocol_decl_list) = false
nullable(objc_protocol_decl) = false
nullable(objc_property_decl) = false
nullable(objc_property_attrs_decl) = false
nullable(objc_property_attr) = false
nullable(objc_method_type) = false
nullable(objc_method_selector) = false
nullable(objc_method_decl) = false
nullable(objc_message_selector) = false
nullable(objc_message_expr) = false
nullable(objc_keyword_selector) = false
nullable(objc_keyword_dtor) = false
nullable(objc_keyword_arg) = false
nullable(objc_interface_decl) = false
nullable(objc_instance_vars) = false
nullable(objc_instance_var_decl) = false
nullable(objc_identifier) = false
nullable(objc_idecl_seq) = false
nullable(objc_finally) = false
nullable(objc_encode_expr) = false
nullable(objc_class_name) = false
nullable(objc_class_interface) = false
nullable(objc_class_decl_list) = false
nullable(objc_category_interface) = false
nullable(objc_catch_clause) = false
nullable(objc_available) = false
nullable(objc_avail_item) = false
nullable(noptr_new_declarator) = false
nullable(noptr_declarator) = false
nullable(noptr_abstract_pack_declarator) = false
nullable(noptr_abstract_declarator) = false
nullable(nonempty_list(token)) = false
nullable(nonempty_list(swift_arg)) = false
nullable(nonempty_list(q_prop_token)) = false
nullable(nonempty_list(pp_gnu_asm_if_section)) = false
nullable(nonempty_list(pp_control_line)) = false
nullable(nonempty_list(odd_else_stmt)) = false
nullable(nonempty_list(objc_keyword_dtor)) = false
nullable(nonempty_list(objc_keyword_arg)) = false
nullable(nonempty_list(objc_instance_var_decl)) = false
nullable(nonempty_list(objc_catch_clause)) = false
nullable(nonempty_list(multiplicative_unit)) = false
nullable(nonempty_list(int_literal)) = false
nullable(nonempty_list(header_name_token)) = false
nullable(nonempty_list(gnu_asm_token)) = false
nullable(nonempty_list(designator)) = false
nullable(nonempty_list(additive_unit)) = false
nullable(nonempty_list(_pp_lor_if_section)) = false
nullable(nonempty_list(QUEST)) = false
nullable(noexcept_specifier) = false
nullable(noexcept_expression) = false
nullable(nodeclspec_function_definition) = false
nullable(new_type_id) = false
nullable(new_placement) = false
nullable(new_initializer) = false
nullable(new_expression) = false
nullable(new_declarator) = false
nullable(nested_requirement) = false
nullable(nested_namespace_definition_head) = false
nullable(nested_namespace_definition) = false
nullable(nested_name_specifier) = false
nullable(namespace_definition) = false
nullable(namespace_body) = true
nullable(named_namespace_definition_head) = false
nullable(named_namespace_definition) = false
nullable(multiplicative_expression) = false
nullable(ms_warn_spec_list) = false
nullable(ms_warn_spec) = false
nullable(ms_attr) = false
nullable(module_import_declaration) = false
nullable(mid_typaram) = true
nullable(mid_templ_head) = true
nullable(mid_templ_decl) = true
nullable(mid_paren_open) = true
nullable(mid_paren_close) = true
nullable(mid_objc_cat_iface) = true
nullable(mid_init) = true
nullable(mid_brace_open) = true
nullable(mid_brace_close) = true
nullable(member_specification) = false
nullable(member_declarator_list) = false
nullable(member_declarator) = false
nullable(member_declaration) = false
nullable(mem_initializer_list) = false
nullable(mem_initializer_id) = false
nullable(mem_initializer) = false
nullable(mem_init_macro_call) = false
nullable(mem_decls_sub) = false
nullable(mem_decl_seq) = false
nullable(mem_access_spec_head) = false
nullable(mem_access_spec) = false
nullable(main) = false
nullable(macro_fun_head) = false
nullable(macro_arg_list) = true
nullable(macro_arg) = true
nullable(lor_unit_seq) = false
nullable(lor_macro_call) = false
nullable(logical_or_expression) = false
nullable(logical_and_expression) = false
nullable(literal_operator_id) = false
nullable(literal_macro_call) = false
nullable(literal) = false
nullable(list(str_)) = true
nullable(list(pp_templ_param_elif_group)) = true
nullable(list(pp_templ_arg_elif_group)) = true
nullable(list(pp_str_elif_group)) = true
nullable(list(pp_stmt_elif_group_closing)) = true
nullable(list(pp_stmt_elif_group_close_open)) = true
nullable(list(pp_stmt_elif_group_broken)) = true
nullable(list(pp_stmt_elif_group)) = true
nullable(list(pp_spec_elif_group)) = true
nullable(list(pp_param_elif_group)) = true
nullable(list(pp_p_elif_group)) = true
nullable(list(pp_old_param_decl_list_elif_group)) = true
nullable(list(pp_objc_proto_name_elif_group)) = true
nullable(list(pp_objc_ivar_decl_elif_group)) = true
nullable(list(pp_objc_idecl_elif_group)) = true
nullable(list(pp_minit_elif_group_broken)) = true
nullable(list(pp_minit_elif_group)) = true
nullable(list(pp_mdecl_elif_group_broken)) = true
nullable(list(pp_mdecl_elif_group)) = true
nullable(list(pp_lor_elif_group)) = true
nullable(list(pp_land_elif_group)) = true
nullable(list(pp_ior_elif_group)) = true
nullable(list(pp_init_elif_group)) = true
nullable(list(pp_ifstmt_elif_group_closing)) = true
nullable(list(pp_idtor_elif_group)) = true
nullable(list(pp_handler_elif_group_broken)) = true
nullable(list(pp_handler_elif_group)) = true
nullable(list(pp_gnu_asm_elif_group)) = true
nullable(list(pp_func_head_elif_group_broken)) = true
nullable(list(pp_func_body_elif_group)) = true
nullable(list(pp_expr_elif_group_broken)) = true
nullable(list(pp_expr_elif_group)) = true
nullable(list(pp_enum_head_elif_group)) = true
nullable(list(pp_enum_elif_group_closing)) = true
nullable(list(pp_edef_elif_group)) = true
nullable(list(pp_dtor_elif_group_broken)) = true
nullable(list(pp_dtor_elif_group)) = true
nullable(list(pp_dinit_elif_group)) = true
nullable(list(pp_decl_spec_elif_group)) = true
nullable(list(pp_decl_elif_group_broken)) = true
nullable(list(pp_decl_elif_group)) = true
nullable(list(pp_ctor_init_elif_group)) = true
nullable(list(pp_control_line)) = true
nullable(list(pp_cond_tl_elif_group)) = true
nullable(list(pp_cond_hd_elif_group)) = true
nullable(list(pp_cond_elif_group)) = true
nullable(list(pp_class_head_elif_group_broken)) = true
nullable(list(pp_class_head_elif_group)) = true
nullable(list(pp_class_body_elif_group)) = true
nullable(list(pp_cc_elif_group)) = true
nullable(list(pp_capture_elif_group)) = true
nullable(list(pp_base_clause_elif_group)) = true
nullable(list(pp_attr_elif_group)) = true
nullable(list(pp_args_elif_group_closing)) = true
nullable(list(pp_aexpr_elif_group_closing)) = true
nullable(list(pp_aexpr_elif_group)) = true
nullable(list(pp_a_elif_group)) = true
nullable(list(gnu_asm_token_)) = true
nullable(list(gnu_asm_token)) = true
nullable(list(asm_token)) = true
nullable(list(_pp_lor_elif_group)) = true
nullable(list(_pp_land_elif_group)) = true
nullable(list(_pp_ior_elif_group)) = true
nullable(list(_pp_func_head_elif_group)) = true
nullable(list(_pp_eor_elif_group)) = true
nullable(list(INT_LITERAL)) = true
nullable(linkage_specification) = false
nullable(land_unit_seq) = false
nullable(lambda_introducer) = false
nullable(lambda_expression) = false
nullable(lambda_declarator) = false
nullable(lambda_capture) = false
nullable(labeled_statement) = false
nullable(label_seq) = false
nullable(label) = false
nullable(jump_statement) = false
nullable(iteration_statement) = false
nullable(iteration_macro) = false
nullable(initializer_list) = false
nullable(initializer_clause) = false
nullable(initializer_) = false
nullable(init_sub) = false
nullable(init_statement) = false
nullable(init_declarator_list) = false
nullable(init_declarator) = false
nullable(init_capture) = false
nullable(inclusive_or_expression) = false
nullable(identifier_list) = false
nullable(id_macro_call) = false
nullable(id_expression) = false
nullable(has_include_expression) = false
nullable(has_attribute_expression) = false
nullable(handler_seq) = false
nullable(handler) = false
nullable(gnu_attribute_seq) = false
nullable(gnu_attribute) = false
nullable(gnu_asm_frag_seq) = false
nullable(gnu_asm_attr) = false
nullable(function_try_block) = false
nullable(function_specifier) = false
nullable(function_definition) = false
nullable(function_body) = false
nullable(for_range_initializer) = false
nullable(for_range_declaration) = false
nullable(fold_operator) = false
nullable(fold_expression) = false
nullable(extra_keyword) = false
nullable(expression_list_opt) = true
nullable(expression_list) = false
nullable(expression) = false
nullable(expr_sub) = false
nullable(expr_or_braced_init_list) = false
nullable(expr_macro_call) = false
nullable(explicit_specifier) = false
nullable(explicit_specialization) = false
nullable(explicit_instantiation) = false
nullable(exclusive_or_expression) = false
nullable(exception_declaration) = false
nullable(etors_sub) = false
nullable(equality_expression) = false
nullable(enumerator_list) = false
nullable(enumerator_definition) = false
nullable(enumerator) = false
nullable(enum_specifier) = false
nullable(enum_key) = false
nullable(enum_head) = false
nullable(enum_base) = false
nullable(enclosing_namespace_specifier) = false
nullable(empty_declaration) = false
nullable(elaborated_type_specifier) = false
nullable(dtors_sub) = false
nullable(designator) = false
nullable(designated_initializer_clause) = false
nullable(delete_expression) = false
nullable(defining_type_specifier_seq) = false
nullable(defining_type_specifier) = false
nullable(defining_type_id) = false
nullable(defined_macro_expression) = false
nullable(deduction_guide) = false
nullable(decltype_specifier) = false
nullable(decls_sub) = false
nullable(declarator_id) = false
nullable(declarator) = false
nullable(declaration_seq) = false
nullable(declaration) = false
nullable(decl_specifier_seq) = false
nullable(decl_specifier) = false
nullable(decl_spec_macro_call) = false
nullable(decl_spec_macro) = false
nullable(decl_macro_call_) = false
nullable(decl_OR_stmt_macro_call) = false
nullable(decl_OR_expr) = false
nullable(cv_qualifier_seq) = false
nullable(cv_qualifier) = false
nullable(cuda_exec_config) = false
nullable(ctor_initializer) = false
nullable(conversion_type_id) = false
nullable(conversion_function_id) = false
nullable(conversion_declarator) = false
nullable(contract_level_opt) = true
nullable(contract_level) = false
nullable(contract_attribute_specifier) = false
nullable(constraint_logical_or_expression) = false
nullable(constraint_logical_and_expression) = false
nullable(constraint_expression) = false
nullable(constant_expression) = false
nullable(conditional_expression) = false
nullable(condition) = false
nullable(cond_unit_seq) = false
nullable(concept_definition) = false
nullable(compound_statement) = false
nullable(compound_requirement) = false
nullable(compare_expression) = false
nullable(class_virt_specifier) = false
nullable(class_specifier) = false
nullable(class_or_decltype) = false
nullable(class_name) = false
nullable(class_key) = false
nullable(class_head_name) = false
nullable(class_head) = false
nullable(cast_key) = false
nullable(cast_expression) = false
nullable(capture_macro_call) = false
nullable(capture_list) = false
nullable(capture_default) = false
nullable(capture) = false
nullable(braced_init_list) = false
nullable(brace_or_equal_initializer) = false
nullable(block_literal_expression) = false
nullable(block_head_macro) = false
nullable(block_end_macro) = false
nullable(block_declaration) = false
nullable(base_specifier_list) = false
nullable(base_specifier) = false
nullable(base_clause) = false
nullable(balanced_token_seq_opt) = true
nullable(balanced_token_seq) = false
nullable(balanced_token) = false
nullable(await_expression) = false
nullable(attribute_using_prefix) = false
nullable(attribute_token) = false
nullable(attribute_specifier_seq) = false
nullable(attribute_specifier) = false
nullable(attribute_scoped_token) = false
nullable(attribute_namespace_seq) = false
nullable(attribute_list) = true
nullable(attribute_declaration) = false
nullable(attribute_argument_clause_opt) = true
nullable(attribute_argument_clause) = false
nullable(attribute) = false
nullable(attr_macro_call) = false
nullable(assignment_operator) = false
nullable(assignment_expression) = false
nullable(asm_block) = false
nullable(and_expression) = false
nullable(alignment_specifier) = false
nullable(alias_declaration) = false
nullable(additive_expression) = false
nullable(access_specifier) = false
nullable(acc_annot) = false
nullable(abstract_pack_declarator) = false
nullable(abstract_declarator) = false
nullable(_using_directive) = false
nullable(_using_declaration) = false
nullable(_type_specifier_seq) = false
nullable(_static_assert_declaration) = false
nullable(_statement_seq) = false
nullable(_simple_declaration) = false
nullable(_pp_param_list) = false
nullable(_pp_lor_if_section) = false
nullable(_pp_lor_if_group) = false
nullable(_pp_lor_else_group) = false
nullable(_pp_lor_elif_group) = false
nullable(_pp_land_if_section) = false
nullable(_pp_land_if_group) = false
nullable(_pp_land_else_group) = false
nullable(_pp_land_elif_group) = false
nullable(_pp_ior_if_section) = false
nullable(_pp_ior_if_group) = false
nullable(_pp_ior_else_group) = false
nullable(_pp_ior_elif_group) = false
nullable(_pp_idtor_if_section) = false
nullable(_pp_func_head_if_section) = false
nullable(_pp_func_head_if_group) = false
nullable(_pp_func_head_else_group) = false
nullable(_pp_func_head_elif_group) = false
nullable(_pp_eor_if_section) = false
nullable(_pp_eor_if_group) = false
nullable(_pp_eor_else_group) = false
nullable(_pp_eor_elif_group) = false
nullable(_pp_dinit_if_section_list) = false
nullable(_pp_define) = false
nullable(_opaque_enum_declaration) = false
nullable(_namespace_alias_definition) = false
nullable(_initializer_list) = false
nullable(_init_statement) = false
nullable(_designated_initializer_list) = false
nullable(_block_declaration) = false
nullable(_asm_declaration) = false
nullable(_alias_declaration) = false
nullable(__initializer_list) = false
first(yield_expression) = CO_YIELD
first(virt_specifier_seq) = VIRT_SPEC_MACRO OVERRIDE IDENT_VM FINAL
first(virt_specifier) = VIRT_SPEC_MACRO OVERRIDE IDENT_VM FINAL
first(using_declarator_list) = TYPENAME IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(using_declarator) = TYPENAME IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(using_declaration) = USING
first(unqualified_id) = TY_TILDE OPERATOR IDENT_V IDENT_IM IDENT
first(unnamed_namespace_definition_head) = NAMESPACE INLINE
first(unnamed_namespace_definition) = NAMESPACE INLINE
first(unary_operator) = TILDE STAR PLUS OP_MACRO MINUS EXCLAM AMP_AMP AMP
first(unary_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(typename_specifier) = TYPENAME
first(type_sub) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC SIGNED SHORT RESTRICT REGISTER QUEST PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(type_specifier) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT HEAD_COLON_COLON FLOAT ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO
first(type_requirement) = TYPENAME
first(type_parameter) = TYPENAME TEMPLATE IDENT_IM IDENT_C IDENT HEAD_COLON_COLON DECLTYPE CLASS
first(type_name) = IDENT_IM IDENT
first(type_id) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT PP_IF_D PP_IFNDEF_D PP_IFDEF_D MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT HEAD_COLON_COLON FLOAT ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO
first(type_constraint) = IDENT_IM IDENT_C IDENT HEAD_COLON_COLON DECLTYPE
first(ty_macro_call) = IDENT_TM
first(try_block) = TRY PP_IF_H PP_IFNDEF_H PP_IFNDEF PP_IFDEF_H PP_IFDEF PP_IF CATCH
first(translation_unit) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
first(trailing_return_type) = MINUS_GT
first(token_seq) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LINE PP_INCLUDE PP_ERROR PP_DEFINE PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OVERRIDE OR_EQ OR OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_PLUS OBJC_MINUS OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_CDECL MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FLOAT_LITERAL FLOAT FINAL FALSE EXTERN EXPORT EXPLICIT EXPECTS EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ENSURES END_ASM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOXYGEN_CMD DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BS_IDENT BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AXIOM AUTO AUDIT ATTR_LBRACKET AT ASSERT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(token_no_paren) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RETURN REQUIRES REINTERPRET_CAST REGISTER QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OR_EQ OR OPERATOR NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LONG INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO FRIEND FOR FLOAT_LITERAL FLOAT FALSE EXTERN EXPORT EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AUTO AT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(token) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LINE PP_INCLUDE PP_ERROR PP_DEFINE PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OVERRIDE OR_EQ OR OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_PLUS OBJC_MINUS OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_CDECL MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FLOAT_LITERAL FLOAT FINAL FALSE EXTERN EXPORT EXPLICIT EXPECTS EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ENSURES END_ASM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOXYGEN_CMD DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BS_IDENT BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AXIOM AUTO AUDIT ATTR_LBRACKET AT ASSERT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(throw_expression) = THROW_ THROW
first(template_parameter_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(template_parameter) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(template_id) = OPERATOR IDENT_IM IDENT
first(template_head) = TEMPLATE
first(template_declaration) = TEMPLATE
first(template_argument_list_opt) = WCHAR_T VOLATILE VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SIZEOF SIGNED SHORT RESTRICT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_D PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_D PP_IFDEF_A PP_IFDEF PP_IF PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_STDCALL MS_REF MS_CDECL MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CV_MACRO CO_AWAIT CONST_CAST CONST COLON_COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(template_argument_list) = WCHAR_T VOLATILE VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SIZEOF SIGNED SHORT RESTRICT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_D PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_D PP_IFDEF_A PP_IFDEF PP_IF PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_STDCALL MS_REF MS_CDECL MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CV_MACRO CO_AWAIT CONST_CAST CONST COLON_COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(template_argument) = WCHAR_T VOLATILE VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SIZEOF SIGNED SHORT RESTRICT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_D PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_D PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_STDCALL MS_REF MS_CDECL MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CV_MACRO CO_AWAIT CONST_CAST CONST COLON_COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(templ_param_macro_call) = IDENT_TPM
first(swift_arg) = IDENT_V
first(suffix_macro_call) = IDENT_SXM
first(string_literal_list) = USER_STR_LITERAL STR_MARKER STR_MACRO STR_LITERAL PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S IDENT_LM
first(string_literal_) = USER_STR_LITERAL STR_MARKER STR_MACRO STR_LITERAL PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S IDENT_LM
first(string_literal) = USER_STR_LITERAL STR_MACRO STR_LITERAL PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S IDENT_LM
first(str_) = USER_STR_LITERAL STR_MACRO STR_LITERAL PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IFNDEF_S PP_IFDEF_S PP_ERROR PP_DEFINE PP_ IDENT_LM
first(storage_class_specifier) = VAX_GLOBALDEF THREAD_LOCAL STATIC REGISTER MUTABLE EXTERN
first(stmts_sub) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(stmts_macro_arg) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SIZEOF SIGNED SHORT RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_S PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_S PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TM IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DOUBLE DOT DELETE DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(stmt_macro_call) = IDENT_SM
first(stmt_macro_arg) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SIZEOF SIGNED SHORT RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_S PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_S PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TM IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DOUBLE DOT DELETE DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(static_assert_declaration) = STATIC_ASSERT
first(statement_seq_opt) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(statement) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(specs_sub) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OVERRIDE OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT LONG INT INLINE IDENT_VM IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT FINAL EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
first(special_token) = TY_TEMPL_GT_ TY_LPAREN_ TEMPL_LT_ PP_ENDIF_ OBJC_SYNTHESIZE OBJC_DYNAMIC OBJC_DEFS IDENT_ BS AT
first(simple_type_specifier) = WCHAR_T VOID UNSIGNED TYPE_MACRO SIGNED SHORT LONG INT IDENT_IM IDENT_C IDENT HEAD_COLON_COLON FLOAT DOUBLE DECLTYPE CHAR8_T CHAR32_T CHAR16_T CHAR BOOL AUTO
first(simple_template_id_) = IDENT_IM IDENT
first(simple_template_id) = IDENT_IM IDENT
first(simple_requirement) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(simple_capture) = THIS STAR IDENT_V AMP
first(shift_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(separated_nonempty_list(COMMA,type_id)) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT PP_IF_D PP_IFNDEF_D PP_IFDEF_D MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT HEAD_COLON_COLON FLOAT ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO
first(separated_nonempty_list(COMMA,objc_struct_dtor)) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE COLON CC_MACRO
first(separated_nonempty_list(COMMA,objc_property_attr)) = IDENT
first(separated_nonempty_list(COMMA,objc_class_name)) = IDENT_V IDENT
first(separated_nonempty_list(COMMA,objc_avail_item)) = PTR_STAR IDENT_V IDENT
first(selection_statement) = SWITCH IF ELSE
first(return_type_requirement) = MINUS_GT
first(restricted_xor_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_unary_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_shift_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_rel_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_prim_expr) = USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL TY_TILDE THIS STR_MARKER STR_MACRO STR_LITERAL REQUIRES PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S OPERATOR NULLPTR LAM_LBRACKET INT_MACRO INT_LITERAL IDENT_V IDENT_LM IDENT_IM IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL DECLTYPE CHAR_LITERAL BOOL_LITERAL
first(restricted_postfix_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TYPE_MACRO TYPENAME TYPEID THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S OPERATOR NULLPTR MINUS_GT LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT DYNAMIC_CAST DOUBLE DOT DECLTYPE CONST_CAST CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO
first(restricted_pm_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_mult_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_lor_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_land_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_ior_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_eq_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_decls) = USING TEMPLATE PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN NS_MACRO NAMESPACE INLINE IDENT_NSM IDENT_DSM IDENT_AM GNU_ATTR EXTERN DECL_MACRO ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(restricted_decl) = USING TEMPLATE PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN NS_MACRO NAMESPACE INLINE IDENT_NSM IDENT_DSM IDENT_AM GNU_ATTR EXTERN DECL_MACRO ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(restricted_cond_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_comp_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_cast_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_assign_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_and_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(restricted_add_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_PM IDENT_OM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DOUBLE DOT DELETE DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(requires_expression) = REQUIRES
first(requires_clause) = REQUIRES
first(requirement_seq) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(requirement_parameter_list) = LPAREN
first(requirement_body) = LBRACE
first(requirement) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(relational_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(ref_qualifier) = AMP_AMP AMP
first(quasi_keyword) = OVERRIDE FINAL EXPECTS ENSURES AXIOM AUDIT ASSERT
first(qualified_id) = IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(pure_specifier) = EQ
first(ptr_operator) = PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(ptr_declarator) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE CC_MACRO
first(ptr_abstract_declarator) = TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_C PP_IFNDEF_C PP_IFDEF_C PARAMS_MACRO MS_STDCALL MS_CDECL LBRACKET IDENT_PM IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE CC_MACRO
first(primary_expression) = USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL TY_TILDE THIS STR_MARKER STR_MACRO STR_LITERAL REQUIRES PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR LPAREN LAM_LBRACKET INT_MACRO INT_LITERAL IDENT_V IDENT_LM IDENT_IM IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL DUMMY_EXPR DECLTYPE CHAR_LITERAL BOOL_LITERAL
first(pp_templ_param_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_templ_param_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_templ_param_else_group) = PP_ELSE
first(pp_templ_param_elif_group) = PP_ELIF
first(pp_templ_arg_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_templ_arg_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_templ_arg_else_group) = PP_ELSE
first(pp_templ_arg_elif_group) = PP_ELIF
first(pp_str_if_section) = PP_IF_S PP_IFNDEF_S PP_IFDEF_S
first(pp_str_if_group) = PP_IF_S PP_IFNDEF_S PP_IFDEF_S
first(pp_str_else_group) = PP_ELSE
first(pp_str_elif_group) = PP_ELIF
first(pp_stmt_if_section_closing) = PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING
first(pp_stmt_if_section_close_open) = PP_IF_CLOSE_OPEN PP_IFNDEF_CLOSE_OPEN PP_IFDEF_CLOSE_OPEN
first(pp_stmt_if_section_broken) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_stmt_if_section) = PP_IF_D PP_IFNDEF_D PP_IFNDEF PP_IFDEF_D PP_IFDEF PP_IF
first(pp_stmt_if_group_closing) = PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING
first(pp_stmt_if_group_close_open) = PP_IF_CLOSE_OPEN PP_IFNDEF_CLOSE_OPEN PP_IFDEF_CLOSE_OPEN
first(pp_stmt_if_group_broken) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_stmt_if_group) = PP_IF_D PP_IFNDEF_D PP_IFNDEF PP_IFDEF_D PP_IFDEF PP_IF
first(pp_stmt_else_group_closing) = PP_ELSE
first(pp_stmt_else_group_close_open) = PP_ELSE
first(pp_stmt_else_group_broken) = PP_ELSE
first(pp_stmt_else_group) = PP_ELSE
first(pp_stmt_elif_group_closing) = PP_ELIF
first(pp_stmt_elif_group_close_open) = PP_ELIF
first(pp_stmt_elif_group_broken) = PP_ELIF
first(pp_stmt_elif_group) = PP_ELIF
first(pp_spec_if_section) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_spec_if_group) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_spec_else_group) = PP_ELSE
first(pp_spec_elif_group) = PP_ELIF
first(pp_param_list) = IDENT ELLIPSIS
first(pp_param_if_section) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_param_if_group) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_param_else_group) = PP_ELSE
first(pp_param_elif_group) = PP_ELIF
first(pp_p_if_section) = PP_IF_P PP_IFNDEF_P PP_IFDEF_P
first(pp_p_if_group) = PP_IF_P PP_IFNDEF_P PP_IFDEF_P
first(pp_p_else_group) = PP_ELSE
first(pp_p_elif_group) = PP_ELIF
first(pp_old_param_decl_list_if_section) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_old_param_decl_list_if_group) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_old_param_decl_list_else_group) = PP_ELSE
first(pp_old_param_decl_list_elif_group) = PP_ELIF
first(pp_objc_proto_name_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_objc_proto_name_else_group) = PP_ELSE
first(pp_objc_proto_name_elif_group) = PP_ELIF
first(pp_objc_ivar_decl_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_objc_ivar_decl_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_objc_ivar_decl_else_group) = PP_ELSE
first(pp_objc_ivar_decl_elif_group) = PP_ELIF
first(pp_objc_idecl_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_objc_idecl_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_objc_idecl_else_group) = PP_ELSE
first(pp_objc_idecl_elif_group) = PP_ELIF
first(pp_minit_if_section_broken) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_minit_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_minit_if_group_broken) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_minit_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_minit_else_group_broken) = PP_ELSE
first(pp_minit_else_group) = PP_ELSE
first(pp_minit_elif_group_broken) = PP_ELIF
first(pp_minit_elif_group) = PP_ELIF
first(pp_mdecl_if_section_broken) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_mdecl_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_mdecl_if_group_broken) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_mdecl_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_mdecl_else_group_broken) = PP_ELSE
first(pp_mdecl_else_group) = PP_ELSE
first(pp_mdecl_elif_group_broken) = PP_ELIF
first(pp_mdecl_elif_group) = PP_ELIF
first(pp_lor_if_section) = PP_IF_O PP_IFNDEF_O PP_IFDEF_O
first(pp_lor_if_group) = PP_IF_O PP_IFNDEF_O PP_IFDEF_O
first(pp_lor_else_group) = PP_ELSE
first(pp_lor_elif_group) = PP_ELIF
first(pp_land_if_section) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(pp_land_if_group) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(pp_land_else_group) = PP_ELSE
first(pp_land_elif_group) = PP_ELIF
first(pp_ior_if_section_seq) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_ior_if_section) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_ior_if_group) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_ior_else_group) = PP_ELSE
first(pp_ior_elif_group) = PP_ELIF
first(pp_init_if_section) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(pp_init_if_group) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(pp_init_else_group) = PP_ELSE
first(pp_init_elif_group) = PP_ELIF
first(pp_ifx_x) = PP_IF_X PP_IFNDEF_X PP_IFDEF_X
first(pp_ifx_shift) = PP_IF_SHIFT PP_IFNDEF_SHIFT PP_IFDEF_SHIFT
first(pp_ifx_s) = PP_IF_S PP_IFNDEF_S PP_IFDEF_S
first(pp_ifx_p) = PP_IF_P PP_IFNDEF_P PP_IFDEF_P
first(pp_ifx_o) = PP_IF_O PP_IFNDEF_O PP_IFDEF_O
first(pp_ifx_i) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(pp_ifx_h) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H
first(pp_ifx_eh) = PP_IF_EH PP_IFNDEF_EH PP_IFDEF_EH
first(pp_ifx_e) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_ifx_d) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_ifx_cond_) = PP_IF_COND_ PP_IFNDEF_COND_ PP_IFDEF_COND_
first(pp_ifx_cond) = PP_IF_COND PP_IFNDEF_COND PP_IFDEF_COND
first(pp_ifx_closing) = PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING
first(pp_ifx_close_open) = PP_IF_CLOSE_OPEN PP_IFNDEF_CLOSE_OPEN PP_IFDEF_CLOSE_OPEN
first(pp_ifx_cb) = PP_IF_CB PP_IFNDEF_CB PP_IFDEF_CB
first(pp_ifx_c) = PP_IF_C PP_IFNDEF_C PP_IFDEF_C
first(pp_ifx_b) = PP_IF_B PP_IFNDEF_B PP_IFDEF_B
first(pp_ifx_attr) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR
first(pp_ifx_a) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(pp_ifx) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_ifstmt_if_section_closing) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_ifstmt_if_group_closing) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_ifstmt_else_group_closing) = PP_ELSE
first(pp_ifstmt_elif_group_closing) = PP_ELIF
first(pp_idtor_if_section) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(pp_idtor_if_group) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(pp_idtor_else_group) = PP_ELSE
first(pp_idtor_elif_group) = PP_ELIF
first(pp_handler_if_section_broken) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H
first(pp_handler_if_section) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H
first(pp_handler_if_group_broken) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H
first(pp_handler_if_group) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H
first(pp_handler_else_group_broken) = PP_ELSE
first(pp_handler_else_group) = PP_ELSE
first(pp_handler_elif_group_broken) = PP_ELIF
first(pp_handler_elif_group) = PP_ELIF
first(pp_gnu_asm_if_section) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_gnu_asm_if_group) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_gnu_asm_else_group) = PP_ELSE
first(pp_gnu_asm_elif_group) = PP_ELIF
first(pp_func_head_if_section_broken) = PP_IF_D PP_IFNDEF_D PP_IFNDEF PP_IFDEF_D PP_IFDEF PP_IF
first(pp_func_head_if_group_broken) = PP_IF_D PP_IFNDEF_D PP_IFNDEF PP_IFDEF_D PP_IFDEF PP_IF
first(pp_func_head_else_group_broken) = PP_ELSE
first(pp_func_head_elif_group_broken) = PP_ELIF
first(pp_func_body_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_func_body_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_func_body_else_group) = PP_ELSE
first(pp_func_body_elif_group) = PP_ELIF
first(pp_expr_if_section_broken) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_expr_if_section) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_expr_if_group_broken) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_expr_if_group) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_expr_else_group_broken) = PP_ELSE
first(pp_expr_else_group) = PP_ELSE
first(pp_expr_elif_group_broken) = PP_ELIF
first(pp_expr_elif_group) = PP_ELIF
first(pp_enum_if_section_closing) = PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING
first(pp_enum_if_group_closing) = PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING
first(pp_enum_head_if_section) = PP_IF_EH PP_IFNDEF_EH PP_IFDEF_EH
first(pp_enum_head_if_group) = PP_IF_EH PP_IFNDEF_EH PP_IFDEF_EH
first(pp_enum_head_else_group) = PP_ELSE
first(pp_enum_head_elif_group) = PP_ELIF
first(pp_enum_else_group_closing) = PP_ELSE
first(pp_enum_elif_group_closing) = PP_ELIF
first(pp_endif) = PP_ENDIF
first(pp_else) = PP_ELSE
first(pp_elif) = PP_ELIF
first(pp_edef_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_edef_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_edef_else_group) = PP_ELSE
first(pp_edef_elif_group) = PP_ELIF
first(pp_dtor_if_section_broken) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_dtor_if_section) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_dtor_if_group_broken) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_dtor_if_group) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_dtor_else_group_broken) = PP_ELSE
first(pp_dtor_else_group) = PP_ELSE
first(pp_dtor_elif_group_broken) = PP_ELIF
first(pp_dtor_elif_group) = PP_ELIF
first(pp_dinit_if_section) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(pp_dinit_if_group) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(pp_dinit_else_group) = PP_ELSE
first(pp_dinit_elif_group) = PP_ELIF
first(pp_decl_spec_if_section) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_decl_spec_if_group) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(pp_decl_spec_else_group) = PP_ELSE
first(pp_decl_spec_elif_group) = PP_ELIF
first(pp_decl_if_section_broken) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_decl_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_decl_if_group_broken) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_decl_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_decl_else_group_broken) = PP_ELSE
first(pp_decl_else_group) = PP_ELSE
first(pp_decl_elif_group_broken) = PP_ELIF
first(pp_decl_elif_group) = PP_ELIF
first(pp_ctor_init_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_ctor_init_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_ctor_init_else_group) = PP_ELSE
first(pp_ctor_init_elif_group) = PP_ELIF
first(pp_control_line) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_ERROR PP_DEFINE PP_
first(pp_cond_tl_if_section) = PP_IF_COND_ PP_IFNDEF_COND_ PP_IFDEF_COND_
first(pp_cond_tl_if_group) = PP_IF_COND_ PP_IFNDEF_COND_ PP_IFDEF_COND_
first(pp_cond_tl_else_group) = PP_ELSE
first(pp_cond_tl_elif_group) = PP_ELIF
first(pp_cond_if_section) = PP_IF_COND PP_IFNDEF_COND PP_IFDEF_COND
first(pp_cond_if_group) = PP_IF_COND PP_IFNDEF_COND PP_IFDEF_COND
first(pp_cond_hd_if_section) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_cond_hd_if_group) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_cond_hd_else_group) = PP_ELSE
first(pp_cond_hd_elif_group) = PP_ELIF
first(pp_cond_else_group) = PP_ELSE
first(pp_cond_elif_group) = PP_ELIF
first(pp_concat) = IDENT_IM
first(pp_class_head_if_section_broken) = PP_IF_C PP_IFNDEF_C PP_IFDEF_C
first(pp_class_head_if_section) = PP_IF_C PP_IFNDEF_C PP_IFDEF_C
first(pp_class_head_if_group_broken) = PP_IF_C PP_IFNDEF_C PP_IFDEF_C
first(pp_class_head_if_group) = PP_IF_C PP_IFNDEF_C PP_IFDEF_C
first(pp_class_head_else_group_broken) = PP_ELSE
first(pp_class_head_else_group) = PP_ELSE
first(pp_class_head_elif_group_broken) = PP_ELIF
first(pp_class_head_elif_group) = PP_ELIF
first(pp_class_body_if_section) = PP_IF_CB PP_IFNDEF_CB PP_IFDEF_CB
first(pp_class_body_if_group) = PP_IF_CB PP_IFNDEF_CB PP_IFDEF_CB
first(pp_class_body_else_group) = PP_ELSE
first(pp_class_body_elif_group) = PP_ELIF
first(pp_cc_if_section) = PP_IF_C PP_IFNDEF_C PP_IFDEF_C
first(pp_cc_if_group) = PP_IF_C PP_IFNDEF_C PP_IFDEF_C
first(pp_cc_else_group) = PP_ELSE
first(pp_cc_elif_group) = PP_ELIF
first(pp_capture_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_capture_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_capture_else_group) = PP_ELSE
first(pp_capture_elif_group) = PP_ELIF
first(pp_base_clause_if_section) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_base_clause_if_group) = PP_IFNDEF PP_IFDEF PP_IF
first(pp_base_clause_else_group) = PP_ELSE
first(pp_base_clause_elif_group) = PP_ELIF
first(pp_attr_if_section) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR
first(pp_attr_if_group) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR
first(pp_attr_else_group) = PP_ELSE
first(pp_attr_elif_group) = PP_ELIF
first(pp_args_if_section_closing) = PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING
first(pp_args_if_group_closing) = PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING
first(pp_args_else_group_closing) = PP_ELSE
first(pp_args_elif_group_closing) = PP_ELIF
first(pp_aexpr_if_section_closing) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_aexpr_if_section) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_aexpr_if_group_closing) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_aexpr_if_group) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(pp_aexpr_else_group_closing) = PP_ELSE
first(pp_aexpr_else_group) = PP_ELSE
first(pp_aexpr_elif_group_closing) = PP_ELIF
first(pp_aexpr_elif_group) = PP_ELIF
first(pp_a_if_section) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(pp_a_if_group) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(pp_a_else_group) = PP_ELSE
first(pp_a_elif_group) = PP_ELIF
first(postfix_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT DYNAMIC_CAST DUMMY_EXPR DOUBLE DEFINED DECLTYPE CONST_CAST CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO
first(pm_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(placeholder_type_specifier) = IDENT_IM IDENT_C IDENT HEAD_COLON_COLON DECLTYPE AUTO
first(params_body_macro_call) = IDENT_PBM
first(params_body_macro) = PARAMS_BODY_MACRO IDENT_PBM
first(parameters_and_qualifiers) = TY_LPAREN PARAMS_MACRO IDENT_PM
first(parameter_declaration_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PARAM_DECL_MACRO OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(parameter_declaration_clause) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PARAM_DECL_MACRO OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(parameter_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(operator_function_id) = OPERATOR
first(operator) = TILDE STAR_EQ STAR SLASH_EQ SLASH PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC OP_MACRO NEW MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACKET HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EXCLAM EQ_EQ EQ DELETE CO_AWAIT BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
first(opaque_enum_declaration) = ENUM
first(op_macro_call) = IDENT_OM
first(old_param_decl_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(old_param_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(old_init_decl_list) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE CC_MACRO
first(odd_stmt) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CASE BREAK BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(odd_mult_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(odd_mem_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(odd_expr) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(odd_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(objc_visibility_spec) = OBJC_PUBLIC OBJC_PROTECTED OBJC_PRIVATE OBJC_PACKAGE
first(objc_try_block) = OBJC_TRY
first(objc_try) = OBJC_TRY
first(objc_superclass) = COLON
first(objc_struct_dtor) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE COLON CC_MACRO
first(objc_struct_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(objc_selector_expr) = OBJC_SELECTOR
first(objc_selector) = IDENT_V IDENT
first(objc_qualified_interface_decl) = OBJC_REQUIRED OBJC_OPTIONAL
first(objc_qualified_idecl_seq) = OBJC_REQUIRED OBJC_OPTIONAL
first(objc_protocol_ref_list) = TEMPL_LT
first(objc_protocol_name_list) = PP_IFNDEF PP_IFDEF PP_IF IDENT
first(objc_protocol_name) = IDENT
first(objc_protocol_decl_list) = OBJC_PROTOCOL
first(objc_protocol_decl) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN OBJC_PROTOCOL IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(objc_property_decl) = OBJC_PROPERTY
first(objc_property_attrs_decl) = TY_LPAREN
first(objc_property_attr) = IDENT
first(objc_method_type) = TY_LPAREN
first(objc_method_selector) = IDENT_V IDENT COLON
first(objc_method_decl) = OBJC_PLUS OBJC_MINUS
first(objc_message_selector) = IDENT_V COLON
first(objc_message_expr) = OBJC_LBRACKET
first(objc_keyword_selector) = IDENT_V IDENT COLON
first(objc_keyword_dtor) = IDENT_V IDENT COLON
first(objc_keyword_arg) = IDENT_V COLON
first(objc_interface_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OBJC_UNKNOWN OBJC_PROPERTY OBJC_PLUS OBJC_MINUS NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
first(objc_instance_vars) = LBRACE
first(objc_instance_var_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF OBJC_PUBLIC OBJC_PROTECTED OBJC_PRIVATE OBJC_PACKAGE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(objc_identifier) = IDENT_V IDENT
first(objc_idecl_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OBJC_UNKNOWN OBJC_PROPERTY OBJC_PLUS OBJC_MINUS NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
first(objc_finally) = OBJC_FINALLY
first(objc_encode_expr) = OBJC_ENCODE
first(objc_class_name) = IDENT_V IDENT
first(objc_class_interface) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN OBJC_INTERFACE IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(objc_class_decl_list) = OBJC_CLASS
first(objc_category_interface) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN OBJC_INTERFACE IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(objc_catch_clause) = OBJC_CATCH
first(objc_available) = OBJC_AVAILABLE
first(objc_avail_item) = PTR_STAR IDENT_V IDENT
first(noptr_new_declarator) = LBRACKET
first(noptr_declarator) = TY_TILDE TY_LPAREN PP_IF_E PP_IFNDEF_E PP_IFDEF_E OPERATOR IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE
first(noptr_abstract_pack_declarator) = ELLIPSIS_
first(noptr_abstract_declarator) = TY_LPAREN PARAMS_MACRO LBRACKET IDENT_PM
first(nonempty_list(token)) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LINE PP_INCLUDE PP_ERROR PP_DEFINE PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OVERRIDE OR_EQ OR OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_PLUS OBJC_MINUS OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_CDECL MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FLOAT_LITERAL FLOAT FINAL FALSE EXTERN EXPORT EXPLICIT EXPECTS EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ENSURES END_ASM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOXYGEN_CMD DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BS_IDENT BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AXIOM AUTO AUDIT ATTR_LBRACKET AT ASSERT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(nonempty_list(swift_arg)) = IDENT_V
first(nonempty_list(q_prop_token)) = INT_LITERAL IDENT_V IDENT BOOL_LITERAL
first(nonempty_list(pp_gnu_asm_if_section)) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E
first(nonempty_list(pp_control_line)) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_ERROR PP_DEFINE PP_
first(nonempty_list(odd_else_stmt)) = RBRACE
first(nonempty_list(objc_keyword_dtor)) = IDENT_V IDENT COLON
first(nonempty_list(objc_keyword_arg)) = IDENT_V COLON
first(nonempty_list(objc_instance_var_decl)) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF OBJC_PUBLIC OBJC_PROTECTED OBJC_PRIVATE OBJC_PACKAGE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(nonempty_list(objc_catch_clause)) = OBJC_CATCH
first(nonempty_list(multiplicative_unit)) = STAR SLASH PERC
first(nonempty_list(int_literal)) = INT_LITERAL
first(nonempty_list(header_name_token)) = TY_TEMPL_GT TEMPL_LT TEMPL_GT SLASH LT IDENT_V IDENT GT
first(nonempty_list(gnu_asm_token)) = VOLATILE USER_INT_LITERAL UNSIGNED TY_TEMPL_GT TY_LPAREN TILDE TEMPL_LT TEMPL_GT STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SLASH SIGNED SHORT SHARP RPAREN REINTERPRET_CAST RBRACKET RBRACE PTR_STAR PTR_AMP_AMP PTR_AMP PP_STRINGIZED PLUS PERC OBJC_UNKNOWN MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_LM IDENT HEAD_COLON_COLON HAT GT_GT GT_EQ GT GOTO FLOAT_LITERAL FLOAT EXCLAM_EQ EXCLAM EQ_EQ EQ ELSE DYNAMIC_CAST DOUBLE DOT CONST_CAST CONST COMMA COLON_COLON COLON CHAR BS_IDENT BS BOOL BAR_BAR BAR AMP_AMP AMP
first(nonempty_list(designator)) = LBRACKET DOT
first(nonempty_list(additive_unit)) = PLUS MINUS
first(nonempty_list(_pp_lor_if_section)) = PP_IF_O PP_IFNDEF_O PP_IFDEF_O
first(nonempty_list(QUEST)) = QUEST
first(noexcept_specifier) = THROW NOEXCEPT_MACRO NOEXCEPT
first(noexcept_expression) = NOEXCEPT
first(nodeclspec_function_definition) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IF_ATTR PP_IFNDEF_E PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_E PP_IFDEF_C PP_IFDEF_ATTR OPERATOR OBJC_UNKNOWN MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE CC_MACRO ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(new_type_id) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT HEAD_COLON_COLON FLOAT ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO
first(new_placement) = LPAREN
first(new_initializer) = NEW_INIT_MACRO LPAREN INI_LBRACE
first(new_expression) = NEW MS_REF COLON_COLON
first(new_declarator) = PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP LBRACKET IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(nested_requirement) = SUB_REQUIRES
first(nested_namespace_definition_head) = NAMESPACE
first(nested_namespace_definition) = NAMESPACE
first(nested_name_specifier) = IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(namespace_definition) = NS_MACRO NAMESPACE INLINE IDENT_NSM
first(namespace_body) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
first(named_namespace_definition_head) = NS_MACRO NAMESPACE INLINE
first(named_namespace_definition) = NS_MACRO NAMESPACE INLINE
first(multiplicative_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(ms_warn_spec_list) = IDENT_V
first(ms_warn_spec) = IDENT_V
first(ms_attr) = MS_ATTR_LBRACKET
first(module_import_declaration) = IMPORT
first(mid_typaram) = 
first(mid_templ_head) = 
first(mid_templ_decl) = 
first(mid_paren_open) = 
first(mid_paren_close) = 
first(mid_objc_cat_iface) = 
first(mid_init) = 
first(mid_brace_open) = 
first(mid_brace_close) = 
first(member_specification) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(member_declarator_list) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT_B IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE COLON CC_MACRO
first(member_declarator) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT_B IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE COLON CC_MACRO
first(member_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(mem_initializer_list) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFNDEF PP_IFDEF_E PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ IDENT_V IDENT_IM IDENT_EM IDENT_DSM IDENT_AGM IDENT HEAD_COLON_COLON DECLTYPE
first(mem_initializer_id) = IDENT_V IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(mem_initializer) = PP_IF_E PP_IFNDEF_E PP_IFDEF_E IDENT_V IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(mem_init_macro_call) = IDENT_EM IDENT_DSM IDENT_AGM
first(mem_decls_sub) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(mem_decl_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(mem_access_spec_head) = PUBLIC PROTECTED PRIVATE ACC_SPEC_MACRO
first(mem_access_spec) = PUBLIC PROTECTED PRIVATE ACC_SPEC_MACRO
first(main) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
first(macro_fun_head) = PP_DEFINE
first(macro_arg_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPLATE STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_S PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_S PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAMS_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN NULLPTR NS_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IDENT_V IDENT_TM IDENT_PM IDENT_OM IDENT_NSM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ EQ ENUM ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DOXYGEN_LINE DOXYGEN_CMD DOUBLE DOT DELIM_MACRO DELETE DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CASE BOOL_LITERAL BOOL BEGIN_STMTS BEGIN_QPROP BEGIN_ASM BASE_COLON BAR_EQ BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ARG_MACRO AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(macro_arg) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPLATE STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_S PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_S PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAMS_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN NULLPTR NS_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IDENT_V IDENT_TM IDENT_PM IDENT_OM IDENT_NSM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ EQ ENUM ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DOXYGEN_LINE DOXYGEN_CMD DOUBLE DOT DELETE DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CASE BOOL_LITERAL BOOL BEGIN_STMTS BEGIN_QPROP BEGIN_ASM BASE_COLON BAR_EQ BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(lor_unit_seq) = PP_IF_O PP_IFNDEF_O PP_IFDEF_O IDENT_LOM
first(lor_macro_call) = IDENT_LOM
first(logical_or_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(logical_and_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(literal_operator_id) = OPERATOR
first(literal_macro_call) = IDENT_LM
first(literal) = USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL STR_MARKER STR_MACRO STR_LITERAL PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S NULLPTR INT_MACRO INT_LITERAL IDENT_LM FLOAT_LITERAL CHAR_LITERAL BOOL_LITERAL
first(list(str_)) = USER_STR_LITERAL STR_MACRO STR_LITERAL PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IFNDEF_S PP_IFDEF_S PP_ERROR PP_DEFINE PP_ IDENT_LM
first(list(pp_templ_param_elif_group)) = PP_ELIF
first(list(pp_templ_arg_elif_group)) = PP_ELIF
first(list(pp_str_elif_group)) = PP_ELIF
first(list(pp_stmt_elif_group_closing)) = PP_ELIF
first(list(pp_stmt_elif_group_close_open)) = PP_ELIF
first(list(pp_stmt_elif_group_broken)) = PP_ELIF
first(list(pp_stmt_elif_group)) = PP_ELIF
first(list(pp_spec_elif_group)) = PP_ELIF
first(list(pp_param_elif_group)) = PP_ELIF
first(list(pp_p_elif_group)) = PP_ELIF
first(list(pp_old_param_decl_list_elif_group)) = PP_ELIF
first(list(pp_objc_proto_name_elif_group)) = PP_ELIF
first(list(pp_objc_ivar_decl_elif_group)) = PP_ELIF
first(list(pp_objc_idecl_elif_group)) = PP_ELIF
first(list(pp_minit_elif_group_broken)) = PP_ELIF
first(list(pp_minit_elif_group)) = PP_ELIF
first(list(pp_mdecl_elif_group_broken)) = PP_ELIF
first(list(pp_mdecl_elif_group)) = PP_ELIF
first(list(pp_lor_elif_group)) = PP_ELIF
first(list(pp_land_elif_group)) = PP_ELIF
first(list(pp_ior_elif_group)) = PP_ELIF
first(list(pp_init_elif_group)) = PP_ELIF
first(list(pp_ifstmt_elif_group_closing)) = PP_ELIF
first(list(pp_idtor_elif_group)) = PP_ELIF
first(list(pp_handler_elif_group_broken)) = PP_ELIF
first(list(pp_handler_elif_group)) = PP_ELIF
first(list(pp_gnu_asm_elif_group)) = PP_ELIF
first(list(pp_func_head_elif_group_broken)) = PP_ELIF
first(list(pp_func_body_elif_group)) = PP_ELIF
first(list(pp_expr_elif_group_broken)) = PP_ELIF
first(list(pp_expr_elif_group)) = PP_ELIF
first(list(pp_enum_head_elif_group)) = PP_ELIF
first(list(pp_enum_elif_group_closing)) = PP_ELIF
first(list(pp_edef_elif_group)) = PP_ELIF
first(list(pp_dtor_elif_group_broken)) = PP_ELIF
first(list(pp_dtor_elif_group)) = PP_ELIF
first(list(pp_dinit_elif_group)) = PP_ELIF
first(list(pp_decl_spec_elif_group)) = PP_ELIF
first(list(pp_decl_elif_group_broken)) = PP_ELIF
first(list(pp_decl_elif_group)) = PP_ELIF
first(list(pp_ctor_init_elif_group)) = PP_ELIF
first(list(pp_control_line)) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_ERROR PP_DEFINE PP_
first(list(pp_cond_tl_elif_group)) = PP_ELIF
first(list(pp_cond_hd_elif_group)) = PP_ELIF
first(list(pp_cond_elif_group)) = PP_ELIF
first(list(pp_class_head_elif_group_broken)) = PP_ELIF
first(list(pp_class_head_elif_group)) = PP_ELIF
first(list(pp_class_body_elif_group)) = PP_ELIF
first(list(pp_cc_elif_group)) = PP_ELIF
first(list(pp_capture_elif_group)) = PP_ELIF
first(list(pp_base_clause_elif_group)) = PP_ELIF
first(list(pp_attr_elif_group)) = PP_ELIF
first(list(pp_args_elif_group_closing)) = PP_ELIF
first(list(pp_aexpr_elif_group_closing)) = PP_ELIF
first(list(pp_aexpr_elif_group)) = PP_ELIF
first(list(pp_a_elif_group)) = PP_ELIF
first(list(gnu_asm_token_)) = VOLATILE USER_INT_LITERAL UNSIGNED TY_TEMPL_GT TY_LPAREN TILDE TEMPL_LT TEMPL_GT STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SLASH SIGNED SHORT SHARP SEMICOLON RPAREN REINTERPRET_CAST RBRACKET RBRACE PTR_STAR PTR_AMP_AMP PTR_AMP PP_STRINGIZED PLUS PERC OBJC_UNKNOWN MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_LM IDENT HEAD_COLON_COLON HAT GT_GT GT_EQ GT GOTO FLOAT_LITERAL FLOAT EXCLAM_EQ EXCLAM EQ_EQ EQ ELSE DYNAMIC_CAST DOUBLE DOT CONST_CAST CONST COMMA COLON_COLON COLON CHAR BS_IDENT BS BOOL BAR_BAR BAR AMP_AMP AMP
first(list(gnu_asm_token)) = VOLATILE USER_INT_LITERAL UNSIGNED TY_TEMPL_GT TY_LPAREN TILDE TEMPL_LT TEMPL_GT STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SLASH SIGNED SHORT SHARP RPAREN REINTERPRET_CAST RBRACKET RBRACE PTR_STAR PTR_AMP_AMP PTR_AMP PP_STRINGIZED PLUS PERC OBJC_UNKNOWN MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_LM IDENT HEAD_COLON_COLON HAT GT_GT GT_EQ GT GOTO FLOAT_LITERAL FLOAT EXCLAM_EQ EXCLAM EQ_EQ EQ ELSE DYNAMIC_CAST DOUBLE DOT CONST_CAST CONST COMMA COLON_COLON COLON CHAR BS_IDENT BS BOOL BAR_BAR BAR AMP_AMP AMP
first(list(asm_token)) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN REQUIRES REINTERPRET_CAST REGISTER RBRACKET QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LPAREN PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OR_EQ OR OPERATOR NULLPTR NOT_EQ NOT NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO FRIEND FOR FLOAT_LITERAL FLOAT FALSE EXTERN EXPORT EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AUTO AT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(list(_pp_lor_elif_group)) = PP_ELIF
first(list(_pp_land_elif_group)) = PP_ELIF
first(list(_pp_ior_elif_group)) = PP_ELIF
first(list(_pp_func_head_elif_group)) = PP_ELIF
first(list(_pp_eor_elif_group)) = PP_ELIF
first(list(INT_LITERAL)) = INT_LITERAL
first(linkage_specification) = EXTERN
first(land_unit_seq) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(lambda_introducer) = LAM_LBRACKET
first(lambda_expression) = LAM_LBRACKET
first(lambda_declarator) = TY_LPAREN
first(lambda_capture) = THIS STAR PP_IFNDEF PP_IFDEF PP_IF IDENT_V EQ ELLIPSIS AMP
first(labeled_statement) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_IM IDENT_AM IDENT GNU_ATTR DEFAULT CASE ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(label_seq) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_IM IDENT_AM IDENT GNU_ATTR DEFAULT CASE ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(label) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_IM IDENT_AM IDENT GNU_ATTR DEFAULT CASE ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(jump_statement) = RETURN GOTO CO_RETURN CONTINUE BREAK
first(iteration_statement) = WHILE ODD_FOR FOR DO
first(iteration_macro) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(initializer_list) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
first(initializer_clause) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(initializer_) = LPAREN INI_LBRACE EQ
first(init_sub) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM EQ DYNAMIC_CAST DUMMY_EXPR DOUBLE DOT DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
first(init_statement) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_EXPR DOUBLE DELETE DEFINED DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(init_declarator_list) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_I PP_IF_E PP_IF_C PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_I PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE CC_MACRO
first(init_declarator) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE CC_MACRO
first(init_capture) = IDENT_V AMP
first(inclusive_or_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(identifier_list) = PARAM_DECL_MACRO IDENT_V
first(id_macro_call) = IDENT_IM
first(id_expression) = TY_TILDE OPERATOR IDENT_V IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(has_include_expression) = HAS_INCLUDE
first(has_attribute_expression) = HAS_CPP_ATTRIBUTE
first(handler_seq) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H CATCH
first(handler) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H CATCH
first(gnu_attribute_seq) = IDENT_AM GNU_ATTR ATTR_MACRO
first(gnu_attribute) = IDENT_AM GNU_ATTR ATTR_MACRO
first(gnu_asm_frag_seq) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFDEF_E PP_ERROR PP_DEFINE PP_
first(gnu_asm_attr) = GNU_ASM
first(function_try_block) = TRY
first(function_specifier) = VIRTUAL EXPLICIT
first(function_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(function_body) = TRY PP_IFNDEF PP_IFDEF PP_IF LBRACE IDENT_BM EQ DUMMY_BODY COLON BODY_MACRO
first(for_range_initializer) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(for_range_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(fold_operator) = STAR_EQ STAR SLASH_EQ SLASH PLUS_EQ PLUS PERC_EQ PERC MINUS_GT_STAR MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT_STAR COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
first(fold_expression) = FOLD_LPAREN
first(extra_keyword) = RESTRICT MS_STDCALL MS_CDECL MS_ASM GNU_ATTR GNU_ASM
first(expression_list_opt) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
first(expression_list) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
first(expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(expr_sub) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COMMA COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(expr_or_braced_init_list) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(expr_macro_call) = IDENT_EM
first(explicit_specifier) = EXPLICIT
first(explicit_specialization) = TEMPLATE
first(explicit_instantiation) = TEMPLATE EXTERN
first(exclusive_or_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(exception_declaration) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FLOAT ELLIPSIS ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(etors_sub) = WCHAR_T VOLATILE VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STAR SIZEOF SIGNED SHORT RESTRICT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_D PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_D PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_STDCALL MS_REF MS_CDECL MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CV_MACRO CO_AWAIT CONST_CAST CONST COLON_COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(equality_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(enumerator_list) = STMT_MACRO PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IFNDEF PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ IDENT_E IDENT_DSM
first(enumerator_definition) = STMT_MACRO PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IFNDEF PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ IDENT_E IDENT_DSM
first(enumerator) = IDENT_E IDENT_DSM
first(enum_specifier) = PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IFNDEF_EH PP_IFDEF_EH IDENT_E ENUM ACC_SPEC_MACRO
first(enum_key) = ENUM
first(enum_head) = IDENT_E ENUM
first(enum_base) = COLON BASE_MACRO
first(enclosing_namespace_specifier) = IDENT
first(empty_declaration) = SEMICOLON
first(elaborated_type_specifier) = UNION STRUCT MS_REF ELAB_ENUM ELAB_CLASS CLASS
first(dtors_sub) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PARAM_DECL_MACRO OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(designator) = LBRACKET DOT
first(designated_initializer_clause) = LBRACKET IDENT_V DOT
first(delete_expression) = DELETE COLON_COLON
first(defining_type_specifier_seq) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_C PP_IFNDEF_EH PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_C MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT IDENT_TM IDENT_IM IDENT_E IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FLOAT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(defining_type_specifier) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_C PP_IFNDEF_EH PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_C MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT IDENT_TM IDENT_IM IDENT_E IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FLOAT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(defining_type_id) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_C PP_IFNDEF_EH PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_C MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT IDENT_TM IDENT_IM IDENT_E IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FLOAT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(defined_macro_expression) = DEFINED
first(deduction_guide) = IDENT
first(decltype_specifier) = DECLTYPE
first(decls_sub) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
first(declarator_id) = TY_TILDE OPERATOR IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DECLTYPE
first(declarator) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE CC_MACRO
first(declaration_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
first(declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
first(decl_specifier_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(decl_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_C PP_IFNDEF_EH PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_C MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
first(decl_spec_macro_call) = IDENT_DM
first(decl_spec_macro) = DECL_SPEC_MACRO
first(decl_macro_call_) = IDENT_V
first(decl_OR_stmt_macro_call) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(decl_OR_expr) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_EXPR DOUBLE DELETE DEFINED DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(cv_qualifier_seq) = VOLATILE RESTRICT MS_STDCALL MS_CDECL IDENT_CM CV_MACRO CONST CC_MACRO
first(cv_qualifier) = VOLATILE RESTRICT MS_STDCALL MS_CDECL IDENT_CM CV_MACRO CONST CC_MACRO
first(cuda_exec_config) = CUDA_LT_LT_LT
first(ctor_initializer) = PP_IFNDEF PP_IFDEF PP_IF COLON
first(conversion_type_id) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT HEAD_COLON_COLON FLOAT ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO
first(conversion_function_id) = OPERATOR
first(conversion_declarator) = PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(contract_level_opt) = DEFAULT AXIOM AUDIT
first(contract_level) = DEFAULT AXIOM AUDIT
first(contract_attribute_specifier) = ATTR_LBRACKET
first(constraint_logical_or_expression) = USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL TY_TILDE THIS STR_MARKER STR_MACRO STR_LITERAL REQUIRES PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR LPAREN LAM_LBRACKET INT_MACRO INT_LITERAL IDENT_V IDENT_LM IDENT_IM IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL DUMMY_EXPR DECLTYPE CHAR_LITERAL BOOL_LITERAL
first(constraint_logical_and_expression) = USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL TY_TILDE THIS STR_MARKER STR_MACRO STR_LITERAL REQUIRES PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR LPAREN LAM_LBRACKET INT_MACRO INT_LITERAL IDENT_V IDENT_LM IDENT_IM IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL DUMMY_EXPR DECLTYPE CHAR_LITERAL BOOL_LITERAL
first(constraint_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(constant_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(conditional_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(condition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SIZEOF SIGNED SHORT RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AVAILABLE NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(cond_unit_seq) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(concept_definition) = CONCEPT
first(compound_statement) = LBRACE
first(compound_requirement) = LBRACE
first(compare_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(class_virt_specifier) = VIRT_SPEC_MACRO MS_SEALED FINAL
first(class_specifier) = UNION STRUCT PUBLIC PROTECTED PRIVATE PP_IF_C PP_IFNDEF_C PP_IFDEF_C MS_REF MS_ATTR_LBRACKET IDENT_CHM ELAB_CLASS CLASS_HEAD_MACRO CLASS ACC_SPEC_MACRO
first(class_or_decltype) = IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(class_name) = IDENT_IM IDENT
first(class_key) = UNION STRUCT MS_REF ELAB_CLASS CLASS
first(class_head_name) = IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(class_head) = UNION STRUCT MS_REF IDENT_CHM ELAB_CLASS CLASS_HEAD_MACRO CLASS
first(cast_key) = STATIC_CAST REINTERPRET_CAST DYNAMIC_CAST CONST_CAST
first(cast_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(capture_macro_call) = IDENT_EM
first(capture_list) = THIS STAR PP_IFNDEF PP_IFDEF PP_IF IDENT_V ELLIPSIS AMP
first(capture_default) = EQ AMP
first(capture) = THIS STAR IDENT_V ELLIPSIS AMP
first(braced_init_list) = INI_LBRACE
first(brace_or_equal_initializer) = INI_LBRACE EQ
first(block_literal_expression) = TY_HAT
first(block_head_macro) = IDENT_BHM BLOCK_HEAD_MACRO
first(block_end_macro) = IDENT_BEM BLOCK_END_MACRO
first(block_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OBJC_UNKNOWN NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
first(base_specifier_list) = VIRTUAL PUBLIC PROTECTED PRIVATE PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_IM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR DECLTYPE ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(base_specifier) = VIRTUAL PUBLIC PROTECTED PRIVATE PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_IM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR DECLTYPE ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(base_clause) = PP_IFNDEF PP_IFDEF PP_IF BASE_COLON
first(balanced_token_seq_opt) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RETURN REQUIRES REINTERPRET_CAST REGISTER QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OR_EQ OR OPERATOR NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO FRIEND FOR FLOAT_LITERAL FLOAT FALSE EXTERN EXPORT EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AUTO AT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(balanced_token_seq) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RETURN REQUIRES REINTERPRET_CAST REGISTER QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OR_EQ OR OPERATOR NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO FRIEND FOR FLOAT_LITERAL FLOAT FALSE EXTERN EXPORT EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AUTO AT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(balanced_token) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RETURN REQUIRES REINTERPRET_CAST REGISTER QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OR_EQ OR OPERATOR NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO FRIEND FOR FLOAT_LITERAL FLOAT FALSE EXTERN EXPORT EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AUTO AT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
first(await_expression) = CO_AWAIT
first(attribute_using_prefix) = USING
first(attribute_token) = IDENT_V IDENT CONST
first(attribute_specifier_seq) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(attribute_specifier) = OBJC_UNKNOWN IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(attribute_scoped_token) = IDENT
first(attribute_namespace_seq) = IDENT
first(attribute_list) = IDENT_V IDENT CONST COMMA
first(attribute_declaration) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(attribute_argument_clause_opt) = TY_LPAREN LPAREN IDENT_V
first(attribute_argument_clause) = TY_LPAREN LPAREN IDENT_V
first(attribute) = IDENT_V IDENT CONST
first(attr_macro_call) = IDENT_AM
first(assignment_operator) = STAR_EQ SLASH_EQ PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ BAR_EQ AMP_EQ
first(assignment_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(asm_block) = BEGIN_ASM
first(and_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(alignment_specifier) = ALIGNAS
first(alias_declaration) = USING
first(additive_expression) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
first(access_specifier) = PUBLIC PROTECTED PRIVATE ACC_SPEC_MACRO
first(acc_annot) = IDENT
first(abstract_pack_declarator) = PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DECLTYPE
first(abstract_declarator) = TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_C PP_IFNDEF_C PP_IFDEF_C PARAMS_MACRO MS_STDCALL MS_CDECL LBRACKET IDENT_PM IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DECLTYPE CC_MACRO
first(_using_directive) = USING PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
first(_using_declaration) = USING
first(_type_specifier_seq) = WCHAR_T VOLATILE VOID UNSIGNED UNION TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT HEAD_COLON_COLON FLOAT ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO
first(_static_assert_declaration) = STATIC_ASSERT
first(_statement_seq) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(_simple_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
first(_pp_param_list) = IDENT
first(_pp_lor_if_section) = PP_IF_O PP_IFNDEF_O PP_IFDEF_O
first(_pp_lor_if_group) = PP_IF_O PP_IFNDEF_O PP_IFDEF_O
first(_pp_lor_else_group) = PP_ELSE
first(_pp_lor_elif_group) = PP_ELIF
first(_pp_land_if_section) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(_pp_land_if_group) = PP_IF_A PP_IFNDEF_A PP_IFDEF_A
first(_pp_land_else_group) = PP_ELSE
first(_pp_land_elif_group) = PP_ELIF
first(_pp_ior_if_section) = PP_IF_B PP_IFNDEF_B PP_IFDEF_B
first(_pp_ior_if_group) = PP_IF_B PP_IFNDEF_B PP_IFDEF_B
first(_pp_ior_else_group) = PP_ELSE
first(_pp_ior_elif_group) = PP_ELIF
first(_pp_idtor_if_section) = PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP IDENT_IM IDENT HEAD_COLON_COLON DECLTYPE
first(_pp_func_head_if_section) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(_pp_func_head_if_group) = PP_IF_D PP_IFNDEF_D PP_IFDEF_D
first(_pp_func_head_else_group) = PP_ELSE
first(_pp_func_head_elif_group) = PP_ELIF
first(_pp_eor_if_section) = PP_IF_X PP_IFNDEF_X PP_IFDEF_X
first(_pp_eor_if_group) = PP_IF_X PP_IFNDEF_X PP_IFDEF_X
first(_pp_eor_else_group) = PP_ELSE
first(_pp_eor_elif_group) = PP_ELIF
first(_pp_dinit_if_section_list) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I
first(_pp_define) = PP_DEFINE
first(_opaque_enum_declaration) = ENUM
first(_namespace_alias_definition) = NAMESPACE
first(_initializer_list) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
first(_init_statement) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SIZEOF SIGNED SHORT RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_EXPR DOUBLE DELETE DEFINED DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
first(_designated_initializer_list) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I LBRACKET IDENT_V DOT
first(_block_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OBJC_UNKNOWN NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
first(_asm_declaration) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS
first(_alias_declaration) = USING
first(__initializer_list) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
minimal(yield_expression) = (* 2 *) CO_YIELD DUMMY_EXPR
minimal(virt_specifier_seq) = (* 1 *) FINAL
minimal(virt_specifier) = (* 1 *) FINAL
minimal(using_declarator_list) = (* 2 *) HEAD_COLON_COLON IDENT_V
minimal(using_declarator) = (* 2 *) HEAD_COLON_COLON IDENT_V
minimal(using_declaration) = (* 4 *) USING HEAD_COLON_COLON IDENT_V SEMICOLON
minimal(unqualified_id) = (* 1 *) IDENT_V
minimal(unnamed_namespace_definition_head) = (* 1 *) NAMESPACE
minimal(unnamed_namespace_definition) = (* 3 *) NAMESPACE LBRACE RBRACE
minimal(unary_operator) = (* 1 *) STAR
minimal(unary_expression) = (* 1 *) DUMMY_EXPR
minimal(typename_specifier) = (* 3 *) TYPENAME IDENT_IM ARGS_MACRO
minimal(type_sub) = (* 2 *) CLASS EOF
minimal(type_specifier) = (* 1 *) IDENT
minimal(type_requirement) = (* 3 *) TYPENAME IDENT SEMICOLON
minimal(type_parameter) = (* 1 *) CLASS
minimal(type_name) = (* 1 *) IDENT
minimal(type_id) = (* 1 *) IDENT
minimal(type_constraint) = (* 1 *) IDENT_C
minimal(ty_macro_call) = (* 3 *) IDENT_TM LPAREN RPAREN
minimal(try_block) = (* 3 *) TRY LBRACE RBRACE
minimal(translation_unit) = (* 1 *) EOF
minimal(trailing_return_type) = (* 2 *) MINUS_GT IDENT
minimal(token_seq) = (* 1 *) LPAREN
minimal(token_no_paren) = (* 1 *) IDENT
minimal(token) = (* 1 *) LPAREN
minimal(throw_expression) = (* 1 *) THROW_
minimal(template_parameter_list) = (* 1 *) CLASS
minimal(template_parameter) = (* 1 *) CLASS
minimal(template_id) = (* 3 *) IDENT TEMPL_LT TEMPL_GT
minimal(template_head) = (* 4 *) TEMPLATE TEMPL_LT CLASS TEMPL_GT
minimal(template_declaration) = (* 5 *) TEMPLATE TEMPL_LT CLASS TEMPL_GT SEMICOLON
minimal(template_argument_list_opt) = (* 0 *)
minimal(template_argument_list) = (* 1 *) DUMMY_EXPR
minimal(template_argument) = (* 1 *) DUMMY_EXPR
minimal(templ_param_macro_call) = (* 3 *) IDENT_TPM LPAREN RPAREN
minimal(swift_arg) = (* 2 *) IDENT_V COLON
minimal(suffix_macro_call) = (* 3 *) IDENT_SXM LPAREN RPAREN
minimal(string_literal_list) = (* 1 *) STR_LITERAL
minimal(string_literal_) = (* 1 *) STR_LITERAL
minimal(string_literal) = (* 1 *) STR_LITERAL
minimal(str_) = (* 1 *) STR_LITERAL
minimal(storage_class_specifier) = (* 1 *) STATIC
minimal(stmts_sub) = (* 2 *) SEMICOLON EOF
minimal(stmts_macro_arg) = (* 1 *) THIS
minimal(stmt_macro_call) = (* 3 *) IDENT_SM LPAREN RPAREN
minimal(stmt_macro_arg) = (* 1 *) THIS
minimal(static_assert_declaration) = (* 5 *) STATIC_ASSERT LPAREN DUMMY_EXPR RPAREN SEMICOLON
minimal(statement_seq_opt) = (* 0 *)
minimal(statement) = (* 1 *) SEMICOLON
minimal(specs_sub) = (* 2 *) FINAL EOF
minimal(special_token) = (* 1 *) PP_ENDIF_
minimal(simple_type_specifier) = (* 1 *) IDENT
minimal(simple_template_id_) = (* 3 *) IDENT TEMPL_LT TY_TEMPL_GT
minimal(simple_template_id) = (* 3 *) IDENT TEMPL_LT TEMPL_GT
minimal(simple_requirement) = (* 2 *) DUMMY_EXPR SEMICOLON
minimal(simple_capture) = (* 1 *) IDENT_V
minimal(shift_expression) = (* 1 *) DUMMY_EXPR
minimal(separated_nonempty_list(COMMA,type_id)) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,objc_struct_dtor)) = (* 1 *) DUMMY_DTOR
minimal(separated_nonempty_list(COMMA,objc_property_attr)) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,objc_class_name)) = (* 1 *) IDENT
minimal(separated_nonempty_list(COMMA,objc_avail_item)) = (* 1 *) PTR_STAR
minimal(selection_statement) = (* 2 *) ELSE SEMICOLON
minimal(return_type_requirement) = (* 2 *) MINUS_GT IDENT_C
minimal(restricted_xor_expr) = (* 1 *) THIS
minimal(restricted_unary_expr) = (* 1 *) THIS
minimal(restricted_shift_expr) = (* 1 *) THIS
minimal(restricted_rel_expr) = (* 1 *) THIS
minimal(restricted_prim_expr) = (* 1 *) THIS
minimal(restricted_postfix_expr) = (* 1 *) THIS
minimal(restricted_pm_expr) = (* 1 *) THIS
minimal(restricted_mult_expr) = (* 1 *) THIS
minimal(restricted_lor_expr) = (* 1 *) THIS
minimal(restricted_land_expr) = (* 1 *) THIS
minimal(restricted_ior_expr) = (* 1 *) THIS
minimal(restricted_expr) = (* 1 *) THIS
minimal(restricted_eq_expr) = (* 1 *) THIS
minimal(restricted_decls) = (* 1 *) DECL_MACRO
minimal(restricted_decl) = (* 1 *) DECL_MACRO
minimal(restricted_cond_expr) = (* 1 *) THIS
minimal(restricted_comp_expr) = (* 1 *) THIS
minimal(restricted_cast_expr) = (* 1 *) THIS
minimal(restricted_assign_expr) = (* 1 *) THIS
minimal(restricted_and_expr) = (* 1 *) THIS
minimal(restricted_add_expr) = (* 1 *) THIS
minimal(requires_expression) = (* 5 *) REQUIRES LBRACE DUMMY_EXPR SEMICOLON RBRACE
minimal(requires_clause) = (* 2 *) REQUIRES DUMMY_EXPR
minimal(requirement_seq) = (* 2 *) DUMMY_EXPR SEMICOLON
minimal(requirement_parameter_list) = (* 2 *) LPAREN RPAREN
minimal(requirement_body) = (* 4 *) LBRACE DUMMY_EXPR SEMICOLON RBRACE
minimal(requirement) = (* 2 *) DUMMY_EXPR SEMICOLON
minimal(relational_expression) = (* 1 *) DUMMY_EXPR
minimal(ref_qualifier) = (* 1 *) AMP
minimal(quasi_keyword) = (* 1 *) AUDIT
minimal(qualified_id) = (* 2 *) HEAD_COLON_COLON IDENT_V
minimal(pure_specifier) = (* 2 *) EQ PURE_ZERO
minimal(ptr_operator) = (* 1 *) PTR_STAR
minimal(ptr_declarator) = (* 1 *) DUMMY_DTOR
minimal(ptr_abstract_declarator) = (* 1 *) PARAMS_MACRO
minimal(primary_expression) = (* 1 *) DUMMY_EXPR
minimal(pp_templ_param_if_section) = (* 6 *) PP_IFDEF IDENT NEWLINE CLASS PP_ENDIF NEWLINE
minimal(pp_templ_param_if_group) = (* 4 *) PP_IFDEF IDENT NEWLINE CLASS
minimal(pp_templ_param_else_group) = (* 3 *) PP_ELSE NEWLINE CLASS
minimal(pp_templ_param_elif_group) = (* 3 *) PP_ELIF NEWLINE CLASS
minimal(pp_templ_arg_if_section) = (* 6 *) PP_IFDEF IDENT NEWLINE DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_templ_arg_if_group) = (* 4 *) PP_IFDEF IDENT NEWLINE DUMMY_EXPR
minimal(pp_templ_arg_else_group) = (* 3 *) PP_ELSE NEWLINE DUMMY_EXPR
minimal(pp_templ_arg_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_EXPR
minimal(pp_str_if_section) = (* 5 *) PP_IFDEF_S IDENT_V NEWLINE PP_ENDIF NEWLINE
minimal(pp_str_if_group) = (* 3 *) PP_IFDEF_S IDENT_V NEWLINE
minimal(pp_str_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_str_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_stmt_if_section_closing) = (* 6 *) PP_IFDEF_CLOSING IDENT_V NEWLINE RBRACE PP_ENDIF NEWLINE
minimal(pp_stmt_if_section_close_open) = (* 8 *) PP_IFDEF_CLOSE_OPEN IDENT_V NEWLINE RBRACE FUNC_HEAD_MACRO LBRACE PP_ENDIF NEWLINE
minimal(pp_stmt_if_section_broken) = (* 6 *) PP_IFDEF IDENT NEWLINE LBRACE PP_ENDIF NEWLINE
minimal(pp_stmt_if_section) = (* 5 *) PP_IFDEF IDENT NEWLINE PP_ENDIF NEWLINE
minimal(pp_stmt_if_group_closing) = (* 4 *) PP_IFDEF_CLOSING IDENT_V NEWLINE RBRACE
minimal(pp_stmt_if_group_close_open) = (* 6 *) PP_IFDEF_CLOSE_OPEN IDENT_V NEWLINE RBRACE FUNC_HEAD_MACRO LBRACE
minimal(pp_stmt_if_group_broken) = (* 4 *) PP_IFDEF IDENT NEWLINE LBRACE
minimal(pp_stmt_if_group) = (* 3 *) PP_IFDEF IDENT NEWLINE
minimal(pp_stmt_else_group_closing) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_stmt_else_group_close_open) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_stmt_else_group_broken) = (* 3 *) PP_ELSE NEWLINE LBRACE
minimal(pp_stmt_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_stmt_elif_group_closing) = (* 3 *) PP_ELIF NEWLINE RBRACE
minimal(pp_stmt_elif_group_close_open) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_stmt_elif_group_broken) = (* 3 *) PP_ELIF NEWLINE LBRACE
minimal(pp_stmt_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_spec_if_section) = (* 5 *) PP_IFDEF_D IDENT_V NEWLINE PP_ENDIF NEWLINE
minimal(pp_spec_if_group) = (* 3 *) PP_IFDEF_D IDENT_V NEWLINE
minimal(pp_spec_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_spec_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_param_list) = (* 0 *)
minimal(pp_param_if_section) = (* 5 *) PP_IFDEF_E IDENT_V NEWLINE PP_ENDIF NEWLINE
minimal(pp_param_if_group) = (* 3 *) PP_IFDEF_E IDENT_V NEWLINE
minimal(pp_param_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_param_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_p_if_section) = (* 6 *) PP_IFDEF_P IDENT_V NEWLINE SEMICOLON PP_ENDIF NEWLINE
minimal(pp_p_if_group) = (* 4 *) PP_IFDEF_P IDENT_V NEWLINE SEMICOLON
minimal(pp_p_else_group) = (* 3 *) PP_ELSE NEWLINE SEMICOLON
minimal(pp_p_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_EXPR
minimal(pp_old_param_decl_list_if_section) = (* 6 *) PP_IFDEF_D IDENT_V NEWLINE DECL_MACRO PP_ENDIF NEWLINE
minimal(pp_old_param_decl_list_if_group) = (* 4 *) PP_IFDEF_D IDENT_V NEWLINE DECL_MACRO
minimal(pp_old_param_decl_list_else_group) = (* 3 *) PP_ELSE NEWLINE DECL_MACRO
minimal(pp_old_param_decl_list_elif_group) = (* 3 *) PP_ELIF NEWLINE DECL_MACRO
minimal(pp_objc_proto_name_if_section) = (* 6 *) PP_IFDEF IDENT NEWLINE IDENT PP_ENDIF NEWLINE
minimal(pp_objc_proto_name_else_group) = (* 3 *) PP_ELSE NEWLINE IDENT
minimal(pp_objc_proto_name_elif_group) = (* 3 *) PP_ELIF NEWLINE IDENT
minimal(pp_objc_ivar_decl_if_section) = (* 5 *) PP_IFDEF IDENT NEWLINE PP_ENDIF NEWLINE
minimal(pp_objc_ivar_decl_if_group) = (* 3 *) PP_IFDEF IDENT NEWLINE
minimal(pp_objc_ivar_decl_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_objc_ivar_decl_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_objc_idecl_if_section) = (* 5 *) PP_IFDEF IDENT NEWLINE PP_ENDIF NEWLINE
minimal(pp_objc_idecl_if_group) = (* 3 *) PP_IFDEF IDENT NEWLINE
minimal(pp_objc_idecl_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_objc_idecl_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_minit_if_section_broken) = (* 7 *) PP_IFDEF_E IDENT_V NEWLINE IDENT LPAREN PP_ENDIF NEWLINE
minimal(pp_minit_if_section) = (* 7 *) PP_IFDEF IDENT NEWLINE IDENT ARGS_MACRO PP_ENDIF NEWLINE
minimal(pp_minit_if_group_broken) = (* 5 *) PP_IFDEF_E IDENT_V NEWLINE IDENT LPAREN
minimal(pp_minit_if_group) = (* 5 *) PP_IFDEF IDENT NEWLINE IDENT ARGS_MACRO
minimal(pp_minit_else_group_broken) = (* 4 *) PP_ELSE NEWLINE IDENT LPAREN
minimal(pp_minit_else_group) = (* 4 *) PP_ELSE NEWLINE IDENT ARGS_MACRO
minimal(pp_minit_elif_group_broken) = (* 4 *) PP_ELIF NEWLINE IDENT LPAREN
minimal(pp_minit_elif_group) = (* 4 *) PP_ELIF NEWLINE IDENT ARGS_MACRO
minimal(pp_mdecl_if_section_broken) = (* 6 *) PP_IFDEF IDENT NEWLINE DUMMY_DTOR PP_ENDIF NEWLINE
minimal(pp_mdecl_if_section) = (* 5 *) PP_IFDEF IDENT NEWLINE PP_ENDIF NEWLINE
minimal(pp_mdecl_if_group_broken) = (* 4 *) PP_IFDEF IDENT NEWLINE DUMMY_DTOR
minimal(pp_mdecl_if_group) = (* 3 *) PP_IFDEF IDENT NEWLINE
minimal(pp_mdecl_else_group_broken) = (* 3 *) PP_ELSE NEWLINE DUMMY_DTOR
minimal(pp_mdecl_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_mdecl_elif_group_broken) = (* 3 *) PP_ELIF NEWLINE DUMMY_DTOR
minimal(pp_mdecl_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_lor_if_section) = (* 6 *) PP_IFDEF_O IDENT_V NEWLINE DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_lor_if_group) = (* 4 *) PP_IFDEF_O IDENT_V NEWLINE DUMMY_EXPR
minimal(pp_lor_else_group) = (* 3 *) PP_ELSE NEWLINE DUMMY_EXPR
minimal(pp_lor_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_EXPR
minimal(pp_land_if_section) = (* 7 *) PP_IFDEF_A IDENT_V NEWLINE DUMMY_EXPR AMP_AMP_BROKEN PP_ENDIF NEWLINE
minimal(pp_land_if_group) = (* 5 *) PP_IFDEF_A IDENT_V NEWLINE DUMMY_EXPR AMP_AMP_BROKEN
minimal(pp_land_else_group) = (* 4 *) PP_ELSE NEWLINE DUMMY_EXPR AMP_AMP_BROKEN
minimal(pp_land_elif_group) = (* 4 *) PP_ELIF NEWLINE DUMMY_EXPR AMP_AMP_BROKEN
minimal(pp_ior_if_section_seq) = (* 7 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR BAR PP_ENDIF NEWLINE
minimal(pp_ior_if_section) = (* 7 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR BAR PP_ENDIF NEWLINE
minimal(pp_ior_if_group) = (* 5 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR BAR
minimal(pp_ior_else_group) = (* 4 *) PP_ELSE NEWLINE DUMMY_EXPR BAR
minimal(pp_ior_elif_group) = (* 4 *) PP_ELIF NEWLINE DUMMY_EXPR BAR
minimal(pp_init_if_section) = (* 5 *) PP_IFDEF_I IDENT_V NEWLINE PP_ENDIF NEWLINE
minimal(pp_init_if_group) = (* 3 *) PP_IFDEF_I IDENT_V NEWLINE
minimal(pp_init_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_init_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_ifx_x) = (* 3 *) PP_IFDEF_X IDENT_V NEWLINE
minimal(pp_ifx_shift) = (* 3 *) PP_IFDEF_SHIFT IDENT_V NEWLINE
minimal(pp_ifx_s) = (* 3 *) PP_IFDEF_S IDENT_V NEWLINE
minimal(pp_ifx_p) = (* 3 *) PP_IFDEF_P IDENT_V NEWLINE
minimal(pp_ifx_o) = (* 3 *) PP_IFDEF_O IDENT_V NEWLINE
minimal(pp_ifx_i) = (* 3 *) PP_IFDEF_I IDENT_V NEWLINE
minimal(pp_ifx_h) = (* 3 *) PP_IFDEF_H IDENT_V NEWLINE
minimal(pp_ifx_eh) = (* 3 *) PP_IFDEF_EH IDENT_V NEWLINE
minimal(pp_ifx_e) = (* 3 *) PP_IFDEF_E IDENT_V NEWLINE
minimal(pp_ifx_d) = (* 3 *) PP_IFDEF_D IDENT_V NEWLINE
minimal(pp_ifx_cond_) = (* 3 *) PP_IFDEF_COND_ IDENT_V NEWLINE
minimal(pp_ifx_cond) = (* 3 *) PP_IFDEF_COND IDENT_V NEWLINE
minimal(pp_ifx_closing) = (* 3 *) PP_IFDEF_CLOSING IDENT_V NEWLINE
minimal(pp_ifx_close_open) = (* 3 *) PP_IFDEF_CLOSE_OPEN IDENT_V NEWLINE
minimal(pp_ifx_cb) = (* 3 *) PP_IFDEF_CB IDENT_V NEWLINE
minimal(pp_ifx_c) = (* 3 *) PP_IFDEF_C IDENT_V NEWLINE
minimal(pp_ifx_b) = (* 3 *) PP_IFDEF_B IDENT_V NEWLINE
minimal(pp_ifx_attr) = (* 3 *) PP_IFDEF_ATTR IDENT_V NEWLINE
minimal(pp_ifx_a) = (* 3 *) PP_IFDEF_A IDENT_V NEWLINE
minimal(pp_ifx) = (* 3 *) PP_IFDEF IDENT NEWLINE
minimal(pp_ifstmt_if_section_closing) = (* 7 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR RPAREN PP_ENDIF NEWLINE
minimal(pp_ifstmt_if_group_closing) = (* 5 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR RPAREN
minimal(pp_ifstmt_else_group_closing) = (* 4 *) PP_ELSE NEWLINE DUMMY_EXPR RPAREN
minimal(pp_ifstmt_elif_group_closing) = (* 4 *) PP_ELIF NEWLINE DUMMY_EXPR RPAREN
minimal(pp_idtor_if_section) = (* 6 *) PP_IFDEF_I IDENT_V NEWLINE DUMMY_DTOR PP_ENDIF NEWLINE
minimal(pp_idtor_if_group) = (* 4 *) PP_IFDEF_I IDENT_V NEWLINE DUMMY_DTOR
minimal(pp_idtor_else_group) = (* 3 *) PP_ELSE NEWLINE DUMMY_DTOR
minimal(pp_idtor_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_DTOR
minimal(pp_handler_if_section_broken) = (* 9 *) PP_IFDEF_H IDENT_V NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN PP_ENDIF NEWLINE
minimal(pp_handler_if_section) = (* 10 *) PP_IFDEF_H IDENT_V NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN DUMMY_STMT PP_ENDIF NEWLINE
minimal(pp_handler_if_group_broken) = (* 7 *) PP_IFDEF_H IDENT_V NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN
minimal(pp_handler_if_group) = (* 8 *) PP_IFDEF_H IDENT_V NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN DUMMY_STMT
minimal(pp_handler_else_group_broken) = (* 6 *) PP_ELSE NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN
minimal(pp_handler_else_group) = (* 7 *) PP_ELSE NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN DUMMY_STMT
minimal(pp_handler_elif_group_broken) = (* 6 *) PP_ELIF NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN
minimal(pp_handler_elif_group) = (* 7 *) PP_ELIF NEWLINE CATCH TY_LPAREN ELLIPSIS RPAREN DUMMY_STMT
minimal(pp_gnu_asm_if_section) = (* 6 *) PP_IFDEF_E IDENT_V NEWLINE IDENT PP_ENDIF NEWLINE
minimal(pp_gnu_asm_if_group) = (* 4 *) PP_IFDEF_E IDENT_V NEWLINE IDENT
minimal(pp_gnu_asm_else_group) = (* 3 *) PP_ELSE NEWLINE IDENT
minimal(pp_gnu_asm_elif_group) = (* 3 *) PP_ELIF NEWLINE IDENT
minimal(pp_func_head_if_section_broken) = (* 7 *) PP_IFDEF IDENT NEWLINE DUMMY_DTOR LBRACE PP_ENDIF NEWLINE
minimal(pp_func_head_if_group_broken) = (* 5 *) PP_IFDEF IDENT NEWLINE DUMMY_DTOR LBRACE
minimal(pp_func_head_else_group_broken) = (* 4 *) PP_ELSE NEWLINE DUMMY_DTOR LBRACE
minimal(pp_func_head_elif_group_broken) = (* 4 *) PP_ELIF NEWLINE DUMMY_DTOR LBRACE
minimal(pp_func_body_if_section) = (* 6 *) PP_IFDEF IDENT NEWLINE SEMICOLON PP_ENDIF NEWLINE
minimal(pp_func_body_if_group) = (* 4 *) PP_IFDEF IDENT NEWLINE SEMICOLON
minimal(pp_func_body_else_group) = (* 3 *) PP_ELSE NEWLINE SEMICOLON
minimal(pp_func_body_elif_group) = (* 3 *) PP_ELIF NEWLINE BODY_MACRO
minimal(pp_expr_if_section_broken) = (* 7 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR LPAREN PP_ENDIF NEWLINE
minimal(pp_expr_if_section) = (* 6 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_expr_if_group_broken) = (* 5 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR LPAREN
minimal(pp_expr_if_group) = (* 4 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR
minimal(pp_expr_else_group_broken) = (* 4 *) PP_ELSE NEWLINE DUMMY_EXPR LPAREN
minimal(pp_expr_else_group) = (* 3 *) PP_ELSE NEWLINE DUMMY_EXPR
minimal(pp_expr_elif_group_broken) = (* 4 *) PP_ELIF NEWLINE DUMMY_EXPR LPAREN
minimal(pp_expr_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_EXPR
minimal(pp_enum_if_section_closing) = (* 6 *) PP_IFDEF_CLOSING IDENT_V NEWLINE RBRACE PP_ENDIF NEWLINE
minimal(pp_enum_if_group_closing) = (* 4 *) PP_IFDEF_CLOSING IDENT_V NEWLINE RBRACE
minimal(pp_enum_head_if_section) = (* 6 *) PP_IFDEF_EH IDENT_V NEWLINE ENUM PP_ENDIF NEWLINE
minimal(pp_enum_head_if_group) = (* 4 *) PP_IFDEF_EH IDENT_V NEWLINE ENUM
minimal(pp_enum_head_else_group) = (* 3 *) PP_ELSE NEWLINE ENUM
minimal(pp_enum_head_elif_group) = (* 3 *) PP_ELIF NEWLINE ENUM
minimal(pp_enum_else_group_closing) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_enum_elif_group_closing) = (* 3 *) PP_ELIF NEWLINE RBRACE
minimal(pp_endif) = (* 2 *) PP_ENDIF NEWLINE
minimal(pp_else) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_elif) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_edef_if_section) = (* 6 *) PP_IFDEF IDENT NEWLINE IDENT_E PP_ENDIF NEWLINE
minimal(pp_edef_if_group) = (* 4 *) PP_IFDEF IDENT NEWLINE IDENT_E
minimal(pp_edef_else_group) = (* 3 *) PP_ELSE NEWLINE IDENT_E
minimal(pp_edef_elif_group) = (* 3 *) PP_ELIF NEWLINE IDENT_E
minimal(pp_dtor_if_section_broken) = (* 7 *) PP_IFDEF_D IDENT_V NEWLINE DUMMY_DTOR TY_LPAREN PP_ENDIF NEWLINE
minimal(pp_dtor_if_section) = (* 6 *) PP_IFDEF_E IDENT_V NEWLINE PARAMS_MACRO PP_ENDIF NEWLINE
minimal(pp_dtor_if_group_broken) = (* 5 *) PP_IFDEF_D IDENT_V NEWLINE DUMMY_DTOR TY_LPAREN
minimal(pp_dtor_if_group) = (* 4 *) PP_IFDEF_E IDENT_V NEWLINE PARAMS_MACRO
minimal(pp_dtor_else_group_broken) = (* 4 *) PP_ELSE NEWLINE DUMMY_DTOR TY_LPAREN
minimal(pp_dtor_else_group) = (* 3 *) PP_ELSE NEWLINE PARAMS_MACRO
minimal(pp_dtor_elif_group_broken) = (* 4 *) PP_ELIF NEWLINE DUMMY_DTOR TY_LPAREN
minimal(pp_dtor_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_DTOR
minimal(pp_dinit_if_section) = (* 8 *) PP_IFDEF_I IDENT_V NEWLINE IDENT_V COLON DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_dinit_if_group) = (* 6 *) PP_IFDEF_I IDENT_V NEWLINE IDENT_V COLON DUMMY_EXPR
minimal(pp_dinit_else_group) = (* 3 *) PP_ELSE NEWLINE ARG_MACRO
minimal(pp_dinit_elif_group) = (* 3 *) PP_ELIF NEWLINE ARG_MACRO
minimal(pp_decl_spec_if_section) = (* 5 *) PP_IFDEF_D IDENT_V NEWLINE PP_ENDIF NEWLINE
minimal(pp_decl_spec_if_group) = (* 3 *) PP_IFDEF_D IDENT_V NEWLINE
minimal(pp_decl_spec_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_decl_spec_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_decl_if_section_broken) = (* 6 *) PP_IFDEF IDENT NEWLINE DUMMY_DTOR PP_ENDIF NEWLINE
minimal(pp_decl_if_section) = (* 5 *) PP_IFDEF IDENT NEWLINE PP_ENDIF NEWLINE
minimal(pp_decl_if_group_broken) = (* 4 *) PP_IFDEF IDENT NEWLINE DUMMY_DTOR
minimal(pp_decl_if_group) = (* 3 *) PP_IFDEF IDENT NEWLINE
minimal(pp_decl_else_group_broken) = (* 3 *) PP_ELSE NEWLINE DUMMY_DTOR
minimal(pp_decl_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_decl_elif_group_broken) = (* 3 *) PP_ELIF NEWLINE DUMMY_DTOR
minimal(pp_decl_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_ctor_init_if_section) = (* 8 *) PP_IFDEF IDENT NEWLINE COLON IDENT ARGS_MACRO PP_ENDIF NEWLINE
minimal(pp_ctor_init_if_group) = (* 6 *) PP_IFDEF IDENT NEWLINE COLON IDENT ARGS_MACRO
minimal(pp_ctor_init_else_group) = (* 5 *) PP_ELSE NEWLINE COLON IDENT ARGS_MACRO
minimal(pp_ctor_init_elif_group) = (* 5 *) PP_ELIF NEWLINE COLON IDENT ARGS_MACRO
minimal(pp_control_line) = (* 2 *) PP_ERROR NEWLINE
minimal(pp_cond_tl_if_section) = (* 7 *) PP_IFDEF_COND_ IDENT_V NEWLINE COLON DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_cond_tl_if_group) = (* 5 *) PP_IFDEF_COND_ IDENT_V NEWLINE COLON DUMMY_EXPR
minimal(pp_cond_tl_else_group) = (* 4 *) PP_ELSE NEWLINE COLON DUMMY_EXPR
minimal(pp_cond_tl_elif_group) = (* 4 *) PP_ELIF NEWLINE COLON DUMMY_EXPR
minimal(pp_cond_if_section) = (* 7 *) PP_IFDEF_COND IDENT_V NEWLINE QUEST DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_cond_if_group) = (* 5 *) PP_IFDEF_COND IDENT_V NEWLINE QUEST DUMMY_EXPR
minimal(pp_cond_hd_if_section) = (* 9 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR QUEST DUMMY_EXPR COLON PP_ENDIF NEWLINE
minimal(pp_cond_hd_if_group) = (* 7 *) PP_IFDEF_E IDENT_V NEWLINE DUMMY_EXPR QUEST DUMMY_EXPR COLON
minimal(pp_cond_hd_else_group) = (* 6 *) PP_ELSE NEWLINE DUMMY_EXPR QUEST DUMMY_EXPR COLON
minimal(pp_cond_hd_elif_group) = (* 6 *) PP_ELIF NEWLINE DUMMY_EXPR QUEST DUMMY_EXPR COLON
minimal(pp_cond_else_group) = (* 4 *) PP_ELSE NEWLINE QUEST DUMMY_EXPR
minimal(pp_cond_elif_group) = (* 4 *) PP_ELIF NEWLINE QUEST DUMMY_EXPR
minimal(pp_concat) = (* 5 *) IDENT_IM ARGS_MACRO SHARP_SHARP IDENT_IM ARGS_MACRO
minimal(pp_class_head_if_section_broken) = (* 7 *) PP_IFDEF_C IDENT_V NEWLINE CLASS CLASS_LBRACE PP_ENDIF NEWLINE
minimal(pp_class_head_if_section) = (* 6 *) PP_IFDEF_C IDENT_V NEWLINE CLASS PP_ENDIF NEWLINE
minimal(pp_class_head_if_group_broken) = (* 5 *) PP_IFDEF_C IDENT_V NEWLINE CLASS CLASS_LBRACE
minimal(pp_class_head_if_group) = (* 4 *) PP_IFDEF_C IDENT_V NEWLINE CLASS
minimal(pp_class_head_else_group_broken) = (* 4 *) PP_ELSE NEWLINE CLASS CLASS_LBRACE
minimal(pp_class_head_else_group) = (* 3 *) PP_ELSE NEWLINE CLASS
minimal(pp_class_head_elif_group_broken) = (* 4 *) PP_ELIF NEWLINE CLASS CLASS_LBRACE
minimal(pp_class_head_elif_group) = (* 3 *) PP_ELIF NEWLINE CLASS
minimal(pp_class_body_if_section) = (* 7 *) PP_IFDEF_CB IDENT_V NEWLINE CLASS_LBRACE RBRACE PP_ENDIF NEWLINE
minimal(pp_class_body_if_group) = (* 5 *) PP_IFDEF_CB IDENT_V NEWLINE CLASS_LBRACE RBRACE
minimal(pp_class_body_else_group) = (* 4 *) PP_ELSE NEWLINE CLASS_LBRACE RBRACE
minimal(pp_class_body_elif_group) = (* 4 *) PP_ELIF NEWLINE CLASS_LBRACE RBRACE
minimal(pp_cc_if_section) = (* 6 *) PP_IFDEF_C IDENT_V NEWLINE MS_STDCALL PP_ENDIF NEWLINE
minimal(pp_cc_if_group) = (* 4 *) PP_IFDEF_C IDENT_V NEWLINE MS_STDCALL
minimal(pp_cc_else_group) = (* 3 *) PP_ELSE NEWLINE MS_STDCALL
minimal(pp_cc_elif_group) = (* 3 *) PP_ELIF NEWLINE MS_STDCALL
minimal(pp_capture_if_section) = (* 6 *) PP_IFDEF IDENT NEWLINE IDENT_V PP_ENDIF NEWLINE
minimal(pp_capture_if_group) = (* 4 *) PP_IFDEF IDENT NEWLINE IDENT_V
minimal(pp_capture_else_group) = (* 3 *) PP_ELSE NEWLINE IDENT_V
minimal(pp_capture_elif_group) = (* 3 *) PP_ELIF NEWLINE IDENT_V
minimal(pp_base_clause_if_section) = (* 6 *) PP_IFDEF IDENT NEWLINE IDENT PP_ENDIF NEWLINE
minimal(pp_base_clause_if_group) = (* 4 *) PP_IFDEF IDENT NEWLINE IDENT
minimal(pp_base_clause_else_group) = (* 3 *) PP_ELSE NEWLINE IDENT
minimal(pp_base_clause_elif_group) = (* 3 *) PP_ELIF NEWLINE IDENT
minimal(pp_attr_if_section) = (* 5 *) PP_IFDEF_ATTR IDENT_V NEWLINE PP_ENDIF NEWLINE
minimal(pp_attr_if_group) = (* 3 *) PP_IFDEF_ATTR IDENT_V NEWLINE
minimal(pp_attr_else_group) = (* 2 *) PP_ELSE NEWLINE
minimal(pp_attr_elif_group) = (* 2 *) PP_ELIF NEWLINE
minimal(pp_args_if_section_closing) = (* 6 *) PP_IFDEF_CLOSING IDENT_V NEWLINE SEMICOLON PP_ENDIF NEWLINE
minimal(pp_args_if_group_closing) = (* 4 *) PP_IFDEF_CLOSING IDENT_V NEWLINE SEMICOLON
minimal(pp_args_else_group_closing) = (* 3 *) PP_ELSE NEWLINE SEMICOLON
minimal(pp_args_elif_group_closing) = (* 3 *) PP_ELIF NEWLINE SEMICOLON
minimal(pp_aexpr_if_section_closing) = (* 8 *) PP_IFDEF_E IDENT_V NEWLINE PLUS DUMMY_EXPR RPAREN PP_ENDIF NEWLINE
minimal(pp_aexpr_if_section) = (* 7 *) PP_IFDEF_E IDENT_V NEWLINE PLUS DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_aexpr_if_group_closing) = (* 6 *) PP_IFDEF_E IDENT_V NEWLINE PLUS DUMMY_EXPR RPAREN
minimal(pp_aexpr_if_group) = (* 5 *) PP_IFDEF_E IDENT_V NEWLINE PLUS DUMMY_EXPR
minimal(pp_aexpr_else_group_closing) = (* 5 *) PP_ELSE NEWLINE PLUS DUMMY_EXPR RPAREN
minimal(pp_aexpr_else_group) = (* 4 *) PP_ELSE NEWLINE PLUS DUMMY_EXPR
minimal(pp_aexpr_elif_group_closing) = (* 5 *) PP_ELIF NEWLINE PLUS DUMMY_EXPR RPAREN
minimal(pp_aexpr_elif_group) = (* 4 *) PP_ELIF NEWLINE PLUS DUMMY_EXPR
minimal(pp_a_if_section) = (* 6 *) PP_IFDEF_A IDENT_V NEWLINE DUMMY_EXPR PP_ENDIF NEWLINE
minimal(pp_a_if_group) = (* 4 *) PP_IFDEF_A IDENT_V NEWLINE DUMMY_EXPR
minimal(pp_a_else_group) = (* 3 *) PP_ELSE NEWLINE DUMMY_EXPR
minimal(pp_a_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_EXPR
minimal(postfix_expression) = (* 1 *) DUMMY_EXPR
minimal(pm_expression) = (* 1 *) DUMMY_EXPR
minimal(placeholder_type_specifier) = (* 1 *) AUTO
minimal(params_body_macro_call) = (* 3 *) IDENT_PBM LPAREN RPAREN
minimal(params_body_macro) = (* 1 *) PARAMS_BODY_MACRO
minimal(parameters_and_qualifiers) = (* 1 *) PARAMS_MACRO
minimal(parameter_declaration_list) = (* 1 *) STATIC
minimal(parameter_declaration_clause) = (* 0 *)
minimal(parameter_declaration) = (* 1 *) STATIC
minimal(operator_function_id) = (* 2 *) OPERATOR NEW
minimal(operator) = (* 1 *) NEW
minimal(opaque_enum_declaration) = (* 3 *) ENUM IDENT SEMICOLON
minimal(op_macro_call) = (* 3 *) IDENT_OM LPAREN RPAREN
minimal(old_param_decl_list) = (* 1 *) DECL_MACRO
minimal(old_param_decl) = (* 1 *) DECL_MACRO
minimal(old_init_decl_list) = (* 1 *) DUMMY_DTOR
minimal(odd_stmt) = (* 1 *) GNU_ASM
minimal(odd_mult_expr) = (* 2 *) DUMMY_EXPR STAR
minimal(odd_mem_decl) = (* 2 *) STATIC DUMMY_DTOR
minimal(odd_expr) = (* 3 *) TY_LPAREN IDENT RPAREN
minimal(odd_decl) = (* 1 *) ATTR_MACRO
minimal(objc_visibility_spec) = (* 1 *) OBJC_PRIVATE
minimal(objc_try_block) = (* 6 *) OBJC_TRY LBRACE RBRACE OBJC_FINALLY LBRACE RBRACE
minimal(objc_try) = (* 3 *) OBJC_TRY LBRACE RBRACE
minimal(objc_superclass) = (* 2 *) COLON IDENT
minimal(objc_struct_dtor) = (* 1 *) DUMMY_DTOR
minimal(objc_struct_decl) = (* 3 *) STATIC DUMMY_DTOR SEMICOLON
minimal(objc_selector_expr) = (* 4 *) OBJC_SELECTOR TY_LPAREN IDENT RPAREN
minimal(objc_selector) = (* 1 *) IDENT
minimal(objc_qualified_interface_decl) = (* 3 *) OBJC_OPTIONAL ASM SEMICOLON
minimal(objc_qualified_idecl_seq) = (* 3 *) OBJC_OPTIONAL ASM SEMICOLON
minimal(objc_protocol_ref_list) = (* 3 *) TEMPL_LT IDENT TY_TEMPL_GT
minimal(objc_protocol_name_list) = (* 1 *) IDENT
minimal(objc_protocol_name) = (* 1 *) IDENT
minimal(objc_protocol_decl_list) = (* 3 *) OBJC_PROTOCOL IDENT SEMICOLON
minimal(objc_protocol_decl) = (* 3 *) OBJC_PROTOCOL IDENT OBJC_END
minimal(objc_property_decl) = (* 4 *) OBJC_PROPERTY STATIC DUMMY_DTOR SEMICOLON
minimal(objc_property_attrs_decl) = (* 3 *) TY_LPAREN IDENT RPAREN
minimal(objc_property_attr) = (* 1 *) IDENT
minimal(objc_method_type) = (* 3 *) TY_LPAREN STATIC RPAREN
minimal(objc_method_selector) = (* 1 *) IDENT
minimal(objc_method_decl) = (* 3 *) OBJC_PLUS IDENT SEMICOLON
minimal(objc_message_selector) = (* 1 *) IDENT_V
minimal(objc_message_expr) = (* 4 *) OBJC_LBRACKET DUMMY_EXPR IDENT_V RBRACKET
minimal(objc_keyword_selector) = (* 2 *) COLON IDENT
minimal(objc_keyword_dtor) = (* 2 *) COLON IDENT
minimal(objc_keyword_arg) = (* 2 *) COLON DUMMY_EXPR
minimal(objc_interface_decl) = (* 2 *) ASM SEMICOLON
minimal(objc_instance_vars) = (* 2 *) LBRACE RBRACE
minimal(objc_instance_var_decl) = (* 1 *) OBJC_PRIVATE
minimal(objc_identifier) = (* 1 *) IDENT
minimal(objc_idecl_seq) = (* 2 *) ASM SEMICOLON
minimal(objc_finally) = (* 3 *) OBJC_FINALLY LBRACE RBRACE
minimal(objc_encode_expr) = (* 4 *) OBJC_ENCODE TY_LPAREN STATIC RPAREN
minimal(objc_class_name) = (* 1 *) IDENT
minimal(objc_class_interface) = (* 3 *) OBJC_INTERFACE IDENT OBJC_END
minimal(objc_class_decl_list) = (* 3 *) OBJC_CLASS IDENT SEMICOLON
minimal(objc_category_interface) = (* 5 *) OBJC_INTERFACE IDENT TY_LPAREN RPAREN OBJC_END
minimal(objc_catch_clause) = (* 6 *) OBJC_CATCH TY_LPAREN ELLIPSIS RPAREN LBRACE RBRACE
minimal(objc_available) = (* 4 *) OBJC_AVAILABLE TY_LPAREN PTR_STAR RPAREN
minimal(objc_avail_item) = (* 1 *) PTR_STAR
minimal(noptr_new_declarator) = (* 3 *) LBRACKET DUMMY_EXPR RBRACKET
minimal(noptr_declarator) = (* 1 *) DUMMY_DTOR
minimal(noptr_abstract_pack_declarator) = (* 1 *) ELLIPSIS_
minimal(noptr_abstract_declarator) = (* 1 *) PARAMS_MACRO
minimal(nonempty_list(token)) = (* 1 *) LPAREN
minimal(nonempty_list(swift_arg)) = (* 2 *) IDENT_V COLON
minimal(nonempty_list(q_prop_token)) = (* 1 *) IDENT
minimal(nonempty_list(pp_gnu_asm_if_section)) = (* 6 *) PP_IFDEF_E IDENT_V NEWLINE IDENT PP_ENDIF NEWLINE
minimal(nonempty_list(pp_control_line)) = (* 2 *) PP_ERROR NEWLINE
minimal(nonempty_list(odd_else_stmt)) = (* 3 *) RBRACE ELSE LBRACE
minimal(nonempty_list(objc_keyword_dtor)) = (* 2 *) COLON IDENT
minimal(nonempty_list(objc_keyword_arg)) = (* 2 *) COLON DUMMY_EXPR
minimal(nonempty_list(objc_instance_var_decl)) = (* 1 *) OBJC_PRIVATE
minimal(nonempty_list(objc_catch_clause)) = (* 6 *) OBJC_CATCH TY_LPAREN ELLIPSIS RPAREN LBRACE RBRACE
minimal(nonempty_list(multiplicative_unit)) = (* 2 *) STAR DUMMY_EXPR
minimal(nonempty_list(int_literal)) = (* 1 *) INT_LITERAL
minimal(nonempty_list(header_name_token)) = (* 1 *) IDENT
minimal(nonempty_list(gnu_asm_token)) = (* 1 *) IDENT
minimal(nonempty_list(designator)) = (* 2 *) DOT IDENT_V
minimal(nonempty_list(additive_unit)) = (* 2 *) PLUS DUMMY_EXPR
minimal(nonempty_list(_pp_lor_if_section)) = (* 7 *) PP_IFDEF_O IDENT_V NEWLINE BAR_BAR DUMMY_EXPR PP_ENDIF NEWLINE
minimal(nonempty_list(QUEST)) = (* 1 *) QUEST
minimal(noexcept_specifier) = (* 1 *) NOEXCEPT
minimal(noexcept_expression) = (* 4 *) NOEXCEPT LPAREN DUMMY_EXPR RPAREN
minimal(nodeclspec_function_definition) = (* 2 *) DUMMY_DTOR SEMICOLON
minimal(new_type_id) = (* 1 *) IDENT
minimal(new_placement) = (* 3 *) LPAREN ARG_MACRO RPAREN
minimal(new_initializer) = (* 1 *) NEW_INIT_MACRO
minimal(new_expression) = (* 2 *) NEW IDENT
minimal(new_declarator) = (* 1 *) PTR_STAR
minimal(nested_requirement) = (* 3 *) SUB_REQUIRES DUMMY_EXPR SEMICOLON
minimal(nested_namespace_definition_head) = (* 4 *) NAMESPACE IDENT COLON_COLON IDENT
minimal(nested_namespace_definition) = (* 6 *) NAMESPACE IDENT COLON_COLON IDENT LBRACE RBRACE
minimal(nested_name_specifier) = (* 1 *) HEAD_COLON_COLON
minimal(namespace_definition) = (* 3 *) NAMESPACE IDENT ODD_LBRACE
minimal(namespace_body) = (* 0 *)
minimal(named_namespace_definition_head) = (* 2 *) NAMESPACE IDENT
minimal(named_namespace_definition) = (* 3 *) NAMESPACE IDENT ODD_LBRACE
minimal(multiplicative_expression) = (* 1 *) DUMMY_EXPR
minimal(ms_warn_spec_list) = (* 3 *) IDENT_V COLON INT_LITERAL
minimal(ms_warn_spec) = (* 3 *) IDENT_V COLON INT_LITERAL
minimal(ms_attr) = (* 2 *) MS_ATTR_LBRACKET RBRACKET
minimal(module_import_declaration) = (* 3 *) IMPORT STR_LITERAL SEMICOLON
minimal(mid_typaram) = (* 0 *)
minimal(mid_templ_head) = (* 0 *)
minimal(mid_templ_decl) = (* 0 *)
minimal(mid_paren_open) = (* 0 *)
minimal(mid_paren_close) = (* 0 *)
minimal(mid_objc_cat_iface) = (* 0 *)
minimal(mid_init) = (* 0 *)
minimal(mid_brace_open) = (* 0 *)
minimal(mid_brace_close) = (* 0 *)
minimal(member_specification) = (* 1 *) SEMICOLON
minimal(member_declarator_list) = (* 1 *) DUMMY_DTOR
minimal(member_declarator) = (* 1 *) DUMMY_DTOR
minimal(member_declaration) = (* 1 *) SEMICOLON
minimal(mem_initializer_list) = (* 2 *) IDENT ARGS_MACRO
minimal(mem_initializer_id) = (* 1 *) IDENT
minimal(mem_initializer) = (* 2 *) IDENT ARGS_MACRO
minimal(mem_init_macro_call) = (* 3 *) IDENT_EM LPAREN RPAREN
minimal(mem_decls_sub) = (* 2 *) SEMICOLON EOF
minimal(mem_decl_seq) = (* 1 *) SEMICOLON
minimal(mem_access_spec_head) = (* 1 *) PRIVATE
minimal(mem_access_spec) = (* 2 *) PRIVATE COLON
minimal(main) = (* 1 *) EOF
minimal(macro_fun_head) = (* 3 *) PP_DEFINE IDENT PP_LPAREN
minimal(macro_arg_list) = (* 0 *)
minimal(macro_arg) = (* 0 *)
minimal(lor_unit_seq) = (* 3 *) IDENT_LOM LPAREN RPAREN
minimal(lor_macro_call) = (* 3 *) IDENT_LOM LPAREN RPAREN
minimal(logical_or_expression) = (* 1 *) DUMMY_EXPR
minimal(logical_and_expression) = (* 1 *) DUMMY_EXPR
minimal(literal_operator_id) = (* 2 *) OPERATOR USER_STR_LITERAL
minimal(literal_macro_call) = (* 3 *) IDENT_LM LPAREN RPAREN
minimal(literal) = (* 1 *) INT_LITERAL
minimal(list(str_)) = (* 0 *)
minimal(list(pp_templ_param_elif_group)) = (* 0 *)
minimal(list(pp_templ_arg_elif_group)) = (* 0 *)
minimal(list(pp_str_elif_group)) = (* 0 *)
minimal(list(pp_stmt_elif_group_closing)) = (* 0 *)
minimal(list(pp_stmt_elif_group_close_open)) = (* 0 *)
minimal(list(pp_stmt_elif_group_broken)) = (* 0 *)
minimal(list(pp_stmt_elif_group)) = (* 0 *)
minimal(list(pp_spec_elif_group)) = (* 0 *)
minimal(list(pp_param_elif_group)) = (* 0 *)
minimal(list(pp_p_elif_group)) = (* 0 *)
minimal(list(pp_old_param_decl_list_elif_group)) = (* 0 *)
minimal(list(pp_objc_proto_name_elif_group)) = (* 0 *)
minimal(list(pp_objc_ivar_decl_elif_group)) = (* 0 *)
minimal(list(pp_objc_idecl_elif_group)) = (* 0 *)
minimal(list(pp_minit_elif_group_broken)) = (* 0 *)
minimal(list(pp_minit_elif_group)) = (* 0 *)
minimal(list(pp_mdecl_elif_group_broken)) = (* 0 *)
minimal(list(pp_mdecl_elif_group)) = (* 0 *)
minimal(list(pp_lor_elif_group)) = (* 0 *)
minimal(list(pp_land_elif_group)) = (* 0 *)
minimal(list(pp_ior_elif_group)) = (* 0 *)
minimal(list(pp_init_elif_group)) = (* 0 *)
minimal(list(pp_ifstmt_elif_group_closing)) = (* 0 *)
minimal(list(pp_idtor_elif_group)) = (* 0 *)
minimal(list(pp_handler_elif_group_broken)) = (* 0 *)
minimal(list(pp_handler_elif_group)) = (* 0 *)
minimal(list(pp_gnu_asm_elif_group)) = (* 0 *)
minimal(list(pp_func_head_elif_group_broken)) = (* 0 *)
minimal(list(pp_func_body_elif_group)) = (* 0 *)
minimal(list(pp_expr_elif_group_broken)) = (* 0 *)
minimal(list(pp_expr_elif_group)) = (* 0 *)
minimal(list(pp_enum_head_elif_group)) = (* 0 *)
minimal(list(pp_enum_elif_group_closing)) = (* 0 *)
minimal(list(pp_edef_elif_group)) = (* 0 *)
minimal(list(pp_dtor_elif_group_broken)) = (* 0 *)
minimal(list(pp_dtor_elif_group)) = (* 0 *)
minimal(list(pp_dinit_elif_group)) = (* 0 *)
minimal(list(pp_decl_spec_elif_group)) = (* 0 *)
minimal(list(pp_decl_elif_group_broken)) = (* 0 *)
minimal(list(pp_decl_elif_group)) = (* 0 *)
minimal(list(pp_ctor_init_elif_group)) = (* 0 *)
minimal(list(pp_control_line)) = (* 0 *)
minimal(list(pp_cond_tl_elif_group)) = (* 0 *)
minimal(list(pp_cond_hd_elif_group)) = (* 0 *)
minimal(list(pp_cond_elif_group)) = (* 0 *)
minimal(list(pp_class_head_elif_group_broken)) = (* 0 *)
minimal(list(pp_class_head_elif_group)) = (* 0 *)
minimal(list(pp_class_body_elif_group)) = (* 0 *)
minimal(list(pp_cc_elif_group)) = (* 0 *)
minimal(list(pp_capture_elif_group)) = (* 0 *)
minimal(list(pp_base_clause_elif_group)) = (* 0 *)
minimal(list(pp_attr_elif_group)) = (* 0 *)
minimal(list(pp_args_elif_group_closing)) = (* 0 *)
minimal(list(pp_aexpr_elif_group_closing)) = (* 0 *)
minimal(list(pp_aexpr_elif_group)) = (* 0 *)
minimal(list(pp_a_elif_group)) = (* 0 *)
minimal(list(gnu_asm_token_)) = (* 0 *)
minimal(list(gnu_asm_token)) = (* 0 *)
minimal(list(asm_token)) = (* 0 *)
minimal(list(_pp_lor_elif_group)) = (* 0 *)
minimal(list(_pp_land_elif_group)) = (* 0 *)
minimal(list(_pp_ior_elif_group)) = (* 0 *)
minimal(list(_pp_func_head_elif_group)) = (* 0 *)
minimal(list(_pp_eor_elif_group)) = (* 0 *)
minimal(list(INT_LITERAL)) = (* 0 *)
minimal(linkage_specification) = (* 3 *) EXTERN STR_LITERAL SEMICOLON
minimal(land_unit_seq) = (* 7 *) PP_IFDEF_A IDENT_V NEWLINE DUMMY_EXPR AMP_AMP_BROKEN PP_ENDIF NEWLINE
minimal(lambda_introducer) = (* 2 *) LAM_LBRACKET RBRACKET
minimal(lambda_expression) = (* 3 *) LAM_LBRACKET RBRACKET DUMMY_STMT
minimal(lambda_declarator) = (* 2 *) TY_LPAREN RPAREN
minimal(lambda_capture) = (* 1 *) AMP
minimal(labeled_statement) = (* 3 *) IDENT COLON SEMICOLON
minimal(label_seq) = (* 2 *) IDENT COLON
minimal(label) = (* 2 *) IDENT COLON
minimal(jump_statement) = (* 2 *) BREAK SEMICOLON
minimal(iteration_statement) = (* 2 *) DO SEMICOLON
minimal(iteration_macro) = (* 3 *) DUMMY_EXPR LBRACE RBRACE
minimal(initializer_list) = (* 1 *) ARG_MACRO
minimal(initializer_clause) = (* 1 *) DUMMY_EXPR
minimal(initializer_) = (* 2 *) LPAREN RPAREN
minimal(init_sub) = (* 2 *) ARG_MACRO EOF
minimal(init_statement) = (* 1 *) SEMICOLON
minimal(init_declarator_list) = (* 1 *) DUMMY_DTOR
minimal(init_declarator) = (* 1 *) DUMMY_DTOR
minimal(init_capture) = (* 3 *) IDENT_V LPAREN RPAREN
minimal(inclusive_or_expression) = (* 1 *) DUMMY_EXPR
minimal(identifier_list) = (* 1 *) IDENT_V
minimal(id_macro_call) = (* 2 *) IDENT_IM ARGS_MACRO
minimal(id_expression) = (* 1 *) IDENT_V
minimal(has_include_expression) = (* 4 *) HAS_INCLUDE LPAREN IDENT RPAREN
minimal(has_attribute_expression) = (* 3 *) HAS_CPP_ATTRIBUTE LPAREN RPAREN
minimal(handler_seq) = (* 5 *) CATCH TY_LPAREN ELLIPSIS RPAREN DUMMY_STMT
minimal(handler) = (* 5 *) CATCH TY_LPAREN ELLIPSIS RPAREN DUMMY_STMT
minimal(gnu_attribute_seq) = (* 1 *) ATTR_MACRO
minimal(gnu_attribute) = (* 1 *) ATTR_MACRO
minimal(gnu_asm_frag_seq) = (* 3 *) PP_ERROR NEWLINE IDENT
minimal(gnu_asm_attr) = (* 4 *) GNU_ASM LPAREN DUMMY_EXPR RPAREN
minimal(function_try_block) = (* 8 *) TRY LBRACE RBRACE CATCH TY_LPAREN ELLIPSIS RPAREN DUMMY_STMT
minimal(function_specifier) = (* 1 *) VIRTUAL
minimal(function_definition) = (* 2 *) DUMMY_DTOR BODY_MACRO
minimal(function_body) = (* 1 *) BODY_MACRO
minimal(for_range_initializer) = (* 1 *) DUMMY_EXPR
minimal(for_range_declaration) = (* 2 *) STATIC DUMMY_DTOR
minimal(fold_operator) = (* 1 *) PLUS
minimal(fold_expression) = (* 5 *) FOLD_LPAREN DUMMY_EXPR PLUS ELLIPSIS RPAREN
minimal(extra_keyword) = (* 1 *) MS_ASM
minimal(expression_list_opt) = (* 0 *)
minimal(expression_list) = (* 1 *) ARG_MACRO
minimal(expression) = (* 1 *) DUMMY_EXPR
minimal(expr_sub) = (* 2 *) DUMMY_EXPR EOF
minimal(expr_or_braced_init_list) = (* 1 *) DUMMY_EXPR
minimal(expr_macro_call) = (* 3 *) IDENT_EM LPAREN RPAREN
minimal(explicit_specifier) = (* 1 *) EXPLICIT
minimal(explicit_specialization) = (* 4 *) TEMPLATE TEMPL_LT TEMPL_GT SEMICOLON
minimal(explicit_instantiation) = (* 2 *) TEMPLATE SEMICOLON
minimal(exclusive_or_expression) = (* 1 *) DUMMY_EXPR
minimal(exception_declaration) = (* 1 *) ELLIPSIS
minimal(etors_sub) = (* 2 *) IDENT_E EOF
minimal(equality_expression) = (* 1 *) DUMMY_EXPR
minimal(enumerator_list) = (* 1 *) IDENT_E
minimal(enumerator_definition) = (* 1 *) IDENT_E
minimal(enumerator) = (* 1 *) IDENT_E
minimal(enum_specifier) = (* 3 *) ENUM LBRACE RBRACE
minimal(enum_key) = (* 1 *) ENUM
minimal(enum_head) = (* 1 *) ENUM
minimal(enum_base) = (* 1 *) BASE_MACRO
minimal(enclosing_namespace_specifier) = (* 1 *) IDENT
minimal(empty_declaration) = (* 1 *) SEMICOLON
minimal(elaborated_type_specifier) = (* 2 *) CLASS IDENT
minimal(dtors_sub) = (* 1 *) EOF
minimal(designator) = (* 2 *) DOT IDENT_V
minimal(designated_initializer_clause) = (* 3 *) IDENT_V COLON DUMMY_EXPR
minimal(delete_expression) = (* 2 *) DELETE DUMMY_EXPR
minimal(defining_type_specifier_seq) = (* 1 *) IDENT
minimal(defining_type_specifier) = (* 1 *) IDENT
minimal(defining_type_id) = (* 1 *) IDENT
minimal(defined_macro_expression) = (* 2 *) DEFINED IDENT_V
minimal(deduction_guide) = (* 8 *) IDENT LPAREN RPAREN MINUS_GT IDENT TEMPL_LT TEMPL_GT SEMICOLON
minimal(decltype_specifier) = (* 4 *) DECLTYPE LPAREN DUMMY_EXPR RPAREN
minimal(decls_sub) = (* 2 *) SEMICOLON EOF
minimal(declarator_id) = (* 1 *) IDENT_V
minimal(declarator) = (* 1 *) DUMMY_DTOR
minimal(declaration_seq) = (* 1 *) SEMICOLON
minimal(declaration) = (* 1 *) SEMICOLON
minimal(decl_specifier_seq) = (* 1 *) STATIC
minimal(decl_specifier) = (* 1 *) STATIC
minimal(decl_spec_macro_call) = (* 3 *) IDENT_DM LPAREN RPAREN
minimal(decl_spec_macro) = (* 1 *) DECL_SPEC_MACRO
minimal(decl_macro_call_) = (* 3 *) IDENT_V LPAREN RPAREN
minimal(decl_OR_stmt_macro_call) = (* 3 *) IDENT_DSM LPAREN RPAREN
minimal(decl_OR_expr) = (* 1 *) ASM
minimal(cv_qualifier_seq) = (* 1 *) CONST
minimal(cv_qualifier) = (* 1 *) CONST
minimal(cuda_exec_config) = (* 3 *) CUDA_LT_LT_LT ARG_MACRO CUDA_GT_GT_GT
minimal(ctor_initializer) = (* 3 *) COLON IDENT ARGS_MACRO
minimal(conversion_type_id) = (* 1 *) IDENT
minimal(conversion_function_id) = (* 2 *) OPERATOR IDENT
minimal(conversion_declarator) = (* 1 *) PTR_STAR
minimal(contract_level_opt) = (* 0 *)
minimal(contract_level) = (* 1 *) DEFAULT
minimal(contract_attribute_specifier) = (* 7 *) ATTR_LBRACKET LBRACKET EXPECTS COLON DUMMY_EXPR RBRACKET RBRACKET
minimal(constraint_logical_or_expression) = (* 1 *) DUMMY_EXPR
minimal(constraint_logical_and_expression) = (* 1 *) DUMMY_EXPR
minimal(constraint_expression) = (* 1 *) DUMMY_EXPR
minimal(constant_expression) = (* 1 *) DUMMY_EXPR
minimal(conditional_expression) = (* 1 *) DUMMY_EXPR
minimal(condition) = (* 1 *) DUMMY_EXPR
minimal(cond_unit_seq) = (* 4 *) DUMMY_EXPR QUEST DUMMY_EXPR COLON
minimal(concept_definition) = (* 5 *) CONCEPT IDENT EQ DUMMY_EXPR SEMICOLON
minimal(compound_statement) = (* 2 *) LBRACE RBRACE
minimal(compound_requirement) = (* 4 *) LBRACE DUMMY_EXPR RBRACE SEMICOLON
minimal(compare_expression) = (* 1 *) DUMMY_EXPR
minimal(class_virt_specifier) = (* 1 *) FINAL
minimal(class_specifier) = (* 3 *) CLASS CLASS_LBRACE RBRACE
minimal(class_or_decltype) = (* 1 *) IDENT
minimal(class_name) = (* 1 *) IDENT
minimal(class_key) = (* 1 *) CLASS
minimal(class_head_name) = (* 1 *) IDENT
minimal(class_head) = (* 1 *) CLASS
minimal(cast_key) = (* 1 *) DYNAMIC_CAST
minimal(cast_expression) = (* 1 *) DUMMY_EXPR
minimal(capture_macro_call) = (* 3 *) IDENT_EM LPAREN RPAREN
minimal(capture_list) = (* 1 *) IDENT_V
minimal(capture_default) = (* 1 *) AMP
minimal(capture) = (* 1 *) IDENT_V
minimal(braced_init_list) = (* 2 *) INI_LBRACE RBRACE
minimal(brace_or_equal_initializer) = (* 2 *) INI_LBRACE RBRACE
minimal(block_literal_expression) = (* 3 *) TY_HAT LBRACE RBRACE
minimal(block_head_macro) = (* 1 *) BLOCK_HEAD_MACRO
minimal(block_end_macro) = (* 1 *) BLOCK_END_MACRO
minimal(block_declaration) = (* 2 *) ASM SEMICOLON
minimal(base_specifier_list) = (* 1 *) IDENT
minimal(base_specifier) = (* 1 *) IDENT
minimal(base_clause) = (* 2 *) BASE_COLON IDENT
minimal(balanced_token_seq_opt) = (* 0 *)
minimal(balanced_token_seq) = (* 1 *) IDENT
minimal(balanced_token) = (* 1 *) IDENT
minimal(await_expression) = (* 2 *) CO_AWAIT DUMMY_EXPR
minimal(attribute_using_prefix) = (* 4 *) USING IDENT COLON_COLON COLON
minimal(attribute_token) = (* 1 *) IDENT
minimal(attribute_specifier_seq) = (* 1 *) ATTR_MACRO
minimal(attribute_specifier) = (* 1 *) ATTR_MACRO
minimal(attribute_scoped_token) = (* 3 *) IDENT COLON_COLON IDENT
minimal(attribute_namespace_seq) = (* 2 *) IDENT COLON_COLON
minimal(attribute_list) = (* 0 *)
minimal(attribute_declaration) = (* 2 *) ATTR_MACRO SEMICOLON
minimal(attribute_argument_clause_opt) = (* 0 *)
minimal(attribute_argument_clause) = (* 1 *) IDENT_V
minimal(attribute) = (* 1 *) IDENT
minimal(attr_macro_call) = (* 3 *) IDENT_AM LPAREN RPAREN
minimal(assignment_operator) = (* 1 *) EQ
minimal(assignment_expression) = (* 1 *) DUMMY_EXPR
minimal(asm_block) = (* 2 *) BEGIN_ASM END_ASM
minimal(and_expression) = (* 1 *) DUMMY_EXPR
minimal(alignment_specifier) = (* 4 *) ALIGNAS TY_LPAREN IDENT RPAREN
minimal(alias_declaration) = (* 5 *) USING IDENT EQ IDENT SEMICOLON
minimal(additive_expression) = (* 1 *) DUMMY_EXPR
minimal(access_specifier) = (* 1 *) PRIVATE
minimal(acc_annot) = (* 1 *) IDENT
minimal(abstract_pack_declarator) = (* 1 *) ELLIPSIS_
minimal(abstract_declarator) = (* 1 *) PARAMS_MACRO
minimal(_using_directive) = (* 3 *) USING NAMESPACE IDENT
minimal(_using_declaration) = (* 3 *) USING HEAD_COLON_COLON IDENT_V
minimal(_type_specifier_seq) = (* 1 *) IDENT
minimal(_static_assert_declaration) = (* 4 *) STATIC_ASSERT LPAREN DUMMY_EXPR RPAREN
minimal(_statement_seq) = (* 1 *) SEMICOLON
minimal(_simple_declaration) = (* 1 *) STATIC
minimal(_pp_param_list) = (* 1 *) IDENT
minimal(_pp_lor_if_section) = (* 7 *) PP_IFDEF_O IDENT_V NEWLINE BAR_BAR DUMMY_EXPR PP_ENDIF NEWLINE
minimal(_pp_lor_if_group) = (* 5 *) PP_IFDEF_O IDENT_V NEWLINE BAR_BAR DUMMY_EXPR
minimal(_pp_lor_else_group) = (* 4 *) PP_ELSE NEWLINE BAR_BAR DUMMY_EXPR
minimal(_pp_lor_elif_group) = (* 4 *) PP_ELIF NEWLINE BAR_BAR DUMMY_EXPR
minimal(_pp_land_if_section) = (* 7 *) PP_IFDEF_A IDENT_V NEWLINE AMP_AMP DUMMY_EXPR PP_ENDIF NEWLINE
minimal(_pp_land_if_group) = (* 5 *) PP_IFDEF_A IDENT_V NEWLINE AMP_AMP DUMMY_EXPR
minimal(_pp_land_else_group) = (* 4 *) PP_ELSE NEWLINE AMP_AMP DUMMY_EXPR
minimal(_pp_land_elif_group) = (* 4 *) PP_ELIF NEWLINE AMP_AMP DUMMY_EXPR
minimal(_pp_ior_if_section) = (* 7 *) PP_IFDEF_B IDENT_V NEWLINE BAR DUMMY_EXPR PP_ENDIF NEWLINE
minimal(_pp_ior_if_group) = (* 5 *) PP_IFDEF_B IDENT_V NEWLINE BAR DUMMY_EXPR
minimal(_pp_ior_else_group) = (* 4 *) PP_ELSE NEWLINE BAR DUMMY_EXPR
minimal(_pp_ior_elif_group) = (* 4 *) PP_ELIF NEWLINE BAR DUMMY_EXPR
minimal(_pp_idtor_if_section) = (* 7 *) PTR_STAR PP_IFDEF_I IDENT_V NEWLINE DUMMY_DTOR PP_ENDIF NEWLINE
minimal(_pp_func_head_if_section) = (* 6 *) PP_IFDEF_D IDENT_V NEWLINE DUMMY_DTOR PP_ENDIF NEWLINE
minimal(_pp_func_head_if_group) = (* 4 *) PP_IFDEF_D IDENT_V NEWLINE DUMMY_DTOR
minimal(_pp_func_head_else_group) = (* 3 *) PP_ELSE NEWLINE DUMMY_DTOR
minimal(_pp_func_head_elif_group) = (* 3 *) PP_ELIF NEWLINE DUMMY_DTOR
minimal(_pp_eor_if_section) = (* 7 *) PP_IFDEF_X IDENT_V NEWLINE HAT DUMMY_EXPR PP_ENDIF NEWLINE
minimal(_pp_eor_if_group) = (* 5 *) PP_IFDEF_X IDENT_V NEWLINE HAT DUMMY_EXPR
minimal(_pp_eor_else_group) = (* 4 *) PP_ELSE NEWLINE HAT DUMMY_EXPR
minimal(_pp_eor_elif_group) = (* 4 *) PP_ELIF NEWLINE HAT DUMMY_EXPR
minimal(_pp_dinit_if_section_list) = (* 8 *) PP_IFDEF_I IDENT_V NEWLINE IDENT_V COLON DUMMY_EXPR PP_ENDIF NEWLINE
minimal(_pp_define) = (* 3 *) PP_DEFINE IDENT LPAREN
minimal(_opaque_enum_declaration) = (* 2 *) ENUM IDENT
minimal(_namespace_alias_definition) = (* 4 *) NAMESPACE IDENT EQ IDENT
minimal(_initializer_list) = (* 1 *) ARG_MACRO
minimal(_init_statement) = (* 1 *) DUMMY_EXPR
minimal(_designated_initializer_list) = (* 3 *) IDENT_V COLON DUMMY_EXPR
minimal(_block_declaration) = (* 1 *) ASM
minimal(_asm_declaration) = (* 1 *) ASM
minimal(_alias_declaration) = (* 4 *) USING IDENT EQ IDENT
minimal(__initializer_list) = (* 1 *) ARG_MACRO
follow(yield_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO ODD_RBRACE NEWLINE MARKER LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(virt_specifier_seq) = VIRT_SPEC_MACRO TRY TEMPL_GT SEMICOLON RPAREN PP_IFNDEF PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LBRACE IDENT_VM IDENT_TPM IDENT_PDM IDENT_BM IDENT_AM IDENT_AGM FINAL EQ EOF ELLIPSIS DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO
follow(virt_specifier) = VIRT_SPEC_MACRO TRY TEMPL_GT SEMICOLON RPAREN PP_IFNDEF PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LBRACE IDENT_VM IDENT_TPM IDENT_PDM IDENT_BM IDENT_AM IDENT_AGM FINAL EQ EOF ELLIPSIS DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO
follow(using_declarator_list) = STATIC_ASSERT SEMICOLON RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO COMMA
follow(using_declarator) = STATIC_ASSERT SEMICOLON RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS ELLIPSIS DELIM_MACRO COMMA
follow(using_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(unqualified_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(unnamed_namespace_definition_head) = LBRACE
follow(unnamed_namespace_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(unary_operator) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(unary_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(typename_specifier) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(type_sub) = #
follow(type_specifier) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(type_requirement) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST RBRACE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(type_parameter) = TEMPL_GT RPAREN PP_ENDIF PP_ELSE PP_ELIF IDENT_TPM EOF DELIM_MACRO COMMA
follow(type_name) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_SPEC_MACRO BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(type_id) = VIRT_SPEC_MACRO TY_TEMPL_GT TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LPAREN LBRACE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_STMT DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ARG_MACRO
follow(type_constraint) = TEMPL_GT SEMICOLON RPAREN PP_ENDIF PP_ELSE PP_ELIF IDENT_TPM IDENT EQ EOF ELLIPSIS DELIM_MACRO DECLTYPE COMMA AUTO
follow(ty_macro_call) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(try_block) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(translation_unit) = #
follow(trailing_return_type) = VIRT_SPEC_MACRO TY_TEMPL_GT TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LPAREN LBRACE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_STMT DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ARG_MACRO
follow(token_seq) = NEWLINE
follow(token_no_paren) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LPAREN PP_LINE PP_INCLUDE PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OVERRIDE OR_EQ OR OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_PLUS OBJC_MINUS OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH NULLPTR NOT_EQ NOT NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_CDECL MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FLOAT_LITERAL FLOAT FINAL FALSE EXTERN EXPORT EXPLICIT EXPECTS EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ENSURES END_ASM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOXYGEN_CMD DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BS_IDENT BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AXIOM AUTO AUDIT ATTR_LBRACKET AT ASSERT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
follow(token) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LINE PP_INCLUDE PP_ERROR PP_DEFINE PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OVERRIDE OR_EQ OR OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_PLUS OBJC_MINUS OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH NULLPTR NOT_EQ NOT NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_CDECL MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FLOAT_LITERAL FLOAT FINAL FALSE EXTERN EXPORT EXPLICIT EXPECTS EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ENSURES END_ASM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOXYGEN_CMD DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BS_IDENT BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AXIOM AUTO AUDIT ATTR_LBRACKET AT ASSERT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
follow(throw_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO ODD_RBRACE NEWLINE MARKER LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(template_parameter_list) = TEMPL_GT PP_ENDIF PP_ELSE PP_ELIF IDENT_TPM EOF COMMA
follow(template_parameter) = TEMPL_GT PP_ENDIF PP_ELSE PP_ELIF IDENT_TPM EOF COMMA
follow(template_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(template_head) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(template_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(template_argument_list_opt) = TY_TEMPL_GT TEMPL_GT
follow(template_argument_list) = TY_TEMPL_GT TEMPL_GT PP_IFNDEF PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF IDENT_AGM EOF DELIM_MACRO COMMA ARG_MACRO
follow(template_argument) = TY_TEMPL_GT TEMPL_GT PP_IFNDEF PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF IDENT_AGM EOF ELLIPSIS DELIM_MACRO COMMA ARG_MACRO
follow(templ_param_macro_call) = TEMPL_GT PP_ENDIF PP_ELSE PP_ELIF IDENT_TPM EOF COMMA
follow(swift_arg) = RPAREN IDENT_V
follow(suffix_macro_call) = VIRT_SPEC_MACRO TY_LPAREN TRY TEMPL_GT SUFFIX_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PS_LPAREN PP_IF_I PP_IF_E PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF PP_IFDEF_I PP_IFDEF_E PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MARKER LPAREN LBRACKET LBRACE INI_LBRACE IDENT_VM IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO
follow(string_literal_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(string_literal_) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(string_literal) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(str_) = USER_STR_LITERAL STR_MARKER STR_MACRO STR_LITERAL SEMICOLON PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IFNDEF_S PP_IFDEF_S PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_LM
follow(storage_class_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(stmts_sub) = #
follow(stmts_macro_arg) = SEMICOLON RPAREN DELIM_MACRO COMMA
follow(stmt_macro_call) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(stmt_macro_arg) = SEMICOLON RPAREN DELIM_MACRO COMMA
follow(static_assert_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(statement_seq_opt) = RBRACE PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_ENDIF PP_ELSE PP_ELIF IDENT_BEM BLOCK_END_MACRO
follow(statement) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(specs_sub) = #
follow(special_token) = #
follow(simple_type_specifier) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(simple_template_id_) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(simple_template_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_SEALED MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_SPEC_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(simple_requirement) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST RBRACE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(simple_capture) = RBRACKET PP_ENDIF PP_ELSE PP_ELIF IDENT_EM ELLIPSIS COMMA
follow(shift_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(separated_nonempty_list(COMMA,type_id)) = RPAREN
follow(separated_nonempty_list(COMMA,objc_struct_dtor)) = SEMICOLON
follow(separated_nonempty_list(COMMA,objc_property_attr)) = RPAREN
follow(separated_nonempty_list(COMMA,objc_class_name)) = SEMICOLON
follow(separated_nonempty_list(COMMA,objc_avail_item)) = RPAREN
follow(selection_statement) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(return_type_requirement) = SEMICOLON
follow(restricted_xor_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ HAT_EQ HAT GT_GT_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP
follow(restricted_unary_expr) = SUFFIX_MACRO STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN QUEST PLUS_EQ PLUS PERC_EQ PERC MINUS_GT_STAR MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT IDENT_OM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DOT_STAR DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_shift_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_rel_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ LT_EQ LT HAT_EQ HAT GT_GT_EQ GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_prim_expr) = SUFFIX_MACRO STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN QUEST PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET IDENT_V IDENT_OM IDENT_AM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DOT_STAR DOT DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR ARGS_MACRO AMP_EQ AMP_AMP AMP
follow(restricted_postfix_expr) = SUFFIX_MACRO STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN QUEST PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET IDENT_V IDENT_OM IDENT_AM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DOT_STAR DOT DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR ARGS_MACRO AMP_EQ AMP_AMP AMP
follow(restricted_pm_expr) = SUFFIX_MACRO STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN QUEST PLUS_EQ PLUS PERC_EQ PERC MINUS_GT_STAR MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT IDENT_OM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DOT_STAR DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_mult_expr) = SUFFIX_MACRO STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN QUEST PLUS_EQ PLUS PERC_EQ PERC MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT IDENT_OM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_lor_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR AMP_EQ
follow(restricted_land_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR AMP_EQ AMP_AMP
follow(restricted_ior_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP
follow(restricted_expr) = SEMICOLON RPAREN DELIM_MACRO COMMA
follow(restricted_eq_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ HAT_EQ HAT GT_GT_EQ EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_decls) = USING TEMPLATE RPAREN PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN NS_MACRO NAMESPACE INLINE IDENT_NSM IDENT_DSM IDENT_AM GNU_ATTR EXTERN DELIM_MACRO DECL_MACRO COMMA ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(restricted_decl) = USING TEMPLATE RPAREN PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN NS_MACRO NAMESPACE INLINE IDENT_NSM IDENT_DSM IDENT_AM GNU_ATTR EXTERN DELIM_MACRO DECL_MACRO COMMA ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(restricted_cond_expr) = SEMICOLON RPAREN DELIM_MACRO COMMA
follow(restricted_comp_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ LT_EQ_GT LT_EQ LT HAT_EQ HAT GT_GT_EQ GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_cast_expr) = SUFFIX_MACRO STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN QUEST PLUS_EQ PLUS PERC_EQ PERC MINUS_GT_STAR MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT IDENT_OM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DOT_STAR DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_assign_expr) = SEMICOLON RPAREN DELIM_MACRO COMMA
follow(restricted_and_expr) = STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PERC_EQ MINUS_EQ LT_LT_EQ HAT_EQ HAT GT_GT_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(restricted_add_expr) = SUFFIX_MACRO STAR_EQ SLASH_EQ SEMICOLON RPAREN QUEST PLUS_EQ PLUS PERC_EQ MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT IDENT_OM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ DELIM_MACRO COMMA BAR_EQ BAR_BAR BAR AMP_EQ AMP_AMP AMP
follow(requires_expression) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(requires_clause) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(requirement_seq) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST RBRACE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(requirement_parameter_list) = LBRACE
follow(requirement_body) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(requirement) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST RBRACE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(relational_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_EQ GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(ref_qualifier) = WCHAR_T VOID VIRT_SPEC_MACRO USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEID TRY TILDE THROW THIS TEMPL_GT SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STATIC_ASSERT STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACE PS_LPAREN PP_STRINGIZED PP_IF_S PP_IF_I PP_IF_E PP_IF_ATTR PP_IFNDEF_S PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_S PP_IFDEF_I PP_IFDEF_E PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR OBJC_UNKNOWN NULLPTR NOEXCEPT_MACRO NOEXCEPT MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT_BM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXCLAM EQ EOF END_STMTS ELLIPSIS DYNAMIC_CAST DUMMY_STMT DUMMY_BODY DOUBLE DOT DELIM_MACRO DECLTYPE CONST_CAST COMMA COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BODY_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ARG_MACRO ALIGNAS
follow(quasi_keyword) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LINE PP_INCLUDE PP_ERROR PP_DEFINE PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OVERRIDE OR_EQ OR OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_PLUS OBJC_MINUS OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH NULLPTR NOT_EQ NOT NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_CDECL MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FLOAT_LITERAL FLOAT FINAL FALSE EXTERN EXPORT EXPLICIT EXPECTS EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ENSURES END_ASM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOXYGEN_CMD DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BS_IDENT BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AXIOM AUTO AUDIT ATTR_LBRACKET AT ASSERT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
follow(qualified_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(pure_specifier) = TEMPL_GT SEMICOLON RPAREN PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO MARKER IDENT_TPM IDENT_PDM IDENT_AGM EOF ELLIPSIS DELIM_MACRO COMMA
follow(ptr_operator) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(ptr_declarator) = VIRT_SPEC_MACRO TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LPAREN LBRACE INI_LBRACE IDENT_VM IDENT_TPM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO
follow(ptr_abstract_declarator) = VIRT_SPEC_MACRO TY_TEMPL_GT TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LPAREN LBRACE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_STMT DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ARG_MACRO
follow(primary_expression) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(pp_templ_param_if_section) = TEMPL_GT PP_ENDIF PP_ELSE PP_ELIF IDENT_TPM EOF COMMA
follow(pp_templ_param_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_templ_param_else_group) = PP_ENDIF
follow(pp_templ_param_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_templ_arg_if_section) = TY_TEMPL_GT TEMPL_GT PP_IFNDEF PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF IDENT_AGM EOF DELIM_MACRO COMMA ARG_MACRO
follow(pp_templ_arg_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_templ_arg_else_group) = PP_ENDIF
follow(pp_templ_arg_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_str_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(pp_str_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_str_else_group) = PP_ENDIF
follow(pp_str_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_if_section_closing) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_FINALLY OBJC_ENCODE OBJC_CLASS OBJC_CATCH OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_stmt_if_section_close_open) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_stmt_if_section_broken) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS MARKER LPAREN LONG LAM_MARKER LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COMMA COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BAR_BAR AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
follow(pp_stmt_if_section) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS PARAMS_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT MINUS LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_stmt_if_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_if_group_close_open) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_else_group_closing) = PP_ENDIF
follow(pp_stmt_else_group_close_open) = PP_ENDIF
follow(pp_stmt_else_group_broken) = PP_ENDIF
follow(pp_stmt_else_group) = PP_ENDIF
follow(pp_stmt_elif_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_elif_group_close_open) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_stmt_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_spec_if_section) = WCHAR_T VOID VIRT_SPEC_MACRO USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEID TRY TILDE THIS TEMPL_GT SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STATIC_ASSERT STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACE PS_LPAREN PP_STRINGIZED PP_IF_S PP_IF_I PP_IF_E PP_IFNDEF_S PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF PP_IFDEF_S PP_IFDEF_I PP_IFDEF_E PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR NULLPTR MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT_BM IDENT_AGM IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXCLAM EQ EOF END_STMTS ELLIPSIS DYNAMIC_CAST DUMMY_STMT DUMMY_BODY DOUBLE DOT DELIM_MACRO DECLTYPE CONST_CAST COMMA COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BODY_MACRO AUTO ARG_MACRO
follow(pp_spec_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_spec_else_group) = PP_ENDIF
follow(pp_spec_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_param_list) = RPAREN
follow(pp_param_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RPAREN RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IDENT_TM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(pp_param_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_param_else_group) = PP_ENDIF
follow(pp_param_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_p_if_section) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS DOT_STAR DOT DELIM_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(pp_p_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_p_else_group) = PP_ENDIF
follow(pp_p_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_old_param_decl_list_if_section) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT SUFFIX_MACRO STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PS_LPAREN PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MARKER LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IDENT_VM IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_AGM IDENT HEAD_COLON_COLON FRIEND FLOAT FINAL EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_BODY DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO AUTO ACC_SPEC_MACRO
follow(pp_old_param_decl_list_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_old_param_decl_list_else_group) = PP_ENDIF
follow(pp_old_param_decl_list_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_objc_proto_name_if_section) = IDENT
follow(pp_objc_proto_name_else_group) = PP_ENDIF
follow(pp_objc_proto_name_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_objc_ivar_decl_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF OBJC_PUBLIC OBJC_PROTECTED OBJC_PRIVATE OBJC_PACKAGE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
follow(pp_objc_ivar_decl_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_objc_ivar_decl_else_group) = PP_ENDIF
follow(pp_objc_ivar_decl_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_objc_idecl_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OBJC_UNKNOWN OBJC_REQUIRED OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(pp_objc_idecl_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_objc_idecl_else_group) = PP_ENDIF
follow(pp_objc_idecl_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_minit_if_section_broken) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT RPAREN REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COMMA COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
follow(pp_minit_if_section) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFNDEF PP_IFDEF_E PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ MARKER LBRACE IDENT_V IDENT_IM IDENT_EM IDENT_DSM IDENT_AGM IDENT HEAD_COLON_COLON EOF DECLTYPE COMMA
follow(pp_minit_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_minit_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_minit_else_group_broken) = PP_ENDIF
follow(pp_minit_else_group) = PP_ENDIF
follow(pp_minit_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_minit_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_mdecl_if_section_broken) = TRY PP_IFNDEF PP_IFDEF PP_IF LBRACE IDENT_BM EQ DUMMY_BODY COLON BODY_MACRO
follow(pp_mdecl_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(pp_mdecl_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_mdecl_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_mdecl_else_group_broken) = PP_ENDIF
follow(pp_mdecl_else_group) = PP_ENDIF
follow(pp_mdecl_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_mdecl_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_lor_if_section) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS MARKER LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(pp_lor_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_lor_else_group) = PP_ENDIF
follow(pp_lor_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_land_if_section) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS MARKER LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(pp_land_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_land_else_group) = PP_ENDIF
follow(pp_land_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_ior_if_section_seq) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(pp_ior_if_section) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(pp_ior_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_ior_else_group) = PP_ENDIF
follow(pp_ior_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_init_if_section) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STATIC_ASSERT STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_CLOSING PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF_A PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS MARKER LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM EOF END_STMTS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELIM_MACRO DELETE DEFINED DECLTYPE CUDA_GT_GT_GT CO_YIELD CO_AWAIT CONST_CAST COMMA_BROKEN COMMA COLON_COLON COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BAR_BAR_BROKEN AUTO ARG_MACRO AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF
follow(pp_init_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_init_else_group) = PP_ENDIF
follow(pp_init_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_ifx_x) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_ERROR PP_DEFINE PP_ HAT
follow(pp_ifx_shift) = LT_LT GT_GT_GT GT_GT
follow(pp_ifx_s) = USER_STR_LITERAL STR_MARKER STR_MACRO STR_LITERAL SEMICOLON PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IFNDEF_S PP_IFDEF_S PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_LM
follow(pp_ifx_p) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEID THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST SIGNED SHORT SEMICOLON REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR MINUS_GT LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT DYNAMIC_CAST DUMMY_EXPR DOUBLE DOT DEFINED DECLTYPE CONST_CAST CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO
follow(pp_ifx_o) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BAR_BAR AUTO AMP_AMP AMP ALIGNOF
follow(pp_ifx_i) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_C PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_C PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_C PP_IFDEF_A PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_STDCALL MS_REF MS_CDECL MINUS_MINUS MINUS LPAREN LONG LBRACKET LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM EQ ELLIPSIS_ DYNAMIC_CAST DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DOT DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COMMA COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
follow(pp_ifx_h) = PP_IF_H PP_IFNDEF_H PP_IFDEF_H IF CATCH
follow(pp_ifx_eh) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(pp_ifx_e) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SLASH SIZEOF SIGNED SHORT SHARP RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS PERC PARAM_DECL_MACRO PARAMS_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AVAILABLE NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_PM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT GT_EQ GT GOTO GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DOT DELETE DEFINED DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BS_IDENT BS BOOL_LITERAL BOOL BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_ifx_d) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL STR_LITERAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACKET INT INLINE IDENT_V IDENT_TM IDENT_PM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(pp_ifx_cond_) = COLON
follow(pp_ifx_cond) = QUEST
follow(pp_ifx_closing) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM ARG_MACRO AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_ifx_close_open) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_ifx_cb) = CLASS_LBRACE
follow(pp_ifx_c) = UNION STRUCT PP_IF_C PP_IFNDEF_C PP_IFDEF_C MS_STDCALL MS_REF MS_CDECL IDENT_CHM ELAB_CLASS CLASS_HEAD_MACRO CLASS CC_MACRO
follow(pp_ifx_b) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_ERROR PP_DEFINE PP_ BAR
follow(pp_ifx_attr) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF OBJC_UNKNOWN IDENT_AM GNU_ATTR ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(pp_ifx_a) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT RETURN REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(pp_ifx) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PUBLIC OBJC_PROTOCOL OBJC_PROTECTED OBJC_PROPERTY OBJC_PRIVATE OBJC_PLUS OBJC_PACKAGE OBJC_MINUS OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_COLON AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_ifstmt_if_section_closing) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_ifstmt_if_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_ifstmt_else_group_closing) = PP_ENDIF
follow(pp_ifstmt_elif_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_idtor_if_section) = TY_TILDE TY_LPAREN STATIC_ASSERT SEMICOLON SECTION_MARKER RBRACE PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_C PP_IFNDEF_E PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_C PP_ENDIF PP_ELSE PP_ELIF OPERATOR MS_STDCALL MS_CDECL IDENT_V IDENT_IM IDENT HEAD_COLON_COLON EOF END_STMTS ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DELIM_MACRO DECLTYPE COMMA CC_MACRO
follow(pp_idtor_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_idtor_else_group) = PP_ENDIF
follow(pp_idtor_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_handler_if_section_broken) = LBRACE
follow(pp_handler_if_section) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS MARKER LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_handler_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_handler_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_handler_else_group_broken) = PP_ENDIF
follow(pp_handler_else_group) = PP_ENDIF
follow(pp_handler_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_handler_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_gnu_asm_if_section) = VOLATILE USER_INT_LITERAL UNSIGNED TY_TEMPL_GT TY_LPAREN TILDE TEMPL_LT TEMPL_GT STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SLASH SIGNED SHORT SHARP SEMICOLON RPAREN REINTERPRET_CAST RBRACKET RBRACE PTR_STAR PTR_AMP_AMP PTR_AMP PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFDEF_E PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS PERC OBJC_UNKNOWN MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_LM IDENT HEAD_COLON_COLON HAT GT_GT GT_EQ GT GOTO FLOAT_LITERAL FLOAT EXCLAM_EQ EXCLAM EQ_EQ EQ EOF END_STMTS END_ASM ELSE DYNAMIC_CAST DOUBLE DOT DELIM_MACRO CONST_CAST CONST COMMA COLON_COLON COLON CHAR BS_IDENT BS BOOL BAR_BAR BAR AMP_AMP AMP
follow(pp_gnu_asm_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_gnu_asm_else_group) = PP_ENDIF
follow(pp_gnu_asm_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_func_head_if_section_broken) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_func_head_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_func_head_else_group_broken) = PP_ENDIF
follow(pp_func_head_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_func_body_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPL_GT TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(pp_func_body_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_func_body_else_group) = PP_ENDIF
follow(pp_func_body_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_expr_if_section_broken) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT RPAREN REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COMMA COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
follow(pp_expr_if_section) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DOT_STAR DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA_BROKEN COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_expr_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_expr_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_expr_else_group_broken) = PP_ENDIF
follow(pp_expr_else_group) = PP_ENDIF
follow(pp_expr_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_expr_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_enum_if_section_closing) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(pp_enum_if_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_enum_head_if_section) = LBRACE
follow(pp_enum_head_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_enum_head_else_group) = PP_ENDIF
follow(pp_enum_head_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_enum_else_group_closing) = PP_ENDIF
follow(pp_enum_elif_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_endif) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_REQUIRED OBJC_PUBLIC OBJC_PROTOCOL OBJC_PROTECTED OBJC_PROPERTY OBJC_PRIVATE OBJC_PLUS OBJC_PACKAGE OBJC_OPTIONAL OBJC_MINUS OBJC_LBRACKET OBJC_INTERFACE OBJC_FINALLY OBJC_END OBJC_ENCODE OBJC_CLASS OBJC_CATCH OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_MARKER LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_SM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS END_ASM EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COND_MARKER CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BS_IDENT BS BREAK BRACE_LEVEL BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_SPEC_MACRO BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_else) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SLASH SIZEOF SIGNED SHORT SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_DEFINE PP_ PLUS_PLUS PLUS PERC PARAM_DECL_MACRO PARAMS_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PUBLIC OBJC_PROTOCOL OBJC_PROTECTED OBJC_PROPERTY OBJC_PRIVATE OBJC_PLUS OBJC_PACKAGE OBJC_MINUS OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AVAILABLE OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BS_IDENT BS BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_COLON BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_elif) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SLASH SIZEOF SIGNED SHORT SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS PERC PARAM_DECL_MACRO PARAMS_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PUBLIC OBJC_PROTOCOL OBJC_PROTECTED OBJC_PROPERTY OBJC_PRIVATE OBJC_PLUS OBJC_PACKAGE OBJC_MINUS OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AVAILABLE OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BS_IDENT BS BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_COLON BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_edef_if_section) = STMT_MACRO RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_E IDENT_DSM EOF END_ETORS COMMA
follow(pp_edef_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_edef_else_group) = PP_ENDIF
follow(pp_edef_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_dtor_if_section_broken) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RPAREN RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PARAM_DECL_MACRO OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(pp_dtor_if_section) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT SUFFIX_MACRO STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PS_LPAREN PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MARKER LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IDENT_VM IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_AGM IDENT HEAD_COLON_COLON FRIEND FLOAT FINAL EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_BODY DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO AUTO ACC_SPEC_MACRO
follow(pp_dtor_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_dtor_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_dtor_else_group_broken) = PP_ENDIF
follow(pp_dtor_else_group) = PP_ENDIF
follow(pp_dtor_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_dtor_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_dinit_if_section) = RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IFNDEF_I PP_IFDEF_I PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ LBRACKET IDENT_V EOF DOT COMMA
follow(pp_dinit_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_dinit_else_group) = PP_ENDIF
follow(pp_dinit_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_decl_spec_if_section) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW THREAD_LOCAL THIS TEMPL_GT STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_CB PP_IF_C PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_A PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS_PLUS PLUS PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT_MACRO NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DELIM_MACRO DELETE DEFINED DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BASE_COLON AUTO ATTR_MACRO ATTR_LBRACKET ARG_MACRO AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_decl_spec_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_decl_spec_else_group) = PP_ENDIF
follow(pp_decl_spec_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_decl_if_section_broken) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EQ ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DUMMY_BODY DOUBLE DOT DELETE DEFINED DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL BODY_MACRO AUTO ARG_MACRO AMP_AMP AMP ALIGNOF ACC_SPEC_MACRO
follow(pp_decl_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(pp_decl_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_decl_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_decl_else_group_broken) = PP_ENDIF
follow(pp_decl_else_group) = PP_ENDIF
follow(pp_decl_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_decl_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_ctor_init_if_section) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFNDEF PP_IFDEF_E PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ MARKER LBRACE IDENT_V IDENT_IM IDENT_EM IDENT_DSM IDENT_AGM IDENT HEAD_COLON_COLON EOF DECLTYPE
follow(pp_ctor_init_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_ctor_init_else_group) = PP_ENDIF
follow(pp_ctor_init_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_control_line) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_REQUIRED OBJC_PROTOCOL OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_LBRACKET OBJC_INTERFACE OBJC_END OBJC_ENCODE OBJC_CLASS OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA_BROKEN COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BS_IDENT BS BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_cond_tl_if_section) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO ODD_RBRACE NEWLINE MARKER LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COND_MARKER COMMA_BROKEN COMMA COLON BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(pp_cond_tl_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_cond_tl_else_group) = PP_ENDIF
follow(pp_cond_tl_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_cond_if_section) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO ODD_RBRACE NEWLINE MARKER LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COND_MARKER COMMA_BROKEN COMMA COLON BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(pp_cond_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_cond_hd_if_section) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PP_ENDIF PP_ELSE PP_ELIF PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(pp_cond_hd_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_cond_hd_else_group) = PP_ENDIF
follow(pp_cond_hd_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_cond_else_group) = PP_ENDIF
follow(pp_cond_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_concat) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(pp_class_head_if_section_broken) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(pp_class_head_if_section) = CLASS_LBRACE
follow(pp_class_head_if_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_class_head_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_class_head_else_group_broken) = PP_ENDIF
follow(pp_class_head_else_group) = PP_ENDIF
follow(pp_class_head_elif_group_broken) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_class_head_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_class_body_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(pp_class_body_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_class_body_else_group) = PP_ENDIF
follow(pp_class_body_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_cc_if_section) = TY_TILDE TY_LPAREN PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IFNDEF_E PP_IFDEF_E PP_ENDIF PP_ELSE PP_ELIF OPERATOR IDENT_V IDENT_IM IDENT HEAD_COLON_COLON ELLIPSIS_ DUMMY_DTOR DTOR_MACRO DECLTYPE
follow(pp_cc_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_cc_else_group) = PP_ENDIF
follow(pp_cc_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_capture_if_section) = THIS STAR RBRACKET IDENT_V IDENT_EM ELLIPSIS COMMA AMP
follow(pp_capture_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_capture_else_group) = PP_ENDIF
follow(pp_capture_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_base_clause_if_section) = VIRTUAL PUBLIC PROTECTED PRIVATE PP_IF_CB PP_IF_ATTR PP_IFNDEF_CB PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_CB PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF OBJC_UNKNOWN IDENT_IM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR DECLTYPE COMMA CLASS_LBRACE BASE_SPEC_MACRO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(pp_base_clause_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_base_clause_else_group) = PP_ENDIF
follow(pp_base_clause_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_attr_if_section) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_attr_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_attr_else_group) = PP_ENDIF
follow(pp_attr_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_args_if_section_closing) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_BEM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_BODY DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA_BROKEN COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BLOCK_END_MACRO BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(pp_args_if_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_args_else_group_closing) = PP_ENDIF
follow(pp_args_elif_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_aexpr_if_section_closing) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(pp_aexpr_if_section) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(pp_aexpr_if_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_aexpr_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_aexpr_else_group_closing) = PP_ENDIF
follow(pp_aexpr_else_group) = PP_ENDIF
follow(pp_aexpr_elif_group_closing) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_aexpr_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_a_if_section) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR_EQ STAR SLASH_EQ SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS_EQ PLUS PERC_EQ OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS_GT MINUS_EQ MINUS LT_LT_EQ LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAT_EQ HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_EQ FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM EQ DYNAMIC_CAST DUMMY_EXPR DOUBLE DOT DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BAR_EQ AUTO AMP_EQ AMP_AMP AMP ALIGNOF
follow(pp_a_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(pp_a_else_group) = PP_ENDIF
follow(pp_a_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(postfix_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS DOT_STAR DOT DELIM_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(pm_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(placeholder_type_specifier) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(params_body_macro_call) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(params_body_macro) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(parameters_and_qualifiers) = WCHAR_T VOID VIRT_SPEC_MACRO USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEID TRY TILDE THIS TEMPL_GT SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STATIC_ASSERT STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACE PS_LPAREN PP_STRINGIZED PP_IF_S PP_IF_I PP_IF_E PP_IFNDEF_S PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF PP_IFDEF_S PP_IFDEF_I PP_IFDEF_E PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR NULLPTR MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT_BM IDENT_AGM IDENT HEAD_COLON_COLON FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXCLAM EQ EOF END_STMTS ELLIPSIS DYNAMIC_CAST DUMMY_STMT DUMMY_BODY DOUBLE DOT DELIM_MACRO DECLTYPE CONST_CAST COMMA COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BODY_MACRO AUTO ARG_MACRO
follow(parameter_declaration_list) = RPAREN PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO MARKER IDENT_PDM IDENT_AGM EOF ELLIPSIS COMMA
follow(parameter_declaration_clause) = RPAREN EOF
follow(parameter_declaration) = TEMPL_GT SEMICOLON RPAREN PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO MARKER IDENT_TPM IDENT_PDM IDENT_AGM EOF ELLIPSIS DELIM_MACRO COMMA
follow(operator_function_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_LT TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(operator) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_LT TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(opaque_enum_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(op_macro_call) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STMT_MACRO STATIC_CAST STATIC_ASSERT STAR_EQ STAR SLASH_EQ SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEWLINE NEW MS_REF MINUS_MINUS MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELIM_MACRO DELETE DEFINED DECLTYPE CUDA_GT_GT_GT CO_AWAIT CONST_CAST COMMA_BROKEN COMMA COLON_COLON COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF
follow(old_param_decl_list) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT SUFFIX_MACRO STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PS_LPAREN PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MARKER LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IDENT_VM IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_AGM IDENT HEAD_COLON_COLON FRIEND FLOAT FINAL EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_BODY DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO AUTO ACC_SPEC_MACRO
follow(old_param_decl) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT SUFFIX_MACRO STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PS_LPAREN PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MARKER LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IDENT_VM IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_AGM IDENT HEAD_COLON_COLON FRIEND FLOAT FINAL EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_BODY DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO AUTO ACC_SPEC_MACRO
follow(old_init_decl_list) = SEMICOLON COMMA
follow(odd_stmt) = PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS
follow(odd_mult_expr) = EOF
follow(odd_mem_decl) = EOF
follow(odd_expr) = EOF
follow(odd_decl) = STATIC_ASSERT RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF
follow(objc_visibility_spec) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF OBJC_PUBLIC OBJC_PROTECTED OBJC_PRIVATE OBJC_PACKAGE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
follow(objc_try_block) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(objc_try) = PP_ENDIF PP_ELSE PP_ELIF OBJC_FINALLY OBJC_CATCH EOF END_STMTS
follow(objc_superclass) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPL_LT STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OBJC_UNKNOWN OBJC_PROPERTY OBJC_PLUS OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_struct_dtor) = SEMICOLON COMMA
follow(objc_struct_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OBJC_UNKNOWN OBJC_REQUIRED OBJC_PUBLIC OBJC_PROTECTED OBJC_PROPERTY OBJC_PRIVATE OBJC_PLUS OBJC_PACKAGE OBJC_OPTIONAL OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_selector_expr) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(objc_selector) = SEMICOLON PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_AM GNU_ATTR COLON ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(objc_qualified_interface_decl) = OBJC_REQUIRED OBJC_OPTIONAL OBJC_END
follow(objc_qualified_idecl_seq) = OBJC_REQUIRED OBJC_OPTIONAL OBJC_END
follow(objc_protocol_ref_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OBJC_UNKNOWN OBJC_REQUIRED OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_protocol_name_list) = TY_TEMPL_GT TEMPL_GT SEMICOLON PP_ENDIF PP_ELSE PP_ELIF COMMA
follow(objc_protocol_name) = TY_TEMPL_GT TEMPL_GT SEMICOLON PP_ENDIF PP_ELSE PP_ELIF COMMA
follow(objc_protocol_decl_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_protocol_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_property_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OBJC_UNKNOWN OBJC_REQUIRED OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_property_attrs_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
follow(objc_property_attr) = RPAREN COMMA
follow(objc_method_type) = IDENT_V IDENT COLON
follow(objc_method_selector) = SEMICOLON
follow(objc_method_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OBJC_UNKNOWN OBJC_REQUIRED OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_message_selector) = RBRACKET
follow(objc_message_expr) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(objc_keyword_selector) = SEMICOLON PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_AM GNU_ATTR COMMA ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(objc_keyword_dtor) = SEMICOLON PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_V IDENT_AM IDENT GNU_ATTR COMMA COLON ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(objc_keyword_arg) = RBRACKET IDENT_V COLON
follow(objc_interface_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OBJC_UNKNOWN OBJC_REQUIRED OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_instance_vars) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OBJC_UNKNOWN OBJC_PUBLIC OBJC_PROTECTED OBJC_PROPERTY OBJC_PRIVATE OBJC_PLUS OBJC_PACKAGE OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_instance_var_decl) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF OBJC_PUBLIC OBJC_PROTECTED OBJC_PRIVATE OBJC_PACKAGE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
follow(objc_identifier) = USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL STR_MARKER STR_MACRO STR_LITERAL RPAREN PP_STRINGIZED PP_IF_S PP_IFNDEF_S PP_IFDEF_S NULLPTR INT_MACRO INT_LITERAL IN IDENT_LM FLOAT_LITERAL COMMA CHAR_LITERAL BOOL_LITERAL
follow(objc_idecl_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OBJC_UNKNOWN OBJC_REQUIRED OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_finally) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(objc_encode_expr) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(objc_class_name) = SEMICOLON COMMA
follow(objc_class_interface) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_class_decl_list) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_category_interface) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(objc_catch_clause) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(objc_available) = SEMICOLON RPAREN PP_ENDIF PP_ELSE PP_ELIF MARKER BAR_BAR_BROKEN AMP_AMP_BROKEN
follow(objc_avail_item) = RPAREN COMMA
follow(noptr_new_declarator) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEW_INIT_MACRO NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(noptr_declarator) = VIRT_SPEC_MACRO TY_LPAREN TRY TEMPL_GT SUFFIX_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PS_LPAREN PP_IF_I PP_IF_E PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF PP_IFDEF_I PP_IFDEF_E PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MARKER LPAREN LBRACKET LBRACE INI_LBRACE IDENT_VM IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO
follow(noptr_abstract_pack_declarator) = VIRT_SPEC_MACRO TY_TEMPL_GT TY_LPAREN TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MARKER LPAREN LBRACKET LBRACE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_PM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_STMT DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ARG_MACRO
follow(noptr_abstract_declarator) = VIRT_SPEC_MACRO TY_TEMPL_GT TY_LPAREN TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE MARKER LPAREN LBRACKET LBRACE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_PM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_STMT DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ARG_MACRO
follow(nonempty_list(token)) = NEWLINE
follow(nonempty_list(swift_arg)) = RPAREN
follow(nonempty_list(q_prop_token)) = END_QPROP
follow(nonempty_list(pp_gnu_asm_if_section)) = VOLATILE USER_INT_LITERAL UNSIGNED TY_TEMPL_GT TY_LPAREN TILDE TEMPL_LT TEMPL_GT STR_MACRO STR_LITERAL STRUCT STATIC_CAST STAR SLASH SIGNED SHORT SHARP RPAREN REINTERPRET_CAST RBRACKET RBRACE PTR_STAR PTR_AMP_AMP PTR_AMP PP_STRINGIZED PLUS PERC OBJC_UNKNOWN MINUS_GT MINUS LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_LM IDENT HEAD_COLON_COLON HAT GT_GT GT_EQ GT GOTO FLOAT_LITERAL FLOAT EXCLAM_EQ EXCLAM EQ_EQ EQ ELSE DYNAMIC_CAST DOUBLE DOT CONST_CAST CONST COMMA COLON_COLON COLON CHAR BS_IDENT BS BOOL BAR_BAR BAR AMP_AMP AMP
follow(nonempty_list(pp_control_line)) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SLASH SIZEOF SIGNED SHORT SHARP SEMICOLON RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS_PLUS PLUS PERC PARAM_DECL_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT MINUS MARKER LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT GT_EQ GT GOTO GNU_ATTR FUNC_HEAD_MACRO FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT DELETE DEFINED DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BS_IDENT BS BOOL_LITERAL BOOL BODY_MACRO BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(nonempty_list(odd_else_stmt)) = PP_ENDIF PP_ELSE PP_ELIF
follow(nonempty_list(objc_keyword_dtor)) = SEMICOLON PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR OBJC_UNKNOWN IDENT_AM GNU_ATTR COMMA ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(nonempty_list(objc_keyword_arg)) = RBRACKET
follow(nonempty_list(objc_instance_var_decl)) = RBRACE PP_ENDIF PP_ELSE PP_ELIF
follow(nonempty_list(objc_catch_clause)) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(nonempty_list(multiplicative_unit)) = SEMICOLON RPAREN PP_ENDIF PP_ELSE PP_ELIF
follow(nonempty_list(int_literal)) = RPAREN IDENT_V
follow(nonempty_list(header_name_token)) = RPAREN
follow(nonempty_list(gnu_asm_token)) = SEMICOLON PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFDEF_E PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ EOF END_STMTS END_ASM DELIM_MACRO
follow(nonempty_list(designator)) = INI_LBRACE EQ
follow(nonempty_list(additive_unit)) = SEMICOLON RPAREN PP_ENDIF PP_ELSE PP_ELIF
follow(nonempty_list(_pp_lor_if_section)) = PP_ENDIF PP_ELSE PP_ELIF BAR_BAR
follow(nonempty_list(QUEST)) = EOF
follow(noexcept_specifier) = WCHAR_T VOID VIRT_SPEC_MACRO USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEID TRY TILDE THIS TEMPL_GT SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STATIC_ASSERT STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACE PS_LPAREN PP_STRINGIZED PP_IF_S PP_IF_I PP_IF_E PP_IF_ATTR PP_IFNDEF_S PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_S PP_IFDEF_I PP_IFDEF_E PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR OBJC_UNKNOWN NULLPTR MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT_BM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXCLAM EQ EOF END_STMTS ELLIPSIS DYNAMIC_CAST DUMMY_STMT DUMMY_BODY DOUBLE DOT DELIM_MACRO DECLTYPE CONST_CAST COMMA COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BODY_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ARG_MACRO ALIGNAS
follow(noexcept_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(nodeclspec_function_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(new_type_id) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEW_INIT_MACRO NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(new_placement) = WCHAR_T VOLATILE VOID UNSIGNED UNION TY_LPAREN TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT HEAD_COLON_COLON FLOAT ELAB_ENUM ELAB_CLASS DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO
follow(new_initializer) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(new_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(new_declarator) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEW_INIT_MACRO NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(nested_requirement) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST RBRACE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(nested_namespace_definition_head) = LBRACE
follow(nested_namespace_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(nested_name_specifier) = TY_TILDE TEMPLATE RPAREN PTR_STAR OPERATOR IDENT_V IDENT_TM IDENT_IM IDENT_C IDENT EOF DELIM_MACRO COMMA
follow(namespace_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(namespace_body) = RBRACE
follow(named_namespace_definition_head) = USING TEMPLATE RPAREN PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR ODD_LBRACE OBJC_UNKNOWN NS_MACRO NAMESPACE LBRACE INLINE IDENT_NSM IDENT_DSM IDENT_AM GNU_ATTR EXTERN DELIM_MACRO DECL_MACRO COMMA ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(named_namespace_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(multiplicative_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(ms_warn_spec_list) = RPAREN IDENT_V
follow(ms_warn_spec) = RPAREN IDENT_V
follow(ms_attr) = UNION STRUCT PUBLIC PROTECTED PRIVATE MS_REF IDENT_CHM ELAB_CLASS CLASS_HEAD_MACRO CLASS ACC_SPEC_MACRO
follow(module_import_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(mid_typaram) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(mid_templ_head) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(mid_templ_decl) = SEMICOLON
follow(mid_paren_open) = PP_ENDIF
follow(mid_paren_close) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SLASH SIZEOF SIGNED SHORT RPAREN REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS PERC OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ARG_MACRO AMP_AMP AMP ALIGNOF
follow(mid_objc_cat_iface) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL STRUCT STATIC_ASSERT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ OBJC_UNKNOWN OBJC_PROPERTY OBJC_PLUS OBJC_MINUS OBJC_END NAMESPACE MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT ENUM ELAB_ENUM ELAB_CLASS DUMMY_TYPE DOUBLE DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ASM ALIGNAS ACC_SPEC_MACRO
follow(mid_init) = SEMICOLON
follow(mid_brace_open) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(mid_brace_close) = RBRACE
follow(member_specification) = RBRACE
follow(member_declarator_list) = SEMICOLON EOF COMMA
follow(member_declarator) = SEMICOLON EOF COMMA
follow(member_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(mem_initializer_list) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IFNDEF PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ MARKER LBRACE IDENT_EM IDENT_DSM IDENT_AGM EOF COMMA
follow(mem_initializer_id) = LPAREN INI_LBRACE IDENT_AM ARGS_MACRO
follow(mem_initializer) = TRY PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IFNDEF PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ MARKER LBRACE IDENT_EM IDENT_DSM IDENT_BM IDENT_AGM EQ EOF ELLIPSIS DUMMY_BODY COMMA COLON BODY_MACRO
follow(mem_init_macro_call) = PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFNDEF PP_IFDEF_E PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ MARKER LBRACE IDENT_V IDENT_IM IDENT_EM IDENT_DSM IDENT_AGM IDENT HEAD_COLON_COLON EOF DECLTYPE COMMA
follow(mem_decls_sub) = #
follow(mem_decl_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(mem_access_spec_head) = COLON
follow(mem_access_spec) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(main) = #
follow(macro_fun_head) = RPAREN IDENT ELLIPSIS
follow(macro_arg_list) = RPAREN DELIM_MACRO COMMA
follow(macro_arg) = RPAREN DELIM_MACRO COMMA
follow(lor_unit_seq) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS MARKER LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(lor_macro_call) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS MARKER LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(logical_or_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN
follow(logical_and_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_A PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_A PP_IFNDEF PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP
follow(literal_operator_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_LT TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(literal_macro_call) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(literal) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(list(str_)) = STR_MARKER SEMICOLON PP_ENDIF PP_ELSE PP_ELIF
follow(list(pp_templ_param_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_templ_arg_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_str_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_stmt_elif_group_closing)) = PP_ENDIF PP_ELSE
follow(list(pp_stmt_elif_group_close_open)) = PP_ENDIF PP_ELSE
follow(list(pp_stmt_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_stmt_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_spec_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_param_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_p_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_old_param_decl_list_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_objc_proto_name_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_objc_ivar_decl_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_objc_idecl_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_minit_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_minit_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_mdecl_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_mdecl_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_lor_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_land_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_ior_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_init_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_ifstmt_elif_group_closing)) = PP_ENDIF PP_ELSE
follow(list(pp_idtor_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_handler_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_handler_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_gnu_asm_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_func_head_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_func_body_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_expr_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_expr_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_enum_head_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_enum_elif_group_closing)) = PP_ENDIF PP_ELSE
follow(list(pp_edef_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_dtor_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_dtor_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_dinit_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_decl_spec_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_decl_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_decl_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_ctor_init_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_control_line)) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST RBRACKET PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(list(pp_cond_tl_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_cond_hd_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_cond_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_class_head_elif_group_broken)) = PP_ENDIF PP_ELSE
follow(list(pp_class_head_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_class_body_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_cc_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_capture_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_base_clause_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_attr_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_args_elif_group_closing)) = PP_ENDIF PP_ELSE
follow(list(pp_aexpr_elif_group_closing)) = PP_ENDIF PP_ELSE
follow(list(pp_aexpr_elif_group)) = PP_ENDIF PP_ELSE
follow(list(pp_a_elif_group)) = PP_ENDIF PP_ELSE
follow(list(gnu_asm_token_)) = END_ASM
follow(list(gnu_asm_token)) = SEMICOLON PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(list(asm_token)) = RBRACE END_ASM
follow(list(_pp_lor_elif_group)) = PP_ENDIF PP_ELSE
follow(list(_pp_land_elif_group)) = PP_ENDIF PP_ELSE
follow(list(_pp_ior_elif_group)) = PP_ENDIF PP_ELSE
follow(list(_pp_func_head_elif_group)) = PP_ENDIF PP_ELSE
follow(list(_pp_eor_elif_group)) = PP_ENDIF PP_ELSE
follow(list(INT_LITERAL)) = NEWLINE
follow(linkage_specification) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(land_unit_seq) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS MARKER LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(lambda_introducer) = TY_LPAREN TEMPL_LT PP_ENDIF PP_ELSE PP_ELIF LBRACE DUMMY_STMT
follow(lambda_expression) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(lambda_declarator) = REQUIRES LBRACE DUMMY_STMT
follow(lambda_capture) = RBRACKET
follow(labeled_statement) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(label_seq) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(label) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(jump_statement) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(iteration_statement) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(iteration_macro) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(initializer_list) = SEMICOLON RPAREN RBRACE PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING PP_ENDIF PP_ELSE PP_ELIF EOF CUDA_GT_GT_GT COMMA_BROKEN
follow(initializer_clause) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO ODD_RBRACE NEWLINE MARKER LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(initializer_) = STATIC_ASSERT SEMICOLON SECTION_MARKER RBRACKET RBRACE PP_ENDIF PP_ELSE PP_ELIF IDENT_EM EOF END_STMTS DELIM_MACRO COMMA
follow(init_sub) = #
follow(init_statement) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW_ THROW THREAD_LOCAL THIS STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AVAILABLE NULLPTR NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECL_SPEC_MACRO DECLTYPE CV_MACRO CO_YIELD CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(init_declarator_list) = STATIC_ASSERT SEMICOLON SECTION_MARKER RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO COMMA
follow(init_declarator) = STATIC_ASSERT SEMICOLON SECTION_MARKER RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO COMMA
follow(init_capture) = RBRACKET PP_ENDIF PP_ELSE PP_ELIF IDENT_EM COMMA
follow(inclusive_or_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP
follow(identifier_list) = RPAREN RBRACKET MARKER COMMA
follow(id_macro_call) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_LT TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SHARP_SHARP SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO PARAMS_BODY_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_SEALED MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_PBM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_SPEC_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(id_expression) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(has_include_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS DOT_STAR DOT DELIM_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(has_attribute_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS DOT_STAR DOT DELIM_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(handler_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPL_GT TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(handler) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS MARKER LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(gnu_attribute_seq) = WCHAR_T VOLATILE VOID UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME STRUCT SIGNED SHORT RESTRICT PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C OPERATOR MS_STDCALL MS_REF MS_CDECL LONG INT IDENT_V IDENT_TM IDENT_IM IDENT_CM IDENT_C IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FLOAT ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECLTYPE CV_MACRO CONST CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO
follow(gnu_attribute) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(gnu_asm_frag_seq) = SEMICOLON PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_E PP_IFNDEF_E PP_IFDEF_E PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ EOF END_STMTS END_ASM DELIM_MACRO
follow(gnu_asm_attr) = WCHAR_T VOID VIRT_SPEC_MACRO USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEID TRY TILDE THIS TEMPL_GT SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STATIC_ASSERT STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACE PS_LPAREN PP_STRINGIZED PP_IF_S PP_IF_I PP_IF_E PP_IF_ATTR PP_IFNDEF_S PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_S PP_IFDEF_I PP_IFDEF_E PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR OBJC_UNKNOWN NULLPTR MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_LM IDENT_IM IDENT_EM IDENT_C IDENT_BM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXCLAM EQ EOF END_STMTS ELLIPSIS DYNAMIC_CAST DUMMY_STMT DUMMY_BODY DOUBLE DOT DELIM_MACRO DECLTYPE CONST_CAST COMMA COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BODY_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ARG_MACRO ALIGNAS
follow(function_try_block) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPL_GT TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(function_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(function_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(function_body) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPL_GT TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MARKER LONG INT INLINE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(for_range_initializer) = RPAREN
follow(for_range_declaration) = COLON
follow(fold_operator) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT RPAREN REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM ELLIPSIS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELIM_MACRO DELETE DEFINED DECLTYPE CO_AWAIT CONST_CAST COMMA COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(fold_expression) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TPM IDENT_TM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(extra_keyword) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPL_LT TEMPL_GT TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNDEF PP_STRINGIZED PP_LINE PP_INCLUDE PP_ERROR PP_DEFINE PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OVERRIDE OR_EQ OR OPERATOR OBJC_UNKNOWN OBJC_TRY OBJC_SELECTOR OBJC_PLUS OBJC_MINUS OBJC_LBRACKET OBJC_FINALLY OBJC_ENCODE OBJC_CATCH NULLPTR NOT_EQ NOT NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_CDECL MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FLOAT_LITERAL FLOAT FINAL FALSE EXTERN EXPORT EXPLICIT EXPECTS EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ENSURES END_ASM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOXYGEN_CMD DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BS_IDENT BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AXIOM AUTO AUDIT ATTR_LBRACKET AT ASSERT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
follow(expression_list_opt) = RPAREN PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFDEF_CLOSING PP_ENDIF PP_ELSE PP_ELIF
follow(expression_list) = RPAREN PP_ENDIF PP_ELSE PP_ELIF CUDA_GT_GT_GT COMMA_BROKEN
follow(expression) = SEMICOLON RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFDEF_I PP_IFDEF_COND_ PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ ODD_RBRACE MARKER LBRACE IDENT_V EOF END_STMTS DELIM_MACRO COMMA COLON BAR_BAR_BROKEN AMP_AMP_BROKEN
follow(expr_sub) = #
follow(expr_or_braced_init_list) = SEMICOLON RPAREN RBRACKET PP_ENDIF PP_ELSE PP_ELIF ODD_RBRACE EOF END_STMTS
follow(expr_macro_call) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA_BROKEN COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(explicit_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(explicit_specialization) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(explicit_instantiation) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(exclusive_or_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP
follow(exception_declaration) = RPAREN
follow(etors_sub) = #
follow(equality_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_EQ EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(enumerator_list) = STMT_MACRO RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_E IDENT_DSM EOF END_ETORS COMMA
follow(enumerator_definition) = STMT_MACRO RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_E IDENT_DSM EOF END_ETORS COMMA
follow(enumerator) = STMT_MACRO RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_E IDENT_DSM EQ EOF END_ETORS COMMA
follow(enum_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(enum_key) = PP_IF_ATTR PP_IFNDEF_ATTR PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF OBJC_UNKNOWN LBRACE IDENT_IM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR DECLTYPE COLON BASE_MACRO ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(enum_head) = PP_ENDIF PP_ELSE PP_ELIF LBRACE
follow(enum_base) = SEMICOLON PP_ENDIF PP_ELSE PP_ELIF LBRACE EOF END_STMTS DELIM_MACRO
follow(enclosing_namespace_specifier) = COLON_COLON
follow(empty_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(elaborated_type_specifier) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(dtors_sub) = #
follow(designator) = LBRACKET INI_LBRACE EQ DOT
follow(designated_initializer_clause) = SEMICOLON RPAREN RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_CLOSING PP_IFDEF_I PP_IFDEF_CLOSING PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_AGM EOF CUDA_GT_GT_GT COMMA_BROKEN COMMA ARG_MACRO
follow(delete_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(defining_type_specifier_seq) = WCHAR_T VOLATILE VOID UNSIGNED UNION TY_LPAREN TYPE_MACRO TYPENAME STRUCT STATIC_ASSERT SIGNED SHORT SEMICOLON RESTRICT RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_EH PP_IF_C PP_IFNDEF_EH PP_IFNDEF_C PP_IFDEF_EH PP_IFDEF_C PP_ENDIF PP_ELSE PP_ELIF PARAMS_MACRO MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACKET LBRACE INT IDENT_TM IDENT_PM IDENT_IM IDENT_E IDENT_CM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON FLOAT EOF ENUM END_STMTS ELLIPSIS_ ELAB_ENUM ELAB_CLASS DOUBLE DELIM_MACRO DECLTYPE CV_MACRO CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ACC_SPEC_MACRO
follow(defining_type_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(defining_type_id) = STATIC_ASSERT SEMICOLON RBRACE PP_ENDIF PP_ELSE PP_ELIF LBRACE EOF END_STMTS DELIM_MACRO
follow(defined_macro_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LBRACKET LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS DOT_STAR DOT DELIM_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(deduction_guide) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(decltype_specifier) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THROW THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_SPEC_MACRO BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(decls_sub) = #
follow(declarator_id) = VIRT_SPEC_MACRO TY_LPAREN TRY TEMPL_GT SUFFIX_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PS_LPAREN PP_IF_I PP_IF_E PP_IF_ATTR PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_I PP_IFDEF_E PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OBJC_UNKNOWN MARKER LPAREN LBRACKET LBRACE INI_LBRACE IDENT_VM IDENT_TPM IDENT_SXM IDENT_PM IDENT_PDM IDENT_BM IDENT_AM IDENT_AGM GNU_ATTR GNU_ASM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(declarator) = VIRT_SPEC_MACRO TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LPAREN LBRACE INI_LBRACE IDENT_VM IDENT_TPM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO
follow(declaration_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(decl_specifier_seq) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(decl_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(decl_spec_macro_call) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW THREAD_LOCAL THIS TEMPL_GT STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_CB PP_IF_C PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_A PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS_PLUS PLUS PARAM_DECL_MACRO PARAMS_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT_MACRO NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DELETE DEFINED DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BASE_COLON AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(decl_spec_macro) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TILDE THROW THREAD_LOCAL THIS TEMPL_GT STR_MARKER STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_CB PP_IF_C PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_A PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PLUS_PLUS PLUS PARAM_DECL_MACRO PARAMS_MACRO OP_MACRO OPERATOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT_MACRO NOEXCEPT NEW MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GNU_ATTR FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DELETE DEFINED DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_AWAIT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BASE_COLON AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(decl_macro_call_) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_GT LPAREN LONG INT INLINE INI_LBRACE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(decl_OR_stmt_macro_call) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS MARKER LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EQ EOF ENUM END_STMTS ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(decl_OR_expr) = SEMICOLON DELIM_MACRO
follow(cv_qualifier_seq) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(cv_qualifier) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(cuda_exec_config) = LPAREN
follow(ctor_initializer) = PP_ENDIF PP_ELSE PP_ELIF MARKER LBRACE EOF
follow(conversion_type_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(conversion_function_id) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(conversion_declarator) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(contract_level_opt) = IDENT COLON
follow(contract_level) = IDENT COLON
follow(contract_attribute_specifier) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(constraint_logical_or_expression) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(constraint_logical_and_expression) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM AMP_AMP ALIGNAS ACC_SPEC_MACRO
follow(constraint_expression) = SEMICOLON
follow(constant_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO SEMICOLON RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_CLOSING PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ NEWLINE INI_LBRACE IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO COMMA COLON ARG_MACRO
follow(conditional_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO ODD_RBRACE NEWLINE MARKER LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(condition) = SEMICOLON RPAREN PP_ENDIF PP_ELSE PP_ELIF MARKER BAR_BAR_BROKEN AMP_AMP_BROKEN
follow(cond_unit_seq) = PP_ENDIF PP_ELSE PP_ELIF
follow(concept_definition) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(compound_statement) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_FINALLY OBJC_ENCODE OBJC_CLASS OBJC_CATCH OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(compound_requirement) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS SUB_REQUIRES STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT REQUIRES REINTERPRET_CAST RBRACE PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO AMP_AMP AMP ALIGNOF
follow(compare_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_EQ GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(class_virt_specifier) = PP_IF_CB PP_IFNDEF_CB PP_IFNDEF PP_IFDEF_CB PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF CLASS_LBRACE BASE_COLON
follow(class_specifier) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THROW THREAD_LOCAL TEMPL_GT STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO PARAMS_MACRO OPERATOR OBJC_UNKNOWN NOEXCEPT_MACRO NOEXCEPT MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET MINUS_GT MARKER LONG LBRACKET LBRACE INT INLINE IDENT_V IDENT_TPM IDENT_TM IDENT_PM IDENT_PDM IDENT_IM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON GNU_ATTR FRIEND FLOAT EXTERN EXPLICIT EQ EOF ENUM END_STMTS ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_STMT DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(class_or_decltype) = RPAREN PP_IF_CB PP_IFNDEF_CB PP_IFNDEF PP_IFDEF_CB PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF LPAREN INI_LBRACE IDENT_AM EOF ELLIPSIS DELIM_MACRO COMMA CLASS_LBRACE BASE_SPEC_MACRO ARGS_MACRO
follow(class_name) = VIRT_SPEC_MACRO PP_IF_CB PP_IFNDEF_CB PP_IFNDEF PP_IFDEF_CB PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF MS_SEALED FINAL CLASS_LBRACE BASE_COLON
follow(class_key) = PP_IF_D PP_IF_CB PP_IF_ATTR PP_IFNDEF_D PP_IFNDEF_CB PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_D PP_IFDEF_CB PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF OBJC_UNKNOWN IDENT_IM IDENT_DM IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR DECL_SPEC_MACRO DECLTYPE CLASS_LBRACE BASE_COLON ATTR_MACRO ATTR_LBRACKET ALIGNAS
follow(class_head_name) = VIRT_SPEC_MACRO PP_IF_CB PP_IFNDEF_CB PP_IFNDEF PP_IFDEF_CB PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF MS_SEALED FINAL CLASS_LBRACE BASE_COLON
follow(class_head) = PP_IF_CB PP_IFNDEF_CB PP_IFDEF_CB PP_ENDIF PP_ELSE PP_ELIF CLASS_LBRACE
follow(cast_key) = TEMPL_LT RPAREN DELIM_MACRO COMMA
follow(cast_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(capture_macro_call) = RBRACKET IDENT_EM COMMA
follow(capture_list) = RBRACKET IDENT_EM COMMA
follow(capture_default) = RBRACKET COMMA
follow(capture) = RBRACKET PP_ENDIF PP_ELSE PP_ELIF IDENT_EM COMMA
follow(braced_init_list) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TPM IDENT_TM IDENT_SM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA_BROKEN COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(brace_or_equal_initializer) = STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_CLOSING PP_IFDEF_I PP_IFDEF_CLOSING PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ ODD_RBRACE MARKER IDENT_EM IDENT_AGM EOF END_STMTS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(block_literal_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(block_head_macro) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM ENUM ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(block_end_macro) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS OBJC_AUTORELEASEPOOL NULLPTR NS_MACRO NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DTOR_MACRO DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(block_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_REQUIRED OBJC_PROTOCOL OBJC_PROPERTY OBJC_PLUS OBJC_OPTIONAL OBJC_MINUS OBJC_INTERFACE OBJC_END OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(base_specifier_list) = PP_IF_CB PP_IFNDEF_CB PP_IFNDEF PP_IFDEF_CB PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF COMMA CLASS_LBRACE BASE_SPEC_MACRO
follow(base_specifier) = RPAREN PP_IF_CB PP_IFNDEF_CB PP_IFNDEF PP_IFDEF_CB PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF ELLIPSIS DELIM_MACRO COMMA CLASS_LBRACE BASE_SPEC_MACRO
follow(base_clause) = PP_IF_CB PP_IFNDEF_CB PP_IFDEF_CB PP_ENDIF PP_ELSE PP_ELIF CLASS_LBRACE
follow(balanced_token_seq_opt) = RPAREN RBRACKET RBRACE
follow(balanced_token_seq) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OR_EQ OR OPERATOR NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO FRIEND FOR FLOAT_LITERAL FLOAT FALSE EXTERN EXPORT EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AUTO AT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
follow(balanced_token) = XOR_EQ XOR WHILE WCHAR_T VOLATILE VOID VIRTUAL USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPENAME TYPEID TYPEDEF TRY TRUE TILDE THROW THREAD_LOCAL THIS TEMPLATE SWITCH STR_MACRO STR_LITERAL STRUCT STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SHARP_SHARP SHARP SEMICOLON RPAREN RETURN REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_STRINGIZED PLUS_PLUS PLUS_EQ PLUS PERC_GT PERC_EQ PERC_COLON_PERC_COLON PERC_COLON PERC OR_EQ OR OPERATOR NULLPTR NOT_EQ NOT NOEXCEPT NEW NAMESPACE MUTABLE MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS LT_PERC LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT_COLON LT LPAREN LONG LBRACKET LBRACE INT_LITERAL INT INLINE IF IDENT_V IDENT_TM IDENT_SM IDENT_PM IDENT_IM IDENT_EM IDENT_E IDENT_C IDENT_B IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO FRIEND FOR FLOAT_LITERAL FLOAT FALSE EXTERN EXPORT EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ ENUM ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM DYNAMIC_CAST DOUBLE DOT_STAR DOT DO DELETE DEFINED DEFAULT DECLTYPE CUDA_LT_LT_LT CUDA_GT_GT_GT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMPL COMMA COLON_GT COLON_COLON COLON CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CATCH CASE BREAK BOOL_LITERAL BOOL BITOR BITAND BASE_COLON BAR_EQ BAR_BAR BAR AUTO AT ASM AND_EQ AND AMP_EQ AMP_AMP AMP ALIGNOF ALIGNAS
follow(await_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ STAR SLASH_EQ SLASH SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_GT_STAR MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DOT_STAR DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(attribute_using_prefix) = RBRACKET IDENT_V IDENT CONST COMMA
follow(attribute_token) = TY_LPAREN RPAREN RBRACKET LPAREN IDENT_V ELLIPSIS COMMA
follow(attribute_specifier_seq) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(attribute_specifier) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(attribute_scoped_token) = TY_LPAREN RPAREN RBRACKET LPAREN IDENT_V ELLIPSIS COMMA
follow(attribute_namespace_seq) = IDENT_V IDENT
follow(attribute_list) = RPAREN RBRACKET COMMA
follow(attribute_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(attribute_argument_clause_opt) = RPAREN RBRACKET ELLIPSIS COMMA
follow(attribute_argument_clause) = RPAREN RBRACKET ELLIPSIS COMMA
follow(attribute) = RPAREN RBRACKET ELLIPSIS COMMA
follow(attr_macro_call) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(assignment_operator) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS STR_MARKER STR_MACRO STR_LITERAL STATIC_CAST STAR SIZEOF SIGNED SHORT RPAREN REQUIRES REINTERPRET_CAST PP_STRINGIZED PP_IF_S PP_IF_P PP_IF_O PP_IF_E PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_E PP_IFNDEF_A PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_E PP_IFDEF_A PP_ENDIF PP_ELSE PP_ELIF PLUS_PLUS PLUS OP_MACRO OPERATOR OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEW MS_REF MINUS_MINUS MINUS LPAREN LONG LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_CHM IDENT_C IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM DYNAMIC_CAST DUMMY_EXPR DOUBLE DELIM_MACRO DELETE DEFINED DECLTYPE CO_YIELD CO_AWAIT CONST_CAST COMMA COLON_COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL AUTO ASM AMP_AMP AMP ALIGNOF
follow(assignment_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_COND_ PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PARAM_DECL_MACRO ODD_RBRACE NEWLINE MARKER LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_BAR_BROKEN ARG_MACRO AMP_AMP_BROKEN
follow(asm_block) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IMPORT IDENT_V IDENT_TM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_DTOR DTOR_MACRO DOUBLE DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ALIGNAS ACC_SPEC_MACRO
follow(and_expression) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(alignment_specifier) = WHILE WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS TEMPL_GT TEMPLATE SWITCH SUFFIX_MARKER SUFFIX_MACRO STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_CB PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_CB PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_CB PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR OBJC_UNKNOWN OBJC_SELECTOR OBJC_PROTOCOL OBJC_LBRACKET OBJC_INTERFACE OBJC_ENCODE OBJC_CLASS NULLPTR NS_MACRO NOEXCEPT_MACRO NOEXCEPT NEW_INIT_MACRO NEWLINE NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IMPORT IF IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GOTO GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EXCLAM EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELSE ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON_COLON COLON CLASS_LBRACE CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BASE_MACRO BASE_COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(alias_declaration) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF THREAD_LOCAL TEMPLATE STRUCT STATIC_ASSERT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACE PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_EH PP_IF_E PP_IF_D PP_IF_C PP_IF_ATTR PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ OPERATOR OBJC_UNKNOWN MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET LONG INT INLINE IDENT_V IDENT_TM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_B IDENT_AM IDENT HEAD_COLON_COLON GNU_ATTR FUNC_HEAD_MACRO FRIEND FLOAT EXTERN EXPLICIT EOF ENUM ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_DTOR DTOR_MACRO DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL AUTO ATTR_MACRO ATTR_LBRACKET ALIGNAS ACC_SPEC_MACRO
follow(additive_expression) = TY_TEMPL_GT TEMPL_GT SUFFIX_MARKER SUFFIX_MACRO STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PLUS PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP
follow(access_specifier) = VIRTUAL UNION STRUCT MS_REF IDENT_IM IDENT_E IDENT_CHM IDENT HEAD_COLON_COLON ENUM ELAB_CLASS DECLTYPE COLON CLASS_HEAD_MACRO CLASS
follow(acc_annot) = COLON
follow(abstract_pack_declarator) = VIRT_SPEC_MACRO TY_TEMPL_GT TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LPAREN LBRACE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_STMT DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ARG_MACRO
follow(abstract_declarator) = VIRT_SPEC_MACRO TY_TEMPL_GT TRY TEMPL_GT STATIC_ASSERT SEMICOLON SECTION_MARKER RPAREN REQUIRES RBRACE PP_IF_I PP_IFNDEF_I PP_IFNDEF PP_IFDEF_I PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PARAM_DECL_MACRO OVERRIDE MARKER LPAREN LBRACE INI_LBRACE IDENT_VM IDENT_V IDENT_TPM IDENT_PDM IDENT_BM IDENT_AGM FINAL EQ EOF END_STMTS ELLIPSIS DUMMY_STMT DUMMY_BODY DELIM_MACRO COMMA COLON BODY_MACRO ARG_MACRO
follow(_using_directive) = SEMICOLON PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_using_declaration) = STATIC_ASSERT SEMICOLON RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_type_specifier_seq) = WCHAR_T VOLATILE VOID VIRT_SPEC_MACRO VIRTUAL VAX_GLOBALDEF USING UNSIGNED UNION TY_TILDE TY_TEMPL_GT TY_LPAREN TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL TEMPL_GT TEMPLATE SUFFIX_MARKER SUFFIX_MACRO STRUCT STMT_MACRO STATIC_ASSERT STATIC STAR_EQ STAR SLASH_EQ SLASH SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN RESTRICT REQUIRES REGISTER RBRACKET RBRACE QUEST PUBLIC PTR_STAR PTR_MACRO PTR_HAT PTR_AMP_AMP PTR_AMP PS_LPAREN PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_SHIFT PP_IF_P PP_IF_O PP_IF_I PP_IF_EH PP_IF_E PP_IF_D PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_C PP_IF_B PP_IF_ATTR PP_IF_A PP_IFNDEF_X PP_IFNDEF_SHIFT PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_C PP_IFNDEF_B PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_SHIFT PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_C PP_IFDEF_B PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PERC PARAM_DECL_MACRO PARAMS_MACRO OVERRIDE OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE OBJC_UNKNOWN OBJC_PROTOCOL OBJC_INTERFACE OBJC_CLASS NS_MACRO NEW_INIT_MACRO NEWLINE NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PROPERTY MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MINUS_MINUS MINUS_GT_STAR MINUS_GT MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ_GT LT_EQ LT LPAREN LONG LBRACKET LBRACE INT INLINE INI_LBRACE IMPORT IDENT_VM IDENT_V IDENT_TPM IDENT_TM IDENT_SXM IDENT_PM IDENT_PDM IDENT_OM IDENT_NSM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT_BHM IDENT_B IDENT_AM IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAT GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT GNU_ATTR GNU_ASM FUNC_HEAD_MACRO FRIEND FLOAT FINAL EXTERN EXPLICIT EXCLAM_EQ EQ_EQ_EQ EQ_EQ EQ EOF ENUM END_STMTS END_ETORS EMPTY_MACRO ELLIPSIS_ ELLIPSIS ELAB_ENUM ELAB_CLASS DUMMY_TYPE DUMMY_STMT DUMMY_DTOR DUMMY_BODY DTOR_MACRO DOUBLE DOT_STAR DOT DELIM_MACRO DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CUDA_LT_LT_LT CUDA_GT_GT_GT CONSTINIT CONSTEXPR CONSTEVAL CONST CONCEPT COMMA_BROKEN COMMA COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO BLOCK_HEAD_MACRO BEGIN_STMTS BEGIN_ETORS BEGIN_ASM BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR AUTO ATTR_MACRO ATTR_LBRACKET ASM_SHADER ASM ARG_MACRO ARGS_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNAS ACC_SPEC_MACRO
follow(_static_assert_declaration) = STATIC_ASSERT SEMICOLON RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_statement_seq) = WHILE WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF USING USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED UNION TY_TILDE TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TYPEDEF TRY TILDE THROW_ THROW THREAD_LOCAL THIS SWITCH STR_MARKER STR_MACRO STR_LITERAL STRUCT STMT_MACRO STATIC_CAST STATIC_ASSERT STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RETURN RESTRICT REQUIRES REINTERPRET_CAST REGISTER RBRACE PUBLIC PROTECTED PRIVATE PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_H PP_IF_EH PP_IF_E PP_IF_D PP_IF_CLOSING PP_IF_CLOSE_OPEN PP_IF_C PP_IF_ATTR PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_H PP_IFNDEF_EH PP_IFNDEF_E PP_IFNDEF_D PP_IFNDEF_CLOSING PP_IFNDEF_CLOSE_OPEN PP_IFNDEF_C PP_IFNDEF_ATTR PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_H PP_IFDEF_EH PP_IFDEF_E PP_IFDEF_D PP_IFDEF_CLOSING PP_IFDEF_CLOSE_OPEN PP_IFDEF_C PP_IFDEF_ATTR PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS OP_MACRO OPERATOR ODD_RBRACE ODD_LBRACE ODD_FOR ODD_ELSE OBJC_UNKNOWN OBJC_TRY OBJC_THROW OBJC_SYNCHRONIZED OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE OBJC_AUTORELEASEPOOL NULLPTR NOEXCEPT NEW NAMESPACE MUTABLE MS_STDCALL MS_REF MS_PRAGMA MS_CDECL MS_ATTR_LBRACKET MS_ASM MINUS_MINUS MINUS LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INLINE INI_LBRACE IF IDENT_V IDENT_TM IDENT_SM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BHM IDENT_BEM IDENT_AM IDENT HEAD_COLON_COLON HAS_INCLUDE HAS_CPP_ATTRIBUTE GOTO GNU_ATTR GNU_ASM FRIEND FOR FOLD_LPAREN FLOAT_LITERAL FLOAT EXTERN EXPLICIT EXCLAM EOF ENUM END_STMTS ELSE ELLIPSIS ELAB_ENUM ELAB_CLASS DYNAMIC_CAST DUMMY_TYPE DUMMY_STMT DUMMY_EXPR DOUBLE DO DELIM_MACRO DELETE DEFINED DEFAULT DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CO_YIELD CO_RETURN CO_AWAIT CONTINUE CONST_CAST CONSTINIT CONSTEXPR CONSTEVAL CONST COMMA COLON_COLON CLASS_HEAD_MACRO CLASS CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO CATCH CASE BREAK BOOL_LITERAL BOOL BLOCK_HEAD_MACRO BLOCK_END_MACRO AUTO ATTR_MACRO ATTR_LBRACKET ASM AMP_AMP AMP ALIGNOF ALIGNAS ACC_SPEC_MACRO
follow(_simple_declaration) = STATIC_ASSERT SEMICOLON RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_pp_param_list) = RPAREN ELLIPSIS COMMA
follow(_pp_lor_if_section) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN
follow(_pp_lor_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_lor_else_group) = PP_ENDIF
follow(_pp_lor_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_land_if_section) = WCHAR_T VOID USER_STR_LITERAL USER_INT_LITERAL USER_FLOAT_LITERAL USER_CHAR_LITERAL UNSIGNED TY_TILDE TY_TEMPL_GT TY_LPAREN TY_HAT TYPE_MACRO TYPENAME TYPEID TILDE THROW_ THROW THIS TEMPL_GT STR_MARKER STR_MACRO STR_LITERAL STMT_MACRO STATIC_CAST STATIC_ASSERT STAR_EQ STAR SLASH_EQ SIZEOF SIGNED SHORT SEMICOLON SECTION_MARKER RPAREN REQUIRES REINTERPRET_CAST RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_STRINGIZED PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_S PP_IF_P PP_IF_O PP_IF_I PP_IF_E PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_A PP_IFNDEF_S PP_IFNDEF_P PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_E PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_A PP_IFNDEF PP_IFDEF_S PP_IFDEF_P PP_IFDEF_O PP_IFDEF_I PP_IFDEF_E PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_PLUS PLUS_EQ PLUS PERC_EQ PARAM_DECL_MACRO OP_MACRO OPERATOR ODD_RBRACE OBJC_SELECTOR OBJC_LBRACKET OBJC_ENCODE NULLPTR NOEXCEPT NEWLINE NEW MS_REF MINUS_MINUS MINUS_EQ MINUS MARKER LT_LT_EQ LPAREN LONG LBRACE LAM_LBRACKET INT_MACRO INT_LITERAL INT INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_OM IDENT_LPAREN IDENT_LOM IDENT_LM IDENT_IM IDENT_EM IDENT_E IDENT_DSM IDENT_CHM IDENT_C IDENT_AGM IDENT HEAD_COLON_COLON HAT_EQ HAS_INCLUDE HAS_CPP_ATTRIBUTE GT_GT_EQ FOLD_LPAREN FLOAT_LITERAL FLOAT EXCLAM EQ EOF END_STMTS END_ETORS ELLIPSIS DYNAMIC_CAST DUMMY_EXPR DOUBLE DELIM_MACRO DELETE DEFINED DECLTYPE CUDA_GT_GT_GT CO_YIELD CO_AWAIT CONST_CAST COMMA_BROKEN COMMA COLON_COLON COLON CHAR_LITERAL CHAR8_T CHAR32_T CHAR16_T CHAR BOOL_LITERAL BOOL BAR_EQ BAR_BAR_BROKEN BAR_BAR AUTO ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP AMP ALIGNOF
follow(_pp_land_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_land_else_group) = PP_ENDIF
follow(_pp_land_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_ior_if_section) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP
follow(_pp_ior_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_ior_else_group) = PP_ENDIF
follow(_pp_ior_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_idtor_if_section) = STATIC_ASSERT SEMICOLON SECTION_MARKER RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO COMMA
follow(_pp_func_head_if_section) = WCHAR_T VOLATILE VOID VIRTUAL VAX_GLOBALDEF UNSIGNED UNION TYPE_MACRO TYPENAME TYPEDEF TRY THREAD_LOCAL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PUBLIC PROTECTED PRIVATE PP_IF_EH PP_IF_D PP_IF_C PP_IFNDEF_EH PP_IFNDEF_D PP_IFNDEF_C PP_IFNDEF PP_IFDEF_EH PP_IFDEF_D PP_IFDEF_C PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF MUTABLE MS_STDCALL MS_REF MS_CDECL MS_ATTR_LBRACKET LONG LBRACE INT INLINE IDENT_TM IDENT_IM IDENT_E IDENT_DM IDENT_CM IDENT_CHM IDENT_C IDENT_BM IDENT HEAD_COLON_COLON FRIEND FLOAT EXTERN EXPLICIT EQ ENUM ELAB_ENUM ELAB_CLASS DUMMY_BODY DOUBLE DECL_SPEC_MACRO DECL_MACRO DECLTYPE CV_MACRO CONSTINIT CONSTEXPR CONSTEVAL CONST COLON CLASS_HEAD_MACRO CLASS CHAR8_T CHAR32_T CHAR16_T CHAR CC_MACRO BOOL BODY_MACRO AUTO ACC_SPEC_MACRO
follow(_pp_func_head_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_func_head_else_group) = PP_ENDIF
follow(_pp_func_head_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_eor_if_section) = TY_TEMPL_GT TEMPL_GT STMT_MACRO STATIC_ASSERT STAR_EQ SLASH_EQ SEMICOLON SECTION_MARKER RPAREN RBRACKET RBRACE QUEST PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_X PP_IF_O PP_IF_I PP_IF_COND_ PP_IF_COND PP_IF_CLOSING PP_IF_B PP_IF_A PP_IFNDEF_X PP_IFNDEF_O PP_IFNDEF_I PP_IFNDEF_COND_ PP_IFNDEF_COND PP_IFNDEF_CLOSING PP_IFNDEF_B PP_IFNDEF_A PP_IFNDEF PP_IFDEF_X PP_IFDEF_O PP_IFDEF_I PP_IFDEF_COND_ PP_IFDEF_COND PP_IFDEF_CLOSING PP_IFDEF_B PP_IFDEF_A PP_IFDEF PP_IF PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ PLUS_EQ PERC_EQ PARAM_DECL_MACRO OP_MACRO ODD_RBRACE NEWLINE MINUS_EQ MARKER LT_LT_EQ LBRACE INI_LBRACE IDENT_V IDENT_TPM IDENT_PDM IDENT_EM IDENT_E IDENT_DSM IDENT_AGM HAT_EQ HAT GT_GT_EQ EQ EOF END_STMTS END_ETORS ELLIPSIS DELIM_MACRO CUDA_GT_GT_GT COMMA_BROKEN COMMA COLON BAR_EQ BAR_BAR_BROKEN BAR_BAR BAR ARG_MACRO AMP_EQ AMP_AMP_BROKEN AMP_AMP
follow(_pp_eor_if_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_eor_else_group) = PP_ENDIF
follow(_pp_eor_elif_group) = PP_ENDIF PP_ELSE PP_ELIF
follow(_pp_dinit_if_section_list) = PP_IF_I PP_IFNDEF_I PP_IFDEF_I LBRACKET IDENT_V DOT
follow(_pp_define) = NEWLINE
follow(_opaque_enum_declaration) = SEMICOLON PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_namespace_alias_definition) = SEMICOLON PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_initializer_list) = SEMICOLON RPAREN RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_CLOSING PP_IFDEF_I PP_IFDEF_CLOSING PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ EOF CUDA_GT_GT_GT COMMA_BROKEN
follow(_init_statement) = SEMICOLON
follow(_designated_initializer_list) = RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ EOF COMMA
follow(_block_declaration) = SEMICOLON PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_asm_declaration) = SEMICOLON PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(_alias_declaration) = STATIC_ASSERT SEMICOLON RBRACE PP_ENDIF PP_ELSE PP_ELIF EOF END_STMTS DELIM_MACRO
follow(__initializer_list) = SEMICOLON RPAREN RBRACE PP_UNKNOWN PP_UNDEF PP_PRAGMA PP_ODD_IFNDEF PP_ODD_IFDEF PP_ODD_IF PP_ODD_ENDIF PP_ODD_ELSE PP_ODD_ELIF PP_LINE PP_INCLUDE PP_IMPORT PP_IF_I PP_IF_CLOSING PP_IFNDEF_I PP_IFNDEF_CLOSING PP_IFDEF_I PP_IFDEF_CLOSING PP_ERROR PP_ENDIF PP_ELSE PP_ELIF PP_DEFINE PP_ IDENT_AGM EOF CUDA_GT_GT_GT COMMA_BROKEN COMMA ARG_MACRO
Built an LR(0) automaton with 9942 states.
The grammar is not SLR(1) -- 502 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 10052 states.
334 shift/reduce conflicts were silently solved.
3369 out of 10052 states have a default reduction.
4981 out of 10052 states are represented.
781 out of 1177 symbols keep track of their start position.
678 out of 1177 symbols keep track of their end position.
1815 out of 5407 productions exploit shiftreduce optimization.
0 out of 10052 states can peek at an error.
26270 functions before inlining, 2642 functions after inlining.
