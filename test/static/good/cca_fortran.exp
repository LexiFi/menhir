Grammar has 738 nonterminal symbols, among which 36 start symbols.
Grammar has 724 terminal symbols.
Grammar has 2545 productions.
nullable(xlf_source) = false
nullable(xlf_option) = false
nullable(xlf_factor) = false
nullable(xlf_directive) = false
nullable(xlf_cycle) = false
nullable(xlf_assertion) = false
nullable(xlf) = false
nullable(write_stmt_head2) = false
nullable(write_stmt_head) = false
nullable(where_stmt) = false
nullable(where_construct_stmt) = false
nullable(where_construct_head) = false
nullable(where_construct) = false
nullable(where_body_construct) = false
nullable(wait_stmt_head) = false
nullable(wait_spec) = false
nullable(use_stmt) = false
nullable(unlock_stmt_head) = false
nullable(union_stmt) = false
nullable(union_decl) = false
nullable(type_spec_node) = false
nullable(type_spec_no_character) = false
nullable(type_spec) = false
nullable(type_param_value) = false
nullable(type_kw) = false
nullable(type_is) = false
nullable(type_guard_stmt) = false
nullable(type_guard_block) = false
nullable(type_declaration_stmt_head) = false
nullable(type_declaration_stmt) = false
nullable(type_bound_procedure_stmt) = false
nullable(type_bound_procedure_part) = false
nullable(type_bound_proc_decl) = false
nullable(type_bound_proc_binding) = false
nullable(type_bound_generic_stmt) = false
nullable(tuple_head) = false
nullable(tuple) = false
nullable(tb_contains_stmt) = false
nullable(target_stmt) = false
nullable(sync_stmt_part) = false
nullable(sync_stat_OR_image_set) = false
nullable(suffix) = false
nullable(substring_range_OR_section_subscript_OR_actual_arg_spec) = false
nullable(substring_range) = false
nullable(subscriptorder_array) = false
nullable(subroutine_subprogram0) = false
nullable(subroutine_subprogram) = false
nullable(subroutine_stmt_head) = false
nullable(subroutine_stmt) = false
nullable(subroutine_head0) = false
nullable(subroutine_head) = false
nullable(subprograms) = true
nullable(subprogram_part) = false
nullable(subprogram) = false
nullable(submodule_stmt) = false
nullable(submodule_head0) = false
nullable(submodule_head) = false
nullable(submodule) = false
nullable(structure_stmt_head) = false
nullable(structure_stmt) = false
nullable(structure_decl) = false
nullable(stmt_end) = false
nullable(stmt) = false
nullable(specification_stmt_no_access_stmt) = false
nullable(specification_stmt) = false
nullable(specification_part_construct_OR_execution_part_construct) = false
nullable(specification_part_construct) = false
nullable(special_token) = false
nullable(special_symbol) = false
nullable(spec_part_construct_OR_exec_part_constructs) = false
nullable(simple_attr_stmt_head) = false
nullable(simple_attr_stmt) = false
nullable(sign_edit_desc_OR_blank_interp_edit_desc) = false
nullable(shape_spec) = false
nullable(sequence_stmt) = false
nullable(separated_nonempty_list(ioption(END_FRAGMENT),partial_subprogram)) = false
nullable(separated_nonempty_list(ioption(COMMA__SLASH),namelist_group)) = false
nullable(separated_nonempty_list(ioption(COMMA__SLASH),common_spec)) = false
nullable(separated_nonempty_list(ioption(COMMA),only)) = false
nullable(separated_nonempty_list(ioption(COMMA),omp_clause)) = false
nullable(separated_nonempty_list(ioption(COMMA),format_item)) = false
nullable(separated_nonempty_list(ioption(COMMA),dec_clause)) = false
nullable(separated_nonempty_list(ioption(COMMA),data_stmt_set)) = false
nullable(separated_nonempty_list(ioption(COMMA),acc_clause)) = false
nullable(separated_nonempty_list(component_sep,part_ref_)) = false
nullable(separated_nonempty_list(COMMA__SLASH,record_decl)) = false
nullable(separated_nonempty_list(COMMA,xlf_option)) = false
nullable(separated_nonempty_list(COMMA,xlf_assertion)) = false
nullable(separated_nonempty_list(COMMA,wait_spec)) = false
nullable(separated_nonempty_list(COMMA,var_or_ref)) = false
nullable(separated_nonempty_list(COMMA,type_bound_proc_decl)) = false
nullable(separated_nonempty_list(COMMA,type_attr_spec)) = false
nullable(separated_nonempty_list(COMMA,target_object)) = false
nullable(separated_nonempty_list(COMMA,sync_stat_OR_image_set)) = false
nullable(separated_nonempty_list(COMMA,substring_range_OR_section_subscript_OR_actual_arg_spec)) = false
nullable(separated_nonempty_list(COMMA,subscriptorder_array)) = false
nullable(separated_nonempty_list(COMMA,shape_spec)) = false
nullable(separated_nonempty_list(COMMA,saved_entity)) = false
nullable(separated_nonempty_list(COMMA,rename)) = false
nullable(separated_nonempty_list(COMMA,proc_decl)) = false
nullable(separated_nonempty_list(COMMA,proc_compo_attr_spec)) = false
nullable(separated_nonempty_list(COMMA,proc_attr_spec)) = false
nullable(separated_nonempty_list(COMMA,position_spec_OR_sync_stat)) = false
nullable(separated_nonempty_list(COMMA,position_spec)) = false
nullable(separated_nonempty_list(COMMA,pointer_object)) = false
nullable(separated_nonempty_list(COMMA,pointee)) = false
nullable(separated_nonempty_list(COMMA,omp_type_spec)) = false
nullable(separated_nonempty_list(COMMA,omp_list_item)) = false
nullable(separated_nonempty_list(COMMA,ocl_nn)) = false
nullable(separated_nonempty_list(COMMA,ocl_directive)) = false
nullable(separated_nonempty_list(COMMA,object_)) = false
nullable(separated_nonempty_list(COMMA,named_constant_def)) = false
nullable(separated_nonempty_list(COMMA,name)) = false
nullable(separated_nonempty_list(COMMA,lock_variable_OR_lock_stat)) = false
nullable(separated_nonempty_list(COMMA,letter_spec)) = false
nullable(separated_nonempty_list(COMMA,label)) = false
nullable(separated_nonempty_list(COMMA,ioption(substring_range_OR_section_subscript_OR_actual_arg_spec))) = true
nullable(separated_nonempty_list(COMMA,ioption(expr))) = true
nullable(separated_nonempty_list(COMMA,io_item)) = false
nullable(separated_nonempty_list(COMMA,io_control_spec)) = false
nullable(separated_nonempty_list(COMMA,int_literal)) = false
nullable(separated_nonempty_list(COMMA,inquire_spec)) = false
nullable(separated_nonempty_list(COMMA,independent_clause)) = false
nullable(separated_nonempty_list(COMMA,implicit_spec)) = false
nullable(separated_nonempty_list(COMMA,generic_spec)) = false
nullable(separated_nonempty_list(COMMA,forall_triplet_spec_OR_expr)) = false
nullable(separated_nonempty_list(COMMA,flush_spec)) = false
nullable(separated_nonempty_list(COMMA,expr)) = false
nullable(separated_nonempty_list(COMMA,explicit_shape_spec)) = false
nullable(separated_nonempty_list(COMMA,explicit_coshape_spec)) = false
nullable(separated_nonempty_list(COMMA,equivalence_set)) = false
nullable(separated_nonempty_list(COMMA,equivalence_object)) = false
nullable(separated_nonempty_list(COMMA,enumerator)) = false
nullable(separated_nonempty_list(COMMA,encode_decode_spec)) = false
nullable(separated_nonempty_list(COMMA,dummy_arg)) = false
nullable(separated_nonempty_list(COMMA,dimension_array)) = false
nullable(separated_nonempty_list(COMMA,define_file_spec)) = false
nullable(separated_nonempty_list(COMMA,deferred_shape_spec)) = false
nullable(separated_nonempty_list(COMMA,deferred_coshape_spec)) = false
nullable(separated_nonempty_list(COMMA,dec_var_expr)) = false
nullable(separated_nonempty_list(COMMA,dec_list_item)) = false
nullable(separated_nonempty_list(COMMA,dec_level)) = false
nullable(separated_nonempty_list(COMMA,dec_int)) = false
nullable(separated_nonempty_list(COMMA,dec_hint)) = false
nullable(separated_nonempty_list(COMMA,dec_clause)) = false
nullable(separated_nonempty_list(COMMA,dec_class_rule)) = false
nullable(separated_nonempty_list(COMMA,dec_att)) = false
nullable(separated_nonempty_list(COMMA,dec_a)) = false
nullable(separated_nonempty_list(COMMA,deallocate_stmt_part)) = false
nullable(separated_nonempty_list(COMMA,data_stmt_value)) = false
nullable(separated_nonempty_list(COMMA,data_stmt_object)) = false
nullable(separated_nonempty_list(COMMA,data_i_do_object_OR_variable)) = false
nullable(separated_nonempty_list(COMMA,cray_pointer_spec)) = false
nullable(separated_nonempty_list(COMMA,connect_spec)) = false
nullable(separated_nonempty_list(COMMA,component_decl_OR_entity_decl)) = false
nullable(separated_nonempty_list(COMMA,common_block_object)) = false
nullable(separated_nonempty_list(COMMA,collapse_array)) = false
nullable(separated_nonempty_list(COMMA,codimension_decl)) = false
nullable(separated_nonempty_list(COMMA,close_spec)) = false
nullable(separated_nonempty_list(COMMA,case_value_range)) = false
nullable(separated_nonempty_list(COMMA,binding_attr)) = false
nullable(separated_nonempty_list(COMMA,bind_entity)) = false
nullable(separated_nonempty_list(COMMA,attr_spec)) = false
nullable(separated_nonempty_list(COMMA,association)) = false
nullable(separated_nonempty_list(COMMA,allocate_stmt_part)) = false
nullable(separated_nonempty_list(COMMA,allocatable_array)) = false
nullable(separated_nonempty_list(COMMA,acc_list_item)) = false
nullable(separated_nonempty_list(COMMA,ac_value)) = false
nullable(selector_part) = false
nullable(select_type_stmt) = false
nullable(select_type_construct) = false
nullable(select_case_stmt) = false
nullable(save_stmt_head) = false
nullable(save_stmt) = false
nullable(rewrite_stmt_head2) = false
nullable(rewrite_stmt_head) = false
nullable(rewind_stmt_head) = false
nullable(result) = false
nullable(rename_OR_only) = false
nullable(rename) = false
nullable(record_stmt_head) = false
nullable(record_stmt) = false
nullable(record_decl) = false
nullable(real_literal) = false
nullable(read_stmt_head2) = false
nullable(read_stmt_head) = false
nullable(read_OR_write_stmt_head2) = false
nullable(read_OR_write_stmt_head) = false
nullable(read_OR_print_stmt_head) = false
nullable(program_unit) = false
nullable(program_stmt_head) = false
nullable(program_stmt) = false
nullable(program) = false
nullable(procedure_stmt) = false
nullable(procedure_kw) = false
nullable(procedure_declaration_stmt) = false
nullable(proc_interface) = false
nullable(proc_decl) = false
nullable(proc_compo_attr_spec) = false
nullable(proc_attr_spec) = false
nullable(proc_attr_part) = false
nullable(private_stmt) = false
nullable(private_sequence_stmt) = false
nullable(primary) = false
nullable(prefix_spec_no_type_spec) = false
nullable(pp_token) = false
nullable(pp_macro_id) = false
nullable(pp_macro_const) = false
nullable(pp_ident) = false
nullable(pp_directive) = false
nullable(pp_cond) = false
nullable(pp_branch) = false
nullable(position_spec) = false
nullable(pointer_stmt) = false
nullable(pointer_assignment_stmt) = false
nullable(pointee) = false
nullable(partial_variable) = false
nullable(partial_type_spec) = false
nullable(partial_type_declaration_stmt) = false
nullable(partial_type_bound_proc_part) = false
nullable(partial_subroutine_stmt_head) = false
nullable(partial_subroutine_head) = false
nullable(partial_subprograms) = false
nullable(partial_subprogram) = false
nullable(partial_stmts) = false
nullable(partial_specification_part) = false
nullable(partial_spec__exec) = false
nullable(partial_pu_tail) = false
nullable(partial_program_unit) = false
nullable(partial_program) = false
nullable(partial_onlys) = false
nullable(partial_interface_spec) = false
nullable(partial_function_stmt_head) = false
nullable(partial_function_stmt) = false
nullable(partial_function_head) = false
nullable(partial_expr) = false
nullable(partial_execution_part) = false
nullable(partial_derived_type_def_part) = false
nullable(partial_data_stmt_sets) = false
nullable(partial_case_block) = false
nullable(partial_assignment_stmt) = false
nullable(partial_action_stmt) = false
nullable(part_ref_) = false
nullable(part_name) = false
nullable(parameter_stmt) = false
nullable(parameter_format_entry_stmt) = false
nullable(or_operand) = false
nullable(optional_stmt_head) = false
nullable(optional_stmt) = false
nullable(operator_defined_op) = false
nullable(open_stmt_head) = false
nullable(opclist(substring_range_OR_section_subscript_OR_actual_arg_spec)) = true
nullable(opclist(expr)) = true
nullable(onlys) = false
nullable(only_head) = false
nullable(only) = false
nullable(omp_token) = false
nullable(omp_reduction_op) = false
nullable(omp_policy) = false
nullable(omp_nowait) = false
nullable(omp_map_type) = false
nullable(omp_list) = false
nullable(omp_kind) = false
nullable(omp_initializer_clause) = false
nullable(omp_if_clause) = false
nullable(omp_directive) = false
nullable(omp_dependence_type) = false
nullable(omp_construct_type) = false
nullable(omp_combiner) = false
nullable(omp_clause) = false
nullable(omp_attr) = false
nullable(omp_atomic) = false
nullable(omp) = false
nullable(ocl_tuple) = false
nullable(ocl_scope) = false
nullable(ocl_nn__colon) = false
nullable(ocl_nn) = false
nullable(ocl_directive) = false
nullable(ocl) = false
nullable(object_) = false
nullable(null_ref) = false
nullable(nonempty_list(subroutine_head0)) = false
nullable(nonempty_list(stmt)) = false
nullable(nonempty_list(program_unit)) = false
nullable(nonempty_list(prefix_spec_no_type_spec)) = false
nullable(nonempty_list(name)) = false
nullable(nonempty_list(map_decl)) = false
nullable(nonempty_list(function_head0)) = false
nullable(nonempty_list(field_decl)) = false
nullable(nonempty_list(enumerator_def_stmt)) = false
nullable(nonempty_list(dec_option)) = false
nullable(nonempty_list(data_stmt_set__comma_opt)) = false
nullable(nonempty_list(comma__attr_spec)) = false
nullable(nonempty_list(case_stmt__block)) = false
nullable(nonempty_list(case_block)) = false
nullable(nonempty_list(TYPE_SPEC)) = false
nullable(nonempty_list(SEMICOLON)) = false
nullable(namelist_stmt_head) = false
nullable(namelist_stmt) = false
nullable(namelist_group) = false
nullable(named_constant_def) = false
nullable(name) = false
nullable(mult_operand) = false
nullable(module_stmt) = false
nullable(module_nature_part) = false
nullable(module_nature) = false
nullable(module_) = false
nullable(module0_) = false
nullable(masked_or_unmasked_elsewhere_stmt) = false
nullable(map_stmt) = false
nullable(map_decl) = false
nullable(main_program) = false
nullable(main) = false
nullable(lparen__omp_list__rparen) = false
nullable(lparen__name__rparen) = false
nullable(loop_control) = false
nullable(logical_literal) = false
nullable(lock_variable_OR_lock_stat) = false
nullable(list(where_body_construct)) = true
nullable(list(type_guard_block)) = true
nullable(list(type_bound_proc_binding)) = true
nullable(list(subprogram)) = true
nullable(list(program_unit)) = true
nullable(list(private_sequence_stmt)) = true
nullable(list(prefix_spec_no_type_spec)) = true
nullable(list(masked_or_unmasked_elsewhere_block)) = true
nullable(list(interface_specification)) = true
nullable(list(forall_body_construct)) = true
nullable(list(derived_type_def_content)) = true
nullable(list(component_def_stmt)) = true
nullable(list(comma__attr_spec)) = true
nullable(linda_typeof) = false
nullable(linda_formal) = false
nullable(linda_call) = false
nullable(linda_anonymous_formal_head) = false
nullable(linda_anonymous_formal) = false
nullable(level_5_expr) = false
nullable(level_4_expr) = false
nullable(level_3_expr) = false
nullable(level_2_expr) = false
nullable(level_1_expr) = false
nullable(letter_spec) = false
nullable(length_selector) = false
nullable(language_binding_spec_head) = false
nullable(language_binding_spec) = false
nullable(kind_selector) = false
nullable(ioctl_spec_kw) = false
nullable(io_control_spec) = false
nullable(intrinsic_type_spec) = false
nullable(intrinsic_stmt) = false
nullable(intrinsic_op) = false
nullable(interface_stmt) = false
nullable(interface_specification) = false
nullable(interface_body) = false
nullable(interface_block) = false
nullable(interface) = false
nullable(intent_stmt) = false
nullable(intent_spec) = false
nullable(intent) = false
nullable(int_literal) = false
nullable(inquire_stmt_head) = false
nullable(inquire_spec) = false
nullable(initialization) = false
nullable(independent_clause) = false
nullable(import_stmt) = false
nullable(implicit_stmt_head) = false
nullable(implicit_stmt) = false
nullable(implicit_spec) = false
nullable(implicit_part_stmt_proper) = false
nullable(implicit_part_stmt_OR_declaration_construct) = false
nullable(image_selector) = false
nullable(if_then_stmt) = false
nullable(if__lparen__expr__rparen) = false
nullable(if__lparen__expr) = false
nullable(if_) = false
nullable(high_or_low) = false
nullable(generic_spec) = false
nullable(function_subprogram0) = false
nullable(function_subprogram) = false
nullable(function_stmt_head0) = false
nullable(function_stmt_head) = false
nullable(function_stmt) = false
nullable(function_head0) = false
nullable(function_head) = false
nullable(fragment) = false
nullable(format_stmt_head) = false
nullable(format_stmt) = false
nullable(format_specification) = false
nullable(format_item) = false
nullable(format_entry_stmt) = false
nullable(format) = false
nullable(forall_triplet_spec_OR_expr) = false
nullable(forall_stmt) = false
nullable(forall_header) = false
nullable(forall_construct_stmt) = false
nullable(forall_construct) = false
nullable(forall_body_construct) = false
nullable(forall_assignment_stmt) = false
nullable(flush_stmt_head) = false
nullable(flush_spec) = false
nullable(find_stmt_head) = false
nullable(final_procedure_stmt) = false
nullable(expr) = false
nullable(explicit_shape_spec) = false
nullable(explicit_coshape_spec) = false
nullable(execution_part_construct) = false
nullable(executable_construct) = false
nullable(equivalence_stmt) = false
nullable(equivalence_set) = false
nullable(equivalence_object) = false
nullable(equiv_operand) = false
nullable(enumerator_def_stmt) = false
nullable(enumerator) = false
nullable(enum_def_stmt) = false
nullable(enum_def) = false
nullable(enum_cst) = false
nullable(entry_stmt_sub) = false
nullable(entry_stmt) = false
nullable(entity_name) = false
nullable(endfile_stmt_head) = false
nullable(end_where_stmt) = false
nullable(end_union_stmt) = false
nullable(end_type_stmt) = false
nullable(end_subroutine_stmt_head) = false
nullable(end_submodule_stmt_head) = false
nullable(end_structure_stmt) = false
nullable(end_stmt_p) = false
nullable(end_stmt) = false
nullable(end_select_type_stmt) = false
nullable(end_select_stmt) = false
nullable(end_program_stmt_head) = false
nullable(end_module_stmt_head) = false
nullable(end_map_stmt) = false
nullable(end_interface_stmt) = false
nullable(end_interface) = false
nullable(end_if_stmt) = false
nullable(end_function_stmt_head) = false
nullable(end_forall_stmt) = false
nullable(end_enum_stmt) = false
nullable(end_do_stmt) = false
nullable(end_critical_stmt) = false
nullable(end_block_stmt) = false
nullable(end_block_data_stmt_head) = false
nullable(end_associate_stmt) = false
nullable(encode_decode_stmt_head) = false
nullable(else_stmt) = false
nullable(else_if_stmt_head) = false
nullable(else_if_stmt) = false
nullable(else_if) = false
nullable(dummy_arg) = false
nullable(dtype_args) = true
nullable(do_stmt_head) = false
nullable(do_stmt) = false
nullable(directive) = false
nullable(dimension_stmt_head) = false
nullable(dimension_stmt) = false
nullable(dimension_array) = false
nullable(derived_type_stmt) = false
nullable(derived_type_def_part) = true
nullable(derived_type_def_content) = false
nullable(derived_type_def) = false
nullable(delete_stmt_head) = false
nullable(define_file_spec) = false
nullable(declaration_construct_proper) = false
nullable(decl_type_spec_proper) = false
nullable(decl_type_spec) = false
nullable(dec_var_expr) = false
nullable(dec_prefetch_hint) = true
nullable(dec_p) = false
nullable(dec_option) = false
nullable(dec_op) = false
nullable(dec_loop_count) = false
nullable(dec_list_p) = false
nullable(dec_list_item) = false
nullable(dec_list) = false
nullable(dec_level) = false
nullable(dec_iop) = false
nullable(dec_int_spec) = false
nullable(dec_int) = false
nullable(dec_hint) = false
nullable(dec_directive) = false
nullable(dec_data_type) = false
nullable(dec_clause) = false
nullable(dec_class_rule) = false
nullable(dec_att) = false
nullable(dec_a) = false
nullable(dec) = false
nullable(data_stmt_value) = false
nullable(data_stmt_set__comma_opt) = false
nullable(data_stmt_set) = false
nullable(data_stmt_repeat__star) = false
nullable(data_stmt_repeat) = false
nullable(data_stmt_object) = false
nullable(data_stmt_head) = false
nullable(data_stmt_constant) = false
nullable(data_stmt) = false
nullable(data_ref_) = false
nullable(data_implied_do) = false
nullable(data_i_do_object_OR_variable) = false
nullable(critical_stmt) = false
nullable(critical_construct) = false
nullable(cray_pointer_spec) = false
nullable(control_edit_desc) = false
nullable(contains_stmt) = false
nullable(construct_name__colon) = false
nullable(constant) = false
nullable(connect_spec_kw) = false
nullable(connect_spec) = false
nullable(computed_goto_stmt_head) = false
nullable(component_sep) = false
nullable(component_def_stmt) = false
nullable(component_decl_OR_entity_decl) = false
nullable(component_attr_part) = false
nullable(complex_literal) = false
nullable(common_stmt_head) = false
nullable(common_stmt) = false
nullable(common_spec) = false
nullable(common_name_part) = false
nullable(common_block_object) = false
nullable(comma__module_nature) = false
nullable(colon__name) = false
nullable(collapse_array) = false
nullable(codimension_stmt_head) = false
nullable(codimension_stmt) = false
nullable(codimension_decl) = false
nullable(coarray_spec_part) = false
nullable(coarray_spec) = false
nullable(close_stmt_head) = false
nullable(close_spec1) = false
nullable(close_spec) = false
nullable(class_is) = false
nullable(character) = false
nullable(char_selector_no_length_selector) = false
nullable(char_selector) = false
nullable(char_literal) = false
nullable(char_length_part) = false
nullable(char_length) = false
nullable(case_value_range) = false
nullable(case_stmt__block) = false
nullable(case_stmt) = false
nullable(case_selector) = false
nullable(case_construct) = false
nullable(case_block) = false
nullable(boz_literal) = false
nullable(block_stmt) = false
nullable(block_data_stmt) = false
nullable(block_data0) = false
nullable(block_data) = false
nullable(block_construct) = false
nullable(block) = true
nullable(binding_private_stmt) = false
nullable(binding_attr_part) = false
nullable(binding_attr) = false
nullable(bind_stmt) = false
nullable(backspace_stmt_head) = false
nullable(attr_spec) = false
nullable(asynchronous_stmt_head) = false
nullable(asynchronous_stmt) = false
nullable(association) = false
nullable(associate_stmt) = false
nullable(associate_construct) = false
nullable(assignment_stmt_head) = false
nullable(assignment_stmt) = false
nullable(array_spec) = false
nullable(array_constructor_head) = false
nullable(array_constructor) = false
nullable(apollo_pointer_spec) = false
nullable(and_operand) = false
nullable(alt_return_spec) = false
nullable(allocate_) = false
nullable(allocatable_stmt) = false
nullable(add_operand) = false
nullable(action_stmt_no_assign) = false
nullable(action_stmt) = false
nullable(access_stmt_public) = false
nullable(access_stmt_private) = false
nullable(access_stmt) = false
nullable(accept_stmt_head) = false
nullable(acc_op) = false
nullable(acc_list_item) = false
nullable(acc_list) = false
nullable(acc_iop) = false
nullable(acc_directive) = false
nullable(acc_clause) = false
nullable(acc_atomic) = false
nullable(acc) = false
nullable(ac_spec) = false
nullable(_xlf) = false
nullable(_write_stmt) = false
nullable(_where_stmt) = false
nullable(_where_construct_stmt) = false
nullable(_wait_stmt) = false
nullable(_use_stmt) = false
nullable(_unlock_stmt) = false
nullable(_union_stmt) = false
nullable(_type_stmt) = false
nullable(_type_guard_stmt) = false
nullable(_type_declaration_stmt) = false
nullable(_type_bound_procedure_stmt) = false
nullable(_type_bound_generic_stmt) = false
nullable(_tuple) = false
nullable(_tb_contains_stmt) = false
nullable(_target_stmt) = false
nullable(_sync_xxx_stmt) = false
nullable(_subroutine_subprogram) = false
nullable(_subroutine_stmt) = false
nullable(_submodule_stmt) = false
nullable(_structure_stmt) = false
nullable(_stop_stmt) = false
nullable(_simple_attr_stmt) = false
nullable(_sequence_stmt) = false
nullable(_select_type_stmt) = false
nullable(_select_case_stmt) = false
nullable(_save_stmt) = false
nullable(_rewrite_stmt) = false
nullable(_rewind_stmt) = false
nullable(_return_stmt) = false
nullable(_record_stmt) = false
nullable(_read_stmt) = false
nullable(_read_OR_write_stmt) = false
nullable(_read_OR_print_stmt) = false
nullable(_program_stmt) = false
nullable(_procedure_stmt) = false
nullable(_procedure_declaration_stmt) = false
nullable(_proc_compo_attr_spec) = false
nullable(_private_stmt) = false
nullable(_print_stmt) = false
nullable(_prefix) = false
nullable(_pp_macro_stmt) = false
nullable(_pointer_stmt) = false
nullable(_pointer_assignment_stmt) = false
nullable(_pause_stmt) = false
nullable(_parameter_stmt) = false
nullable(_optional_stmt) = false
nullable(_open_stmt) = false
nullable(_onlys) = false
nullable(_omp) = false
nullable(_ocl_scope) = false
nullable(_ocl) = false
nullable(_nullify_stmt) = false
nullable(_namelist_stmt) = false
nullable(_module_stmt) = false
nullable(_module_) = false
nullable(_masked_or_unmasked_elsewhere_stmt) = false
nullable(_map_stmt) = false
nullable(_main_program) = true
nullable(_lock_stmt) = false
nullable(_linda_anonymous_formal) = false
nullable(_intrinsic_stmt) = false
nullable(_interface_stmt) = false
nullable(_intent_stmt) = false
nullable(_inquire_stmt) = false
nullable(_import_stmt) = false
nullable(_implicit_stmt) = false
nullable(_if_then_stmt) = false
nullable(_if_stmt) = false
nullable(_goto_stmt) = false
nullable(_function_subprogram) = false
nullable(_function_stmt) = false
nullable(_format_stmt) = false
nullable(_forall_stmt) = false
nullable(_forall_construct_stmt) = false
nullable(_forall_assignment_stmt) = false
nullable(_flush_stmt) = false
nullable(_find_stmt) = false
nullable(_final_procedure_stmt) = false
nullable(_exit_stmt) = false
nullable(_error_stop_stmt) = false
nullable(_equivalence_stmt) = false
nullable(_enumerator_def_stmt) = false
nullable(_enum_def_stmt) = false
nullable(_entry_stmt) = false
nullable(_endfile_stmt) = false
nullable(_end_where_stmt) = false
nullable(_end_union_stmt) = false
nullable(_end_type_stmt) = false
nullable(_end_subroutine_stmt) = false
nullable(_end_submodule_stmt) = false
nullable(_end_structure_stmt) = false
nullable(_end_stmt_p) = false
nullable(_end_stmt) = false
nullable(_end_select_type_stmt) = false
nullable(_end_select_stmt) = false
nullable(_end_program_stmt) = false
nullable(_end_module_stmt) = false
nullable(_end_map_stmt) = false
nullable(_end_interface_stmt) = false
nullable(_end_if_stmt) = false
nullable(_end_function_stmt) = false
nullable(_end_forall_stmt) = false
nullable(_end_enum_stmt) = false
nullable(_end_do_stmt) = false
nullable(_end_critical_stmt) = false
nullable(_end_block_stmt) = false
nullable(_end_block_data_stmt) = false
nullable(_end_associate_stmt) = false
nullable(_encode_decode_stmt) = false
nullable(_else_stmt) = false
nullable(_else_if_stmt) = false
nullable(_do_stmt) = false
nullable(_dimension_stmt) = false
nullable(_derived_type_stmt) = false
nullable(_delete_stmt) = false
nullable(_define_file_stmt) = false
nullable(_dec) = false
nullable(_deallocate_stmt) = false
nullable(_data_stmt) = false
nullable(_cycle_stmt) = false
nullable(_critical_stmt) = false
nullable(_continue_stmt) = false
nullable(_contains_stmt) = false
nullable(_computed_goto_stmt) = false
nullable(_component_def_stmt) = false
nullable(_common_stmt) = false
nullable(_codimension_stmt) = false
nullable(_close_stmt) = false
nullable(_case_stmt) = false
nullable(_call_stmt) = false
nullable(_block_stmt) = false
nullable(_block_data_stmt) = false
nullable(_binding_private_stmt) = false
nullable(_binding_attr) = false
nullable(_bind_stmt) = false
nullable(_backspace_stmt) = false
nullable(_asynchronous_stmt) = false
nullable(_associate_stmt) = false
nullable(_assignment_stmt) = false
nullable(_assigned_goto_stmt) = false
nullable(_assign_stmt) = false
nullable(_arithmetic_if_stmt) = false
nullable(_allocate_stmt) = false
nullable(_allocatable_stmt) = false
nullable(_action_stmt_no_assign) = false
nullable(_action_stmt) = false
nullable(_access_stmt_public) = false
nullable(_access_stmt_private) = false
nullable(_accept_stmt) = false
nullable(_acc) = false
first(xlf_source) = XLF_FREE XLF_FIXED
first(xlf_option) = PP_MACRO_NAME IDENTIFIER
first(xlf_factor) = LPAREN
first(xlf_directive) = XLF_UNROLL_AND_FUSE XLF_UNROLL XLF_SUBSCRIPTORDER XLF_STREAM_UNROLL XLF_SOURCEFORM XLF_SNAPSHOT XLF_PROCESS XLF_PERMUTATION XLF_NOVECTOR XLF_NOSIMD XLF_NOFUNCTRACE XLF_NEW XLF_MEM_DELAY XLF_LOOPID XLF_INDEPENDENT XLF_IGNORE_TKR XLF_FUNCTRACE_XLF_EXIT XLF_FUNCTRACE_XLF_ENTER XLF_FUNCTRACE_XLF_CATCH XLF_EXPECTED_VALUE XLF_EXECUTION_FREQUENCY XLF_EJECT XLF_COLLAPSE XLF_CNCALL XLF_BLOCK_LOOP XLF_ASSERT XLF_ALIGN
first(xlf_cycle) = PP_MACRO_NAME INT_LITERAL IDENTIFIER
first(xlf_assertion) = XLF_NODEPS XLF_MINITERCNT XLF_MAXITERCNT XLF_ITERCNT
first(xlf) = XLF_UNROLL_AND_FUSE XLF_UNROLL XLF_SUBSCRIPTORDER XLF_STREAM_UNROLL XLF_SOURCEFORM XLF_SNAPSHOT XLF_PROCESS XLF_PERMUTATION XLF_NOVECTOR XLF_NOSIMD XLF_NOFUNCTRACE XLF_NEW XLF_MEM_DELAY XLF_LOOPID XLF_INDEPENDENT XLF_IGNORE_TKR XLF_FUNCTRACE_XLF_EXIT XLF_FUNCTRACE_XLF_ENTER XLF_FUNCTRACE_XLF_CATCH XLF_EXPECTED_VALUE XLF_EXECUTION_FREQUENCY XLF_EJECT XLF_COLLAPSE XLF_CNCALL XLF_BLOCK_LOOP XLF_ASSERT XLF_ALIGN
first(write_stmt_head2) = WRITE PP_MACRO_WRITE
first(write_stmt_head) = WRITE PP_MACRO_WRITE
first(where_stmt) = WHERE
first(where_construct_stmt) = WHERE CONSTRUCT_NAME
first(where_construct_head) = WHERE_CONSTRUCT_STMT WHERE CONSTRUCT_NAME
first(where_construct) = WHERE_CONSTRUCT_STMT WHERE CONSTRUCT_NAME
first(where_body_construct) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER CONSTRUCT_NAME
first(wait_stmt_head) = WAIT
first(wait_spec) = VARIABLE UPLUS UNIT UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL IDENTIFIER ID HOLLERITH EXPR ERR EOR END D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(use_stmt) = USE
first(unlock_stmt_head) = UNLOCK
first(union_stmt) = UNION
first(union_decl) = UNION
first(type_spec_node) = TYPE_SPEC
first(type_spec_no_character) = PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX BYTE
first(type_spec) = PP_MACRO_TYPE_SPEC PP_MACRO_NAME PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC IDENTIFIER DOUBLE_PRECISION DOUBLE_COMPLEX CHARACTER BYTE
first(type_param_value) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(type_kw) = TYPE
first(type_is) = TYPE_IS
first(type_guard_stmt) = TYPE_IS CLASS_IS CLASS_DEFAULT
first(type_guard_block) = TYPE_IS CLASS_IS CLASS_DEFAULT
first(type_declaration_stmt_head) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(type_declaration_stmt) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(type_bound_procedure_stmt) = PROCEDURE
first(type_bound_procedure_part) = CONTAINS
first(type_bound_proc_decl) = PP_MACRO_NAME IDENTIFIER
first(type_bound_proc_binding) = PROCEDURE GENERIC FINAL
first(type_bound_generic_stmt) = GENERIC
first(tuple_head) = LPAREN
first(tuple) = LPAREN
first(tb_contains_stmt) = CONTAINS
first(target_stmt) = TARGET
first(sync_stmt_part) = LPAREN
first(sync_stat_OR_image_set) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(suffix) = RESULT BIND
first(substring_range_OR_section_subscript_OR_actual_arg_spec) = VARIABLE UPLUS UMINUS STAR SLASH REAL_LITERAL QUESTION PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON_COLON COLON CHAR_LITERAL BOZ_LITERAL
first(substring_range) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(subscriptorder_array) = PP_MACRO_NAME IDENTIFIER
first(subroutine_subprogram0) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(subroutine_subprogram) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(subroutine_stmt_head) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(subroutine_stmt) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(subroutine_head0) = SUBROUTINE_HEAD
first(subroutine_head) = SUBROUTINE_HEAD
first(subprograms) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
first(subprogram_part) = CONTAINS
first(subprogram) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
first(submodule_stmt) = SUBMODULE
first(submodule_head0) = SUBMODULE
first(submodule_head) = SUBMODULE
first(submodule) = SUBMODULE
first(structure_stmt_head) = STRUCTURE
first(structure_stmt) = STRUCTURE
first(structure_decl) = STRUCTURE
first(stmt_end) = error SEMICOLON EOL DOLLAR
first(stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
first(specification_stmt_no_access_stmt) = VIRTUAL TARGET SIMPLE_ATTR SAVE POINTER OPTIONAL NAMELIST INTRINSIC INTENT EQUIVALENCE DIMENSION COMMON CODIMENSION BIND ASYNCHRONOUS ALLOCATABLE
first(specification_stmt) = VIRTUAL TARGET SIMPLE_ATTR SAVE PUBLIC PRIVATE POINTER OPTIONAL NAMELIST INTRINSIC INTENT EQUIVALENCE DIMENSION COMMON CODIMENSION BIND ASYNCHRONOUS ALLOCATABLE
first(specification_part_construct_OR_execution_part_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(specification_part_construct) = VIRTUAL USE TYPE_SPEC TYPE TARGET STRUCTURE SPEC_PART_CONSTRUCT SIMPLE_ATTR SAVE RECORD PUBLIC PROCEDURE PRIVATE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER POINTER PARAMETER OPTIONAL NAMELIST KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT IMPORT IMPLICIT EQUIVALENCE ENUM DOUBLE_PRECISION DOUBLE_COMPLEX DIMENSION DERIVED_TYPE_STMT COMMON CODIMENSION CLASS CHARACTER BYTE BIND ASYNCHRONOUS ALLOCATABLE ABSTRACT
first(special_token) = RAW PRECISION PP_MARKER NOTHING MARKER LABEL DOUBLE CONTINUED_IDENTIFIER COMPOSITE_IDENTIFIER
first(special_symbol) = EXCLAM AMP
first(spec_part_construct_OR_exec_part_constructs) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(simple_attr_stmt_head) = SIMPLE_ATTR
first(simple_attr_stmt) = SIMPLE_ATTR
first(sign_edit_desc_OR_blank_interp_edit_desc) = PP_MACRO_NAME IDENTIFIER
first(shape_spec) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(sequence_stmt) = SEQUENCE
first(separated_nonempty_list(ioption(END_FRAGMENT),partial_subprogram)) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM STMT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
first(separated_nonempty_list(ioption(COMMA__SLASH),namelist_group)) = SLASH
first(separated_nonempty_list(ioption(COMMA__SLASH),common_spec)) = SLASH_SLASH SLASH PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(ioption(COMMA),only)) = WRITE READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER ASSIGNMENT
first(separated_nonempty_list(ioption(COMMA),omp_clause)) = error OMP_UNTIED OMP_UNIFORM OMP_THREAD_LIMIT OMP_SIMDLEN OMP_SHARED OMP_SCHEDULE OMP_SAFELEN OMP_REDUCTION OMP_PROC_BIND OMP_PRIVATE OMP_ORDERED OMP_NUM_THREADS OMP_NUM_TEAMS OMP_NOWAIT OMP_NOTINBRANCH OMP_MERGEABLE OMP_MAP OMP_LINEAR OMP_LASTPRIVATE OMP_INBRANCH OMP_IF OMP_FIRSTPRIVATE OMP_FINAL OMP_DIST_SCHEDULE OMP_DEVICE OMP_DEPEND OMP_DEFAULT OMP_COPYPRIVATE OMP_COPYIN OMP_COLLAPSE OMP_ALIGNED
first(separated_nonempty_list(ioption(COMMA),format_item)) = VFE_BEGIN SLASH PP_MACRO_NAME PP_MACRO_ID PP_MACRO_CONST_CHAR POSITION_EDIT_DESC LPAREN KP_DESC INT_LITERAL IDENTIFIER HOLLERITH DOLLAR DATA_EDIT_DESC COLON CHAR_LITERAL BACKSLASH
first(separated_nonempty_list(ioption(COMMA),dec_clause)) = DEC_VECTORLENGTHFOR DEC_VECTORLENGTH DEC_VECREMAINDER DEC_UNIFORM DEC_UNALIGNED DEC_TEMPORAL DEC_REDUCTION DEC_PROCESSOR DEC_PRIVATE DEC_NUM_THREADS DEC_NOVECREMAINDER DEC_NONTEMPORAL DEC_NOMASK DEC_NOASSERT DEC_MASK DEC_LINEAR DEC_LEVEL DEC_LASTPRIVATE DEC_FIRSTPRIVATE DEC_FACTOR DEC_ASSERT DEC_ALWAYS DEC_ALIGNED
first(separated_nonempty_list(ioption(COMMA),data_stmt_set)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER DATA_STMT_SET
first(separated_nonempty_list(ioption(COMMA),acc_clause)) = ACC_WORKER ACC_WAIT ACC_VECTOR_LENGTH ACC_VECTOR ACC_USE_DEVICE ACC_TILE ACC_SEQ ACC_SELF ACC_REDUCTION ACC_PRIVATE ACC_PRESENT_OR_CREATE ACC_PRESENT_OR_COPYOUT ACC_PRESENT_OR_COPYIN ACC_PRESENT_OR_COPY ACC_PRESENT ACC_PCREATE ACC_PCOPYOUT ACC_PCOPYIN ACC_PCOPY ACC_NUM_WORKERS ACC_NUM_GANGS ACC_NOHOST ACC_LINK ACC_INDEPENDENT ACC_IF ACC_HOST ACC_GANG ACC_FIRSTPRIVATE ACC_DTYPE ACC_DEVICE_TYPE ACC_DEVICE_RESIDENT ACC_DEVICEPTR ACC_DEVICE ACC_DELETE ACC_DEFAULT ACC_CREATE ACC_COPYOUT ACC_COPYIN ACC_COPY ACC_COLLAPSE ACC_BIND ACC_AUTO ACC_ASYNC
first(separated_nonempty_list(component_sep,part_ref_)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA__SLASH,record_decl)) = SLASH
first(separated_nonempty_list(COMMA,xlf_option)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,xlf_assertion)) = XLF_NODEPS XLF_MINITERCNT XLF_MAXITERCNT XLF_ITERCNT
first(separated_nonempty_list(COMMA,wait_spec)) = VARIABLE UPLUS UNIT UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL IDENTIFIER ID HOLLERITH EXPR ERR EOR END D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,var_or_ref)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,type_bound_proc_decl)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,type_attr_spec)) = PUBLIC PRIVATE EXTENDS BIND ABSTRACT
first(separated_nonempty_list(COMMA,target_object)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,sync_stat_OR_image_set)) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,substring_range_OR_section_subscript_OR_actual_arg_spec)) = VARIABLE UPLUS UMINUS STAR SLASH REAL_LITERAL QUESTION PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON_COLON COLON CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,subscriptorder_array)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,shape_spec)) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,saved_entity)) = SLASH PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,rename)) = PP_MACRO_NAME OPERATOR IDENTIFIER
first(separated_nonempty_list(COMMA,proc_decl)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,proc_compo_attr_spec)) = PUBLIC PRIVATE POINTER PASS NOPASS
first(separated_nonempty_list(COMMA,proc_attr_spec)) = SIMPLE_ATTR SAVE PUBLIC PRIVATE POINTER OPTIONAL INTENT BIND
first(separated_nonempty_list(COMMA,position_spec_OR_sync_stat)) = VARIABLE UPLUS UNIT UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL IDENTIFIER HOLLERITH EXPR ERR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,position_spec)) = VARIABLE UPLUS UNIT UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL IDENTIFIER HOLLERITH EXPR ERR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,pointer_object)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,pointee)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,omp_type_spec)) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_NAME PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC IDENTIFIER DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(separated_nonempty_list(COMMA,omp_list_item)) = SLASH PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,ocl_nn)) = INT_LITERAL IDENTIFIER
first(separated_nonempty_list(COMMA,ocl_directive)) = error VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER OCL_XFILL OCL_UXSIMD OCL_UNSWITCHING OCL_UNROLL OCL_TEMP_PRIVATE OCL_TEMP OCL_SWP OCL_STRIPING OCL_SIMD_LISTV OCL_SIMD OCL_SHORTLOOP OCL_SERIAL OCL_REDUCTION OCL_PREFETCH_WRITE OCL_PREFETCH_STRONG_L2 OCL_PREFETCH_STRONG OCL_PREFETCH_SEQUENTIAL OCL_PREFETCH_READ OCL_PREFETCH_NOSTRONG_L2 OCL_PREFETCH_NOSTRONG OCL_PREFETCH_NOINFER OCL_PREFETCH_ITERATION_L2 OCL_PREFETCH_ITERATION OCL_PREFETCH_INFER OCL_PREFETCH_CACHE_LEVEL OCL_PREFETCH OCL_PREEX OCL_PARALLEL_STRONG OCL_PARALLEL_CYCLIC OCL_PARALLEL OCL_NOXFILL OCL_NOVREC OCL_NOUXSIMD OCL_NOUNROLL OCL_NOSWP OCL_NOSTRIPING OCL_NOSIMD OCL_NOSHORTLOOP OCL_NOREDUCTION OCL_NORECURRENCE OCL_NOPREFETCH OCL_NOPREEX OCL_NOMFUNC OCL_NOFP_RELAXED OCL_NOFP_CONTRACT OCL_NOFLTLD OCL_NOEVAL OCL_NOARRAY_PRIVATE OCL_NOARRAYPAD OCL_NOALIAS OCL_MFUNC OCL_LOOP_PART_SIMD OCL_LOOP_PART_PARALLEL OCL_LOOP_NOPART_SIMD OCL_LOOP_NOPART_PARALLEL OCL_LOOP_NOINTERCHANGE OCL_LOOP_NOFUSION OCL_LOOP_NOFISSION OCL_LOOP_NOBLOCKING OCL_LOOP_INTERCHANGE OCL_LOOP_BLOCKING OCL_LAST_PRIVATE OCL_INDEPENDENT OCL_FP_RELAXED OCL_FP_CONTRACT OCL_FLTLD OCL_FISSION_POINT OCL_FIRST_PRIVATE OCL_EVAL OCL_END_CACHE_SUBSECTOR OCL_END_CACHE_SECTOR_SIZE OCL_END_ARRAY_FUSION OCL_CACHE_SUBSECTOR_ASSIGN OCL_CACHE_SECTOR_SIZE OCL_ARRAY_SUBSCRIPT OCL_ARRAY_PRIVATE OCL_ARRAY_MERGE OCL_ARRAY_FUSION LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,object_)) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,named_constant_def)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,name)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,lock_variable_OR_lock_stat)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,letter_spec)) = LETTER
first(separated_nonempty_list(COMMA,label)) = INT_LITERAL
first(separated_nonempty_list(COMMA,ioption(substring_range_OR_section_subscript_OR_actual_arg_spec))) = VARIABLE UPLUS UMINUS STAR SLASH REAL_LITERAL QUESTION PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COMMA COLON_COLON COLON CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,ioption(expr))) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COMMA CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,io_item)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,io_control_spec)) = VARIABLE UPLUS UNIT UMINUS STAR SIZE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS NML MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG IOCTL_SPEC INT_LITERAL INQUIRE_IOCTL_SPEC IDENTIFIER HOLLERITH FMT EXPR ERR EOR END D_NOT DOT DEFINED_OP CONNECT_INQUIRE_IOCTL_SPEC CHAR_LITERAL BOZ_LITERAL ASYNCHRONOUS
first(separated_nonempty_list(COMMA,int_literal)) = INT_LITERAL
first(separated_nonempty_list(COMMA,inquire_spec)) = WRITE VARIABLE UPLUS UNIT UMINUS REAL_LITERAL READ PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS NAME_ MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL INQUIRE_SPEC INQUIRE_IOCTL_SPEC IDENTIFIER HOLLERITH FILE EXPR ERR D_NOT DOT DEFINED_OP CONNECT_INQUIRE_SPEC CONNECT_INQUIRE_IOCTL_SPEC CHAR_LITERAL BOZ_LITERAL ASYNCHRONOUS
first(separated_nonempty_list(COMMA,independent_clause)) = XLF_REDUCTION XLF_NEW
first(separated_nonempty_list(COMMA,implicit_spec)) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(separated_nonempty_list(COMMA,generic_spec)) = WRITE READ PP_MACRO_NAME OPERATOR IDENTIFIER ASSIGNMENT
first(separated_nonempty_list(COMMA,forall_triplet_spec_OR_expr)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,flush_spec)) = VARIABLE UPLUS UNIT UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL IDENTIFIER HOLLERITH EXPR ERR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,expr)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,explicit_shape_spec)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,explicit_coshape_spec)) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,equivalence_set)) = LPAREN
first(separated_nonempty_list(COMMA,equivalence_object)) = VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,enumerator)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,encode_decode_spec)) = IOSTAT ERR
first(separated_nonempty_list(COMMA,dummy_arg)) = STAR PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,dimension_array)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,define_file_spec)) = INT_LITERAL
first(separated_nonempty_list(COMMA,deferred_shape_spec)) = COLON
first(separated_nonempty_list(COMMA,deferred_coshape_spec)) = COLON
first(separated_nonempty_list(COMMA,dec_var_expr)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,dec_list_item)) = SLASH PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,dec_level)) = INT_LITERAL
first(separated_nonempty_list(COMMA,dec_int)) = INT_LITERAL
first(separated_nonempty_list(COMMA,dec_hint)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,dec_clause)) = DEC_VECTORLENGTHFOR DEC_VECTORLENGTH DEC_VECREMAINDER DEC_UNIFORM DEC_UNALIGNED DEC_TEMPORAL DEC_REDUCTION DEC_PROCESSOR DEC_PRIVATE DEC_NUM_THREADS DEC_NOVECREMAINDER DEC_NONTEMPORAL DEC_NOMASK DEC_NOASSERT DEC_MASK DEC_LINEAR DEC_LEVEL DEC_LASTPRIVATE DEC_FIRSTPRIVATE DEC_FACTOR DEC_ASSERT DEC_ALWAYS DEC_ALIGNED
first(separated_nonempty_list(COMMA,dec_class_rule)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,dec_att)) = PP_MACRO_NAME IDENTIFIER DEC_VECTOR DEC_NOINLINE DEC_INLINE DEC_CODE_ALIGN DEC_ALIGN DEC_ALIAS
first(separated_nonempty_list(COMMA,dec_a)) = DEC_WRT DEC_NOWRT DEC_ALIGN
first(separated_nonempty_list(COMMA,deallocate_stmt_part)) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,data_stmt_value)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PLUS NULL MINUS LPAREN LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,data_stmt_object)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER
first(separated_nonempty_list(COMMA,data_i_do_object_OR_variable)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER
first(separated_nonempty_list(COMMA,cray_pointer_spec)) = LPAREN
first(separated_nonempty_list(COMMA,connect_spec)) = VARIABLE UPLUS UNIT UMINUS STATUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS NAME_ MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL INTEL_CLOSE_CONNECT_SPEC IDENTIFIER HOLLERITH FILE EXPR ERR D_NOT DOT DEFINED_OP CONNECT_SPEC CONNECT_INQUIRE_SPEC CONNECT_INQUIRE_IOCTL_SPEC CHAR_LITERAL BOZ_LITERAL ASYNCHRONOUS
first(separated_nonempty_list(COMMA,component_decl_OR_entity_decl)) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,common_block_object)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,collapse_array)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,codimension_decl)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,close_spec)) = VARIABLE UPLUS UNIT UMINUS STATUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL INTEL_CLOSE_CONNECT_SPEC IDENTIFIER HOLLERITH EXPR ERR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,case_value_range)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(separated_nonempty_list(COMMA,binding_attr)) = PUBLIC PRIVATE PASS NOPASS NON_OVERRIDABLE DEFERRED
first(separated_nonempty_list(COMMA,bind_entity)) = SLASH PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,attr_spec)) = TARGET SIMPLE_ATTR SAVE PUBLIC PRIVATE POINTER PARAMETER OPTIONAL INTRINSIC INTENT DIMENSION CODIMENSION BIND ASYNCHRONOUS ALLOCATABLE
first(separated_nonempty_list(COMMA,association)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,allocate_stmt_part)) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER ALLOC_OPT_EXPR
first(separated_nonempty_list(COMMA,allocatable_array)) = PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,acc_list_item)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(separated_nonempty_list(COMMA,ac_value)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(selector_part) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(select_type_stmt) = SELECT_TYPE CONSTRUCT_NAME
first(select_type_construct) = SELECT_TYPE CONSTRUCT_NAME
first(select_case_stmt) = SELECT_CASE CONSTRUCT_NAME
first(save_stmt_head) = SAVE
first(save_stmt) = SAVE
first(rewrite_stmt_head2) = REWRITE
first(rewrite_stmt_head) = REWRITE
first(rewind_stmt_head) = REWIND
first(result) = RESULT
first(rename_OR_only) = COMMA
first(rename) = PP_MACRO_NAME OPERATOR IDENTIFIER
first(record_stmt_head) = RECORD
first(record_stmt) = RECORD
first(record_decl) = SLASH
first(real_literal) = REAL_LITERAL INT_LITERAL DOT
first(read_stmt_head2) = READ
first(read_stmt_head) = READ
first(read_OR_write_stmt_head2) = PP_MACRO_READ_WRITE PP_MACRO_ID_RW
first(read_OR_write_stmt_head) = PP_MACRO_ID_RW
first(read_OR_print_stmt_head) = PP_MACRO_READ_PRINT
first(program_unit) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(program_stmt_head) = PROGRAM
first(program_stmt) = PROGRAM
first(program) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOL ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(procedure_stmt) = PROCEDURE MODULE
first(procedure_kw) = PROCEDURE
first(procedure_declaration_stmt) = PROCEDURE
first(proc_interface) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_NAME PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC IDENTIFIER DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(proc_decl) = PP_MACRO_NAME IDENTIFIER
first(proc_compo_attr_spec) = PUBLIC PRIVATE POINTER PASS NOPASS
first(proc_attr_spec) = SIMPLE_ATTR SAVE PUBLIC PRIVATE POINTER OPTIONAL INTENT BIND
first(proc_attr_part) = COMMA COLON_COLON
first(private_stmt) = PRIVATE
first(private_sequence_stmt) = SEQUENCE PRIVATE
first(primary) = VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT CHAR_LITERAL BOZ_LITERAL
first(prefix_spec_no_type_spec) = PREFIX_SPEC MODULE
first(pp_token) = PP_WARNING PP_UNKNOWN PP_UNDEF PP_MACRO_APPL PP_INCLUDE PP_ERROR PP_DEFINE PP_CONCAT
first(pp_macro_id) = PP_MACRO_ID PP_IDENTIFIER
first(pp_macro_const) = PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST
first(pp_ident) = PP_UNDERSCORE PP_MACRO_NAME PP_IDENTIFIER IDENTIFIER
first(pp_directive) = PP_UNKNOWN__REST PP_UNDEF__IDENT PP_ISSUE__MESG PP_INCLUDE__FILE PP_DEFINE__IDENT__BODY
first(pp_cond) = PP_OR PP_AND
first(pp_branch) = PP_IFNDEF PP_IFDEF PP_IF PP_ENDIF PP_ELSE PP_ELIF PP_BRANCH
first(position_spec) = VARIABLE UPLUS UNIT UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL IDENTIFIER HOLLERITH EXPR ERR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(pointer_stmt) = POINTER
first(pointer_assignment_stmt) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(pointee) = PP_MACRO_NAME IDENTIFIER
first(partial_variable) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(partial_type_spec) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(partial_type_declaration_stmt) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(partial_type_bound_proc_part) = PROCEDURE PRIVATE GENERIC FINAL EOP
first(partial_subroutine_stmt_head) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(partial_subroutine_head) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_subprograms) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM STMT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION EOP DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
first(partial_subprogram) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM STMT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
first(partial_stmts) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
first(partial_specification_part) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_spec__exec) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_pu_tail) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_program_unit) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_program) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOL ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_onlys) = WRITE READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER COMMA ASSIGNMENT
first(partial_interface_spec) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PROCEDURE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC INTERFACE_SPEC FUNCTION_STMT_HEAD FUNCTION EOP DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(partial_function_stmt_head) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(partial_function_stmt) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(partial_function_head) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(partial_execution_part) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(partial_derived_type_def_part) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC EOP DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(partial_data_stmt_sets) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER DATA_STMT_SET
first(partial_case_block) = CASE
first(partial_assignment_stmt) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(partial_action_stmt) = WRITE WHERE WAIT VARIABLE UNLOCK TYPE SYNC STOP REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INQUIRE IF IDENTIFIER GO_TO FORALL FLUSH FIND EXIT ERROR END_FILE ENCODE DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CLOSE CALL BACKSPACE ASSIGN ALLOCATE ACTION_STMT ACCEPT
first(part_ref_) = PP_MACRO_NAME IDENTIFIER
first(part_name) = PP_MACRO_NAME IDENTIFIER
first(parameter_stmt) = PARAMETER
first(parameter_format_entry_stmt) = PARAMETER FORMAT ENTRY
first(or_operand) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(optional_stmt_head) = OPTIONAL
first(optional_stmt) = OPTIONAL
first(operator_defined_op) = OPERATOR
first(open_stmt_head) = OPEN
first(opclist(substring_range_OR_section_subscript_OR_actual_arg_spec)) = VARIABLE UPLUS UMINUS STAR SLASH REAL_LITERAL QUESTION PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COMMA COLON_COLON COLON CHAR_LITERAL BOZ_LITERAL
first(opclist(expr)) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COMMA CHAR_LITERAL BOZ_LITERAL
first(onlys) = WRITE READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER ASSIGNMENT
first(only_head) = ONLY
first(only) = WRITE READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER ASSIGNMENT
first(omp_token) = OMP_END
first(omp_reduction_op) = STAR SLASH PP_MACRO_NAME PLUS MINUS IDENTIFIER D_OR D_NEQV D_EQV D_AND DEFINED_OP
first(omp_policy) = OMP_SPREAD OMP_MASTER OMP_CLOSE
first(omp_nowait) = OMP_NOWAIT
first(omp_map_type) = OMP_TOFROM OMP_TO OMP_FROM OMP_ALLOC
first(omp_list) = SLASH PP_MACRO_NAME IDENTIFIER
first(omp_kind) = OMP_STATIC OMP_RUNTIME OMP_GUIDED OMP_DYNAMIC OMP_AUTO
first(omp_initializer_clause) = OMP_INITIALIZER
first(omp_if_clause) = OMP_IF
first(omp_directive) = OMP_WORKSHARE OMP_THREADPRIVATE OMP_TEAMS_DISTRIBUTE_SIMD OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_TEAMS_DISTRIBUTE OMP_TEAMS OMP_TASKYIELD OMP_TASKWAIT OMP_TASKGROUP OMP_TASK OMP_TARGET_UPDATE OMP_TARGET_TEAMS_DISTRIBUTE_SIMD OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_TARGET_TEAMS_DISTRIBUTE OMP_TARGET_TEAMS OMP_TARGET_DATA OMP_TARGET OMP_SINGLE OMP_SIMD OMP_SECTIONS OMP_SECTION OMP_PARALLEL_WORKSHARE OMP_PARALLEL_SECTIONS OMP_PARALLEL_DO_SIMD OMP_PARALLEL_DO OMP_PARALLEL OMP_ORDERED OMP_MASTER OMP_FLUSH OMP_END_WORKSHARE OMP_END_TEAMS_DISTRIBUTE_SIMD OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_END_TEAMS_DISTRIBUTE OMP_END_TEAMS OMP_END_TASKGROUP OMP_END_TASK OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_END_TARGET_TEAMS_DISTRIBUTE OMP_END_TARGET_TEAMS OMP_END_TARGET_DATA OMP_END_TARGET OMP_END_SINGLE OMP_END_SIMD OMP_END_SECTIONS OMP_END_PARALLEL_WORKSHARE OMP_END_PARALLEL_SECTIONS OMP_END_PARALLEL_DO_SIMD OMP_END_PARALLEL_DO OMP_END_PARALLEL OMP_END_ORDERED OMP_END_MASTER OMP_END_DO_SIMD OMP_END_DO OMP_END_DISTRIBUTE_SIMD OMP_END_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_DISTRIBUTE_PARALLEL_DO OMP_END_DISTRIBUTE OMP_END_CRITICAL OMP_END_ATOMIC OMP_DO_SIMD OMP_DO OMP_DISTRIBUTE_SIMD OMP_DISTRIBUTE_PARALLEL_DO_SIMD OMP_DISTRIBUTE_PARALLEL_DO OMP_DISTRIBUTE OMP_DECLARE_TARGET OMP_DECLARE_SIMD OMP_DECLARE_REDUCTION OMP_CRITICAL OMP_CANCELLATION_POINT OMP_CANCEL OMP_BARRIER OMP_ATOMIC
first(omp_dependence_type) = OMP_OUT OMP_INOUT OMP_IN
first(omp_construct_type) = OMP_TASKGROUP OMP_SECTIONS OMP_PARALLEL OMP_DO
first(omp_combiner) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(omp_clause) = error OMP_UNTIED OMP_UNIFORM OMP_THREAD_LIMIT OMP_SIMDLEN OMP_SHARED OMP_SCHEDULE OMP_SAFELEN OMP_REDUCTION OMP_PROC_BIND OMP_PRIVATE OMP_ORDERED OMP_NUM_THREADS OMP_NUM_TEAMS OMP_NOWAIT OMP_NOTINBRANCH OMP_MERGEABLE OMP_MAP OMP_LINEAR OMP_LASTPRIVATE OMP_INBRANCH OMP_IF OMP_FIRSTPRIVATE OMP_FINAL OMP_DIST_SCHEDULE OMP_DEVICE OMP_DEPEND OMP_DEFAULT OMP_COPYPRIVATE OMP_COPYIN OMP_COLLAPSE OMP_ALIGNED
first(omp_attr) = OMP_SHARED OMP_PRIVATE OMP_NONE OMP_FIRSTPRIVATE
first(omp_atomic) = OMP_WRITE OMP_UPDATE OMP_READ OMP_CAPTURE
first(omp) = error OMP_WORKSHARE OMP_THREADPRIVATE OMP_TEAMS_DISTRIBUTE_SIMD OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_TEAMS_DISTRIBUTE OMP_TEAMS OMP_TASKYIELD OMP_TASKWAIT OMP_TASKGROUP OMP_TASK OMP_TARGET_UPDATE OMP_TARGET_TEAMS_DISTRIBUTE_SIMD OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_TARGET_TEAMS_DISTRIBUTE OMP_TARGET_TEAMS OMP_TARGET_DATA OMP_TARGET OMP_SINGLE OMP_SIMD OMP_SECTIONS OMP_SECTION OMP_PARALLEL_WORKSHARE OMP_PARALLEL_SECTIONS OMP_PARALLEL_DO_SIMD OMP_PARALLEL_DO OMP_PARALLEL OMP_ORDERED OMP_MASTER OMP_FLUSH OMP_END_WORKSHARE OMP_END_TEAMS_DISTRIBUTE_SIMD OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_END_TEAMS_DISTRIBUTE OMP_END_TEAMS OMP_END_TASKGROUP OMP_END_TASK OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_END_TARGET_TEAMS_DISTRIBUTE OMP_END_TARGET_TEAMS OMP_END_TARGET_DATA OMP_END_TARGET OMP_END_SINGLE OMP_END_SIMD OMP_END_SECTIONS OMP_END_PARALLEL_WORKSHARE OMP_END_PARALLEL_SECTIONS OMP_END_PARALLEL_DO_SIMD OMP_END_PARALLEL_DO OMP_END_PARALLEL OMP_END_ORDERED OMP_END_MASTER OMP_END_DO_SIMD OMP_END_DO OMP_END_DISTRIBUTE_SIMD OMP_END_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_DISTRIBUTE_PARALLEL_DO OMP_END_DISTRIBUTE OMP_END_CRITICAL OMP_END_ATOMIC OMP_DO_SIMD OMP_DO OMP_DISTRIBUTE_SIMD OMP_DISTRIBUTE_PARALLEL_DO_SIMD OMP_DISTRIBUTE_PARALLEL_DO OMP_DISTRIBUTE OMP_DECLARE_TARGET OMP_DECLARE_SIMD OMP_DECLARE_REDUCTION OMP_CRITICAL OMP_CANCELLATION_POINT OMP_CANCEL OMP_BARRIER OMP_ATOMIC
first(ocl_tuple) = LPAREN
first(ocl_scope) = LPAREN
first(ocl_nn__colon) = INT_LITERAL IDENTIFIER
first(ocl_nn) = INT_LITERAL IDENTIFIER
first(ocl_directive) = error VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER OCL_XFILL OCL_UXSIMD OCL_UNSWITCHING OCL_UNROLL OCL_TEMP_PRIVATE OCL_TEMP OCL_SWP OCL_STRIPING OCL_SIMD_LISTV OCL_SIMD OCL_SHORTLOOP OCL_SERIAL OCL_REDUCTION OCL_PREFETCH_WRITE OCL_PREFETCH_STRONG_L2 OCL_PREFETCH_STRONG OCL_PREFETCH_SEQUENTIAL OCL_PREFETCH_READ OCL_PREFETCH_NOSTRONG_L2 OCL_PREFETCH_NOSTRONG OCL_PREFETCH_NOINFER OCL_PREFETCH_ITERATION_L2 OCL_PREFETCH_ITERATION OCL_PREFETCH_INFER OCL_PREFETCH_CACHE_LEVEL OCL_PREFETCH OCL_PREEX OCL_PARALLEL_STRONG OCL_PARALLEL_CYCLIC OCL_PARALLEL OCL_NOXFILL OCL_NOVREC OCL_NOUXSIMD OCL_NOUNROLL OCL_NOSWP OCL_NOSTRIPING OCL_NOSIMD OCL_NOSHORTLOOP OCL_NOREDUCTION OCL_NORECURRENCE OCL_NOPREFETCH OCL_NOPREEX OCL_NOMFUNC OCL_NOFP_RELAXED OCL_NOFP_CONTRACT OCL_NOFLTLD OCL_NOEVAL OCL_NOARRAY_PRIVATE OCL_NOARRAYPAD OCL_NOALIAS OCL_MFUNC OCL_LOOP_PART_SIMD OCL_LOOP_PART_PARALLEL OCL_LOOP_NOPART_SIMD OCL_LOOP_NOPART_PARALLEL OCL_LOOP_NOINTERCHANGE OCL_LOOP_NOFUSION OCL_LOOP_NOFISSION OCL_LOOP_NOBLOCKING OCL_LOOP_INTERCHANGE OCL_LOOP_BLOCKING OCL_LAST_PRIVATE OCL_INDEPENDENT OCL_FP_RELAXED OCL_FP_CONTRACT OCL_FLTLD OCL_FISSION_POINT OCL_FIRST_PRIVATE OCL_EVAL OCL_END_CACHE_SUBSECTOR OCL_END_CACHE_SECTOR_SIZE OCL_END_ARRAY_FUSION OCL_CACHE_SUBSECTOR_ASSIGN OCL_CACHE_SECTOR_SIZE OCL_ARRAY_SUBSCRIPT OCL_ARRAY_PRIVATE OCL_ARRAY_MERGE OCL_ARRAY_FUSION LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT CHAR_LITERAL BOZ_LITERAL
first(ocl) = error VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER OCL_XFILL OCL_UXSIMD OCL_UNSWITCHING OCL_UNROLL OCL_TEMP_PRIVATE OCL_TEMP OCL_SWP OCL_STRIPING OCL_SIMD_LISTV OCL_SIMD OCL_SHORTLOOP OCL_SERIAL OCL_REDUCTION OCL_PREFETCH_WRITE OCL_PREFETCH_STRONG_L2 OCL_PREFETCH_STRONG OCL_PREFETCH_SEQUENTIAL OCL_PREFETCH_READ OCL_PREFETCH_NOSTRONG_L2 OCL_PREFETCH_NOSTRONG OCL_PREFETCH_NOINFER OCL_PREFETCH_ITERATION_L2 OCL_PREFETCH_ITERATION OCL_PREFETCH_INFER OCL_PREFETCH_CACHE_LEVEL OCL_PREFETCH OCL_PREEX OCL_PARALLEL_STRONG OCL_PARALLEL_CYCLIC OCL_PARALLEL OCL_NOXFILL OCL_NOVREC OCL_NOUXSIMD OCL_NOUNROLL OCL_NOSWP OCL_NOSTRIPING OCL_NOSIMD OCL_NOSHORTLOOP OCL_NOREDUCTION OCL_NORECURRENCE OCL_NOPREFETCH OCL_NOPREEX OCL_NOMFUNC OCL_NOFP_RELAXED OCL_NOFP_CONTRACT OCL_NOFLTLD OCL_NOEVAL OCL_NOARRAY_PRIVATE OCL_NOARRAYPAD OCL_NOALIAS OCL_MFUNC OCL_LOOP_PART_SIMD OCL_LOOP_PART_PARALLEL OCL_LOOP_NOPART_SIMD OCL_LOOP_NOPART_PARALLEL OCL_LOOP_NOINTERCHANGE OCL_LOOP_NOFUSION OCL_LOOP_NOFISSION OCL_LOOP_NOBLOCKING OCL_LOOP_INTERCHANGE OCL_LOOP_BLOCKING OCL_LAST_PRIVATE OCL_INDEPENDENT OCL_FP_RELAXED OCL_FP_CONTRACT OCL_FLTLD OCL_FISSION_POINT OCL_FIRST_PRIVATE OCL_EVAL OCL_END_CACHE_SUBSECTOR OCL_END_CACHE_SECTOR_SIZE OCL_END_ARRAY_FUSION OCL_CACHE_SUBSECTOR_ASSIGN OCL_CACHE_SECTOR_SIZE OCL_ARRAY_SUBSCRIPT OCL_ARRAY_PRIVATE OCL_ARRAY_MERGE OCL_ARRAY_FUSION LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT CHAR_LITERAL BOZ_LITERAL
first(object_) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(null_ref) = NULL
first(nonempty_list(subroutine_head0)) = SUBROUTINE_HEAD
first(nonempty_list(stmt)) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
first(nonempty_list(program_unit)) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(nonempty_list(prefix_spec_no_type_spec)) = PREFIX_SPEC MODULE
first(nonempty_list(name)) = PP_MACRO_NAME IDENTIFIER
first(nonempty_list(map_decl)) = MAP
first(nonempty_list(function_head0)) = FUNCTION_HEAD
first(nonempty_list(field_decl)) = UNION TYPE_SPEC TYPE STRUCTURE RECORD PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER PARAMETER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(nonempty_list(enumerator_def_stmt)) = ENUMERATOR
first(nonempty_list(dec_option)) = SLASH
first(nonempty_list(data_stmt_set__comma_opt)) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER DATA_STMT_SET
first(nonempty_list(comma__attr_spec)) = COMMA
first(nonempty_list(case_stmt__block)) = CASE
first(nonempty_list(case_block)) = CASE_BLOCK CASE
first(nonempty_list(TYPE_SPEC)) = TYPE_SPEC
first(nonempty_list(SEMICOLON)) = SEMICOLON
first(namelist_stmt_head) = NAMELIST
first(namelist_stmt) = NAMELIST
first(namelist_group) = SLASH
first(named_constant_def) = PP_MACRO_NAME IDENTIFIER
first(name) = PP_MACRO_NAME IDENTIFIER
first(mult_operand) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(module_stmt) = MODULE
first(module_nature_part) = COMMA COLON_COLON
first(module_nature) = NON_INTRINSIC INTRINSIC
first(module_) = MODULE
first(module0_) = MODULE
first(masked_or_unmasked_elsewhere_stmt) = ELSEWHERE
first(map_stmt) = MAP
first(map_decl) = MAP
first(main_program) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(main) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOL EOF ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(lparen__omp_list__rparen) = LPAREN
first(lparen__name__rparen) = LPAREN
first(loop_control) = WHILE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER CONCURRENT COMMA
first(logical_literal) = LOGICAL_LITERAL
first(lock_variable_OR_lock_stat) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(list(where_body_construct)) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER CONSTRUCT_NAME
first(list(type_guard_block)) = TYPE_IS CLASS_IS CLASS_DEFAULT
first(list(type_bound_proc_binding)) = PROCEDURE GENERIC FINAL
first(list(subprogram)) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
first(list(program_unit)) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(list(private_sequence_stmt)) = SEQUENCE PRIVATE
first(list(prefix_spec_no_type_spec)) = PREFIX_SPEC MODULE
first(list(masked_or_unmasked_elsewhere_block)) = ELSEWHERE
first(list(interface_specification)) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PROCEDURE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC INTERFACE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(list(forall_body_construct)) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER FORALL_CONSTRUCT_STMT FORALL CONSTRUCT_NAME
first(list(derived_type_def_content)) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX DERIVED_TYPE_DEF_PART CLASS CHARACTER BYTE
first(list(component_def_stmt)) = TYPE_SPEC TYPE PROCEDURE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(list(comma__attr_spec)) = COMMA
first(linda_typeof) = LINDA_TYPEOF
first(linda_formal) = QUESTION
first(linda_call) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(linda_anonymous_formal_head) = LINDA_TYPEOF
first(linda_anonymous_formal) = LINDA_TYPEOF
first(level_5_expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(level_4_expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(level_3_expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(level_2_expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(level_1_expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(letter_spec) = LETTER
first(length_selector) = STAR LPAREN
first(language_binding_spec_head) = BIND
first(language_binding_spec) = BIND
first(kind_selector) = STAR LPAREN
first(ioctl_spec_kw) = IOCTL_SPEC INQUIRE_IOCTL_SPEC CONNECT_INQUIRE_IOCTL_SPEC
first(io_control_spec) = VARIABLE UPLUS UNIT UMINUS STAR SIZE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS NML MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG IOCTL_SPEC INT_LITERAL INQUIRE_IOCTL_SPEC IDENTIFIER HOLLERITH FMT EXPR ERR EOR END D_NOT DOT DEFINED_OP CONNECT_INQUIRE_IOCTL_SPEC CHAR_LITERAL BOZ_LITERAL ASYNCHRONOUS
first(intrinsic_type_spec) = PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CHARACTER BYTE
first(intrinsic_stmt) = INTRINSIC
first(intrinsic_op) = STAR_STAR STAR SLASH_SLASH SLASH_EQ SLASH PLUS MINUS LT_EQ LT GT_EQ GT EQ_EQ D_OR D_NOT D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND
first(interface_stmt) = INTERFACE ABSTRACT
first(interface_specification) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PROCEDURE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC INTERFACE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(interface_body) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(interface_block) = INTERFACE ABSTRACT
first(interface) = INTERFACE
first(intent_stmt) = INTENT
first(intent_spec) = INTENT_SPEC
first(intent) = INTENT
first(int_literal) = INT_LITERAL
first(inquire_stmt_head) = INQUIRE
first(inquire_spec) = WRITE VARIABLE UPLUS UNIT UMINUS REAL_LITERAL READ PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS NAME_ MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL INQUIRE_SPEC INQUIRE_IOCTL_SPEC IDENTIFIER HOLLERITH FILE EXPR ERR D_NOT DOT DEFINED_OP CONNECT_INQUIRE_SPEC CONNECT_INQUIRE_IOCTL_SPEC CHAR_LITERAL BOZ_LITERAL ASYNCHRONOUS
first(initialization) = SLASH EQ_GT EQ
first(independent_clause) = XLF_REDUCTION XLF_NEW
first(import_stmt) = IMPORT
first(implicit_stmt_head) = IMPLICIT
first(implicit_stmt) = IMPLICIT
first(implicit_spec) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(implicit_part_stmt_proper) = IMPLICIT
first(implicit_part_stmt_OR_declaration_construct) = VIRTUAL TYPE_SPEC TYPE TARGET STRUCTURE SPEC_PART_CONSTRUCT SIMPLE_ATTR SAVE RECORD PUBLIC PROCEDURE PRIVATE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER POINTER PARAMETER OPTIONAL NAMELIST KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT IMPLICIT EQUIVALENCE ENUM DOUBLE_PRECISION DOUBLE_COMPLEX DIMENSION DERIVED_TYPE_STMT COMMON CODIMENSION CLASS CHARACTER BYTE BIND ASYNCHRONOUS ALLOCATABLE ABSTRACT
first(image_selector) = LBRACKET
first(if_then_stmt) = IF CONSTRUCT_NAME
first(if__lparen__expr__rparen) = IF
first(if__lparen__expr) = IF
first(if_) = IF
first(high_or_low) = XLF_VERY_LOW XLF_VERY_HIGH
first(generic_spec) = WRITE READ PP_MACRO_NAME OPERATOR IDENTIFIER ASSIGNMENT
first(function_subprogram0) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(function_subprogram) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(function_stmt_head0) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(function_stmt_head) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(function_stmt) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(function_head0) = FUNCTION_HEAD
first(function_head) = FUNCTION_HEAD
first(fragment) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(format_stmt_head) = FORMAT
first(format_stmt) = FORMAT
first(format_specification) = LPAREN
first(format_item) = VFE_BEGIN SLASH PP_MACRO_NAME PP_MACRO_ID PP_MACRO_CONST_CHAR POSITION_EDIT_DESC LPAREN KP_DESC INT_LITERAL IDENTIFIER HOLLERITH DOLLAR DATA_EDIT_DESC COLON CHAR_LITERAL BACKSLASH
first(format_entry_stmt) = FORMAT ENTRY
first(format) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(forall_triplet_spec_OR_expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(forall_stmt) = FORALL
first(forall_header) = LPAREN
first(forall_construct_stmt) = FORALL CONSTRUCT_NAME
first(forall_construct) = FORALL_CONSTRUCT_STMT FORALL CONSTRUCT_NAME
first(forall_body_construct) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER FORALL_CONSTRUCT_STMT FORALL CONSTRUCT_NAME
first(forall_assignment_stmt) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(flush_stmt_head) = FLUSH
first(flush_spec) = VARIABLE UPLUS UNIT UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL IDENTIFIER HOLLERITH EXPR ERR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(find_stmt_head) = FIND
first(final_procedure_stmt) = FINAL
first(expr) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(explicit_shape_spec) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(explicit_coshape_spec) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(execution_part_construct) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT UNLOCK TYPE SYNC STOP SELECT_TYPE SELECT_CASE_STMT SELECT_CASE REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INQUIRE IF_THEN_STMT IF GO_TO FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DO DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CRITICAL CONTINUE CONSTRUCT_NAME CLOSE CALL BLOCK BACKSPACE ASSOCIATE ASSIGN ALLOCATE ACCEPT
first(executable_construct) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT UNLOCK TYPE SYNC STOP SELECT_TYPE SELECT_CASE_STMT SELECT_CASE REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INQUIRE IF_THEN_STMT IF GO_TO FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DO DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CRITICAL CONTINUE CONSTRUCT_NAME CLOSE CALL BLOCK BACKSPACE ASSOCIATE ASSIGN ALLOCATE ACCEPT
first(equivalence_stmt) = EQUIVALENCE
first(equivalence_set) = LPAREN
first(equivalence_object) = VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(equiv_operand) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(enumerator_def_stmt) = ENUMERATOR
first(enumerator) = PP_MACRO_NAME IDENTIFIER
first(enum_def_stmt) = ENUM
first(enum_def) = ENUM
first(enum_cst) = EQ
first(entry_stmt_sub) = ENTRY
first(entry_stmt) = ENTRY
first(entity_name) = PP_MACRO_NAME IDENTIFIER
first(endfile_stmt_head) = END_FILE
first(end_where_stmt) = END_WHERE_STMT END_WHERE
first(end_union_stmt) = END_UNION
first(end_type_stmt) = END_TYPE_STMT END_TYPE
first(end_subroutine_stmt_head) = END_SUBROUTINE
first(end_submodule_stmt_head) = END_SUBMODULE
first(end_structure_stmt) = END_STRUCTURE
first(end_stmt_p) = END
first(end_stmt) = END
first(end_select_type_stmt) = END_SELECT
first(end_select_stmt) = END_SELECT_STMT END_SELECT
first(end_program_stmt_head) = END_PROGRAM
first(end_module_stmt_head) = END_MODULE
first(end_map_stmt) = END_MAP
first(end_interface_stmt) = END_INTERFACE
first(end_interface) = END_INTERFACE
first(end_if_stmt) = END_IF_STMT END_IF
first(end_function_stmt_head) = END_FUNCTION
first(end_forall_stmt) = END_FORALL_STMT END_FORALL
first(end_enum_stmt) = END_ENUM
first(end_do_stmt) = END_DO_STMT END_DO
first(end_critical_stmt) = END_CRITICAL
first(end_block_stmt) = END_BLOCK
first(end_block_data_stmt_head) = END_BLOCK_DATA
first(end_associate_stmt) = END_ASSOCIATE
first(encode_decode_stmt_head) = ENCODE DECODE
first(else_stmt) = ELSE
first(else_if_stmt_head) = ELSE_IF
first(else_if_stmt) = ELSE_IF
first(else_if) = ELSE_IF
first(dummy_arg) = STAR PP_MACRO_NAME IDENTIFIER
first(dtype_args) = PP_MACRO_NAME IDENTIFIER
first(do_stmt_head) = DO CONSTRUCT_NAME
first(do_stmt) = DO CONSTRUCT_NAME
first(directive) = XLF OMP OCL DEC ACC
first(dimension_stmt_head) = VIRTUAL DIMENSION
first(dimension_stmt) = VIRTUAL DIMENSION
first(dimension_array) = PP_MACRO_NAME IDENTIFIER
first(derived_type_stmt) = TYPE
first(derived_type_def_part) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX DERIVED_TYPE_DEF_PART CONTAINS CLASS CHARACTER BYTE
first(derived_type_def_content) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX DERIVED_TYPE_DEF_PART CLASS CHARACTER BYTE
first(derived_type_def) = TYPE DERIVED_TYPE_STMT
first(delete_stmt_head) = DELETE
first(define_file_spec) = INT_LITERAL
first(declaration_construct_proper) = VIRTUAL TYPE_SPEC TYPE TARGET STRUCTURE SIMPLE_ATTR SAVE RECORD PUBLIC PROCEDURE PRIVATE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER POINTER OPTIONAL NAMELIST KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT EQUIVALENCE ENUM DOUBLE_PRECISION DOUBLE_COMPLEX DIMENSION DERIVED_TYPE_STMT COMMON CODIMENSION CLASS CHARACTER BYTE BIND ASYNCHRONOUS ALLOCATABLE ABSTRACT
first(decl_type_spec_proper) = TYPE CLASS
first(decl_type_spec) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(dec_var_expr) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(dec_prefetch_hint) = VARIABLE STAR PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(dec_p) = PP_MACRO_NAME LPAREN IDENTIFIER
first(dec_option) = SLASH
first(dec_op) = STAR PLUS MINUS D_OR D_NEQV D_EQV D_AND
first(dec_loop_count) = PP_MACRO_NAME LPAREN IDENTIFIER EQ
first(dec_list_p) = LPAREN
first(dec_list_item) = SLASH PP_MACRO_NAME IDENTIFIER
first(dec_list) = SLASH PP_MACRO_NAME IDENTIFIER
first(dec_level) = INT_LITERAL
first(dec_iop) = STAR PLUS MINUS D_OR D_NEQV D_EQV D_AND
first(dec_int_spec) = LPAREN EQ
first(dec_int) = INT_LITERAL
first(dec_hint) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(dec_directive) = DEC_VECTOR DEC_UNROLL_AND_JAM DEC_UNROLL DEC_UNDEFINE DEC_STRICT DEC_SIMD DEC_REAL DEC_PSECT DEC_PREFETCH DEC_PARALLEL DEC_PACK DEC_OPTIONS DEC_OPTIMIZE DEC_OBJCOMMENT DEC_NOVECTOR DEC_NOUNROLL_AND_JAM DEC_NOUNROLL DEC_NOSTRICT DEC_NOPREFETCH DEC_NOPARALLEL DEC_NOOPTIMIZE DEC_NOINLINE DEC_NOFUSION DEC_NOFREEFORM DEC_NOFMA DEC_NODECLARE DEC_NOBLOCK_LOOP DEC_MESSAGE DEC_LOOPCOUNT DEC_LOOP DEC_IVDEP DEC_INTEGER DEC_INLINE DEC_INIT_DEP_FWD DEC_IFDEFINED DEC_IF DEC_IDENT DEC_FREEFORM DEC_FORCEINLINE DEC_FMA DEC_FIXEDFORMLINESIZE DEC_ENDOPTIONS DEC_ENDIF DEC_END DEC_ELSEIF DEC_ELSE DEC_DISTRIBUTEPOINT DEC_DISTRIBUTE DEC_DEFINE DEC_DECLARE DEC_CODE_ALIGN DEC_BLOCK_LOOP DEC_ATTRIBUTES DEC_ASSUME_ALIGNED DEC_ASSUME DEC_ALIAS
first(dec_data_type) = PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX BYTE
first(dec_clause) = DEC_VECTORLENGTHFOR DEC_VECTORLENGTH DEC_VECREMAINDER DEC_UNIFORM DEC_UNALIGNED DEC_TEMPORAL DEC_REDUCTION DEC_PROCESSOR DEC_PRIVATE DEC_NUM_THREADS DEC_NOVECREMAINDER DEC_NONTEMPORAL DEC_NOMASK DEC_NOASSERT DEC_MASK DEC_LINEAR DEC_LEVEL DEC_LASTPRIVATE DEC_FIRSTPRIVATE DEC_FACTOR DEC_ASSERT DEC_ALWAYS DEC_ALIGNED
first(dec_class_rule) = PP_MACRO_NAME IDENTIFIER
first(dec_att) = PP_MACRO_NAME IDENTIFIER DEC_VECTOR DEC_NOINLINE DEC_INLINE DEC_CODE_ALIGN DEC_ALIGN DEC_ALIAS
first(dec_a) = DEC_WRT DEC_NOWRT DEC_ALIGN
first(dec) = DEC_VECTOR DEC_UNROLL_AND_JAM DEC_UNROLL DEC_UNDEFINE DEC_STRICT DEC_SIMD DEC_REAL DEC_PSECT DEC_PREFETCH DEC_PARALLEL DEC_PACK DEC_OPTIONS DEC_OPTIMIZE DEC_OBJCOMMENT DEC_NOVECTOR DEC_NOUNROLL_AND_JAM DEC_NOUNROLL DEC_NOSTRICT DEC_NOPREFETCH DEC_NOPARALLEL DEC_NOOPTIMIZE DEC_NOINLINE DEC_NOFUSION DEC_NOFREEFORM DEC_NOFMA DEC_NODECLARE DEC_NOBLOCK_LOOP DEC_MESSAGE DEC_LOOPCOUNT DEC_LOOP DEC_IVDEP DEC_INTEGER DEC_INLINE DEC_INIT_DEP_FWD DEC_IFDEFINED DEC_IF DEC_IDENT DEC_FREEFORM DEC_FORCEINLINE DEC_FMA DEC_FIXEDFORMLINESIZE DEC_ENDOPTIONS DEC_ENDIF DEC_END DEC_ELSEIF DEC_ELSE DEC_DISTRIBUTEPOINT DEC_DISTRIBUTE DEC_DEFINE DEC_DECLARE DEC_CODE_ALIGN DEC_BLOCK_LOOP DEC_ATTRIBUTES DEC_ASSUME_ALIGNED DEC_ASSUME DEC_ALIAS
first(data_stmt_value) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PLUS NULL MINUS LPAREN LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(data_stmt_set__comma_opt) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER DATA_STMT_SET
first(data_stmt_set) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER DATA_STMT_SET
first(data_stmt_repeat__star) = VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(data_stmt_repeat) = VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(data_stmt_object) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER
first(data_stmt_head) = DATA
first(data_stmt_constant) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PLUS NULL MINUS LPAREN LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(data_stmt) = DATA
first(data_ref_) = PP_MACRO_NAME IDENTIFIER
first(data_implied_do) = LPAREN
first(data_i_do_object_OR_variable) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER
first(critical_stmt) = CRITICAL CONSTRUCT_NAME
first(critical_construct) = CRITICAL CONSTRUCT_NAME
first(cray_pointer_spec) = LPAREN
first(control_edit_desc) = SLASH PP_MACRO_NAME POSITION_EDIT_DESC KP_DESC INT_LITERAL IDENTIFIER COLON
first(contains_stmt) = CONTAINS
first(construct_name__colon) = CONSTRUCT_NAME
first(constant) = REAL_LITERAL PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST LOGICAL_LITERAL INT_LITERAL HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
first(connect_spec_kw) = NAME_ FILE CONNECT_SPEC CONNECT_INQUIRE_SPEC CONNECT_INQUIRE_IOCTL_SPEC ASYNCHRONOUS
first(connect_spec) = VARIABLE UPLUS UNIT UMINUS STATUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS NAME_ MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL INTEL_CLOSE_CONNECT_SPEC IDENTIFIER HOLLERITH FILE EXPR ERR D_NOT DOT DEFINED_OP CONNECT_SPEC CONNECT_INQUIRE_SPEC CONNECT_INQUIRE_IOCTL_SPEC CHAR_LITERAL BOZ_LITERAL ASYNCHRONOUS
first(computed_goto_stmt_head) = GO_TO
first(component_sep) = PERCENT DOT
first(component_def_stmt) = TYPE_SPEC TYPE PROCEDURE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(component_decl_OR_entity_decl) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(component_attr_part) = COMMA COLON_COLON
first(complex_literal) = LPAREN
first(common_stmt_head) = COMMON
first(common_stmt) = COMMON
first(common_spec) = SLASH_SLASH SLASH PP_MACRO_NAME IDENTIFIER
first(common_name_part) = SLASH_SLASH SLASH
first(common_block_object) = PP_MACRO_NAME IDENTIFIER
first(comma__module_nature) = COMMA
first(colon__name) = COLON
first(collapse_array) = PP_MACRO_NAME IDENTIFIER
first(codimension_stmt_head) = CODIMENSION
first(codimension_stmt) = CODIMENSION
first(codimension_decl) = PP_MACRO_NAME IDENTIFIER
first(coarray_spec_part) = LBRACKET
first(coarray_spec) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(close_stmt_head) = CLOSE
first(close_spec1) = STATUS
first(close_spec) = VARIABLE UPLUS UNIT UMINUS STATUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET IOSTAT IOMSG INT_LITERAL INTEL_CLOSE_CONNECT_SPEC IDENTIFIER HOLLERITH EXPR ERR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(class_is) = CLASS_IS
first(character) = CHARACTER
first(char_selector_no_length_selector) = LPAREN
first(char_selector) = STAR LPAREN
first(char_literal) = CHAR_LITERAL
first(char_length_part) = STAR
first(char_length) = PP_MACRO_CONST_INT LPAREN INT_LITERAL
first(case_value_range) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(case_stmt__block) = CASE
first(case_stmt) = CASE
first(case_selector) = LPAREN DEFAULT
first(case_construct) = SELECT_CASE_STMT SELECT_CASE CONSTRUCT_NAME
first(case_block) = CASE_BLOCK CASE
first(boz_literal) = BOZ_LITERAL
first(block_stmt) = CONSTRUCT_NAME BLOCK
first(block_data_stmt) = BLOCK_DATA
first(block_data0) = BLOCK_DATA
first(block_data) = BLOCK_DATA
first(block_construct) = CONSTRUCT_NAME BLOCK
first(block) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(binding_private_stmt) = PRIVATE
first(binding_attr_part) = COMMA COLON_COLON
first(binding_attr) = PUBLIC PRIVATE PASS NOPASS NON_OVERRIDABLE DEFERRED
first(bind_stmt) = BIND
first(backspace_stmt_head) = BACKSPACE
first(attr_spec) = TARGET SIMPLE_ATTR SAVE PUBLIC PRIVATE POINTER PARAMETER OPTIONAL INTRINSIC INTENT DIMENSION CODIMENSION BIND ASYNCHRONOUS ALLOCATABLE
first(asynchronous_stmt_head) = ASYNCHRONOUS
first(asynchronous_stmt) = ASYNCHRONOUS
first(association) = PP_MACRO_NAME IDENTIFIER
first(associate_stmt) = CONSTRUCT_NAME ASSOCIATE
first(associate_construct) = CONSTRUCT_NAME ASSOCIATE
first(assignment_stmt_head) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(assignment_stmt) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(array_spec) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COLON CHAR_LITERAL BOZ_LITERAL
first(array_constructor_head) = LPAREN_SLASH
first(array_constructor) = LPAREN_SLASH LBRACKET
first(apollo_pointer_spec) = SLASH
first(and_operand) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(alt_return_spec) = STAR
first(allocate_) = ALLOCATE
first(allocatable_stmt) = ALLOCATABLE
first(add_operand) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
first(action_stmt_no_assign) = WRITE WHERE WAIT UNLOCK TYPE SYNC STOP REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INQUIRE IF GO_TO FORALL FLUSH FIND EXIT ERROR END_FILE ENCODE DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CLOSE CALL BACKSPACE ASSIGN ALLOCATE ACCEPT
first(action_stmt) = WRITE WHERE WAIT VARIABLE UNLOCK TYPE SYNC STOP REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INQUIRE IF IDENTIFIER GO_TO FORALL FLUSH FIND EXIT ERROR END_FILE ENCODE DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CLOSE CALL BACKSPACE ASSIGN ALLOCATE ACTION_STMT ACCEPT
first(access_stmt_public) = PUBLIC
first(access_stmt_private) = PRIVATE
first(access_stmt) = PUBLIC PRIVATE
first(accept_stmt_head) = ACCEPT
first(acc_op) = STAR PLUS D_OR D_NEQV D_EQV D_AND DEFINED_OP
first(acc_list_item) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(acc_list) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(acc_iop) = STAR PLUS D_OR D_NEQV D_EQV D_AND
first(acc_directive) = ACC_WAIT ACC_UPDATE ACC_ROUTINE ACC_PARALLEL ACC_LOOP ACC_KERNELS ACC_HOST_DATA ACC_EXIT ACC_ENTER ACC_END ACC_DECLARE ACC_DATA ACC_CACHE ACC_ATOMIC
first(acc_clause) = ACC_WORKER ACC_WAIT ACC_VECTOR_LENGTH ACC_VECTOR ACC_USE_DEVICE ACC_TILE ACC_SEQ ACC_SELF ACC_REDUCTION ACC_PRIVATE ACC_PRESENT_OR_CREATE ACC_PRESENT_OR_COPYOUT ACC_PRESENT_OR_COPYIN ACC_PRESENT_OR_COPY ACC_PRESENT ACC_PCREATE ACC_PCOPYOUT ACC_PCOPYIN ACC_PCOPY ACC_NUM_WORKERS ACC_NUM_GANGS ACC_NOHOST ACC_LINK ACC_INDEPENDENT ACC_IF ACC_HOST ACC_GANG ACC_FIRSTPRIVATE ACC_DTYPE ACC_DEVICE_TYPE ACC_DEVICE_RESIDENT ACC_DEVICEPTR ACC_DEVICE ACC_DELETE ACC_DEFAULT ACC_CREATE ACC_COPYOUT ACC_COPYIN ACC_COPY ACC_COLLAPSE ACC_BIND ACC_AUTO ACC_ASYNC
first(acc_atomic) = ACC_WRITE ACC_UPDATE ACC_READ ACC_CAPTURE
first(acc) = error ACC_WAIT ACC_UPDATE ACC_ROUTINE ACC_PARALLEL ACC_LOOP ACC_KERNELS ACC_HOST_DATA ACC_EXIT ACC_ENTER ACC_END ACC_DECLARE ACC_DATA ACC_CACHE ACC_ATOMIC
first(ac_spec) = VARIABLE UPLUS UMINUS TYPE_SPEC TYPE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET KINDED_TYPE_SPEC INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOUBLE_PRECISION DOUBLE_COMPLEX DOT DEFINED_OP CLASS CHAR_LITERAL CHARACTER BYTE BOZ_LITERAL
first(_xlf) = XLF_UNROLL_AND_FUSE XLF_UNROLL XLF_SUBSCRIPTORDER XLF_STREAM_UNROLL XLF_SOURCEFORM XLF_SNAPSHOT XLF_PROCESS XLF_PERMUTATION XLF_NOVECTOR XLF_NOSIMD XLF_NOFUNCTRACE XLF_NEW XLF_MEM_DELAY XLF_LOOPID XLF_INDEPENDENT XLF_IGNORE_TKR XLF_FUNCTRACE_XLF_EXIT XLF_FUNCTRACE_XLF_ENTER XLF_FUNCTRACE_XLF_CATCH XLF_EXPECTED_VALUE XLF_EXECUTION_FREQUENCY XLF_EJECT XLF_COLLAPSE XLF_CNCALL XLF_BLOCK_LOOP XLF_ASSERT XLF_ALIGN
first(_write_stmt) = WRITE PP_MACRO_WRITE
first(_where_stmt) = WHERE
first(_where_construct_stmt) = WHERE CONSTRUCT_NAME
first(_wait_stmt) = WAIT
first(_use_stmt) = USE
first(_unlock_stmt) = UNLOCK
first(_union_stmt) = UNION
first(_type_stmt) = TYPE
first(_type_guard_stmt) = TYPE_IS CLASS_IS CLASS_DEFAULT
first(_type_declaration_stmt) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(_type_bound_procedure_stmt) = PROCEDURE
first(_type_bound_generic_stmt) = GENERIC
first(_tuple) = LPAREN
first(_tb_contains_stmt) = CONTAINS
first(_target_stmt) = TARGET
first(_sync_xxx_stmt) = SYNC
first(_subroutine_subprogram) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(_subroutine_stmt) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(_submodule_stmt) = SUBMODULE
first(_structure_stmt) = STRUCTURE
first(_stop_stmt) = STOP
first(_simple_attr_stmt) = SIMPLE_ATTR
first(_sequence_stmt) = SEQUENCE
first(_select_type_stmt) = SELECT_TYPE CONSTRUCT_NAME
first(_select_case_stmt) = SELECT_CASE CONSTRUCT_NAME
first(_save_stmt) = SAVE
first(_rewrite_stmt) = REWRITE
first(_rewind_stmt) = REWIND
first(_return_stmt) = RETURN
first(_record_stmt) = RECORD
first(_read_stmt) = READ
first(_read_OR_write_stmt) = PP_MACRO_READ_WRITE PP_MACRO_ID_RW
first(_read_OR_print_stmt) = PP_MACRO_READ_PRINT
first(_program_stmt) = PROGRAM
first(_procedure_stmt) = PROCEDURE MODULE
first(_procedure_declaration_stmt) = PROCEDURE
first(_proc_compo_attr_spec) = PUBLIC PRIVATE POINTER PASS NOPASS
first(_private_stmt) = PRIVATE
first(_print_stmt) = PRINT
first(_prefix) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(_pp_macro_stmt) = PP_MACRO_STMT PP_MACRO_ID PP_IDENTIFIER
first(_pointer_stmt) = POINTER
first(_pointer_assignment_stmt) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(_pause_stmt) = PAUSE
first(_parameter_stmt) = PARAMETER
first(_optional_stmt) = OPTIONAL
first(_open_stmt) = OPEN
first(_onlys) = WRITE READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER ASSIGNMENT
first(_omp) = OMP_WORKSHARE OMP_THREADPRIVATE OMP_TEAMS_DISTRIBUTE_SIMD OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_TEAMS_DISTRIBUTE OMP_TEAMS OMP_TASKYIELD OMP_TASKWAIT OMP_TASKGROUP OMP_TASK OMP_TARGET_UPDATE OMP_TARGET_TEAMS_DISTRIBUTE_SIMD OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_TARGET_TEAMS_DISTRIBUTE OMP_TARGET_TEAMS OMP_TARGET_DATA OMP_TARGET OMP_SINGLE OMP_SIMD OMP_SECTIONS OMP_SECTION OMP_PARALLEL_WORKSHARE OMP_PARALLEL_SECTIONS OMP_PARALLEL_DO_SIMD OMP_PARALLEL_DO OMP_PARALLEL OMP_ORDERED OMP_MASTER OMP_FLUSH OMP_END_WORKSHARE OMP_END_TEAMS_DISTRIBUTE_SIMD OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_END_TEAMS_DISTRIBUTE OMP_END_TEAMS OMP_END_TASKGROUP OMP_END_TASK OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO OMP_END_TARGET_TEAMS_DISTRIBUTE OMP_END_TARGET_TEAMS OMP_END_TARGET_DATA OMP_END_TARGET OMP_END_SINGLE OMP_END_SIMD OMP_END_SECTIONS OMP_END_PARALLEL_WORKSHARE OMP_END_PARALLEL_SECTIONS OMP_END_PARALLEL_DO_SIMD OMP_END_PARALLEL_DO OMP_END_PARALLEL OMP_END_ORDERED OMP_END_MASTER OMP_END_DO_SIMD OMP_END_DO OMP_END_DISTRIBUTE_SIMD OMP_END_DISTRIBUTE_PARALLEL_DO_SIMD OMP_END_DISTRIBUTE_PARALLEL_DO OMP_END_DISTRIBUTE OMP_END_CRITICAL OMP_END_ATOMIC OMP_DO_SIMD OMP_DO OMP_DISTRIBUTE_SIMD OMP_DISTRIBUTE_PARALLEL_DO_SIMD OMP_DISTRIBUTE_PARALLEL_DO OMP_DISTRIBUTE OMP_DECLARE_TARGET OMP_DECLARE_SIMD OMP_DECLARE_REDUCTION OMP_CRITICAL OMP_CANCELLATION_POINT OMP_CANCEL OMP_BARRIER OMP_ATOMIC
first(_ocl_scope) = OCL_THEN OCL_ELSE OCL_ALL
first(_ocl) = error VARIABLE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER OCL_XFILL OCL_UXSIMD OCL_UNSWITCHING OCL_UNROLL OCL_TEMP_PRIVATE OCL_TEMP OCL_SWP OCL_STRIPING OCL_SIMD_LISTV OCL_SIMD OCL_SHORTLOOP OCL_SERIAL OCL_REDUCTION OCL_PREFETCH_WRITE OCL_PREFETCH_STRONG_L2 OCL_PREFETCH_STRONG OCL_PREFETCH_SEQUENTIAL OCL_PREFETCH_READ OCL_PREFETCH_NOSTRONG_L2 OCL_PREFETCH_NOSTRONG OCL_PREFETCH_NOINFER OCL_PREFETCH_ITERATION_L2 OCL_PREFETCH_ITERATION OCL_PREFETCH_INFER OCL_PREFETCH_CACHE_LEVEL OCL_PREFETCH OCL_PREEX OCL_PARALLEL_STRONG OCL_PARALLEL_CYCLIC OCL_PARALLEL OCL_NOXFILL OCL_NOVREC OCL_NOUXSIMD OCL_NOUNROLL OCL_NOSWP OCL_NOSTRIPING OCL_NOSIMD OCL_NOSHORTLOOP OCL_NOREDUCTION OCL_NORECURRENCE OCL_NOPREFETCH OCL_NOPREEX OCL_NOMFUNC OCL_NOFP_RELAXED OCL_NOFP_CONTRACT OCL_NOFLTLD OCL_NOEVAL OCL_NOARRAY_PRIVATE OCL_NOARRAYPAD OCL_NOALIAS OCL_MFUNC OCL_LOOP_PART_SIMD OCL_LOOP_PART_PARALLEL OCL_LOOP_NOPART_SIMD OCL_LOOP_NOPART_PARALLEL OCL_LOOP_NOINTERCHANGE OCL_LOOP_NOFUSION OCL_LOOP_NOFISSION OCL_LOOP_NOBLOCKING OCL_LOOP_INTERCHANGE OCL_LOOP_BLOCKING OCL_LAST_PRIVATE OCL_INDEPENDENT OCL_FP_RELAXED OCL_FP_CONTRACT OCL_FLTLD OCL_FISSION_POINT OCL_FIRST_PRIVATE OCL_EVAL OCL_END_CACHE_SUBSECTOR OCL_END_CACHE_SECTOR_SIZE OCL_END_ARRAY_FUSION OCL_CACHE_SUBSECTOR_ASSIGN OCL_CACHE_SECTOR_SIZE OCL_ARRAY_SUBSCRIPT OCL_ARRAY_PRIVATE OCL_ARRAY_MERGE OCL_ARRAY_FUSION LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR DOT CHAR_LITERAL BOZ_LITERAL
first(_nullify_stmt) = NULLIFY
first(_namelist_stmt) = NAMELIST
first(_module_stmt) = MODULE
first(_module_) = MODULE
first(_masked_or_unmasked_elsewhere_stmt) = ELSEWHERE
first(_map_stmt) = MAP
first(_main_program) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROGRAM PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
first(_lock_stmt) = LOCK
first(_linda_anonymous_formal) = LINDA_TYPEOF
first(_intrinsic_stmt) = INTRINSIC
first(_interface_stmt) = INTERFACE ABSTRACT
first(_intent_stmt) = INTENT
first(_inquire_stmt) = INQUIRE
first(_import_stmt) = IMPORT
first(_implicit_stmt) = IMPLICIT
first(_if_then_stmt) = IF CONSTRUCT_NAME
first(_if_stmt) = IF
first(_goto_stmt) = GO_TO
first(_function_subprogram) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(_function_stmt) = TYPE_SPEC TYPE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(_format_stmt) = FORMAT
first(_forall_stmt) = FORALL
first(_forall_construct_stmt) = FORALL CONSTRUCT_NAME
first(_forall_assignment_stmt) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(_flush_stmt) = FLUSH
first(_find_stmt) = FIND
first(_final_procedure_stmt) = FINAL
first(_exit_stmt) = EXIT
first(_error_stop_stmt) = ERROR
first(_equivalence_stmt) = EQUIVALENCE
first(_enumerator_def_stmt) = ENUMERATOR
first(_enum_def_stmt) = ENUM
first(_entry_stmt) = ENTRY
first(_endfile_stmt) = END_FILE
first(_end_where_stmt) = END_WHERE
first(_end_union_stmt) = END_UNION
first(_end_type_stmt) = END_TYPE
first(_end_subroutine_stmt) = END_SUBROUTINE
first(_end_submodule_stmt) = END_SUBMODULE
first(_end_structure_stmt) = END_STRUCTURE
first(_end_stmt_p) = END
first(_end_stmt) = END
first(_end_select_type_stmt) = END_SELECT
first(_end_select_stmt) = END_SELECT
first(_end_program_stmt) = END_PROGRAM
first(_end_module_stmt) = END_MODULE
first(_end_map_stmt) = END_MAP
first(_end_interface_stmt) = END_INTERFACE
first(_end_if_stmt) = END_IF
first(_end_function_stmt) = END_FUNCTION
first(_end_forall_stmt) = END_FORALL
first(_end_enum_stmt) = END_ENUM
first(_end_do_stmt) = END_DO
first(_end_critical_stmt) = END_CRITICAL
first(_end_block_stmt) = END_BLOCK
first(_end_block_data_stmt) = END_BLOCK_DATA
first(_end_associate_stmt) = END_ASSOCIATE
first(_encode_decode_stmt) = ENCODE DECODE
first(_else_stmt) = ELSE
first(_else_if_stmt) = ELSE_IF
first(_do_stmt) = DO CONSTRUCT_NAME
first(_dimension_stmt) = VIRTUAL DIMENSION
first(_derived_type_stmt) = TYPE
first(_delete_stmt) = DELETE
first(_define_file_stmt) = DEFINE_FILE
first(_dec) = DEC_VECTOR DEC_UNROLL_AND_JAM DEC_UNROLL DEC_UNDEFINE DEC_STRICT DEC_SIMD DEC_REAL DEC_PSECT DEC_PREFETCH DEC_PARALLEL DEC_PACK DEC_OPTIONS DEC_OPTIMIZE DEC_OBJCOMMENT DEC_NOVECTOR DEC_NOUNROLL_AND_JAM DEC_NOUNROLL DEC_NOSTRICT DEC_NOPREFETCH DEC_NOPARALLEL DEC_NOOPTIMIZE DEC_NOINLINE DEC_NOFUSION DEC_NOFREEFORM DEC_NOFMA DEC_NODECLARE DEC_NOBLOCK_LOOP DEC_MESSAGE DEC_LOOPCOUNT DEC_LOOP DEC_IVDEP DEC_INTEGER DEC_INLINE DEC_INIT_DEP_FWD DEC_IFDEFINED DEC_IF DEC_IDENT DEC_FREEFORM DEC_FORCEINLINE DEC_FMA DEC_FIXEDFORMLINESIZE DEC_ENDOPTIONS DEC_ENDIF DEC_END DEC_ELSEIF DEC_ELSE DEC_DISTRIBUTEPOINT DEC_DISTRIBUTE DEC_DEFINE DEC_DECLARE DEC_CODE_ALIGN DEC_BLOCK_LOOP DEC_ATTRIBUTES DEC_ASSUME_ALIGNED DEC_ASSUME DEC_ALIAS
first(_deallocate_stmt) = DEALLOCATE
first(_data_stmt) = DATA
first(_cycle_stmt) = CYCLE
first(_critical_stmt) = CRITICAL CONSTRUCT_NAME
first(_continue_stmt) = CONTINUE
first(_contains_stmt) = CONTAINS
first(_computed_goto_stmt) = GO_TO
first(_component_def_stmt) = TYPE_SPEC TYPE PROCEDURE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
first(_common_stmt) = COMMON
first(_codimension_stmt) = CODIMENSION
first(_close_stmt) = CLOSE
first(_case_stmt) = CASE
first(_call_stmt) = CALL
first(_block_stmt) = CONSTRUCT_NAME BLOCK
first(_block_data_stmt) = BLOCK_DATA
first(_binding_private_stmt) = PRIVATE
first(_binding_attr) = PUBLIC PRIVATE PASS NOPASS NON_OVERRIDABLE DEFERRED
first(_bind_stmt) = BIND
first(_backspace_stmt) = BACKSPACE
first(_asynchronous_stmt) = ASYNCHRONOUS
first(_associate_stmt) = CONSTRUCT_NAME ASSOCIATE
first(_assignment_stmt) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
first(_assigned_goto_stmt) = GO_TO
first(_assign_stmt) = ASSIGN
first(_arithmetic_if_stmt) = IF
first(_allocate_stmt) = ALLOCATE
first(_allocatable_stmt) = ALLOCATABLE
first(_action_stmt_no_assign) = WRITE WHERE WAIT UNLOCK TYPE SYNC STOP REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INQUIRE IF GO_TO FORALL FLUSH FIND EXIT ERROR END_FILE ENCODE DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CLOSE CALL BACKSPACE ASSIGN ALLOCATE ACCEPT
first(_action_stmt) = WRITE WHERE WAIT VARIABLE UNLOCK TYPE SYNC STOP REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INQUIRE IF IDENTIFIER GO_TO FORALL FLUSH FIND EXIT ERROR END_FILE ENCODE DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CLOSE CALL BACKSPACE ASSIGN ALLOCATE ACTION_STMT ACCEPT
first(_access_stmt_public) = PUBLIC
first(_access_stmt_private) = PRIVATE
first(_accept_stmt) = ACCEPT
first(_acc) = ACC_WAIT ACC_UPDATE ACC_ROUTINE ACC_PARALLEL ACC_LOOP ACC_KERNELS ACC_HOST_DATA ACC_EXIT ACC_ENTER ACC_END ACC_DECLARE ACC_DATA ACC_CACHE ACC_ATOMIC
minimal(xlf_source) = (* 1 *) XLF_FIXED
minimal(xlf_option) = (* 1 *) IDENTIFIER
minimal(xlf_factor) = (* 3 *) LPAREN INT_LITERAL RPAREN
minimal(xlf_directive) = (* 1 *) XLF_CNCALL
minimal(xlf_cycle) = (* 1 *) INT_LITERAL
minimal(xlf_assertion) = (* 1 *) XLF_NODEPS
minimal(xlf) = (* 2 *) XLF_CNCALL EOL
minimal(write_stmt_head2) = (* 4 *) WRITE LPAREN__io_control_spec STAR RPAREN
minimal(write_stmt_head) = (* 1 *) WRITE
minimal(where_stmt) = (* 8 *) WHERE LPAREN INT_LITERAL RPAREN IDENTIFIER EQ INT_LITERAL EOL
minimal(where_construct_stmt) = (* 5 *) WHERE LPAREN INT_LITERAL RPAREN EOL
minimal(where_construct_head) = (* 1 *) WHERE_CONSTRUCT_STMT
minimal(where_construct) = (* 2 *) WHERE_CONSTRUCT_STMT END_WHERE_STMT
minimal(where_body_construct) = (* 1 *) error
minimal(wait_stmt_head) = (* 1 *) WAIT
minimal(wait_spec) = (* 1 *) INT_LITERAL
minimal(use_stmt) = (* 3 *) USE IDENTIFIER EOL
minimal(unlock_stmt_head) = (* 1 *) UNLOCK
minimal(union_stmt) = (* 2 *) UNION EOL
minimal(union_decl) = (* 11 *) UNION EOL MAP EOL KINDED_TYPE_SPEC IDENTIFIER EOL END_MAP EOL END_UNION EOL
minimal(type_spec_node) = (* 1 *) TYPE_SPEC
minimal(type_spec_no_character) = (* 1 *) KINDED_TYPE_SPEC
minimal(type_spec) = (* 1 *) KINDED_TYPE_SPEC
minimal(type_param_value) = (* 1 *) STAR
minimal(type_kw) = (* 1 *) TYPE
minimal(type_is) = (* 1 *) TYPE_IS
minimal(type_guard_stmt) = (* 2 *) CLASS_DEFAULT EOL
minimal(type_guard_block) = (* 2 *) CLASS_DEFAULT EOL
minimal(type_declaration_stmt_head) = (* 1 *) KINDED_TYPE_SPEC
minimal(type_declaration_stmt) = (* 3 *) KINDED_TYPE_SPEC IDENTIFIER EOL
minimal(type_bound_procedure_stmt) = (* 3 *) PROCEDURE IDENTIFIER EOL
minimal(type_bound_procedure_part) = (* 2 *) CONTAINS EOL
minimal(type_bound_proc_decl) = (* 1 *) IDENTIFIER
minimal(type_bound_proc_binding) = (* 3 *) PROCEDURE IDENTIFIER EOL
minimal(type_bound_generic_stmt) = (* 6 *) GENERIC COLON_COLON IDENTIFIER EQ_GT IDENTIFIER EOL
minimal(tuple_head) = (* 1 *) LPAREN
minimal(tuple) = (* 2 *) LPAREN RPAREN
minimal(tb_contains_stmt) = (* 2 *) CONTAINS EOL
minimal(target_stmt) = (* 3 *) TARGET IDENTIFIER EOL
minimal(sync_stmt_part) = (* 2 *) LPAREN RPAREN
minimal(sync_stat_OR_image_set) = (* 1 *) INT_LITERAL
minimal(suffix) = (* 4 *) RESULT LPAREN IDENTIFIER RPAREN
minimal(substring_range_OR_section_subscript_OR_actual_arg_spec) = (* 1 *) INT_LITERAL
minimal(substring_range) = (* 1 *) COLON
minimal(subscriptorder_array) = (* 4 *) IDENTIFIER LPAREN INT_LITERAL RPAREN
minimal(subroutine_subprogram0) = (* 1 *) SUBROUTINE_HEAD
minimal(subroutine_subprogram) = (* 2 *) SUBROUTINE_HEAD PU_TAIL
minimal(subroutine_stmt_head) = (* 1 *) SUBROUTINE_STMT_HEAD
minimal(subroutine_stmt) = (* 2 *) SUBROUTINE_STMT_HEAD EOL
minimal(subroutine_head0) = (* 1 *) SUBROUTINE_HEAD
minimal(subroutine_head) = (* 1 *) SUBROUTINE_HEAD
minimal(subprograms) = (* 0 *)
minimal(subprogram_part) = (* 2 *) CONTAINS EOL
minimal(subprogram) = (* 1 *) SUBPROGRAM
minimal(submodule_stmt) = (* 6 *) SUBMODULE LPAREN IDENTIFIER RPAREN IDENTIFIER EOL
minimal(submodule_head0) = (* 6 *) SUBMODULE LPAREN IDENTIFIER RPAREN IDENTIFIER EOL
minimal(submodule_head) = (* 6 *) SUBMODULE LPAREN IDENTIFIER RPAREN IDENTIFIER EOL
minimal(submodule) = (* 8 *) SUBMODULE LPAREN IDENTIFIER RPAREN IDENTIFIER EOL END EOL
minimal(structure_stmt_head) = (* 1 *) STRUCTURE
minimal(structure_stmt) = (* 2 *) STRUCTURE EOL
minimal(structure_decl) = (* 7 *) STRUCTURE EOL KINDED_TYPE_SPEC IDENTIFIER EOL END_STRUCTURE EOL
minimal(stmt_end) = (* 1 *) EOL
minimal(stmt) = (* 1 *) END_IF_STMT
minimal(specification_stmt_no_access_stmt) = (* 2 *) SAVE EOL
minimal(specification_stmt) = (* 2 *) SAVE EOL
minimal(specification_part_construct_OR_execution_part_construct) = (* 1 *) SPEC_PART_CONSTRUCT
minimal(specification_part_construct) = (* 1 *) SPEC_PART_CONSTRUCT
minimal(special_token) = (* 1 *) COMPOSITE_IDENTIFIER
minimal(special_symbol) = (* 1 *) AMP
minimal(spec_part_construct_OR_exec_part_constructs) = (* 1 *) SPEC_PART_CONSTRUCT
minimal(simple_attr_stmt_head) = (* 1 *) SIMPLE_ATTR
minimal(simple_attr_stmt) = (* 3 *) SIMPLE_ATTR IDENTIFIER EOL
minimal(sign_edit_desc_OR_blank_interp_edit_desc) = (* 1 *) IDENTIFIER
minimal(shape_spec) = (* 1 *) INT_LITERAL
minimal(sequence_stmt) = (* 2 *) SEQUENCE EOL
minimal(separated_nonempty_list(ioption(END_FRAGMENT),partial_subprogram)) = (* 1 *) SUBPROGRAM
minimal(separated_nonempty_list(ioption(COMMA__SLASH),namelist_group)) = (* 4 *) SLASH IDENTIFIER SLASH IDENTIFIER
minimal(separated_nonempty_list(ioption(COMMA__SLASH),common_spec)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(ioption(COMMA),only)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(ioption(COMMA),omp_clause)) = (* 1 *) OMP_ORDERED
minimal(separated_nonempty_list(ioption(COMMA),format_item)) = (* 1 *) DATA_EDIT_DESC
minimal(separated_nonempty_list(ioption(COMMA),dec_clause)) = (* 1 *) DEC_ALWAYS
minimal(separated_nonempty_list(ioption(COMMA),data_stmt_set)) = (* 1 *) DATA_STMT_SET
minimal(separated_nonempty_list(ioption(COMMA),acc_clause)) = (* 1 *) ACC_ASYNC
minimal(separated_nonempty_list(component_sep,part_ref_)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA__SLASH,record_decl)) = (* 4 *) SLASH IDENTIFIER SLASH IDENTIFIER
minimal(separated_nonempty_list(COMMA,xlf_option)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,xlf_assertion)) = (* 1 *) XLF_NODEPS
minimal(separated_nonempty_list(COMMA,wait_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,var_or_ref)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,type_bound_proc_decl)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,type_attr_spec)) = (* 1 *) PUBLIC
minimal(separated_nonempty_list(COMMA,target_object)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,sync_stat_OR_image_set)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,substring_range_OR_section_subscript_OR_actual_arg_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,subscriptorder_array)) = (* 4 *) IDENTIFIER LPAREN INT_LITERAL RPAREN
minimal(separated_nonempty_list(COMMA,shape_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,saved_entity)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,rename)) = (* 3 *) IDENTIFIER EQ_GT IDENTIFIER
minimal(separated_nonempty_list(COMMA,proc_decl)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,proc_compo_attr_spec)) = (* 1 *) POINTER
minimal(separated_nonempty_list(COMMA,proc_attr_spec)) = (* 1 *) PUBLIC
minimal(separated_nonempty_list(COMMA,position_spec_OR_sync_stat)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,position_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,pointer_object)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,pointee)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,omp_type_spec)) = (* 1 *) KINDED_TYPE_SPEC
minimal(separated_nonempty_list(COMMA,omp_list_item)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,ocl_nn)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,ocl_directive)) = (* 1 *) OCL_ARRAY_FUSION
minimal(separated_nonempty_list(COMMA,object_)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,named_constant_def)) = (* 3 *) IDENTIFIER EQ INT_LITERAL
minimal(separated_nonempty_list(COMMA,name)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,lock_variable_OR_lock_stat)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,letter_spec)) = (* 1 *) LETTER
minimal(separated_nonempty_list(COMMA,label)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,ioption(substring_range_OR_section_subscript_OR_actual_arg_spec))) = (* 0 *)
minimal(separated_nonempty_list(COMMA,ioption(expr))) = (* 0 *)
minimal(separated_nonempty_list(COMMA,io_item)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,io_control_spec)) = (* 1 *) STAR
minimal(separated_nonempty_list(COMMA,int_literal)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,inquire_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,independent_clause)) = (* 4 *) XLF_NEW LPAREN IDENTIFIER RPAREN
minimal(separated_nonempty_list(COMMA,implicit_spec)) = (* 4 *) KINDED_TYPE_SPEC LPAREN__IMPLICIT LETTER RPAREN
minimal(separated_nonempty_list(COMMA,generic_spec)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,forall_triplet_spec_OR_expr)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,flush_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,expr)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,explicit_shape_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,explicit_coshape_spec)) = (* 1 *) STAR
minimal(separated_nonempty_list(COMMA,equivalence_set)) = (* 3 *) LPAREN IDENTIFIER RPAREN
minimal(separated_nonempty_list(COMMA,equivalence_object)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,enumerator)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,encode_decode_spec)) = (* 3 *) IOSTAT EQ IDENTIFIER
minimal(separated_nonempty_list(COMMA,dummy_arg)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,dimension_array)) = (* 4 *) IDENTIFIER LPAREN INT_LITERAL RPAREN
minimal(separated_nonempty_list(COMMA,define_file_spec)) = (* 10 *) INT_LITERAL LPAREN INT_LITERAL COMMA INT_LITERAL COMMA INT_LITERAL COMMA IDENTIFIER RPAREN
minimal(separated_nonempty_list(COMMA,deferred_shape_spec)) = (* 1 *) COLON
minimal(separated_nonempty_list(COMMA,deferred_coshape_spec)) = (* 1 *) COLON
minimal(separated_nonempty_list(COMMA,dec_var_expr)) = (* 3 *) IDENTIFIER COLON INT_LITERAL
minimal(separated_nonempty_list(COMMA,dec_list_item)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,dec_level)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,dec_int)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,dec_hint)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,dec_clause)) = (* 1 *) DEC_ALWAYS
minimal(separated_nonempty_list(COMMA,dec_class_rule)) = (* 3 *) IDENTIFIER EQ IDENTIFIER
minimal(separated_nonempty_list(COMMA,dec_att)) = (* 1 *) DEC_INLINE
minimal(separated_nonempty_list(COMMA,dec_a)) = (* 1 *) DEC_WRT
minimal(separated_nonempty_list(COMMA,deallocate_stmt_part)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,data_stmt_value)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,data_stmt_object)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,data_i_do_object_OR_variable)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,cray_pointer_spec)) = (* 5 *) LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN
minimal(separated_nonempty_list(COMMA,connect_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,component_decl_OR_entity_decl)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,common_block_object)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,collapse_array)) = (* 4 *) IDENTIFIER LPAREN INT_LITERAL RPAREN
minimal(separated_nonempty_list(COMMA,codimension_decl)) = (* 4 *) IDENTIFIER LBRACKET COLON RBRACKET
minimal(separated_nonempty_list(COMMA,close_spec)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,case_value_range)) = (* 1 *) INT_LITERAL
minimal(separated_nonempty_list(COMMA,binding_attr)) = (* 1 *) PASS
minimal(separated_nonempty_list(COMMA,bind_entity)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,attr_spec)) = (* 1 *) PARAMETER
minimal(separated_nonempty_list(COMMA,association)) = (* 3 *) IDENTIFIER EQ_GT INT_LITERAL
minimal(separated_nonempty_list(COMMA,allocate_stmt_part)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,allocatable_array)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,acc_list_item)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,ac_value)) = (* 1 *) INT_LITERAL
minimal(selector_part) = (* 1 *) INT_LITERAL
minimal(select_type_stmt) = (* 5 *) SELECT_TYPE LPAREN INT_LITERAL RPAREN EOL
minimal(select_type_construct) = (* 7 *) SELECT_TYPE LPAREN INT_LITERAL RPAREN EOL END_SELECT EOL
minimal(select_case_stmt) = (* 5 *) SELECT_CASE LPAREN INT_LITERAL RPAREN EOL
minimal(save_stmt_head) = (* 1 *) SAVE
minimal(save_stmt) = (* 2 *) SAVE EOL
minimal(rewrite_stmt_head2) = (* 4 *) REWRITE LPAREN__io_control_spec STAR RPAREN
minimal(rewrite_stmt_head) = (* 1 *) REWRITE
minimal(rewind_stmt_head) = (* 1 *) REWIND
minimal(result) = (* 4 *) RESULT LPAREN IDENTIFIER RPAREN
minimal(rename_OR_only) = (* 3 *) COMMA ONLY COLON
minimal(rename) = (* 3 *) IDENTIFIER EQ_GT IDENTIFIER
minimal(record_stmt_head) = (* 1 *) RECORD
minimal(record_stmt) = (* 6 *) RECORD SLASH IDENTIFIER SLASH IDENTIFIER EOL
minimal(record_decl) = (* 4 *) SLASH IDENTIFIER SLASH IDENTIFIER
minimal(real_literal) = (* 1 *) REAL_LITERAL
minimal(read_stmt_head2) = (* 4 *) READ LPAREN__io_control_spec STAR RPAREN
minimal(read_stmt_head) = (* 1 *) READ
minimal(read_OR_write_stmt_head2) = (* 4 *) PP_MACRO_ID_RW LPAREN__io_control_spec STAR RPAREN
minimal(read_OR_write_stmt_head) = (* 1 *) PP_MACRO_ID_RW
minimal(read_OR_print_stmt_head) = (* 1 *) PP_MACRO_READ_PRINT
minimal(program_unit) = (* 1 *) PU_TAIL
minimal(program_stmt_head) = (* 1 *) PROGRAM
minimal(program_stmt) = (* 3 *) PROGRAM IDENTIFIER EOL
minimal(program) = (* 1 *) PU_TAIL
minimal(procedure_stmt) = (* 3 *) PROCEDURE IDENTIFIER EOL
minimal(procedure_kw) = (* 1 *) PROCEDURE
minimal(procedure_declaration_stmt) = (* 5 *) PROCEDURE LPAREN RPAREN IDENTIFIER EOL
minimal(proc_interface) = (* 1 *) IDENTIFIER
minimal(proc_decl) = (* 1 *) IDENTIFIER
minimal(proc_compo_attr_spec) = (* 1 *) POINTER
minimal(proc_attr_spec) = (* 1 *) PUBLIC
minimal(proc_attr_part) = (* 1 *) COLON_COLON
minimal(private_stmt) = (* 2 *) PRIVATE EOL
minimal(private_sequence_stmt) = (* 2 *) PRIVATE EOL
minimal(primary) = (* 1 *) INT_LITERAL
minimal(prefix_spec_no_type_spec) = (* 1 *) PREFIX_SPEC
minimal(pp_token) = (* 1 *) PP_DEFINE
minimal(pp_macro_id) = (* 1 *) PP_MACRO_ID
minimal(pp_macro_const) = (* 1 *) PP_MACRO_CONST
minimal(pp_ident) = (* 1 *) IDENTIFIER
minimal(pp_directive) = (* 1 *) PP_DEFINE__IDENT__BODY
minimal(pp_cond) = (* 1 *) PP_OR
minimal(pp_branch) = (* 1 *) PP_BRANCH
minimal(position_spec) = (* 1 *) INT_LITERAL
minimal(pointer_stmt) = (* 3 *) POINTER IDENTIFIER EOL
minimal(pointer_assignment_stmt) = (* 4 *) IDENTIFIER EQ_GT INT_LITERAL EOL
minimal(pointee) = (* 1 *) IDENTIFIER
minimal(partial_variable) = (* 2 *) IDENTIFIER EOP
minimal(partial_type_spec) = (* 2 *) KINDED_TYPE_SPEC EOP
minimal(partial_type_declaration_stmt) = (* 4 *) KINDED_TYPE_SPEC IDENTIFIER EOL EOP
minimal(partial_type_bound_proc_part) = (* 1 *) EOP
minimal(partial_subroutine_stmt_head) = (* 2 *) SUBROUTINE_STMT_HEAD EOP
minimal(partial_subroutine_head) = (* 2 *) SUBROUTINE_HEAD EOP
minimal(partial_subprograms) = (* 1 *) EOP
minimal(partial_subprogram) = (* 1 *) SUBPROGRAM
minimal(partial_stmts) = (* 2 *) END_IF_STMT EOP
minimal(partial_specification_part) = (* 1 *) EOP
minimal(partial_spec__exec) = (* 1 *) EOP
minimal(partial_pu_tail) = (* 3 *) END EOL EOP
minimal(partial_program_unit) = (* 2 *) PU_TAIL EOP
minimal(partial_program) = (* 2 *) PU_TAIL EOP
minimal(partial_onlys) = (* 2 *) IDENTIFIER EOP
minimal(partial_interface_spec) = (* 1 *) EOP
minimal(partial_function_stmt_head) = (* 2 *) FUNCTION_STMT_HEAD EOP
minimal(partial_function_stmt) = (* 5 *) FUNCTION_STMT_HEAD LPAREN RPAREN EOL EOP
minimal(partial_function_head) = (* 2 *) FUNCTION_HEAD EOP
minimal(partial_expr) = (* 2 *) INT_LITERAL EOP
minimal(partial_execution_part) = (* 1 *) EOP
minimal(partial_derived_type_def_part) = (* 1 *) EOP
minimal(partial_data_stmt_sets) = (* 2 *) DATA_STMT_SET EOP
minimal(partial_case_block) = (* 4 *) CASE DEFAULT EOL EOP
minimal(partial_assignment_stmt) = (* 5 *) IDENTIFIER EQ INT_LITERAL EOL EOP
minimal(partial_action_stmt) = (* 3 *) ACTION_STMT EOL EOP
minimal(part_ref_) = (* 1 *) IDENTIFIER
minimal(part_name) = (* 1 *) IDENTIFIER
minimal(parameter_stmt) = (* 5 *) PARAMETER IDENTIFIER EQ INT_LITERAL EOL
minimal(parameter_format_entry_stmt) = (* 3 *) ENTRY IDENTIFIER EOL
minimal(or_operand) = (* 1 *) INT_LITERAL
minimal(optional_stmt_head) = (* 1 *) OPTIONAL
minimal(optional_stmt) = (* 3 *) OPTIONAL IDENTIFIER EOL
minimal(operator_defined_op) = (* 4 *) OPERATOR LPAREN DEFINED_OP RPAREN
minimal(open_stmt_head) = (* 1 *) OPEN
minimal(opclist(substring_range_OR_section_subscript_OR_actual_arg_spec)) = (* 0 *)
minimal(opclist(expr)) = (* 0 *)
minimal(onlys) = (* 1 *) IDENTIFIER
minimal(only_head) = (* 1 *) ONLY
minimal(only) = (* 1 *) IDENTIFIER
minimal(omp_token) = (* 1 *) OMP_END
minimal(omp_reduction_op) = (* 1 *) IDENTIFIER
minimal(omp_policy) = (* 1 *) OMP_MASTER
minimal(omp_nowait) = (* 1 *) OMP_NOWAIT
minimal(omp_map_type) = (* 1 *) OMP_ALLOC
minimal(omp_list) = (* 1 *) IDENTIFIER
minimal(omp_kind) = (* 1 *) OMP_STATIC
minimal(omp_initializer_clause) = (* 4 *) OMP_INITIALIZER LPAREN IDENTIFIER RPAREN
minimal(omp_if_clause) = (* 4 *) OMP_IF LPAREN INT_LITERAL RPAREN
minimal(omp_directive) = (* 1 *) OMP_PARALLEL
minimal(omp_dependence_type) = (* 1 *) OMP_IN
minimal(omp_construct_type) = (* 1 *) OMP_PARALLEL
minimal(omp_combiner) = (* 1 *) IDENTIFIER
minimal(omp_clause) = (* 1 *) OMP_ORDERED
minimal(omp_attr) = (* 1 *) OMP_PRIVATE
minimal(omp_atomic) = (* 1 *) OMP_READ
minimal(omp) = (* 1 *) error
minimal(ocl_tuple) = (* 3 *) LPAREN INT_LITERAL RPAREN
minimal(ocl_scope) = (* 3 *) LPAREN OCL_ALL RPAREN
minimal(ocl_nn__colon) = (* 2 *) INT_LITERAL COLON
minimal(ocl_nn) = (* 1 *) INT_LITERAL
minimal(ocl_directive) = (* 1 *) OCL_ARRAY_FUSION
minimal(ocl) = (* 2 *) OCL_ARRAY_FUSION EOL
minimal(object_) = (* 1 *) IDENTIFIER
minimal(null_ref) = (* 3 *) NULL LPAREN RPAREN
minimal(nonempty_list(subroutine_head0)) = (* 1 *) SUBROUTINE_HEAD
minimal(nonempty_list(stmt)) = (* 1 *) END_IF_STMT
minimal(nonempty_list(program_unit)) = (* 1 *) PU_TAIL
minimal(nonempty_list(prefix_spec_no_type_spec)) = (* 1 *) PREFIX_SPEC
minimal(nonempty_list(name)) = (* 1 *) IDENTIFIER
minimal(nonempty_list(map_decl)) = (* 7 *) MAP EOL KINDED_TYPE_SPEC IDENTIFIER EOL END_MAP EOL
minimal(nonempty_list(function_head0)) = (* 1 *) FUNCTION_HEAD
minimal(nonempty_list(field_decl)) = (* 3 *) KINDED_TYPE_SPEC IDENTIFIER EOL
minimal(nonempty_list(enumerator_def_stmt)) = (* 3 *) ENUMERATOR IDENTIFIER EOL
minimal(nonempty_list(dec_option)) = (* 2 *) SLASH DEC_ALIGN
minimal(nonempty_list(data_stmt_set__comma_opt)) = (* 1 *) DATA_STMT_SET
minimal(nonempty_list(comma__attr_spec)) = (* 2 *) COMMA PARAMETER
minimal(nonempty_list(case_stmt__block)) = (* 3 *) CASE DEFAULT EOL
minimal(nonempty_list(case_block)) = (* 1 *) CASE_BLOCK
minimal(nonempty_list(TYPE_SPEC)) = (* 1 *) TYPE_SPEC
minimal(nonempty_list(SEMICOLON)) = (* 1 *) SEMICOLON
minimal(namelist_stmt_head) = (* 1 *) NAMELIST
minimal(namelist_stmt) = (* 6 *) NAMELIST SLASH IDENTIFIER SLASH IDENTIFIER EOL
minimal(namelist_group) = (* 4 *) SLASH IDENTIFIER SLASH IDENTIFIER
minimal(named_constant_def) = (* 3 *) IDENTIFIER EQ INT_LITERAL
minimal(name) = (* 1 *) IDENTIFIER
minimal(mult_operand) = (* 1 *) INT_LITERAL
minimal(module_stmt) = (* 3 *) MODULE IDENTIFIER EOL
minimal(module_nature_part) = (* 1 *) COLON_COLON
minimal(module_nature) = (* 1 *) INTRINSIC
minimal(module_) = (* 5 *) MODULE IDENTIFIER EOL END EOL
minimal(module0_) = (* 3 *) MODULE IDENTIFIER EOL
minimal(masked_or_unmasked_elsewhere_stmt) = (* 2 *) ELSEWHERE EOL
minimal(map_stmt) = (* 2 *) MAP EOL
minimal(map_decl) = (* 7 *) MAP EOL KINDED_TYPE_SPEC IDENTIFIER EOL END_MAP EOL
minimal(main_program) = (* 1 *) PU_TAIL
minimal(main) = (* 1 *) EOF
minimal(lparen__omp_list__rparen) = (* 3 *) LPAREN IDENTIFIER RPAREN
minimal(lparen__name__rparen) = (* 3 *) LPAREN IDENTIFIER RPAREN
minimal(loop_control) = (* 4 *) WHILE LPAREN INT_LITERAL RPAREN
minimal(logical_literal) = (* 1 *) LOGICAL_LITERAL
minimal(lock_variable_OR_lock_stat) = (* 1 *) IDENTIFIER
minimal(list(where_body_construct)) = (* 0 *)
minimal(list(type_guard_block)) = (* 0 *)
minimal(list(type_bound_proc_binding)) = (* 0 *)
minimal(list(subprogram)) = (* 0 *)
minimal(list(program_unit)) = (* 0 *)
minimal(list(private_sequence_stmt)) = (* 0 *)
minimal(list(prefix_spec_no_type_spec)) = (* 0 *)
minimal(list(masked_or_unmasked_elsewhere_block)) = (* 0 *)
minimal(list(interface_specification)) = (* 0 *)
minimal(list(forall_body_construct)) = (* 0 *)
minimal(list(derived_type_def_content)) = (* 0 *)
minimal(list(component_def_stmt)) = (* 0 *)
minimal(list(comma__attr_spec)) = (* 0 *)
minimal(linda_typeof) = (* 1 *) LINDA_TYPEOF
minimal(linda_formal) = (* 2 *) QUESTION IDENTIFIER
minimal(linda_call) = (* 2 *) IDENTIFIER EOL
minimal(linda_anonymous_formal_head) = (* 2 *) LINDA_TYPEOF LPAREN
minimal(linda_anonymous_formal) = (* 4 *) LINDA_TYPEOF LPAREN KINDED_TYPE_SPEC RPAREN
minimal(level_5_expr) = (* 1 *) INT_LITERAL
minimal(level_4_expr) = (* 1 *) INT_LITERAL
minimal(level_3_expr) = (* 1 *) INT_LITERAL
minimal(level_2_expr) = (* 1 *) INT_LITERAL
minimal(level_1_expr) = (* 1 *) INT_LITERAL
minimal(letter_spec) = (* 1 *) LETTER
minimal(length_selector) = (* 2 *) STAR INT_LITERAL
minimal(language_binding_spec_head) = (* 1 *) BIND
minimal(language_binding_spec) = (* 4 *) BIND LPAREN IDENTIFIER RPAREN
minimal(kind_selector) = (* 2 *) STAR INT_LITERAL
minimal(ioctl_spec_kw) = (* 1 *) CONNECT_INQUIRE_IOCTL_SPEC
minimal(io_control_spec) = (* 1 *) STAR
minimal(intrinsic_type_spec) = (* 1 *) KINDED_TYPE_SPEC
minimal(intrinsic_stmt) = (* 3 *) INTRINSIC IDENTIFIER EOL
minimal(intrinsic_op) = (* 1 *) STAR_STAR
minimal(interface_stmt) = (* 2 *) INTERFACE EOL
minimal(interface_specification) = (* 1 *) INTERFACE_SPEC
minimal(interface_body) = (* 3 *) SUBROUTINE_STMT_HEAD EOL PU_TAIL
minimal(interface_block) = (* 4 *) INTERFACE EOL END_INTERFACE EOL
minimal(interface) = (* 1 *) INTERFACE
minimal(intent_stmt) = (* 6 *) INTENT LPAREN INTENT_SPEC RPAREN IDENTIFIER EOL
minimal(intent_spec) = (* 1 *) INTENT_SPEC
minimal(intent) = (* 1 *) INTENT
minimal(int_literal) = (* 1 *) INT_LITERAL
minimal(inquire_stmt_head) = (* 1 *) INQUIRE
minimal(inquire_spec) = (* 1 *) INT_LITERAL
minimal(initialization) = (* 2 *) EQ INT_LITERAL
minimal(independent_clause) = (* 4 *) XLF_NEW LPAREN IDENTIFIER RPAREN
minimal(import_stmt) = (* 2 *) IMPORT EOL
minimal(implicit_stmt_head) = (* 1 *) IMPLICIT
minimal(implicit_stmt) = (* 3 *) IMPLICIT NONE EOL
minimal(implicit_spec) = (* 4 *) KINDED_TYPE_SPEC LPAREN__IMPLICIT LETTER RPAREN
minimal(implicit_part_stmt_proper) = (* 3 *) IMPLICIT NONE EOL
minimal(implicit_part_stmt_OR_declaration_construct) = (* 1 *) SPEC_PART_CONSTRUCT
minimal(image_selector) = (* 3 *) LBRACKET STAR RBRACKET
minimal(if_then_stmt) = (* 6 *) IF LPAREN INT_LITERAL RPAREN THEN EOL
minimal(if__lparen__expr__rparen) = (* 4 *) IF LPAREN INT_LITERAL RPAREN
minimal(if__lparen__expr) = (* 3 *) IF LPAREN INT_LITERAL
minimal(if_) = (* 1 *) IF
minimal(high_or_low) = (* 1 *) XLF_VERY_HIGH
minimal(generic_spec) = (* 1 *) IDENTIFIER
minimal(function_subprogram0) = (* 1 *) FUNCTION_HEAD
minimal(function_subprogram) = (* 2 *) FUNCTION_HEAD PU_TAIL
minimal(function_stmt_head0) = (* 1 *) FUNCTION_STMT_HEAD
minimal(function_stmt_head) = (* 2 *) FUNCTION_STMT_HEAD LPAREN
minimal(function_stmt) = (* 4 *) FUNCTION_STMT_HEAD LPAREN RPAREN EOL
minimal(function_head0) = (* 1 *) FUNCTION_HEAD
minimal(function_head) = (* 1 *) FUNCTION_HEAD
minimal(fragment) = (* 1 *) END_FRAGMENT
minimal(format_stmt_head) = (* 1 *) FORMAT
minimal(format_stmt) = (* 4 *) FORMAT LPAREN RPAREN EOL
minimal(format_specification) = (* 2 *) LPAREN RPAREN
minimal(format_item) = (* 1 *) DATA_EDIT_DESC
minimal(format_entry_stmt) = (* 3 *) ENTRY IDENTIFIER EOL
minimal(format) = (* 1 *) INT_LITERAL
minimal(forall_triplet_spec_OR_expr) = (* 1 *) INT_LITERAL
minimal(forall_stmt) = (* 8 *) FORALL LPAREN INT_LITERAL RPAREN IDENTIFIER EQ INT_LITERAL EOL
minimal(forall_header) = (* 3 *) LPAREN INT_LITERAL RPAREN
minimal(forall_construct_stmt) = (* 5 *) FORALL LPAREN INT_LITERAL RPAREN EOL
minimal(forall_construct) = (* 2 *) FORALL_CONSTRUCT_STMT END_FORALL_STMT
minimal(forall_body_construct) = (* 1 *) error
minimal(forall_assignment_stmt) = (* 4 *) IDENTIFIER EQ INT_LITERAL EOL
minimal(flush_stmt_head) = (* 1 *) FLUSH
minimal(flush_spec) = (* 1 *) INT_LITERAL
minimal(find_stmt_head) = (* 1 *) FIND
minimal(final_procedure_stmt) = (* 3 *) FINAL IDENTIFIER EOL
minimal(expr) = (* 1 *) INT_LITERAL
minimal(explicit_shape_spec) = (* 1 *) INT_LITERAL
minimal(explicit_coshape_spec) = (* 1 *) STAR
minimal(execution_part_construct) = (* 1 *) DO_STMT
minimal(executable_construct) = (* 1 *) DO_STMT
minimal(equivalence_stmt) = (* 5 *) EQUIVALENCE LPAREN IDENTIFIER RPAREN EOL
minimal(equivalence_set) = (* 3 *) LPAREN IDENTIFIER RPAREN
minimal(equivalence_object) = (* 1 *) IDENTIFIER
minimal(equiv_operand) = (* 1 *) INT_LITERAL
minimal(enumerator_def_stmt) = (* 3 *) ENUMERATOR IDENTIFIER EOL
minimal(enumerator) = (* 1 *) IDENTIFIER
minimal(enum_def_stmt) = (* 7 *) ENUM COMMA BIND LPAREN IDENTIFIER RPAREN EOL
minimal(enum_def) = (* 12 *) ENUM COMMA BIND LPAREN IDENTIFIER RPAREN EOL ENUMERATOR IDENTIFIER EOL END_ENUM EOL
minimal(enum_cst) = (* 2 *) EQ INT_LITERAL
minimal(entry_stmt_sub) = (* 3 *) ENTRY IDENTIFIER LPAREN
minimal(entry_stmt) = (* 3 *) ENTRY IDENTIFIER EOL
minimal(entity_name) = (* 1 *) IDENTIFIER
minimal(endfile_stmt_head) = (* 1 *) END_FILE
minimal(end_where_stmt) = (* 1 *) END_WHERE_STMT
minimal(end_union_stmt) = (* 2 *) END_UNION EOL
minimal(end_type_stmt) = (* 1 *) END_TYPE_STMT
minimal(end_subroutine_stmt_head) = (* 1 *) END_SUBROUTINE
minimal(end_submodule_stmt_head) = (* 1 *) END_SUBMODULE
minimal(end_structure_stmt) = (* 2 *) END_STRUCTURE EOL
minimal(end_stmt_p) = (* 2 *) END EOL
minimal(end_stmt) = (* 2 *) END EOL
minimal(end_select_type_stmt) = (* 2 *) END_SELECT EOL
minimal(end_select_stmt) = (* 1 *) END_SELECT_STMT
minimal(end_program_stmt_head) = (* 1 *) END_PROGRAM
minimal(end_module_stmt_head) = (* 1 *) END_MODULE
minimal(end_map_stmt) = (* 2 *) END_MAP EOL
minimal(end_interface_stmt) = (* 2 *) END_INTERFACE EOL
minimal(end_interface) = (* 1 *) END_INTERFACE
minimal(end_if_stmt) = (* 1 *) END_IF_STMT
minimal(end_function_stmt_head) = (* 1 *) END_FUNCTION
minimal(end_forall_stmt) = (* 1 *) END_FORALL_STMT
minimal(end_enum_stmt) = (* 2 *) END_ENUM EOL
minimal(end_do_stmt) = (* 1 *) END_DO_STMT
minimal(end_critical_stmt) = (* 2 *) END_CRITICAL EOL
minimal(end_block_stmt) = (* 2 *) END_BLOCK EOL
minimal(end_block_data_stmt_head) = (* 1 *) END_BLOCK_DATA
minimal(end_associate_stmt) = (* 2 *) END_ASSOCIATE EOL
minimal(encode_decode_stmt_head) = (* 1 *) ENCODE
minimal(else_stmt) = (* 2 *) ELSE EOL
minimal(else_if_stmt_head) = (* 3 *) ELSE_IF LPAREN INT_LITERAL
minimal(else_if_stmt) = (* 6 *) ELSE_IF LPAREN INT_LITERAL RPAREN THEN EOL
minimal(else_if) = (* 1 *) ELSE_IF
minimal(dummy_arg) = (* 1 *) IDENTIFIER
minimal(dtype_args) = (* 0 *)
minimal(do_stmt_head) = (* 1 *) DO
minimal(do_stmt) = (* 2 *) DO EOL
minimal(directive) = (* 1 *) OCL
minimal(dimension_stmt_head) = (* 1 *) DIMENSION
minimal(dimension_stmt) = (* 6 *) DIMENSION IDENTIFIER LPAREN INT_LITERAL RPAREN EOL
minimal(dimension_array) = (* 4 *) IDENTIFIER LPAREN INT_LITERAL RPAREN
minimal(derived_type_stmt) = (* 3 *) TYPE IDENTIFIER EOL
minimal(derived_type_def_part) = (* 0 *)
minimal(derived_type_def_content) = (* 1 *) DERIVED_TYPE_DEF_PART
minimal(derived_type_def) = (* 2 *) DERIVED_TYPE_STMT END_TYPE_STMT
minimal(delete_stmt_head) = (* 1 *) DELETE
minimal(define_file_spec) = (* 10 *) INT_LITERAL LPAREN INT_LITERAL COMMA INT_LITERAL COMMA INT_LITERAL COMMA IDENTIFIER RPAREN
minimal(declaration_construct_proper) = (* 2 *) DERIVED_TYPE_STMT END_TYPE_STMT
minimal(decl_type_spec_proper) = (* 4 *) TYPE LPAREN KINDED_TYPE_SPEC RPAREN
minimal(decl_type_spec) = (* 1 *) KINDED_TYPE_SPEC
minimal(dec_var_expr) = (* 3 *) IDENTIFIER COLON INT_LITERAL
minimal(dec_prefetch_hint) = (* 0 *)
minimal(dec_p) = (* 1 *) IDENTIFIER
minimal(dec_option) = (* 2 *) SLASH DEC_ALIGN
minimal(dec_op) = (* 1 *) PLUS
minimal(dec_loop_count) = (* 2 *) EQ INT_LITERAL
minimal(dec_list_p) = (* 3 *) LPAREN IDENTIFIER RPAREN
minimal(dec_list_item) = (* 1 *) IDENTIFIER
minimal(dec_list) = (* 1 *) IDENTIFIER
minimal(dec_level) = (* 1 *) INT_LITERAL
minimal(dec_iop) = (* 1 *) PLUS
minimal(dec_int_spec) = (* 2 *) EQ INT_LITERAL
minimal(dec_int) = (* 1 *) INT_LITERAL
minimal(dec_hint) = (* 1 *) IDENTIFIER
minimal(dec_directive) = (* 1 *) DEC_BLOCK_LOOP
minimal(dec_data_type) = (* 1 *) KINDED_TYPE_SPEC
minimal(dec_clause) = (* 1 *) DEC_ALWAYS
minimal(dec_class_rule) = (* 3 *) IDENTIFIER EQ IDENTIFIER
minimal(dec_att) = (* 1 *) DEC_INLINE
minimal(dec_a) = (* 1 *) DEC_WRT
minimal(dec) = (* 2 *) DEC_BLOCK_LOOP EOL
minimal(data_stmt_value) = (* 1 *) IDENTIFIER
minimal(data_stmt_set__comma_opt) = (* 1 *) DATA_STMT_SET
minimal(data_stmt_set) = (* 1 *) DATA_STMT_SET
minimal(data_stmt_repeat__star) = (* 2 *) IDENTIFIER STAR
minimal(data_stmt_repeat) = (* 1 *) IDENTIFIER
minimal(data_stmt_object) = (* 1 *) IDENTIFIER
minimal(data_stmt_head) = (* 1 *) DATA
minimal(data_stmt_constant) = (* 1 *) IDENTIFIER
minimal(data_stmt) = (* 3 *) DATA DATA_STMT_SET EOL
minimal(data_ref_) = (* 1 *) IDENTIFIER
minimal(data_implied_do) = (* 7 *) LPAREN IDENTIFIER EQ INT_LITERAL COMMA INT_LITERAL RPAREN
minimal(data_i_do_object_OR_variable) = (* 1 *) IDENTIFIER
minimal(critical_stmt) = (* 2 *) CRITICAL EOL
minimal(critical_construct) = (* 4 *) CRITICAL EOL END_CRITICAL EOL
minimal(cray_pointer_spec) = (* 5 *) LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN
minimal(control_edit_desc) = (* 1 *) POSITION_EDIT_DESC
minimal(contains_stmt) = (* 2 *) CONTAINS EOL
minimal(construct_name__colon) = (* 2 *) CONSTRUCT_NAME COLON
minimal(constant) = (* 1 *) INT_LITERAL
minimal(connect_spec_kw) = (* 1 *) FILE
minimal(connect_spec) = (* 1 *) INT_LITERAL
minimal(computed_goto_stmt_head) = (* 1 *) GO_TO
minimal(component_sep) = (* 1 *) PERCENT
minimal(component_def_stmt) = (* 3 *) KINDED_TYPE_SPEC IDENTIFIER EOL
minimal(component_decl_OR_entity_decl) = (* 1 *) IDENTIFIER
minimal(component_attr_part) = (* 1 *) COLON_COLON
minimal(complex_literal) = (* 5 *) LPAREN INT_LITERAL COMMA INT_LITERAL RPAREN
minimal(common_stmt_head) = (* 1 *) COMMON
minimal(common_stmt) = (* 3 *) COMMON IDENTIFIER EOL
minimal(common_spec) = (* 1 *) IDENTIFIER
minimal(common_name_part) = (* 1 *) SLASH_SLASH
minimal(common_block_object) = (* 1 *) IDENTIFIER
minimal(comma__module_nature) = (* 2 *) COMMA INTRINSIC
minimal(colon__name) = (* 2 *) COLON IDENTIFIER
minimal(collapse_array) = (* 4 *) IDENTIFIER LPAREN INT_LITERAL RPAREN
minimal(codimension_stmt_head) = (* 1 *) CODIMENSION
minimal(codimension_stmt) = (* 6 *) CODIMENSION IDENTIFIER LBRACKET COLON RBRACKET EOL
minimal(codimension_decl) = (* 4 *) IDENTIFIER LBRACKET COLON RBRACKET
minimal(coarray_spec_part) = (* 3 *) LBRACKET COLON RBRACKET
minimal(coarray_spec) = (* 1 *) COLON
minimal(close_stmt_head) = (* 1 *) CLOSE
minimal(close_spec1) = (* 3 *) STATUS EQ INT_LITERAL
minimal(close_spec) = (* 1 *) INT_LITERAL
minimal(class_is) = (* 1 *) CLASS_IS
minimal(character) = (* 1 *) CHARACTER
minimal(char_selector_no_length_selector) = (* 5 *) LPAREN STAR COMMA INT_LITERAL RPAREN
minimal(char_selector) = (* 2 *) STAR INT_LITERAL
minimal(char_literal) = (* 1 *) CHAR_LITERAL
minimal(char_length_part) = (* 2 *) STAR INT_LITERAL
minimal(char_length) = (* 1 *) INT_LITERAL
minimal(case_value_range) = (* 1 *) INT_LITERAL
minimal(case_stmt__block) = (* 3 *) CASE DEFAULT EOL
minimal(case_stmt) = (* 3 *) CASE DEFAULT EOL
minimal(case_selector) = (* 1 *) DEFAULT
minimal(case_construct) = (* 2 *) SELECT_CASE_STMT END_SELECT_STMT
minimal(case_block) = (* 1 *) CASE_BLOCK
minimal(boz_literal) = (* 1 *) BOZ_LITERAL
minimal(block_stmt) = (* 2 *) BLOCK EOL
minimal(block_data_stmt) = (* 2 *) BLOCK_DATA EOL
minimal(block_data0) = (* 2 *) BLOCK_DATA EOL
minimal(block_data) = (* 4 *) BLOCK_DATA EOL END EOL
minimal(block_construct) = (* 4 *) BLOCK EOL END_BLOCK EOL
minimal(block) = (* 0 *)
minimal(binding_private_stmt) = (* 2 *) PRIVATE EOL
minimal(binding_attr_part) = (* 1 *) COLON_COLON
minimal(binding_attr) = (* 1 *) PASS
minimal(bind_stmt) = (* 6 *) BIND LPAREN IDENTIFIER RPAREN IDENTIFIER EOL
minimal(backspace_stmt_head) = (* 1 *) BACKSPACE
minimal(attr_spec) = (* 1 *) PARAMETER
minimal(asynchronous_stmt_head) = (* 1 *) ASYNCHRONOUS
minimal(asynchronous_stmt) = (* 3 *) ASYNCHRONOUS IDENTIFIER EOL
minimal(association) = (* 3 *) IDENTIFIER EQ_GT INT_LITERAL
minimal(associate_stmt) = (* 7 *) ASSOCIATE LPAREN IDENTIFIER EQ_GT INT_LITERAL RPAREN EOL
minimal(associate_construct) = (* 9 *) ASSOCIATE LPAREN IDENTIFIER EQ_GT INT_LITERAL RPAREN EOL END_ASSOCIATE EOL
minimal(assignment_stmt_head) = (* 2 *) IDENTIFIER EQ
minimal(assignment_stmt) = (* 4 *) IDENTIFIER EQ INT_LITERAL EOL
minimal(array_spec) = (* 1 *) INT_LITERAL
minimal(array_constructor_head) = (* 1 *) LPAREN_SLASH
minimal(array_constructor) = (* 3 *) LPAREN_SLASH INT_LITERAL SLASH_RPAREN
minimal(apollo_pointer_spec) = (* 4 *) SLASH IDENTIFIER SLASH IDENTIFIER
minimal(and_operand) = (* 1 *) INT_LITERAL
minimal(alt_return_spec) = (* 2 *) STAR INT_LITERAL
minimal(allocate_) = (* 1 *) ALLOCATE
minimal(allocatable_stmt) = (* 3 *) ALLOCATABLE IDENTIFIER EOL
minimal(add_operand) = (* 1 *) INT_LITERAL
minimal(action_stmt_no_assign) = (* 2 *) CONTINUE EOL
minimal(action_stmt) = (* 2 *) ACTION_STMT EOL
minimal(access_stmt_public) = (* 2 *) PUBLIC EOL
minimal(access_stmt_private) = (* 2 *) PRIVATE EOL
minimal(access_stmt) = (* 2 *) PRIVATE EOL
minimal(accept_stmt_head) = (* 1 *) ACCEPT
minimal(acc_op) = (* 1 *) PLUS
minimal(acc_list_item) = (* 1 *) IDENTIFIER
minimal(acc_list) = (* 1 *) IDENTIFIER
minimal(acc_iop) = (* 1 *) PLUS
minimal(acc_directive) = (* 1 *) ACC_PARALLEL
minimal(acc_clause) = (* 1 *) ACC_ASYNC
minimal(acc_atomic) = (* 1 *) ACC_READ
minimal(acc) = (* 1 *) error
minimal(ac_spec) = (* 1 *) INT_LITERAL
minimal(_xlf) = (* 1 *) XLF_CNCALL
minimal(_write_stmt) = (* 4 *) WRITE LPAREN__io_control_spec STAR RPAREN
minimal(_where_stmt) = (* 7 *) WHERE LPAREN INT_LITERAL RPAREN IDENTIFIER EQ INT_LITERAL
minimal(_where_construct_stmt) = (* 4 *) WHERE LPAREN INT_LITERAL RPAREN
minimal(_wait_stmt) = (* 4 *) WAIT LPAREN INT_LITERAL RPAREN
minimal(_use_stmt) = (* 2 *) USE IDENTIFIER
minimal(_unlock_stmt) = (* 2 *) UNLOCK INT_LITERAL
minimal(_union_stmt) = (* 1 *) UNION
minimal(_type_stmt) = (* 2 *) TYPE INT_LITERAL
minimal(_type_guard_stmt) = (* 1 *) CLASS_DEFAULT
minimal(_type_declaration_stmt) = (* 2 *) KINDED_TYPE_SPEC IDENTIFIER
minimal(_type_bound_procedure_stmt) = (* 2 *) PROCEDURE IDENTIFIER
minimal(_type_bound_generic_stmt) = (* 5 *) GENERIC COLON_COLON IDENTIFIER EQ_GT IDENTIFIER
minimal(_tuple) = (* 1 *) LPAREN
minimal(_tb_contains_stmt) = (* 1 *) CONTAINS
minimal(_target_stmt) = (* 2 *) TARGET IDENTIFIER
minimal(_sync_xxx_stmt) = (* 2 *) SYNC IDENTIFIER
minimal(_subroutine_subprogram) = (* 1 *) SUBROUTINE_HEAD
minimal(_subroutine_stmt) = (* 1 *) SUBROUTINE_STMT_HEAD
minimal(_submodule_stmt) = (* 5 *) SUBMODULE LPAREN IDENTIFIER RPAREN IDENTIFIER
minimal(_structure_stmt) = (* 1 *) STRUCTURE
minimal(_stop_stmt) = (* 1 *) STOP
minimal(_simple_attr_stmt) = (* 2 *) SIMPLE_ATTR IDENTIFIER
minimal(_sequence_stmt) = (* 1 *) SEQUENCE
minimal(_select_type_stmt) = (* 4 *) SELECT_TYPE LPAREN INT_LITERAL RPAREN
minimal(_select_case_stmt) = (* 4 *) SELECT_CASE LPAREN INT_LITERAL RPAREN
minimal(_save_stmt) = (* 1 *) SAVE
minimal(_rewrite_stmt) = (* 4 *) REWRITE LPAREN__io_control_spec STAR RPAREN
minimal(_rewind_stmt) = (* 2 *) REWIND INT_LITERAL
minimal(_return_stmt) = (* 1 *) RETURN
minimal(_record_stmt) = (* 5 *) RECORD SLASH IDENTIFIER SLASH IDENTIFIER
minimal(_read_stmt) = (* 2 *) READ INT_LITERAL
minimal(_read_OR_write_stmt) = (* 4 *) PP_MACRO_ID_RW LPAREN__io_control_spec STAR RPAREN
minimal(_read_OR_print_stmt) = (* 2 *) PP_MACRO_READ_PRINT INT_LITERAL
minimal(_program_stmt) = (* 2 *) PROGRAM IDENTIFIER
minimal(_procedure_stmt) = (* 2 *) PROCEDURE IDENTIFIER
minimal(_procedure_declaration_stmt) = (* 4 *) PROCEDURE LPAREN RPAREN IDENTIFIER
minimal(_proc_compo_attr_spec) = (* 1 *) POINTER
minimal(_private_stmt) = (* 1 *) PRIVATE
minimal(_print_stmt) = (* 2 *) PRINT INT_LITERAL
minimal(_prefix) = (* 1 *) KINDED_TYPE_SPEC
minimal(_pp_macro_stmt) = (* 1 *) PP_MACRO_STMT
minimal(_pointer_stmt) = (* 2 *) POINTER IDENTIFIER
minimal(_pointer_assignment_stmt) = (* 3 *) IDENTIFIER EQ_GT INT_LITERAL
minimal(_pause_stmt) = (* 1 *) PAUSE
minimal(_parameter_stmt) = (* 4 *) PARAMETER IDENTIFIER EQ INT_LITERAL
minimal(_optional_stmt) = (* 2 *) OPTIONAL IDENTIFIER
minimal(_open_stmt) = (* 4 *) OPEN LPAREN INT_LITERAL RPAREN
minimal(_onlys) = (* 1 *) IDENTIFIER
minimal(_omp) = (* 1 *) OMP_PARALLEL
minimal(_ocl_scope) = (* 1 *) OCL_ALL
minimal(_ocl) = (* 1 *) OCL_ARRAY_FUSION
minimal(_nullify_stmt) = (* 4 *) NULLIFY LPAREN IDENTIFIER RPAREN
minimal(_namelist_stmt) = (* 5 *) NAMELIST SLASH IDENTIFIER SLASH IDENTIFIER
minimal(_module_stmt) = (* 2 *) MODULE IDENTIFIER
minimal(_module_) = (* 3 *) MODULE IDENTIFIER EOL
minimal(_masked_or_unmasked_elsewhere_stmt) = (* 1 *) ELSEWHERE
minimal(_map_stmt) = (* 1 *) MAP
minimal(_main_program) = (* 0 *)
minimal(_lock_stmt) = (* 4 *) LOCK LPAREN IDENTIFIER RPAREN
minimal(_linda_anonymous_formal) = (* 3 *) LINDA_TYPEOF LPAREN KINDED_TYPE_SPEC
minimal(_intrinsic_stmt) = (* 2 *) INTRINSIC IDENTIFIER
minimal(_interface_stmt) = (* 1 *) INTERFACE
minimal(_intent_stmt) = (* 5 *) INTENT LPAREN INTENT_SPEC RPAREN IDENTIFIER
minimal(_inquire_stmt) = (* 4 *) INQUIRE LPAREN INT_LITERAL RPAREN
minimal(_import_stmt) = (* 1 *) IMPORT
minimal(_implicit_stmt) = (* 2 *) IMPLICIT NONE
minimal(_if_then_stmt) = (* 5 *) IF LPAREN INT_LITERAL RPAREN THEN
minimal(_if_stmt) = (* 5 *) IF LPAREN INT_LITERAL RPAREN ACTION_STMT
minimal(_goto_stmt) = (* 2 *) GO_TO INT_LITERAL
minimal(_function_subprogram) = (* 1 *) FUNCTION_HEAD
minimal(_function_stmt) = (* 3 *) FUNCTION_STMT_HEAD LPAREN RPAREN
minimal(_format_stmt) = (* 3 *) FORMAT LPAREN RPAREN
minimal(_forall_stmt) = (* 7 *) FORALL LPAREN INT_LITERAL RPAREN IDENTIFIER EQ INT_LITERAL
minimal(_forall_construct_stmt) = (* 4 *) FORALL LPAREN INT_LITERAL RPAREN
minimal(_forall_assignment_stmt) = (* 3 *) IDENTIFIER EQ INT_LITERAL
minimal(_flush_stmt) = (* 2 *) FLUSH INT_LITERAL
minimal(_find_stmt) = (* 4 *) FIND LPAREN__io_control_spec STAR RPAREN
minimal(_final_procedure_stmt) = (* 2 *) FINAL IDENTIFIER
minimal(_exit_stmt) = (* 1 *) EXIT
minimal(_error_stop_stmt) = (* 2 *) ERROR STOP
minimal(_equivalence_stmt) = (* 4 *) EQUIVALENCE LPAREN IDENTIFIER RPAREN
minimal(_enumerator_def_stmt) = (* 2 *) ENUMERATOR IDENTIFIER
minimal(_enum_def_stmt) = (* 6 *) ENUM COMMA BIND LPAREN IDENTIFIER RPAREN
minimal(_entry_stmt) = (* 2 *) ENTRY IDENTIFIER
minimal(_endfile_stmt) = (* 2 *) END_FILE INT_LITERAL
minimal(_end_where_stmt) = (* 1 *) END_WHERE
minimal(_end_union_stmt) = (* 1 *) END_UNION
minimal(_end_type_stmt) = (* 1 *) END_TYPE
minimal(_end_subroutine_stmt) = (* 1 *) END_SUBROUTINE
minimal(_end_submodule_stmt) = (* 1 *) END_SUBMODULE
minimal(_end_structure_stmt) = (* 1 *) END_STRUCTURE
minimal(_end_stmt_p) = (* 1 *) END
minimal(_end_stmt) = (* 1 *) END
minimal(_end_select_type_stmt) = (* 1 *) END_SELECT
minimal(_end_select_stmt) = (* 1 *) END_SELECT
minimal(_end_program_stmt) = (* 1 *) END_PROGRAM
minimal(_end_module_stmt) = (* 1 *) END_MODULE
minimal(_end_map_stmt) = (* 1 *) END_MAP
minimal(_end_interface_stmt) = (* 1 *) END_INTERFACE
minimal(_end_if_stmt) = (* 1 *) END_IF
minimal(_end_function_stmt) = (* 1 *) END_FUNCTION
minimal(_end_forall_stmt) = (* 1 *) END_FORALL
minimal(_end_enum_stmt) = (* 1 *) END_ENUM
minimal(_end_do_stmt) = (* 1 *) END_DO
minimal(_end_critical_stmt) = (* 1 *) END_CRITICAL
minimal(_end_block_stmt) = (* 1 *) END_BLOCK
minimal(_end_block_data_stmt) = (* 1 *) END_BLOCK_DATA
minimal(_end_associate_stmt) = (* 1 *) END_ASSOCIATE
minimal(_encode_decode_stmt) = (* 8 *) ENCODE LPAREN__position_spec INT_LITERAL COMMA INT_LITERAL COMMA IDENTIFIER RPAREN
minimal(_else_stmt) = (* 1 *) ELSE
minimal(_else_if_stmt) = (* 5 *) ELSE_IF LPAREN INT_LITERAL RPAREN THEN
minimal(_do_stmt) = (* 1 *) DO
minimal(_dimension_stmt) = (* 5 *) DIMENSION IDENTIFIER LPAREN INT_LITERAL RPAREN
minimal(_derived_type_stmt) = (* 2 *) TYPE IDENTIFIER
minimal(_delete_stmt) = (* 4 *) DELETE LPAREN__position_spec INT_LITERAL RPAREN
minimal(_define_file_stmt) = (* 11 *) DEFINE_FILE INT_LITERAL LPAREN INT_LITERAL COMMA INT_LITERAL COMMA INT_LITERAL COMMA IDENTIFIER RPAREN
minimal(_dec) = (* 1 *) DEC_BLOCK_LOOP
minimal(_deallocate_stmt) = (* 4 *) DEALLOCATE LPAREN IDENTIFIER RPAREN
minimal(_data_stmt) = (* 2 *) DATA DATA_STMT_SET
minimal(_cycle_stmt) = (* 1 *) CYCLE
minimal(_critical_stmt) = (* 1 *) CRITICAL
minimal(_continue_stmt) = (* 1 *) CONTINUE
minimal(_contains_stmt) = (* 1 *) CONTAINS
minimal(_computed_goto_stmt) = (* 5 *) GO_TO LPAREN__GO_TO INT_LITERAL RPAREN INT_LITERAL
minimal(_component_def_stmt) = (* 2 *) KINDED_TYPE_SPEC IDENTIFIER
minimal(_common_stmt) = (* 2 *) COMMON IDENTIFIER
minimal(_codimension_stmt) = (* 5 *) CODIMENSION IDENTIFIER LBRACKET COLON RBRACKET
minimal(_close_stmt) = (* 4 *) CLOSE LPAREN INT_LITERAL RPAREN
minimal(_case_stmt) = (* 2 *) CASE DEFAULT
minimal(_call_stmt) = (* 2 *) CALL PP_MACRO_EXPR
minimal(_block_stmt) = (* 1 *) BLOCK
minimal(_block_data_stmt) = (* 1 *) BLOCK_DATA
minimal(_binding_private_stmt) = (* 1 *) PRIVATE
minimal(_binding_attr) = (* 1 *) PASS
minimal(_bind_stmt) = (* 5 *) BIND LPAREN IDENTIFIER RPAREN IDENTIFIER
minimal(_backspace_stmt) = (* 2 *) BACKSPACE INT_LITERAL
minimal(_asynchronous_stmt) = (* 2 *) ASYNCHRONOUS IDENTIFIER
minimal(_associate_stmt) = (* 6 *) ASSOCIATE LPAREN IDENTIFIER EQ_GT INT_LITERAL RPAREN
minimal(_assignment_stmt) = (* 3 *) IDENTIFIER EQ INT_LITERAL
minimal(_assigned_goto_stmt) = (* 2 *) GO_TO IDENTIFIER
minimal(_assign_stmt) = (* 4 *) ASSIGN INT_LITERAL TO IDENTIFIER
minimal(_arithmetic_if_stmt) = (* 9 *) IF LPAREN INT_LITERAL RPAREN INT_LITERAL COMMA INT_LITERAL COMMA INT_LITERAL
minimal(_allocate_stmt) = (* 4 *) ALLOCATE LPAREN IDENTIFIER RPAREN
minimal(_allocatable_stmt) = (* 2 *) ALLOCATABLE IDENTIFIER
minimal(_action_stmt_no_assign) = (* 1 *) CONTINUE
minimal(_action_stmt) = (* 1 *) ACTION_STMT
minimal(_access_stmt_public) = (* 1 *) PUBLIC
minimal(_access_stmt_private) = (* 1 *) PRIVATE
minimal(_accept_stmt) = (* 2 *) ACCEPT INT_LITERAL
minimal(_acc) = (* 1 *) ACC_PARALLEL
maximal(xlf_source) = 4
maximal(xlf_option) = infinity
maximal(xlf_factor) = infinity
maximal(xlf_directive) = infinity
maximal(xlf_cycle) = 1
maximal(xlf_assertion) = infinity
maximal(xlf) = infinity
maximal(write_stmt_head2) = infinity
maximal(write_stmt_head) = 1
maximal(where_stmt) = infinity
maximal(where_construct_stmt) = infinity
maximal(where_construct_head) = infinity
maximal(where_construct) = infinity
maximal(where_body_construct) = infinity
maximal(wait_stmt_head) = 1
maximal(wait_spec) = infinity
maximal(use_stmt) = infinity
maximal(unlock_stmt_head) = 1
maximal(union_stmt) = infinity
maximal(union_decl) = infinity
maximal(type_spec_node) = infinity
maximal(type_spec_no_character) = infinity
maximal(type_spec) = infinity
maximal(type_param_value) = infinity
maximal(type_kw) = 1
maximal(type_is) = 1
maximal(type_guard_stmt) = infinity
maximal(type_guard_block) = infinity
maximal(type_declaration_stmt_head) = infinity
maximal(type_declaration_stmt) = infinity
maximal(type_bound_procedure_stmt) = infinity
maximal(type_bound_procedure_part) = infinity
maximal(type_bound_proc_decl) = 3
maximal(type_bound_proc_binding) = infinity
maximal(type_bound_generic_stmt) = infinity
maximal(tuple_head) = 1
maximal(tuple) = infinity
maximal(tb_contains_stmt) = infinity
maximal(target_stmt) = infinity
maximal(sync_stmt_part) = infinity
maximal(sync_stat_OR_image_set) = infinity
maximal(suffix) = infinity
maximal(substring_range_OR_section_subscript_OR_actual_arg_spec) = infinity
maximal(substring_range) = infinity
maximal(subscriptorder_array) = infinity
maximal(subroutine_subprogram0) = infinity
maximal(subroutine_subprogram) = infinity
maximal(subroutine_stmt_head) = infinity
maximal(subroutine_stmt) = infinity
maximal(subroutine_head0) = 2
maximal(subroutine_head) = infinity
maximal(subprograms) = infinity
maximal(subprogram_part) = infinity
maximal(subprogram) = infinity
maximal(submodule_stmt) = infinity
maximal(submodule_head0) = infinity
maximal(submodule_head) = infinity
maximal(submodule) = infinity
maximal(structure_stmt_head) = 1
maximal(structure_stmt) = infinity
maximal(structure_decl) = infinity
maximal(stmt_end) = infinity
maximal(stmt) = infinity
maximal(specification_stmt_no_access_stmt) = infinity
maximal(specification_stmt) = infinity
maximal(specification_part_construct_OR_execution_part_construct) = infinity
maximal(specification_part_construct) = infinity
maximal(special_token) = 1
maximal(special_symbol) = 1
maximal(spec_part_construct_OR_exec_part_constructs) = infinity
maximal(simple_attr_stmt_head) = 2
maximal(simple_attr_stmt) = infinity
maximal(sign_edit_desc_OR_blank_interp_edit_desc) = 1
maximal(shape_spec) = infinity
maximal(sequence_stmt) = infinity
maximal(separated_nonempty_list(ioption(END_FRAGMENT),partial_subprogram)) = infinity
maximal(separated_nonempty_list(ioption(COMMA__SLASH),namelist_group)) = infinity
maximal(separated_nonempty_list(ioption(COMMA__SLASH),common_spec)) = infinity
maximal(separated_nonempty_list(ioption(COMMA),only)) = infinity
maximal(separated_nonempty_list(ioption(COMMA),omp_clause)) = infinity
maximal(separated_nonempty_list(ioption(COMMA),format_item)) = infinity
maximal(separated_nonempty_list(ioption(COMMA),dec_clause)) = infinity
maximal(separated_nonempty_list(ioption(COMMA),data_stmt_set)) = infinity
maximal(separated_nonempty_list(ioption(COMMA),acc_clause)) = infinity
maximal(separated_nonempty_list(component_sep,part_ref_)) = infinity
maximal(separated_nonempty_list(COMMA__SLASH,record_decl)) = infinity
maximal(separated_nonempty_list(COMMA,xlf_option)) = infinity
maximal(separated_nonempty_list(COMMA,xlf_assertion)) = infinity
maximal(separated_nonempty_list(COMMA,wait_spec)) = infinity
maximal(separated_nonempty_list(COMMA,var_or_ref)) = infinity
maximal(separated_nonempty_list(COMMA,type_bound_proc_decl)) = infinity
maximal(separated_nonempty_list(COMMA,type_attr_spec)) = infinity
maximal(separated_nonempty_list(COMMA,target_object)) = infinity
maximal(separated_nonempty_list(COMMA,sync_stat_OR_image_set)) = infinity
maximal(separated_nonempty_list(COMMA,substring_range_OR_section_subscript_OR_actual_arg_spec)) = infinity
maximal(separated_nonempty_list(COMMA,subscriptorder_array)) = infinity
maximal(separated_nonempty_list(COMMA,shape_spec)) = infinity
maximal(separated_nonempty_list(COMMA,saved_entity)) = infinity
maximal(separated_nonempty_list(COMMA,rename)) = infinity
maximal(separated_nonempty_list(COMMA,proc_decl)) = infinity
maximal(separated_nonempty_list(COMMA,proc_compo_attr_spec)) = infinity
maximal(separated_nonempty_list(COMMA,proc_attr_spec)) = infinity
maximal(separated_nonempty_list(COMMA,position_spec_OR_sync_stat)) = infinity
maximal(separated_nonempty_list(COMMA,position_spec)) = infinity
maximal(separated_nonempty_list(COMMA,pointer_object)) = infinity
maximal(separated_nonempty_list(COMMA,pointee)) = infinity
maximal(separated_nonempty_list(COMMA,omp_type_spec)) = infinity
maximal(separated_nonempty_list(COMMA,omp_list_item)) = infinity
maximal(separated_nonempty_list(COMMA,ocl_nn)) = infinity
maximal(separated_nonempty_list(COMMA,ocl_directive)) = infinity
maximal(separated_nonempty_list(COMMA,object_)) = infinity
maximal(separated_nonempty_list(COMMA,named_constant_def)) = infinity
maximal(separated_nonempty_list(COMMA,name)) = infinity
maximal(separated_nonempty_list(COMMA,lock_variable_OR_lock_stat)) = infinity
maximal(separated_nonempty_list(COMMA,letter_spec)) = infinity
maximal(separated_nonempty_list(COMMA,label)) = infinity
maximal(separated_nonempty_list(COMMA,ioption(substring_range_OR_section_subscript_OR_actual_arg_spec))) = infinity
maximal(separated_nonempty_list(COMMA,ioption(expr))) = infinity
maximal(separated_nonempty_list(COMMA,io_item)) = infinity
maximal(separated_nonempty_list(COMMA,io_control_spec)) = infinity
maximal(separated_nonempty_list(COMMA,int_literal)) = infinity
maximal(separated_nonempty_list(COMMA,inquire_spec)) = infinity
maximal(separated_nonempty_list(COMMA,independent_clause)) = infinity
maximal(separated_nonempty_list(COMMA,implicit_spec)) = infinity
maximal(separated_nonempty_list(COMMA,generic_spec)) = infinity
maximal(separated_nonempty_list(COMMA,forall_triplet_spec_OR_expr)) = infinity
maximal(separated_nonempty_list(COMMA,flush_spec)) = infinity
maximal(separated_nonempty_list(COMMA,expr)) = infinity
maximal(separated_nonempty_list(COMMA,explicit_shape_spec)) = infinity
maximal(separated_nonempty_list(COMMA,explicit_coshape_spec)) = infinity
maximal(separated_nonempty_list(COMMA,equivalence_set)) = infinity
maximal(separated_nonempty_list(COMMA,equivalence_object)) = infinity
maximal(separated_nonempty_list(COMMA,enumerator)) = infinity
maximal(separated_nonempty_list(COMMA,encode_decode_spec)) = infinity
maximal(separated_nonempty_list(COMMA,dummy_arg)) = infinity
maximal(separated_nonempty_list(COMMA,dimension_array)) = infinity
maximal(separated_nonempty_list(COMMA,define_file_spec)) = infinity
maximal(separated_nonempty_list(COMMA,deferred_shape_spec)) = infinity
maximal(separated_nonempty_list(COMMA,deferred_coshape_spec)) = infinity
maximal(separated_nonempty_list(COMMA,dec_var_expr)) = infinity
maximal(separated_nonempty_list(COMMA,dec_list_item)) = infinity
maximal(separated_nonempty_list(COMMA,dec_level)) = infinity
maximal(separated_nonempty_list(COMMA,dec_int)) = infinity
maximal(separated_nonempty_list(COMMA,dec_hint)) = infinity
maximal(separated_nonempty_list(COMMA,dec_clause)) = infinity
maximal(separated_nonempty_list(COMMA,dec_class_rule)) = infinity
maximal(separated_nonempty_list(COMMA,dec_att)) = infinity
maximal(separated_nonempty_list(COMMA,dec_a)) = infinity
maximal(separated_nonempty_list(COMMA,deallocate_stmt_part)) = infinity
maximal(separated_nonempty_list(COMMA,data_stmt_value)) = infinity
maximal(separated_nonempty_list(COMMA,data_stmt_object)) = infinity
maximal(separated_nonempty_list(COMMA,data_i_do_object_OR_variable)) = infinity
maximal(separated_nonempty_list(COMMA,cray_pointer_spec)) = infinity
maximal(separated_nonempty_list(COMMA,connect_spec)) = infinity
maximal(separated_nonempty_list(COMMA,component_decl_OR_entity_decl)) = infinity
maximal(separated_nonempty_list(COMMA,common_block_object)) = infinity
maximal(separated_nonempty_list(COMMA,collapse_array)) = infinity
maximal(separated_nonempty_list(COMMA,codimension_decl)) = infinity
maximal(separated_nonempty_list(COMMA,close_spec)) = infinity
maximal(separated_nonempty_list(COMMA,case_value_range)) = infinity
maximal(separated_nonempty_list(COMMA,binding_attr)) = infinity
maximal(separated_nonempty_list(COMMA,bind_entity)) = infinity
maximal(separated_nonempty_list(COMMA,attr_spec)) = infinity
maximal(separated_nonempty_list(COMMA,association)) = infinity
maximal(separated_nonempty_list(COMMA,allocate_stmt_part)) = infinity
maximal(separated_nonempty_list(COMMA,allocatable_array)) = infinity
maximal(separated_nonempty_list(COMMA,acc_list_item)) = infinity
maximal(separated_nonempty_list(COMMA,ac_value)) = infinity
maximal(selector_part) = infinity
maximal(select_type_stmt) = infinity
maximal(select_type_construct) = infinity
maximal(select_case_stmt) = infinity
maximal(save_stmt_head) = 2
maximal(save_stmt) = infinity
maximal(rewrite_stmt_head2) = infinity
maximal(rewrite_stmt_head) = 1
maximal(rewind_stmt_head) = 1
maximal(result) = 4
maximal(rename_OR_only) = infinity
maximal(rename) = 9
maximal(record_stmt_head) = 1
maximal(record_stmt) = infinity
maximal(record_decl) = infinity
maximal(real_literal) = 2
maximal(read_stmt_head2) = infinity
maximal(read_stmt_head) = 1
maximal(read_OR_write_stmt_head2) = infinity
maximal(read_OR_write_stmt_head) = 1
maximal(read_OR_print_stmt_head) = 1
maximal(program_unit) = infinity
maximal(program_stmt_head) = 1
maximal(program_stmt) = infinity
maximal(program) = infinity
maximal(procedure_stmt) = infinity
maximal(procedure_kw) = 1
maximal(procedure_declaration_stmt) = infinity
maximal(proc_interface) = infinity
maximal(proc_decl) = infinity
maximal(proc_compo_attr_spec) = 4
maximal(proc_attr_spec) = infinity
maximal(proc_attr_part) = infinity
maximal(private_stmt) = infinity
maximal(private_sequence_stmt) = infinity
maximal(primary) = infinity
maximal(prefix_spec_no_type_spec) = 4
maximal(pp_token) = 1
maximal(pp_macro_id) = 1
maximal(pp_macro_const) = 1
maximal(pp_ident) = 1
maximal(pp_directive) = 1
maximal(pp_cond) = 1
maximal(pp_branch) = 2
maximal(position_spec) = infinity
maximal(pointer_stmt) = infinity
maximal(pointer_assignment_stmt) = infinity
maximal(pointee) = infinity
maximal(partial_variable) = infinity
maximal(partial_type_spec) = infinity
maximal(partial_type_declaration_stmt) = infinity
maximal(partial_type_bound_proc_part) = infinity
maximal(partial_subroutine_stmt_head) = infinity
maximal(partial_subroutine_head) = infinity
maximal(partial_subprograms) = infinity
maximal(partial_subprogram) = infinity
maximal(partial_stmts) = infinity
maximal(partial_specification_part) = infinity
maximal(partial_spec__exec) = infinity
maximal(partial_pu_tail) = infinity
maximal(partial_program_unit) = infinity
maximal(partial_program) = infinity
maximal(partial_onlys) = infinity
maximal(partial_interface_spec) = infinity
maximal(partial_function_stmt_head) = infinity
maximal(partial_function_stmt) = infinity
maximal(partial_function_head) = infinity
maximal(partial_expr) = infinity
maximal(partial_execution_part) = infinity
maximal(partial_derived_type_def_part) = infinity
maximal(partial_data_stmt_sets) = infinity
maximal(partial_case_block) = infinity
maximal(partial_assignment_stmt) = infinity
maximal(partial_action_stmt) = infinity
maximal(part_ref_) = infinity
maximal(part_name) = 1
maximal(parameter_stmt) = infinity
maximal(parameter_format_entry_stmt) = infinity
maximal(or_operand) = infinity
maximal(optional_stmt_head) = 2
maximal(optional_stmt) = infinity
maximal(operator_defined_op) = 4
maximal(open_stmt_head) = 1
maximal(opclist(substring_range_OR_section_subscript_OR_actual_arg_spec)) = infinity
maximal(opclist(expr)) = infinity
maximal(onlys) = infinity
maximal(only_head) = 1
maximal(only) = 9
maximal(omp_token) = 1
maximal(omp_reduction_op) = 1
maximal(omp_policy) = 1
maximal(omp_nowait) = 1
maximal(omp_map_type) = 1
maximal(omp_list) = infinity
maximal(omp_kind) = 1
maximal(omp_initializer_clause) = infinity
maximal(omp_if_clause) = infinity
maximal(omp_directive) = infinity
maximal(omp_dependence_type) = 1
maximal(omp_construct_type) = 1
maximal(omp_combiner) = infinity
maximal(omp_clause) = infinity
maximal(omp_attr) = 1
maximal(omp_atomic) = 1
maximal(omp) = infinity
maximal(ocl_tuple) = infinity
maximal(ocl_scope) = 3
maximal(ocl_nn__colon) = 2
maximal(ocl_nn) = 1
maximal(ocl_directive) = infinity
maximal(ocl) = infinity
maximal(object_) = infinity
maximal(null_ref) = infinity
maximal(nonempty_list(subroutine_head0)) = infinity
maximal(nonempty_list(stmt)) = infinity
maximal(nonempty_list(program_unit)) = infinity
maximal(nonempty_list(prefix_spec_no_type_spec)) = infinity
maximal(nonempty_list(name)) = infinity
maximal(nonempty_list(map_decl)) = infinity
maximal(nonempty_list(function_head0)) = infinity
maximal(nonempty_list(field_decl)) = infinity
maximal(nonempty_list(enumerator_def_stmt)) = infinity
maximal(nonempty_list(dec_option)) = infinity
maximal(nonempty_list(data_stmt_set__comma_opt)) = infinity
maximal(nonempty_list(comma__attr_spec)) = infinity
maximal(nonempty_list(case_stmt__block)) = infinity
maximal(nonempty_list(case_block)) = infinity
maximal(nonempty_list(TYPE_SPEC)) = infinity
maximal(nonempty_list(SEMICOLON)) = infinity
maximal(namelist_stmt_head) = 1
maximal(namelist_stmt) = infinity
maximal(namelist_group) = infinity
maximal(named_constant_def) = infinity
maximal(name) = 1
maximal(mult_operand) = infinity
maximal(module_stmt) = infinity
maximal(module_nature_part) = 3
maximal(module_nature) = 1
maximal(module_) = infinity
maximal(module0_) = infinity
maximal(masked_or_unmasked_elsewhere_stmt) = infinity
maximal(map_stmt) = infinity
maximal(map_decl) = infinity
maximal(main_program) = infinity
maximal(main) = infinity
maximal(lparen__omp_list__rparen) = infinity
maximal(lparen__name__rparen) = 3
maximal(loop_control) = infinity
maximal(logical_literal) = 1
maximal(lock_variable_OR_lock_stat) = infinity
maximal(list(where_body_construct)) = infinity
maximal(list(type_guard_block)) = infinity
maximal(list(type_bound_proc_binding)) = infinity
maximal(list(subprogram)) = infinity
maximal(list(program_unit)) = infinity
maximal(list(private_sequence_stmt)) = infinity
maximal(list(prefix_spec_no_type_spec)) = infinity
maximal(list(masked_or_unmasked_elsewhere_block)) = infinity
maximal(list(interface_specification)) = infinity
maximal(list(forall_body_construct)) = infinity
maximal(list(derived_type_def_content)) = infinity
maximal(list(component_def_stmt)) = infinity
maximal(list(comma__attr_spec)) = infinity
maximal(linda_typeof) = 1
maximal(linda_formal) = infinity
maximal(linda_call) = infinity
maximal(linda_anonymous_formal_head) = 2
maximal(linda_anonymous_formal) = infinity
maximal(level_5_expr) = infinity
maximal(level_4_expr) = infinity
maximal(level_3_expr) = infinity
maximal(level_2_expr) = infinity
maximal(level_1_expr) = infinity
maximal(letter_spec) = 3
maximal(length_selector) = infinity
maximal(language_binding_spec_head) = 1
maximal(language_binding_spec) = infinity
maximal(kind_selector) = infinity
maximal(ioctl_spec_kw) = 1
maximal(io_control_spec) = infinity
maximal(intrinsic_type_spec) = infinity
maximal(intrinsic_stmt) = infinity
maximal(intrinsic_op) = 1
maximal(interface_stmt) = infinity
maximal(interface_specification) = infinity
maximal(interface_body) = infinity
maximal(interface_block) = infinity
maximal(interface) = 1
maximal(intent_stmt) = infinity
maximal(intent_spec) = 1
maximal(intent) = 1
maximal(int_literal) = 1
maximal(inquire_stmt_head) = 1
maximal(inquire_spec) = infinity
maximal(initialization) = infinity
maximal(independent_clause) = infinity
maximal(import_stmt) = infinity
maximal(implicit_stmt_head) = 1
maximal(implicit_stmt) = infinity
maximal(implicit_spec) = infinity
maximal(implicit_part_stmt_proper) = infinity
maximal(implicit_part_stmt_OR_declaration_construct) = infinity
maximal(image_selector) = infinity
maximal(if_then_stmt) = infinity
maximal(if__lparen__expr__rparen) = infinity
maximal(if__lparen__expr) = infinity
maximal(if_) = 1
maximal(high_or_low) = 1
maximal(generic_spec) = 4
maximal(function_subprogram0) = infinity
maximal(function_subprogram) = infinity
maximal(function_stmt_head0) = infinity
maximal(function_stmt_head) = infinity
maximal(function_stmt) = infinity
maximal(function_head0) = 2
maximal(function_head) = infinity
maximal(fragment) = infinity
maximal(format_stmt_head) = 1
maximal(format_stmt) = infinity
maximal(format_specification) = infinity
maximal(format_item) = infinity
maximal(format_entry_stmt) = infinity
maximal(format) = infinity
maximal(forall_triplet_spec_OR_expr) = infinity
maximal(forall_stmt) = infinity
maximal(forall_header) = infinity
maximal(forall_construct_stmt) = infinity
maximal(forall_construct) = infinity
maximal(forall_body_construct) = infinity
maximal(forall_assignment_stmt) = infinity
maximal(flush_stmt_head) = 1
maximal(flush_spec) = infinity
maximal(find_stmt_head) = 1
maximal(final_procedure_stmt) = infinity
maximal(expr) = infinity
maximal(explicit_shape_spec) = infinity
maximal(explicit_coshape_spec) = infinity
maximal(execution_part_construct) = infinity
maximal(executable_construct) = infinity
maximal(equivalence_stmt) = infinity
maximal(equivalence_set) = infinity
maximal(equivalence_object) = infinity
maximal(equiv_operand) = infinity
maximal(enumerator_def_stmt) = infinity
maximal(enumerator) = infinity
maximal(enum_def_stmt) = infinity
maximal(enum_def) = infinity
maximal(enum_cst) = infinity
maximal(entry_stmt_sub) = infinity
maximal(entry_stmt) = infinity
maximal(entity_name) = infinity
maximal(endfile_stmt_head) = 1
maximal(end_where_stmt) = infinity
maximal(end_union_stmt) = infinity
maximal(end_type_stmt) = infinity
maximal(end_subroutine_stmt_head) = 1
maximal(end_submodule_stmt_head) = 1
maximal(end_structure_stmt) = infinity
maximal(end_stmt_p) = infinity
maximal(end_stmt) = infinity
maximal(end_select_type_stmt) = infinity
maximal(end_select_stmt) = infinity
maximal(end_program_stmt_head) = 1
maximal(end_module_stmt_head) = 1
maximal(end_map_stmt) = infinity
maximal(end_interface_stmt) = infinity
maximal(end_interface) = 1
maximal(end_if_stmt) = infinity
maximal(end_function_stmt_head) = 1
maximal(end_forall_stmt) = infinity
maximal(end_enum_stmt) = infinity
maximal(end_do_stmt) = infinity
maximal(end_critical_stmt) = infinity
maximal(end_block_stmt) = infinity
maximal(end_block_data_stmt_head) = 1
maximal(end_associate_stmt) = infinity
maximal(encode_decode_stmt_head) = 1
maximal(else_stmt) = infinity
maximal(else_if_stmt_head) = infinity
maximal(else_if_stmt) = infinity
maximal(else_if) = 1
maximal(dummy_arg) = 1
maximal(dtype_args) = infinity
maximal(do_stmt_head) = 3
maximal(do_stmt) = infinity
maximal(directive) = 1
maximal(dimension_stmt_head) = 1
maximal(dimension_stmt) = infinity
maximal(dimension_array) = infinity
maximal(derived_type_stmt) = infinity
maximal(derived_type_def_part) = infinity
maximal(derived_type_def_content) = infinity
maximal(derived_type_def) = infinity
maximal(delete_stmt_head) = 1
maximal(define_file_spec) = infinity
maximal(declaration_construct_proper) = infinity
maximal(decl_type_spec_proper) = infinity
maximal(decl_type_spec) = infinity
maximal(dec_var_expr) = infinity
maximal(dec_prefetch_hint) = infinity
maximal(dec_p) = infinity
maximal(dec_option) = infinity
maximal(dec_op) = 1
maximal(dec_loop_count) = infinity
maximal(dec_list_p) = infinity
maximal(dec_list_item) = 3
maximal(dec_list) = infinity
maximal(dec_level) = 3
maximal(dec_iop) = 1
maximal(dec_int_spec) = 3
maximal(dec_int) = 1
maximal(dec_hint) = infinity
maximal(dec_directive) = infinity
maximal(dec_data_type) = infinity
maximal(dec_clause) = infinity
maximal(dec_class_rule) = 3
maximal(dec_att) = infinity
maximal(dec_a) = 3
maximal(dec) = infinity
maximal(data_stmt_value) = infinity
maximal(data_stmt_set__comma_opt) = infinity
maximal(data_stmt_set) = infinity
maximal(data_stmt_repeat__star) = infinity
maximal(data_stmt_repeat) = infinity
maximal(data_stmt_object) = infinity
maximal(data_stmt_head) = 1
maximal(data_stmt_constant) = infinity
maximal(data_stmt) = infinity
maximal(data_ref_) = infinity
maximal(data_implied_do) = infinity
maximal(data_i_do_object_OR_variable) = infinity
maximal(critical_stmt) = infinity
maximal(critical_construct) = infinity
maximal(cray_pointer_spec) = infinity
maximal(control_edit_desc) = 2
maximal(contains_stmt) = infinity
maximal(construct_name__colon) = 2
maximal(constant) = 2
maximal(connect_spec_kw) = 1
maximal(connect_spec) = infinity
maximal(computed_goto_stmt_head) = 1
maximal(component_sep) = 1
maximal(component_def_stmt) = infinity
maximal(component_decl_OR_entity_decl) = infinity
maximal(component_attr_part) = infinity
maximal(complex_literal) = 9
maximal(common_stmt_head) = 1
maximal(common_stmt) = infinity
maximal(common_spec) = infinity
maximal(common_name_part) = 3
maximal(common_block_object) = infinity
maximal(comma__module_nature) = 2
maximal(colon__name) = 2
maximal(collapse_array) = infinity
maximal(codimension_stmt_head) = 2
maximal(codimension_stmt) = infinity
maximal(codimension_decl) = infinity
maximal(coarray_spec_part) = infinity
maximal(coarray_spec) = infinity
maximal(close_stmt_head) = 1
maximal(close_spec1) = infinity
maximal(close_spec) = infinity
maximal(class_is) = 1
maximal(character) = 1
maximal(char_selector_no_length_selector) = infinity
maximal(char_selector) = infinity
maximal(char_literal) = 1
maximal(char_length_part) = infinity
maximal(char_length) = infinity
maximal(case_value_range) = infinity
maximal(case_stmt__block) = infinity
maximal(case_stmt) = infinity
maximal(case_selector) = infinity
maximal(case_construct) = infinity
maximal(case_block) = infinity
maximal(boz_literal) = 1
maximal(block_stmt) = infinity
maximal(block_data_stmt) = infinity
maximal(block_data0) = infinity
maximal(block_data) = infinity
maximal(block_construct) = infinity
maximal(block) = infinity
maximal(binding_private_stmt) = infinity
maximal(binding_attr_part) = infinity
maximal(binding_attr) = 4
maximal(bind_stmt) = infinity
maximal(backspace_stmt_head) = 1
maximal(attr_spec) = infinity
maximal(asynchronous_stmt_head) = 2
maximal(asynchronous_stmt) = infinity
maximal(association) = infinity
maximal(associate_stmt) = infinity
maximal(associate_construct) = infinity
maximal(assignment_stmt_head) = infinity
maximal(assignment_stmt) = infinity
maximal(array_spec) = infinity
maximal(array_constructor_head) = 1
maximal(array_constructor) = infinity
maximal(apollo_pointer_spec) = infinity
maximal(and_operand) = infinity
maximal(alt_return_spec) = 2
maximal(allocate_) = 1
maximal(allocatable_stmt) = infinity
maximal(add_operand) = infinity
maximal(action_stmt_no_assign) = infinity
maximal(action_stmt) = infinity
maximal(access_stmt_public) = infinity
maximal(access_stmt_private) = infinity
maximal(access_stmt) = infinity
maximal(accept_stmt_head) = 1
maximal(acc_op) = 1
maximal(acc_list_item) = infinity
maximal(acc_list) = infinity
maximal(acc_iop) = 1
maximal(acc_directive) = infinity
maximal(acc_clause) = infinity
maximal(acc_atomic) = 1
maximal(acc) = infinity
maximal(ac_spec) = infinity
maximal(_xlf) = infinity
maximal(_write_stmt) = infinity
maximal(_where_stmt) = infinity
maximal(_where_construct_stmt) = infinity
maximal(_wait_stmt) = infinity
maximal(_use_stmt) = infinity
maximal(_unlock_stmt) = infinity
maximal(_union_stmt) = 1
maximal(_type_stmt) = infinity
maximal(_type_guard_stmt) = infinity
maximal(_type_declaration_stmt) = infinity
maximal(_type_bound_procedure_stmt) = infinity
maximal(_type_bound_generic_stmt) = infinity
maximal(_tuple) = infinity
maximal(_tb_contains_stmt) = 1
maximal(_target_stmt) = infinity
maximal(_sync_xxx_stmt) = infinity
maximal(_subroutine_subprogram) = infinity
maximal(_subroutine_stmt) = infinity
maximal(_submodule_stmt) = 7
maximal(_structure_stmt) = infinity
maximal(_stop_stmt) = infinity
maximal(_simple_attr_stmt) = infinity
maximal(_sequence_stmt) = 1
maximal(_select_type_stmt) = infinity
maximal(_select_case_stmt) = infinity
maximal(_save_stmt) = infinity
maximal(_rewrite_stmt) = infinity
maximal(_rewind_stmt) = infinity
maximal(_return_stmt) = infinity
maximal(_record_stmt) = infinity
maximal(_read_stmt) = infinity
maximal(_read_OR_write_stmt) = infinity
maximal(_read_OR_print_stmt) = infinity
maximal(_program_stmt) = 2
maximal(_procedure_stmt) = infinity
maximal(_procedure_declaration_stmt) = infinity
maximal(_proc_compo_attr_spec) = 4
maximal(_private_stmt) = 1
maximal(_print_stmt) = infinity
maximal(_prefix) = infinity
maximal(_pp_macro_stmt) = infinity
maximal(_pointer_stmt) = infinity
maximal(_pointer_assignment_stmt) = infinity
maximal(_pause_stmt) = infinity
maximal(_parameter_stmt) = infinity
maximal(_optional_stmt) = infinity
maximal(_open_stmt) = infinity
maximal(_onlys) = infinity
maximal(_omp) = infinity
maximal(_ocl_scope) = 1
maximal(_ocl) = infinity
maximal(_nullify_stmt) = infinity
maximal(_namelist_stmt) = infinity
maximal(_module_stmt) = 2
maximal(_module_) = infinity
maximal(_masked_or_unmasked_elsewhere_stmt) = infinity
maximal(_map_stmt) = 1
maximal(_main_program) = infinity
maximal(_lock_stmt) = infinity
maximal(_linda_anonymous_formal) = infinity
maximal(_intrinsic_stmt) = infinity
maximal(_interface_stmt) = 5
maximal(_intent_stmt) = infinity
maximal(_inquire_stmt) = infinity
maximal(_import_stmt) = infinity
maximal(_implicit_stmt) = infinity
maximal(_if_then_stmt) = infinity
maximal(_if_stmt) = infinity
maximal(_goto_stmt) = 2
maximal(_function_subprogram) = infinity
maximal(_function_stmt) = infinity
maximal(_format_stmt) = infinity
maximal(_forall_stmt) = infinity
maximal(_forall_construct_stmt) = infinity
maximal(_forall_assignment_stmt) = infinity
maximal(_flush_stmt) = infinity
maximal(_find_stmt) = infinity
maximal(_final_procedure_stmt) = infinity
maximal(_exit_stmt) = 2
maximal(_error_stop_stmt) = infinity
maximal(_equivalence_stmt) = infinity
maximal(_enumerator_def_stmt) = infinity
maximal(_enum_def_stmt) = 6
maximal(_entry_stmt) = infinity
maximal(_endfile_stmt) = infinity
maximal(_end_where_stmt) = 2
maximal(_end_union_stmt) = 1
maximal(_end_type_stmt) = 2
maximal(_end_subroutine_stmt) = 2
maximal(_end_submodule_stmt) = 2
maximal(_end_structure_stmt) = 1
maximal(_end_stmt_p) = 1
maximal(_end_stmt) = 1
maximal(_end_select_type_stmt) = 2
maximal(_end_select_stmt) = 2
maximal(_end_program_stmt) = 2
maximal(_end_module_stmt) = 2
maximal(_end_map_stmt) = 1
maximal(_end_interface_stmt) = 5
maximal(_end_if_stmt) = 2
maximal(_end_function_stmt) = 2
maximal(_end_forall_stmt) = 2
maximal(_end_enum_stmt) = 1
maximal(_end_do_stmt) = 2
maximal(_end_critical_stmt) = 2
maximal(_end_block_stmt) = 2
maximal(_end_block_data_stmt) = 2
maximal(_end_associate_stmt) = 2
maximal(_encode_decode_stmt) = infinity
maximal(_else_stmt) = 2
maximal(_else_if_stmt) = infinity
maximal(_do_stmt) = infinity
maximal(_dimension_stmt) = infinity
maximal(_derived_type_stmt) = infinity
maximal(_delete_stmt) = infinity
maximal(_define_file_stmt) = infinity
maximal(_dec) = infinity
maximal(_deallocate_stmt) = infinity
maximal(_data_stmt) = infinity
maximal(_cycle_stmt) = 2
maximal(_critical_stmt) = 3
maximal(_continue_stmt) = 1
maximal(_contains_stmt) = 1
maximal(_computed_goto_stmt) = infinity
maximal(_component_def_stmt) = infinity
maximal(_common_stmt) = infinity
maximal(_codimension_stmt) = infinity
maximal(_close_stmt) = infinity
maximal(_case_stmt) = infinity
maximal(_call_stmt) = infinity
maximal(_block_stmt) = 3
maximal(_block_data_stmt) = 2
maximal(_binding_private_stmt) = 1
maximal(_binding_attr) = 4
maximal(_bind_stmt) = infinity
maximal(_backspace_stmt) = infinity
maximal(_asynchronous_stmt) = infinity
maximal(_associate_stmt) = infinity
maximal(_assignment_stmt) = infinity
maximal(_assigned_goto_stmt) = infinity
maximal(_assign_stmt) = infinity
maximal(_arithmetic_if_stmt) = infinity
maximal(_allocate_stmt) = infinity
maximal(_allocatable_stmt) = infinity
maximal(_action_stmt_no_assign) = infinity
maximal(_action_stmt) = infinity
maximal(_access_stmt_public) = infinity
maximal(_access_stmt_private) = infinity
maximal(_accept_stmt) = infinity
maximal(_acc) = infinity
follow(xlf_source) = RPAREN
follow(xlf_option) = EOL COMMA
follow(xlf_factor) = EOL
follow(xlf_directive) = EOL
follow(xlf_cycle) = RPAREN
follow(xlf_assertion) = RPAREN COMMA
follow(xlf) = #
follow(write_stmt_head2) = error VARIABLE UPLUS UMINUS SEMICOLON REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR EOL D_NOT DOT DOLLAR DEFINED_OP COMMA CHAR_LITERAL BOZ_LITERAL
follow(write_stmt_head) = LPAREN__io_control_spec
follow(where_stmt) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER FORALL_CONSTRUCT_STMT FORALL END_WHERE_STMT END_WHERE END_FORALL_STMT END_FORALL ELSEWHERE CONSTRUCT_NAME
follow(where_construct_stmt) = error WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(where_construct_head) = END_WHERE_STMT END_WHERE ELSEWHERE
follow(where_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(where_body_construct) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER END_WHERE_STMT END_WHERE ELSEWHERE CONSTRUCT_NAME
follow(wait_stmt_head) = LPAREN
follow(wait_spec) = RPAREN COMMA
follow(use_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(unlock_stmt_head) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN__position_spec LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(union_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(union_decl) = UNION TYPE_SPEC TYPE STRUCTURE RECORD PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER PARAMETER KINDED_TYPE_SPEC END_STRUCTURE END_MAP DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(type_spec_node) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(type_spec_no_character) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(type_spec) = RPAREN
follow(type_param_value) = RPAREN COMMA
follow(type_kw) = STAR PP_MACRO_NAME LPAREN INT_LITERAL IDENTIFIER COMMA COLON_COLON
follow(type_is) = LPAREN
follow(type_guard_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_SELECT END_IF_STMT END_IF END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(type_guard_block) = TYPE_IS END_SELECT CLASS_IS CLASS_DEFAULT
follow(type_declaration_stmt_head) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
follow(type_declaration_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(type_bound_procedure_stmt) = PROCEDURE GENERIC FINAL EOP END_TYPE_STMT END_TYPE
follow(type_bound_procedure_part) = END_TYPE_STMT END_TYPE
follow(type_bound_proc_decl) = error SEMICOLON EOL DOLLAR COMMA
follow(type_bound_proc_binding) = PROCEDURE GENERIC FINAL EOP END_TYPE_STMT END_TYPE
follow(type_bound_generic_stmt) = PROCEDURE GENERIC FINAL EOP END_TYPE_STMT END_TYPE
follow(tuple_head) = VARIABLE UPLUS UMINUS STAR SLASH RPAREN REAL_LITERAL QUESTION PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP COMMA COLON_COLON COLON CHAR_LITERAL BOZ_LITERAL
follow(tuple) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS PERCENT MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN LBRACKET IOSTAT IDENTIFIER GT_EQ GT FUNCTION EXPR ERR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOT DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(tb_contains_stmt) = PROCEDURE PRIVATE GENERIC FINAL END_TYPE_STMT END_TYPE
follow(target_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(sync_stmt_part) = error SEMICOLON EOL DOLLAR
follow(sync_stat_OR_image_set) = RPAREN COMMA
follow(suffix) = error SEMICOLON EOL DOLLAR
follow(substring_range_OR_section_subscript_OR_actual_arg_spec) = RPAREN COMMA
follow(substring_range) = RPAREN
follow(subscriptorder_array) = RPAREN COMMA
follow(subroutine_subprogram0) = PU_TAIL END_SUBROUTINE END CONTAINS
follow(subroutine_subprogram) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(subroutine_stmt_head) = error SEMICOLON LPAREN EOP EOL DOLLAR BIND
follow(subroutine_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(subroutine_head0) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_HEAD STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(subroutine_head) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(subprograms) = PU_TAIL END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_FUNCTION END_FRAGMENT END
follow(subprogram_part) = PU_TAIL END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_FUNCTION END_FRAGMENT END
follow(subprogram) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM STMT PU_TAIL PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION EOP END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_FUNCTION END_FRAGMENT END DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
follow(submodule_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_SUBMODULE END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(submodule_head0) = END_SUBMODULE END CONTAINS
follow(submodule_head) = END_SUBMODULE END
follow(submodule) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(structure_stmt_head) = error SLASH SEMICOLON PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(structure_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(structure_decl) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(stmt_end) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE_SPEC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO GENERIC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND FINAL EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUMERATOR ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_ENUM END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DERIVED_TYPE_DEF_PART DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(specification_stmt_no_access_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(specification_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(specification_part_construct_OR_execution_part_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(specification_part_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(special_token) = #
follow(special_symbol) = #
follow(spec_part_construct_OR_exec_part_constructs) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(simple_attr_stmt_head) = PP_MACRO_NAME IDENTIFIER
follow(simple_attr_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(sign_edit_desc_OR_blank_interp_edit_desc) = VFE_BEGIN SLASH RPAREN PP_MACRO_NAME PP_MACRO_ID PP_MACRO_CONST_CHAR POSITION_EDIT_DESC LPAREN KP_DESC INT_LITERAL IDENTIFIER HOLLERITH DOLLAR DATA_EDIT_DESC COMMA COLON CHAR_LITERAL BACKSLASH
follow(shape_spec) = RPAREN COMMA
follow(sequence_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DERIVED_TYPE_DEF_PART DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(separated_nonempty_list(ioption(END_FRAGMENT),partial_subprogram)) = EOP
follow(separated_nonempty_list(ioption(COMMA__SLASH),namelist_group)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(ioption(COMMA__SLASH),common_spec)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(ioption(COMMA),only)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(ioption(COMMA),omp_clause)) = EOL
follow(separated_nonempty_list(ioption(COMMA),format_item)) = RPAREN
follow(separated_nonempty_list(ioption(COMMA),dec_clause)) = EOL
follow(separated_nonempty_list(ioption(COMMA),data_stmt_set)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(ioption(COMMA),acc_clause)) = EOL
follow(separated_nonempty_list(component_sep,part_ref_)) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IOSTAT IDENTIFIER GT_EQ GT FUNCTION EXPR ERR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(separated_nonempty_list(COMMA__SLASH,record_decl)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,xlf_option)) = EOL
follow(separated_nonempty_list(COMMA,xlf_assertion)) = RPAREN
follow(separated_nonempty_list(COMMA,wait_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,var_or_ref)) = RPAREN EOL
follow(separated_nonempty_list(COMMA,type_bound_proc_decl)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,type_attr_spec)) = COLON_COLON
follow(separated_nonempty_list(COMMA,target_object)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,sync_stat_OR_image_set)) = RPAREN
follow(separated_nonempty_list(COMMA,substring_range_OR_section_subscript_OR_actual_arg_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,subscriptorder_array)) = RPAREN
follow(separated_nonempty_list(COMMA,shape_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,saved_entity)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,rename)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,proc_decl)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,proc_compo_attr_spec)) = COLON_COLON
follow(separated_nonempty_list(COMMA,proc_attr_spec)) = COLON_COLON
follow(separated_nonempty_list(COMMA,position_spec_OR_sync_stat)) = RPAREN
follow(separated_nonempty_list(COMMA,position_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,pointer_object)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,pointee)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,omp_type_spec)) = COLON
follow(separated_nonempty_list(COMMA,omp_list_item)) = RPAREN
follow(separated_nonempty_list(COMMA,ocl_nn)) = RPAREN
follow(separated_nonempty_list(COMMA,ocl_directive)) = EOL
follow(separated_nonempty_list(COMMA,object_)) = RPAREN
follow(separated_nonempty_list(COMMA,named_constant_def)) = error SEMICOLON RPAREN EOL DOLLAR
follow(separated_nonempty_list(COMMA,name)) = error SLASH SEMICOLON RPAREN EOL DOLLAR COMMA__SLASH
follow(separated_nonempty_list(COMMA,lock_variable_OR_lock_stat)) = RPAREN
follow(separated_nonempty_list(COMMA,letter_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,label)) = RPAREN
follow(separated_nonempty_list(COMMA,ioption(substring_range_OR_section_subscript_OR_actual_arg_spec))) = RPAREN
follow(separated_nonempty_list(COMMA,ioption(expr))) = RPAREN
follow(separated_nonempty_list(COMMA,io_item)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,io_control_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,int_literal)) = RPAREN
follow(separated_nonempty_list(COMMA,inquire_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,independent_clause)) = EOL
follow(separated_nonempty_list(COMMA,implicit_spec)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,generic_spec)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,forall_triplet_spec_OR_expr)) = RPAREN
follow(separated_nonempty_list(COMMA,flush_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,expr)) = error SEMICOLON RPAREN PP_MACRO_NAME IDENTIFIER EOL DOLLAR COLON
follow(separated_nonempty_list(COMMA,explicit_shape_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,explicit_coshape_spec)) = RBRACKET
follow(separated_nonempty_list(COMMA,equivalence_set)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,equivalence_object)) = RPAREN
follow(separated_nonempty_list(COMMA,enumerator)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,encode_decode_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,dummy_arg)) = RPAREN
follow(separated_nonempty_list(COMMA,dimension_array)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,define_file_spec)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,deferred_shape_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,deferred_coshape_spec)) = RBRACKET
follow(separated_nonempty_list(COMMA,dec_var_expr)) = RPAREN EOL
follow(separated_nonempty_list(COMMA,dec_list_item)) = RPAREN
follow(separated_nonempty_list(COMMA,dec_level)) = RPAREN
follow(separated_nonempty_list(COMMA,dec_int)) = RPAREN EOL
follow(separated_nonempty_list(COMMA,dec_hint)) = EOL
follow(separated_nonempty_list(COMMA,dec_clause)) = RPAREN
follow(separated_nonempty_list(COMMA,dec_class_rule)) = RPAREN
follow(separated_nonempty_list(COMMA,dec_att)) = COLON_COLON
follow(separated_nonempty_list(COMMA,dec_a)) = EOL
follow(separated_nonempty_list(COMMA,deallocate_stmt_part)) = RPAREN
follow(separated_nonempty_list(COMMA,data_stmt_value)) = SLASH
follow(separated_nonempty_list(COMMA,data_stmt_object)) = SLASH
follow(separated_nonempty_list(COMMA,data_i_do_object_OR_variable)) = EQ
follow(separated_nonempty_list(COMMA,cray_pointer_spec)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,connect_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,component_decl_OR_entity_decl)) = error SEMICOLON EOL DOLLAR COMMA__SLASH
follow(separated_nonempty_list(COMMA,common_block_object)) = error SLASH_SLASH SLASH SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR COMMA__SLASH
follow(separated_nonempty_list(COMMA,collapse_array)) = RPAREN
follow(separated_nonempty_list(COMMA,codimension_decl)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,close_spec)) = RPAREN
follow(separated_nonempty_list(COMMA,case_value_range)) = RPAREN
follow(separated_nonempty_list(COMMA,binding_attr)) = COLON_COLON
follow(separated_nonempty_list(COMMA,bind_entity)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,attr_spec)) = COLON_COLON
follow(separated_nonempty_list(COMMA,association)) = RPAREN
follow(separated_nonempty_list(COMMA,allocate_stmt_part)) = RPAREN
follow(separated_nonempty_list(COMMA,allocatable_array)) = error SEMICOLON EOL DOLLAR
follow(separated_nonempty_list(COMMA,acc_list_item)) = RPAREN
follow(separated_nonempty_list(COMMA,ac_value)) = SLASH_RPAREN RBRACKET
follow(selector_part) = RPAREN
follow(select_type_stmt) = TYPE_IS END_SELECT CLASS_IS CLASS_DEFAULT
follow(select_type_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(select_case_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(save_stmt_head) = error SLASH SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(save_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(rewrite_stmt_head2) = error VARIABLE UPLUS UMINUS SEMICOLON REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR EOL D_NOT DOT DOLLAR DEFINED_OP COMMA CHAR_LITERAL BOZ_LITERAL
follow(rewrite_stmt_head) = LPAREN__io_control_spec
follow(rewind_stmt_head) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN__position_spec LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(result) = error SEMICOLON EOL DOLLAR BIND
follow(rename_OR_only) = error SEMICOLON EOL DOLLAR
follow(rename) = error WRITE SEMICOLON READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER EOP EOL DOLLAR COMMA ASSIGNMENT
follow(record_stmt_head) = SLASH
follow(record_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(record_decl) = error SEMICOLON EOL DOLLAR COMMA__SLASH
follow(real_literal) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(read_stmt_head2) = error VARIABLE UPLUS UMINUS SEMICOLON REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR EOL D_NOT DOT DOLLAR DEFINED_OP COMMA CHAR_LITERAL BOZ_LITERAL
follow(read_stmt_head) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN__io_control_spec LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(read_OR_write_stmt_head2) = error VARIABLE UPLUS UMINUS SEMICOLON REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR EOL D_NOT DOT DOLLAR DEFINED_OP COMMA CHAR_LITERAL BOZ_LITERAL
follow(read_OR_write_stmt_head) = LPAREN__io_control_spec
follow(read_OR_print_stmt_head) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(program_unit) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(program_stmt_head) = PP_MACRO_NAME IDENTIFIER
follow(program_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(program) = EOP EOF
follow(procedure_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE_SPEC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(procedure_kw) = PP_MACRO_NAME LPAREN IDENTIFIER COMMA COLON_COLON
follow(procedure_declaration_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(proc_interface) = RPAREN
follow(proc_decl) = error SEMICOLON EOL DOLLAR COMMA
follow(proc_compo_attr_spec) = COMMA COLON_COLON
follow(proc_attr_spec) = COMMA COLON_COLON
follow(proc_attr_part) = PP_MACRO_NAME IDENTIFIER
follow(private_stmt) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY KINDED_TYPE_SPEC EOP END_TYPE_STMT END_TYPE DOUBLE_PRECISION DOUBLE_COMPLEX DERIVED_TYPE_DEF_PART CONTAINS CLASS CHARACTER BYTE
follow(private_sequence_stmt) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY KINDED_TYPE_SPEC EOP END_TYPE_STMT END_TYPE DOUBLE_PRECISION DOUBLE_COMPLEX DERIVED_TYPE_DEF_PART CONTAINS CLASS CHARACTER BYTE
follow(primary) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(prefix_spec_no_type_spec) = TYPE_SPEC TYPE SUBROUTINE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(pp_token) = #
follow(pp_macro_id) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(pp_macro_const) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(pp_ident) = #
follow(pp_directive) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DERIVED_TYPE_DEF_PART DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(pp_cond) = #
follow(pp_branch) = #
follow(position_spec) = RPAREN COMMA
follow(pointer_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(pointer_assignment_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(pointee) = error SEMICOLON RPAREN EOL DOLLAR COMMA
follow(partial_variable) = #
follow(partial_type_spec) = #
follow(partial_type_declaration_stmt) = #
follow(partial_type_bound_proc_part) = #
follow(partial_subroutine_stmt_head) = #
follow(partial_subroutine_head) = #
follow(partial_subprograms) = #
follow(partial_subprogram) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM STMT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION EOP END_FRAGMENT DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
follow(partial_stmts) = #
follow(partial_specification_part) = #
follow(partial_spec__exec) = #
follow(partial_pu_tail) = #
follow(partial_program_unit) = #
follow(partial_program) = #
follow(partial_onlys) = #
follow(partial_interface_spec) = #
follow(partial_function_stmt_head) = #
follow(partial_function_stmt) = #
follow(partial_function_head) = #
follow(partial_expr) = #
follow(partial_execution_part) = #
follow(partial_derived_type_def_part) = #
follow(partial_data_stmt_sets) = #
follow(partial_case_block) = #
follow(partial_assignment_stmt) = #
follow(partial_action_stmt) = #
follow(part_ref_) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS PERCENT MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IOSTAT IDENTIFIER GT_EQ GT FUNCTION EXPR ERR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOT DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(part_name) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS PERCENT MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN LBRACKET IOSTAT IDENTIFIER GT_EQ GT FUNCTION EXPR ERR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOT DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(parameter_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(parameter_format_entry_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(or_operand) = error VFE_END SUBROUTINE SLASH_RPAREN SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL D_OR D_NEQV D_EQV D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(optional_stmt_head) = PP_MACRO_NAME IDENTIFIER
follow(optional_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(operator_defined_op) = error WRITE SEMICOLON READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER EQ_GT EOP EOL DOLLAR COMMA ASSIGNMENT
follow(open_stmt_head) = LPAREN
follow(opclist(substring_range_OR_section_subscript_OR_actual_arg_spec)) = RPAREN
follow(opclist(expr)) = RPAREN
follow(onlys) = EOP
follow(only_head) = COLON
follow(only) = error WRITE SEMICOLON READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER EOP EOL DOLLAR COMMA ASSIGNMENT
follow(omp_token) = #
follow(omp_reduction_op) = COLON
follow(omp_policy) = RPAREN
follow(omp_nowait) = error OMP_UNTIED OMP_UNIFORM OMP_THREAD_LIMIT OMP_SIMDLEN OMP_SHARED OMP_SCHEDULE OMP_SAFELEN OMP_REDUCTION OMP_PROC_BIND OMP_PRIVATE OMP_ORDERED OMP_NUM_THREADS OMP_NUM_TEAMS OMP_NOWAIT OMP_NOTINBRANCH OMP_MERGEABLE OMP_MAP OMP_LINEAR OMP_LASTPRIVATE OMP_INBRANCH OMP_IF OMP_FIRSTPRIVATE OMP_FINAL OMP_DIST_SCHEDULE OMP_DEVICE OMP_DEPEND OMP_DEFAULT OMP_COPYPRIVATE OMP_COPYIN OMP_COLLAPSE OMP_ALIGNED EOL COMMA
follow(omp_map_type) = COLON
follow(omp_list) = RPAREN
follow(omp_kind) = RPAREN COMMA
follow(omp_initializer_clause) = EOL
follow(omp_if_clause) = error OMP_UNTIED OMP_UNIFORM OMP_THREAD_LIMIT OMP_SIMDLEN OMP_SHARED OMP_SCHEDULE OMP_SAFELEN OMP_REDUCTION OMP_PROC_BIND OMP_PRIVATE OMP_ORDERED OMP_NUM_THREADS OMP_NUM_TEAMS OMP_NOWAIT OMP_NOTINBRANCH OMP_MERGEABLE OMP_MAP OMP_LINEAR OMP_LASTPRIVATE OMP_INBRANCH OMP_IF OMP_FIRSTPRIVATE OMP_FINAL OMP_DIST_SCHEDULE OMP_DEVICE OMP_DEPEND OMP_DEFAULT OMP_COPYPRIVATE OMP_COPYIN OMP_COLLAPSE OMP_ALIGNED EOL COMMA
follow(omp_directive) = EOL
follow(omp_dependence_type) = COLON
follow(omp_construct_type) = OMP_IF EOL
follow(omp_combiner) = RPAREN
follow(omp_clause) = error OMP_UNTIED OMP_UNIFORM OMP_THREAD_LIMIT OMP_SIMDLEN OMP_SHARED OMP_SCHEDULE OMP_SAFELEN OMP_REDUCTION OMP_PROC_BIND OMP_PRIVATE OMP_ORDERED OMP_NUM_THREADS OMP_NUM_TEAMS OMP_NOWAIT OMP_NOTINBRANCH OMP_MERGEABLE OMP_MAP OMP_LINEAR OMP_LASTPRIVATE OMP_INBRANCH OMP_IF OMP_FIRSTPRIVATE OMP_FINAL OMP_DIST_SCHEDULE OMP_DEVICE OMP_DEPEND OMP_DEFAULT OMP_COPYPRIVATE OMP_COPYIN OMP_COLLAPSE OMP_ALIGNED EOL COMMA
follow(omp_attr) = RPAREN
follow(omp_atomic) = OMP_SEQ_CST EOL
follow(omp) = #
follow(ocl_tuple) = EOL COMMA
follow(ocl_scope) = EOL COMMA
follow(ocl_nn__colon) = INT_LITERAL IDENTIFIER
follow(ocl_nn) = RPAREN COMMA COLON
follow(ocl_directive) = EOL COMMA
follow(ocl) = #
follow(object_) = RPAREN EQ_GT COMMA
follow(null_ref) = error SLASH SEMICOLON EOL DOLLAR COMMA__SLASH COMMA
follow(nonempty_list(subroutine_head0)) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(nonempty_list(stmt)) = EOP
follow(nonempty_list(program_unit)) = EOP EOF
follow(nonempty_list(prefix_spec_no_type_spec)) = TYPE_SPEC TYPE SUBROUTINE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC FUNCTION DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(nonempty_list(name)) = error STAR SLASH SEMICOLON LPAREN LBRACKET EQ_GT EQ EOL DOLLAR COMMA__SLASH COMMA
follow(nonempty_list(map_decl)) = END_UNION
follow(nonempty_list(function_head0)) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_IF_STMT END_IF END_FUNCTION END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(nonempty_list(field_decl)) = END_STRUCTURE END_MAP
follow(nonempty_list(enumerator_def_stmt)) = END_ENUM
follow(nonempty_list(dec_option)) = EOL
follow(nonempty_list(data_stmt_set__comma_opt)) = EOP
follow(nonempty_list(comma__attr_spec)) = COLON_COLON
follow(nonempty_list(case_stmt__block)) = EOP
follow(nonempty_list(case_block)) = END_SELECT_STMT END_SELECT
follow(nonempty_list(TYPE_SPEC)) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(nonempty_list(SEMICOLON)) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE_SPEC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO GENERIC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND FINAL EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOL EOF ENUMERATOR ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_ENUM END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DERIVED_TYPE_DEF_PART DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(namelist_stmt_head) = SLASH
follow(namelist_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(namelist_group) = error SLASH SEMICOLON EOL DOLLAR COMMA__SLASH
follow(named_constant_def) = error SEMICOLON RPAREN EOL DOLLAR COMMA
follow(name) = error WRITE VFE_END VFE_BEGIN SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN READ RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_CONST_CHAR POSITION_EDIT_DESC PLUS PERCENT OPERATOR ONLY_ MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN LBRACKET KP_DESC IOSTAT INT_LITERAL IDENTIFIER HOLLERITH GT_EQ GT FUNCTION EXPR ERR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOT DOLLAR DEFINED_OP DATA_EDIT_DESC COMMA__SLASH COMMA COLON_COLON COLON CHAR_LITERAL BACKSLASH ASSIGNMENT #
follow(mult_operand) = error VFE_END SUBROUTINE STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(module_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_MODULE END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(module_nature_part) = PP_MACRO_NAME IDENTIFIER
follow(module_nature) = COLON_COLON
follow(module_) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(module0_) = END_MODULE END CONTAINS
follow(masked_or_unmasked_elsewhere_stmt) = error WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(map_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(map_decl) = MAP END_UNION
follow(main_program) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(main) = #
follow(lparen__omp_list__rparen) = EOL
follow(lparen__name__rparen) = EOL
follow(loop_control) = error SEMICOLON EOL DOLLAR
follow(logical_literal) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(lock_variable_OR_lock_stat) = RPAREN COMMA
follow(list(where_body_construct)) = END_WHERE_STMT END_WHERE ELSEWHERE
follow(list(type_guard_block)) = END_SELECT
follow(list(type_bound_proc_binding)) = EOP END_TYPE_STMT END_TYPE
follow(list(subprogram)) = PU_TAIL END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_FUNCTION END_FRAGMENT END
follow(list(program_unit)) = EOP
follow(list(private_sequence_stmt)) = TYPE_SPEC TYPE PROCEDURE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC EOP DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(list(prefix_spec_no_type_spec)) = SUBROUTINE FUNCTION
follow(list(masked_or_unmasked_elsewhere_block)) = END_WHERE_STMT END_WHERE
follow(list(interface_specification)) = EOP END_INTERFACE
follow(list(forall_body_construct)) = END_FORALL_STMT END_FORALL
follow(list(derived_type_def_content)) = END_TYPE_STMT END_TYPE CONTAINS
follow(list(component_def_stmt)) = EOP
follow(list(comma__attr_spec)) = COLON_COLON
follow(linda_typeof) = LPAREN
follow(linda_formal) = RPAREN COMMA
follow(linda_call) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(linda_anonymous_formal_head) = TYPE_SPEC TYPE SLASH PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(linda_anonymous_formal) = RPAREN COMMA COLON
follow(level_5_expr) = error VFE_END SUBROUTINE SLASH_RPAREN SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL D_NEQV D_EQV DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(level_4_expr) = error VFE_END SUBROUTINE SLASH_RPAREN SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL D_OR D_NEQV D_EQV D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(level_3_expr) = error VFE_END SUBROUTINE SLASH_SLASH SLASH_RPAREN SLASH_EQ SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LT_EQ LT LPAREN__IMPLICIT IDENTIFIER GT_EQ GT FUNCTION EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(level_2_expr) = error VFE_END SUBROUTINE SLASH_SLASH SLASH_RPAREN SLASH_EQ SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(level_1_expr) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(letter_spec) = RPAREN COMMA
follow(length_selector) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(language_binding_spec_head) = LPAREN
follow(language_binding_spec) = error SLASH SEMICOLON RESULT PP_MACRO_NAME IDENTIFIER EOL DOLLAR COMMA COLON_COLON
follow(kind_selector) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(ioctl_spec_kw) = EQ
follow(io_control_spec) = RPAREN COMMA
follow(intrinsic_type_spec) = RPAREN
follow(intrinsic_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(intrinsic_op) = RPAREN
follow(interface_stmt) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PROCEDURE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC INTERFACE_SPEC FUNCTION_STMT_HEAD FUNCTION END_INTERFACE DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(interface_specification) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PROCEDURE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC INTERFACE_SPEC FUNCTION_STMT_HEAD FUNCTION EOP END_INTERFACE DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(interface_body) = TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE PROCEDURE PREFIX_SPEC PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER MODULE KINDED_TYPE_SPEC INTERFACE_SPEC FUNCTION_STMT_HEAD FUNCTION EOP END_INTERFACE DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(interface_block) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(interface) = error WRITE SEMICOLON READ PP_MACRO_NAME OPERATOR IDENTIFIER EOL DOLLAR ASSIGNMENT
follow(intent_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(intent_spec) = RPAREN
follow(intent) = LPAREN
follow(int_literal) = error WHILE VFE_END VFE_BEGIN VARIABLE TO SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP CONCURRENT COMMA__SLASH COMMA COLON_COLON COLON
follow(inquire_stmt_head) = LPAREN
follow(inquire_spec) = RPAREN COMMA
follow(initialization) = error SEMICOLON EOL DOLLAR COMMA__SLASH COMMA
follow(independent_clause) = EOL COMMA
follow(import_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(implicit_stmt_head) = TYPE_SPEC TYPE PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_IDENTIFIER NONE KINDED_TYPE_SPEC DOUBLE_PRECISION DOUBLE_COMPLEX CLASS CHARACTER BYTE
follow(implicit_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(implicit_spec) = error SEMICOLON EOL DOLLAR COMMA
follow(implicit_part_stmt_proper) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(implicit_part_stmt_OR_declaration_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(image_selector) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS PERCENT MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IOSTAT IDENTIFIER GT_EQ GT FUNCTION EXPR ERR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOT DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(if_then_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(if__lparen__expr__rparen) = WRITE WHERE WAIT VARIABLE UNLOCK TYPE THEN SYNC STOP REWRITE REWIND RETURN READ PRINT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER PAUSE OPEN NULLIFY LOCK INT_LITERAL INQUIRE IF IDENTIFIER GO_TO FORALL FLUSH FIND EXIT ERROR END_FILE ENCODE DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CLOSE CALL BACKSPACE ASSIGN ALLOCATE ACTION_STMT ACCEPT
follow(if__lparen__expr) = RPAREN
follow(if_) = LPAREN
follow(high_or_low) = RPAREN
follow(generic_spec) = error WRITE SEMICOLON READ PP_MACRO_NAME OPERATOR ONLY_ IDENTIFIER EQ_GT EOP EOL DOLLAR COMMA ASSIGNMENT
follow(function_subprogram0) = PU_TAIL END_FUNCTION END CONTAINS
follow(function_subprogram) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(function_stmt_head0) = LPAREN EOP
follow(function_stmt_head) = RPAREN
follow(function_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(function_head0) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_HEAD FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_IF_STMT END_IF END_FUNCTION END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(function_head) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_IF_STMT END_IF END_FUNCTION END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(fragment) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(format_stmt_head) = LPAREN
follow(format_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(format_specification) = error SEMICOLON EOL DOLLAR
follow(format_item) = VFE_BEGIN SLASH RPAREN PP_MACRO_NAME PP_MACRO_ID PP_MACRO_CONST_CHAR POSITION_EDIT_DESC LPAREN KP_DESC INT_LITERAL IDENTIFIER HOLLERITH DOLLAR DATA_EDIT_DESC COMMA COLON CHAR_LITERAL BACKSLASH
follow(format_entry_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(format) = error SEMICOLON RPAREN EOL DOLLAR COMMA
follow(forall_triplet_spec_OR_expr) = RPAREN COMMA
follow(forall_stmt) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER FORALL_CONSTRUCT_STMT FORALL END_FORALL_STMT END_FORALL CONSTRUCT_NAME
follow(forall_header) = error VARIABLE SEMICOLON PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(forall_construct_stmt) = error WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(forall_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(forall_body_construct) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER FORALL_CONSTRUCT_STMT FORALL END_FORALL_STMT END_FORALL CONSTRUCT_NAME
follow(forall_assignment_stmt) = error WHERE_CONSTRUCT_STMT WHERE VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER FORALL_CONSTRUCT_STMT FORALL END_FORALL_STMT END_FORALL CONSTRUCT_NAME
follow(flush_stmt_head) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN__flush_spec LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(flush_spec) = RPAREN COMMA
follow(find_stmt_head) = LPAREN__io_control_spec
follow(final_procedure_stmt) = PROCEDURE GENERIC FINAL EOP END_TYPE_STMT END_TYPE
follow(expr) = error VFE_END SUBROUTINE SLASH_RPAREN SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(explicit_shape_spec) = RPAREN COMMA
follow(explicit_coshape_spec) = RBRACKET COMMA
follow(execution_part_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(executable_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(equivalence_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(equivalence_set) = error SEMICOLON EOL DOLLAR COMMA
follow(equivalence_object) = RPAREN COMMA
follow(equiv_operand) = error VFE_END SUBROUTINE SLASH_RPAREN SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL D_OR D_NEQV D_EQV DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(enumerator_def_stmt) = ENUMERATOR END_ENUM
follow(enumerator) = error SEMICOLON EOL DOLLAR COMMA
follow(enum_def_stmt) = ENUMERATOR
follow(enum_def) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(enum_cst) = error SEMICOLON EOL DOLLAR COMMA
follow(entry_stmt_sub) = RPAREN
follow(entry_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(entity_name) = error STAR SLASH SEMICOLON LPAREN LBRACKET EQ_GT EQ EOL DOLLAR COMMA__SLASH COMMA
follow(endfile_stmt_head) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN__position_spec LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(end_where_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_union_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(end_type_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_subroutine_stmt_head) = error SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(end_submodule_stmt_head) = error SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(end_structure_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_stmt_p) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(end_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE_SPEC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(end_select_type_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(end_select_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_program_stmt_head) = error SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(end_module_stmt_head) = error SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(end_map_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(end_interface_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_interface) = error WRITE SEMICOLON READ PP_MACRO_NAME OPERATOR IDENTIFIER EOL DOLLAR ASSIGNMENT
follow(end_if_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_function_stmt_head) = error SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(end_forall_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_enum_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(end_do_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(end_critical_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(end_block_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(end_block_data_stmt_head) = error SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(end_associate_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(encode_decode_stmt_head) = LPAREN__position_spec
follow(else_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(else_if_stmt_head) = RPAREN
follow(else_if_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(else_if) = LPAREN
follow(dummy_arg) = RPAREN COMMA
follow(dtype_args) = RPAREN
follow(do_stmt_head) = error WHILE VARIABLE SEMICOLON PP_MACRO_VARIABLE PP_MACRO_NAME INT_LITERAL IDENTIFIER EOL DOLLAR CONCURRENT COMMA
follow(do_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(directive) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(dimension_stmt_head) = PP_MACRO_NAME IDENTIFIER COLON_COLON
follow(dimension_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(dimension_array) = error SEMICOLON RPAREN EOL DOLLAR COMMA
follow(derived_type_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DERIVED_TYPE_DEF_PART DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(derived_type_def_part) = END_TYPE_STMT END_TYPE
follow(derived_type_def_content) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY KINDED_TYPE_SPEC END_TYPE_STMT END_TYPE DOUBLE_PRECISION DOUBLE_COMPLEX DERIVED_TYPE_DEF_PART CONTAINS CLASS CHARACTER BYTE
follow(derived_type_def) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(delete_stmt_head) = LPAREN__position_spec
follow(define_file_spec) = error SEMICOLON EOL DOLLAR COMMA
follow(declaration_construct_proper) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(decl_type_spec_proper) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(decl_type_spec) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(dec_var_expr) = RPAREN EOL COMMA
follow(dec_prefetch_hint) = EOL
follow(dec_p) = SLASH EOL
follow(dec_option) = SLASH EOL
follow(dec_op) = COLON
follow(dec_loop_count) = EOL
follow(dec_list_p) = RPAREN EOL DEC_VECTORLENGTHFOR DEC_VECTORLENGTH DEC_VECREMAINDER DEC_UNIFORM DEC_UNALIGNED DEC_TEMPORAL DEC_REDUCTION DEC_PROCESSOR DEC_PRIVATE DEC_NUM_THREADS DEC_NOVECREMAINDER DEC_NONTEMPORAL DEC_NOMASK DEC_NOASSERT DEC_MASK DEC_LINEAR DEC_LEVEL DEC_LASTPRIVATE DEC_FIRSTPRIVATE DEC_FACTOR DEC_ASSERT DEC_ALWAYS DEC_ALIGNED COMMA COLON_COLON
follow(dec_list_item) = RPAREN COMMA
follow(dec_list) = RPAREN
follow(dec_level) = RPAREN COMMA
follow(dec_iop) = COLON
follow(dec_int_spec) = EOL COMMA
follow(dec_int) = RPAREN EOL COMMA COLON
follow(dec_hint) = EOL COMMA
follow(dec_directive) = EOL
follow(dec_data_type) = RPAREN
follow(dec_clause) = RPAREN EOL DEC_VECTORLENGTHFOR DEC_VECTORLENGTH DEC_VECREMAINDER DEC_UNIFORM DEC_UNALIGNED DEC_TEMPORAL DEC_REDUCTION DEC_PROCESSOR DEC_PRIVATE DEC_NUM_THREADS DEC_NOVECREMAINDER DEC_NONTEMPORAL DEC_NOMASK DEC_NOASSERT DEC_MASK DEC_LINEAR DEC_LEVEL DEC_LASTPRIVATE DEC_FIRSTPRIVATE DEC_FACTOR DEC_ASSERT DEC_ALWAYS DEC_ALIGNED COMMA COLON_COLON
follow(dec_class_rule) = SLASH RPAREN EOL COMMA
follow(dec_att) = COMMA COLON_COLON
follow(dec_a) = EOL COMMA
follow(dec) = #
follow(data_stmt_value) = SLASH COMMA
follow(data_stmt_set__comma_opt) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER EOP DATA_STMT_SET
follow(data_stmt_set) = error VARIABLE SEMICOLON PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER EOP EOL DOLLAR DATA_STMT_SET COMMA
follow(data_stmt_repeat__star) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PLUS NULL MINUS LPAREN LOGICAL_LITERAL INT_LITERAL IDENTIFIER HOLLERITH DOT CHAR_LITERAL BOZ_LITERAL
follow(data_stmt_repeat) = STAR SLASH COMMA
follow(data_stmt_object) = SLASH COMMA
follow(data_stmt_head) = VARIABLE PP_MACRO_VARIABLE PP_MACRO_NAME LPAREN IDENTIFIER DATA_STMT_SET
follow(data_stmt_constant) = SLASH COMMA
follow(data_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(data_ref_) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IOSTAT IDENTIFIER GT_EQ GT FUNCTION EXPR ERR EQ_GT EQ_EQ EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(data_implied_do) = SLASH EQ COMMA
follow(data_i_do_object_OR_variable) = EQ COMMA
follow(critical_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END_CRITICAL ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(critical_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(cray_pointer_spec) = error SEMICOLON EOL DOLLAR COMMA
follow(control_edit_desc) = VFE_BEGIN SLASH RPAREN PP_MACRO_NAME PP_MACRO_ID PP_MACRO_CONST_CHAR POSITION_EDIT_DESC LPAREN KP_DESC INT_LITERAL IDENTIFIER HOLLERITH DOLLAR DATA_EDIT_DESC COMMA COLON CHAR_LITERAL BACKSLASH
follow(contains_stmt) = error XLF TYPE_SPEC TYPE SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBPROGRAM PU_TAIL PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY OMP OCL MODULE KINDED_TYPE_SPEC FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION END_SUBROUTINE END_SUBMODULE END_PROGRAM END_MODULE END_FUNCTION END_FRAGMENT END DOUBLE_PRECISION DOUBLE_COMPLEX DEC CLASS CHARACTER BYTE ACC
follow(construct_name__colon) = WHERE SELECT_TYPE SELECT_CASE IF FORALL DO CRITICAL BLOCK ASSOCIATE
follow(constant) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(connect_spec_kw) = EQ
follow(connect_spec) = RPAREN COMMA
follow(computed_goto_stmt_head) = LPAREN__GO_TO
follow(component_sep) = PP_MACRO_NAME IDENTIFIER
follow(component_def_stmt) = TYPE_SPEC TYPE SEQUENCE PROCEDURE PRIVATE PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_TYPE_SPEC PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY KINDED_TYPE_SPEC EOP END_TYPE_STMT END_TYPE DOUBLE_PRECISION DOUBLE_COMPLEX DERIVED_TYPE_DEF_PART CONTAINS CLASS CHARACTER BYTE
follow(component_decl_OR_entity_decl) = error SEMICOLON EOL DOLLAR COMMA__SLASH COMMA
follow(component_attr_part) = PP_MACRO_VARIABLE PP_MACRO_NAME IDENTIFIER
follow(complex_literal) = SLASH COMMA
follow(common_stmt_head) = SLASH_SLASH SLASH PP_MACRO_NAME IDENTIFIER
follow(common_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(common_spec) = error SLASH_SLASH SLASH SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR COMMA__SLASH
follow(common_name_part) = PP_MACRO_NAME IDENTIFIER
follow(common_block_object) = error SLASH_SLASH SLASH SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR COMMA__SLASH COMMA
follow(comma__module_nature) = COLON_COLON
follow(colon__name) = RPAREN
follow(collapse_array) = RPAREN COMMA
follow(codimension_stmt_head) = PP_MACRO_NAME IDENTIFIER
follow(codimension_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(codimension_decl) = error SEMICOLON EOL DOLLAR COMMA
follow(coarray_spec_part) = error STAR SLASH SEMICOLON EQ_GT EQ EOL DOLLAR COMMA__SLASH COMMA COLON_COLON
follow(coarray_spec) = RBRACKET
follow(close_stmt_head) = LPAREN
follow(close_spec1) = RPAREN COMMA
follow(close_spec) = RPAREN COMMA
follow(class_is) = LPAREN
follow(character) = SUBROUTINE STAR RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT LPAREN IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(char_selector_no_length_selector) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(char_selector) = SUBROUTINE RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL COMMA COLON_COLON COLON
follow(char_literal) = error VFE_END VFE_BEGIN SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_CONST_CHAR POSITION_EDIT_DESC PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN KP_DESC INT_LITERAL IDENTIFIER HOLLERITH GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP DATA_EDIT_DESC COMMA__SLASH COMMA COLON_COLON COLON CHAR_LITERAL BACKSLASH
follow(char_length_part) = error SUBROUTINE SLASH SEMICOLON RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EQ_GT EQ EOP EOL DOLLAR COMMA__SLASH COMMA COLON_COLON COLON
follow(char_length) = error SUBROUTINE SLASH SEMICOLON RPAREN PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EQ_GT EQ EOP EOL DOLLAR COMMA__SLASH COMMA COLON_COLON COLON
follow(case_value_range) = RPAREN COMMA
follow(case_stmt__block) = EOP END_SELECT_STMT END_SELECT CASE_BLOCK CASE
follow(case_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(case_selector) = error SEMICOLON PP_MACRO_NAME IDENTIFIER EOL DOLLAR
follow(case_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(case_block) = END_SELECT_STMT END_SELECT CASE_BLOCK CASE
follow(boz_literal) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT LPAREN IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(block_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END_BLOCK ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(block_data_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END_BLOCK_DATA END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(block_data0) = END_BLOCK_DATA END
follow(block_data) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC SUBROUTINE_STMT_HEAD SUBROUTINE_HEAD SUBROUTINE SUBMODULE STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROGRAM_UNIT PROGRAM PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP EOF ENUM ENTRY END_PROGRAM END_IF_STMT END_IF END_FRAGMENT END_FILE END_DO_STMT END_DO END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK_DATA BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(block_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(block) = TYPE_IS EOP END_SELECT_STMT END_SELECT END_CRITICAL END_ASSOCIATE CLASS_IS CLASS_DEFAULT CASE_BLOCK CASE
follow(binding_private_stmt) = PROCEDURE GENERIC FINAL EOP END_TYPE_STMT END_TYPE
follow(binding_attr_part) = PP_MACRO_NAME IDENTIFIER
follow(binding_attr) = COMMA COLON_COLON
follow(bind_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(backspace_stmt_head) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN__position_spec LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(attr_spec) = COMMA COLON_COLON
follow(asynchronous_stmt_head) = PP_MACRO_NAME IDENTIFIER
follow(asynchronous_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(association) = RPAREN COMMA
follow(associate_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE ENUM ENTRY END_IF_STMT END_IF END_FILE END_DO_STMT END_DO END_ASSOCIATE ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(associate_construct) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(assignment_stmt_head) = VARIABLE UPLUS UMINUS REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(assignment_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(array_spec) = RPAREN
follow(array_constructor_head) = VARIABLE UPLUS UMINUS TYPE_SPEC TYPE REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET KINDED_TYPE_SPEC INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOUBLE_PRECISION DOUBLE_COMPLEX DOT DEFINED_OP CLASS CHAR_LITERAL CHARACTER BYTE BOZ_LITERAL
follow(array_constructor) = error VFE_END SUBROUTINE STAR_STAR STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(apollo_pointer_spec) = error SEMICOLON EOL DOLLAR
follow(and_operand) = error VFE_END SUBROUTINE SLASH_RPAREN SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME MODULE LPAREN__IMPLICIT IDENTIFIER FUNCTION EOP EOL D_OR D_NEQV D_EQV D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(alt_return_spec) = RPAREN COMMA
follow(allocate_) = LPAREN
follow(allocatable_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(add_operand) = error VFE_END SUBROUTINE STAR SLASH_SLASH SLASH_RPAREN SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PREFIX_SPEC PP_MACRO_VARIABLE PP_MACRO_NAME PLUS MODULE MINUS LT_EQ LT LPAREN__IMPLICIT IDENTIFIER GT_EQ GT FUNCTION EXPR EQ_EQ EOP EOL D_OR D_NEQV D_NE D_LT D_LE D_GT D_GE D_EQV D_EQ D_AND DOLLAR DEFINED_OP COMMA__SLASH COMMA COLON_COLON COLON
follow(action_stmt_no_assign) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(action_stmt) = WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN READ PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_IDENTIFIER POINTER PAUSE PARAMETER OPTIONAL OPEN NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTENT INQUIRE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_STRUCTURE END_SELECT_STMT END_SELECT END_MAP END_INTERFACE END_IF_STMT END_IF END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEALLOCATE CYCLE CONTINUE CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS CHARACTER CASE CALL BYTE BIND BACKSPACE ASYNCHRONOUS ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT
follow(access_stmt_public) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(access_stmt_private) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK UNION TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SEQUENCE SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PREFIX_SPEC PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST MODULE MAP LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FUNCTION_STMT_HEAD FUNCTION FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_WHERE_STMT END_WHERE END_UNION END_TYPE_STMT END_TYPE END_SUBROUTINE END_SUBMODULE END_STRUCTURE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_MAP END_INTERFACE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FORALL_STMT END_FORALL END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSEWHERE ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACTION_STMT ACCEPT ACC ABSTRACT
follow(access_stmt) = error XLF WRITE WHERE_CONSTRUCT_STMT WHERE WAIT VIRTUAL VARIABLE USE UNLOCK TYPE_SPEC TYPE_IS TYPE TARGET SYNC STRUCTURE STOP STMT SPEC_PART_CONSTRUCT SIMPLE_ATTR SELECT_TYPE SELECT_CASE_STMT SELECT_CASE SAVE REWRITE REWIND RETURN RECORD READ PU_TAIL PUBLIC PROCEDURE PRIVATE PRINT PP_UNKNOWN__REST PP_UNDEF__IDENT PP_MACRO_WRITE PP_MACRO_VARIABLE PP_MACRO_TYPE_SPEC PP_MACRO_STMT PP_MACRO_READ_WRITE PP_MACRO_READ_PRINT PP_MACRO_NAME PP_MACRO_ID_RW PP_MACRO_ID PP_ISSUE__MESG PP_INCLUDE__FILE PP_IDENTIFIER PP_DEFINE__IDENT__BODY POINTER PAUSE PARAMETER OPTIONS__OPTS OPTIONAL OPEN OMP OCL NULLIFY NAMELIST LOCK KINDED_TYPE_SPEC INTRINSIC INTERFACE INTENT INQUIRE INCLUDE__FILE IMPORT IMPLICIT IF_THEN_STMT IF IDENTIFIER GO_TO FORMAT FORALL_CONSTRUCT_STMT FORALL FLUSH FIND EXIT EXEC_PART_CONSTRUCT ERROR EQUIVALENCE EOP ENUM ENTRY END_SUBROUTINE END_SUBMODULE END_SELECT_STMT END_SELECT END_PROGRAM END_MODULE END_IF_STMT END_IF END_FUNCTION END_FRAGMENT END_FILE END_DO_STMT END_DO END_CRITICAL END_BLOCK_DATA END_BLOCK END_ASSOCIATE END ENCODE ELSE_IF ELSE DO_STMT DOUBLE_PRECISION DOUBLE_COMPLEX DO DIMENSION DERIVED_TYPE_STMT DELETE DEFINE_FILE DECODE DEC DEALLOCATE DATA CYCLE CRITICAL CONTINUE CONTAINS CONSTRUCT_NAME COMMON CODIMENSION CLOSE CLASS_IS CLASS_DEFAULT CLASS CHARACTER CASE_BLOCK CASE CALL BYTE BLOCK BIND BACKSPACE ASYNCHRONOUS ASSOCIATE ASSIGN ALLOCATE ALLOCATABLE ACCEPT ACC ABSTRACT
follow(accept_stmt_head) = VARIABLE UPLUS UMINUS STAR REAL_LITERAL PP_MACRO_VARIABLE PP_MACRO_NAME PP_MACRO_ID PP_MACRO_EXPR PP_MACRO_CONST_INT PP_MACRO_CONST_CHAR PP_MACRO_CONST PP_IDENTIFIER PLUS MINUS LPAREN_SLASH LPAREN LOGICAL_LITERAL LBRACKET INT_LITERAL IDENTIFIER HOLLERITH EXPR D_NOT DOT DEFINED_OP CHAR_LITERAL BOZ_LITERAL
follow(acc_op) = COLON
follow(acc_list_item) = RPAREN COMMA
follow(acc_list) = RPAREN
follow(acc_iop) = COLON
follow(acc_directive) = EOL
follow(acc_clause) = EOL COMMA ACC_WORKER ACC_WAIT ACC_VECTOR_LENGTH ACC_VECTOR ACC_USE_DEVICE ACC_TILE ACC_SEQ ACC_SELF ACC_REDUCTION ACC_PRIVATE ACC_PRESENT_OR_CREATE ACC_PRESENT_OR_COPYOUT ACC_PRESENT_OR_COPYIN ACC_PRESENT_OR_COPY ACC_PRESENT ACC_PCREATE ACC_PCOPYOUT ACC_PCOPYIN ACC_PCOPY ACC_NUM_WORKERS ACC_NUM_GANGS ACC_NOHOST ACC_LINK ACC_INDEPENDENT ACC_IF ACC_HOST ACC_GANG ACC_FIRSTPRIVATE ACC_DTYPE ACC_DEVICE_TYPE ACC_DEVICE_RESIDENT ACC_DEVICEPTR ACC_DEVICE ACC_DELETE ACC_DEFAULT ACC_CREATE ACC_COPYOUT ACC_COPYIN ACC_COPY ACC_COLLAPSE ACC_BIND ACC_AUTO ACC_ASYNC
follow(acc_atomic) = EOL
follow(acc) = #
follow(ac_spec) = SLASH_RPAREN RBRACKET
follow(_xlf) = EOL
follow(_write_stmt) = error SEMICOLON EOL DOLLAR
follow(_where_stmt) = error SEMICOLON EOL DOLLAR
follow(_where_construct_stmt) = error SEMICOLON EOL DOLLAR
follow(_wait_stmt) = error SEMICOLON EOL DOLLAR
follow(_use_stmt) = error SEMICOLON EOL DOLLAR
follow(_unlock_stmt) = error SEMICOLON EOL DOLLAR
follow(_union_stmt) = error SEMICOLON EOL DOLLAR
follow(_type_stmt) = error SEMICOLON EOL DOLLAR
follow(_type_guard_stmt) = error SEMICOLON EOL DOLLAR
follow(_type_declaration_stmt) = error SEMICOLON EOL DOLLAR
follow(_type_bound_procedure_stmt) = error SEMICOLON EOL DOLLAR
follow(_type_bound_generic_stmt) = error SEMICOLON EOL DOLLAR
follow(_tuple) = RPAREN
follow(_tb_contains_stmt) = error SEMICOLON EOL DOLLAR
follow(_target_stmt) = error SEMICOLON EOL DOLLAR
follow(_sync_xxx_stmt) = error SEMICOLON EOL DOLLAR
follow(_subroutine_subprogram) = PU_TAIL END_SUBROUTINE END
follow(_subroutine_stmt) = error SEMICOLON EOL DOLLAR
follow(_submodule_stmt) = error SEMICOLON EOL DOLLAR
follow(_structure_stmt) = error SEMICOLON EOL DOLLAR
follow(_stop_stmt) = error SEMICOLON EOL DOLLAR
follow(_simple_attr_stmt) = error SEMICOLON EOL DOLLAR
follow(_sequence_stmt) = error SEMICOLON EOL DOLLAR
follow(_select_type_stmt) = error SEMICOLON EOL DOLLAR
follow(_select_case_stmt) = error SEMICOLON EOL DOLLAR
follow(_save_stmt) = error SEMICOLON EOL DOLLAR
follow(_rewrite_stmt) = error SEMICOLON EOL DOLLAR
follow(_rewind_stmt) = error SEMICOLON EOL DOLLAR
follow(_return_stmt) = error SEMICOLON EOL DOLLAR
follow(_record_stmt) = error SEMICOLON EOL DOLLAR
follow(_read_stmt) = error SEMICOLON EOL DOLLAR
follow(_read_OR_write_stmt) = error SEMICOLON EOL DOLLAR
follow(_read_OR_print_stmt) = error SEMICOLON EOL DOLLAR
follow(_program_stmt) = error SEMICOLON EOL DOLLAR
follow(_procedure_stmt) = error SEMICOLON EOL DOLLAR
follow(_procedure_declaration_stmt) = error SEMICOLON EOL DOLLAR
follow(_proc_compo_attr_spec) = COMMA COLON_COLON
follow(_private_stmt) = error SEMICOLON EOL DOLLAR
follow(_print_stmt) = error SEMICOLON EOL DOLLAR
follow(_prefix) = SUBROUTINE FUNCTION
follow(_pp_macro_stmt) = error SEMICOLON EOL DOLLAR
follow(_pointer_stmt) = error SEMICOLON EOL DOLLAR
follow(_pointer_assignment_stmt) = error SEMICOLON EOL DOLLAR
follow(_pause_stmt) = error SEMICOLON EOL DOLLAR
follow(_parameter_stmt) = error SEMICOLON EOL DOLLAR
follow(_optional_stmt) = error SEMICOLON EOL DOLLAR
follow(_open_stmt) = error SEMICOLON EOL DOLLAR
follow(_onlys) = EOP COMMA
follow(_omp) = EOL
follow(_ocl_scope) = RPAREN
follow(_ocl) = EOL
follow(_nullify_stmt) = error SEMICOLON EOL DOLLAR
follow(_namelist_stmt) = error SEMICOLON EOL DOLLAR
follow(_module_stmt) = error SEMICOLON EOL DOLLAR
follow(_module_) = END_MODULE END
follow(_masked_or_unmasked_elsewhere_stmt) = error SEMICOLON EOL DOLLAR
follow(_map_stmt) = error SEMICOLON EOL DOLLAR
follow(_main_program) = PU_TAIL END_PROGRAM END
follow(_lock_stmt) = error SEMICOLON EOL DOLLAR
follow(_linda_anonymous_formal) = RPAREN
follow(_intrinsic_stmt) = error SEMICOLON EOL DOLLAR
follow(_interface_stmt) = error SEMICOLON EOL DOLLAR
follow(_intent_stmt) = error SEMICOLON EOL DOLLAR
follow(_inquire_stmt) = error SEMICOLON EOL DOLLAR
follow(_import_stmt) = error SEMICOLON EOL DOLLAR
follow(_implicit_stmt) = error SEMICOLON EOL DOLLAR
follow(_if_then_stmt) = error SEMICOLON EOL DOLLAR
follow(_if_stmt) = error SEMICOLON EOL DOLLAR
follow(_goto_stmt) = error SEMICOLON EOL DOLLAR
follow(_function_subprogram) = PU_TAIL END_FUNCTION END
follow(_function_stmt) = error SEMICOLON EOL DOLLAR
follow(_format_stmt) = error SEMICOLON EOL DOLLAR
follow(_forall_stmt) = error SEMICOLON EOL DOLLAR
follow(_forall_construct_stmt) = error SEMICOLON EOL DOLLAR
follow(_forall_assignment_stmt) = error SEMICOLON EOL DOLLAR
follow(_flush_stmt) = error SEMICOLON EOL DOLLAR
follow(_find_stmt) = error SEMICOLON EOL DOLLAR
follow(_final_procedure_stmt) = error SEMICOLON EOL DOLLAR
follow(_exit_stmt) = error SEMICOLON EOL DOLLAR
follow(_error_stop_stmt) = error SEMICOLON EOL DOLLAR
follow(_equivalence_stmt) = error SEMICOLON EOL DOLLAR
follow(_enumerator_def_stmt) = error SEMICOLON EOL DOLLAR
follow(_enum_def_stmt) = error SEMICOLON EOL DOLLAR
follow(_entry_stmt) = error SEMICOLON EOL DOLLAR
follow(_endfile_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_where_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_union_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_type_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_subroutine_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_submodule_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_structure_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_stmt_p) = error SEMICOLON EOL DOLLAR
follow(_end_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_select_type_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_select_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_program_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_module_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_map_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_interface_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_if_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_function_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_forall_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_enum_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_do_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_critical_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_block_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_block_data_stmt) = error SEMICOLON EOL DOLLAR
follow(_end_associate_stmt) = error SEMICOLON EOL DOLLAR
follow(_encode_decode_stmt) = error SEMICOLON EOL DOLLAR
follow(_else_stmt) = error SEMICOLON EOL DOLLAR
follow(_else_if_stmt) = error SEMICOLON EOL DOLLAR
follow(_do_stmt) = error SEMICOLON EOL DOLLAR
follow(_dimension_stmt) = error SEMICOLON EOL DOLLAR
follow(_derived_type_stmt) = error SEMICOLON EOL DOLLAR
follow(_delete_stmt) = error SEMICOLON EOL DOLLAR
follow(_define_file_stmt) = error SEMICOLON EOL DOLLAR
follow(_dec) = EOL
follow(_deallocate_stmt) = error SEMICOLON EOL DOLLAR
follow(_data_stmt) = error SEMICOLON EOL DOLLAR
follow(_cycle_stmt) = error SEMICOLON EOL DOLLAR
follow(_critical_stmt) = error SEMICOLON EOL DOLLAR
follow(_continue_stmt) = error SEMICOLON EOL DOLLAR
follow(_contains_stmt) = error SEMICOLON EOL DOLLAR
follow(_computed_goto_stmt) = error SEMICOLON EOL DOLLAR
follow(_component_def_stmt) = error SEMICOLON EOL DOLLAR
follow(_common_stmt) = error SEMICOLON EOL DOLLAR
follow(_codimension_stmt) = error SEMICOLON EOL DOLLAR
follow(_close_stmt) = error SEMICOLON EOL DOLLAR
follow(_case_stmt) = error SEMICOLON EOL DOLLAR
follow(_call_stmt) = error SEMICOLON EOL DOLLAR
follow(_block_stmt) = error SEMICOLON EOL DOLLAR
follow(_block_data_stmt) = error SEMICOLON EOL DOLLAR
follow(_binding_private_stmt) = error SEMICOLON EOL DOLLAR
follow(_binding_attr) = COMMA COLON_COLON
follow(_bind_stmt) = error SEMICOLON EOL DOLLAR
follow(_backspace_stmt) = error SEMICOLON EOL DOLLAR
follow(_asynchronous_stmt) = error SEMICOLON EOL DOLLAR
follow(_associate_stmt) = error SEMICOLON EOL DOLLAR
follow(_assignment_stmt) = error SEMICOLON EOL DOLLAR
follow(_assigned_goto_stmt) = error SEMICOLON EOL DOLLAR
follow(_assign_stmt) = error SEMICOLON EOL DOLLAR
follow(_arithmetic_if_stmt) = error SEMICOLON EOL DOLLAR
follow(_allocate_stmt) = error SEMICOLON EOL DOLLAR
follow(_allocatable_stmt) = error SEMICOLON EOL DOLLAR
follow(_action_stmt_no_assign) = error SEMICOLON EOL DOLLAR
follow(_action_stmt) = error SEMICOLON EOL DOLLAR
follow(_access_stmt_public) = error SEMICOLON EOL DOLLAR
follow(_access_stmt_private) = error SEMICOLON EOL DOLLAR
follow(_accept_stmt) = error SEMICOLON EOL DOLLAR
follow(_acc) = EOL
Built an LR(0) automaton with 4471 states.
The grammar is not SLR(1) -- 22 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 4883 states.
2217 out of 4883 states have a default reduction.
1609 out of 4883 states are represented.
964 out of 1500 symbols keep track of their start position.
763 out of 1500 symbols keep track of their end position.
1657 out of 2581 productions exploit shiftreduce optimization.
786 out of 4883 states can peek at an error.
13125 functions before inlining, 2007 functions after inlining.
