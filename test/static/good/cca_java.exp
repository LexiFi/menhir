Grammar has 254 nonterminal symbols, among which 4 start symbols.
Grammar has 119 terminal symbols.
Grammar has 795 productions.
nullable(wildcard_3) = false
nullable(wildcard_2) = false
nullable(wildcard_1) = false
nullable(wildcard) = false
nullable(while_statement_no_short_if) = false
nullable(while_statement) = false
nullable(void) = false
nullable(variable_modifier) = false
nullable(variable_initializers) = false
nullable(variable_initializer) = false
nullable(variable_declarator_id) = false
nullable(variable_declarator) = false
nullable(unary_expression_not_plus_minus_or_lambda_expression) = false
nullable(unary_expression_not_plus_minus_nn) = false
nullable(unary_expression_not_plus_minus) = false
nullable(unary_expression_nn) = false
nullable(unary_expression) = false
nullable(unann_type) = false
nullable(unann_reference_type) = false
nullable(unann_primitive_type) = false
nullable(unann_class_or_interface_type_spec) = false
nullable(unann_class_or_interface_type) = false
nullable(unann_array_type) = false
nullable(type_variable) = false
nullable(type_parameters) = false
nullable(type_parameter_list_1) = false
nullable(type_parameter_list) = false
nullable(type_parameter_1) = false
nullable(type_parameter) = false
nullable(type_import_on_demand_declaration) = false
nullable(type_declaration) = false
nullable(type_bound_1) = false
nullable(type_bound) = false
nullable(type_arguments) = false
nullable(type_argument_list_3) = false
nullable(type_argument_list_2) = false
nullable(type_argument_list_1) = false
nullable(type_argument_list) = false
nullable(type_argument_3) = false
nullable(type_argument_2) = false
nullable(type_argument_1) = false
nullable(type_argument) = false
nullable(try_statement) = false
nullable(throws) = false
nullable(throw_statement) = false
nullable(this) = false
nullable(synchronized_statement) = false
nullable(switch_statement) = false
nullable(switch_label) = false
nullable(switch_block_statement_groups) = false
nullable(switch_block_statement_group) = false
nullable(switch_block) = false
nullable(super_ext) = false
nullable(super) = false
nullable(static_type_import_on_demand_declaration) = false
nullable(static_single_type_import_declaration) = false
nullable(static_initializer) = false
nullable(statement_without_trailing_substatement) = false
nullable(statement_no_short_if) = false
nullable(statement_expression) = false
nullable(statement) = false
nullable(single_type_import_declaration) = false
nullable(single_element_annotation_body) = false
nullable(simple_name) = false
nullable(shift_expression_nn) = false
nullable(shift_expression) = false
nullable(separated_nonempty_list(COMMA,variable_declarator)) = false
nullable(separated_nonempty_list(COMMA,statement_expression)) = false
nullable(separated_nonempty_list(COMMA,interface_type)) = false
nullable(separated_nonempty_list(COMMA,identifier)) = false
nullable(separated_nonempty_list(COMMA,formal_parameter)) = false
nullable(separated_nonempty_list(COMMA,expr_or_err)) = false
nullable(separated_nonempty_list(COMMA,element_value_pair)) = false
nullable(separated_nonempty_list(COMMA,element_value)) = false
nullable(separated_nonempty_list(COMMA,class_type)) = false
nullable(return_statement) = false
nullable(resource_spec) = false
nullable(resource_list) = false
nullable(resource) = false
nullable(reserved) = false
nullable(relational_expression_nn) = false
nullable(relational_expression) = false
nullable(reference_type_3) = false
nullable(reference_type_2) = false
nullable(reference_type_1) = false
nullable(primary_no_new_array) = false
nullable(primary) = false
nullable(pre_increment_expression) = false
nullable(pre_decrement_expression) = false
nullable(postfix_expression_nn) = false
nullable(postfix_expression) = false
nullable(post_increment_expression) = false
nullable(post_decrement_expression) = false
nullable(partial_block_statement) = false
nullable(partial_assert_statement) = false
nullable(package_declaration) = false
nullable(numeric_type) = false
nullable(normal_interface_declaration_head1) = false
nullable(normal_interface_declaration_head0) = false
nullable(normal_interface_declaration_head) = false
nullable(normal_interface_declaration) = false
nullable(normal_annotation_body) = false
nullable(nonempty_list(variable_modifier)) = false
nullable(nonempty_list(type_declaration)) = false
nullable(nonempty_list(switch_label)) = false
nullable(nonempty_list(import_declaration)) = false
nullable(nonempty_list(element_value_comma)) = false
nullable(nonempty_list(catch_clause)) = false
nullable(nonempty_list(block_statement)) = false
nullable(nonempty_list(annotation_or_modifier)) = false
nullable(nonempty_list(annotation)) = false
nullable(nonempty_list(additional_bound)) = false
nullable(name) = false
nullable(multiplicative_expression_nn) = false
nullable(multiplicative_expression) = false
nullable(modifiers) = false
nullable(method_reference) = false
nullable(method_invocation) = false
nullable(method_header) = false
nullable(method_declarator_head) = false
nullable(method_declarator) = false
nullable(method_declaration) = false
nullable(method_body) = false
nullable(marker_annotation_body) = false
nullable(main) = false
nullable(loption(block_statements)) = true
nullable(local_variable_declaration_statement) = false
nullable(local_variable_declaration) = false
nullable(literal) = false
nullable(list(interface_member_declaration)) = true
nullable(list(class_body_declaration)) = true
nullable(list(annotation_type_member_declaration)) = true
nullable(lambda_parameters) = false
nullable(lambda_expression) = false
nullable(lambda_e) = false
nullable(lambda_body) = false
nullable(lambda_b) = false
nullable(labeled_statement_no_short_if) = false
nullable(labeled_statement_head) = false
nullable(labeled_statement) = false
nullable(javatype_vdid) = false
nullable(interfaces) = false
nullable(interface_method_declaration) = false
nullable(interface_member_declaration) = false
nullable(interface_declaration) = false
nullable(interface_body) = false
nullable(integral_type) = false
nullable(instanceof_expression_nn) = false
nullable(instanceof_expression) = false
nullable(instance_initializer) = false
nullable(inclusive_or_expression_nn) = false
nullable(inclusive_or_expression) = false
nullable(import_declaration) = false
nullable(if_then_statement) = false
nullable(if_then_else_statement_no_short_if) = false
nullable(if_then_else_statement) = false
nullable(identifier) = false
nullable(formal_parameter) = false
nullable(for_update0) = true
nullable(for_update) = false
nullable(for_statement_no_short_if) = false
nullable(for_statement_head) = false
nullable(for_statement) = false
nullable(for_init_opt) = true
nullable(for_init) = false
nullable(floating_point_type) = false
nullable(finally) = false
nullable(field_declaration) = false
nullable(field_access) = false
nullable(extends_interfaces_opt) = true
nullable(expression_statement) = false
nullable(expression_opt) = true
nullable(expression_nn) = false
nullable(expression) = false
nullable(explicit_constructor_invocation) = false
nullable(exclusive_or_expression_nn) = false
nullable(exclusive_or_expression) = false
nullable(equality_expression_nn) = false
nullable(equality_expression) = false
nullable(enum_declaration_head0) = false
nullable(enum_declaration_head) = false
nullable(enum_declaration) = false
nullable(enum_constants) = false
nullable(enum_constant_head) = false
nullable(enum_constant) = false
nullable(enum_body_declarations0) = true
nullable(enum_body) = false
nullable(enhanced_for_statement_no_short_if) = false
nullable(enhanced_for_statement) = false
nullable(empty_statement) = false
nullable(element_value_pair) = false
nullable(element_value_array_initializer) = false
nullable(element_value) = false
nullable(do_statement) = false
nullable(dim_exprs) = false
nullable(dim_expr) = false
nullable(default_value_opt) = true
nullable(default_value) = false
nullable(continue_statement) = false
nullable(constructor_declarator_head) = false
nullable(constructor_declarator) = false
nullable(constructor_declaration) = false
nullable(constructor_body) = false
nullable(conditional_or_expression_nn) = false
nullable(conditional_or_expression) = false
nullable(conditional_expression_nn) = false
nullable(conditional_expression) = false
nullable(conditional_and_expression_nn) = false
nullable(conditional_and_expression) = false
nullable(compilation_unit) = true
nullable(class_member_declaration) = false
nullable(class_instance_creation_head_qualified) = false
nullable(class_instance_creation_head) = false
nullable(class_instance_creation_expression) = false
nullable(class_declaration_head1) = false
nullable(class_declaration_head0) = false
nullable(class_declaration_head) = false
nullable(class_declaration) = false
nullable(class_body_declaration) = false
nullable(class_body) = false
nullable(catch_type) = false
nullable(catch_formal_parameter) = false
nullable(catch_clause_header) = false
nullable(catch_clause) = false
nullable(cast_expression) = false
nullable(break_statement) = false
nullable(block_statement) = false
nullable(block) = false
nullable(assignment_expression_nn) = false
nullable(assignment_expression) = false
nullable(assignment) = false
nullable(assert_statement) = false
nullable(array_initializer) = false
nullable(array_creation_noinit) = false
nullable(array_creation_init) = false
nullable(array_access) = false
nullable(annotations) = false
nullable(annotation_type_member_declaration) = false
nullable(annotation_type_declaration_head) = false
nullable(annotation_type_declaration) = false
nullable(annotation_type_body) = false
nullable(annotation_body) = false
nullable(annotation) = false
nullable(ann_dims) = false
nullable(ann_dim) = false
nullable(and_expression_nn) = false
nullable(and_expression) = false
nullable(adhoc_modifier) = false
nullable(additive_expression_nn) = false
nullable(additive_expression) = false
nullable(additional_bound_list_1) = false
nullable(additional_bound_list) = false
nullable(additional_bound_1) = false
nullable(additional_bound) = false
first(wildcard_3) = QUESTION AT
first(wildcard_2) = QUESTION AT
first(wildcard_1) = QUESTION AT
first(wildcard) = QUESTION AT
first(while_statement_no_short_if) = WHILE
first(while_statement) = WHILE
first(void) = VOID
first(variable_modifier) = FINAL AT
first(variable_initializers) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN__LAMBDA LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(variable_initializer) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN__LAMBDA LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(variable_declarator_id) = IDENTIFIER
first(variable_declarator) = IDENTIFIER
first(unary_expression_not_plus_minus_or_lambda_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN__LAMBDA LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(unary_expression_not_plus_minus_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(unary_expression_not_plus_minus) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(unary_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(unary_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(unann_type) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN
first(unann_reference_type) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN
first(unann_primitive_type) = SHORT LONG INT FLOAT DOUBLE CHAR BYTE BOOLEAN
first(unann_class_or_interface_type_spec) = IDENTIFIER ERROR
first(unann_class_or_interface_type) = IDENTIFIER ERROR
first(unann_array_type) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN
first(type_variable) = IDENTIFIER AT
first(type_parameters) = LT
first(type_parameter_list_1) = IDENTIFIER AT
first(type_parameter_list) = IDENTIFIER AT
first(type_parameter_1) = IDENTIFIER AT
first(type_parameter) = IDENTIFIER AT
first(type_import_on_demand_declaration) = IMPORT
first(type_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
first(type_bound_1) = EXTENDS
first(type_bound) = EXTENDS
first(type_arguments) = LT
first(type_argument_list_3) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(type_argument_list_2) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(type_argument_list_1) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(type_argument_list) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(type_argument_3) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(type_argument_2) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(type_argument_1) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(type_argument) = SHORT QUESTION LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(try_statement) = TRY
first(throws) = THROWS
first(throw_statement) = THROW
first(this) = THIS
first(synchronized_statement) = SYNCHRONIZED
first(switch_statement) = SWITCH
first(switch_label) = DEFAULT__COLON CASE
first(switch_block_statement_groups) = DEFAULT__COLON CASE
first(switch_block_statement_group) = DEFAULT__COLON CASE
first(switch_block) = LBRACE
first(super_ext) = EXTENDS
first(super) = SUPER
first(static_type_import_on_demand_declaration) = IMPORT
first(static_single_type_import_declaration) = IMPORT
first(static_initializer) = STATIC
first(statement_without_trailing_substatement) = VOID TRY TRUE THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STMT SHORT SEMICOLON RETURN PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR_STMT ERROR DOUBLE DO CONTINUE CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN ASSERT
first(statement_no_short_if) = WHILE VOID TRY TRUE THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STMT SHORT SEMICOLON RETURN PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FALSE ERROR_STMT ERROR DOUBLE DO CONTINUE CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN ASSERT
first(statement_expression) = VOID TRUE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(statement) = WHILE VOID TRY TRUE THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STMT SHORT SEMICOLON RETURN PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FALSE ERROR_STMT ERROR DOUBLE DO CONTINUE CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN ASSERT
first(single_type_import_declaration) = IMPORT
first(single_element_annotation_body) = IDENTIFIER ERROR
first(simple_name) = IDENTIFIER
first(shift_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(shift_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(separated_nonempty_list(COMMA,variable_declarator)) = IDENTIFIER
first(separated_nonempty_list(COMMA,statement_expression)) = VOID TRUE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(separated_nonempty_list(COMMA,interface_type)) = IDENTIFIER ERROR AT
first(separated_nonempty_list(COMMA,identifier)) = IDENTIFIER
first(separated_nonempty_list(COMMA,formal_parameter)) = SHORT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(separated_nonempty_list(COMMA,expr_or_err)) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN__LAMBDA LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(separated_nonempty_list(COMMA,element_value_pair)) = IDENTIFIER
first(separated_nonempty_list(COMMA,element_value)) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN AT
first(separated_nonempty_list(COMMA,class_type)) = IDENTIFIER ERROR AT
first(return_statement) = RETURN
first(resource_spec) = LPAREN
first(resource_list) = SHORT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(resource) = SHORT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(reserved) = GT_7 GOTO CONST
first(relational_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(relational_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(reference_type_3) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(reference_type_2) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(reference_type_1) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(primary_no_new_array) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(primary) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(pre_increment_expression) = PLUS_PLUS
first(pre_decrement_expression) = MINUS_MINUS
first(postfix_expression_nn) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(postfix_expression) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(post_increment_expression) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(post_decrement_expression) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(partial_block_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR ENUM DOUBLE DO DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
first(partial_assert_statement) = ASSERT
first(package_declaration) = PACKAGE AT
first(numeric_type) = SHORT LONG INT FLOAT DOUBLE CHAR BYTE
first(normal_interface_declaration_head1) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL DEFAULT AT ABSTRACT
first(normal_interface_declaration_head0) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL DEFAULT AT ABSTRACT
first(normal_interface_declaration_head) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL DEFAULT AT ABSTRACT
first(normal_interface_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL DEFAULT AT ABSTRACT
first(normal_annotation_body) = IDENTIFIER ERROR
first(nonempty_list(variable_modifier)) = FINAL AT
first(nonempty_list(type_declaration)) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
first(nonempty_list(switch_label)) = DEFAULT__COLON CASE
first(nonempty_list(import_declaration)) = IMPORT
first(nonempty_list(element_value_comma)) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN AT
first(nonempty_list(catch_clause)) = CATCH
first(nonempty_list(block_statement)) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR ENUM DOUBLE DO DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
first(nonempty_list(annotation_or_modifier)) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT AT ABSTRACT
first(nonempty_list(annotation)) = AT
first(nonempty_list(additional_bound)) = AND
first(name) = IDENTIFIER ERROR
first(multiplicative_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(multiplicative_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(modifiers) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT AT ABSTRACT
first(method_reference) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(method_invocation) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(method_header) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE DEFAULT CHAR BYTE BOOLEAN AT ABSTRACT
first(method_declarator_head) = IDENTIFIER
first(method_declarator) = IDENTIFIER
first(method_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE DEFAULT CHAR BYTE BOOLEAN AT ABSTRACT
first(method_body) = SEMICOLON LBRACE
first(marker_annotation_body) = IDENTIFIER ERROR
first(main) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE PACKAGE NATIVE INTERFACE IMPORT FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
first(loption(block_statements)) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR ENUM DOUBLE DO DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
first(local_variable_declaration_statement) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE DEFAULT CHAR BYTE BOOLEAN AT ABSTRACT
first(local_variable_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE DEFAULT CHAR BYTE BOOLEAN AT ABSTRACT
first(literal) = TRUE STRING_LITERAL NULL INTEGER_LITERAL FLOATING_POINT_LITERAL FALSE CHARACTER_LITERAL
first(list(interface_member_declaration)) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE LT LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
first(list(class_body_declaration)) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
first(list(annotation_type_member_declaration)) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
first(lambda_parameters) = LPAREN__LAMBDA IDENTIFIER
first(lambda_expression) = LPAREN__LAMBDA IDENTIFIER
first(lambda_e) = LPAREN__LAMBDA IDENTIFIER
first(lambda_body) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN__LAMBDA LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(lambda_b) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(labeled_statement_no_short_if) = IDENTIFIER
first(labeled_statement_head) = IDENTIFIER
first(labeled_statement) = IDENTIFIER
first(javatype_vdid) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN
first(interfaces) = IMPLEMENTS
first(interface_method_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE DEFAULT CHAR BYTE BOOLEAN AT ABSTRACT
first(interface_member_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE LT LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
first(interface_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL DEFAULT AT__INTERFACE AT ABSTRACT
first(interface_body) = LBRACE
first(integral_type) = SHORT LONG INT CHAR BYTE
first(instanceof_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(instanceof_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(instance_initializer) = LBRACE
first(inclusive_or_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(inclusive_or_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(import_declaration) = IMPORT
first(if_then_statement) = IF
first(if_then_else_statement_no_short_if) = IF
first(if_then_else_statement) = IF
first(identifier) = IDENTIFIER
first(formal_parameter) = SHORT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE CHAR BYTE BOOLEAN AT
first(for_update0) = VOID TRUE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(for_update) = VOID TRUE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(for_statement_no_short_if) = FOR
first(for_statement_head) = FOR
first(for_statement) = FOR
first(for_init_opt) = VOLATILE VOID TRUE TRANSIENT THIS SYNCHRONIZED SUPER STRING_LITERAL STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR DOUBLE DEFAULT CHARACTER_LITERAL CHAR BYTE BOOLEAN AT ABSTRACT
first(for_init) = VOLATILE VOID TRUE TRANSIENT THIS SYNCHRONIZED SUPER STRING_LITERAL STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR DOUBLE DEFAULT CHARACTER_LITERAL CHAR BYTE BOOLEAN AT ABSTRACT
first(floating_point_type) = FLOAT DOUBLE
first(finally) = FINALLY
first(field_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE DEFAULT CHAR BYTE BOOLEAN AT ABSTRACT
first(field_access) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(extends_interfaces_opt) = EXTENDS
first(expression_statement) = VOID TRUE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(expression_opt) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN__LAMBDA LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN__LAMBDA LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN__LAMBDA LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(explicit_constructor_invocation) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LT LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(exclusive_or_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(exclusive_or_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(equality_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(equality_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(enum_declaration_head0) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL ENUM DEFAULT AT ABSTRACT
first(enum_declaration_head) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL ENUM DEFAULT AT ABSTRACT
first(enum_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL ENUM DEFAULT AT ABSTRACT
first(enum_constants) = IDENTIFIER AT
first(enum_constant_head) = IDENTIFIER AT
first(enum_constant) = IDENTIFIER AT
first(enum_body_declarations0) = SEMICOLON
first(enum_body) = LBRACE
first(enhanced_for_statement_no_short_if) = FOR
first(enhanced_for_statement) = FOR
first(empty_statement) = SEMICOLON
first(element_value_pair) = IDENTIFIER
first(element_value_array_initializer) = LBRACE
first(element_value) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG LBRACE INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN AT
first(do_statement) = DO
first(dim_exprs) = LBRACKET
first(dim_expr) = LBRACKET
first(default_value_opt) = DEFAULT
first(default_value) = DEFAULT
first(continue_statement) = CONTINUE
first(constructor_declarator_head) = IDENTIFIER
first(constructor_declarator) = IDENTIFIER
first(constructor_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE LT IDENTIFIER FINAL DEFAULT AT ABSTRACT
first(constructor_body) = LBRACE
first(conditional_or_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(conditional_or_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(conditional_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(conditional_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(conditional_and_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(conditional_and_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(compilation_unit) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE PACKAGE NATIVE INTERFACE IMPORT FINAL ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
first(class_member_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
first(class_instance_creation_head_qualified) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(class_instance_creation_head) = NEW
first(class_instance_creation_expression) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(class_declaration_head1) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT CLASS AT ABSTRACT
first(class_declaration_head0) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT CLASS AT ABSTRACT
first(class_declaration_head) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT CLASS AT ABSTRACT
first(class_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT CLASS AT ABSTRACT
first(class_body_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
first(class_body) = LBRACE
first(catch_type) = IDENTIFIER ERROR
first(catch_formal_parameter) = IDENTIFIER FINAL ERROR AT
first(catch_clause_header) = CATCH
first(catch_clause) = CATCH
first(cast_expression) = LPAREN
first(break_statement) = BREAK
first(block_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR ENUM DOUBLE DO DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
first(block) = LBRACE
first(assignment_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(assignment_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(assignment) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(assert_statement) = ASSERT
first(array_initializer) = LBRACE
first(array_creation_noinit) = NEW
first(array_creation_init) = NEW
first(array_access) = VOID TRUE THIS SUPER STRING_LITERAL SHORT NULL NEW LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(annotations) = AT
first(annotation_type_member_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
first(annotation_type_declaration_head) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT AT__INTERFACE AT ABSTRACT
first(annotation_type_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT AT__INTERFACE AT ABSTRACT
first(annotation_type_body) = LBRACE
first(annotation_body) = IDENTIFIER ERROR
first(annotation) = AT
first(ann_dims) = LBRACKET AT
first(ann_dim) = LBRACKET AT
first(and_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(and_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(adhoc_modifier) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL DEFAULT ABSTRACT
first(additive_expression_nn) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(additive_expression) = VOID TRUE TILDE THIS SUPER STRING_LITERAL SHORT PLUS_PLUS PLUS NULL NEW MINUS_MINUS MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FALSE EXCLAM ERROR DOUBLE CHARACTER_LITERAL CHAR BYTE BOOLEAN
first(additional_bound_list_1) = AND
first(additional_bound_list) = AND
first(additional_bound_1) = AND
first(additional_bound) = AND
minimal(wildcard_3) = (* 2 *) QUESTION GT_GT_GT
minimal(wildcard_2) = (* 2 *) QUESTION GT_GT
minimal(wildcard_1) = (* 2 *) QUESTION GT
minimal(wildcard) = (* 1 *) QUESTION
minimal(while_statement_no_short_if) = (* 5 *) WHILE LPAREN ERROR RPAREN SEMICOLON
minimal(while_statement) = (* 5 *) WHILE LPAREN ERROR RPAREN SEMICOLON
minimal(void) = (* 1 *) VOID
minimal(variable_modifier) = (* 1 *) FINAL
minimal(variable_initializers) = (* 1 *) ERROR
minimal(variable_initializer) = (* 1 *) ERROR
minimal(variable_declarator_id) = (* 1 *) IDENTIFIER
minimal(variable_declarator) = (* 1 *) IDENTIFIER
minimal(unary_expression_not_plus_minus_or_lambda_expression) = (* 1 *) INTEGER_LITERAL
minimal(unary_expression_not_plus_minus_nn) = (* 1 *) INTEGER_LITERAL
minimal(unary_expression_not_plus_minus) = (* 1 *) INTEGER_LITERAL
minimal(unary_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(unary_expression) = (* 1 *) INTEGER_LITERAL
minimal(unann_type) = (* 1 *) BYTE
minimal(unann_reference_type) = (* 1 *) IDENTIFIER
minimal(unann_primitive_type) = (* 1 *) BYTE
minimal(unann_class_or_interface_type_spec) = (* 1 *) IDENTIFIER
minimal(unann_class_or_interface_type) = (* 1 *) IDENTIFIER
minimal(unann_array_type) = (* 3 *) IDENTIFIER LBRACKET RBRACKET
minimal(type_variable) = (* 1 *) IDENTIFIER
minimal(type_parameters) = (* 3 *) LT IDENTIFIER GT
minimal(type_parameter_list_1) = (* 2 *) IDENTIFIER GT
minimal(type_parameter_list) = (* 1 *) IDENTIFIER
minimal(type_parameter_1) = (* 2 *) IDENTIFIER GT
minimal(type_parameter) = (* 1 *) IDENTIFIER
minimal(type_import_on_demand_declaration) = (* 5 *) IMPORT IDENTIFIER DOT STAR SEMICOLON
minimal(type_declaration) = (* 1 *) SEMICOLON
minimal(type_bound_1) = (* 3 *) EXTENDS IDENTIFIER GT
minimal(type_bound) = (* 2 *) EXTENDS IDENTIFIER
minimal(type_arguments) = (* 2 *) LT GT
minimal(type_argument_list_3) = (* 2 *) IDENTIFIER GT_GT_GT
minimal(type_argument_list_2) = (* 2 *) QUESTION GT_GT
minimal(type_argument_list_1) = (* 2 *) QUESTION GT
minimal(type_argument_list) = (* 1 *) QUESTION
minimal(type_argument_3) = (* 2 *) IDENTIFIER GT_GT_GT
minimal(type_argument_2) = (* 2 *) QUESTION GT_GT
minimal(type_argument_1) = (* 2 *) QUESTION GT
minimal(type_argument) = (* 1 *) QUESTION
minimal(try_statement) = (* 3 *) TRY LBRACE RBRACE
minimal(throws) = (* 2 *) THROWS IDENTIFIER
minimal(throw_statement) = (* 3 *) THROW ERROR SEMICOLON
minimal(this) = (* 1 *) THIS
minimal(synchronized_statement) = (* 6 *) SYNCHRONIZED LPAREN ERROR RPAREN LBRACE RBRACE
minimal(switch_statement) = (* 6 *) SWITCH LPAREN ERROR RPAREN LBRACE RBRACE
minimal(switch_label) = (* 2 *) DEFAULT__COLON COLON
minimal(switch_block_statement_groups) = (* 3 *) DEFAULT__COLON COLON SEMICOLON
minimal(switch_block_statement_group) = (* 3 *) DEFAULT__COLON COLON SEMICOLON
minimal(switch_block) = (* 2 *) LBRACE RBRACE
minimal(super_ext) = (* 2 *) EXTENDS IDENTIFIER
minimal(super) = (* 1 *) SUPER
minimal(static_type_import_on_demand_declaration) = (* 6 *) IMPORT STATIC IDENTIFIER DOT STAR SEMICOLON
minimal(static_single_type_import_declaration) = (* 6 *) IMPORT STATIC IDENTIFIER DOT IDENTIFIER SEMICOLON
minimal(static_initializer) = (* 3 *) STATIC LBRACE RBRACE
minimal(statement_without_trailing_substatement) = (* 1 *) SEMICOLON
minimal(statement_no_short_if) = (* 1 *) SEMICOLON
minimal(statement_expression) = (* 2 *) PLUS_PLUS INTEGER_LITERAL
minimal(statement) = (* 1 *) SEMICOLON
minimal(single_type_import_declaration) = (* 3 *) IMPORT IDENTIFIER SEMICOLON
minimal(single_element_annotation_body) = (* 4 *) IDENTIFIER LPAREN INTEGER_LITERAL RPAREN
minimal(simple_name) = (* 1 *) IDENTIFIER
minimal(shift_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(shift_expression) = (* 1 *) INTEGER_LITERAL
minimal(separated_nonempty_list(COMMA,variable_declarator)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,statement_expression)) = (* 2 *) PLUS_PLUS INTEGER_LITERAL
minimal(separated_nonempty_list(COMMA,interface_type)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,identifier)) = (* 1 *) IDENTIFIER
minimal(separated_nonempty_list(COMMA,formal_parameter)) = (* 2 *) BYTE IDENTIFIER
minimal(separated_nonempty_list(COMMA,expr_or_err)) = (* 1 *) ERROR
minimal(separated_nonempty_list(COMMA,element_value_pair)) = (* 3 *) IDENTIFIER EQ INTEGER_LITERAL
minimal(separated_nonempty_list(COMMA,element_value)) = (* 1 *) INTEGER_LITERAL
minimal(separated_nonempty_list(COMMA,class_type)) = (* 1 *) IDENTIFIER
minimal(return_statement) = (* 2 *) RETURN SEMICOLON
minimal(resource_spec) = (* 6 *) LPAREN BYTE IDENTIFIER EQ INTEGER_LITERAL RPAREN
minimal(resource_list) = (* 4 *) BYTE IDENTIFIER EQ INTEGER_LITERAL
minimal(resource) = (* 4 *) BYTE IDENTIFIER EQ INTEGER_LITERAL
minimal(reserved) = (* 1 *) GOTO
minimal(relational_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(relational_expression) = (* 1 *) INTEGER_LITERAL
minimal(reference_type_3) = (* 2 *) IDENTIFIER GT_GT_GT
minimal(reference_type_2) = (* 2 *) IDENTIFIER GT_GT
minimal(reference_type_1) = (* 2 *) IDENTIFIER GT
minimal(primary_no_new_array) = (* 1 *) INTEGER_LITERAL
minimal(primary) = (* 1 *) INTEGER_LITERAL
minimal(pre_increment_expression) = (* 2 *) PLUS_PLUS INTEGER_LITERAL
minimal(pre_decrement_expression) = (* 2 *) MINUS_MINUS INTEGER_LITERAL
minimal(postfix_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(postfix_expression) = (* 1 *) INTEGER_LITERAL
minimal(post_increment_expression) = (* 2 *) INTEGER_LITERAL PLUS_PLUS
minimal(post_decrement_expression) = (* 2 *) INTEGER_LITERAL MINUS_MINUS
minimal(partial_block_statement) = (* 2 *) SEMICOLON EOP
minimal(partial_assert_statement) = (* 4 *) ASSERT INTEGER_LITERAL SEMICOLON EOP
minimal(package_declaration) = (* 3 *) PACKAGE IDENTIFIER SEMICOLON
minimal(numeric_type) = (* 1 *) BYTE
minimal(normal_interface_declaration_head1) = (* 2 *) INTERFACE IDENTIFIER
minimal(normal_interface_declaration_head0) = (* 2 *) INTERFACE IDENTIFIER
minimal(normal_interface_declaration_head) = (* 2 *) INTERFACE IDENTIFIER
minimal(normal_interface_declaration) = (* 4 *) INTERFACE IDENTIFIER LBRACE RBRACE
minimal(normal_annotation_body) = (* 3 *) IDENTIFIER LPAREN RPAREN
minimal(nonempty_list(variable_modifier)) = (* 1 *) FINAL
minimal(nonempty_list(type_declaration)) = (* 1 *) SEMICOLON
minimal(nonempty_list(switch_label)) = (* 2 *) DEFAULT__COLON COLON
minimal(nonempty_list(import_declaration)) = (* 3 *) IMPORT IDENTIFIER SEMICOLON
minimal(nonempty_list(element_value_comma)) = (* 2 *) INTEGER_LITERAL COMMA
minimal(nonempty_list(catch_clause)) = (* 7 *) CATCH LPAREN IDENTIFIER IDENTIFIER RPAREN LBRACE RBRACE
minimal(nonempty_list(block_statement)) = (* 1 *) SEMICOLON
minimal(nonempty_list(annotation_or_modifier)) = (* 1 *) PUBLIC
minimal(nonempty_list(annotation)) = (* 2 *) AT IDENTIFIER
minimal(nonempty_list(additional_bound)) = (* 2 *) AND IDENTIFIER
minimal(name) = (* 1 *) IDENTIFIER
minimal(multiplicative_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(multiplicative_expression) = (* 1 *) INTEGER_LITERAL
minimal(modifiers) = (* 1 *) PUBLIC
minimal(method_reference) = (* 3 *) IDENTIFIER COLON_COLON IDENTIFIER
minimal(method_invocation) = (* 3 *) IDENTIFIER LPAREN RPAREN
minimal(method_header) = (* 4 *) BYTE IDENTIFIER LPAREN RPAREN
minimal(method_declarator_head) = (* 2 *) IDENTIFIER LPAREN
minimal(method_declarator) = (* 3 *) IDENTIFIER LPAREN RPAREN
minimal(method_declaration) = (* 5 *) BYTE IDENTIFIER LPAREN RPAREN SEMICOLON
minimal(method_body) = (* 1 *) SEMICOLON
minimal(marker_annotation_body) = (* 1 *) IDENTIFIER
minimal(main) = (* 1 *) EOF
minimal(loption(block_statements)) = (* 0 *)
minimal(local_variable_declaration_statement) = (* 3 *) BYTE IDENTIFIER SEMICOLON
minimal(local_variable_declaration) = (* 2 *) BYTE IDENTIFIER
minimal(literal) = (* 1 *) INTEGER_LITERAL
minimal(list(interface_member_declaration)) = (* 0 *)
minimal(list(class_body_declaration)) = (* 0 *)
minimal(list(annotation_type_member_declaration)) = (* 0 *)
minimal(lambda_parameters) = (* 1 *) IDENTIFIER
minimal(lambda_expression) = (* 3 *) IDENTIFIER MINUS_GT INTEGER_LITERAL
minimal(lambda_e) = (* 3 *) IDENTIFIER MINUS_GT INTEGER_LITERAL
minimal(lambda_body) = (* 1 *) INTEGER_LITERAL
minimal(lambda_b) = (* 1 *) INTEGER_LITERAL
minimal(labeled_statement_no_short_if) = (* 3 *) IDENTIFIER COLON SEMICOLON
minimal(labeled_statement_head) = (* 2 *) IDENTIFIER COLON
minimal(labeled_statement) = (* 3 *) IDENTIFIER COLON SEMICOLON
minimal(javatype_vdid) = (* 2 *) BYTE IDENTIFIER
minimal(interfaces) = (* 2 *) IMPLEMENTS IDENTIFIER
minimal(interface_method_declaration) = (* 5 *) BYTE IDENTIFIER LPAREN RPAREN SEMICOLON
minimal(interface_member_declaration) = (* 1 *) SEMICOLON
minimal(interface_declaration) = (* 4 *) INTERFACE IDENTIFIER LBRACE RBRACE
minimal(interface_body) = (* 2 *) LBRACE RBRACE
minimal(integral_type) = (* 1 *) BYTE
minimal(instanceof_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(instanceof_expression) = (* 1 *) INTEGER_LITERAL
minimal(instance_initializer) = (* 2 *) LBRACE RBRACE
minimal(inclusive_or_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(inclusive_or_expression) = (* 1 *) INTEGER_LITERAL
minimal(import_declaration) = (* 3 *) IMPORT IDENTIFIER SEMICOLON
minimal(if_then_statement) = (* 5 *) IF LPAREN ERROR RPAREN SEMICOLON
minimal(if_then_else_statement_no_short_if) = (* 7 *) IF LPAREN ERROR RPAREN SEMICOLON ELSE SEMICOLON
minimal(if_then_else_statement) = (* 7 *) IF LPAREN ERROR RPAREN SEMICOLON ELSE SEMICOLON
minimal(identifier) = (* 1 *) IDENTIFIER
minimal(formal_parameter) = (* 2 *) BYTE IDENTIFIER
minimal(for_update0) = (* 0 *)
minimal(for_update) = (* 2 *) PLUS_PLUS INTEGER_LITERAL
minimal(for_statement_no_short_if) = (* 6 *) FOR LPAREN SEMICOLON SEMICOLON RPAREN SEMICOLON
minimal(for_statement_head) = (* 2 *) FOR LPAREN
minimal(for_statement) = (* 6 *) FOR LPAREN SEMICOLON SEMICOLON RPAREN SEMICOLON
minimal(for_init_opt) = (* 0 *)
minimal(for_init) = (* 2 *) PLUS_PLUS INTEGER_LITERAL
minimal(floating_point_type) = (* 1 *) FLOAT
minimal(finally) = (* 3 *) FINALLY LBRACE RBRACE
minimal(field_declaration) = (* 3 *) BYTE IDENTIFIER SEMICOLON
minimal(field_access) = (* 3 *) SUPER DOT IDENTIFIER
minimal(extends_interfaces_opt) = (* 0 *)
minimal(expression_statement) = (* 3 *) PLUS_PLUS INTEGER_LITERAL SEMICOLON
minimal(expression_opt) = (* 0 *)
minimal(expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(expression) = (* 1 *) INTEGER_LITERAL
minimal(explicit_constructor_invocation) = (* 4 *) THIS LPAREN RPAREN SEMICOLON
minimal(exclusive_or_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(exclusive_or_expression) = (* 1 *) INTEGER_LITERAL
minimal(equality_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(equality_expression) = (* 1 *) INTEGER_LITERAL
minimal(enum_declaration_head0) = (* 2 *) ENUM IDENTIFIER
minimal(enum_declaration_head) = (* 2 *) ENUM IDENTIFIER
minimal(enum_declaration) = (* 4 *) ENUM IDENTIFIER LBRACE RBRACE
minimal(enum_constants) = (* 1 *) IDENTIFIER
minimal(enum_constant_head) = (* 1 *) IDENTIFIER
minimal(enum_constant) = (* 1 *) IDENTIFIER
minimal(enum_body_declarations0) = (* 0 *)
minimal(enum_body) = (* 2 *) LBRACE RBRACE
minimal(enhanced_for_statement_no_short_if) = (* 8 *) FOR LPAREN BYTE IDENTIFIER COLON ERROR RPAREN SEMICOLON
minimal(enhanced_for_statement) = (* 8 *) FOR LPAREN BYTE IDENTIFIER COLON ERROR RPAREN SEMICOLON
minimal(empty_statement) = (* 1 *) SEMICOLON
minimal(element_value_pair) = (* 3 *) IDENTIFIER EQ INTEGER_LITERAL
minimal(element_value_array_initializer) = (* 2 *) LBRACE RBRACE
minimal(element_value) = (* 1 *) INTEGER_LITERAL
minimal(do_statement) = (* 7 *) DO SEMICOLON WHILE LPAREN INTEGER_LITERAL RPAREN SEMICOLON
minimal(dim_exprs) = (* 3 *) LBRACKET INTEGER_LITERAL RBRACKET
minimal(dim_expr) = (* 3 *) LBRACKET INTEGER_LITERAL RBRACKET
minimal(default_value_opt) = (* 0 *)
minimal(default_value) = (* 2 *) DEFAULT INTEGER_LITERAL
minimal(continue_statement) = (* 2 *) CONTINUE SEMICOLON
minimal(constructor_declarator_head) = (* 2 *) IDENTIFIER LPAREN
minimal(constructor_declarator) = (* 3 *) IDENTIFIER LPAREN RPAREN
minimal(constructor_declaration) = (* 5 *) IDENTIFIER LPAREN RPAREN LBRACE RBRACE
minimal(constructor_body) = (* 2 *) LBRACE RBRACE
minimal(conditional_or_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(conditional_or_expression) = (* 1 *) INTEGER_LITERAL
minimal(conditional_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(conditional_expression) = (* 1 *) INTEGER_LITERAL
minimal(conditional_and_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(conditional_and_expression) = (* 1 *) INTEGER_LITERAL
minimal(compilation_unit) = (* 0 *)
minimal(class_member_declaration) = (* 1 *) SEMICOLON
minimal(class_instance_creation_head_qualified) = (* 3 *) IDENTIFIER DOT NEW
minimal(class_instance_creation_head) = (* 2 *) NEW IDENTIFIER
minimal(class_instance_creation_expression) = (* 4 *) NEW IDENTIFIER LPAREN RPAREN
minimal(class_declaration_head1) = (* 2 *) CLASS IDENTIFIER
minimal(class_declaration_head0) = (* 2 *) CLASS IDENTIFIER
minimal(class_declaration_head) = (* 2 *) CLASS IDENTIFIER
minimal(class_declaration) = (* 4 *) CLASS IDENTIFIER LBRACE RBRACE
minimal(class_body_declaration) = (* 1 *) SEMICOLON
minimal(class_body) = (* 2 *) LBRACE RBRACE
minimal(catch_type) = (* 1 *) IDENTIFIER
minimal(catch_formal_parameter) = (* 2 *) IDENTIFIER IDENTIFIER
minimal(catch_clause_header) = (* 1 *) CATCH
minimal(catch_clause) = (* 7 *) CATCH LPAREN IDENTIFIER IDENTIFIER RPAREN LBRACE RBRACE
minimal(cast_expression) = (* 4 *) LPAREN BYTE RPAREN INTEGER_LITERAL
minimal(break_statement) = (* 2 *) BREAK SEMICOLON
minimal(block_statement) = (* 1 *) SEMICOLON
minimal(block) = (* 2 *) LBRACE RBRACE
minimal(assignment_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(assignment_expression) = (* 1 *) INTEGER_LITERAL
minimal(assignment) = (* 3 *) INTEGER_LITERAL EQ ERROR
minimal(assert_statement) = (* 3 *) ASSERT INTEGER_LITERAL SEMICOLON
minimal(array_initializer) = (* 2 *) LBRACE RBRACE
minimal(array_creation_noinit) = (* 5 *) NEW BYTE LBRACKET INTEGER_LITERAL RBRACKET
minimal(array_creation_init) = (* 6 *) NEW BYTE LBRACKET RBRACKET LBRACE RBRACE
minimal(array_access) = (* 4 *) IDENTIFIER LBRACKET INTEGER_LITERAL RBRACKET
minimal(annotations) = (* 2 *) AT IDENTIFIER
minimal(annotation_type_member_declaration) = (* 1 *) SEMICOLON
minimal(annotation_type_declaration_head) = (* 3 *) AT__INTERFACE INTERFACE IDENTIFIER
minimal(annotation_type_declaration) = (* 5 *) AT__INTERFACE INTERFACE IDENTIFIER LBRACE RBRACE
minimal(annotation_type_body) = (* 2 *) LBRACE RBRACE
minimal(annotation_body) = (* 1 *) IDENTIFIER
minimal(annotation) = (* 2 *) AT IDENTIFIER
minimal(ann_dims) = (* 2 *) LBRACKET RBRACKET
minimal(ann_dim) = (* 2 *) LBRACKET RBRACKET
minimal(and_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(and_expression) = (* 1 *) INTEGER_LITERAL
minimal(adhoc_modifier) = (* 1 *) PUBLIC
minimal(additive_expression_nn) = (* 1 *) INTEGER_LITERAL
minimal(additive_expression) = (* 1 *) INTEGER_LITERAL
minimal(additional_bound_list_1) = (* 3 *) AND IDENTIFIER GT
minimal(additional_bound_list) = (* 2 *) AND IDENTIFIER
minimal(additional_bound_1) = (* 3 *) AND IDENTIFIER GT
minimal(additional_bound) = (* 2 *) AND IDENTIFIER
maximal(wildcard_3) = infinity
maximal(wildcard_2) = infinity
maximal(wildcard_1) = infinity
maximal(wildcard) = infinity
maximal(while_statement_no_short_if) = infinity
maximal(while_statement) = infinity
maximal(void) = 1
maximal(variable_modifier) = infinity
maximal(variable_initializers) = infinity
maximal(variable_initializer) = infinity
maximal(variable_declarator_id) = infinity
maximal(variable_declarator) = infinity
maximal(unary_expression_not_plus_minus_or_lambda_expression) = infinity
maximal(unary_expression_not_plus_minus_nn) = infinity
maximal(unary_expression_not_plus_minus) = infinity
maximal(unary_expression_nn) = infinity
maximal(unary_expression) = infinity
maximal(unann_type) = infinity
maximal(unann_reference_type) = infinity
maximal(unann_primitive_type) = 1
maximal(unann_class_or_interface_type_spec) = infinity
maximal(unann_class_or_interface_type) = infinity
maximal(unann_array_type) = infinity
maximal(type_variable) = infinity
maximal(type_parameters) = infinity
maximal(type_parameter_list_1) = infinity
maximal(type_parameter_list) = infinity
maximal(type_parameter_1) = infinity
maximal(type_parameter) = infinity
maximal(type_import_on_demand_declaration) = infinity
maximal(type_declaration) = infinity
maximal(type_bound_1) = infinity
maximal(type_bound) = infinity
maximal(type_arguments) = infinity
maximal(type_argument_list_3) = infinity
maximal(type_argument_list_2) = infinity
maximal(type_argument_list_1) = infinity
maximal(type_argument_list) = infinity
maximal(type_argument_3) = infinity
maximal(type_argument_2) = infinity
maximal(type_argument_1) = infinity
maximal(type_argument) = infinity
maximal(try_statement) = infinity
maximal(throws) = infinity
maximal(throw_statement) = infinity
maximal(this) = 1
maximal(synchronized_statement) = infinity
maximal(switch_statement) = infinity
maximal(switch_label) = infinity
maximal(switch_block_statement_groups) = infinity
maximal(switch_block_statement_group) = infinity
maximal(switch_block) = infinity
maximal(super_ext) = infinity
maximal(super) = 1
maximal(static_type_import_on_demand_declaration) = infinity
maximal(static_single_type_import_declaration) = infinity
maximal(static_initializer) = infinity
maximal(statement_without_trailing_substatement) = infinity
maximal(statement_no_short_if) = infinity
maximal(statement_expression) = infinity
maximal(statement) = infinity
maximal(single_type_import_declaration) = infinity
maximal(single_element_annotation_body) = infinity
maximal(simple_name) = 1
maximal(shift_expression_nn) = infinity
maximal(shift_expression) = infinity
maximal(separated_nonempty_list(COMMA,variable_declarator)) = infinity
maximal(separated_nonempty_list(COMMA,statement_expression)) = infinity
maximal(separated_nonempty_list(COMMA,interface_type)) = infinity
maximal(separated_nonempty_list(COMMA,identifier)) = infinity
maximal(separated_nonempty_list(COMMA,formal_parameter)) = infinity
maximal(separated_nonempty_list(COMMA,expr_or_err)) = infinity
maximal(separated_nonempty_list(COMMA,element_value_pair)) = infinity
maximal(separated_nonempty_list(COMMA,element_value)) = infinity
maximal(separated_nonempty_list(COMMA,class_type)) = infinity
maximal(return_statement) = infinity
maximal(resource_spec) = infinity
maximal(resource_list) = infinity
maximal(resource) = infinity
maximal(reserved) = 1
maximal(relational_expression_nn) = infinity
maximal(relational_expression) = infinity
maximal(reference_type_3) = infinity
maximal(reference_type_2) = infinity
maximal(reference_type_1) = infinity
maximal(primary_no_new_array) = infinity
maximal(primary) = infinity
maximal(pre_increment_expression) = infinity
maximal(pre_decrement_expression) = infinity
maximal(postfix_expression_nn) = infinity
maximal(postfix_expression) = infinity
maximal(post_increment_expression) = infinity
maximal(post_decrement_expression) = infinity
maximal(partial_block_statement) = infinity
maximal(partial_assert_statement) = infinity
maximal(package_declaration) = infinity
maximal(numeric_type) = 1
maximal(normal_interface_declaration_head1) = infinity
maximal(normal_interface_declaration_head0) = infinity
maximal(normal_interface_declaration_head) = infinity
maximal(normal_interface_declaration) = infinity
maximal(normal_annotation_body) = infinity
maximal(nonempty_list(variable_modifier)) = infinity
maximal(nonempty_list(type_declaration)) = infinity
maximal(nonempty_list(switch_label)) = infinity
maximal(nonempty_list(import_declaration)) = infinity
maximal(nonempty_list(element_value_comma)) = infinity
maximal(nonempty_list(catch_clause)) = infinity
maximal(nonempty_list(block_statement)) = infinity
maximal(nonempty_list(annotation_or_modifier)) = infinity
maximal(nonempty_list(annotation)) = infinity
maximal(nonempty_list(additional_bound)) = infinity
maximal(name) = infinity
maximal(multiplicative_expression_nn) = infinity
maximal(multiplicative_expression) = infinity
maximal(modifiers) = infinity
maximal(method_reference) = infinity
maximal(method_invocation) = infinity
maximal(method_header) = infinity
maximal(method_declarator_head) = 2
maximal(method_declarator) = infinity
maximal(method_declaration) = infinity
maximal(method_body) = infinity
maximal(marker_annotation_body) = infinity
maximal(main) = infinity
maximal(loption(block_statements)) = infinity
maximal(local_variable_declaration_statement) = infinity
maximal(local_variable_declaration) = infinity
maximal(literal) = 1
maximal(list(interface_member_declaration)) = infinity
maximal(list(class_body_declaration)) = infinity
maximal(list(annotation_type_member_declaration)) = infinity
maximal(lambda_parameters) = infinity
maximal(lambda_expression) = infinity
maximal(lambda_e) = infinity
maximal(lambda_body) = infinity
maximal(lambda_b) = infinity
maximal(labeled_statement_no_short_if) = infinity
maximal(labeled_statement_head) = 2
maximal(labeled_statement) = infinity
maximal(javatype_vdid) = infinity
maximal(interfaces) = infinity
maximal(interface_method_declaration) = infinity
maximal(interface_member_declaration) = infinity
maximal(interface_declaration) = infinity
maximal(interface_body) = infinity
maximal(integral_type) = 1
maximal(instanceof_expression_nn) = infinity
maximal(instanceof_expression) = infinity
maximal(instance_initializer) = infinity
maximal(inclusive_or_expression_nn) = infinity
maximal(inclusive_or_expression) = infinity
maximal(import_declaration) = infinity
maximal(if_then_statement) = infinity
maximal(if_then_else_statement_no_short_if) = infinity
maximal(if_then_else_statement) = infinity
maximal(identifier) = 1
maximal(formal_parameter) = infinity
maximal(for_update0) = infinity
maximal(for_update) = infinity
maximal(for_statement_no_short_if) = infinity
maximal(for_statement_head) = 2
maximal(for_statement) = infinity
maximal(for_init_opt) = infinity
maximal(for_init) = infinity
maximal(floating_point_type) = 1
maximal(finally) = infinity
maximal(field_declaration) = infinity
maximal(field_access) = infinity
maximal(extends_interfaces_opt) = infinity
maximal(expression_statement) = infinity
maximal(expression_opt) = infinity
maximal(expression_nn) = infinity
maximal(expression) = infinity
maximal(explicit_constructor_invocation) = infinity
maximal(exclusive_or_expression_nn) = infinity
maximal(exclusive_or_expression) = infinity
maximal(equality_expression_nn) = infinity
maximal(equality_expression) = infinity
maximal(enum_declaration_head0) = infinity
maximal(enum_declaration_head) = infinity
maximal(enum_declaration) = infinity
maximal(enum_constants) = infinity
maximal(enum_constant_head) = infinity
maximal(enum_constant) = infinity
maximal(enum_body_declarations0) = infinity
maximal(enum_body) = infinity
maximal(enhanced_for_statement_no_short_if) = infinity
maximal(enhanced_for_statement) = infinity
maximal(empty_statement) = 1
maximal(element_value_pair) = infinity
maximal(element_value_array_initializer) = infinity
maximal(element_value) = infinity
maximal(do_statement) = infinity
maximal(dim_exprs) = infinity
maximal(dim_expr) = infinity
maximal(default_value_opt) = infinity
maximal(default_value) = infinity
maximal(continue_statement) = 3
maximal(constructor_declarator_head) = 2
maximal(constructor_declarator) = infinity
maximal(constructor_declaration) = infinity
maximal(constructor_body) = infinity
maximal(conditional_or_expression_nn) = infinity
maximal(conditional_or_expression) = infinity
maximal(conditional_expression_nn) = infinity
maximal(conditional_expression) = infinity
maximal(conditional_and_expression_nn) = infinity
maximal(conditional_and_expression) = infinity
maximal(compilation_unit) = infinity
maximal(class_member_declaration) = infinity
maximal(class_instance_creation_head_qualified) = infinity
maximal(class_instance_creation_head) = infinity
maximal(class_instance_creation_expression) = infinity
maximal(class_declaration_head1) = infinity
maximal(class_declaration_head0) = infinity
maximal(class_declaration_head) = infinity
maximal(class_declaration) = infinity
maximal(class_body_declaration) = infinity
maximal(class_body) = infinity
maximal(catch_type) = infinity
maximal(catch_formal_parameter) = infinity
maximal(catch_clause_header) = 1
maximal(catch_clause) = infinity
maximal(cast_expression) = infinity
maximal(break_statement) = 3
maximal(block_statement) = infinity
maximal(block) = infinity
maximal(assignment_expression_nn) = infinity
maximal(assignment_expression) = infinity
maximal(assignment) = infinity
maximal(assert_statement) = infinity
maximal(array_initializer) = infinity
maximal(array_creation_noinit) = infinity
maximal(array_creation_init) = infinity
maximal(array_access) = infinity
maximal(annotations) = infinity
maximal(annotation_type_member_declaration) = infinity
maximal(annotation_type_declaration_head) = infinity
maximal(annotation_type_declaration) = infinity
maximal(annotation_type_body) = infinity
maximal(annotation_body) = infinity
maximal(annotation) = infinity
maximal(ann_dims) = infinity
maximal(ann_dim) = infinity
maximal(and_expression_nn) = infinity
maximal(and_expression) = infinity
maximal(adhoc_modifier) = 1
maximal(additive_expression_nn) = infinity
maximal(additive_expression) = infinity
maximal(additional_bound_list_1) = infinity
maximal(additional_bound_list) = infinity
maximal(additional_bound_1) = infinity
maximal(additional_bound) = infinity
follow(wildcard_3) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(wildcard_2) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(wildcard_1) = THIS SUPER SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LBRACKET LBRACE INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOT COMMA COLON AT AND_AND AND
follow(wildcard) = COMMA
follow(while_statement_no_short_if) = ELSE
follow(while_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(void) = IDENTIFIER DOT
follow(variable_modifier) = SHORT LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE CHAR BYTE BOOLEAN AT
follow(variable_initializers) = RBRACE COMMA
follow(variable_initializer) = SEMICOLON RBRACE COMMA
follow(variable_declarator_id) = SEMICOLON RPAREN LBRACKET EQ COMMA COLON
follow(variable_declarator) = SEMICOLON COMMA
follow(unary_expression_not_plus_minus_or_lambda_expression) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(unary_expression_not_plus_minus_nn) = STAR SLASH RPAREN QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ AND_AND AND
follow(unary_expression_not_plus_minus) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(unary_expression_nn) = STAR SLASH RPAREN QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ AND_AND AND
follow(unary_expression) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(unann_type) = IDENTIFIER ELLIPSIS
follow(unann_reference_type) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR INSTANCEOF IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ EQ_EQ ELLIPSIS COMMA COLON AND_AND AND
follow(unann_primitive_type) = RPAREN LBRACKET IDENTIFIER ELLIPSIS DOT COLON_COLON AT
follow(unann_class_or_interface_type_spec) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR LT LPAREN LBRACKET LBRACE INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ EQ_EQ ELLIPSIS COMMA COLON AT AND_AND AND
follow(unann_class_or_interface_type) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR LPAREN LBRACKET LBRACE INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ EQ_EQ ELLIPSIS COMMA COLON AT AND_AND AND
follow(unann_array_type) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR INSTANCEOF IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ EQ_EQ ELLIPSIS COMMA COLON AND_AND AND
follow(type_variable) = GT EXTENDS COMMA
follow(type_parameters) = VOID SHORT LONG LBRACE INT IMPLEMENTS IDENTIFIER FLOAT EXTENDS ERROR DOUBLE CHAR BYTE BOOLEAN
follow(type_parameter_list_1) = VOID SHORT LONG LBRACE INT IMPLEMENTS IDENTIFIER FLOAT EXTENDS ERROR DOUBLE CHAR BYTE BOOLEAN
follow(type_parameter_list) = COMMA
follow(type_parameter_1) = VOID SHORT LONG LBRACE INT IMPLEMENTS IDENTIFIER FLOAT EXTENDS ERROR DOUBLE CHAR BYTE BOOLEAN
follow(type_parameter) = COMMA
follow(type_import_on_demand_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE IMPORT FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(type_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(type_bound_1) = VOID SHORT LONG LBRACE INT IMPLEMENTS IDENTIFIER FLOAT EXTENDS ERROR DOUBLE CHAR BYTE BOOLEAN
follow(type_bound) = COMMA
follow(type_arguments) = THIS SUPER SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LBRACKET LBRACE INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOT COMMA COLON AT AND_AND AND
follow(type_argument_list_3) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(type_argument_list_2) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(type_argument_list_1) = THIS SUPER SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LBRACKET LBRACE INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOT COMMA COLON AT AND_AND AND
follow(type_argument_list) = COMMA
follow(type_argument_3) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(type_argument_2) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(type_argument_1) = THIS SUPER SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LBRACKET LBRACE INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOT COMMA COLON AT AND_AND AND
follow(type_argument) = COMMA
follow(try_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(throws) = SEMICOLON LBRACE
follow(throw_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(this) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LPAREN LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(synchronized_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(switch_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(switch_label) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(switch_block_statement_groups) = RBRACE DEFAULT__COLON CASE
follow(switch_block_statement_group) = RBRACE DEFAULT__COLON CASE
follow(switch_block) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(super_ext) = LBRACE IMPLEMENTS
follow(super) = LPAREN DOT
follow(static_type_import_on_demand_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE IMPORT FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(static_single_type_import_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE IMPORT FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(static_initializer) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(statement_without_trailing_substatement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(statement_no_short_if) = ELSE
follow(statement_expression) = SEMICOLON RPAREN COMMA
follow(statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(single_type_import_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE IMPORT FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(single_element_annotation_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RPAREN RBRACE QUESTION PUBLIC PROTECTED PRIVATE PACKAGE NATIVE LT LONG LBRACKET INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT COMMA CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(simple_name) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC STAR_EQ STAR SLASH_EQ SLASH SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION PUBLIC PROTECTED PRIVATE PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT PACKAGE OR_OR OR_EQ OR NATIVE MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INTERFACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT FLOAT FINAL EXCLAM_EQ ERROR EQ_EQ EQ ENUM ELLIPSIS DOUBLE DOT DEFAULT COMMA COLON_COLON COLON CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT AND_EQ AND_AND AND ABSTRACT
follow(shift_expression_nn) = RPAREN QUESTION OR_OR OR LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ AND_AND AND
follow(shift_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(separated_nonempty_list(COMMA,variable_declarator)) = SEMICOLON
follow(separated_nonempty_list(COMMA,statement_expression)) = SEMICOLON RPAREN
follow(separated_nonempty_list(COMMA,interface_type)) = LBRACE
follow(separated_nonempty_list(COMMA,identifier)) = RPAREN
follow(separated_nonempty_list(COMMA,formal_parameter)) = RPAREN
follow(separated_nonempty_list(COMMA,expr_or_err)) = RPAREN
follow(separated_nonempty_list(COMMA,element_value_pair)) = RPAREN
follow(separated_nonempty_list(COMMA,element_value)) = RBRACE
follow(separated_nonempty_list(COMMA,class_type)) = SEMICOLON LBRACE
follow(return_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(resource_spec) = LBRACE
follow(resource_list) = SEMICOLON RPAREN
follow(resource) = SEMICOLON RPAREN
follow(reserved) = #
follow(relational_expression_nn) = RPAREN QUESTION OR_OR OR LT_EQ INSTANCEOF HAT GT_EQ EXCLAM_EQ EQ_EQ AND_AND AND
follow(relational_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR LT_EQ LT INSTANCEOF HAT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(reference_type_3) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(reference_type_2) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(reference_type_1) = VOID THIS SUPER SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR NEW LPAREN LONG LBRACKET LBRACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT GT_GT_GT GT_GT GT FLOAT EXTENDS EXCLAM_EQ ERROR EQ_EQ ELLIPSIS DOUBLE DOT COMMA COLON CHAR BYTE BOOLEAN AT AND_AND AND
follow(primary_no_new_array) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(primary) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(pre_increment_expression) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(pre_decrement_expression) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(postfix_expression_nn) = STAR SLASH RPAREN QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ AND_AND AND
follow(postfix_expression) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ COMMA COLON AND_EQ AND_AND AND
follow(post_increment_expression) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ COMMA COLON AND_EQ AND_AND AND
follow(post_decrement_expression) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ COMMA COLON AND_EQ AND_AND AND
follow(partial_block_statement) = #
follow(partial_assert_statement) = #
follow(package_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE IMPORT FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(numeric_type) = RPAREN LBRACKET IDENTIFIER ELLIPSIS DOT COLON_COLON AT
follow(normal_interface_declaration_head1) = LBRACE EXTENDS
follow(normal_interface_declaration_head0) = LT LBRACE EXTENDS
follow(normal_interface_declaration_head) = LBRACE
follow(normal_interface_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR EOF ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(normal_annotation_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RPAREN RBRACE QUESTION PUBLIC PROTECTED PRIVATE PACKAGE NATIVE LT LONG LBRACKET INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT COMMA CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(nonempty_list(variable_modifier)) = SHORT LONG INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN
follow(nonempty_list(type_declaration)) = EOF
follow(nonempty_list(switch_label)) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR ENUM DOUBLE DO DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(nonempty_list(import_declaration)) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(nonempty_list(element_value_comma)) = RBRACE
follow(nonempty_list(catch_clause)) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINALLY FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(nonempty_list(block_statement)) = RBRACE DEFAULT__COLON CASE
follow(nonempty_list(annotation_or_modifier)) = VOID SHORT LT LONG INTERFACE INT IDENTIFIER FLOAT ERROR ENUM DOUBLE CLASS CHAR BYTE BOOLEAN AT__INTERFACE
follow(nonempty_list(annotation)) = SHORT QUESTION PACKAGE LONG LBRACKET INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN
follow(nonempty_list(additional_bound)) = COMMA
follow(name) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC STAR_EQ STAR SLASH_EQ SLASH SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION PUBLIC PROTECTED PRIVATE PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT PACKAGE OR_OR OR_EQ OR NATIVE MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INTERFACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT FLOAT FINAL EXCLAM_EQ ERROR EQ_EQ EQ ENUM ELLIPSIS DOUBLE DOT DEFAULT COMMA COLON_COLON COLON CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT AND_EQ AND_AND AND ABSTRACT
follow(multiplicative_expression_nn) = STAR SLASH RPAREN QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ AND_AND AND
follow(multiplicative_expression) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(modifiers) = VOID SHORT LT LONG INTERFACE INT IDENTIFIER FLOAT ERROR ENUM DOUBLE CLASS CHAR BYTE BOOLEAN AT__INTERFACE
follow(method_reference) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(method_invocation) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(method_header) = SEMICOLON LBRACE
follow(method_declarator_head) = SHORT RPAREN LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE CHAR BYTE BOOLEAN AT
follow(method_declarator) = THROWS SEMICOLON LBRACKET LBRACE
follow(method_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(method_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(marker_annotation_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RPAREN RBRACE QUESTION PUBLIC PROTECTED PRIVATE PACKAGE NATIVE LT LONG LBRACKET INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT COMMA CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(main) = #
follow(loption(block_statements)) = RBRACE
follow(local_variable_declaration_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(local_variable_declaration) = SEMICOLON
follow(literal) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(list(interface_member_declaration)) = RBRACE
follow(list(class_body_declaration)) = RBRACE
follow(list(annotation_type_member_declaration)) = RBRACE
follow(lambda_parameters) = MINUS_GT
follow(lambda_expression) = SEMICOLON RPAREN RBRACKET RBRACE COMMA COLON
follow(lambda_e) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(lambda_body) = SEMICOLON RPAREN RBRACKET RBRACE COMMA COLON
follow(lambda_b) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(labeled_statement_no_short_if) = ELSE
follow(labeled_statement_head) = WHILE VOID TRY TRUE THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STMT SHORT SEMICOLON RETURN PLUS_PLUS NULL NEW MINUS_MINUS LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FALSE ERROR_STMT ERROR DOUBLE DO CONTINUE CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN ASSERT
follow(labeled_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(javatype_vdid) = COLON
follow(interfaces) = LBRACE
follow(interface_method_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE LT LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(interface_member_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE LT LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(interface_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR EOF ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(interface_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR EOF ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(integral_type) = RPAREN LBRACKET IDENTIFIER ELLIPSIS DOT COLON_COLON AT
follow(instanceof_expression_nn) = RPAREN QUESTION OR_OR OR INSTANCEOF HAT EXCLAM_EQ EQ_EQ AND_AND AND
follow(instanceof_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR INSTANCEOF HAT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(instance_initializer) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(inclusive_or_expression_nn) = RPAREN QUESTION OR_OR OR AND_AND
follow(inclusive_or_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR COMMA COLON AND_AND
follow(import_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE INTERFACE IMPORT FINAL EOF ENUM DEFAULT CLASS AT__INTERFACE AT ABSTRACT
follow(if_then_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(if_then_else_statement_no_short_if) = ELSE
follow(if_then_else_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(identifier) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC STAR_EQ STAR SLASH_EQ SLASH SHORT SEMICOLON RPAREN RBRACKET RBRACE QUESTION PUBLIC PROTECTED PRIVATE PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT PACKAGE OR_OR OR_EQ OR NATIVE MINUS_MINUS MINUS_GT MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INTERFACE INT INSTANCEOF IMPLEMENTS IDENTIFIER HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT FLOAT FINAL EXTENDS EXCLAM_EQ ERROR EQ_EQ EQ ENUM ELLIPSIS DOUBLE DOT DEFAULT COMMA COLON_COLON COLON CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT AND_EQ AND_AND AND ABSTRACT
follow(formal_parameter) = RPAREN COMMA
follow(for_update0) = RPAREN
follow(for_update) = RPAREN
follow(for_statement_no_short_if) = ELSE
follow(for_statement_head) = VOLATILE VOID TRUE TRANSIENT THIS SYNCHRONIZED SUPER STRING_LITERAL STRICTFP STATIC SHORT SEMICOLON PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS LPAREN LONG INTEGER_LITERAL INT IDENTIFIER FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR DOUBLE DEFAULT CHARACTER_LITERAL CHAR BYTE BOOLEAN AT ABSTRACT
follow(for_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(for_init_opt) = SEMICOLON
follow(for_init) = SEMICOLON
follow(floating_point_type) = RPAREN LBRACKET IDENTIFIER ELLIPSIS DOT COLON_COLON AT
follow(finally) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(field_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(field_access) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(extends_interfaces_opt) = LBRACE
follow(expression_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(expression_opt) = SEMICOLON
follow(expression_nn) = RPAREN
follow(expression) = SEMICOLON RPAREN RBRACKET RBRACE COMMA COLON
follow(explicit_constructor_invocation) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR ENUM DOUBLE DO DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(exclusive_or_expression_nn) = RPAREN QUESTION OR_OR OR HAT AND_AND
follow(exclusive_or_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR HAT COMMA COLON AND_AND
follow(equality_expression_nn) = RPAREN QUESTION OR_OR OR HAT EXCLAM_EQ EQ_EQ AND_AND AND
follow(equality_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR HAT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(enum_declaration_head0) = LBRACE IMPLEMENTS
follow(enum_declaration_head) = LBRACE
follow(enum_declaration) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LT LPAREN LONG LBRACE INTERFACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP EOF ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT__INTERFACE AT ASSERT ABSTRACT
follow(enum_constants) = SEMICOLON RBRACE COMMA
follow(enum_constant_head) = SEMICOLON RBRACE LBRACE COMMA
follow(enum_constant) = SEMICOLON RBRACE COMMA
follow(enum_body_declarations0) = RBRACE
follow(enum_body) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LT LPAREN LONG LBRACE INTERFACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP EOF ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT__INTERFACE AT ASSERT ABSTRACT
follow(enhanced_for_statement_no_short_if) = ELSE
follow(enhanced_for_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(empty_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(element_value_pair) = RPAREN COMMA
follow(element_value_array_initializer) = SEMICOLON RPAREN RBRACE COMMA
follow(element_value) = SEMICOLON RPAREN RBRACE COMMA
follow(do_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(dim_exprs) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AT AND_EQ AND_AND AND
follow(dim_expr) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AT AND_EQ AND_AND AND
follow(default_value_opt) = SEMICOLON
follow(default_value) = SEMICOLON
follow(continue_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(constructor_declarator_head) = SHORT RPAREN LONG INT IDENTIFIER FLOAT FINAL ERROR DOUBLE CHAR BYTE BOOLEAN AT
follow(constructor_declarator) = THROWS LBRACE
follow(constructor_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(constructor_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(conditional_or_expression_nn) = RPAREN QUESTION OR_OR
follow(conditional_or_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR COMMA COLON
follow(conditional_expression_nn) = RPAREN
follow(conditional_expression) = SEMICOLON RPAREN RBRACKET RBRACE COMMA COLON
follow(conditional_and_expression_nn) = RPAREN QUESTION OR_OR AND_AND
follow(conditional_and_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR COMMA COLON AND_AND
follow(compilation_unit) = EOF
follow(class_member_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(class_instance_creation_head_qualified) = IDENTIFIER
follow(class_instance_creation_head) = LPAREN
follow(class_instance_creation_expression) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(class_declaration_head1) = LBRACE IMPLEMENTS EXTENDS
follow(class_declaration_head0) = LT LBRACE IMPLEMENTS EXTENDS
follow(class_declaration_head) = LBRACE
follow(class_declaration) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LT LPAREN LONG LBRACE INTERFACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP EOF ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT__INTERFACE AT ASSERT ABSTRACT
follow(class_body_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(class_body) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC STAR_EQ STAR SLASH_EQ SLASH SHORT SEMICOLON RPAREN RETURN RBRACKET RBRACE QUESTION PUBLIC PROTECTED PRIVATE PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR NULL NEW NATIVE MINUS_MINUS MINUS_EQ MINUS MARKER LT_LT_EQ LT_LT LT_EQ LT LPAREN LONG LBRACKET LBRACE INTERFACE INTEGER_LITERAL INT INSTANCEOF IF IDENTIFIER HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE EXCLAM_EQ ERROR_STMT ERROR EQ_EQ EQ EOP EOF ENUM DOUBLE DOT DO DEFAULT__COLON DEFAULT CONTINUE COMMA COLON_COLON COLON CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT__INTERFACE AT ASSERT AND_EQ AND_AND AND ABSTRACT
follow(catch_type) = OR IDENTIFIER
follow(catch_formal_parameter) = RPAREN
follow(catch_clause_header) = LPAREN
follow(catch_clause) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINALLY FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CATCH CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(cast_expression) = STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS PERCENT OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(break_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(block_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(block) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC STAR SLASH SHORT SEMICOLON RPAREN RETURN RBRACKET RBRACE QUESTION PUBLIC PROTECTED PRIVATE PLUS_PLUS PLUS PERCENT OR_OR OR NULL NEW NATIVE MINUS_MINUS MINUS MARKER LT_LT LT_EQ LT LPAREN LONG LBRACE INTERFACE INTEGER_LITERAL INT INSTANCEOF IF IDENTIFIER HAT GT_GT_GT GT_GT GT_EQ GT FOR FLOATING_POINT_LITERAL FLOAT FINALLY FINAL FALSE EXCLAM_EQ ERROR_STMT ERROR EQ_EQ EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE COMMA COLON CLASS CHARACTER_LITERAL CHAR CATCH CASE BYTE BREAK BOOLEAN BLOCK_STMT AT__INTERFACE AT ASSERT AND_AND AND ABSTRACT
follow(assignment_expression_nn) = RPAREN
follow(assignment_expression) = SEMICOLON RPAREN RBRACKET RBRACE COMMA COLON
follow(assignment) = SEMICOLON RPAREN RBRACKET RBRACE COMMA COLON
follow(assert_statement) = WHILE VOLATILE VOID TRY TRUE TRANSIENT THROW THIS SYNCHRONIZED SWITCH SUPER STRING_LITERAL STRICTFP STMT STATIC SHORT SEMICOLON RETURN RBRACE PUBLIC PROTECTED PRIVATE PLUS_PLUS NULL NEW NATIVE MINUS_MINUS MARKER LPAREN LONG LBRACE INTEGER_LITERAL INT IF IDENTIFIER FOR FLOATING_POINT_LITERAL FLOAT FINAL FALSE ERROR_STMT ERROR EOP ENUM ELSE DOUBLE DO DEFAULT__COLON DEFAULT CONTINUE CLASS CHARACTER_LITERAL CHAR CASE BYTE BREAK BOOLEAN BLOCK_STMT AT ASSERT ABSTRACT
follow(array_initializer) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(array_creation_noinit) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(array_creation_init) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(array_access) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET INSTANCEOF HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ DOT COMMA COLON_COLON COLON AND_EQ AND_AND AND
follow(annotations) = SHORT QUESTION PACKAGE LONG LBRACKET INT IDENTIFIER FLOAT ERROR DOUBLE CHAR BYTE BOOLEAN
follow(annotation_type_member_declaration) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(annotation_type_declaration_head) = LBRACE
follow(annotation_type_declaration) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR EOF ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(annotation_type_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RBRACE PUBLIC PROTECTED PRIVATE NATIVE MARKER LT LONG LBRACE INTERFACE INT IDENTIFIER FLOAT FINAL ERROR EOF ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(annotation_body) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RPAREN RBRACE QUESTION PUBLIC PROTECTED PRIVATE PACKAGE NATIVE LT LONG LBRACKET INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT COMMA CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(annotation) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON RPAREN RBRACE QUESTION PUBLIC PROTECTED PRIVATE PACKAGE NATIVE LT LONG LBRACKET INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT COMMA CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(ann_dims) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET LBRACE INSTANCEOF IDENTIFIER HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ ELLIPSIS DOT DEFAULT COMMA COLON_COLON COLON AT AND_EQ AND_AND AND
follow(ann_dim) = STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS_PLUS PLUS_EQ PLUS PERCENT_EQ PERCENT OR_OR OR_EQ OR MINUS_MINUS MINUS_EQ MINUS LT_LT_EQ LT_LT LT_EQ LT LBRACKET LBRACE INSTANCEOF IDENTIFIER HAT_EQ HAT GT_GT_GT_EQ GT_GT_GT GT_GT_EQ GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ EQ ELLIPSIS DOT DEFAULT COMMA COLON_COLON COLON AT AND_EQ AND_AND AND
follow(and_expression_nn) = RPAREN QUESTION OR_OR OR HAT AND_AND AND
follow(and_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION OR_OR OR HAT COMMA COLON AND_AND AND
follow(adhoc_modifier) = VOLATILE VOID TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LT LONG INTERFACE INT IDENTIFIER FLOAT FINAL ERROR ENUM DOUBLE DEFAULT CLASS CHAR BYTE BOOLEAN AT__INTERFACE AT ABSTRACT
follow(additive_expression_nn) = RPAREN QUESTION PLUS OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ AND_AND AND
follow(additive_expression) = SEMICOLON RPAREN RBRACKET RBRACE QUESTION PLUS OR_OR OR MINUS LT_LT LT_EQ LT INSTANCEOF HAT GT_GT_GT GT_GT GT_EQ GT EXCLAM_EQ EQ_EQ COMMA COLON AND_AND AND
follow(additional_bound_list_1) = VOID SHORT LONG LBRACE INT IMPLEMENTS IDENTIFIER FLOAT EXTENDS ERROR DOUBLE CHAR BYTE BOOLEAN
follow(additional_bound_list) = COMMA
follow(additional_bound_1) = VOID SHORT LONG LBRACE INT IMPLEMENTS IDENTIFIER FLOAT EXTENDS ERROR DOUBLE CHAR BYTE BOOLEAN
follow(additional_bound) = COMMA AND
Built an LR(0) automaton with 1472 states.
The grammar is not SLR(1) -- 23 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 1528 states.
587 out of 1528 states have a default reduction.
The action table is 183360 entries; 12226 non-zero; 12527 compressed.
The action table occupies roughly 25144 bytes.
The goto table is 394224 entries; 11109 non-zero; 29372 compressed.
The goto table occupies roughly 58832 bytes.
The error table occupies roughly 22952 bytes.
The default_reduction table occupies roughly 3088 bytes.
The lhs table occupies roughly 1632 bytes.
The trace table occupies roughly 8 bytes.
